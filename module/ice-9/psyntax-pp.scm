(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(let ((#{gen-label _hoQGWMnyQPAh3k2jhWHTD}# (if #f #f))
      (#{transformer-environment _hoQGWMnyQPAh3k2jhWHTX}#
        (if #f #f)))
  (letrec*
    ((#{top-level-eval-hook _hoQGWMnyQPAh3k2jhWHSZ}#
       (lambda (#{x _hoQGWMnyQPAh3k2jhWMnv}#
                #{mod _hoQGWMnyQPAh3k2jhWMnw}#)
         (primitive-eval #{x _hoQGWMnyQPAh3k2jhWMnv}#)))
     (#{get-global-definition-hook _hoQGWMnyQPAh3k2jhWHSc}#
       (lambda (#{symbol _hoQGWMnyQPAh3k2jhWJ@F}#
                #{module _hoQGWMnyQPAh3k2jhWJ@G}#)
         (begin
           (if (if (not #{module _hoQGWMnyQPAh3k2jhWJ@G}#)
                 (current-module)
                 #f)
             (warn "module system is booted, we should have a module"
                   #{symbol _hoQGWMnyQPAh3k2jhWJ@F}#))
           (let ((#{v _hoQGWMnyQPAh3k2jhWJ@H}#
                   (module-variable
                     (if #{module _hoQGWMnyQPAh3k2jhWJ@G}#
                       (resolve-module
                         (cdr #{module _hoQGWMnyQPAh3k2jhWJ@G}#))
                       (current-module))
                     #{symbol _hoQGWMnyQPAh3k2jhWJ@F}#)))
             (if #{v _hoQGWMnyQPAh3k2jhWJ@H}#
               (if (variable-bound? #{v _hoQGWMnyQPAh3k2jhWJ@H}#)
                 (let ((#{val _hoQGWMnyQPAh3k2jhWJ@J}#
                         (variable-ref #{v _hoQGWMnyQPAh3k2jhWJ@H}#)))
                   (if (macro? #{val _hoQGWMnyQPAh3k2jhWJ@J}#)
                     (if (macro-type #{val _hoQGWMnyQPAh3k2jhWJ@J}#)
                       (cons (macro-type #{val _hoQGWMnyQPAh3k2jhWJ@J}#)
                             (macro-binding #{val _hoQGWMnyQPAh3k2jhWJ@J}#))
                       #f)
                     #f))
                 #f)
               #f)))))
     (#{maybe-name-value! _hoQGWMnyQPAh3k2jhWHSe}#
       (lambda (#{name _hoQGWMnyQPAh3k2jhWKDe}#
                #{val _hoQGWMnyQPAh3k2jhWKDf}#)
         (if (if (struct? #{val _hoQGWMnyQPAh3k2jhWKDf}#)
               (eq? (struct-vtable #{val _hoQGWMnyQPAh3k2jhWKDf}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta _hoQGWMnyQPAh3k2jhWKDm}#
                   (struct-ref #{val _hoQGWMnyQPAh3k2jhWKDf}# 1)))
             (if (not (assq 'name #{meta _hoQGWMnyQPAh3k2jhWKDm}#))
               (let ((#{v _hoQGWMnyQPAh3k2jhWKDr}#
                       (cons (cons 'name #{name _hoQGWMnyQPAh3k2jhWKDe}#)
                             #{meta _hoQGWMnyQPAh3k2jhWKDm}#)))
                 (struct-set!
                   #{val _hoQGWMnyQPAh3k2jhWKDf}#
                   1
                   #{v _hoQGWMnyQPAh3k2jhWKDr}#)))))))
     (#{build-application _hoQGWMnyQPAh3k2jhWHSg}#
       (lambda (#{source _hoQGWMnyQPAh3k2jhWJ@L}#
                #{fun-exp _hoQGWMnyQPAh3k2jhWJ@M}#
                #{arg-exps _hoQGWMnyQPAh3k2jhWJ@N}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 11)
           #{source _hoQGWMnyQPAh3k2jhWJ@L}#
           #{fun-exp _hoQGWMnyQPAh3k2jhWJ@M}#
           #{arg-exps _hoQGWMnyQPAh3k2jhWJ@N}#)))
     (#{build-conditional _hoQGWMnyQPAh3k2jhWHSh}#
       (lambda (#{source _hoQGWMnyQPAh3k2jhWJ@T}#
                #{test-exp _hoQGWMnyQPAh3k2jhWJ@U}#
                #{then-exp _hoQGWMnyQPAh3k2jhWJ@V}#
                #{else-exp _hoQGWMnyQPAh3k2jhWJ@W}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 10)
           #{source _hoQGWMnyQPAh3k2jhWJ@T}#
           #{test-exp _hoQGWMnyQPAh3k2jhWJ@U}#
           #{then-exp _hoQGWMnyQPAh3k2jhWJ@V}#
           #{else-exp _hoQGWMnyQPAh3k2jhWJ@W}#)))
     (#{build-dynlet _hoQGWMnyQPAh3k2jhWHSi}#
       (lambda (#{source _hoQGWMnyQPAh3k2jhWJ@d}#
                #{fluids _hoQGWMnyQPAh3k2jhWJ@e}#
                #{vals _hoQGWMnyQPAh3k2jhWJ@f}#
                #{body _hoQGWMnyQPAh3k2jhWJ@g}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 17)
           #{source _hoQGWMnyQPAh3k2jhWJ@d}#
           #{fluids _hoQGWMnyQPAh3k2jhWJ@e}#
           #{vals _hoQGWMnyQPAh3k2jhWJ@f}#
           #{body _hoQGWMnyQPAh3k2jhWJ@g}#)))
     (#{build-lexical-reference _hoQGWMnyQPAh3k2jhWHSj}#
       (lambda (#{type _hoQGWMnyQPAh3k2jhWMnx}#
                #{source _hoQGWMnyQPAh3k2jhWMny}#
                #{name _hoQGWMnyQPAh3k2jhWMnz}#
                #{var _hoQGWMnyQPAh3k2jhWMn0}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{source _hoQGWMnyQPAh3k2jhWMny}#
           #{name _hoQGWMnyQPAh3k2jhWMnz}#
           #{var _hoQGWMnyQPAh3k2jhWMn0}#)))
     (#{build-lexical-assignment _hoQGWMnyQPAh3k2jhWHSk}#
       (lambda (#{source _hoQGWMnyQPAh3k2jhWJ@n}#
                #{name _hoQGWMnyQPAh3k2jhWJ@o}#
                #{var _hoQGWMnyQPAh3k2jhWJ@p}#
                #{exp _hoQGWMnyQPAh3k2jhWJ@q}#)
         (begin
           (if (if (struct? #{exp _hoQGWMnyQPAh3k2jhWJ@q}#)
                 (eq? (struct-vtable #{exp _hoQGWMnyQPAh3k2jhWJ@q}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta _hoQGWMnyQPAh3k2jhWJ@6}#
                     (struct-ref #{exp _hoQGWMnyQPAh3k2jhWJ@q}# 1)))
               (if (not (assq 'name #{meta _hoQGWMnyQPAh3k2jhWJ@6}#))
                 (let ((#{v _hoQGWMnyQPAh3k2jhWKAB}#
                         (cons (cons 'name #{name _hoQGWMnyQPAh3k2jhWJ@o}#)
                               #{meta _hoQGWMnyQPAh3k2jhWJ@6}#)))
                   (struct-set!
                     #{exp _hoQGWMnyQPAh3k2jhWJ@q}#
                     1
                     #{v _hoQGWMnyQPAh3k2jhWKAB}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 4)
             #{source _hoQGWMnyQPAh3k2jhWJ@n}#
             #{name _hoQGWMnyQPAh3k2jhWJ@o}#
             #{var _hoQGWMnyQPAh3k2jhWJ@p}#
             #{exp _hoQGWMnyQPAh3k2jhWJ@q}#))))
     (#{analyze-variable _hoQGWMnyQPAh3k2jhWHSl}#
       (lambda (#{mod _hoQGWMnyQPAh3k2jhWMn6}#
                #{var _hoQGWMnyQPAh3k2jhWMn7}#
                #{modref-cont _hoQGWMnyQPAh3k2jhWMn8}#
                #{bare-cont _hoQGWMnyQPAh3k2jhWMn9}#)
         (if (not #{mod _hoQGWMnyQPAh3k2jhWMn6}#)
           (#{bare-cont _hoQGWMnyQPAh3k2jhWMn9}#
             #{var _hoQGWMnyQPAh3k2jhWMn7}#)
           (let ((#{kind _hoQGWMnyQPAh3k2jhWMn$}#
                   (car #{mod _hoQGWMnyQPAh3k2jhWMn6}#))
                 (#{mod _hoQGWMnyQPAh3k2jhWMn@}#
                   (cdr #{mod _hoQGWMnyQPAh3k2jhWMn6}#)))
             (if (eqv? #{kind _hoQGWMnyQPAh3k2jhWMn$}# 'public)
               (#{modref-cont _hoQGWMnyQPAh3k2jhWMn8}#
                 #{mod _hoQGWMnyQPAh3k2jhWMn@}#
                 #{var _hoQGWMnyQPAh3k2jhWMn7}#
                 #t)
               (if (eqv? #{kind _hoQGWMnyQPAh3k2jhWMn$}# 'private)
                 (if (not (equal?
                            #{mod _hoQGWMnyQPAh3k2jhWMn@}#
                            (module-name (current-module))))
                   (#{modref-cont _hoQGWMnyQPAh3k2jhWMn8}#
                     #{mod _hoQGWMnyQPAh3k2jhWMn@}#
                     #{var _hoQGWMnyQPAh3k2jhWMn7}#
                     #f)
                   (#{bare-cont _hoQGWMnyQPAh3k2jhWMn9}#
                     #{var _hoQGWMnyQPAh3k2jhWMn7}#))
                 (if (eqv? #{kind _hoQGWMnyQPAh3k2jhWMn$}# 'bare)
                   (#{bare-cont _hoQGWMnyQPAh3k2jhWMn9}#
                     #{var _hoQGWMnyQPAh3k2jhWMn7}#)
                   (if (eqv? #{kind _hoQGWMnyQPAh3k2jhWMn$}# 'hygiene)
                     (if (if (not (equal?
                                    #{mod _hoQGWMnyQPAh3k2jhWMn@}#
                                    (module-name (current-module))))
                           (module-variable
                             (resolve-module #{mod _hoQGWMnyQPAh3k2jhWMn@}#)
                             #{var _hoQGWMnyQPAh3k2jhWMn7}#)
                           #f)
                       (#{modref-cont _hoQGWMnyQPAh3k2jhWMn8}#
                         #{mod _hoQGWMnyQPAh3k2jhWMn@}#
                         #{var _hoQGWMnyQPAh3k2jhWMn7}#
                         #f)
                       (#{bare-cont _hoQGWMnyQPAh3k2jhWMn9}#
                         #{var _hoQGWMnyQPAh3k2jhWMn7}#))
                     (syntax-violation
                       #f
                       "bad module kind"
                       #{var _hoQGWMnyQPAh3k2jhWMn7}#
                       #{mod _hoQGWMnyQPAh3k2jhWMn@}#)))))))))
     (#{build-global-reference _hoQGWMnyQPAh3k2jhWHSm}#
       (lambda (#{source _hoQGWMnyQPAh3k2jhWMoO}#
                #{var _hoQGWMnyQPAh3k2jhWMoP}#
                #{mod _hoQGWMnyQPAh3k2jhWMoQ}#)
         (#{analyze-variable _hoQGWMnyQPAh3k2jhWHSl}#
           #{mod _hoQGWMnyQPAh3k2jhWMoQ}#
           #{var _hoQGWMnyQPAh3k2jhWMoP}#
           (lambda (#{mod _hoQGWMnyQPAh3k2jhWMoT}#
                    #{var _hoQGWMnyQPAh3k2jhWMoU}#
                    #{public? _hoQGWMnyQPAh3k2jhWMoV}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 5)
               #{source _hoQGWMnyQPAh3k2jhWMoO}#
               #{mod _hoQGWMnyQPAh3k2jhWMoT}#
               #{var _hoQGWMnyQPAh3k2jhWMoU}#
               #{public? _hoQGWMnyQPAh3k2jhWMoV}#))
           (lambda (#{var _hoQGWMnyQPAh3k2jhWMod}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 7)
               #{source _hoQGWMnyQPAh3k2jhWMoO}#
               #{var _hoQGWMnyQPAh3k2jhWMod}#)))))
     (#{build-global-assignment _hoQGWMnyQPAh3k2jhWHSn}#
       (lambda (#{source _hoQGWMnyQPAh3k2jhWKAK}#
                #{var _hoQGWMnyQPAh3k2jhWKAL}#
                #{exp _hoQGWMnyQPAh3k2jhWKAM}#
                #{mod _hoQGWMnyQPAh3k2jhWKAN}#)
         (begin
           (if (if (struct? #{exp _hoQGWMnyQPAh3k2jhWKAM}#)
                 (eq? (struct-vtable #{exp _hoQGWMnyQPAh3k2jhWKAM}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta _hoQGWMnyQPAh3k2jhWKAd}#
                     (struct-ref #{exp _hoQGWMnyQPAh3k2jhWKAM}# 1)))
               (if (not (assq 'name #{meta _hoQGWMnyQPAh3k2jhWKAd}#))
                 (let ((#{v _hoQGWMnyQPAh3k2jhWKAk}#
                         (cons (cons 'name #{var _hoQGWMnyQPAh3k2jhWKAL}#)
                               #{meta _hoQGWMnyQPAh3k2jhWKAd}#)))
                   (struct-set!
                     #{exp _hoQGWMnyQPAh3k2jhWKAM}#
                     1
                     #{v _hoQGWMnyQPAh3k2jhWKAk}#)))))
           (#{analyze-variable _hoQGWMnyQPAh3k2jhWHSl}#
             #{mod _hoQGWMnyQPAh3k2jhWKAN}#
             #{var _hoQGWMnyQPAh3k2jhWKAL}#
             (lambda (#{mod _hoQGWMnyQPAh3k2jhWKAp}#
                      #{var _hoQGWMnyQPAh3k2jhWKAq}#
                      #{public? _hoQGWMnyQPAh3k2jhWKAr}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 6)
                 #{source _hoQGWMnyQPAh3k2jhWKAK}#
                 #{mod _hoQGWMnyQPAh3k2jhWKAp}#
                 #{var _hoQGWMnyQPAh3k2jhWKAq}#
                 #{public? _hoQGWMnyQPAh3k2jhWKAr}#
                 #{exp _hoQGWMnyQPAh3k2jhWKAM}#))
             (lambda (#{var _hoQGWMnyQPAh3k2jhWKAz}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 8)
                 #{source _hoQGWMnyQPAh3k2jhWKAK}#
                 #{var _hoQGWMnyQPAh3k2jhWKAz}#
                 #{exp _hoQGWMnyQPAh3k2jhWKAM}#))))))
     (#{build-global-definition _hoQGWMnyQPAh3k2jhWHSo}#
       (lambda (#{source _hoQGWMnyQPAh3k2jhWMoj}#
                #{var _hoQGWMnyQPAh3k2jhWMok}#
                #{exp _hoQGWMnyQPAh3k2jhWMol}#)
         (begin
           (if (if (struct? #{exp _hoQGWMnyQPAh3k2jhWMol}#)
                 (eq? (struct-vtable #{exp _hoQGWMnyQPAh3k2jhWMol}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta _hoQGWMnyQPAh3k2jhWMo1}#
                     (struct-ref #{exp _hoQGWMnyQPAh3k2jhWMol}# 1)))
               (if (not (assq 'name #{meta _hoQGWMnyQPAh3k2jhWMo1}#))
                 (let ((#{v _hoQGWMnyQPAh3k2jhWMo8}#
                         (cons (cons 'name #{var _hoQGWMnyQPAh3k2jhWMok}#)
                               #{meta _hoQGWMnyQPAh3k2jhWMo1}#)))
                   (struct-set!
                     #{exp _hoQGWMnyQPAh3k2jhWMol}#
                     1
                     #{v _hoQGWMnyQPAh3k2jhWMo8}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #{source _hoQGWMnyQPAh3k2jhWMoj}#
             #{var _hoQGWMnyQPAh3k2jhWMok}#
             #{exp _hoQGWMnyQPAh3k2jhWMol}#))))
     (#{build-simple-lambda _hoQGWMnyQPAh3k2jhWHSp}#
       (lambda (#{src _hoQGWMnyQPAh3k2jhWKA5}#
                #{req _hoQGWMnyQPAh3k2jhWKA6}#
                #{rest _hoQGWMnyQPAh3k2jhWKA7}#
                #{vars _hoQGWMnyQPAh3k2jhWKA8}#
                #{meta _hoQGWMnyQPAh3k2jhWKA9}#
                #{exp _hoQGWMnyQPAh3k2jhWKA$}#)
         (let ((#{body _hoQGWMnyQPAh3k2jhWKBE}#
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 14)
                   #{src _hoQGWMnyQPAh3k2jhWKA5}#
                   #{req _hoQGWMnyQPAh3k2jhWKA6}#
                   #f
                   #{rest _hoQGWMnyQPAh3k2jhWKA7}#
                   #f
                   '()
                   #{vars _hoQGWMnyQPAh3k2jhWKA8}#
                   #{exp _hoQGWMnyQPAh3k2jhWKA$}#
                   #f)))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             #{src _hoQGWMnyQPAh3k2jhWKA5}#
             #{meta _hoQGWMnyQPAh3k2jhWKA9}#
             #{body _hoQGWMnyQPAh3k2jhWKBE}#))))
     (#{build-sequence _hoQGWMnyQPAh3k2jhWHSu}#
       (lambda (#{src _hoQGWMnyQPAh3k2jhWMpE}#
                #{exps _hoQGWMnyQPAh3k2jhWMpF}#)
         (if (null? (cdr #{exps _hoQGWMnyQPAh3k2jhWMpF}#))
           (car #{exps _hoQGWMnyQPAh3k2jhWMpF}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 12)
             #{src _hoQGWMnyQPAh3k2jhWMpE}#
             #{exps _hoQGWMnyQPAh3k2jhWMpF}#))))
     (#{build-let _hoQGWMnyQPAh3k2jhWHSv}#
       (lambda (#{src _hoQGWMnyQPAh3k2jhWKBQ}#
                #{ids _hoQGWMnyQPAh3k2jhWKBR}#
                #{vars _hoQGWMnyQPAh3k2jhWKBS}#
                #{val-exps _hoQGWMnyQPAh3k2jhWKBT}#
                #{body-exp _hoQGWMnyQPAh3k2jhWKBU}#)
         (begin
           (for-each
             #{maybe-name-value! _hoQGWMnyQPAh3k2jhWHSe}#
             #{ids _hoQGWMnyQPAh3k2jhWKBR}#
             #{val-exps _hoQGWMnyQPAh3k2jhWKBT}#)
           (if (null? #{vars _hoQGWMnyQPAh3k2jhWKBS}#)
             #{body-exp _hoQGWMnyQPAh3k2jhWKBU}#
             (make-struct/no-tail
               (vector-ref %expanded-vtables 15)
               #{src _hoQGWMnyQPAh3k2jhWKBQ}#
               #{ids _hoQGWMnyQPAh3k2jhWKBR}#
               #{vars _hoQGWMnyQPAh3k2jhWKBS}#
               #{val-exps _hoQGWMnyQPAh3k2jhWKBT}#
               #{body-exp _hoQGWMnyQPAh3k2jhWKBU}#)))))
     (#{build-named-let _hoQGWMnyQPAh3k2jhWHSw}#
       (lambda (#{src _hoQGWMnyQPAh3k2jhWKBs}#
                #{ids _hoQGWMnyQPAh3k2jhWKBt}#
                #{vars _hoQGWMnyQPAh3k2jhWKBu}#
                #{val-exps _hoQGWMnyQPAh3k2jhWKBv}#
                #{body-exp _hoQGWMnyQPAh3k2jhWKBw}#)
         (let ((#{f _hoQGWMnyQPAh3k2jhWKBx}#
                 (car #{vars _hoQGWMnyQPAh3k2jhWKBu}#))
               (#{f-name _hoQGWMnyQPAh3k2jhWKBy}#
                 (car #{ids _hoQGWMnyQPAh3k2jhWKBt}#))
               (#{vars _hoQGWMnyQPAh3k2jhWKBz}#
                 (cdr #{vars _hoQGWMnyQPAh3k2jhWKBu}#))
               (#{ids _hoQGWMnyQPAh3k2jhWKB0}#
                 (cdr #{ids _hoQGWMnyQPAh3k2jhWKBt}#)))
           (let ((#{proc _hoQGWMnyQPAh3k2jhWKB1}#
                   (let ((#{body _hoQGWMnyQPAh3k2jhWKCJ}#
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 14)
                             #{src _hoQGWMnyQPAh3k2jhWKBs}#
                             #{ids _hoQGWMnyQPAh3k2jhWKB0}#
                             #f
                             #f
                             #f
                             '()
                             #{vars _hoQGWMnyQPAh3k2jhWKBz}#
                             #{body-exp _hoQGWMnyQPAh3k2jhWKBw}#
                             #f)))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 13)
                       #{src _hoQGWMnyQPAh3k2jhWKBs}#
                       '()
                       #{body _hoQGWMnyQPAh3k2jhWKCJ}#))))
             (begin
               (if (if (struct? #{proc _hoQGWMnyQPAh3k2jhWKB1}#)
                     (eq? (struct-vtable #{proc _hoQGWMnyQPAh3k2jhWKB1}#)
                          (vector-ref %expanded-vtables 13))
                     #f)
                 (let ((#{meta _hoQGWMnyQPAh3k2jhWKCh}#
                         (struct-ref #{proc _hoQGWMnyQPAh3k2jhWKB1}# 1)))
                   (if (not (assq 'name #{meta _hoQGWMnyQPAh3k2jhWKCh}#))
                     (let ((#{v _hoQGWMnyQPAh3k2jhWKCo}#
                             (cons (cons 'name
                                         #{f-name _hoQGWMnyQPAh3k2jhWKBy}#)
                                   #{meta _hoQGWMnyQPAh3k2jhWKCh}#)))
                       (struct-set!
                         #{proc _hoQGWMnyQPAh3k2jhWKB1}#
                         1
                         #{v _hoQGWMnyQPAh3k2jhWKCo}#)))))
               (for-each
                 #{maybe-name-value! _hoQGWMnyQPAh3k2jhWHSe}#
                 #{ids _hoQGWMnyQPAh3k2jhWKB0}#
                 #{val-exps _hoQGWMnyQPAh3k2jhWKBv}#)
               (let ((#{names _hoQGWMnyQPAh3k2jhWKDA}#
                       (list #{f-name _hoQGWMnyQPAh3k2jhWKBy}#))
                     (#{gensyms _hoQGWMnyQPAh3k2jhWKDB}#
                       (list #{f _hoQGWMnyQPAh3k2jhWKBx}#))
                     (#{vals _hoQGWMnyQPAh3k2jhWKDC}#
                       (list #{proc _hoQGWMnyQPAh3k2jhWKB1}#))
                     (#{body _hoQGWMnyQPAh3k2jhWKDD}#
                       (let ((#{fun-exp _hoQGWMnyQPAh3k2jhWKDH}#
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 3)
                                 #{src _hoQGWMnyQPAh3k2jhWKBs}#
                                 #{f-name _hoQGWMnyQPAh3k2jhWKBy}#
                                 #{f _hoQGWMnyQPAh3k2jhWKBx}#)))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #{src _hoQGWMnyQPAh3k2jhWKBs}#
                           #{fun-exp _hoQGWMnyQPAh3k2jhWKDH}#
                           #{val-exps _hoQGWMnyQPAh3k2jhWKBv}#))))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 16)
                   #{src _hoQGWMnyQPAh3k2jhWKBs}#
                   #f
                   #{names _hoQGWMnyQPAh3k2jhWKDA}#
                   #{gensyms _hoQGWMnyQPAh3k2jhWKDB}#
                   #{vals _hoQGWMnyQPAh3k2jhWKDC}#
                   #{body _hoQGWMnyQPAh3k2jhWKDD}#)))))))
     (#{build-letrec _hoQGWMnyQPAh3k2jhWHSx}#
       (lambda (#{src _hoQGWMnyQPAh3k2jhWKDX}#
                #{in-order? _hoQGWMnyQPAh3k2jhWKDY}#
                #{ids _hoQGWMnyQPAh3k2jhWKDZ}#
                #{vars _hoQGWMnyQPAh3k2jhWKDa}#
                #{val-exps _hoQGWMnyQPAh3k2jhWKDb}#
                #{body-exp _hoQGWMnyQPAh3k2jhWKDc}#)
         (if (null? #{vars _hoQGWMnyQPAh3k2jhWKDa}#)
           #{body-exp _hoQGWMnyQPAh3k2jhWKDc}#
           (begin
             (for-each
               #{maybe-name-value! _hoQGWMnyQPAh3k2jhWHSe}#
               #{ids _hoQGWMnyQPAh3k2jhWKDZ}#
               #{val-exps _hoQGWMnyQPAh3k2jhWKDb}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 16)
               #{src _hoQGWMnyQPAh3k2jhWKDX}#
               #{in-order? _hoQGWMnyQPAh3k2jhWKDY}#
               #{ids _hoQGWMnyQPAh3k2jhWKDZ}#
               #{vars _hoQGWMnyQPAh3k2jhWKDa}#
               #{val-exps _hoQGWMnyQPAh3k2jhWKDb}#
               #{body-exp _hoQGWMnyQPAh3k2jhWKDc}#)))))
     (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
       (lambda (#{x _hoQGWMnyQPAh3k2jhWKD2}#)
         (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWKD2}#)
               (if (= (vector-length #{x _hoQGWMnyQPAh3k2jhWKD2}#)
                      4)
                 (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWKD2}# 0)
                      'syntax-object)
                 #f)
               #f)
           (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
             (vector-ref #{x _hoQGWMnyQPAh3k2jhWKD2}# 1))
           (if (pair? #{x _hoQGWMnyQPAh3k2jhWKD2}#)
             (let ((#{props _hoQGWMnyQPAh3k2jhWKEF}#
                     (source-properties #{x _hoQGWMnyQPAh3k2jhWKD2}#)))
               (if (pair? #{props _hoQGWMnyQPAh3k2jhWKEF}#)
                 #{props _hoQGWMnyQPAh3k2jhWKEF}#
                 #f))
             #f))))
     (#{extend-env _hoQGWMnyQPAh3k2jhWHS7}#
       (lambda (#{labels _hoQGWMnyQPAh3k2jhWKEH}#
                #{bindings _hoQGWMnyQPAh3k2jhWKEI}#
                #{r _hoQGWMnyQPAh3k2jhWKEJ}#)
         (if (null? #{labels _hoQGWMnyQPAh3k2jhWKEH}#)
           #{r _hoQGWMnyQPAh3k2jhWKEJ}#
           (#{extend-env _hoQGWMnyQPAh3k2jhWHS7}#
             (cdr #{labels _hoQGWMnyQPAh3k2jhWKEH}#)
             (cdr #{bindings _hoQGWMnyQPAh3k2jhWKEI}#)
             (cons (cons (car #{labels _hoQGWMnyQPAh3k2jhWKEH}#)
                         (car #{bindings _hoQGWMnyQPAh3k2jhWKEI}#))
                   #{r _hoQGWMnyQPAh3k2jhWKEJ}#)))))
     (#{extend-var-env _hoQGWMnyQPAh3k2jhWHS8}#
       (lambda (#{labels _hoQGWMnyQPAh3k2jhWKEK}#
                #{vars _hoQGWMnyQPAh3k2jhWKEL}#
                #{r _hoQGWMnyQPAh3k2jhWKEM}#)
         (if (null? #{labels _hoQGWMnyQPAh3k2jhWKEK}#)
           #{r _hoQGWMnyQPAh3k2jhWKEM}#
           (#{extend-var-env _hoQGWMnyQPAh3k2jhWHS8}#
             (cdr #{labels _hoQGWMnyQPAh3k2jhWKEK}#)
             (cdr #{vars _hoQGWMnyQPAh3k2jhWKEL}#)
             (cons (cons (car #{labels _hoQGWMnyQPAh3k2jhWKEK}#)
                         (cons 'lexical
                               (car #{vars _hoQGWMnyQPAh3k2jhWKEL}#)))
                   #{r _hoQGWMnyQPAh3k2jhWKEM}#)))))
     (#{macros-only-env _hoQGWMnyQPAh3k2jhWHS9}#
       (lambda (#{r _hoQGWMnyQPAh3k2jhWKEN}#)
         (if (null? #{r _hoQGWMnyQPAh3k2jhWKEN}#)
           '()
           (let ((#{a _hoQGWMnyQPAh3k2jhWKEO}#
                   (car #{r _hoQGWMnyQPAh3k2jhWKEN}#)))
             (if (eq? (car (cdr #{a _hoQGWMnyQPAh3k2jhWKEO}#))
                      'macro)
               (cons #{a _hoQGWMnyQPAh3k2jhWKEO}#
                     (#{macros-only-env _hoQGWMnyQPAh3k2jhWHS9}#
                       (cdr #{r _hoQGWMnyQPAh3k2jhWKEN}#)))
               (#{macros-only-env _hoQGWMnyQPAh3k2jhWHS9}#
                 (cdr #{r _hoQGWMnyQPAh3k2jhWKEN}#)))))))
     (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
       (lambda (#{type _hoQGWMnyQPAh3k2jhWKEQ}#
                #{sym _hoQGWMnyQPAh3k2jhWKER}#
                #{val _hoQGWMnyQPAh3k2jhWKES}#)
         (module-define!
           (current-module)
           #{sym _hoQGWMnyQPAh3k2jhWKER}#
           (make-syntax-transformer
             #{sym _hoQGWMnyQPAh3k2jhWKER}#
             #{type _hoQGWMnyQPAh3k2jhWKEQ}#
             #{val _hoQGWMnyQPAh3k2jhWKES}#))))
     (#{id? _hoQGWMnyQPAh3k2jhWHTB}#
       (lambda (#{x _hoQGWMnyQPAh3k2jhWIlN}#)
         (if (symbol? #{x _hoQGWMnyQPAh3k2jhWIlN}#)
           #t
           (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWIlN}#)
                 (if (= (vector-length #{x _hoQGWMnyQPAh3k2jhWIlN}#)
                        4)
                   (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWIlN}# 0)
                        'syntax-object)
                   #f)
                 #f)
             (symbol?
               (vector-ref #{x _hoQGWMnyQPAh3k2jhWIlN}# 1))
             #f))))
     (#{gen-labels _hoQGWMnyQPAh3k2jhWHTE}#
       (lambda (#{ls _hoQGWMnyQPAh3k2jhWKEf}#)
         (if (null? #{ls _hoQGWMnyQPAh3k2jhWKEf}#)
           '()
           (cons (#{gen-label _hoQGWMnyQPAh3k2jhWHTD}#)
                 (#{gen-labels _hoQGWMnyQPAh3k2jhWHTE}#
                   (cdr #{ls _hoQGWMnyQPAh3k2jhWKEf}#))))))
     (#{make-binding-wrap _hoQGWMnyQPAh3k2jhWHTP}#
       (lambda (#{ids _hoQGWMnyQPAh3k2jhWKEg}#
                #{labels _hoQGWMnyQPAh3k2jhWKEh}#
                #{w _hoQGWMnyQPAh3k2jhWKEi}#)
         (if (null? #{ids _hoQGWMnyQPAh3k2jhWKEg}#)
           #{w _hoQGWMnyQPAh3k2jhWKEi}#
           (cons (car #{w _hoQGWMnyQPAh3k2jhWKEi}#)
                 (cons (let ((#{labelvec _hoQGWMnyQPAh3k2jhWKEj}#
                               (list->vector
                                 #{labels _hoQGWMnyQPAh3k2jhWKEh}#)))
                         (let ((#{n _hoQGWMnyQPAh3k2jhWKEk}#
                                 (vector-length
                                   #{labelvec _hoQGWMnyQPAh3k2jhWKEj}#)))
                           (let ((#{symnamevec _hoQGWMnyQPAh3k2jhWKEl}#
                                   (make-vector #{n _hoQGWMnyQPAh3k2jhWKEk}#))
                                 (#{marksvec _hoQGWMnyQPAh3k2jhWKEm}#
                                   (make-vector #{n _hoQGWMnyQPAh3k2jhWKEk}#)))
                             (begin
                               (letrec*
                                 ((#{f _hoQGWMnyQPAh3k2jhWKEn}#
                                    (lambda (#{ids _hoQGWMnyQPAh3k2jhWKEq}#
                                             #{i _hoQGWMnyQPAh3k2jhWKEr}#)
                                      (if (not (null? #{ids _hoQGWMnyQPAh3k2jhWKEq}#))
                                        (call-with-values
                                          (lambda ()
                                            (let ((#{x _hoQGWMnyQPAh3k2jhWKEu}#
                                                    (car #{ids _hoQGWMnyQPAh3k2jhWKEq}#)))
                                              (if (if (vector?
                                                        #{x _hoQGWMnyQPAh3k2jhWKEu}#)
                                                    (if (= (vector-length
                                                             #{x _hoQGWMnyQPAh3k2jhWKEu}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{x _hoQGWMnyQPAh3k2jhWKEu}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (values
                                                  (vector-ref
                                                    #{x _hoQGWMnyQPAh3k2jhWKEu}#
                                                    1)
                                                  (let ((#{m1 _hoQGWMnyQPAh3k2jhWKE$}#
                                                          (car #{w _hoQGWMnyQPAh3k2jhWKEi}#))
                                                        (#{m2 _hoQGWMnyQPAh3k2jhWKE@}#
                                                          (car (vector-ref
                                                                 #{x _hoQGWMnyQPAh3k2jhWKEu}#
                                                                 2))))
                                                    (if (null? #{m2 _hoQGWMnyQPAh3k2jhWKE@}#)
                                                      #{m1 _hoQGWMnyQPAh3k2jhWKE$}#
                                                      (append
                                                        #{m1 _hoQGWMnyQPAh3k2jhWKE$}#
                                                        #{m2 _hoQGWMnyQPAh3k2jhWKE@}#))))
                                                (values
                                                  #{x _hoQGWMnyQPAh3k2jhWKEu}#
                                                  (car #{w _hoQGWMnyQPAh3k2jhWKEi}#)))))
                                          (lambda (#{symname _hoQGWMnyQPAh3k2jhWKFT}#
                                                   #{marks _hoQGWMnyQPAh3k2jhWKFU}#)
                                            (begin
                                              (vector-set!
                                                #{symnamevec _hoQGWMnyQPAh3k2jhWKEl}#
                                                #{i _hoQGWMnyQPAh3k2jhWKEr}#
                                                #{symname _hoQGWMnyQPAh3k2jhWKFT}#)
                                              (vector-set!
                                                #{marksvec _hoQGWMnyQPAh3k2jhWKEm}#
                                                #{i _hoQGWMnyQPAh3k2jhWKEr}#
                                                #{marks _hoQGWMnyQPAh3k2jhWKFU}#)
                                              (#{f _hoQGWMnyQPAh3k2jhWKEn}#
                                                (cdr #{ids _hoQGWMnyQPAh3k2jhWKEq}#)
                                                (#{1+}# #{i _hoQGWMnyQPAh3k2jhWKEr}#)))))))))
                                 (#{f _hoQGWMnyQPAh3k2jhWKEn}#
                                   #{ids _hoQGWMnyQPAh3k2jhWKEg}#
                                   0))
                               (vector
                                 'ribcage
                                 #{symnamevec _hoQGWMnyQPAh3k2jhWKEl}#
                                 #{marksvec _hoQGWMnyQPAh3k2jhWKEm}#
                                 #{labelvec _hoQGWMnyQPAh3k2jhWKEj}#)))))
                       (cdr #{w _hoQGWMnyQPAh3k2jhWKEi}#))))))
     (#{join-wraps _hoQGWMnyQPAh3k2jhWHTR}#
       (lambda (#{w1 _hoQGWMnyQPAh3k2jhWKFd}#
                #{w2 _hoQGWMnyQPAh3k2jhWKFe}#)
         (let ((#{m1 _hoQGWMnyQPAh3k2jhWKFf}#
                 (car #{w1 _hoQGWMnyQPAh3k2jhWKFd}#))
               (#{s1 _hoQGWMnyQPAh3k2jhWKFg}#
                 (cdr #{w1 _hoQGWMnyQPAh3k2jhWKFd}#)))
           (if (null? #{m1 _hoQGWMnyQPAh3k2jhWKFf}#)
             (if (null? #{s1 _hoQGWMnyQPAh3k2jhWKFg}#)
               #{w2 _hoQGWMnyQPAh3k2jhWKFe}#
               (cons (car #{w2 _hoQGWMnyQPAh3k2jhWKFe}#)
                     (let ((#{m2 _hoQGWMnyQPAh3k2jhWKFn}#
                             (cdr #{w2 _hoQGWMnyQPAh3k2jhWKFe}#)))
                       (if (null? #{m2 _hoQGWMnyQPAh3k2jhWKFn}#)
                         #{s1 _hoQGWMnyQPAh3k2jhWKFg}#
                         (append
                           #{s1 _hoQGWMnyQPAh3k2jhWKFg}#
                           #{m2 _hoQGWMnyQPAh3k2jhWKFn}#)))))
             (cons (let ((#{m2 _hoQGWMnyQPAh3k2jhWKFw}#
                           (car #{w2 _hoQGWMnyQPAh3k2jhWKFe}#)))
                     (if (null? #{m2 _hoQGWMnyQPAh3k2jhWKFw}#)
                       #{m1 _hoQGWMnyQPAh3k2jhWKFf}#
                       (append
                         #{m1 _hoQGWMnyQPAh3k2jhWKFf}#
                         #{m2 _hoQGWMnyQPAh3k2jhWKFw}#)))
                   (let ((#{m2 _hoQGWMnyQPAh3k2jhWKF5}#
                           (cdr #{w2 _hoQGWMnyQPAh3k2jhWKFe}#)))
                     (if (null? #{m2 _hoQGWMnyQPAh3k2jhWKF5}#)
                       #{s1 _hoQGWMnyQPAh3k2jhWKFg}#
                       (append
                         #{s1 _hoQGWMnyQPAh3k2jhWKFg}#
                         #{m2 _hoQGWMnyQPAh3k2jhWKF5}#))))))))
     (#{same-marks? _hoQGWMnyQPAh3k2jhWHTT}#
       (lambda (#{x _hoQGWMnyQPAh3k2jhWKF$}#
                #{y _hoQGWMnyQPAh3k2jhWKF@}#)
         (if (eq? #{x _hoQGWMnyQPAh3k2jhWKF$}#
                  #{y _hoQGWMnyQPAh3k2jhWKF@}#)
           (eq? #{x _hoQGWMnyQPAh3k2jhWKF$}#
                #{y _hoQGWMnyQPAh3k2jhWKF@}#)
           (if (not (null? #{x _hoQGWMnyQPAh3k2jhWKF$}#))
             (if (not (null? #{y _hoQGWMnyQPAh3k2jhWKF@}#))
               (if (eq? (car #{x _hoQGWMnyQPAh3k2jhWKF$}#)
                        (car #{y _hoQGWMnyQPAh3k2jhWKF@}#))
                 (#{same-marks? _hoQGWMnyQPAh3k2jhWHTT}#
                   (cdr #{x _hoQGWMnyQPAh3k2jhWKF$}#)
                   (cdr #{y _hoQGWMnyQPAh3k2jhWKF@}#))
                 #f)
               #f)
             #f))))
     (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
       (lambda (#{id _hoQGWMnyQPAh3k2jhWKGH}#
                #{w _hoQGWMnyQPAh3k2jhWKGI}#)
         (letrec*
           ((#{search _hoQGWMnyQPAh3k2jhWKGJ}#
              (lambda (#{sym _hoQGWMnyQPAh3k2jhWKHG}#
                       #{subst _hoQGWMnyQPAh3k2jhWKHH}#
                       #{marks _hoQGWMnyQPAh3k2jhWKHI}#)
                (if (null? #{subst _hoQGWMnyQPAh3k2jhWKHH}#)
                  (values #f #{marks _hoQGWMnyQPAh3k2jhWKHI}#)
                  (let ((#{fst _hoQGWMnyQPAh3k2jhWKHJ}#
                          (car #{subst _hoQGWMnyQPAh3k2jhWKHH}#)))
                    (if (eq? #{fst _hoQGWMnyQPAh3k2jhWKHJ}# 'shift)
                      (#{search _hoQGWMnyQPAh3k2jhWKGJ}#
                        #{sym _hoQGWMnyQPAh3k2jhWKHG}#
                        (cdr #{subst _hoQGWMnyQPAh3k2jhWKHH}#)
                        (cdr #{marks _hoQGWMnyQPAh3k2jhWKHI}#))
                      (let ((#{symnames _hoQGWMnyQPAh3k2jhWKHL}#
                              (vector-ref #{fst _hoQGWMnyQPAh3k2jhWKHJ}# 1)))
                        (if (vector? #{symnames _hoQGWMnyQPAh3k2jhWKHL}#)
                          (let ((#{n _hoQGWMnyQPAh3k2jhWKHX}#
                                  (vector-length
                                    #{symnames _hoQGWMnyQPAh3k2jhWKHL}#)))
                            (letrec*
                              ((#{f _hoQGWMnyQPAh3k2jhWKHY}#
                                 (lambda (#{i _hoQGWMnyQPAh3k2jhWKHa}#)
                                   (if (= #{i _hoQGWMnyQPAh3k2jhWKHa}#
                                          #{n _hoQGWMnyQPAh3k2jhWKHX}#)
                                     (#{search _hoQGWMnyQPAh3k2jhWKGJ}#
                                       #{sym _hoQGWMnyQPAh3k2jhWKHG}#
                                       (cdr #{subst _hoQGWMnyQPAh3k2jhWKHH}#)
                                       #{marks _hoQGWMnyQPAh3k2jhWKHI}#)
                                     (if (if (eq? (vector-ref
                                                    #{symnames _hoQGWMnyQPAh3k2jhWKHL}#
                                                    #{i _hoQGWMnyQPAh3k2jhWKHa}#)
                                                  #{sym _hoQGWMnyQPAh3k2jhWKHG}#)
                                           (#{same-marks? _hoQGWMnyQPAh3k2jhWHTT}#
                                             #{marks _hoQGWMnyQPAh3k2jhWKHI}#
                                             (vector-ref
                                               (vector-ref
                                                 #{fst _hoQGWMnyQPAh3k2jhWKHJ}#
                                                 2)
                                               #{i _hoQGWMnyQPAh3k2jhWKHa}#))
                                           #f)
                                       (values
                                         (vector-ref
                                           (vector-ref
                                             #{fst _hoQGWMnyQPAh3k2jhWKHJ}#
                                             3)
                                           #{i _hoQGWMnyQPAh3k2jhWKHa}#)
                                         #{marks _hoQGWMnyQPAh3k2jhWKHI}#)
                                       (#{f _hoQGWMnyQPAh3k2jhWKHY}#
                                         (#{1+}# #{i _hoQGWMnyQPAh3k2jhWKHa}#)))))))
                              (#{f _hoQGWMnyQPAh3k2jhWKHY}# 0)))
                          (letrec*
                            ((#{f _hoQGWMnyQPAh3k2jhWKH7}#
                               (lambda (#{symnames _hoQGWMnyQPAh3k2jhWKH9}#
                                        #{i _hoQGWMnyQPAh3k2jhWKH$}#)
                                 (if (null? #{symnames _hoQGWMnyQPAh3k2jhWKH9}#)
                                   (#{search _hoQGWMnyQPAh3k2jhWKGJ}#
                                     #{sym _hoQGWMnyQPAh3k2jhWKHG}#
                                     (cdr #{subst _hoQGWMnyQPAh3k2jhWKHH}#)
                                     #{marks _hoQGWMnyQPAh3k2jhWKHI}#)
                                   (if (if (eq? (car #{symnames _hoQGWMnyQPAh3k2jhWKH9}#)
                                                #{sym _hoQGWMnyQPAh3k2jhWKHG}#)
                                         (#{same-marks? _hoQGWMnyQPAh3k2jhWHTT}#
                                           #{marks _hoQGWMnyQPAh3k2jhWKHI}#
                                           (list-ref
                                             (vector-ref
                                               #{fst _hoQGWMnyQPAh3k2jhWKHJ}#
                                               2)
                                             #{i _hoQGWMnyQPAh3k2jhWKH$}#))
                                         #f)
                                     (values
                                       (list-ref
                                         (vector-ref
                                           #{fst _hoQGWMnyQPAh3k2jhWKHJ}#
                                           3)
                                         #{i _hoQGWMnyQPAh3k2jhWKH$}#)
                                       #{marks _hoQGWMnyQPAh3k2jhWKHI}#)
                                     (#{f _hoQGWMnyQPAh3k2jhWKH7}#
                                       (cdr #{symnames _hoQGWMnyQPAh3k2jhWKH9}#)
                                       (#{1+}# #{i _hoQGWMnyQPAh3k2jhWKH$}#)))))))
                            (#{f _hoQGWMnyQPAh3k2jhWKH7}#
                              #{symnames _hoQGWMnyQPAh3k2jhWKHL}#
                              0))))))))))
           (if (symbol? #{id _hoQGWMnyQPAh3k2jhWKGH}#)
             (let ((#{t _hoQGWMnyQPAh3k2jhWKGM}#
                     (#{search _hoQGWMnyQPAh3k2jhWKGJ}#
                       #{id _hoQGWMnyQPAh3k2jhWKGH}#
                       (cdr #{w _hoQGWMnyQPAh3k2jhWKGI}#)
                       (car #{w _hoQGWMnyQPAh3k2jhWKGI}#))))
               (if #{t _hoQGWMnyQPAh3k2jhWKGM}#
                 #{t _hoQGWMnyQPAh3k2jhWKGM}#
                 #{id _hoQGWMnyQPAh3k2jhWKGH}#))
             (if (if (vector? #{id _hoQGWMnyQPAh3k2jhWKGH}#)
                   (if (= (vector-length #{id _hoQGWMnyQPAh3k2jhWKGH}#)
                          4)
                     (eq? (vector-ref #{id _hoQGWMnyQPAh3k2jhWKGH}# 0)
                          'syntax-object)
                     #f)
                   #f)
               (let ((#{id _hoQGWMnyQPAh3k2jhWKGb}#
                       (vector-ref #{id _hoQGWMnyQPAh3k2jhWKGH}# 1))
                     (#{w1 _hoQGWMnyQPAh3k2jhWKGc}#
                       (vector-ref #{id _hoQGWMnyQPAh3k2jhWKGH}# 2)))
                 (let ((#{marks _hoQGWMnyQPAh3k2jhWKGd}#
                         (let ((#{m1 _hoQGWMnyQPAh3k2jhWKGn}#
                                 (car #{w _hoQGWMnyQPAh3k2jhWKGI}#))
                               (#{m2 _hoQGWMnyQPAh3k2jhWKGo}#
                                 (car #{w1 _hoQGWMnyQPAh3k2jhWKGc}#)))
                           (if (null? #{m2 _hoQGWMnyQPAh3k2jhWKGo}#)
                             #{m1 _hoQGWMnyQPAh3k2jhWKGn}#
                             (append
                               #{m1 _hoQGWMnyQPAh3k2jhWKGn}#
                               #{m2 _hoQGWMnyQPAh3k2jhWKGo}#)))))
                   (call-with-values
                     (lambda ()
                       (#{search _hoQGWMnyQPAh3k2jhWKGJ}#
                         #{id _hoQGWMnyQPAh3k2jhWKGb}#
                         (cdr #{w _hoQGWMnyQPAh3k2jhWKGI}#)
                         #{marks _hoQGWMnyQPAh3k2jhWKGd}#))
                     (lambda (#{new-id _hoQGWMnyQPAh3k2jhWKG4}#
                              #{marks _hoQGWMnyQPAh3k2jhWKG5}#)
                       (if #{new-id _hoQGWMnyQPAh3k2jhWKG4}#
                         #{new-id _hoQGWMnyQPAh3k2jhWKG4}#
                         (let ((#{t _hoQGWMnyQPAh3k2jhWKHB}#
                                 (#{search _hoQGWMnyQPAh3k2jhWKGJ}#
                                   #{id _hoQGWMnyQPAh3k2jhWKGb}#
                                   (cdr #{w1 _hoQGWMnyQPAh3k2jhWKGc}#)
                                   #{marks _hoQGWMnyQPAh3k2jhWKG5}#)))
                           (if #{t _hoQGWMnyQPAh3k2jhWKHB}#
                             #{t _hoQGWMnyQPAh3k2jhWKHB}#
                             #{id _hoQGWMnyQPAh3k2jhWKGb}#)))))))
               (syntax-violation
                 'id-var-name
                 "invalid id"
                 #{id _hoQGWMnyQPAh3k2jhWKGH}#))))))
     (#{locally-bound-identifiers _hoQGWMnyQPAh3k2jhWHTV}#
       (lambda (#{w _hoQGWMnyQPAh3k2jhWKIU}#
                #{mod _hoQGWMnyQPAh3k2jhWKIV}#)
         (letrec*
           ((#{scan _hoQGWMnyQPAh3k2jhWKIW}#
              (lambda (#{subst _hoQGWMnyQPAh3k2jhWKIb}#
                       #{results _hoQGWMnyQPAh3k2jhWKIc}#)
                (if (null? #{subst _hoQGWMnyQPAh3k2jhWKIb}#)
                  #{results _hoQGWMnyQPAh3k2jhWKIc}#
                  (let ((#{fst _hoQGWMnyQPAh3k2jhWKId}#
                          (car #{subst _hoQGWMnyQPAh3k2jhWKIb}#)))
                    (if (eq? #{fst _hoQGWMnyQPAh3k2jhWKId}# 'shift)
                      (#{scan _hoQGWMnyQPAh3k2jhWKIW}#
                        (cdr #{subst _hoQGWMnyQPAh3k2jhWKIb}#)
                        #{results _hoQGWMnyQPAh3k2jhWKIc}#)
                      (let ((#{symnames _hoQGWMnyQPAh3k2jhWKIf}#
                              (vector-ref #{fst _hoQGWMnyQPAh3k2jhWKId}# 1))
                            (#{marks _hoQGWMnyQPAh3k2jhWKIg}#
                              (vector-ref #{fst _hoQGWMnyQPAh3k2jhWKId}# 2)))
                        (if (vector? #{symnames _hoQGWMnyQPAh3k2jhWKIf}#)
                          (#{scan-vector-rib _hoQGWMnyQPAh3k2jhWKIY}#
                            #{subst _hoQGWMnyQPAh3k2jhWKIb}#
                            #{symnames _hoQGWMnyQPAh3k2jhWKIf}#
                            #{marks _hoQGWMnyQPAh3k2jhWKIg}#
                            #{results _hoQGWMnyQPAh3k2jhWKIc}#)
                          (#{scan-list-rib _hoQGWMnyQPAh3k2jhWKIX}#
                            #{subst _hoQGWMnyQPAh3k2jhWKIb}#
                            #{symnames _hoQGWMnyQPAh3k2jhWKIf}#
                            #{marks _hoQGWMnyQPAh3k2jhWKIg}#
                            #{results _hoQGWMnyQPAh3k2jhWKIc}#))))))))
            (#{scan-list-rib _hoQGWMnyQPAh3k2jhWKIX}#
              (lambda (#{subst _hoQGWMnyQPAh3k2jhWKKC}#
                       #{symnames _hoQGWMnyQPAh3k2jhWKKD}#
                       #{marks _hoQGWMnyQPAh3k2jhWKKE}#
                       #{results _hoQGWMnyQPAh3k2jhWKKF}#)
                (letrec*
                  ((#{f _hoQGWMnyQPAh3k2jhWKKG}#
                     (lambda (#{symnames _hoQGWMnyQPAh3k2jhWKLq}#
                              #{marks _hoQGWMnyQPAh3k2jhWKLr}#
                              #{results _hoQGWMnyQPAh3k2jhWKLs}#)
                       (if (null? #{symnames _hoQGWMnyQPAh3k2jhWKLq}#)
                         (#{scan _hoQGWMnyQPAh3k2jhWKIW}#
                           (cdr #{subst _hoQGWMnyQPAh3k2jhWKKC}#)
                           #{results _hoQGWMnyQPAh3k2jhWKLs}#)
                         (#{f _hoQGWMnyQPAh3k2jhWKKG}#
                           (cdr #{symnames _hoQGWMnyQPAh3k2jhWKLq}#)
                           (cdr #{marks _hoQGWMnyQPAh3k2jhWKLr}#)
                           (cons (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                   (car #{symnames _hoQGWMnyQPAh3k2jhWKLq}#)
                                   (let ((#{w _hoQGWMnyQPAh3k2jhWKL0}#
                                           (cons (car #{marks _hoQGWMnyQPAh3k2jhWKLr}#)
                                                 #{subst _hoQGWMnyQPAh3k2jhWKKC}#)))
                                     (cons (cons #f
                                                 (car #{w _hoQGWMnyQPAh3k2jhWKL0}#))
                                           (cons 'shift
                                                 (cdr #{w _hoQGWMnyQPAh3k2jhWKL0}#))))
                                   #{mod _hoQGWMnyQPAh3k2jhWKIV}#)
                                 #{results _hoQGWMnyQPAh3k2jhWKLs}#))))))
                  (#{f _hoQGWMnyQPAh3k2jhWKKG}#
                    #{symnames _hoQGWMnyQPAh3k2jhWKKD}#
                    #{marks _hoQGWMnyQPAh3k2jhWKKE}#
                    #{results _hoQGWMnyQPAh3k2jhWKKF}#))))
            (#{scan-vector-rib _hoQGWMnyQPAh3k2jhWKIY}#
              (lambda (#{subst _hoQGWMnyQPAh3k2jhWKL1}#
                       #{symnames _hoQGWMnyQPAh3k2jhWKL2}#
                       #{marks _hoQGWMnyQPAh3k2jhWKL3}#
                       #{results _hoQGWMnyQPAh3k2jhWKL4}#)
                (let ((#{n _hoQGWMnyQPAh3k2jhWKL5}#
                        (vector-length
                          #{symnames _hoQGWMnyQPAh3k2jhWKL2}#)))
                  (letrec*
                    ((#{f _hoQGWMnyQPAh3k2jhWKL6}#
                       (lambda (#{i _hoQGWMnyQPAh3k2jhWKNN}#
                                #{results _hoQGWMnyQPAh3k2jhWKNO}#)
                         (if (= #{i _hoQGWMnyQPAh3k2jhWKNN}#
                                #{n _hoQGWMnyQPAh3k2jhWKL5}#)
                           (#{scan _hoQGWMnyQPAh3k2jhWKIW}#
                             (cdr #{subst _hoQGWMnyQPAh3k2jhWKL1}#)
                             #{results _hoQGWMnyQPAh3k2jhWKNO}#)
                           (#{f _hoQGWMnyQPAh3k2jhWKL6}#
                             (#{1+}# #{i _hoQGWMnyQPAh3k2jhWKNN}#)
                             (cons (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                     (vector-ref
                                       #{symnames _hoQGWMnyQPAh3k2jhWKL2}#
                                       #{i _hoQGWMnyQPAh3k2jhWKNN}#)
                                     (let ((#{w _hoQGWMnyQPAh3k2jhWKNW}#
                                             (cons (vector-ref
                                                     #{marks _hoQGWMnyQPAh3k2jhWKL3}#
                                                     #{i _hoQGWMnyQPAh3k2jhWKNN}#)
                                                   #{subst _hoQGWMnyQPAh3k2jhWKL1}#)))
                                       (cons (cons #f
                                                   (car #{w _hoQGWMnyQPAh3k2jhWKNW}#))
                                             (cons 'shift
                                                   (cdr #{w _hoQGWMnyQPAh3k2jhWKNW}#))))
                                     #{mod _hoQGWMnyQPAh3k2jhWKIV}#)
                                   #{results _hoQGWMnyQPAh3k2jhWKNO}#))))))
                    (#{f _hoQGWMnyQPAh3k2jhWKL6}#
                      0
                      #{results _hoQGWMnyQPAh3k2jhWKL4}#))))))
           (#{scan _hoQGWMnyQPAh3k2jhWKIW}#
             (cdr #{w _hoQGWMnyQPAh3k2jhWKIU}#)
             '()))))
     (#{valid-bound-ids? _hoQGWMnyQPAh3k2jhWHTb}#
       (lambda (#{ids _hoQGWMnyQPAh3k2jhWKNX}#)
         (if (letrec*
               ((#{all-ids? _hoQGWMnyQPAh3k2jhWKNY}#
                  (lambda (#{ids _hoQGWMnyQPAh3k2jhWKP6}#)
                    (if (null? #{ids _hoQGWMnyQPAh3k2jhWKP6}#)
                      (null? #{ids _hoQGWMnyQPAh3k2jhWKP6}#)
                      (if (let ((#{x _hoQGWMnyQPAh3k2jhWKQF}#
                                  (car #{ids _hoQGWMnyQPAh3k2jhWKP6}#)))
                            (if (symbol? #{x _hoQGWMnyQPAh3k2jhWKQF}#)
                              #t
                              (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWKQF}#)
                                    (if (= (vector-length
                                             #{x _hoQGWMnyQPAh3k2jhWKQF}#)
                                           4)
                                      (eq? (vector-ref
                                             #{x _hoQGWMnyQPAh3k2jhWKQF}#
                                             0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (symbol?
                                  (vector-ref #{x _hoQGWMnyQPAh3k2jhWKQF}# 1))
                                #f)))
                        (#{all-ids? _hoQGWMnyQPAh3k2jhWKNY}#
                          (cdr #{ids _hoQGWMnyQPAh3k2jhWKP6}#))
                        #f)))))
               (#{all-ids? _hoQGWMnyQPAh3k2jhWKNY}#
                 #{ids _hoQGWMnyQPAh3k2jhWKNX}#))
           (#{distinct-bound-ids? _hoQGWMnyQPAh3k2jhWHTc}#
             #{ids _hoQGWMnyQPAh3k2jhWKNX}#)
           #f)))
     (#{distinct-bound-ids? _hoQGWMnyQPAh3k2jhWHTc}#
       (lambda (#{ids _hoQGWMnyQPAh3k2jhWKSF}#)
         (letrec*
           ((#{distinct? _hoQGWMnyQPAh3k2jhWKSG}#
              (lambda (#{ids _hoQGWMnyQPAh3k2jhWKT2}#)
                (if (null? #{ids _hoQGWMnyQPAh3k2jhWKT2}#)
                  (null? #{ids _hoQGWMnyQPAh3k2jhWKT2}#)
                  (if (not (#{bound-id-member? _hoQGWMnyQPAh3k2jhWHTd}#
                             (car #{ids _hoQGWMnyQPAh3k2jhWKT2}#)
                             (cdr #{ids _hoQGWMnyQPAh3k2jhWKT2}#)))
                    (#{distinct? _hoQGWMnyQPAh3k2jhWKSG}#
                      (cdr #{ids _hoQGWMnyQPAh3k2jhWKT2}#))
                    #f)))))
           (#{distinct? _hoQGWMnyQPAh3k2jhWKSG}#
             #{ids _hoQGWMnyQPAh3k2jhWKSF}#))))
     (#{bound-id-member? _hoQGWMnyQPAh3k2jhWHTd}#
       (lambda (#{x _hoQGWMnyQPAh3k2jhWKXI}#
                #{list _hoQGWMnyQPAh3k2jhWKXJ}#)
         (if (not (null? #{list _hoQGWMnyQPAh3k2jhWKXJ}#))
           (let ((#{t _hoQGWMnyQPAh3k2jhWKXK}#
                   (let ((#{j _hoQGWMnyQPAh3k2jhWKYb}#
                           (car #{list _hoQGWMnyQPAh3k2jhWKXJ}#)))
                     (if (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWKXI}#)
                               (if (= (vector-length
                                        #{x _hoQGWMnyQPAh3k2jhWKXI}#)
                                      4)
                                 (eq? (vector-ref
                                        #{x _hoQGWMnyQPAh3k2jhWKXI}#
                                        0)
                                      'syntax-object)
                                 #f)
                               #f)
                           (if (vector? #{j _hoQGWMnyQPAh3k2jhWKYb}#)
                             (if (= (vector-length
                                      #{j _hoQGWMnyQPAh3k2jhWKYb}#)
                                    4)
                               (eq? (vector-ref #{j _hoQGWMnyQPAh3k2jhWKYb}# 0)
                                    'syntax-object)
                               #f)
                             #f)
                           #f)
                       (if (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWKXI}# 1)
                                (vector-ref #{j _hoQGWMnyQPAh3k2jhWKYb}# 1))
                         (#{same-marks? _hoQGWMnyQPAh3k2jhWHTT}#
                           (car (vector-ref #{x _hoQGWMnyQPAh3k2jhWKXI}# 2))
                           (car (vector-ref #{j _hoQGWMnyQPAh3k2jhWKYb}# 2)))
                         #f)
                       (eq? #{x _hoQGWMnyQPAh3k2jhWKXI}#
                            #{j _hoQGWMnyQPAh3k2jhWKYb}#)))))
             (if #{t _hoQGWMnyQPAh3k2jhWKXK}#
               #{t _hoQGWMnyQPAh3k2jhWKXK}#
               (#{bound-id-member? _hoQGWMnyQPAh3k2jhWHTd}#
                 #{x _hoQGWMnyQPAh3k2jhWKXI}#
                 (cdr #{list _hoQGWMnyQPAh3k2jhWKXJ}#))))
           #f)))
     (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
       (lambda (#{x _hoQGWMnyQPAh3k2jhWKZH}#
                #{w _hoQGWMnyQPAh3k2jhWKZI}#
                #{defmod _hoQGWMnyQPAh3k2jhWKZJ}#)
         (if (if (null? (car #{w _hoQGWMnyQPAh3k2jhWKZI}#))
               (null? (cdr #{w _hoQGWMnyQPAh3k2jhWKZI}#))
               #f)
           #{x _hoQGWMnyQPAh3k2jhWKZH}#
           (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWKZH}#)
                 (if (= (vector-length #{x _hoQGWMnyQPAh3k2jhWKZH}#)
                        4)
                   (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWKZH}# 0)
                        'syntax-object)
                   #f)
                 #f)
             (let ((#{expression _hoQGWMnyQPAh3k2jhWKZX}#
                     (vector-ref #{x _hoQGWMnyQPAh3k2jhWKZH}# 1))
                   (#{wrap _hoQGWMnyQPAh3k2jhWKZY}#
                     (#{join-wraps _hoQGWMnyQPAh3k2jhWHTR}#
                       #{w _hoQGWMnyQPAh3k2jhWKZI}#
                       (vector-ref #{x _hoQGWMnyQPAh3k2jhWKZH}# 2)))
                   (#{module _hoQGWMnyQPAh3k2jhWKZZ}#
                     (vector-ref #{x _hoQGWMnyQPAh3k2jhWKZH}# 3)))
               (vector
                 'syntax-object
                 #{expression _hoQGWMnyQPAh3k2jhWKZX}#
                 #{wrap _hoQGWMnyQPAh3k2jhWKZY}#
                 #{module _hoQGWMnyQPAh3k2jhWKZZ}#))
             (if (null? #{x _hoQGWMnyQPAh3k2jhWKZH}#)
               #{x _hoQGWMnyQPAh3k2jhWKZH}#
               (vector
                 'syntax-object
                 #{x _hoQGWMnyQPAh3k2jhWKZH}#
                 #{w _hoQGWMnyQPAh3k2jhWKZI}#
                 #{defmod _hoQGWMnyQPAh3k2jhWKZJ}#))))))
     (#{source-wrap _hoQGWMnyQPAh3k2jhWHTf}#
       (lambda (#{x _hoQGWMnyQPAh3k2jhWKZq}#
                #{w _hoQGWMnyQPAh3k2jhWKZr}#
                #{s _hoQGWMnyQPAh3k2jhWKZs}#
                #{defmod _hoQGWMnyQPAh3k2jhWKZt}#)
         (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
           (begin
             (if (if (pair? #{x _hoQGWMnyQPAh3k2jhWKZq}#)
                   #{s _hoQGWMnyQPAh3k2jhWKZs}#
                   #f)
               (set-source-properties!
                 #{x _hoQGWMnyQPAh3k2jhWKZq}#
                 #{s _hoQGWMnyQPAh3k2jhWKZs}#))
             #{x _hoQGWMnyQPAh3k2jhWKZq}#)
           #{w _hoQGWMnyQPAh3k2jhWKZr}#
           #{defmod _hoQGWMnyQPAh3k2jhWKZt}#)))
     (#{expand-sequence _hoQGWMnyQPAh3k2jhWHTg}#
       (lambda (#{body _hoQGWMnyQPAh3k2jhWMpK}#
                #{r _hoQGWMnyQPAh3k2jhWMpL}#
                #{w _hoQGWMnyQPAh3k2jhWMpM}#
                #{s _hoQGWMnyQPAh3k2jhWMpN}#
                #{mod _hoQGWMnyQPAh3k2jhWMpO}#)
         (#{build-sequence _hoQGWMnyQPAh3k2jhWHSu}#
           #{s _hoQGWMnyQPAh3k2jhWMpN}#
           (letrec*
             ((#{dobody _hoQGWMnyQPAh3k2jhWMqe}#
                (lambda (#{body _hoQGWMnyQPAh3k2jhWMv8}#
                         #{r _hoQGWMnyQPAh3k2jhWMv9}#
                         #{w _hoQGWMnyQPAh3k2jhWMv$}#
                         #{mod _hoQGWMnyQPAh3k2jhWMv@}#)
                  (if (null? #{body _hoQGWMnyQPAh3k2jhWMv8}#)
                    '()
                    (let ((#{first _hoQGWMnyQPAh3k2jhWMwA}#
                            (let ((#{e _hoQGWMnyQPAh3k2jhWMwE}#
                                    (car #{body _hoQGWMnyQPAh3k2jhWMv8}#)))
                              (call-with-values
                                (lambda ()
                                  (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
                                    #{e _hoQGWMnyQPAh3k2jhWMwE}#
                                    #{r _hoQGWMnyQPAh3k2jhWMv9}#
                                    #{w _hoQGWMnyQPAh3k2jhWMv$}#
                                    (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
                                      #{e _hoQGWMnyQPAh3k2jhWMwE}#)
                                    #f
                                    #{mod _hoQGWMnyQPAh3k2jhWMv@}#
                                    #f))
                                (lambda (#{type _hoQGWMnyQPAh3k2jhWMwL}#
                                         #{value _hoQGWMnyQPAh3k2jhWMwM}#
                                         #{e _hoQGWMnyQPAh3k2jhWMwN}#
                                         #{w _hoQGWMnyQPAh3k2jhWMwO}#
                                         #{s _hoQGWMnyQPAh3k2jhWMwP}#
                                         #{mod _hoQGWMnyQPAh3k2jhWMwQ}#)
                                  (#{expand-expr _hoQGWMnyQPAh3k2jhWHTm}#
                                    #{type _hoQGWMnyQPAh3k2jhWMwL}#
                                    #{value _hoQGWMnyQPAh3k2jhWMwM}#
                                    #{e _hoQGWMnyQPAh3k2jhWMwN}#
                                    #{r _hoQGWMnyQPAh3k2jhWMv9}#
                                    #{w _hoQGWMnyQPAh3k2jhWMwO}#
                                    #{s _hoQGWMnyQPAh3k2jhWMwP}#
                                    #{mod _hoQGWMnyQPAh3k2jhWMwQ}#))))))
                      (cons #{first _hoQGWMnyQPAh3k2jhWMwA}#
                            (#{dobody _hoQGWMnyQPAh3k2jhWMqe}#
                              (cdr #{body _hoQGWMnyQPAh3k2jhWMv8}#)
                              #{r _hoQGWMnyQPAh3k2jhWMv9}#
                              #{w _hoQGWMnyQPAh3k2jhWMv$}#
                              #{mod _hoQGWMnyQPAh3k2jhWMv@}#)))))))
             (#{dobody _hoQGWMnyQPAh3k2jhWMqe}#
               #{body _hoQGWMnyQPAh3k2jhWMpK}#
               #{r _hoQGWMnyQPAh3k2jhWMpL}#
               #{w _hoQGWMnyQPAh3k2jhWMpM}#
               #{mod _hoQGWMnyQPAh3k2jhWMpO}#)))))
     (#{expand-top-sequence _hoQGWMnyQPAh3k2jhWHTh}#
       (lambda (#{body _hoQGWMnyQPAh3k2jhWKZ@}#
                #{r _hoQGWMnyQPAh3k2jhWKaA}#
                #{w _hoQGWMnyQPAh3k2jhWKaB}#
                #{s _hoQGWMnyQPAh3k2jhWKaC}#
                #{m _hoQGWMnyQPAh3k2jhWKaD}#
                #{esew _hoQGWMnyQPAh3k2jhWKaE}#
                #{mod _hoQGWMnyQPAh3k2jhWKaF}#)
         (letrec*
           ((#{scan _hoQGWMnyQPAh3k2jhWKaG}#
              (lambda (#{body _hoQGWMnyQPAh3k2jhWKcJ}#
                       #{r _hoQGWMnyQPAh3k2jhWKcK}#
                       #{w _hoQGWMnyQPAh3k2jhWKcL}#
                       #{s _hoQGWMnyQPAh3k2jhWKcM}#
                       #{m _hoQGWMnyQPAh3k2jhWKcN}#
                       #{esew _hoQGWMnyQPAh3k2jhWKcO}#
                       #{mod _hoQGWMnyQPAh3k2jhWKcP}#
                       #{exps _hoQGWMnyQPAh3k2jhWKcQ}#)
                (if (null? #{body _hoQGWMnyQPAh3k2jhWKcJ}#)
                  #{exps _hoQGWMnyQPAh3k2jhWKcQ}#
                  (call-with-values
                    (lambda ()
                      (call-with-values
                        (lambda ()
                          (let ((#{e _hoQGWMnyQPAh3k2jhWKcR}#
                                  (car #{body _hoQGWMnyQPAh3k2jhWKcJ}#)))
                            (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
                              #{e _hoQGWMnyQPAh3k2jhWKcR}#
                              #{r _hoQGWMnyQPAh3k2jhWKcK}#
                              #{w _hoQGWMnyQPAh3k2jhWKcL}#
                              (let ((#{t _hoQGWMnyQPAh3k2jhWKcV}#
                                      (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
                                        #{e _hoQGWMnyQPAh3k2jhWKcR}#)))
                                (if #{t _hoQGWMnyQPAh3k2jhWKcV}#
                                  #{t _hoQGWMnyQPAh3k2jhWKcV}#
                                  #{s _hoQGWMnyQPAh3k2jhWKcM}#))
                              #f
                              #{mod _hoQGWMnyQPAh3k2jhWKcP}#
                              #f)))
                        (lambda (#{type _hoQGWMnyQPAh3k2jhWKgA}#
                                 #{value _hoQGWMnyQPAh3k2jhWKgB}#
                                 #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                 #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                 #{s _hoQGWMnyQPAh3k2jhWKgE}#
                                 #{mod _hoQGWMnyQPAh3k2jhWKgF}#)
                          (if (eqv? #{type _hoQGWMnyQPAh3k2jhWKgA}#
                                    'begin-form)
                            (let ((#{tmp _hoQGWMnyQPAh3k2jhWKgK}#
                                    ($sc-dispatch
                                      #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                      '(_))))
                              (if #{tmp _hoQGWMnyQPAh3k2jhWKgK}#
                                (@apply
                                  (lambda () #{exps _hoQGWMnyQPAh3k2jhWKcQ}#)
                                  #{tmp _hoQGWMnyQPAh3k2jhWKgK}#)
                                (let ((#{tmp _hoQGWMnyQPAh3k2jhWKgO}#
                                        ($sc-dispatch
                                          #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                          '(_ any . each-any))))
                                  (if #{tmp _hoQGWMnyQPAh3k2jhWKgO}#
                                    (@apply
                                      (lambda (#{e1 _hoQGWMnyQPAh3k2jhWKgS}#
                                               #{e2 _hoQGWMnyQPAh3k2jhWKgT}#)
                                        (#{scan _hoQGWMnyQPAh3k2jhWKaG}#
                                          (cons #{e1 _hoQGWMnyQPAh3k2jhWKgS}#
                                                #{e2 _hoQGWMnyQPAh3k2jhWKgT}#)
                                          #{r _hoQGWMnyQPAh3k2jhWKcK}#
                                          #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                          #{s _hoQGWMnyQPAh3k2jhWKgE}#
                                          #{m _hoQGWMnyQPAh3k2jhWKcN}#
                                          #{esew _hoQGWMnyQPAh3k2jhWKcO}#
                                          #{mod _hoQGWMnyQPAh3k2jhWKgF}#
                                          #{exps _hoQGWMnyQPAh3k2jhWKcQ}#))
                                      #{tmp _hoQGWMnyQPAh3k2jhWKgO}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e _hoQGWMnyQPAh3k2jhWKgC}#)))))
                            (if (eqv? #{type _hoQGWMnyQPAh3k2jhWKgA}#
                                      'local-syntax-form)
                              (#{expand-local-syntax _hoQGWMnyQPAh3k2jhWHTq}#
                                #{value _hoQGWMnyQPAh3k2jhWKgB}#
                                #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                #{r _hoQGWMnyQPAh3k2jhWKcK}#
                                #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                #{s _hoQGWMnyQPAh3k2jhWKgE}#
                                #{mod _hoQGWMnyQPAh3k2jhWKgF}#
                                (lambda (#{body _hoQGWMnyQPAh3k2jhWKgi}#
                                         #{r _hoQGWMnyQPAh3k2jhWKgj}#
                                         #{w _hoQGWMnyQPAh3k2jhWKgk}#
                                         #{s _hoQGWMnyQPAh3k2jhWKgl}#
                                         #{mod _hoQGWMnyQPAh3k2jhWKgm}#)
                                  (#{scan _hoQGWMnyQPAh3k2jhWKaG}#
                                    #{body _hoQGWMnyQPAh3k2jhWKgi}#
                                    #{r _hoQGWMnyQPAh3k2jhWKgj}#
                                    #{w _hoQGWMnyQPAh3k2jhWKgk}#
                                    #{s _hoQGWMnyQPAh3k2jhWKgl}#
                                    #{m _hoQGWMnyQPAh3k2jhWKcN}#
                                    #{esew _hoQGWMnyQPAh3k2jhWKcO}#
                                    #{mod _hoQGWMnyQPAh3k2jhWKgm}#
                                    #{exps _hoQGWMnyQPAh3k2jhWKcQ}#)))
                              (if (eqv? #{type _hoQGWMnyQPAh3k2jhWKgA}#
                                        'eval-when-form)
                                (let ((#{tmp _hoQGWMnyQPAh3k2jhWKgr}#
                                        ($sc-dispatch
                                          #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                          '(_ each-any any . each-any))))
                                  (if #{tmp _hoQGWMnyQPAh3k2jhWKgr}#
                                    (@apply
                                      (lambda (#{x _hoQGWMnyQPAh3k2jhWKgv}#
                                               #{e1 _hoQGWMnyQPAh3k2jhWKgw}#
                                               #{e2 _hoQGWMnyQPAh3k2jhWKgx}#)
                                        (let ((#{when-list _hoQGWMnyQPAh3k2jhWKgy}#
                                                (#{parse-when-list _hoQGWMnyQPAh3k2jhWHTj}#
                                                  #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                                  #{x _hoQGWMnyQPAh3k2jhWKgv}#))
                                              (#{body _hoQGWMnyQPAh3k2jhWKgz}#
                                                (cons #{e1 _hoQGWMnyQPAh3k2jhWKgw}#
                                                      #{e2 _hoQGWMnyQPAh3k2jhWKgx}#)))
                                          (if (eq? #{m _hoQGWMnyQPAh3k2jhWKcN}#
                                                   'e)
                                            (if (memq 'eval
                                                      #{when-list _hoQGWMnyQPAh3k2jhWKgy}#)
                                              (#{scan _hoQGWMnyQPAh3k2jhWKaG}#
                                                #{body _hoQGWMnyQPAh3k2jhWKgz}#
                                                #{r _hoQGWMnyQPAh3k2jhWKcK}#
                                                #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                #{s _hoQGWMnyQPAh3k2jhWKgE}#
                                                (if (memq 'expand
                                                          #{when-list _hoQGWMnyQPAh3k2jhWKgy}#)
                                                  'c&e
                                                  'e)
                                                '(eval)
                                                #{mod _hoQGWMnyQPAh3k2jhWKgF}#
                                                #{exps _hoQGWMnyQPAh3k2jhWKcQ}#)
                                              (begin
                                                (if (memq 'expand
                                                          #{when-list _hoQGWMnyQPAh3k2jhWKgy}#)
                                                  (let ((#{x _hoQGWMnyQPAh3k2jhWKiA}#
                                                          (#{expand-top-sequence _hoQGWMnyQPAh3k2jhWHTh}#
                                                            #{body _hoQGWMnyQPAh3k2jhWKgz}#
                                                            #{r _hoQGWMnyQPAh3k2jhWKcK}#
                                                            #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                            #{s _hoQGWMnyQPAh3k2jhWKgE}#
                                                            'e
                                                            '(eval)
                                                            #{mod _hoQGWMnyQPAh3k2jhWKgF}#)))
                                                    (primitive-eval
                                                      #{x _hoQGWMnyQPAh3k2jhWKiA}#)))
                                                (values
                                                  #{exps _hoQGWMnyQPAh3k2jhWKcQ}#)))
                                            (if (memq 'load
                                                      #{when-list _hoQGWMnyQPAh3k2jhWKgy}#)
                                              (if (let ((#{t _hoQGWMnyQPAh3k2jhWKia}#
                                                          (memq 'compile
                                                                #{when-list _hoQGWMnyQPAh3k2jhWKgy}#)))
                                                    (if #{t _hoQGWMnyQPAh3k2jhWKia}#
                                                      #{t _hoQGWMnyQPAh3k2jhWKia}#
                                                      (let ((#{t _hoQGWMnyQPAh3k2jhWKjL}#
                                                              (memq 'expand
                                                                    #{when-list _hoQGWMnyQPAh3k2jhWKgy}#)))
                                                        (if #{t _hoQGWMnyQPAh3k2jhWKjL}#
                                                          #{t _hoQGWMnyQPAh3k2jhWKjL}#
                                                          (if (eq? #{m _hoQGWMnyQPAh3k2jhWKcN}#
                                                                   'c&e)
                                                            (memq 'eval
                                                                  #{when-list _hoQGWMnyQPAh3k2jhWKgy}#)
                                                            #f)))))
                                                (#{scan _hoQGWMnyQPAh3k2jhWKaG}#
                                                  #{body _hoQGWMnyQPAh3k2jhWKgz}#
                                                  #{r _hoQGWMnyQPAh3k2jhWKcK}#
                                                  #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                  #{s _hoQGWMnyQPAh3k2jhWKgE}#
                                                  'c&e
                                                  '(compile load)
                                                  #{mod _hoQGWMnyQPAh3k2jhWKgF}#
                                                  #{exps _hoQGWMnyQPAh3k2jhWKcQ}#)
                                                (if (if (eq? #{m _hoQGWMnyQPAh3k2jhWKcN}#
                                                             'c)
                                                      #t
                                                      (eq? #{m _hoQGWMnyQPAh3k2jhWKcN}#
                                                           'c&e))
                                                  (#{scan _hoQGWMnyQPAh3k2jhWKaG}#
                                                    #{body _hoQGWMnyQPAh3k2jhWKgz}#
                                                    #{r _hoQGWMnyQPAh3k2jhWKcK}#
                                                    #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                    #{s _hoQGWMnyQPAh3k2jhWKgE}#
                                                    'c
                                                    '(load)
                                                    #{mod _hoQGWMnyQPAh3k2jhWKgF}#
                                                    #{exps _hoQGWMnyQPAh3k2jhWKcQ}#)
                                                  (values
                                                    #{exps _hoQGWMnyQPAh3k2jhWKcQ}#)))
                                              (if (let ((#{t _hoQGWMnyQPAh3k2jhWKlM}#
                                                          (memq 'compile
                                                                #{when-list _hoQGWMnyQPAh3k2jhWKgy}#)))
                                                    (if #{t _hoQGWMnyQPAh3k2jhWKlM}#
                                                      #{t _hoQGWMnyQPAh3k2jhWKlM}#
                                                      (let ((#{t _hoQGWMnyQPAh3k2jhWKl9}#
                                                              (memq 'expand
                                                                    #{when-list _hoQGWMnyQPAh3k2jhWKgy}#)))
                                                        (if #{t _hoQGWMnyQPAh3k2jhWKl9}#
                                                          #{t _hoQGWMnyQPAh3k2jhWKl9}#
                                                          (if (eq? #{m _hoQGWMnyQPAh3k2jhWKcN}#
                                                                   'c&e)
                                                            (memq 'eval
                                                                  #{when-list _hoQGWMnyQPAh3k2jhWKgy}#)
                                                            #f)))))
                                                (begin
                                                  (let ((#{x _hoQGWMnyQPAh3k2jhWKn5}#
                                                          (#{expand-top-sequence _hoQGWMnyQPAh3k2jhWHTh}#
                                                            #{body _hoQGWMnyQPAh3k2jhWKgz}#
                                                            #{r _hoQGWMnyQPAh3k2jhWKcK}#
                                                            #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                            #{s _hoQGWMnyQPAh3k2jhWKgE}#
                                                            'e
                                                            '(eval)
                                                            #{mod _hoQGWMnyQPAh3k2jhWKgF}#)))
                                                    (primitive-eval
                                                      #{x _hoQGWMnyQPAh3k2jhWKn5}#))
                                                  (values
                                                    #{exps _hoQGWMnyQPAh3k2jhWKcQ}#))
                                                (values
                                                  #{exps _hoQGWMnyQPAh3k2jhWKcQ}#))))))
                                      #{tmp _hoQGWMnyQPAh3k2jhWKgr}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e _hoQGWMnyQPAh3k2jhWKgC}#)))
                                (if (if (eqv? #{type _hoQGWMnyQPAh3k2jhWKgA}#
                                              'define-syntax-form)
                                      #t
                                      (eqv? #{type _hoQGWMnyQPAh3k2jhWKgA}#
                                            'define-syntax-parameter-form))
                                  (let ((#{n _hoQGWMnyQPAh3k2jhWKon}#
                                          (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                            #{value _hoQGWMnyQPAh3k2jhWKgB}#
                                            #{w _hoQGWMnyQPAh3k2jhWKgD}#))
                                        (#{r _hoQGWMnyQPAh3k2jhWKoo}#
                                          (#{macros-only-env _hoQGWMnyQPAh3k2jhWHS9}#
                                            #{r _hoQGWMnyQPAh3k2jhWKcK}#)))
                                    (if (eqv? #{m _hoQGWMnyQPAh3k2jhWKcN}# 'c)
                                      (if (memq 'compile
                                                #{esew _hoQGWMnyQPAh3k2jhWKcO}#)
                                        (let ((#{e _hoQGWMnyQPAh3k2jhWKos}#
                                                (#{expand-install-global _hoQGWMnyQPAh3k2jhWHTi}#
                                                  #{n _hoQGWMnyQPAh3k2jhWKon}#
                                                  (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                                    #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                                    #{r _hoQGWMnyQPAh3k2jhWKoo}#
                                                    #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                    #{mod _hoQGWMnyQPAh3k2jhWKgF}#))))
                                          (begin
                                            (#{top-level-eval-hook _hoQGWMnyQPAh3k2jhWHSZ}#
                                              #{e _hoQGWMnyQPAh3k2jhWKos}#
                                              #{mod _hoQGWMnyQPAh3k2jhWKgF}#)
                                            (if (memq 'load
                                                      #{esew _hoQGWMnyQPAh3k2jhWKcO}#)
                                              (values
                                                (cons #{e _hoQGWMnyQPAh3k2jhWKos}#
                                                      #{exps _hoQGWMnyQPAh3k2jhWKcQ}#))
                                              (values
                                                #{exps _hoQGWMnyQPAh3k2jhWKcQ}#))))
                                        (if (memq 'load
                                                  #{esew _hoQGWMnyQPAh3k2jhWKcO}#)
                                          (values
                                            (cons (#{expand-install-global _hoQGWMnyQPAh3k2jhWHTi}#
                                                    #{n _hoQGWMnyQPAh3k2jhWKon}#
                                                    (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                                      #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                                      #{r _hoQGWMnyQPAh3k2jhWKoo}#
                                                      #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                      #{mod _hoQGWMnyQPAh3k2jhWKgF}#))
                                                  #{exps _hoQGWMnyQPAh3k2jhWKcQ}#))
                                          (values
                                            #{exps _hoQGWMnyQPAh3k2jhWKcQ}#)))
                                      (if (eqv? #{m _hoQGWMnyQPAh3k2jhWKcN}#
                                                'c&e)
                                        (let ((#{e _hoQGWMnyQPAh3k2jhWKvr}#
                                                (#{expand-install-global _hoQGWMnyQPAh3k2jhWHTi}#
                                                  #{n _hoQGWMnyQPAh3k2jhWKon}#
                                                  (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                                    #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                                    #{r _hoQGWMnyQPAh3k2jhWKoo}#
                                                    #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                    #{mod _hoQGWMnyQPAh3k2jhWKgF}#))))
                                          (begin
                                            (#{top-level-eval-hook _hoQGWMnyQPAh3k2jhWHSZ}#
                                              #{e _hoQGWMnyQPAh3k2jhWKvr}#
                                              #{mod _hoQGWMnyQPAh3k2jhWKgF}#)
                                            (values
                                              (cons #{e _hoQGWMnyQPAh3k2jhWKvr}#
                                                    #{exps _hoQGWMnyQPAh3k2jhWKcQ}#))))
                                        (begin
                                          (if (memq 'eval
                                                    #{esew _hoQGWMnyQPAh3k2jhWKcO}#)
                                            (#{top-level-eval-hook _hoQGWMnyQPAh3k2jhWHSZ}#
                                              (#{expand-install-global _hoQGWMnyQPAh3k2jhWHTi}#
                                                #{n _hoQGWMnyQPAh3k2jhWKon}#
                                                (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                                  #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                                  #{r _hoQGWMnyQPAh3k2jhWKoo}#
                                                  #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                  #{mod _hoQGWMnyQPAh3k2jhWKgF}#))
                                              #{mod _hoQGWMnyQPAh3k2jhWKgF}#))
                                          (values
                                            #{exps _hoQGWMnyQPAh3k2jhWKcQ}#)))))
                                  (if (eqv? #{type _hoQGWMnyQPAh3k2jhWKgA}#
                                            'define-form)
                                    (let ((#{n _hoQGWMnyQPAh3k2jhWK5m}#
                                            (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                              #{value _hoQGWMnyQPAh3k2jhWKgB}#
                                              #{w _hoQGWMnyQPAh3k2jhWKgD}#)))
                                      (let ((#{type _hoQGWMnyQPAh3k2jhWK5n}#
                                              (car (let ((#{t _hoQGWMnyQPAh3k2jhWK5u}#
                                                           (assq #{n _hoQGWMnyQPAh3k2jhWK5m}#
                                                                 #{r _hoQGWMnyQPAh3k2jhWKcK}#)))
                                                     (if #{t _hoQGWMnyQPAh3k2jhWK5u}#
                                                       (cdr #{t _hoQGWMnyQPAh3k2jhWK5u}#)
                                                       (if (symbol?
                                                             #{n _hoQGWMnyQPAh3k2jhWK5m}#)
                                                         (let ((#{t _hoQGWMnyQPAh3k2jhWK50}#
                                                                 (#{get-global-definition-hook _hoQGWMnyQPAh3k2jhWHSc}#
                                                                   #{n _hoQGWMnyQPAh3k2jhWK5m}#
                                                                   #{mod _hoQGWMnyQPAh3k2jhWKgF}#)))
                                                           (if #{t _hoQGWMnyQPAh3k2jhWK50}#
                                                             #{t _hoQGWMnyQPAh3k2jhWK50}#
                                                             '(global)))
                                                         '(displaced-lexical)))))))
                                        (if (if (eqv? #{type _hoQGWMnyQPAh3k2jhWK5n}#
                                                      'global)
                                              #t
                                              (if (eqv? #{type _hoQGWMnyQPAh3k2jhWK5n}#
                                                        'core)
                                                #t
                                                (if (eqv? #{type _hoQGWMnyQPAh3k2jhWK5n}#
                                                          'macro)
                                                  #t
                                                  (eqv? #{type _hoQGWMnyQPAh3k2jhWK5n}#
                                                        'module-ref))))
                                          (begin
                                            (if (if (if (eq? #{m _hoQGWMnyQPAh3k2jhWKcN}#
                                                             'c)
                                                      #t
                                                      (eq? #{m _hoQGWMnyQPAh3k2jhWKcN}#
                                                           'c&e))
                                                  (if (not (module-local-variable
                                                             (current-module)
                                                             #{n _hoQGWMnyQPAh3k2jhWK5m}#))
                                                    (current-module)
                                                    #f)
                                                  #f)
                                              (let ((#{old _hoQGWMnyQPAh3k2jhWK6T}#
                                                      (module-variable
                                                        (current-module)
                                                        #{n _hoQGWMnyQPAh3k2jhWK5m}#)))
                                                (if (if (variable?
                                                          #{old _hoQGWMnyQPAh3k2jhWK6T}#)
                                                      (variable-bound?
                                                        #{old _hoQGWMnyQPAh3k2jhWK6T}#)
                                                      #f)
                                                  (module-define!
                                                    (current-module)
                                                    #{n _hoQGWMnyQPAh3k2jhWK5m}#
                                                    (variable-ref
                                                      #{old _hoQGWMnyQPAh3k2jhWK6T}#))
                                                  (module-add!
                                                    (current-module)
                                                    #{n _hoQGWMnyQPAh3k2jhWK5m}#
                                                    (make-undefined-variable)))))
                                            (values
                                              (cons (if (eq? #{m _hoQGWMnyQPAh3k2jhWKcN}#
                                                             'c&e)
                                                      (let ((#{x _hoQGWMnyQPAh3k2jhWK6V}#
                                                              (#{build-global-definition _hoQGWMnyQPAh3k2jhWHSo}#
                                                                #{s _hoQGWMnyQPAh3k2jhWKgE}#
                                                                #{n _hoQGWMnyQPAh3k2jhWK5m}#
                                                                (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                                                  #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                                                  #{r _hoQGWMnyQPAh3k2jhWKcK}#
                                                                  #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                                  #{mod _hoQGWMnyQPAh3k2jhWKgF}#))))
                                                        (begin
                                                          (#{top-level-eval-hook _hoQGWMnyQPAh3k2jhWHSZ}#
                                                            #{x _hoQGWMnyQPAh3k2jhWK6V}#
                                                            #{mod _hoQGWMnyQPAh3k2jhWKgF}#)
                                                          #{x _hoQGWMnyQPAh3k2jhWK6V}#))
                                                      (lambda ()
                                                        (#{build-global-definition _hoQGWMnyQPAh3k2jhWHSo}#
                                                          #{s _hoQGWMnyQPAh3k2jhWKgE}#
                                                          #{n _hoQGWMnyQPAh3k2jhWK5m}#
                                                          (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                                            #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                                            #{r _hoQGWMnyQPAh3k2jhWKcK}#
                                                            #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                            #{mod _hoQGWMnyQPAh3k2jhWKgF}#))))
                                                    #{exps _hoQGWMnyQPAh3k2jhWKcQ}#)))
                                          (if (eqv? #{type _hoQGWMnyQPAh3k2jhWK5n}#
                                                    'displaced-lexical)
                                            (syntax-violation
                                              #f
                                              "identifier out of context"
                                              #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                              (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                                #{value _hoQGWMnyQPAh3k2jhWKgB}#
                                                #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                #{mod _hoQGWMnyQPAh3k2jhWKgF}#))
                                            (syntax-violation
                                              #f
                                              "cannot define keyword at top level"
                                              #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                              (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                                #{value _hoQGWMnyQPAh3k2jhWKgB}#
                                                #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                #{mod _hoQGWMnyQPAh3k2jhWKgF}#))))))
                                    (values
                                      (cons (if (eq? #{m _hoQGWMnyQPAh3k2jhWKcN}#
                                                     'c&e)
                                              (let ((#{x _hoQGWMnyQPAh3k2jhWLBT}#
                                                      (#{expand-expr _hoQGWMnyQPAh3k2jhWHTm}#
                                                        #{type _hoQGWMnyQPAh3k2jhWKgA}#
                                                        #{value _hoQGWMnyQPAh3k2jhWKgB}#
                                                        #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                                        #{r _hoQGWMnyQPAh3k2jhWKcK}#
                                                        #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                        #{s _hoQGWMnyQPAh3k2jhWKgE}#
                                                        #{mod _hoQGWMnyQPAh3k2jhWKgF}#)))
                                                (begin
                                                  (primitive-eval
                                                    #{x _hoQGWMnyQPAh3k2jhWLBT}#)
                                                  #{x _hoQGWMnyQPAh3k2jhWLBT}#))
                                              (lambda ()
                                                (#{expand-expr _hoQGWMnyQPAh3k2jhWHTm}#
                                                  #{type _hoQGWMnyQPAh3k2jhWKgA}#
                                                  #{value _hoQGWMnyQPAh3k2jhWKgB}#
                                                  #{e _hoQGWMnyQPAh3k2jhWKgC}#
                                                  #{r _hoQGWMnyQPAh3k2jhWKcK}#
                                                  #{w _hoQGWMnyQPAh3k2jhWKgD}#
                                                  #{s _hoQGWMnyQPAh3k2jhWKgE}#
                                                  #{mod _hoQGWMnyQPAh3k2jhWKgF}#)))
                                            #{exps _hoQGWMnyQPAh3k2jhWKcQ}#))))))))))
                    (lambda (#{exps _hoQGWMnyQPAh3k2jhWLBc}#)
                      (#{scan _hoQGWMnyQPAh3k2jhWKaG}#
                        (cdr #{body _hoQGWMnyQPAh3k2jhWKcJ}#)
                        #{r _hoQGWMnyQPAh3k2jhWKcK}#
                        #{w _hoQGWMnyQPAh3k2jhWKcL}#
                        #{s _hoQGWMnyQPAh3k2jhWKcM}#
                        #{m _hoQGWMnyQPAh3k2jhWKcN}#
                        #{esew _hoQGWMnyQPAh3k2jhWKcO}#
                        #{mod _hoQGWMnyQPAh3k2jhWKcP}#
                        #{exps _hoQGWMnyQPAh3k2jhWLBc}#)))))))
           (call-with-values
             (lambda ()
               (#{scan _hoQGWMnyQPAh3k2jhWKaG}#
                 #{body _hoQGWMnyQPAh3k2jhWKZ@}#
                 #{r _hoQGWMnyQPAh3k2jhWKaA}#
                 #{w _hoQGWMnyQPAh3k2jhWKaB}#
                 #{s _hoQGWMnyQPAh3k2jhWKaC}#
                 #{m _hoQGWMnyQPAh3k2jhWKaD}#
                 #{esew _hoQGWMnyQPAh3k2jhWKaE}#
                 #{mod _hoQGWMnyQPAh3k2jhWKaF}#
                 '()))
             (lambda (#{exps _hoQGWMnyQPAh3k2jhWKaJ}#)
               (if (null? #{exps _hoQGWMnyQPAh3k2jhWKaJ}#)
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 0)
                   #{s _hoQGWMnyQPAh3k2jhWKaC}#)
                 (#{build-sequence _hoQGWMnyQPAh3k2jhWHSu}#
                   #{s _hoQGWMnyQPAh3k2jhWKaC}#
                   (letrec*
                     ((#{lp _hoQGWMnyQPAh3k2jhWKax}#
                        (lambda (#{in _hoQGWMnyQPAh3k2jhWKcF}#
                                 #{out _hoQGWMnyQPAh3k2jhWKcG}#)
                          (if (null? #{in _hoQGWMnyQPAh3k2jhWKcF}#)
                            #{out _hoQGWMnyQPAh3k2jhWKcG}#
                            (let ((#{e _hoQGWMnyQPAh3k2jhWKcH}#
                                    (car #{in _hoQGWMnyQPAh3k2jhWKcF}#)))
                              (#{lp _hoQGWMnyQPAh3k2jhWKax}#
                                (cdr #{in _hoQGWMnyQPAh3k2jhWKcF}#)
                                (cons (if (procedure?
                                            #{e _hoQGWMnyQPAh3k2jhWKcH}#)
                                        (#{e _hoQGWMnyQPAh3k2jhWKcH}#)
                                        #{e _hoQGWMnyQPAh3k2jhWKcH}#)
                                      #{out _hoQGWMnyQPAh3k2jhWKcG}#)))))))
                     (#{lp _hoQGWMnyQPAh3k2jhWKax}#
                       #{exps _hoQGWMnyQPAh3k2jhWKaJ}#
                       '())))))))))
     (#{expand-install-global _hoQGWMnyQPAh3k2jhWHTi}#
       (lambda (#{name _hoQGWMnyQPAh3k2jhWLBd}#
                #{e _hoQGWMnyQPAh3k2jhWLBe}#)
         (let ((#{exp _hoQGWMnyQPAh3k2jhWLBk}#
                 (let ((#{fun-exp _hoQGWMnyQPAh3k2jhWLBu}#
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'make-syntax-transformer)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'make-syntax-transformer
                             #f)))
                       (#{arg-exps _hoQGWMnyQPAh3k2jhWLBv}#
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #{name _hoQGWMnyQPAh3k2jhWLBd}#)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'macro)
                               #{e _hoQGWMnyQPAh3k2jhWLBe}#)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     #{fun-exp _hoQGWMnyQPAh3k2jhWLBu}#
                     #{arg-exps _hoQGWMnyQPAh3k2jhWLBv}#))))
           (begin
             (if (if (struct? #{exp _hoQGWMnyQPAh3k2jhWLBk}#)
                   (eq? (struct-vtable #{exp _hoQGWMnyQPAh3k2jhWLBk}#)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((#{meta _hoQGWMnyQPAh3k2jhWLCY}#
                       (struct-ref #{exp _hoQGWMnyQPAh3k2jhWLBk}# 1)))
                 (if (not (assq 'name #{meta _hoQGWMnyQPAh3k2jhWLCY}#))
                   (let ((#{v _hoQGWMnyQPAh3k2jhWLCf}#
                           (cons (cons 'name #{name _hoQGWMnyQPAh3k2jhWLBd}#)
                                 #{meta _hoQGWMnyQPAh3k2jhWLCY}#)))
                     (struct-set!
                       #{exp _hoQGWMnyQPAh3k2jhWLBk}#
                       1
                       #{v _hoQGWMnyQPAh3k2jhWLCf}#)))))
             (make-struct/no-tail
               (vector-ref %expanded-vtables 9)
               #f
               #{name _hoQGWMnyQPAh3k2jhWLBd}#
               #{exp _hoQGWMnyQPAh3k2jhWLBk}#)))))
     (#{parse-when-list _hoQGWMnyQPAh3k2jhWHTj}#
       (lambda (#{e _hoQGWMnyQPAh3k2jhWLCq}#
                #{when-list _hoQGWMnyQPAh3k2jhWLCr}#)
         (let ((#{result _hoQGWMnyQPAh3k2jhWLCs}#
                 (#{strip _hoQGWMnyQPAh3k2jhWHTy}#
                   #{when-list _hoQGWMnyQPAh3k2jhWLCr}#
                   '(()))))
           (letrec*
             ((#{lp _hoQGWMnyQPAh3k2jhWLCt}#
                (lambda (#{l _hoQGWMnyQPAh3k2jhWLDj}#)
                  (if (null? #{l _hoQGWMnyQPAh3k2jhWLDj}#)
                    #{result _hoQGWMnyQPAh3k2jhWLCs}#
                    (if (let ((#{t _hoQGWMnyQPAh3k2jhWLDl}#
                                (car #{l _hoQGWMnyQPAh3k2jhWLDj}#)))
                          (if (eq? #{t _hoQGWMnyQPAh3k2jhWLDl}# 'compile)
                            #t
                            (if (eq? #{t _hoQGWMnyQPAh3k2jhWLDl}# 'load)
                              #t
                              (if (eq? #{t _hoQGWMnyQPAh3k2jhWLDl}# 'eval)
                                #t
                                (eq? #{t _hoQGWMnyQPAh3k2jhWLDl}# 'expand)))))
                      (#{lp _hoQGWMnyQPAh3k2jhWLCt}#
                        (cdr #{l _hoQGWMnyQPAh3k2jhWLDj}#))
                      (syntax-violation
                        'eval-when
                        "invalid situation"
                        #{e _hoQGWMnyQPAh3k2jhWLCq}#
                        (car #{l _hoQGWMnyQPAh3k2jhWLDj}#)))))))
             (#{lp _hoQGWMnyQPAh3k2jhWLCt}#
               #{result _hoQGWMnyQPAh3k2jhWLCs}#)))))
     (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
       (lambda (#{e _hoQGWMnyQPAh3k2jhWLDn}#
                #{r _hoQGWMnyQPAh3k2jhWLDo}#
                #{w _hoQGWMnyQPAh3k2jhWLDp}#
                #{s _hoQGWMnyQPAh3k2jhWLDq}#
                #{rib _hoQGWMnyQPAh3k2jhWLDr}#
                #{mod _hoQGWMnyQPAh3k2jhWLDs}#
                #{for-car? _hoQGWMnyQPAh3k2jhWLDt}#)
         (if (symbol? #{e _hoQGWMnyQPAh3k2jhWLDn}#)
           (let ((#{n _hoQGWMnyQPAh3k2jhWLDu}#
                   (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                     #{e _hoQGWMnyQPAh3k2jhWLDn}#
                     #{w _hoQGWMnyQPAh3k2jhWLDp}#)))
             (let ((#{b _hoQGWMnyQPAh3k2jhWLDv}#
                     (let ((#{t _hoQGWMnyQPAh3k2jhWLD3}#
                             (assq #{n _hoQGWMnyQPAh3k2jhWLDu}#
                                   #{r _hoQGWMnyQPAh3k2jhWLDo}#)))
                       (if #{t _hoQGWMnyQPAh3k2jhWLD3}#
                         (cdr #{t _hoQGWMnyQPAh3k2jhWLD3}#)
                         (if (symbol? #{n _hoQGWMnyQPAh3k2jhWLDu}#)
                           (let ((#{t _hoQGWMnyQPAh3k2jhWLD9}#
                                   (#{get-global-definition-hook _hoQGWMnyQPAh3k2jhWHSc}#
                                     #{n _hoQGWMnyQPAh3k2jhWLDu}#
                                     #{mod _hoQGWMnyQPAh3k2jhWLDs}#)))
                             (if #{t _hoQGWMnyQPAh3k2jhWLD9}#
                               #{t _hoQGWMnyQPAh3k2jhWLD9}#
                               '(global)))
                           '(displaced-lexical))))))
               (let ((#{type _hoQGWMnyQPAh3k2jhWLDw}#
                       (car #{b _hoQGWMnyQPAh3k2jhWLDv}#)))
                 (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLDw}# 'lexical)
                   (values
                     #{type _hoQGWMnyQPAh3k2jhWLDw}#
                     (cdr #{b _hoQGWMnyQPAh3k2jhWLDv}#)
                     #{e _hoQGWMnyQPAh3k2jhWLDn}#
                     #{w _hoQGWMnyQPAh3k2jhWLDp}#
                     #{s _hoQGWMnyQPAh3k2jhWLDq}#
                     #{mod _hoQGWMnyQPAh3k2jhWLDs}#)
                   (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLDw}# 'global)
                     (values
                       #{type _hoQGWMnyQPAh3k2jhWLDw}#
                       #{n _hoQGWMnyQPAh3k2jhWLDu}#
                       #{e _hoQGWMnyQPAh3k2jhWLDn}#
                       #{w _hoQGWMnyQPAh3k2jhWLDp}#
                       #{s _hoQGWMnyQPAh3k2jhWLDq}#
                       #{mod _hoQGWMnyQPAh3k2jhWLDs}#)
                     (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLDw}# 'macro)
                       (if #{for-car? _hoQGWMnyQPAh3k2jhWLDt}#
                         (values
                           #{type _hoQGWMnyQPAh3k2jhWLDw}#
                           (cdr #{b _hoQGWMnyQPAh3k2jhWLDv}#)
                           #{e _hoQGWMnyQPAh3k2jhWLDn}#
                           #{w _hoQGWMnyQPAh3k2jhWLDp}#
                           #{s _hoQGWMnyQPAh3k2jhWLDq}#
                           #{mod _hoQGWMnyQPAh3k2jhWLDs}#)
                         (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
                           (#{expand-macro _hoQGWMnyQPAh3k2jhWHTo}#
                             (cdr #{b _hoQGWMnyQPAh3k2jhWLDv}#)
                             #{e _hoQGWMnyQPAh3k2jhWLDn}#
                             #{r _hoQGWMnyQPAh3k2jhWLDo}#
                             #{w _hoQGWMnyQPAh3k2jhWLDp}#
                             #{s _hoQGWMnyQPAh3k2jhWLDq}#
                             #{rib _hoQGWMnyQPAh3k2jhWLDr}#
                             #{mod _hoQGWMnyQPAh3k2jhWLDs}#)
                           #{r _hoQGWMnyQPAh3k2jhWLDo}#
                           '(())
                           #{s _hoQGWMnyQPAh3k2jhWLDq}#
                           #{rib _hoQGWMnyQPAh3k2jhWLDr}#
                           #{mod _hoQGWMnyQPAh3k2jhWLDs}#
                           #f))
                       (values
                         #{type _hoQGWMnyQPAh3k2jhWLDw}#
                         (cdr #{b _hoQGWMnyQPAh3k2jhWLDv}#)
                         #{e _hoQGWMnyQPAh3k2jhWLDn}#
                         #{w _hoQGWMnyQPAh3k2jhWLDp}#
                         #{s _hoQGWMnyQPAh3k2jhWLDq}#
                         #{mod _hoQGWMnyQPAh3k2jhWLDs}#)))))))
           (if (pair? #{e _hoQGWMnyQPAh3k2jhWLDn}#)
             (let ((#{first _hoQGWMnyQPAh3k2jhWLER}#
                     (car #{e _hoQGWMnyQPAh3k2jhWLDn}#)))
               (call-with-values
                 (lambda ()
                   (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
                     #{first _hoQGWMnyQPAh3k2jhWLER}#
                     #{r _hoQGWMnyQPAh3k2jhWLDo}#
                     #{w _hoQGWMnyQPAh3k2jhWLDp}#
                     #{s _hoQGWMnyQPAh3k2jhWLDq}#
                     #{rib _hoQGWMnyQPAh3k2jhWLDr}#
                     #{mod _hoQGWMnyQPAh3k2jhWLDs}#
                     #t))
                 (lambda (#{ftype _hoQGWMnyQPAh3k2jhWLET}#
                          #{fval _hoQGWMnyQPAh3k2jhWLEU}#
                          #{fe _hoQGWMnyQPAh3k2jhWLEV}#
                          #{fw _hoQGWMnyQPAh3k2jhWLEW}#
                          #{fs _hoQGWMnyQPAh3k2jhWLEX}#
                          #{fmod _hoQGWMnyQPAh3k2jhWLEY}#)
                   (if (eqv? #{ftype _hoQGWMnyQPAh3k2jhWLET}# 'lexical)
                     (values
                       'lexical-call
                       #{fval _hoQGWMnyQPAh3k2jhWLEU}#
                       #{e _hoQGWMnyQPAh3k2jhWLDn}#
                       #{w _hoQGWMnyQPAh3k2jhWLDp}#
                       #{s _hoQGWMnyQPAh3k2jhWLDq}#
                       #{mod _hoQGWMnyQPAh3k2jhWLDs}#)
                     (if (eqv? #{ftype _hoQGWMnyQPAh3k2jhWLET}# 'global)
                       (values
                         'global-call
                         (vector
                           'syntax-object
                           #{fval _hoQGWMnyQPAh3k2jhWLEU}#
                           #{w _hoQGWMnyQPAh3k2jhWLDp}#
                           #{fmod _hoQGWMnyQPAh3k2jhWLEY}#)
                         #{e _hoQGWMnyQPAh3k2jhWLDn}#
                         #{w _hoQGWMnyQPAh3k2jhWLDp}#
                         #{s _hoQGWMnyQPAh3k2jhWLDq}#
                         #{mod _hoQGWMnyQPAh3k2jhWLDs}#)
                       (if (eqv? #{ftype _hoQGWMnyQPAh3k2jhWLET}# 'macro)
                         (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
                           (#{expand-macro _hoQGWMnyQPAh3k2jhWHTo}#
                             #{fval _hoQGWMnyQPAh3k2jhWLEU}#
                             #{e _hoQGWMnyQPAh3k2jhWLDn}#
                             #{r _hoQGWMnyQPAh3k2jhWLDo}#
                             #{w _hoQGWMnyQPAh3k2jhWLDp}#
                             #{s _hoQGWMnyQPAh3k2jhWLDq}#
                             #{rib _hoQGWMnyQPAh3k2jhWLDr}#
                             #{mod _hoQGWMnyQPAh3k2jhWLDs}#)
                           #{r _hoQGWMnyQPAh3k2jhWLDo}#
                           '(())
                           #{s _hoQGWMnyQPAh3k2jhWLDq}#
                           #{rib _hoQGWMnyQPAh3k2jhWLDr}#
                           #{mod _hoQGWMnyQPAh3k2jhWLDs}#
                           #{for-car? _hoQGWMnyQPAh3k2jhWLDt}#)
                         (if (eqv? #{ftype _hoQGWMnyQPAh3k2jhWLET}#
                                   'module-ref)
                           (call-with-values
                             (lambda ()
                               (#{fval _hoQGWMnyQPAh3k2jhWLEU}#
                                 #{e _hoQGWMnyQPAh3k2jhWLDn}#
                                 #{r _hoQGWMnyQPAh3k2jhWLDo}#
                                 #{w _hoQGWMnyQPAh3k2jhWLDp}#))
                             (lambda (#{e _hoQGWMnyQPAh3k2jhWLEt}#
                                      #{r _hoQGWMnyQPAh3k2jhWLEu}#
                                      #{w _hoQGWMnyQPAh3k2jhWLEv}#
                                      #{s _hoQGWMnyQPAh3k2jhWLEw}#
                                      #{mod _hoQGWMnyQPAh3k2jhWLEx}#)
                               (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
                                 #{e _hoQGWMnyQPAh3k2jhWLEt}#
                                 #{r _hoQGWMnyQPAh3k2jhWLEu}#
                                 #{w _hoQGWMnyQPAh3k2jhWLEv}#
                                 #{s _hoQGWMnyQPAh3k2jhWLEw}#
                                 #{rib _hoQGWMnyQPAh3k2jhWLDr}#
                                 #{mod _hoQGWMnyQPAh3k2jhWLEx}#
                                 #{for-car? _hoQGWMnyQPAh3k2jhWLDt}#)))
                           (if (eqv? #{ftype _hoQGWMnyQPAh3k2jhWLET}# 'core)
                             (values
                               'core-form
                               #{fval _hoQGWMnyQPAh3k2jhWLEU}#
                               #{e _hoQGWMnyQPAh3k2jhWLDn}#
                               #{w _hoQGWMnyQPAh3k2jhWLDp}#
                               #{s _hoQGWMnyQPAh3k2jhWLDq}#
                               #{mod _hoQGWMnyQPAh3k2jhWLDs}#)
                             (if (eqv? #{ftype _hoQGWMnyQPAh3k2jhWLET}#
                                       'local-syntax)
                               (values
                                 'local-syntax-form
                                 #{fval _hoQGWMnyQPAh3k2jhWLEU}#
                                 #{e _hoQGWMnyQPAh3k2jhWLDn}#
                                 #{w _hoQGWMnyQPAh3k2jhWLDp}#
                                 #{s _hoQGWMnyQPAh3k2jhWLDq}#
                                 #{mod _hoQGWMnyQPAh3k2jhWLDs}#)
                               (if (eqv? #{ftype _hoQGWMnyQPAh3k2jhWLET}#
                                         'begin)
                                 (values
                                   'begin-form
                                   #f
                                   #{e _hoQGWMnyQPAh3k2jhWLDn}#
                                   #{w _hoQGWMnyQPAh3k2jhWLDp}#
                                   #{s _hoQGWMnyQPAh3k2jhWLDq}#
                                   #{mod _hoQGWMnyQPAh3k2jhWLDs}#)
                                 (if (eqv? #{ftype _hoQGWMnyQPAh3k2jhWLET}#
                                           'eval-when)
                                   (values
                                     'eval-when-form
                                     #f
                                     #{e _hoQGWMnyQPAh3k2jhWLDn}#
                                     #{w _hoQGWMnyQPAh3k2jhWLDp}#
                                     #{s _hoQGWMnyQPAh3k2jhWLDq}#
                                     #{mod _hoQGWMnyQPAh3k2jhWLDs}#)
                                   (if (eqv? #{ftype _hoQGWMnyQPAh3k2jhWLET}#
                                             'define)
                                     (let ((#{tmp _hoQGWMnyQPAh3k2jhWLFC}#
                                             ($sc-dispatch
                                               #{e _hoQGWMnyQPAh3k2jhWLDn}#
                                               '(_ any any))))
                                       (if (if #{tmp _hoQGWMnyQPAh3k2jhWLFC}#
                                             (@apply
                                               (lambda (#{name _hoQGWMnyQPAh3k2jhWLFG}#
                                                        #{val _hoQGWMnyQPAh3k2jhWLFH}#)
                                                 (if (symbol?
                                                       #{name _hoQGWMnyQPAh3k2jhWLFG}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name _hoQGWMnyQPAh3k2jhWLFG}#)
                                                         (if (= (vector-length
                                                                  #{name _hoQGWMnyQPAh3k2jhWLFG}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name _hoQGWMnyQPAh3k2jhWLFG}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name _hoQGWMnyQPAh3k2jhWLFG}#
                                                         1))
                                                     #f)))
                                               #{tmp _hoQGWMnyQPAh3k2jhWLFC}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name _hoQGWMnyQPAh3k2jhWLFi}#
                                                    #{val _hoQGWMnyQPAh3k2jhWLFj}#)
                                             (values
                                               'define-form
                                               #{name _hoQGWMnyQPAh3k2jhWLFi}#
                                               #{val _hoQGWMnyQPAh3k2jhWLFj}#
                                               #{w _hoQGWMnyQPAh3k2jhWLDp}#
                                               #{s _hoQGWMnyQPAh3k2jhWLDq}#
                                               #{mod _hoQGWMnyQPAh3k2jhWLDs}#))
                                           #{tmp _hoQGWMnyQPAh3k2jhWLFC}#)
                                         (let ((#{tmp _hoQGWMnyQPAh3k2jhWLFk}#
                                                 ($sc-dispatch
                                                   #{e _hoQGWMnyQPAh3k2jhWLDn}#
                                                   '(_ (any . any)
                                                       any
                                                       .
                                                       each-any))))
                                           (if (if #{tmp _hoQGWMnyQPAh3k2jhWLFk}#
                                                 (@apply
                                                   (lambda (#{name _hoQGWMnyQPAh3k2jhWLFo}#
                                                            #{args _hoQGWMnyQPAh3k2jhWLFp}#
                                                            #{e1 _hoQGWMnyQPAh3k2jhWLFq}#
                                                            #{e2 _hoQGWMnyQPAh3k2jhWLFr}#)
                                                     (if (if (symbol?
                                                               #{name _hoQGWMnyQPAh3k2jhWLFo}#)
                                                           #t
                                                           (if (if (vector?
                                                                     #{name _hoQGWMnyQPAh3k2jhWLFo}#)
                                                                 (if (= (vector-length
                                                                          #{name _hoQGWMnyQPAh3k2jhWLFo}#)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          #{name _hoQGWMnyQPAh3k2jhWLFo}#
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 #{name _hoQGWMnyQPAh3k2jhWLFo}#
                                                                 1))
                                                             #f))
                                                       (#{valid-bound-ids? _hoQGWMnyQPAh3k2jhWHTb}#
                                                         (letrec*
                                                           ((#{lvl _hoQGWMnyQPAh3k2jhWLIA}#
                                                              (lambda (#{vars _hoQGWMnyQPAh3k2jhWLIC}#
                                                                       #{ls _hoQGWMnyQPAh3k2jhWLID}#
                                                                       #{w _hoQGWMnyQPAh3k2jhWLIE}#)
                                                                (if (pair? #{vars _hoQGWMnyQPAh3k2jhWLIC}#)
                                                                  (#{lvl _hoQGWMnyQPAh3k2jhWLIA}#
                                                                    (cdr #{vars _hoQGWMnyQPAh3k2jhWLIC}#)
                                                                    (cons (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                                                            (car #{vars _hoQGWMnyQPAh3k2jhWLIC}#)
                                                                            #{w _hoQGWMnyQPAh3k2jhWLIE}#
                                                                            #f)
                                                                          #{ls _hoQGWMnyQPAh3k2jhWLID}#)
                                                                    #{w _hoQGWMnyQPAh3k2jhWLIE}#)
                                                                  (if (if (symbol?
                                                                            #{vars _hoQGWMnyQPAh3k2jhWLIC}#)
                                                                        #t
                                                                        (if (if (vector?
                                                                                  #{vars _hoQGWMnyQPAh3k2jhWLIC}#)
                                                                              (if (= (vector-length
                                                                                       #{vars _hoQGWMnyQPAh3k2jhWLIC}#)
                                                                                     4)
                                                                                (eq? (vector-ref
                                                                                       #{vars _hoQGWMnyQPAh3k2jhWLIC}#
                                                                                       0)
                                                                                     'syntax-object)
                                                                                #f)
                                                                              #f)
                                                                          (symbol?
                                                                            (vector-ref
                                                                              #{vars _hoQGWMnyQPAh3k2jhWLIC}#
                                                                              1))
                                                                          #f))
                                                                    (cons (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                                                            #{vars _hoQGWMnyQPAh3k2jhWLIC}#
                                                                            #{w _hoQGWMnyQPAh3k2jhWLIE}#
                                                                            #f)
                                                                          #{ls _hoQGWMnyQPAh3k2jhWLID}#)
                                                                    (if (null? #{vars _hoQGWMnyQPAh3k2jhWLIC}#)
                                                                      #{ls _hoQGWMnyQPAh3k2jhWLID}#
                                                                      (if (if (vector?
                                                                                #{vars _hoQGWMnyQPAh3k2jhWLIC}#)
                                                                            (if (= (vector-length
                                                                                     #{vars _hoQGWMnyQPAh3k2jhWLIC}#)
                                                                                   4)
                                                                              (eq? (vector-ref
                                                                                     #{vars _hoQGWMnyQPAh3k2jhWLIC}#
                                                                                     0)
                                                                                   'syntax-object)
                                                                              #f)
                                                                            #f)
                                                                        (#{lvl _hoQGWMnyQPAh3k2jhWLIA}#
                                                                          (vector-ref
                                                                            #{vars _hoQGWMnyQPAh3k2jhWLIC}#
                                                                            1)
                                                                          #{ls _hoQGWMnyQPAh3k2jhWLID}#
                                                                          (#{join-wraps _hoQGWMnyQPAh3k2jhWHTR}#
                                                                            #{w _hoQGWMnyQPAh3k2jhWLIE}#
                                                                            (vector-ref
                                                                              #{vars _hoQGWMnyQPAh3k2jhWLIC}#
                                                                              2)))
                                                                        (cons #{vars _hoQGWMnyQPAh3k2jhWLIC}#
                                                                              #{ls _hoQGWMnyQPAh3k2jhWLID}#))))))))
                                                           (#{lvl _hoQGWMnyQPAh3k2jhWLIA}#
                                                             #{args _hoQGWMnyQPAh3k2jhWLFp}#
                                                             '()
                                                             '(()))))
                                                       #f))
                                                   #{tmp _hoQGWMnyQPAh3k2jhWLFk}#)
                                                 #f)
                                             (@apply
                                               (lambda (#{name _hoQGWMnyQPAh3k2jhWLIw}#
                                                        #{args _hoQGWMnyQPAh3k2jhWLIx}#
                                                        #{e1 _hoQGWMnyQPAh3k2jhWLIy}#
                                                        #{e2 _hoQGWMnyQPAh3k2jhWLIz}#)
                                                 (values
                                                   'define-form
                                                   (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                                     #{name _hoQGWMnyQPAh3k2jhWLIw}#
                                                     #{w _hoQGWMnyQPAh3k2jhWLDp}#
                                                     #{mod _hoQGWMnyQPAh3k2jhWLDs}#)
                                                   (let ((#{e _hoQGWMnyQPAh3k2jhWLI5}#
                                                           (cons '#(syntax-object
                                                                    lambda
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(name
                                                                         args
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("29f"
                                                                         "29g"
                                                                         "29h"
                                                                         "29i"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(ftype
                                                                         fval
                                                                         fe
                                                                         fw
                                                                         fs
                                                                         fmod)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("28w"
                                                                         "28x"
                                                                         "28y"
                                                                         "28z"
                                                                         "290"
                                                                         "291"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(first)
                                                                       #((top))
                                                                       #("28v"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(e
                                                                         r
                                                                         w
                                                                         s
                                                                         rib
                                                                         mod
                                                                         for-car?)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("28l"
                                                                         "28m"
                                                                         "28n"
                                                                         "28o"
                                                                         "28p"
                                                                         "28q"
                                                                         "28r"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("1tt"
                                                                        "1ts"
                                                                        "1tr"
                                                                        "1tq"
                                                                        "1tp"
                                                                        "1to"
                                                                        "1tn"
                                                                        "1tm"
                                                                        "1tl"
                                                                        "1tk"
                                                                        "1tj"
                                                                        "1ti"
                                                                        "1th"
                                                                        "1tg"
                                                                        "1tf"
                                                                        "1te"
                                                                        "1td"
                                                                        "1tc"
                                                                        "1tb"
                                                                        "1ta"
                                                                        "1t9"
                                                                        "1t8"
                                                                        "1t7"
                                                                        "1t6"
                                                                        "1t5"
                                                                        "1t4"
                                                                        "1t3"
                                                                        "1t2"
                                                                        "1t1"
                                                                        "1t0"
                                                                        "1sz"
                                                                        "1sy"
                                                                        "1sx"
                                                                        "1sw"
                                                                        "1sv"
                                                                        "1su"
                                                                        "1st"
                                                                        "1ss"
                                                                        "1sr"
                                                                        "1sq"
                                                                        "1sp"
                                                                        "1so"
                                                                        "1sn"
                                                                        "1sm"
                                                                        "1sl"
                                                                        "1sk"
                                                                        "1sj"
                                                                        "1si"
                                                                        "1sh"
                                                                        "1sg"
                                                                        "1sf"
                                                                        "1se"
                                                                        "1sd"
                                                                        "1sc"
                                                                        "1sb"
                                                                        "1sa"
                                                                        "1s9"
                                                                        "1s8"
                                                                        "1s7"
                                                                        "1s6"
                                                                        "1s5"
                                                                        "1s4"
                                                                        "1s3"
                                                                        "1s2"
                                                                        "1s1"
                                                                        "1s0"
                                                                        "1rz"
                                                                        "1ry"
                                                                        "1rx"
                                                                        "1rw"
                                                                        "1rv"
                                                                        "1ru"
                                                                        "1rt"
                                                                        "1rs"
                                                                        "1rr"
                                                                        "1rq"
                                                                        "1rp"
                                                                        "1ro"
                                                                        "1rn"
                                                                        "1rm"
                                                                        "1rl"
                                                                        "1rk"
                                                                        "1rj"
                                                                        "1ri"
                                                                        "1rh"
                                                                        "1rg"
                                                                        "1rf"
                                                                        "1re"
                                                                        "1rd"
                                                                        "1rc"
                                                                        "1rb"
                                                                        "1ra"
                                                                        "1r9"
                                                                        "1r8"
                                                                        "1r7"
                                                                        "1r6"
                                                                        "1r5"
                                                                        "1r4"
                                                                        "1r3"
                                                                        "1r2"
                                                                        "1r1"
                                                                        "1r0"
                                                                        "1qz"
                                                                        "1qy"
                                                                        "1qx"
                                                                        "1qw"
                                                                        "1qv"
                                                                        "1qu"
                                                                        "1qt"
                                                                        "1qs"
                                                                        "1qr"
                                                                        "1qq"
                                                                        "1qp"
                                                                        "1qo"
                                                                        "1qn"
                                                                        "1qm"
                                                                        "1ql"
                                                                        "1qk"
                                                                        "1qj"
                                                                        "1qi"
                                                                        "1qh"
                                                                        "1qg"
                                                                        "1qf"
                                                                        "1qe"
                                                                        "1qd"
                                                                        "1qc"
                                                                        "1qb"
                                                                        "1qa"
                                                                        "1q9"
                                                                        "1q8"
                                                                        "1q7"
                                                                        "1q6"
                                                                        "1q5"
                                                                        "1q4"
                                                                        "1q3"
                                                                        "1q2"
                                                                        "1q1"
                                                                        "1q0"
                                                                        "1pz"
                                                                        "1py"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("1og"
                                                                        "1of"
                                                                        "1oe")))
                                                                    (hygiene
                                                                      guile))
                                                                 (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                                                   (cons #{args _hoQGWMnyQPAh3k2jhWLIx}#
                                                                         (cons #{e1 _hoQGWMnyQPAh3k2jhWLIy}#
                                                                               #{e2 _hoQGWMnyQPAh3k2jhWLIz}#))
                                                                   #{w _hoQGWMnyQPAh3k2jhWLDp}#
                                                                   #{mod _hoQGWMnyQPAh3k2jhWLDs}#))))
                                                     (begin
                                                       (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWLI5}#)
                                                             #{s _hoQGWMnyQPAh3k2jhWLDq}#
                                                             #f)
                                                         (set-source-properties!
                                                           #{e _hoQGWMnyQPAh3k2jhWLI5}#
                                                           #{s _hoQGWMnyQPAh3k2jhWLDq}#))
                                                       #{e _hoQGWMnyQPAh3k2jhWLI5}#))
                                                   '(())
                                                   #{s _hoQGWMnyQPAh3k2jhWLDq}#
                                                   #{mod _hoQGWMnyQPAh3k2jhWLDs}#))
                                               #{tmp _hoQGWMnyQPAh3k2jhWLFk}#)
                                             (let ((#{tmp _hoQGWMnyQPAh3k2jhWLJA}#
                                                     ($sc-dispatch
                                                       #{e _hoQGWMnyQPAh3k2jhWLDn}#
                                                       '(_ any))))
                                               (if (if #{tmp _hoQGWMnyQPAh3k2jhWLJA}#
                                                     (@apply
                                                       (lambda (#{name _hoQGWMnyQPAh3k2jhWLJE}#)
                                                         (if (symbol?
                                                               #{name _hoQGWMnyQPAh3k2jhWLJE}#)
                                                           #t
                                                           (if (if (vector?
                                                                     #{name _hoQGWMnyQPAh3k2jhWLJE}#)
                                                                 (if (= (vector-length
                                                                          #{name _hoQGWMnyQPAh3k2jhWLJE}#)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          #{name _hoQGWMnyQPAh3k2jhWLJE}#
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 #{name _hoQGWMnyQPAh3k2jhWLJE}#
                                                                 1))
                                                             #f)))
                                                       #{tmp _hoQGWMnyQPAh3k2jhWLJA}#)
                                                     #f)
                                                 (@apply
                                                   (lambda (#{name _hoQGWMnyQPAh3k2jhWLJf}#)
                                                     (values
                                                       'define-form
                                                       (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                                         #{name _hoQGWMnyQPAh3k2jhWLJf}#
                                                         #{w _hoQGWMnyQPAh3k2jhWLDp}#
                                                         #{mod _hoQGWMnyQPAh3k2jhWLDs}#)
                                                       '(#(syntax-object
                                                           if
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("29k"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("28w"
                                                                "28x"
                                                                "28y"
                                                                "28z"
                                                                "290"
                                                                "291"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("28v"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("28l"
                                                                "28m"
                                                                "28n"
                                                                "28o"
                                                                "28p"
                                                                "28q"
                                                                "28r"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("1tt"
                                                               "1ts"
                                                               "1tr"
                                                               "1tq"
                                                               "1tp"
                                                               "1to"
                                                               "1tn"
                                                               "1tm"
                                                               "1tl"
                                                               "1tk"
                                                               "1tj"
                                                               "1ti"
                                                               "1th"
                                                               "1tg"
                                                               "1tf"
                                                               "1te"
                                                               "1td"
                                                               "1tc"
                                                               "1tb"
                                                               "1ta"
                                                               "1t9"
                                                               "1t8"
                                                               "1t7"
                                                               "1t6"
                                                               "1t5"
                                                               "1t4"
                                                               "1t3"
                                                               "1t2"
                                                               "1t1"
                                                               "1t0"
                                                               "1sz"
                                                               "1sy"
                                                               "1sx"
                                                               "1sw"
                                                               "1sv"
                                                               "1su"
                                                               "1st"
                                                               "1ss"
                                                               "1sr"
                                                               "1sq"
                                                               "1sp"
                                                               "1so"
                                                               "1sn"
                                                               "1sm"
                                                               "1sl"
                                                               "1sk"
                                                               "1sj"
                                                               "1si"
                                                               "1sh"
                                                               "1sg"
                                                               "1sf"
                                                               "1se"
                                                               "1sd"
                                                               "1sc"
                                                               "1sb"
                                                               "1sa"
                                                               "1s9"
                                                               "1s8"
                                                               "1s7"
                                                               "1s6"
                                                               "1s5"
                                                               "1s4"
                                                               "1s3"
                                                               "1s2"
                                                               "1s1"
                                                               "1s0"
                                                               "1rz"
                                                               "1ry"
                                                               "1rx"
                                                               "1rw"
                                                               "1rv"
                                                               "1ru"
                                                               "1rt"
                                                               "1rs"
                                                               "1rr"
                                                               "1rq"
                                                               "1rp"
                                                               "1ro"
                                                               "1rn"
                                                               "1rm"
                                                               "1rl"
                                                               "1rk"
                                                               "1rj"
                                                               "1ri"
                                                               "1rh"
                                                               "1rg"
                                                               "1rf"
                                                               "1re"
                                                               "1rd"
                                                               "1rc"
                                                               "1rb"
                                                               "1ra"
                                                               "1r9"
                                                               "1r8"
                                                               "1r7"
                                                               "1r6"
                                                               "1r5"
                                                               "1r4"
                                                               "1r3"
                                                               "1r2"
                                                               "1r1"
                                                               "1r0"
                                                               "1qz"
                                                               "1qy"
                                                               "1qx"
                                                               "1qw"
                                                               "1qv"
                                                               "1qu"
                                                               "1qt"
                                                               "1qs"
                                                               "1qr"
                                                               "1qq"
                                                               "1qp"
                                                               "1qo"
                                                               "1qn"
                                                               "1qm"
                                                               "1ql"
                                                               "1qk"
                                                               "1qj"
                                                               "1qi"
                                                               "1qh"
                                                               "1qg"
                                                               "1qf"
                                                               "1qe"
                                                               "1qd"
                                                               "1qc"
                                                               "1qb"
                                                               "1qa"
                                                               "1q9"
                                                               "1q8"
                                                               "1q7"
                                                               "1q6"
                                                               "1q5"
                                                               "1q4"
                                                               "1q3"
                                                               "1q2"
                                                               "1q1"
                                                               "1q0"
                                                               "1pz"
                                                               "1py"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("1og"
                                                               "1of"
                                                               "1oe")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("29k"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("28w"
                                                                "28x"
                                                                "28y"
                                                                "28z"
                                                                "290"
                                                                "291"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("28v"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("28l"
                                                                "28m"
                                                                "28n"
                                                                "28o"
                                                                "28p"
                                                                "28q"
                                                                "28r"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("1tt"
                                                               "1ts"
                                                               "1tr"
                                                               "1tq"
                                                               "1tp"
                                                               "1to"
                                                               "1tn"
                                                               "1tm"
                                                               "1tl"
                                                               "1tk"
                                                               "1tj"
                                                               "1ti"
                                                               "1th"
                                                               "1tg"
                                                               "1tf"
                                                               "1te"
                                                               "1td"
                                                               "1tc"
                                                               "1tb"
                                                               "1ta"
                                                               "1t9"
                                                               "1t8"
                                                               "1t7"
                                                               "1t6"
                                                               "1t5"
                                                               "1t4"
                                                               "1t3"
                                                               "1t2"
                                                               "1t1"
                                                               "1t0"
                                                               "1sz"
                                                               "1sy"
                                                               "1sx"
                                                               "1sw"
                                                               "1sv"
                                                               "1su"
                                                               "1st"
                                                               "1ss"
                                                               "1sr"
                                                               "1sq"
                                                               "1sp"
                                                               "1so"
                                                               "1sn"
                                                               "1sm"
                                                               "1sl"
                                                               "1sk"
                                                               "1sj"
                                                               "1si"
                                                               "1sh"
                                                               "1sg"
                                                               "1sf"
                                                               "1se"
                                                               "1sd"
                                                               "1sc"
                                                               "1sb"
                                                               "1sa"
                                                               "1s9"
                                                               "1s8"
                                                               "1s7"
                                                               "1s6"
                                                               "1s5"
                                                               "1s4"
                                                               "1s3"
                                                               "1s2"
                                                               "1s1"
                                                               "1s0"
                                                               "1rz"
                                                               "1ry"
                                                               "1rx"
                                                               "1rw"
                                                               "1rv"
                                                               "1ru"
                                                               "1rt"
                                                               "1rs"
                                                               "1rr"
                                                               "1rq"
                                                               "1rp"
                                                               "1ro"
                                                               "1rn"
                                                               "1rm"
                                                               "1rl"
                                                               "1rk"
                                                               "1rj"
                                                               "1ri"
                                                               "1rh"
                                                               "1rg"
                                                               "1rf"
                                                               "1re"
                                                               "1rd"
                                                               "1rc"
                                                               "1rb"
                                                               "1ra"
                                                               "1r9"
                                                               "1r8"
                                                               "1r7"
                                                               "1r6"
                                                               "1r5"
                                                               "1r4"
                                                               "1r3"
                                                               "1r2"
                                                               "1r1"
                                                               "1r0"
                                                               "1qz"
                                                               "1qy"
                                                               "1qx"
                                                               "1qw"
                                                               "1qv"
                                                               "1qu"
                                                               "1qt"
                                                               "1qs"
                                                               "1qr"
                                                               "1qq"
                                                               "1qp"
                                                               "1qo"
                                                               "1qn"
                                                               "1qm"
                                                               "1ql"
                                                               "1qk"
                                                               "1qj"
                                                               "1qi"
                                                               "1qh"
                                                               "1qg"
                                                               "1qf"
                                                               "1qe"
                                                               "1qd"
                                                               "1qc"
                                                               "1qb"
                                                               "1qa"
                                                               "1q9"
                                                               "1q8"
                                                               "1q7"
                                                               "1q6"
                                                               "1q5"
                                                               "1q4"
                                                               "1q3"
                                                               "1q2"
                                                               "1q1"
                                                               "1q0"
                                                               "1pz"
                                                               "1py"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("1og"
                                                               "1of"
                                                               "1oe")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("29k"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("28w"
                                                                "28x"
                                                                "28y"
                                                                "28z"
                                                                "290"
                                                                "291"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("28v"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("28l"
                                                                "28m"
                                                                "28n"
                                                                "28o"
                                                                "28p"
                                                                "28q"
                                                                "28r"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("1tt"
                                                               "1ts"
                                                               "1tr"
                                                               "1tq"
                                                               "1tp"
                                                               "1to"
                                                               "1tn"
                                                               "1tm"
                                                               "1tl"
                                                               "1tk"
                                                               "1tj"
                                                               "1ti"
                                                               "1th"
                                                               "1tg"
                                                               "1tf"
                                                               "1te"
                                                               "1td"
                                                               "1tc"
                                                               "1tb"
                                                               "1ta"
                                                               "1t9"
                                                               "1t8"
                                                               "1t7"
                                                               "1t6"
                                                               "1t5"
                                                               "1t4"
                                                               "1t3"
                                                               "1t2"
                                                               "1t1"
                                                               "1t0"
                                                               "1sz"
                                                               "1sy"
                                                               "1sx"
                                                               "1sw"
                                                               "1sv"
                                                               "1su"
                                                               "1st"
                                                               "1ss"
                                                               "1sr"
                                                               "1sq"
                                                               "1sp"
                                                               "1so"
                                                               "1sn"
                                                               "1sm"
                                                               "1sl"
                                                               "1sk"
                                                               "1sj"
                                                               "1si"
                                                               "1sh"
                                                               "1sg"
                                                               "1sf"
                                                               "1se"
                                                               "1sd"
                                                               "1sc"
                                                               "1sb"
                                                               "1sa"
                                                               "1s9"
                                                               "1s8"
                                                               "1s7"
                                                               "1s6"
                                                               "1s5"
                                                               "1s4"
                                                               "1s3"
                                                               "1s2"
                                                               "1s1"
                                                               "1s0"
                                                               "1rz"
                                                               "1ry"
                                                               "1rx"
                                                               "1rw"
                                                               "1rv"
                                                               "1ru"
                                                               "1rt"
                                                               "1rs"
                                                               "1rr"
                                                               "1rq"
                                                               "1rp"
                                                               "1ro"
                                                               "1rn"
                                                               "1rm"
                                                               "1rl"
                                                               "1rk"
                                                               "1rj"
                                                               "1ri"
                                                               "1rh"
                                                               "1rg"
                                                               "1rf"
                                                               "1re"
                                                               "1rd"
                                                               "1rc"
                                                               "1rb"
                                                               "1ra"
                                                               "1r9"
                                                               "1r8"
                                                               "1r7"
                                                               "1r6"
                                                               "1r5"
                                                               "1r4"
                                                               "1r3"
                                                               "1r2"
                                                               "1r1"
                                                               "1r0"
                                                               "1qz"
                                                               "1qy"
                                                               "1qx"
                                                               "1qw"
                                                               "1qv"
                                                               "1qu"
                                                               "1qt"
                                                               "1qs"
                                                               "1qr"
                                                               "1qq"
                                                               "1qp"
                                                               "1qo"
                                                               "1qn"
                                                               "1qm"
                                                               "1ql"
                                                               "1qk"
                                                               "1qj"
                                                               "1qi"
                                                               "1qh"
                                                               "1qg"
                                                               "1qf"
                                                               "1qe"
                                                               "1qd"
                                                               "1qc"
                                                               "1qb"
                                                               "1qa"
                                                               "1q9"
                                                               "1q8"
                                                               "1q7"
                                                               "1q6"
                                                               "1q5"
                                                               "1q4"
                                                               "1q3"
                                                               "1q2"
                                                               "1q1"
                                                               "1q0"
                                                               "1pz"
                                                               "1py"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("1og"
                                                               "1of"
                                                               "1oe")))
                                                           (hygiene guile)))
                                                       '(())
                                                       #{s _hoQGWMnyQPAh3k2jhWLDq}#
                                                       #{mod _hoQGWMnyQPAh3k2jhWLDs}#))
                                                   #{tmp _hoQGWMnyQPAh3k2jhWLJA}#)
                                                 (syntax-violation
                                                   #f
                                                   "source expression failed to match any pattern"
                                                   #{e _hoQGWMnyQPAh3k2jhWLDn}#)))))))
                                     (if (eqv? #{ftype _hoQGWMnyQPAh3k2jhWLET}#
                                               'define-syntax)
                                       (let ((#{tmp _hoQGWMnyQPAh3k2jhWLJy}#
                                               ($sc-dispatch
                                                 #{e _hoQGWMnyQPAh3k2jhWLDn}#
                                                 '(_ any any))))
                                         (if (if #{tmp _hoQGWMnyQPAh3k2jhWLJy}#
                                               (@apply
                                                 (lambda (#{name _hoQGWMnyQPAh3k2jhWLJ2}#
                                                          #{val _hoQGWMnyQPAh3k2jhWLJ3}#)
                                                   (if (symbol?
                                                         #{name _hoQGWMnyQPAh3k2jhWLJ2}#)
                                                     #t
                                                     (if (if (vector?
                                                               #{name _hoQGWMnyQPAh3k2jhWLJ2}#)
                                                           (if (= (vector-length
                                                                    #{name _hoQGWMnyQPAh3k2jhWLJ2}#)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    #{name _hoQGWMnyQPAh3k2jhWLJ2}#
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (symbol?
                                                         (vector-ref
                                                           #{name _hoQGWMnyQPAh3k2jhWLJ2}#
                                                           1))
                                                       #f)))
                                                 #{tmp _hoQGWMnyQPAh3k2jhWLJy}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name _hoQGWMnyQPAh3k2jhWLKS}#
                                                      #{val _hoQGWMnyQPAh3k2jhWLKT}#)
                                               (values
                                                 'define-syntax-form
                                                 #{name _hoQGWMnyQPAh3k2jhWLKS}#
                                                 #{val _hoQGWMnyQPAh3k2jhWLKT}#
                                                 #{w _hoQGWMnyQPAh3k2jhWLDp}#
                                                 #{s _hoQGWMnyQPAh3k2jhWLDq}#
                                                 #{mod _hoQGWMnyQPAh3k2jhWLDs}#))
                                             #{tmp _hoQGWMnyQPAh3k2jhWLJy}#)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             #{e _hoQGWMnyQPAh3k2jhWLDn}#)))
                                       (if (eqv? #{ftype _hoQGWMnyQPAh3k2jhWLET}#
                                                 'define-syntax-parameter)
                                         (let ((#{tmp _hoQGWMnyQPAh3k2jhWLKe}#
                                                 ($sc-dispatch
                                                   #{e _hoQGWMnyQPAh3k2jhWLDn}#
                                                   '(_ any any))))
                                           (if (if #{tmp _hoQGWMnyQPAh3k2jhWLKe}#
                                                 (@apply
                                                   (lambda (#{name _hoQGWMnyQPAh3k2jhWLKi}#
                                                            #{val _hoQGWMnyQPAh3k2jhWLKj}#)
                                                     (if (symbol?
                                                           #{name _hoQGWMnyQPAh3k2jhWLKi}#)
                                                       #t
                                                       (if (if (vector?
                                                                 #{name _hoQGWMnyQPAh3k2jhWLKi}#)
                                                             (if (= (vector-length
                                                                      #{name _hoQGWMnyQPAh3k2jhWLKi}#)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      #{name _hoQGWMnyQPAh3k2jhWLKi}#
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (symbol?
                                                           (vector-ref
                                                             #{name _hoQGWMnyQPAh3k2jhWLKi}#
                                                             1))
                                                         #f)))
                                                   #{tmp _hoQGWMnyQPAh3k2jhWLKe}#)
                                                 #f)
                                             (@apply
                                               (lambda (#{name _hoQGWMnyQPAh3k2jhWLK$}#
                                                        #{val _hoQGWMnyQPAh3k2jhWLK@}#)
                                                 (values
                                                   'define-syntax-parameter-form
                                                   #{name _hoQGWMnyQPAh3k2jhWLK$}#
                                                   #{val _hoQGWMnyQPAh3k2jhWLK@}#
                                                   #{w _hoQGWMnyQPAh3k2jhWLDp}#
                                                   #{s _hoQGWMnyQPAh3k2jhWLDq}#
                                                   #{mod _hoQGWMnyQPAh3k2jhWLDs}#))
                                               #{tmp _hoQGWMnyQPAh3k2jhWLKe}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{e _hoQGWMnyQPAh3k2jhWLDn}#)))
                                         (values
                                           'call
                                           #f
                                           #{e _hoQGWMnyQPAh3k2jhWLDn}#
                                           #{w _hoQGWMnyQPAh3k2jhWLDp}#
                                           #{s _hoQGWMnyQPAh3k2jhWLDq}#
                                           #{mod _hoQGWMnyQPAh3k2jhWLDs}#)))))))))))))))
             (if (if (vector? #{e _hoQGWMnyQPAh3k2jhWLDn}#)
                   (if (= (vector-length #{e _hoQGWMnyQPAh3k2jhWLDn}#)
                          4)
                     (eq? (vector-ref #{e _hoQGWMnyQPAh3k2jhWLDn}# 0)
                          'syntax-object)
                     #f)
                   #f)
               (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
                 (vector-ref #{e _hoQGWMnyQPAh3k2jhWLDn}# 1)
                 #{r _hoQGWMnyQPAh3k2jhWLDo}#
                 (#{join-wraps _hoQGWMnyQPAh3k2jhWHTR}#
                   #{w _hoQGWMnyQPAh3k2jhWLDp}#
                   (vector-ref #{e _hoQGWMnyQPAh3k2jhWLDn}# 2))
                 (let ((#{t _hoQGWMnyQPAh3k2jhWLLa}#
                         (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
                           #{e _hoQGWMnyQPAh3k2jhWLDn}#)))
                   (if #{t _hoQGWMnyQPAh3k2jhWLLa}#
                     #{t _hoQGWMnyQPAh3k2jhWLLa}#
                     #{s _hoQGWMnyQPAh3k2jhWLDq}#))
                 #{rib _hoQGWMnyQPAh3k2jhWLDr}#
                 (let ((#{t _hoQGWMnyQPAh3k2jhWLPF}#
                         (vector-ref #{e _hoQGWMnyQPAh3k2jhWLDn}# 3)))
                   (if #{t _hoQGWMnyQPAh3k2jhWLPF}#
                     #{t _hoQGWMnyQPAh3k2jhWLPF}#
                     #{mod _hoQGWMnyQPAh3k2jhWLDs}#))
                 #{for-car? _hoQGWMnyQPAh3k2jhWLDt}#)
               (if (self-evaluating? #{e _hoQGWMnyQPAh3k2jhWLDn}#)
                 (values
                   'constant
                   #f
                   #{e _hoQGWMnyQPAh3k2jhWLDn}#
                   #{w _hoQGWMnyQPAh3k2jhWLDp}#
                   #{s _hoQGWMnyQPAh3k2jhWLDq}#
                   #{mod _hoQGWMnyQPAh3k2jhWLDs}#)
                 (values
                   'other
                   #f
                   #{e _hoQGWMnyQPAh3k2jhWLDn}#
                   #{w _hoQGWMnyQPAh3k2jhWLDp}#
                   #{s _hoQGWMnyQPAh3k2jhWLDq}#
                   #{mod _hoQGWMnyQPAh3k2jhWLDs}#)))))))
     (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
       (lambda (#{e _hoQGWMnyQPAh3k2jhWLPO}#
                #{r _hoQGWMnyQPAh3k2jhWLPP}#
                #{w _hoQGWMnyQPAh3k2jhWLPQ}#
                #{mod _hoQGWMnyQPAh3k2jhWLPR}#)
         (call-with-values
           (lambda ()
             (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
               #{e _hoQGWMnyQPAh3k2jhWLPO}#
               #{r _hoQGWMnyQPAh3k2jhWLPP}#
               #{w _hoQGWMnyQPAh3k2jhWLPQ}#
               (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
                 #{e _hoQGWMnyQPAh3k2jhWLPO}#)
               #f
               #{mod _hoQGWMnyQPAh3k2jhWLPR}#
               #f))
           (lambda (#{type _hoQGWMnyQPAh3k2jhWLRs}#
                    #{value _hoQGWMnyQPAh3k2jhWLRt}#
                    #{e _hoQGWMnyQPAh3k2jhWLRu}#
                    #{w _hoQGWMnyQPAh3k2jhWLRv}#
                    #{s _hoQGWMnyQPAh3k2jhWLRw}#
                    #{mod _hoQGWMnyQPAh3k2jhWLRx}#)
             (#{expand-expr _hoQGWMnyQPAh3k2jhWHTm}#
               #{type _hoQGWMnyQPAh3k2jhWLRs}#
               #{value _hoQGWMnyQPAh3k2jhWLRt}#
               #{e _hoQGWMnyQPAh3k2jhWLRu}#
               #{r _hoQGWMnyQPAh3k2jhWLPP}#
               #{w _hoQGWMnyQPAh3k2jhWLRv}#
               #{s _hoQGWMnyQPAh3k2jhWLRw}#
               #{mod _hoQGWMnyQPAh3k2jhWLRx}#)))))
     (#{expand-expr _hoQGWMnyQPAh3k2jhWHTm}#
       (lambda (#{type _hoQGWMnyQPAh3k2jhWLR0}#
                #{value _hoQGWMnyQPAh3k2jhWLR1}#
                #{e _hoQGWMnyQPAh3k2jhWLR2}#
                #{r _hoQGWMnyQPAh3k2jhWLR3}#
                #{w _hoQGWMnyQPAh3k2jhWLR4}#
                #{s _hoQGWMnyQPAh3k2jhWLR5}#
                #{mod _hoQGWMnyQPAh3k2jhWLR6}#)
         (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}# 'lexical)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 3)
             #{s _hoQGWMnyQPAh3k2jhWLR5}#
             #{e _hoQGWMnyQPAh3k2jhWLR2}#
             #{value _hoQGWMnyQPAh3k2jhWLR1}#)
           (if (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}# 'core)
                 #t
                 (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}# 'core-form))
             (#{value _hoQGWMnyQPAh3k2jhWLR1}#
               #{e _hoQGWMnyQPAh3k2jhWLR2}#
               #{r _hoQGWMnyQPAh3k2jhWLR3}#
               #{w _hoQGWMnyQPAh3k2jhWLR4}#
               #{s _hoQGWMnyQPAh3k2jhWLR5}#
               #{mod _hoQGWMnyQPAh3k2jhWLR6}#)
             (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}#
                       'module-ref)
               (call-with-values
                 (lambda ()
                   (#{value _hoQGWMnyQPAh3k2jhWLR1}#
                     #{e _hoQGWMnyQPAh3k2jhWLR2}#
                     #{r _hoQGWMnyQPAh3k2jhWLR3}#
                     #{w _hoQGWMnyQPAh3k2jhWLR4}#))
                 (lambda (#{e _hoQGWMnyQPAh3k2jhWLSU}#
                          #{r _hoQGWMnyQPAh3k2jhWLSV}#
                          #{w _hoQGWMnyQPAh3k2jhWLSW}#
                          #{s _hoQGWMnyQPAh3k2jhWLSX}#
                          #{mod _hoQGWMnyQPAh3k2jhWLSY}#)
                   (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                     #{e _hoQGWMnyQPAh3k2jhWLSU}#
                     #{r _hoQGWMnyQPAh3k2jhWLSV}#
                     #{w _hoQGWMnyQPAh3k2jhWLSW}#
                     #{mod _hoQGWMnyQPAh3k2jhWLSY}#)))
               (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}#
                         'lexical-call)
                 (#{expand-application _hoQGWMnyQPAh3k2jhWHTn}#
                   (let ((#{id _hoQGWMnyQPAh3k2jhWLTj}#
                           (car #{e _hoQGWMnyQPAh3k2jhWLR2}#)))
                     (#{build-lexical-reference _hoQGWMnyQPAh3k2jhWHSj}#
                       'fun
                       (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
                         #{id _hoQGWMnyQPAh3k2jhWLTj}#)
                       (if (if (vector? #{id _hoQGWMnyQPAh3k2jhWLTj}#)
                             (if (= (vector-length
                                      #{id _hoQGWMnyQPAh3k2jhWLTj}#)
                                    4)
                               (eq? (vector-ref
                                      #{id _hoQGWMnyQPAh3k2jhWLTj}#
                                      0)
                                    'syntax-object)
                               #f)
                             #f)
                         (syntax->datum #{id _hoQGWMnyQPAh3k2jhWLTj}#)
                         #{id _hoQGWMnyQPAh3k2jhWLTj}#)
                       #{value _hoQGWMnyQPAh3k2jhWLR1}#))
                   #{e _hoQGWMnyQPAh3k2jhWLR2}#
                   #{r _hoQGWMnyQPAh3k2jhWLR3}#
                   #{w _hoQGWMnyQPAh3k2jhWLR4}#
                   #{s _hoQGWMnyQPAh3k2jhWLR5}#
                   #{mod _hoQGWMnyQPAh3k2jhWLR6}#)
                 (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}#
                           'global-call)
                   (#{expand-application _hoQGWMnyQPAh3k2jhWHTn}#
                     (#{build-global-reference _hoQGWMnyQPAh3k2jhWHSm}#
                       (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
                         (car #{e _hoQGWMnyQPAh3k2jhWLR2}#))
                       (if (if (vector? #{value _hoQGWMnyQPAh3k2jhWLR1}#)
                             (if (= (vector-length
                                      #{value _hoQGWMnyQPAh3k2jhWLR1}#)
                                    4)
                               (eq? (vector-ref
                                      #{value _hoQGWMnyQPAh3k2jhWLR1}#
                                      0)
                                    'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{value _hoQGWMnyQPAh3k2jhWLR1}# 1)
                         #{value _hoQGWMnyQPAh3k2jhWLR1}#)
                       (if (if (vector? #{value _hoQGWMnyQPAh3k2jhWLR1}#)
                             (if (= (vector-length
                                      #{value _hoQGWMnyQPAh3k2jhWLR1}#)
                                    4)
                               (eq? (vector-ref
                                      #{value _hoQGWMnyQPAh3k2jhWLR1}#
                                      0)
                                    'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{value _hoQGWMnyQPAh3k2jhWLR1}# 3)
                         #{mod _hoQGWMnyQPAh3k2jhWLR6}#))
                     #{e _hoQGWMnyQPAh3k2jhWLR2}#
                     #{r _hoQGWMnyQPAh3k2jhWLR3}#
                     #{w _hoQGWMnyQPAh3k2jhWLR4}#
                     #{s _hoQGWMnyQPAh3k2jhWLR5}#
                     #{mod _hoQGWMnyQPAh3k2jhWLR6}#)
                   (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}# 'constant)
                     (let ((#{exp _hoQGWMnyQPAh3k2jhWLY0}#
                             (#{strip _hoQGWMnyQPAh3k2jhWHTy}#
                               (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                 (begin
                                   (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWLR2}#)
                                         #{s _hoQGWMnyQPAh3k2jhWLR5}#
                                         #f)
                                     (set-source-properties!
                                       #{e _hoQGWMnyQPAh3k2jhWLR2}#
                                       #{s _hoQGWMnyQPAh3k2jhWLR5}#))
                                   #{e _hoQGWMnyQPAh3k2jhWLR2}#)
                                 #{w _hoQGWMnyQPAh3k2jhWLR4}#
                                 #{mod _hoQGWMnyQPAh3k2jhWLR6}#)
                               '(()))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #{s _hoQGWMnyQPAh3k2jhWLR5}#
                         #{exp _hoQGWMnyQPAh3k2jhWLY0}#))
                     (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}# 'global)
                       (#{analyze-variable _hoQGWMnyQPAh3k2jhWHSl}#
                         #{mod _hoQGWMnyQPAh3k2jhWLR6}#
                         #{value _hoQGWMnyQPAh3k2jhWLR1}#
                         (lambda (#{mod _hoQGWMnyQPAh3k2jhWLZY}#
                                  #{var _hoQGWMnyQPAh3k2jhWLZZ}#
                                  #{public? _hoQGWMnyQPAh3k2jhWLZa}#)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #{s _hoQGWMnyQPAh3k2jhWLR5}#
                             #{mod _hoQGWMnyQPAh3k2jhWLZY}#
                             #{var _hoQGWMnyQPAh3k2jhWLZZ}#
                             #{public? _hoQGWMnyQPAh3k2jhWLZa}#))
                         (lambda (#{var _hoQGWMnyQPAh3k2jhWLZj}#)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #{s _hoQGWMnyQPAh3k2jhWLR5}#
                             #{var _hoQGWMnyQPAh3k2jhWLZj}#)))
                       (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}# 'call)
                         (#{expand-application _hoQGWMnyQPAh3k2jhWHTn}#
                           (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                             (car #{e _hoQGWMnyQPAh3k2jhWLR2}#)
                             #{r _hoQGWMnyQPAh3k2jhWLR3}#
                             #{w _hoQGWMnyQPAh3k2jhWLR4}#
                             #{mod _hoQGWMnyQPAh3k2jhWLR6}#)
                           #{e _hoQGWMnyQPAh3k2jhWLR2}#
                           #{r _hoQGWMnyQPAh3k2jhWLR3}#
                           #{w _hoQGWMnyQPAh3k2jhWLR4}#
                           #{s _hoQGWMnyQPAh3k2jhWLR5}#
                           #{mod _hoQGWMnyQPAh3k2jhWLR6}#)
                         (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}#
                                   'begin-form)
                           (let ((#{tmp _hoQGWMnyQPAh3k2jhWLau}#
                                   ($sc-dispatch
                                     #{e _hoQGWMnyQPAh3k2jhWLR2}#
                                     '(_ any . each-any))))
                             (if #{tmp _hoQGWMnyQPAh3k2jhWLau}#
                               (@apply
                                 (lambda (#{e1 _hoQGWMnyQPAh3k2jhWLay}#
                                          #{e2 _hoQGWMnyQPAh3k2jhWLaz}#)
                                   (#{expand-sequence _hoQGWMnyQPAh3k2jhWHTg}#
                                     (cons #{e1 _hoQGWMnyQPAh3k2jhWLay}#
                                           #{e2 _hoQGWMnyQPAh3k2jhWLaz}#)
                                     #{r _hoQGWMnyQPAh3k2jhWLR3}#
                                     #{w _hoQGWMnyQPAh3k2jhWLR4}#
                                     #{s _hoQGWMnyQPAh3k2jhWLR5}#
                                     #{mod _hoQGWMnyQPAh3k2jhWLR6}#))
                                 #{tmp _hoQGWMnyQPAh3k2jhWLau}#)
                               (let ((#{tmp _hoQGWMnyQPAh3k2jhWLcK}#
                                       ($sc-dispatch
                                         #{e _hoQGWMnyQPAh3k2jhWLR2}#
                                         '(_))))
                                 (if #{tmp _hoQGWMnyQPAh3k2jhWLcK}#
                                   (@apply
                                     (lambda ()
                                       (if (include-deprecated-features)
                                         (begin
                                           (issue-deprecation-warning
                                             "Sequences of zero expressions are deprecated.  Use *unspecified*.")
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))
                                         (syntax-violation
                                           #f
                                           "sequence of zero expressions"
                                           (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                             (begin
                                               (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWLR2}#)
                                                     #{s _hoQGWMnyQPAh3k2jhWLR5}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e _hoQGWMnyQPAh3k2jhWLR2}#
                                                   #{s _hoQGWMnyQPAh3k2jhWLR5}#))
                                               #{e _hoQGWMnyQPAh3k2jhWLR2}#)
                                             #{w _hoQGWMnyQPAh3k2jhWLR4}#
                                             #{mod _hoQGWMnyQPAh3k2jhWLR6}#))))
                                     #{tmp _hoQGWMnyQPAh3k2jhWLcK}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{e _hoQGWMnyQPAh3k2jhWLR2}#)))))
                           (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}#
                                     'local-syntax-form)
                             (#{expand-local-syntax _hoQGWMnyQPAh3k2jhWHTq}#
                               #{value _hoQGWMnyQPAh3k2jhWLR1}#
                               #{e _hoQGWMnyQPAh3k2jhWLR2}#
                               #{r _hoQGWMnyQPAh3k2jhWLR3}#
                               #{w _hoQGWMnyQPAh3k2jhWLR4}#
                               #{s _hoQGWMnyQPAh3k2jhWLR5}#
                               #{mod _hoQGWMnyQPAh3k2jhWLR6}#
                               #{expand-sequence _hoQGWMnyQPAh3k2jhWHTg}#)
                             (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}#
                                       'eval-when-form)
                               (let ((#{tmp _hoQGWMnyQPAh3k2jhWLd5}#
                                       ($sc-dispatch
                                         #{e _hoQGWMnyQPAh3k2jhWLR2}#
                                         '(_ each-any any . each-any))))
                                 (if #{tmp _hoQGWMnyQPAh3k2jhWLd5}#
                                   (@apply
                                     (lambda (#{x _hoQGWMnyQPAh3k2jhWLd9}#
                                              #{e1 _hoQGWMnyQPAh3k2jhWLd$}#
                                              #{e2 _hoQGWMnyQPAh3k2jhWLd@}#)
                                       (let ((#{when-list _hoQGWMnyQPAh3k2jhWLeA}#
                                               (#{parse-when-list _hoQGWMnyQPAh3k2jhWHTj}#
                                                 #{e _hoQGWMnyQPAh3k2jhWLR2}#
                                                 #{x _hoQGWMnyQPAh3k2jhWLd9}#)))
                                         (if (memq 'eval
                                                   #{when-list _hoQGWMnyQPAh3k2jhWLeA}#)
                                           (#{expand-sequence _hoQGWMnyQPAh3k2jhWHTg}#
                                             (cons #{e1 _hoQGWMnyQPAh3k2jhWLd$}#
                                                   #{e2 _hoQGWMnyQPAh3k2jhWLd@}#)
                                             #{r _hoQGWMnyQPAh3k2jhWLR3}#
                                             #{w _hoQGWMnyQPAh3k2jhWLR4}#
                                             #{s _hoQGWMnyQPAh3k2jhWLR5}#
                                             #{mod _hoQGWMnyQPAh3k2jhWLR6}#)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))))
                                     #{tmp _hoQGWMnyQPAh3k2jhWLd5}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{e _hoQGWMnyQPAh3k2jhWLR2}#)))
                               (if (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}#
                                             'define-form)
                                     #t
                                     (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}#
                                               'define-syntax-form)
                                       #t
                                       (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}#
                                             'define-syntax-parameter-form)))
                                 (syntax-violation
                                   #f
                                   "definition in expression context"
                                   #{e _hoQGWMnyQPAh3k2jhWLR2}#
                                   (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                     #{value _hoQGWMnyQPAh3k2jhWLR1}#
                                     #{w _hoQGWMnyQPAh3k2jhWLR4}#
                                     #{mod _hoQGWMnyQPAh3k2jhWLR6}#))
                                 (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}#
                                           'syntax)
                                   (syntax-violation
                                     #f
                                     "reference to pattern variable outside syntax form"
                                     (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                       (begin
                                         (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWLR2}#)
                                               #{s _hoQGWMnyQPAh3k2jhWLR5}#
                                               #f)
                                           (set-source-properties!
                                             #{e _hoQGWMnyQPAh3k2jhWLR2}#
                                             #{s _hoQGWMnyQPAh3k2jhWLR5}#))
                                         #{e _hoQGWMnyQPAh3k2jhWLR2}#)
                                       #{w _hoQGWMnyQPAh3k2jhWLR4}#
                                       #{mod _hoQGWMnyQPAh3k2jhWLR6}#))
                                   (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLR0}#
                                             'displaced-lexical)
                                     (syntax-violation
                                       #f
                                       "reference to identifier outside its scope"
                                       (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                         (begin
                                           (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWLR2}#)
                                                 #{s _hoQGWMnyQPAh3k2jhWLR5}#
                                                 #f)
                                             (set-source-properties!
                                               #{e _hoQGWMnyQPAh3k2jhWLR2}#
                                               #{s _hoQGWMnyQPAh3k2jhWLR5}#))
                                           #{e _hoQGWMnyQPAh3k2jhWLR2}#)
                                         #{w _hoQGWMnyQPAh3k2jhWLR4}#
                                         #{mod _hoQGWMnyQPAh3k2jhWLR6}#))
                                     (syntax-violation
                                       #f
                                       "unexpected syntax"
                                       (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                         (begin
                                           (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWLR2}#)
                                                 #{s _hoQGWMnyQPAh3k2jhWLR5}#
                                                 #f)
                                             (set-source-properties!
                                               #{e _hoQGWMnyQPAh3k2jhWLR2}#
                                               #{s _hoQGWMnyQPAh3k2jhWLR5}#))
                                           #{e _hoQGWMnyQPAh3k2jhWLR2}#)
                                         #{w _hoQGWMnyQPAh3k2jhWLR4}#
                                         #{mod _hoQGWMnyQPAh3k2jhWLR6}#))))))))))))))))))
     (#{expand-application _hoQGWMnyQPAh3k2jhWHTn}#
       (lambda (#{x _hoQGWMnyQPAh3k2jhWLhw}#
                #{e _hoQGWMnyQPAh3k2jhWLhx}#
                #{r _hoQGWMnyQPAh3k2jhWLhy}#
                #{w _hoQGWMnyQPAh3k2jhWLhz}#
                #{s _hoQGWMnyQPAh3k2jhWLh0}#
                #{mod _hoQGWMnyQPAh3k2jhWLh1}#)
         (let ((#{tmp _hoQGWMnyQPAh3k2jhWLh3}#
                 ($sc-dispatch
                   #{e _hoQGWMnyQPAh3k2jhWLhx}#
                   '(any . each-any))))
           (if #{tmp _hoQGWMnyQPAh3k2jhWLh3}#
             (@apply
               (lambda (#{e0 _hoQGWMnyQPAh3k2jhWLh7}#
                        #{e1 _hoQGWMnyQPAh3k2jhWLh8}#)
                 (#{build-application _hoQGWMnyQPAh3k2jhWHSg}#
                   #{s _hoQGWMnyQPAh3k2jhWLh0}#
                   #{x _hoQGWMnyQPAh3k2jhWLhw}#
                   (map (lambda (#{e _hoQGWMnyQPAh3k2jhWLjM}#)
                          (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                            #{e _hoQGWMnyQPAh3k2jhWLjM}#
                            #{r _hoQGWMnyQPAh3k2jhWLhy}#
                            #{w _hoQGWMnyQPAh3k2jhWLhz}#
                            #{mod _hoQGWMnyQPAh3k2jhWLh1}#))
                        #{e1 _hoQGWMnyQPAh3k2jhWLh8}#)))
               #{tmp _hoQGWMnyQPAh3k2jhWLh3}#)
             (syntax-violation
               #f
               "source expression failed to match any pattern"
               #{e _hoQGWMnyQPAh3k2jhWLhx}#)))))
     (#{expand-macro _hoQGWMnyQPAh3k2jhWHTo}#
       (lambda (#{p _hoQGWMnyQPAh3k2jhWLkY}#
                #{e _hoQGWMnyQPAh3k2jhWLkZ}#
                #{r _hoQGWMnyQPAh3k2jhWLka}#
                #{w _hoQGWMnyQPAh3k2jhWLkb}#
                #{s _hoQGWMnyQPAh3k2jhWLkc}#
                #{rib _hoQGWMnyQPAh3k2jhWLkd}#
                #{mod _hoQGWMnyQPAh3k2jhWLke}#)
         (letrec*
           ((#{rebuild-macro-output _hoQGWMnyQPAh3k2jhWLkf}#
              (lambda (#{x _hoQGWMnyQPAh3k2jhWLlA}#
                       #{m _hoQGWMnyQPAh3k2jhWLlB}#)
                (if (pair? #{x _hoQGWMnyQPAh3k2jhWLlA}#)
                  (let ((#{e _hoQGWMnyQPAh3k2jhWLlF}#
                          (cons (#{rebuild-macro-output _hoQGWMnyQPAh3k2jhWLkf}#
                                  (car #{x _hoQGWMnyQPAh3k2jhWLlA}#)
                                  #{m _hoQGWMnyQPAh3k2jhWLlB}#)
                                (#{rebuild-macro-output _hoQGWMnyQPAh3k2jhWLkf}#
                                  (cdr #{x _hoQGWMnyQPAh3k2jhWLlA}#)
                                  #{m _hoQGWMnyQPAh3k2jhWLlB}#))))
                    (begin
                      (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWLlF}#)
                            #{s _hoQGWMnyQPAh3k2jhWLkc}#
                            #f)
                        (set-source-properties!
                          #{e _hoQGWMnyQPAh3k2jhWLlF}#
                          #{s _hoQGWMnyQPAh3k2jhWLkc}#))
                      #{e _hoQGWMnyQPAh3k2jhWLlF}#))
                  (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWLlA}#)
                        (if (= (vector-length #{x _hoQGWMnyQPAh3k2jhWLlA}#)
                               4)
                          (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWLlA}# 0)
                               'syntax-object)
                          #f)
                        #f)
                    (let ((#{w _hoQGWMnyQPAh3k2jhWLlV}#
                            (vector-ref #{x _hoQGWMnyQPAh3k2jhWLlA}# 2)))
                      (let ((#{ms _hoQGWMnyQPAh3k2jhWLlW}#
                              (car #{w _hoQGWMnyQPAh3k2jhWLlV}#))
                            (#{s _hoQGWMnyQPAh3k2jhWLlX}#
                              (cdr #{w _hoQGWMnyQPAh3k2jhWLlV}#)))
                        (if (if (pair? #{ms _hoQGWMnyQPAh3k2jhWLlW}#)
                              (eq? (car #{ms _hoQGWMnyQPAh3k2jhWLlW}#) #f)
                              #f)
                          (let ((#{expression _hoQGWMnyQPAh3k2jhWLlf}#
                                  (vector-ref #{x _hoQGWMnyQPAh3k2jhWLlA}# 1))
                                (#{wrap _hoQGWMnyQPAh3k2jhWLlg}#
                                  (cons (cdr #{ms _hoQGWMnyQPAh3k2jhWLlW}#)
                                        (if #{rib _hoQGWMnyQPAh3k2jhWLkd}#
                                          (cons #{rib _hoQGWMnyQPAh3k2jhWLkd}#
                                                (cdr #{s _hoQGWMnyQPAh3k2jhWLlX}#))
                                          (cdr #{s _hoQGWMnyQPAh3k2jhWLlX}#))))
                                (#{module _hoQGWMnyQPAh3k2jhWLlh}#
                                  (vector-ref #{x _hoQGWMnyQPAh3k2jhWLlA}# 3)))
                            (vector
                              'syntax-object
                              #{expression _hoQGWMnyQPAh3k2jhWLlf}#
                              #{wrap _hoQGWMnyQPAh3k2jhWLlg}#
                              #{module _hoQGWMnyQPAh3k2jhWLlh}#))
                          (let ((#{expression _hoQGWMnyQPAh3k2jhWLlr}#
                                  (let ((#{e _hoQGWMnyQPAh3k2jhWLlw}#
                                          (vector-ref
                                            #{x _hoQGWMnyQPAh3k2jhWLlA}#
                                            1)))
                                    (begin
                                      (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWLlw}#)
                                            #{s _hoQGWMnyQPAh3k2jhWLlX}#
                                            #f)
                                        (set-source-properties!
                                          #{e _hoQGWMnyQPAh3k2jhWLlw}#
                                          #{s _hoQGWMnyQPAh3k2jhWLlX}#))
                                      #{e _hoQGWMnyQPAh3k2jhWLlw}#)))
                                (#{wrap _hoQGWMnyQPAh3k2jhWLls}#
                                  (cons (cons #{m _hoQGWMnyQPAh3k2jhWLlB}#
                                              #{ms _hoQGWMnyQPAh3k2jhWLlW}#)
                                        (if #{rib _hoQGWMnyQPAh3k2jhWLkd}#
                                          (cons #{rib _hoQGWMnyQPAh3k2jhWLkd}#
                                                (cons 'shift
                                                      #{s _hoQGWMnyQPAh3k2jhWLlX}#))
                                          (cons 'shift
                                                #{s _hoQGWMnyQPAh3k2jhWLlX}#))))
                                (#{module _hoQGWMnyQPAh3k2jhWLlt}#
                                  (vector-ref #{x _hoQGWMnyQPAh3k2jhWLlA}# 3)))
                            (vector
                              'syntax-object
                              #{expression _hoQGWMnyQPAh3k2jhWLlr}#
                              #{wrap _hoQGWMnyQPAh3k2jhWLls}#
                              #{module _hoQGWMnyQPAh3k2jhWLlt}#)))))
                    (if (vector? #{x _hoQGWMnyQPAh3k2jhWLlA}#)
                      (let ((#{n _hoQGWMnyQPAh3k2jhWLl8}#
                              (vector-length #{x _hoQGWMnyQPAh3k2jhWLlA}#)))
                        (let ((#{v _hoQGWMnyQPAh3k2jhWLl9}#
                                (let ((#{e _hoQGWMnyQPAh3k2jhWLmF}#
                                        (make-vector
                                          #{n _hoQGWMnyQPAh3k2jhWLl8}#)))
                                  (begin
                                    (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWLmF}#)
                                          #{x _hoQGWMnyQPAh3k2jhWLlA}#
                                          #f)
                                      (set-source-properties!
                                        #{e _hoQGWMnyQPAh3k2jhWLmF}#
                                        #{x _hoQGWMnyQPAh3k2jhWLlA}#))
                                    #{e _hoQGWMnyQPAh3k2jhWLmF}#))))
                          (letrec*
                            ((#{loop _hoQGWMnyQPAh3k2jhWLl$}#
                               (lambda (#{i _hoQGWMnyQPAh3k2jhWLmy}#)
                                 (if (= #{i _hoQGWMnyQPAh3k2jhWLmy}#
                                        #{n _hoQGWMnyQPAh3k2jhWLl8}#)
                                   #{v _hoQGWMnyQPAh3k2jhWLl9}#
                                   (begin
                                     (vector-set!
                                       #{v _hoQGWMnyQPAh3k2jhWLl9}#
                                       #{i _hoQGWMnyQPAh3k2jhWLmy}#
                                       (#{rebuild-macro-output _hoQGWMnyQPAh3k2jhWLkf}#
                                         (vector-ref
                                           #{x _hoQGWMnyQPAh3k2jhWLlA}#
                                           #{i _hoQGWMnyQPAh3k2jhWLmy}#)
                                         #{m _hoQGWMnyQPAh3k2jhWLlB}#))
                                     (#{loop _hoQGWMnyQPAh3k2jhWLl$}#
                                       (#{1+}# #{i _hoQGWMnyQPAh3k2jhWLmy}#)))))))
                            (#{loop _hoQGWMnyQPAh3k2jhWLl$}# 0))))
                      (if (symbol? #{x _hoQGWMnyQPAh3k2jhWLlA}#)
                        (syntax-violation
                          #f
                          "encountered raw symbol in macro output"
                          (let ((#{s _hoQGWMnyQPAh3k2jhWLm4}#
                                  (cdr #{w _hoQGWMnyQPAh3k2jhWLkb}#)))
                            (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                              (begin
                                (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWLkZ}#)
                                      #{s _hoQGWMnyQPAh3k2jhWLm4}#
                                      #f)
                                  (set-source-properties!
                                    #{e _hoQGWMnyQPAh3k2jhWLkZ}#
                                    #{s _hoQGWMnyQPAh3k2jhWLm4}#))
                                #{e _hoQGWMnyQPAh3k2jhWLkZ}#)
                              #{w _hoQGWMnyQPAh3k2jhWLkb}#
                              #{mod _hoQGWMnyQPAh3k2jhWLke}#))
                          #{x _hoQGWMnyQPAh3k2jhWLlA}#)
                        (begin
                          (if (if (pair? #{x _hoQGWMnyQPAh3k2jhWLlA}#)
                                #{s _hoQGWMnyQPAh3k2jhWLkc}#
                                #f)
                            (set-source-properties!
                              #{x _hoQGWMnyQPAh3k2jhWLlA}#
                              #{s _hoQGWMnyQPAh3k2jhWLkc}#))
                          #{x _hoQGWMnyQPAh3k2jhWLlA}#))))))))
           (with-fluids
             ((#{transformer-environment _hoQGWMnyQPAh3k2jhWHTX}#
                (lambda (#{k _hoQGWMnyQPAh3k2jhWLkg}#)
                  (#{k _hoQGWMnyQPAh3k2jhWLkg}#
                    #{e _hoQGWMnyQPAh3k2jhWLkZ}#
                    #{r _hoQGWMnyQPAh3k2jhWLka}#
                    #{w _hoQGWMnyQPAh3k2jhWLkb}#
                    #{s _hoQGWMnyQPAh3k2jhWLkc}#
                    #{rib _hoQGWMnyQPAh3k2jhWLkd}#
                    #{mod _hoQGWMnyQPAh3k2jhWLke}#))))
             (#{rebuild-macro-output _hoQGWMnyQPAh3k2jhWLkf}#
               (#{p _hoQGWMnyQPAh3k2jhWLkY}#
                 (let ((#{w _hoQGWMnyQPAh3k2jhWLkn}#
                         (cons (cons #f (car #{w _hoQGWMnyQPAh3k2jhWLkb}#))
                               (cons 'shift
                                     (cdr #{w _hoQGWMnyQPAh3k2jhWLkb}#)))))
                   (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                     (begin
                       (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWLkZ}#)
                             #{s _hoQGWMnyQPAh3k2jhWLkc}#
                             #f)
                         (set-source-properties!
                           #{e _hoQGWMnyQPAh3k2jhWLkZ}#
                           #{s _hoQGWMnyQPAh3k2jhWLkc}#))
                       #{e _hoQGWMnyQPAh3k2jhWLkZ}#)
                     #{w _hoQGWMnyQPAh3k2jhWLkn}#
                     #{mod _hoQGWMnyQPAh3k2jhWLke}#)))
               (gensym "m"))))))
     (#{expand-body _hoQGWMnyQPAh3k2jhWHTp}#
       (lambda (#{body _hoQGWMnyQPAh3k2jhWLnY}#
                #{outer-form _hoQGWMnyQPAh3k2jhWLnZ}#
                #{r _hoQGWMnyQPAh3k2jhWLna}#
                #{w _hoQGWMnyQPAh3k2jhWLnb}#
                #{mod _hoQGWMnyQPAh3k2jhWLnc}#)
         (let ((#{r _hoQGWMnyQPAh3k2jhWLnd}#
                 (cons '("placeholder" placeholder)
                       #{r _hoQGWMnyQPAh3k2jhWLna}#)))
           (let ((#{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                   (vector 'ribcage '() '() '())))
             (let ((#{w _hoQGWMnyQPAh3k2jhWLnf}#
                     (cons (car #{w _hoQGWMnyQPAh3k2jhWLnb}#)
                           (cons #{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                                 (cdr #{w _hoQGWMnyQPAh3k2jhWLnb}#)))))
               (letrec*
                 ((#{parse _hoQGWMnyQPAh3k2jhWLng}#
                    (lambda (#{body _hoQGWMnyQPAh3k2jhWLnt}#
                             #{ids _hoQGWMnyQPAh3k2jhWLnu}#
                             #{labels _hoQGWMnyQPAh3k2jhWLnv}#
                             #{var-ids _hoQGWMnyQPAh3k2jhWLnw}#
                             #{vars _hoQGWMnyQPAh3k2jhWLnx}#
                             #{vals _hoQGWMnyQPAh3k2jhWLny}#
                             #{bindings _hoQGWMnyQPAh3k2jhWLnz}#)
                      (if (null? #{body _hoQGWMnyQPAh3k2jhWLnt}#)
                        (syntax-violation
                          #f
                          "no expressions in body"
                          #{outer-form _hoQGWMnyQPAh3k2jhWLnZ}#)
                        (let ((#{e _hoQGWMnyQPAh3k2jhWLn0}#
                                (cdr (car #{body _hoQGWMnyQPAh3k2jhWLnt}#)))
                              (#{er _hoQGWMnyQPAh3k2jhWLn1}#
                                (car (car #{body _hoQGWMnyQPAh3k2jhWLnt}#))))
                          (call-with-values
                            (lambda ()
                              (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
                                #{e _hoQGWMnyQPAh3k2jhWLn0}#
                                #{er _hoQGWMnyQPAh3k2jhWLn1}#
                                '(())
                                (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
                                  #{er _hoQGWMnyQPAh3k2jhWLn1}#)
                                #{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                                #{mod _hoQGWMnyQPAh3k2jhWLnc}#
                                #f))
                            (lambda (#{type _hoQGWMnyQPAh3k2jhWLqS}#
                                     #{value _hoQGWMnyQPAh3k2jhWLqT}#
                                     #{e _hoQGWMnyQPAh3k2jhWLqU}#
                                     #{w _hoQGWMnyQPAh3k2jhWLqV}#
                                     #{s _hoQGWMnyQPAh3k2jhWLqW}#
                                     #{mod _hoQGWMnyQPAh3k2jhWLqX}#)
                              (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLqS}#
                                        'define-form)
                                (let ((#{id _hoQGWMnyQPAh3k2jhWLqb}#
                                        (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                          #{value _hoQGWMnyQPAh3k2jhWLqT}#
                                          #{w _hoQGWMnyQPAh3k2jhWLqV}#
                                          #{mod _hoQGWMnyQPAh3k2jhWLqX}#))
                                      (#{label _hoQGWMnyQPAh3k2jhWLqc}#
                                        (#{gen-label _hoQGWMnyQPAh3k2jhWHTD}#)))
                                  (let ((#{var _hoQGWMnyQPAh3k2jhWLqd}#
                                          (let ((#{id _hoQGWMnyQPAh3k2jhWLrX}#
                                                  (if (if (vector?
                                                            #{id _hoQGWMnyQPAh3k2jhWLqb}#)
                                                        (if (= (vector-length
                                                                 #{id _hoQGWMnyQPAh3k2jhWLqb}#)
                                                               4)
                                                          (eq? (vector-ref
                                                                 #{id _hoQGWMnyQPAh3k2jhWLqb}#
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref
                                                      #{id _hoQGWMnyQPAh3k2jhWLqb}#
                                                      1)
                                                    #{id _hoQGWMnyQPAh3k2jhWLqb}#)))
                                            (gensym
                                              (string-append
                                                (symbol->string
                                                  #{id _hoQGWMnyQPAh3k2jhWLrX}#)
                                                " ")))))
                                    (begin
                                      (let ((#{update _hoQGWMnyQPAh3k2jhWLrN}#
                                              (cons (vector-ref
                                                      #{id _hoQGWMnyQPAh3k2jhWLqb}#
                                                      1)
                                                    (vector-ref
                                                      #{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                                          1
                                          #{update _hoQGWMnyQPAh3k2jhWLrN}#))
                                      (let ((#{update _hoQGWMnyQPAh3k2jhWLrP}#
                                              (cons (car (vector-ref
                                                           #{id _hoQGWMnyQPAh3k2jhWLqb}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                                          2
                                          #{update _hoQGWMnyQPAh3k2jhWLrP}#))
                                      (let ((#{update _hoQGWMnyQPAh3k2jhWLrR}#
                                              (cons #{label _hoQGWMnyQPAh3k2jhWLqc}#
                                                    (vector-ref
                                                      #{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                                          3
                                          #{update _hoQGWMnyQPAh3k2jhWLrR}#))
                                      (#{parse _hoQGWMnyQPAh3k2jhWLng}#
                                        (cdr #{body _hoQGWMnyQPAh3k2jhWLnt}#)
                                        (cons #{id _hoQGWMnyQPAh3k2jhWLqb}#
                                              #{ids _hoQGWMnyQPAh3k2jhWLnu}#)
                                        (cons #{label _hoQGWMnyQPAh3k2jhWLqc}#
                                              #{labels _hoQGWMnyQPAh3k2jhWLnv}#)
                                        (cons #{id _hoQGWMnyQPAh3k2jhWLqb}#
                                              #{var-ids _hoQGWMnyQPAh3k2jhWLnw}#)
                                        (cons #{var _hoQGWMnyQPAh3k2jhWLqd}#
                                              #{vars _hoQGWMnyQPAh3k2jhWLnx}#)
                                        (cons (cons #{er _hoQGWMnyQPAh3k2jhWLn1}#
                                                    (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                                      #{e _hoQGWMnyQPAh3k2jhWLqU}#
                                                      #{w _hoQGWMnyQPAh3k2jhWLqV}#
                                                      #{mod _hoQGWMnyQPAh3k2jhWLqX}#))
                                              #{vals _hoQGWMnyQPAh3k2jhWLny}#)
                                        (cons (cons 'lexical
                                                    #{var _hoQGWMnyQPAh3k2jhWLqd}#)
                                              #{bindings _hoQGWMnyQPAh3k2jhWLnz}#)))))
                                (if (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLqS}#
                                              'define-syntax-form)
                                      #t
                                      (eqv? #{type _hoQGWMnyQPAh3k2jhWLqS}#
                                            'define-syntax-parameter-form))
                                  (let ((#{id _hoQGWMnyQPAh3k2jhWLr4}#
                                          (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                            #{value _hoQGWMnyQPAh3k2jhWLqT}#
                                            #{w _hoQGWMnyQPAh3k2jhWLqV}#
                                            #{mod _hoQGWMnyQPAh3k2jhWLqX}#))
                                        (#{label _hoQGWMnyQPAh3k2jhWLr5}#
                                          (#{gen-label _hoQGWMnyQPAh3k2jhWHTD}#)))
                                    (begin
                                      (let ((#{update _hoQGWMnyQPAh3k2jhWLsp}#
                                              (cons (vector-ref
                                                      #{id _hoQGWMnyQPAh3k2jhWLr4}#
                                                      1)
                                                    (vector-ref
                                                      #{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                                          1
                                          #{update _hoQGWMnyQPAh3k2jhWLsp}#))
                                      (let ((#{update _hoQGWMnyQPAh3k2jhWLsr}#
                                              (cons (car (vector-ref
                                                           #{id _hoQGWMnyQPAh3k2jhWLr4}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                                          2
                                          #{update _hoQGWMnyQPAh3k2jhWLsr}#))
                                      (let ((#{update _hoQGWMnyQPAh3k2jhWLst}#
                                              (cons #{label _hoQGWMnyQPAh3k2jhWLr5}#
                                                    (vector-ref
                                                      #{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage _hoQGWMnyQPAh3k2jhWLne}#
                                          3
                                          #{update _hoQGWMnyQPAh3k2jhWLst}#))
                                      (#{parse _hoQGWMnyQPAh3k2jhWLng}#
                                        (cdr #{body _hoQGWMnyQPAh3k2jhWLnt}#)
                                        (cons #{id _hoQGWMnyQPAh3k2jhWLr4}#
                                              #{ids _hoQGWMnyQPAh3k2jhWLnu}#)
                                        (cons #{label _hoQGWMnyQPAh3k2jhWLr5}#
                                              #{labels _hoQGWMnyQPAh3k2jhWLnv}#)
                                        #{var-ids _hoQGWMnyQPAh3k2jhWLnw}#
                                        #{vars _hoQGWMnyQPAh3k2jhWLnx}#
                                        #{vals _hoQGWMnyQPAh3k2jhWLny}#
                                        (cons (cons 'macro
                                                    (cons #{er _hoQGWMnyQPAh3k2jhWLn1}#
                                                          (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                                            #{e _hoQGWMnyQPAh3k2jhWLqU}#
                                                            #{w _hoQGWMnyQPAh3k2jhWLqV}#
                                                            #{mod _hoQGWMnyQPAh3k2jhWLqX}#)))
                                              #{bindings _hoQGWMnyQPAh3k2jhWLnz}#))))
                                  (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLqS}#
                                            'begin-form)
                                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWLs1}#
                                            ($sc-dispatch
                                              #{e _hoQGWMnyQPAh3k2jhWLqU}#
                                              '(_ . each-any))))
                                      (if #{tmp _hoQGWMnyQPAh3k2jhWLs1}#
                                        (@apply
                                          (lambda (#{e1 _hoQGWMnyQPAh3k2jhWLs5}#)
                                            (#{parse _hoQGWMnyQPAh3k2jhWLng}#
                                              (letrec*
                                                ((#{f _hoQGWMnyQPAh3k2jhWLs6}#
                                                   (lambda (#{forms _hoQGWMnyQPAh3k2jhWLt5}#)
                                                     (if (null? #{forms _hoQGWMnyQPAh3k2jhWLt5}#)
                                                       (cdr #{body _hoQGWMnyQPAh3k2jhWLnt}#)
                                                       (cons (cons #{er _hoQGWMnyQPAh3k2jhWLn1}#
                                                                   (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                                                     (car #{forms _hoQGWMnyQPAh3k2jhWLt5}#)
                                                                     #{w _hoQGWMnyQPAh3k2jhWLqV}#
                                                                     #{mod _hoQGWMnyQPAh3k2jhWLqX}#))
                                                             (#{f _hoQGWMnyQPAh3k2jhWLs6}#
                                                               (cdr #{forms _hoQGWMnyQPAh3k2jhWLt5}#)))))))
                                                (#{f _hoQGWMnyQPAh3k2jhWLs6}#
                                                  #{e1 _hoQGWMnyQPAh3k2jhWLs5}#))
                                              #{ids _hoQGWMnyQPAh3k2jhWLnu}#
                                              #{labels _hoQGWMnyQPAh3k2jhWLnv}#
                                              #{var-ids _hoQGWMnyQPAh3k2jhWLnw}#
                                              #{vars _hoQGWMnyQPAh3k2jhWLnx}#
                                              #{vals _hoQGWMnyQPAh3k2jhWLny}#
                                              #{bindings _hoQGWMnyQPAh3k2jhWLnz}#))
                                          #{tmp _hoQGWMnyQPAh3k2jhWLs1}#)
                                        (syntax-violation
                                          #f
                                          "source expression failed to match any pattern"
                                          #{e _hoQGWMnyQPAh3k2jhWLqU}#)))
                                    (if (eqv? #{type _hoQGWMnyQPAh3k2jhWLqS}#
                                              'local-syntax-form)
                                      (#{expand-local-syntax _hoQGWMnyQPAh3k2jhWHTq}#
                                        #{value _hoQGWMnyQPAh3k2jhWLqT}#
                                        #{e _hoQGWMnyQPAh3k2jhWLqU}#
                                        #{er _hoQGWMnyQPAh3k2jhWLn1}#
                                        #{w _hoQGWMnyQPAh3k2jhWLqV}#
                                        #{s _hoQGWMnyQPAh3k2jhWLqW}#
                                        #{mod _hoQGWMnyQPAh3k2jhWLqX}#
                                        (lambda (#{forms _hoQGWMnyQPAh3k2jhWLuH}#
                                                 #{er _hoQGWMnyQPAh3k2jhWLuI}#
                                                 #{w _hoQGWMnyQPAh3k2jhWLuJ}#
                                                 #{s _hoQGWMnyQPAh3k2jhWLuK}#
                                                 #{mod _hoQGWMnyQPAh3k2jhWLuL}#)
                                          (#{parse _hoQGWMnyQPAh3k2jhWLng}#
                                            (letrec*
                                              ((#{f _hoQGWMnyQPAh3k2jhWLuM}#
                                                 (lambda (#{forms _hoQGWMnyQPAh3k2jhWLvL}#)
                                                   (if (null? #{forms _hoQGWMnyQPAh3k2jhWLvL}#)
                                                     (cdr #{body _hoQGWMnyQPAh3k2jhWLnt}#)
                                                     (cons (cons #{er _hoQGWMnyQPAh3k2jhWLuI}#
                                                                 (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                                                   (car #{forms _hoQGWMnyQPAh3k2jhWLvL}#)
                                                                   #{w _hoQGWMnyQPAh3k2jhWLuJ}#
                                                                   #{mod _hoQGWMnyQPAh3k2jhWLuL}#))
                                                           (#{f _hoQGWMnyQPAh3k2jhWLuM}#
                                                             (cdr #{forms _hoQGWMnyQPAh3k2jhWLvL}#)))))))
                                              (#{f _hoQGWMnyQPAh3k2jhWLuM}#
                                                #{forms _hoQGWMnyQPAh3k2jhWLuH}#))
                                            #{ids _hoQGWMnyQPAh3k2jhWLnu}#
                                            #{labels _hoQGWMnyQPAh3k2jhWLnv}#
                                            #{var-ids _hoQGWMnyQPAh3k2jhWLnw}#
                                            #{vars _hoQGWMnyQPAh3k2jhWLnx}#
                                            #{vals _hoQGWMnyQPAh3k2jhWLny}#
                                            #{bindings _hoQGWMnyQPAh3k2jhWLnz}#)))
                                      (if (null? #{ids _hoQGWMnyQPAh3k2jhWLnu}#)
                                        (#{build-sequence _hoQGWMnyQPAh3k2jhWHSu}#
                                          #f
                                          (map (lambda (#{x _hoQGWMnyQPAh3k2jhWLwM}#)
                                                 (let ((#{e _hoQGWMnyQPAh3k2jhWLwQ}#
                                                         (cdr #{x _hoQGWMnyQPAh3k2jhWLwM}#))
                                                       (#{r _hoQGWMnyQPAh3k2jhWLwR}#
                                                         (car #{x _hoQGWMnyQPAh3k2jhWLwM}#)))
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
                                                         #{e _hoQGWMnyQPAh3k2jhWLwQ}#
                                                         #{r _hoQGWMnyQPAh3k2jhWLwR}#
                                                         '(())
                                                         (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
                                                           #{e _hoQGWMnyQPAh3k2jhWLwQ}#)
                                                         #f
                                                         #{mod _hoQGWMnyQPAh3k2jhWLqX}#
                                                         #f))
                                                     (lambda (#{type _hoQGWMnyQPAh3k2jhWLwV}#
                                                              #{value _hoQGWMnyQPAh3k2jhWLwW}#
                                                              #{e _hoQGWMnyQPAh3k2jhWLwX}#
                                                              #{w _hoQGWMnyQPAh3k2jhWLwY}#
                                                              #{s _hoQGWMnyQPAh3k2jhWLwZ}#
                                                              #{mod _hoQGWMnyQPAh3k2jhWLwa}#)
                                                       (#{expand-expr _hoQGWMnyQPAh3k2jhWHTm}#
                                                         #{type _hoQGWMnyQPAh3k2jhWLwV}#
                                                         #{value _hoQGWMnyQPAh3k2jhWLwW}#
                                                         #{e _hoQGWMnyQPAh3k2jhWLwX}#
                                                         #{r _hoQGWMnyQPAh3k2jhWLwR}#
                                                         #{w _hoQGWMnyQPAh3k2jhWLwY}#
                                                         #{s _hoQGWMnyQPAh3k2jhWLwZ}#
                                                         #{mod _hoQGWMnyQPAh3k2jhWLwa}#)))))
                                               (cons (cons #{er _hoQGWMnyQPAh3k2jhWLn1}#
                                                           (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                                             (begin
                                                               (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWLqU}#)
                                                                     #{s _hoQGWMnyQPAh3k2jhWLqW}#
                                                                     #f)
                                                                 (set-source-properties!
                                                                   #{e _hoQGWMnyQPAh3k2jhWLqU}#
                                                                   #{s _hoQGWMnyQPAh3k2jhWLqW}#))
                                                               #{e _hoQGWMnyQPAh3k2jhWLqU}#)
                                                             #{w _hoQGWMnyQPAh3k2jhWLqV}#
                                                             #{mod _hoQGWMnyQPAh3k2jhWLqX}#))
                                                     (cdr #{body _hoQGWMnyQPAh3k2jhWLnt}#))))
                                        (begin
                                          (if (not (#{valid-bound-ids? _hoQGWMnyQPAh3k2jhWHTb}#
                                                     #{ids _hoQGWMnyQPAh3k2jhWLnu}#))
                                            (syntax-violation
                                              #f
                                              "invalid or duplicate identifier in definition"
                                              #{outer-form _hoQGWMnyQPAh3k2jhWLnZ}#))
                                          (letrec*
                                            ((#{loop _hoQGWMnyQPAh3k2jhWLx@}#
                                               (lambda (#{bs _hoQGWMnyQPAh3k2jhWLyC}#
                                                        #{er-cache _hoQGWMnyQPAh3k2jhWLyD}#
                                                        #{r-cache _hoQGWMnyQPAh3k2jhWLyE}#)
                                                 (if (not (null? #{bs _hoQGWMnyQPAh3k2jhWLyC}#))
                                                   (let ((#{b _hoQGWMnyQPAh3k2jhWLyF}#
                                                           (car #{bs _hoQGWMnyQPAh3k2jhWLyC}#)))
                                                     (if (eq? (car #{b _hoQGWMnyQPAh3k2jhWLyF}#)
                                                              'macro)
                                                       (let ((#{er _hoQGWMnyQPAh3k2jhWLyH}#
                                                               (car (cdr #{b _hoQGWMnyQPAh3k2jhWLyF}#))))
                                                         (let ((#{r-cache _hoQGWMnyQPAh3k2jhWLyI}#
                                                                 (if (eq? #{er _hoQGWMnyQPAh3k2jhWLyH}#
                                                                          #{er-cache _hoQGWMnyQPAh3k2jhWLyD}#)
                                                                   #{r-cache _hoQGWMnyQPAh3k2jhWLyE}#
                                                                   (#{macros-only-env _hoQGWMnyQPAh3k2jhWHS9}#
                                                                     #{er _hoQGWMnyQPAh3k2jhWLyH}#))))
                                                           (begin
                                                             (set-cdr!
                                                               #{b _hoQGWMnyQPAh3k2jhWLyF}#
                                                               (#{eval-local-transformer _hoQGWMnyQPAh3k2jhWHTr}#
                                                                 (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                                                   (cdr (cdr #{b _hoQGWMnyQPAh3k2jhWLyF}#))
                                                                   #{r-cache _hoQGWMnyQPAh3k2jhWLyI}#
                                                                   '(())
                                                                   #{mod _hoQGWMnyQPAh3k2jhWLqX}#)
                                                                 #{mod _hoQGWMnyQPAh3k2jhWLqX}#))
                                                             (#{loop _hoQGWMnyQPAh3k2jhWLx@}#
                                                               (cdr #{bs _hoQGWMnyQPAh3k2jhWLyC}#)
                                                               #{er _hoQGWMnyQPAh3k2jhWLyH}#
                                                               #{r-cache _hoQGWMnyQPAh3k2jhWLyI}#))))
                                                       (#{loop _hoQGWMnyQPAh3k2jhWLx@}#
                                                         (cdr #{bs _hoQGWMnyQPAh3k2jhWLyC}#)
                                                         #{er-cache _hoQGWMnyQPAh3k2jhWLyD}#
                                                         #{r-cache _hoQGWMnyQPAh3k2jhWLyE}#)))))))
                                            (#{loop _hoQGWMnyQPAh3k2jhWLx@}#
                                              #{bindings _hoQGWMnyQPAh3k2jhWLnz}#
                                              #f
                                              #f))
                                          (set-cdr!
                                            #{r _hoQGWMnyQPAh3k2jhWLnd}#
                                            (#{extend-env _hoQGWMnyQPAh3k2jhWHS7}#
                                              #{labels _hoQGWMnyQPAh3k2jhWLnv}#
                                              #{bindings _hoQGWMnyQPAh3k2jhWLnz}#
                                              (cdr #{r _hoQGWMnyQPAh3k2jhWLnd}#)))
                                          (#{build-letrec _hoQGWMnyQPAh3k2jhWHSx}#
                                            #f
                                            #t
                                            (reverse
                                              (map syntax->datum
                                                   #{var-ids _hoQGWMnyQPAh3k2jhWLnw}#))
                                            (reverse
                                              #{vars _hoQGWMnyQPAh3k2jhWLnx}#)
                                            (map (lambda (#{x _hoQGWMnyQPAh3k2jhWL3f}#)
                                                   (let ((#{e _hoQGWMnyQPAh3k2jhWL3j}#
                                                           (cdr #{x _hoQGWMnyQPAh3k2jhWL3f}#))
                                                         (#{r _hoQGWMnyQPAh3k2jhWL3k}#
                                                           (car #{x _hoQGWMnyQPAh3k2jhWL3f}#)))
                                                     (call-with-values
                                                       (lambda ()
                                                         (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
                                                           #{e _hoQGWMnyQPAh3k2jhWL3j}#
                                                           #{r _hoQGWMnyQPAh3k2jhWL3k}#
                                                           '(())
                                                           (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
                                                             #{e _hoQGWMnyQPAh3k2jhWL3j}#)
                                                           #f
                                                           #{mod _hoQGWMnyQPAh3k2jhWLqX}#
                                                           #f))
                                                       (lambda (#{type _hoQGWMnyQPAh3k2jhWL3o}#
                                                                #{value _hoQGWMnyQPAh3k2jhWL3p}#
                                                                #{e _hoQGWMnyQPAh3k2jhWL3q}#
                                                                #{w _hoQGWMnyQPAh3k2jhWL3r}#
                                                                #{s _hoQGWMnyQPAh3k2jhWL3s}#
                                                                #{mod _hoQGWMnyQPAh3k2jhWL3t}#)
                                                         (#{expand-expr _hoQGWMnyQPAh3k2jhWHTm}#
                                                           #{type _hoQGWMnyQPAh3k2jhWL3o}#
                                                           #{value _hoQGWMnyQPAh3k2jhWL3p}#
                                                           #{e _hoQGWMnyQPAh3k2jhWL3q}#
                                                           #{r _hoQGWMnyQPAh3k2jhWL3k}#
                                                           #{w _hoQGWMnyQPAh3k2jhWL3r}#
                                                           #{s _hoQGWMnyQPAh3k2jhWL3s}#
                                                           #{mod _hoQGWMnyQPAh3k2jhWL3t}#)))))
                                                 (reverse
                                                   #{vals _hoQGWMnyQPAh3k2jhWLny}#))
                                            (let ((#{exps _hoQGWMnyQPAh3k2jhWL3z}#
                                                    (map (lambda (#{x _hoQGWMnyQPAh3k2jhWL30}#)
                                                           (let ((#{e _hoQGWMnyQPAh3k2jhWL33}#
                                                                   (cdr #{x _hoQGWMnyQPAh3k2jhWL30}#))
                                                                 (#{r _hoQGWMnyQPAh3k2jhWL34}#
                                                                   (car #{x _hoQGWMnyQPAh3k2jhWL30}#)))
                                                             (call-with-values
                                                               (lambda ()
                                                                 (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
                                                                   #{e _hoQGWMnyQPAh3k2jhWL33}#
                                                                   #{r _hoQGWMnyQPAh3k2jhWL34}#
                                                                   '(())
                                                                   (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
                                                                     #{e _hoQGWMnyQPAh3k2jhWL33}#)
                                                                   #f
                                                                   #{mod _hoQGWMnyQPAh3k2jhWLqX}#
                                                                   #f))
                                                               (lambda (#{type _hoQGWMnyQPAh3k2jhWL38}#
                                                                        #{value _hoQGWMnyQPAh3k2jhWL39}#
                                                                        #{e _hoQGWMnyQPAh3k2jhWL3$}#
                                                                        #{w _hoQGWMnyQPAh3k2jhWL3@}#
                                                                        #{s _hoQGWMnyQPAh3k2jhWL4A}#
                                                                        #{mod _hoQGWMnyQPAh3k2jhWL4B}#)
                                                                 (#{expand-expr _hoQGWMnyQPAh3k2jhWHTm}#
                                                                   #{type _hoQGWMnyQPAh3k2jhWL38}#
                                                                   #{value _hoQGWMnyQPAh3k2jhWL39}#
                                                                   #{e _hoQGWMnyQPAh3k2jhWL3$}#
                                                                   #{r _hoQGWMnyQPAh3k2jhWL34}#
                                                                   #{w _hoQGWMnyQPAh3k2jhWL3@}#
                                                                   #{s _hoQGWMnyQPAh3k2jhWL4A}#
                                                                   #{mod _hoQGWMnyQPAh3k2jhWL4B}#)))))
                                                         (cons (cons #{er _hoQGWMnyQPAh3k2jhWLn1}#
                                                                     (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                                                       (begin
                                                                         (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWLqU}#)
                                                                               #{s _hoQGWMnyQPAh3k2jhWLqW}#
                                                                               #f)
                                                                           (set-source-properties!
                                                                             #{e _hoQGWMnyQPAh3k2jhWLqU}#
                                                                             #{s _hoQGWMnyQPAh3k2jhWLqW}#))
                                                                         #{e _hoQGWMnyQPAh3k2jhWLqU}#)
                                                                       #{w _hoQGWMnyQPAh3k2jhWLqV}#
                                                                       #{mod _hoQGWMnyQPAh3k2jhWLqX}#))
                                                               (cdr #{body _hoQGWMnyQPAh3k2jhWLnt}#)))))
                                              (if (null? (cdr #{exps _hoQGWMnyQPAh3k2jhWL3z}#))
                                                (car #{exps _hoQGWMnyQPAh3k2jhWL3z}#)
                                                (make-struct/no-tail
                                                  (vector-ref
                                                    %expanded-vtables
                                                    12)
                                                  #f
                                                  #{exps _hoQGWMnyQPAh3k2jhWL3z}#)))))))))))))))))
                 (#{parse _hoQGWMnyQPAh3k2jhWLng}#
                   (map (lambda (#{x _hoQGWMnyQPAh3k2jhWLnj}#)
                          (cons #{r _hoQGWMnyQPAh3k2jhWLnd}#
                                (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                  #{x _hoQGWMnyQPAh3k2jhWLnj}#
                                  #{w _hoQGWMnyQPAh3k2jhWLnf}#
                                  #{mod _hoQGWMnyQPAh3k2jhWLnc}#)))
                        #{body _hoQGWMnyQPAh3k2jhWLnY}#)
                   '()
                   '()
                   '()
                   '()
                   '()
                   '())))))))
     (#{expand-local-syntax _hoQGWMnyQPAh3k2jhWHTq}#
       (lambda (#{rec? _hoQGWMnyQPAh3k2jhWL4b}#
                #{e _hoQGWMnyQPAh3k2jhWL4c}#
                #{r _hoQGWMnyQPAh3k2jhWL4d}#
                #{w _hoQGWMnyQPAh3k2jhWL4e}#
                #{s _hoQGWMnyQPAh3k2jhWL4f}#
                #{mod _hoQGWMnyQPAh3k2jhWL4g}#
                #{k _hoQGWMnyQPAh3k2jhWL4h}#)
         (let ((#{tmp _hoQGWMnyQPAh3k2jhWL4j}#
                 ($sc-dispatch
                   #{e _hoQGWMnyQPAh3k2jhWL4c}#
                   '(_ #(each (any any)) any . each-any))))
           (if #{tmp _hoQGWMnyQPAh3k2jhWL4j}#
             (@apply
               (lambda (#{id _hoQGWMnyQPAh3k2jhWL4n}#
                        #{val _hoQGWMnyQPAh3k2jhWL4o}#
                        #{e1 _hoQGWMnyQPAh3k2jhWL4p}#
                        #{e2 _hoQGWMnyQPAh3k2jhWL4q}#)
                 (if (not (#{valid-bound-ids? _hoQGWMnyQPAh3k2jhWHTb}#
                            #{id _hoQGWMnyQPAh3k2jhWL4n}#))
                   (syntax-violation
                     #f
                     "duplicate bound keyword"
                     #{e _hoQGWMnyQPAh3k2jhWL4c}#)
                   (let ((#{labels _hoQGWMnyQPAh3k2jhWL6E}#
                           (#{gen-labels _hoQGWMnyQPAh3k2jhWHTE}#
                             #{id _hoQGWMnyQPAh3k2jhWL4n}#)))
                     (let ((#{new-w _hoQGWMnyQPAh3k2jhWL6F}#
                             (#{make-binding-wrap _hoQGWMnyQPAh3k2jhWHTP}#
                               #{id _hoQGWMnyQPAh3k2jhWL4n}#
                               #{labels _hoQGWMnyQPAh3k2jhWL6E}#
                               #{w _hoQGWMnyQPAh3k2jhWL4e}#)))
                       (#{k _hoQGWMnyQPAh3k2jhWL4h}#
                         (cons #{e1 _hoQGWMnyQPAh3k2jhWL4p}#
                               #{e2 _hoQGWMnyQPAh3k2jhWL4q}#)
                         (#{extend-env _hoQGWMnyQPAh3k2jhWHS7}#
                           #{labels _hoQGWMnyQPAh3k2jhWL6E}#
                           (let ((#{trans-r _hoQGWMnyQPAh3k2jhWL6l}#
                                   (#{macros-only-env _hoQGWMnyQPAh3k2jhWHS9}#
                                     #{r _hoQGWMnyQPAh3k2jhWL4d}#)))
                             (begin
                               (if #{rec? _hoQGWMnyQPAh3k2jhWL4b}#
                                 #{new-w _hoQGWMnyQPAh3k2jhWL6F}#
                                 #{w _hoQGWMnyQPAh3k2jhWL4e}#)
                               (map (lambda (#{x _hoQGWMnyQPAh3k2jhWL6m}#)
                                      (cons 'macro
                                            (#{eval-local-transformer _hoQGWMnyQPAh3k2jhWHTr}#
                                              (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                                #{x _hoQGWMnyQPAh3k2jhWL6m}#
                                                #{trans-r _hoQGWMnyQPAh3k2jhWL6l}#
                                                (values
                                                  (if #{rec? _hoQGWMnyQPAh3k2jhWL4b}#
                                                    #{new-w _hoQGWMnyQPAh3k2jhWL6F}#
                                                    #{w _hoQGWMnyQPAh3k2jhWL4e}#))
                                                #{mod _hoQGWMnyQPAh3k2jhWL4g}#)
                                              #{mod _hoQGWMnyQPAh3k2jhWL4g}#)))
                                    #{val _hoQGWMnyQPAh3k2jhWL4o}#)))
                           #{r _hoQGWMnyQPAh3k2jhWL4d}#)
                         #{new-w _hoQGWMnyQPAh3k2jhWL6F}#
                         #{s _hoQGWMnyQPAh3k2jhWL4f}#
                         #{mod _hoQGWMnyQPAh3k2jhWL4g}#)))))
               #{tmp _hoQGWMnyQPAh3k2jhWL4j}#)
             (syntax-violation
               #f
               "bad local syntax definition"
               (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                 (begin
                   (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWL4c}#)
                         #{s _hoQGWMnyQPAh3k2jhWL4f}#
                         #f)
                     (set-source-properties!
                       #{e _hoQGWMnyQPAh3k2jhWL4c}#
                       #{s _hoQGWMnyQPAh3k2jhWL4f}#))
                   #{e _hoQGWMnyQPAh3k2jhWL4c}#)
                 #{w _hoQGWMnyQPAh3k2jhWL4e}#
                 #{mod _hoQGWMnyQPAh3k2jhWL4g}#))))))
     (#{eval-local-transformer _hoQGWMnyQPAh3k2jhWHTr}#
       (lambda (#{expanded _hoQGWMnyQPAh3k2jhWL$6}#
                #{mod _hoQGWMnyQPAh3k2jhWL$7}#)
         (let ((#{p _hoQGWMnyQPAh3k2jhWL$8}#
                 (primitive-eval
                   #{expanded _hoQGWMnyQPAh3k2jhWL$6}#)))
           (if (procedure? #{p _hoQGWMnyQPAh3k2jhWL$8}#)
             #{p _hoQGWMnyQPAh3k2jhWL$8}#
             (syntax-violation
               #f
               "nonprocedure transformer"
               #{p _hoQGWMnyQPAh3k2jhWL$8}#)))))
     (#{ellipsis? _hoQGWMnyQPAh3k2jhWHTt}#
       (lambda (#{x _hoQGWMnyQPAh3k2jhWHeC}#)
         (if (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWHeC}#)
                   (if (= (vector-length #{x _hoQGWMnyQPAh3k2jhWHeC}#)
                          4)
                     (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWHeC}# 0)
                          'syntax-object)
                     #f)
                   #f)
               (symbol?
                 (vector-ref #{x _hoQGWMnyQPAh3k2jhWHeC}# 1))
               #f)
           (if (eq? (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWHeC}#)
                          (if (= (vector-length #{x _hoQGWMnyQPAh3k2jhWHeC}#)
                                 4)
                            (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWHeC}# 0)
                                 'syntax-object)
                            #f)
                          #f)
                      (vector-ref #{x _hoQGWMnyQPAh3k2jhWHeC}# 1)
                      #{x _hoQGWMnyQPAh3k2jhWHeC}#)
                    (if (if (= (vector-length
                                 '#(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("2de"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         expand-lambda-case
                                         lambda*-formals
                                         expand-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         expand-void
                                         eval-local-transformer
                                         expand-local-syntax
                                         expand-body
                                         expand-macro
                                         expand-application
                                         expand-expr
                                         expand
                                         syntax-type
                                         parse-when-list
                                         expand-install-global
                                         expand-top-sequence
                                         expand-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         with-transformer-environment
                                         transformer-environment
                                         resolve-identifier
                                         locally-bound-identifiers
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-application
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-sequence
                                         make-application
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("1tt"
                                        "1ts"
                                        "1tr"
                                        "1tq"
                                        "1tp"
                                        "1to"
                                        "1tn"
                                        "1tm"
                                        "1tl"
                                        "1tk"
                                        "1tj"
                                        "1ti"
                                        "1th"
                                        "1tg"
                                        "1tf"
                                        "1te"
                                        "1td"
                                        "1tc"
                                        "1tb"
                                        "1ta"
                                        "1t9"
                                        "1t8"
                                        "1t7"
                                        "1t6"
                                        "1t5"
                                        "1t4"
                                        "1t3"
                                        "1t2"
                                        "1t1"
                                        "1t0"
                                        "1sz"
                                        "1sy"
                                        "1sx"
                                        "1sw"
                                        "1sv"
                                        "1su"
                                        "1st"
                                        "1ss"
                                        "1sr"
                                        "1sq"
                                        "1sp"
                                        "1so"
                                        "1sn"
                                        "1sm"
                                        "1sl"
                                        "1sk"
                                        "1sj"
                                        "1si"
                                        "1sh"
                                        "1sg"
                                        "1sf"
                                        "1se"
                                        "1sd"
                                        "1sc"
                                        "1sb"
                                        "1sa"
                                        "1s9"
                                        "1s8"
                                        "1s7"
                                        "1s6"
                                        "1s5"
                                        "1s4"
                                        "1s3"
                                        "1s2"
                                        "1s1"
                                        "1s0"
                                        "1rz"
                                        "1ry"
                                        "1rx"
                                        "1rw"
                                        "1rv"
                                        "1ru"
                                        "1rt"
                                        "1rs"
                                        "1rr"
                                        "1rq"
                                        "1rp"
                                        "1ro"
                                        "1rn"
                                        "1rm"
                                        "1rl"
                                        "1rk"
                                        "1rj"
                                        "1ri"
                                        "1rh"
                                        "1rg"
                                        "1rf"
                                        "1re"
                                        "1rd"
                                        "1rc"
                                        "1rb"
                                        "1ra"
                                        "1r9"
                                        "1r8"
                                        "1r7"
                                        "1r6"
                                        "1r5"
                                        "1r4"
                                        "1r3"
                                        "1r2"
                                        "1r1"
                                        "1r0"
                                        "1qz"
                                        "1qy"
                                        "1qx"
                                        "1qw"
                                        "1qv"
                                        "1qu"
                                        "1qt"
                                        "1qs"
                                        "1qr"
                                        "1qq"
                                        "1qp"
                                        "1qo"
                                        "1qn"
                                        "1qm"
                                        "1ql"
                                        "1qk"
                                        "1qj"
                                        "1qi"
                                        "1qh"
                                        "1qg"
                                        "1qf"
                                        "1qe"
                                        "1qd"
                                        "1qc"
                                        "1qb"
                                        "1qa"
                                        "1q9"
                                        "1q8"
                                        "1q7"
                                        "1q6"
                                        "1q5"
                                        "1q4"
                                        "1q3"
                                        "1q2"
                                        "1q1"
                                        "1q0"
                                        "1pz"
                                        "1py"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("1og" "1of" "1oe")))
                                    (hygiene guile)))
                               4)
                          #t
                          #f)
                      '...
                      '#(syntax-object
                         ...
                         ((top)
                          #(ribcage () () ())
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("2de"))
                          #(ribcage
                            (lambda-var-list
                              gen-var
                              strip
                              expand-lambda-case
                              lambda*-formals
                              expand-simple-lambda
                              lambda-formals
                              ellipsis?
                              expand-void
                              eval-local-transformer
                              expand-local-syntax
                              expand-body
                              expand-macro
                              expand-application
                              expand-expr
                              expand
                              syntax-type
                              parse-when-list
                              expand-install-global
                              expand-top-sequence
                              expand-sequence
                              source-wrap
                              wrap
                              bound-id-member?
                              distinct-bound-ids?
                              valid-bound-ids?
                              bound-id=?
                              free-id=?
                              with-transformer-environment
                              transformer-environment
                              resolve-identifier
                              locally-bound-identifiers
                              id-var-name
                              same-marks?
                              join-marks
                              join-wraps
                              smart-append
                              make-binding-wrap
                              extend-ribcage!
                              make-empty-ribcage
                              new-mark
                              anti-mark
                              the-anti-mark
                              top-marked?
                              top-wrap
                              empty-wrap
                              set-ribcage-labels!
                              set-ribcage-marks!
                              set-ribcage-symnames!
                              ribcage-labels
                              ribcage-marks
                              ribcage-symnames
                              ribcage?
                              make-ribcage
                              gen-labels
                              gen-label
                              make-rename
                              rename-marks
                              rename-new
                              rename-old
                              subst-rename?
                              wrap-subst
                              wrap-marks
                              make-wrap
                              id-sym-name&marks
                              id-sym-name
                              id?
                              nonsymbol-id?
                              global-extend
                              lookup
                              macros-only-env
                              extend-var-env
                              extend-env
                              null-env
                              binding-value
                              binding-type
                              make-binding
                              arg-check
                              source-annotation
                              no-source
                              set-syntax-object-module!
                              set-syntax-object-wrap!
                              set-syntax-object-expression!
                              syntax-object-module
                              syntax-object-wrap
                              syntax-object-expression
                              syntax-object?
                              make-syntax-object
                              build-lexical-var
                              build-letrec
                              build-named-let
                              build-let
                              build-sequence
                              build-data
                              build-primref
                              build-lambda-case
                              build-case-lambda
                              build-simple-lambda
                              build-global-definition
                              build-global-assignment
                              build-global-reference
                              analyze-variable
                              build-lexical-assignment
                              build-lexical-reference
                              build-dynlet
                              build-conditional
                              build-application
                              build-void
                              maybe-name-value!
                              decorate-source
                              get-global-definition-hook
                              put-global-definition-hook
                              gensym-hook
                              local-eval-hook
                              top-level-eval-hook
                              fx<
                              fx=
                              fx-
                              fx+
                              set-lambda-meta!
                              lambda-meta
                              lambda?
                              make-dynlet
                              make-letrec
                              make-let
                              make-lambda-case
                              make-lambda
                              make-sequence
                              make-application
                              make-conditional
                              make-toplevel-define
                              make-toplevel-set
                              make-toplevel-ref
                              make-module-set
                              make-module-ref
                              make-lexical-set
                              make-lexical-ref
                              make-primitive-ref
                              make-const
                              make-void)
                            ((top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top))
                            ("1tt"
                             "1ts"
                             "1tr"
                             "1tq"
                             "1tp"
                             "1to"
                             "1tn"
                             "1tm"
                             "1tl"
                             "1tk"
                             "1tj"
                             "1ti"
                             "1th"
                             "1tg"
                             "1tf"
                             "1te"
                             "1td"
                             "1tc"
                             "1tb"
                             "1ta"
                             "1t9"
                             "1t8"
                             "1t7"
                             "1t6"
                             "1t5"
                             "1t4"
                             "1t3"
                             "1t2"
                             "1t1"
                             "1t0"
                             "1sz"
                             "1sy"
                             "1sx"
                             "1sw"
                             "1sv"
                             "1su"
                             "1st"
                             "1ss"
                             "1sr"
                             "1sq"
                             "1sp"
                             "1so"
                             "1sn"
                             "1sm"
                             "1sl"
                             "1sk"
                             "1sj"
                             "1si"
                             "1sh"
                             "1sg"
                             "1sf"
                             "1se"
                             "1sd"
                             "1sc"
                             "1sb"
                             "1sa"
                             "1s9"
                             "1s8"
                             "1s7"
                             "1s6"
                             "1s5"
                             "1s4"
                             "1s3"
                             "1s2"
                             "1s1"
                             "1s0"
                             "1rz"
                             "1ry"
                             "1rx"
                             "1rw"
                             "1rv"
                             "1ru"
                             "1rt"
                             "1rs"
                             "1rr"
                             "1rq"
                             "1rp"
                             "1ro"
                             "1rn"
                             "1rm"
                             "1rl"
                             "1rk"
                             "1rj"
                             "1ri"
                             "1rh"
                             "1rg"
                             "1rf"
                             "1re"
                             "1rd"
                             "1rc"
                             "1rb"
                             "1ra"
                             "1r9"
                             "1r8"
                             "1r7"
                             "1r6"
                             "1r5"
                             "1r4"
                             "1r3"
                             "1r2"
                             "1r1"
                             "1r0"
                             "1qz"
                             "1qy"
                             "1qx"
                             "1qw"
                             "1qv"
                             "1qu"
                             "1qt"
                             "1qs"
                             "1qr"
                             "1qq"
                             "1qp"
                             "1qo"
                             "1qn"
                             "1qm"
                             "1ql"
                             "1qk"
                             "1qj"
                             "1qi"
                             "1qh"
                             "1qg"
                             "1qf"
                             "1qe"
                             "1qd"
                             "1qc"
                             "1qb"
                             "1qa"
                             "1q9"
                             "1q8"
                             "1q7"
                             "1q6"
                             "1q5"
                             "1q4"
                             "1q3"
                             "1q2"
                             "1q1"
                             "1q0"
                             "1pz"
                             "1py"))
                          #(ribcage
                            (define-structure
                              define-expansion-accessors
                              define-expansion-constructors)
                            ((top) (top) (top))
                            ("1og" "1of" "1oe")))
                         (hygiene guile))))
             (eq? (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                    #{x _hoQGWMnyQPAh3k2jhWHeC}#
                    '(()))
                  (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("2de"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            expand-lambda-case
                            lambda*-formals
                            expand-simple-lambda
                            lambda-formals
                            ellipsis?
                            expand-void
                            eval-local-transformer
                            expand-local-syntax
                            expand-body
                            expand-macro
                            expand-application
                            expand-expr
                            expand
                            syntax-type
                            parse-when-list
                            expand-install-global
                            expand-top-sequence
                            expand-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            with-transformer-environment
                            transformer-environment
                            resolve-identifier
                            locally-bound-identifiers
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            gensym-hook
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("1tt"
                           "1ts"
                           "1tr"
                           "1tq"
                           "1tp"
                           "1to"
                           "1tn"
                           "1tm"
                           "1tl"
                           "1tk"
                           "1tj"
                           "1ti"
                           "1th"
                           "1tg"
                           "1tf"
                           "1te"
                           "1td"
                           "1tc"
                           "1tb"
                           "1ta"
                           "1t9"
                           "1t8"
                           "1t7"
                           "1t6"
                           "1t5"
                           "1t4"
                           "1t3"
                           "1t2"
                           "1t1"
                           "1t0"
                           "1sz"
                           "1sy"
                           "1sx"
                           "1sw"
                           "1sv"
                           "1su"
                           "1st"
                           "1ss"
                           "1sr"
                           "1sq"
                           "1sp"
                           "1so"
                           "1sn"
                           "1sm"
                           "1sl"
                           "1sk"
                           "1sj"
                           "1si"
                           "1sh"
                           "1sg"
                           "1sf"
                           "1se"
                           "1sd"
                           "1sc"
                           "1sb"
                           "1sa"
                           "1s9"
                           "1s8"
                           "1s7"
                           "1s6"
                           "1s5"
                           "1s4"
                           "1s3"
                           "1s2"
                           "1s1"
                           "1s0"
                           "1rz"
                           "1ry"
                           "1rx"
                           "1rw"
                           "1rv"
                           "1ru"
                           "1rt"
                           "1rs"
                           "1rr"
                           "1rq"
                           "1rp"
                           "1ro"
                           "1rn"
                           "1rm"
                           "1rl"
                           "1rk"
                           "1rj"
                           "1ri"
                           "1rh"
                           "1rg"
                           "1rf"
                           "1re"
                           "1rd"
                           "1rc"
                           "1rb"
                           "1ra"
                           "1r9"
                           "1r8"
                           "1r7"
                           "1r6"
                           "1r5"
                           "1r4"
                           "1r3"
                           "1r2"
                           "1r1"
                           "1r0"
                           "1qz"
                           "1qy"
                           "1qx"
                           "1qw"
                           "1qv"
                           "1qu"
                           "1qt"
                           "1qs"
                           "1qr"
                           "1qq"
                           "1qp"
                           "1qo"
                           "1qn"
                           "1qm"
                           "1ql"
                           "1qk"
                           "1qj"
                           "1qi"
                           "1qh"
                           "1qg"
                           "1qf"
                           "1qe"
                           "1qd"
                           "1qc"
                           "1qb"
                           "1qa"
                           "1q9"
                           "1q8"
                           "1q7"
                           "1q6"
                           "1q5"
                           "1q4"
                           "1q3"
                           "1q2"
                           "1q1"
                           "1q0"
                           "1pz"
                           "1py"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("1og" "1of" "1oe")))
                       (hygiene guile))
                    '(())))
             #f)
           #f)))
     (#{lambda-formals _hoQGWMnyQPAh3k2jhWHTu}#
       (lambda (#{orig-args _hoQGWMnyQPAh3k2jhWL@B}#)
         (letrec*
           ((#{req _hoQGWMnyQPAh3k2jhWL@C}#
              (lambda (#{args _hoQGWMnyQPAh3k2jhWL@G}#
                       #{rreq _hoQGWMnyQPAh3k2jhWL@H}#)
                (let ((#{tmp _hoQGWMnyQPAh3k2jhWL@J}#
                        ($sc-dispatch
                          #{args _hoQGWMnyQPAh3k2jhWL@G}#
                          '())))
                  (if #{tmp _hoQGWMnyQPAh3k2jhWL@J}#
                    (@apply
                      (lambda ()
                        (#{check _hoQGWMnyQPAh3k2jhWL@D}#
                          (reverse #{rreq _hoQGWMnyQPAh3k2jhWL@H}#)
                          #f))
                      #{tmp _hoQGWMnyQPAh3k2jhWL@J}#)
                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWMBE}#
                            ($sc-dispatch
                              #{args _hoQGWMnyQPAh3k2jhWL@G}#
                              '(any . any))))
                      (if (if #{tmp _hoQGWMnyQPAh3k2jhWMBE}#
                            (@apply
                              (lambda (#{a _hoQGWMnyQPAh3k2jhWMBI}#
                                       #{b _hoQGWMnyQPAh3k2jhWMBJ}#)
                                (if (symbol? #{a _hoQGWMnyQPAh3k2jhWMBI}#)
                                  #t
                                  (if (if (vector?
                                            #{a _hoQGWMnyQPAh3k2jhWMBI}#)
                                        (if (= (vector-length
                                                 #{a _hoQGWMnyQPAh3k2jhWMBI}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{a _hoQGWMnyQPAh3k2jhWMBI}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{a _hoQGWMnyQPAh3k2jhWMBI}#
                                        1))
                                    #f)))
                              #{tmp _hoQGWMnyQPAh3k2jhWMBE}#)
                            #f)
                        (@apply
                          (lambda (#{a _hoQGWMnyQPAh3k2jhWMBk}#
                                   #{b _hoQGWMnyQPAh3k2jhWMBl}#)
                            (#{req _hoQGWMnyQPAh3k2jhWL@C}#
                              #{b _hoQGWMnyQPAh3k2jhWMBl}#
                              (cons #{a _hoQGWMnyQPAh3k2jhWMBk}#
                                    #{rreq _hoQGWMnyQPAh3k2jhWL@H}#)))
                          #{tmp _hoQGWMnyQPAh3k2jhWMBE}#)
                        (let ((#{tmp _hoQGWMnyQPAh3k2jhWMBm}#
                                (list #{args _hoQGWMnyQPAh3k2jhWL@G}#)))
                          (if (@apply
                                (lambda (#{r _hoQGWMnyQPAh3k2jhWMBo}#)
                                  (if (symbol? #{r _hoQGWMnyQPAh3k2jhWMBo}#)
                                    #t
                                    (if (if (vector?
                                              #{r _hoQGWMnyQPAh3k2jhWMBo}#)
                                          (if (= (vector-length
                                                   #{r _hoQGWMnyQPAh3k2jhWMBo}#)
                                                 4)
                                            (eq? (vector-ref
                                                   #{r _hoQGWMnyQPAh3k2jhWMBo}#
                                                   0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol?
                                        (vector-ref
                                          #{r _hoQGWMnyQPAh3k2jhWMBo}#
                                          1))
                                      #f)))
                                #{tmp _hoQGWMnyQPAh3k2jhWMBm}#)
                            (@apply
                              (lambda (#{r _hoQGWMnyQPAh3k2jhWMCG}#)
                                (#{check _hoQGWMnyQPAh3k2jhWL@D}#
                                  (reverse #{rreq _hoQGWMnyQPAh3k2jhWL@H}#)
                                  #{r _hoQGWMnyQPAh3k2jhWMCG}#))
                              #{tmp _hoQGWMnyQPAh3k2jhWMBm}#)
                            (syntax-violation
                              'lambda
                              "invalid argument list"
                              #{orig-args _hoQGWMnyQPAh3k2jhWL@B}#
                              #{args _hoQGWMnyQPAh3k2jhWL@G}#)))))))))
            (#{check _hoQGWMnyQPAh3k2jhWL@D}#
              (lambda (#{req _hoQGWMnyQPAh3k2jhWMEJ}#
                       #{rest _hoQGWMnyQPAh3k2jhWMEK}#)
                (if (#{distinct-bound-ids? _hoQGWMnyQPAh3k2jhWHTc}#
                      (if #{rest _hoQGWMnyQPAh3k2jhWMEK}#
                        (cons #{rest _hoQGWMnyQPAh3k2jhWMEK}#
                              #{req _hoQGWMnyQPAh3k2jhWMEJ}#)
                        #{req _hoQGWMnyQPAh3k2jhWMEJ}#))
                  (values
                    #{req _hoQGWMnyQPAh3k2jhWMEJ}#
                    #f
                    #{rest _hoQGWMnyQPAh3k2jhWMEK}#
                    #f)
                  (syntax-violation
                    'lambda
                    "duplicate identifier in argument list"
                    #{orig-args _hoQGWMnyQPAh3k2jhWL@B}#)))))
           (#{req _hoQGWMnyQPAh3k2jhWL@C}#
             #{orig-args _hoQGWMnyQPAh3k2jhWL@B}#
             '()))))
     (#{expand-simple-lambda _hoQGWMnyQPAh3k2jhWHTv}#
       (lambda (#{e _hoQGWMnyQPAh3k2jhWMF$}#
                #{r _hoQGWMnyQPAh3k2jhWMF@}#
                #{w _hoQGWMnyQPAh3k2jhWMGA}#
                #{s _hoQGWMnyQPAh3k2jhWMGB}#
                #{mod _hoQGWMnyQPAh3k2jhWMGC}#
                #{req _hoQGWMnyQPAh3k2jhWMGD}#
                #{rest _hoQGWMnyQPAh3k2jhWMGE}#
                #{meta _hoQGWMnyQPAh3k2jhWMGF}#
                #{body _hoQGWMnyQPAh3k2jhWMGG}#)
         (let ((#{ids _hoQGWMnyQPAh3k2jhWMGH}#
                 (if #{rest _hoQGWMnyQPAh3k2jhWMGE}#
                   (append
                     #{req _hoQGWMnyQPAh3k2jhWMGD}#
                     (list #{rest _hoQGWMnyQPAh3k2jhWMGE}#))
                   #{req _hoQGWMnyQPAh3k2jhWMGD}#)))
           (let ((#{vars _hoQGWMnyQPAh3k2jhWMGI}#
                   (map #{gen-var _hoQGWMnyQPAh3k2jhWHTz}#
                        #{ids _hoQGWMnyQPAh3k2jhWMGH}#)))
             (let ((#{labels _hoQGWMnyQPAh3k2jhWMGJ}#
                     (#{gen-labels _hoQGWMnyQPAh3k2jhWHTE}#
                       #{ids _hoQGWMnyQPAh3k2jhWMGH}#)))
               (#{build-simple-lambda _hoQGWMnyQPAh3k2jhWHSp}#
                 #{s _hoQGWMnyQPAh3k2jhWMGB}#
                 (map syntax->datum
                      #{req _hoQGWMnyQPAh3k2jhWMGD}#)
                 (if #{rest _hoQGWMnyQPAh3k2jhWMGE}#
                   (syntax->datum #{rest _hoQGWMnyQPAh3k2jhWMGE}#)
                   #f)
                 #{vars _hoQGWMnyQPAh3k2jhWMGI}#
                 #{meta _hoQGWMnyQPAh3k2jhWMGF}#
                 (#{expand-body _hoQGWMnyQPAh3k2jhWHTp}#
                   #{body _hoQGWMnyQPAh3k2jhWMGG}#
                   (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                     (begin
                       (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWMF$}#)
                             #{s _hoQGWMnyQPAh3k2jhWMGB}#
                             #f)
                         (set-source-properties!
                           #{e _hoQGWMnyQPAh3k2jhWMF$}#
                           #{s _hoQGWMnyQPAh3k2jhWMGB}#))
                       #{e _hoQGWMnyQPAh3k2jhWMF$}#)
                     #{w _hoQGWMnyQPAh3k2jhWMGA}#
                     #{mod _hoQGWMnyQPAh3k2jhWMGC}#)
                   (#{extend-var-env _hoQGWMnyQPAh3k2jhWHS8}#
                     #{labels _hoQGWMnyQPAh3k2jhWMGJ}#
                     #{vars _hoQGWMnyQPAh3k2jhWMGI}#
                     #{r _hoQGWMnyQPAh3k2jhWMF@}#)
                   (#{make-binding-wrap _hoQGWMnyQPAh3k2jhWHTP}#
                     #{ids _hoQGWMnyQPAh3k2jhWMGH}#
                     #{labels _hoQGWMnyQPAh3k2jhWMGJ}#
                     #{w _hoQGWMnyQPAh3k2jhWMGA}#)
                   #{mod _hoQGWMnyQPAh3k2jhWMGC}#)))))))
     (#{lambda*-formals _hoQGWMnyQPAh3k2jhWHTw}#
       (lambda (#{orig-args _hoQGWMnyQPAh3k2jhWMKZ}#)
         (letrec*
           ((#{req _hoQGWMnyQPAh3k2jhWMKa}#
              (lambda (#{args _hoQGWMnyQPAh3k2jhWMKh}#
                       #{rreq _hoQGWMnyQPAh3k2jhWMKi}#)
                (let ((#{tmp _hoQGWMnyQPAh3k2jhWMKk}#
                        ($sc-dispatch
                          #{args _hoQGWMnyQPAh3k2jhWMKh}#
                          '())))
                  (if #{tmp _hoQGWMnyQPAh3k2jhWMKk}#
                    (@apply
                      (lambda ()
                        (#{check _hoQGWMnyQPAh3k2jhWMKe}#
                          (reverse #{rreq _hoQGWMnyQPAh3k2jhWMKi}#)
                          '()
                          #f
                          '()))
                      #{tmp _hoQGWMnyQPAh3k2jhWMKk}#)
                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWMKq}#
                            ($sc-dispatch
                              #{args _hoQGWMnyQPAh3k2jhWMKh}#
                              '(any . any))))
                      (if (if #{tmp _hoQGWMnyQPAh3k2jhWMKq}#
                            (@apply
                              (lambda (#{a _hoQGWMnyQPAh3k2jhWMKu}#
                                       #{b _hoQGWMnyQPAh3k2jhWMKv}#)
                                (if (symbol? #{a _hoQGWMnyQPAh3k2jhWMKu}#)
                                  #t
                                  (if (if (vector?
                                            #{a _hoQGWMnyQPAh3k2jhWMKu}#)
                                        (if (= (vector-length
                                                 #{a _hoQGWMnyQPAh3k2jhWMKu}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{a _hoQGWMnyQPAh3k2jhWMKu}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{a _hoQGWMnyQPAh3k2jhWMKu}#
                                        1))
                                    #f)))
                              #{tmp _hoQGWMnyQPAh3k2jhWMKq}#)
                            #f)
                        (@apply
                          (lambda (#{a _hoQGWMnyQPAh3k2jhWMLK}#
                                   #{b _hoQGWMnyQPAh3k2jhWMLL}#)
                            (#{req _hoQGWMnyQPAh3k2jhWMKa}#
                              #{b _hoQGWMnyQPAh3k2jhWMLL}#
                              (cons #{a _hoQGWMnyQPAh3k2jhWMLK}#
                                    #{rreq _hoQGWMnyQPAh3k2jhWMKi}#)))
                          #{tmp _hoQGWMnyQPAh3k2jhWMKq}#)
                        (let ((#{tmp _hoQGWMnyQPAh3k2jhWMLM}#
                                ($sc-dispatch
                                  #{args _hoQGWMnyQPAh3k2jhWMKh}#
                                  '(any . any))))
                          (if (if #{tmp _hoQGWMnyQPAh3k2jhWMLM}#
                                (@apply
                                  (lambda (#{a _hoQGWMnyQPAh3k2jhWMLQ}#
                                           #{b _hoQGWMnyQPAh3k2jhWMLR}#)
                                    (eq? (syntax->datum
                                           #{a _hoQGWMnyQPAh3k2jhWMLQ}#)
                                         #:optional))
                                  #{tmp _hoQGWMnyQPAh3k2jhWMLM}#)
                                #f)
                            (@apply
                              (lambda (#{a _hoQGWMnyQPAh3k2jhWMLS}#
                                       #{b _hoQGWMnyQPAh3k2jhWMLT}#)
                                (#{opt _hoQGWMnyQPAh3k2jhWMKb}#
                                  #{b _hoQGWMnyQPAh3k2jhWMLT}#
                                  (reverse #{rreq _hoQGWMnyQPAh3k2jhWMKi}#)
                                  '()))
                              #{tmp _hoQGWMnyQPAh3k2jhWMLM}#)
                            (let ((#{tmp _hoQGWMnyQPAh3k2jhWMLW}#
                                    ($sc-dispatch
                                      #{args _hoQGWMnyQPAh3k2jhWMKh}#
                                      '(any . any))))
                              (if (if #{tmp _hoQGWMnyQPAh3k2jhWMLW}#
                                    (@apply
                                      (lambda (#{a _hoQGWMnyQPAh3k2jhWMLa}#
                                               #{b _hoQGWMnyQPAh3k2jhWMLb}#)
                                        (eq? (syntax->datum
                                               #{a _hoQGWMnyQPAh3k2jhWMLa}#)
                                             #:key))
                                      #{tmp _hoQGWMnyQPAh3k2jhWMLW}#)
                                    #f)
                                (@apply
                                  (lambda (#{a _hoQGWMnyQPAh3k2jhWMLc}#
                                           #{b _hoQGWMnyQPAh3k2jhWMLd}#)
                                    (#{key _hoQGWMnyQPAh3k2jhWMKc}#
                                      #{b _hoQGWMnyQPAh3k2jhWMLd}#
                                      (reverse #{rreq _hoQGWMnyQPAh3k2jhWMKi}#)
                                      '()
                                      '()))
                                  #{tmp _hoQGWMnyQPAh3k2jhWMLW}#)
                                (let ((#{tmp _hoQGWMnyQPAh3k2jhWMLg}#
                                        ($sc-dispatch
                                          #{args _hoQGWMnyQPAh3k2jhWMKh}#
                                          '(any any))))
                                  (if (if #{tmp _hoQGWMnyQPAh3k2jhWMLg}#
                                        (@apply
                                          (lambda (#{a _hoQGWMnyQPAh3k2jhWMLk}#
                                                   #{b _hoQGWMnyQPAh3k2jhWMLl}#)
                                            (eq? (syntax->datum
                                                   #{a _hoQGWMnyQPAh3k2jhWMLk}#)
                                                 #:rest))
                                          #{tmp _hoQGWMnyQPAh3k2jhWMLg}#)
                                        #f)
                                    (@apply
                                      (lambda (#{a _hoQGWMnyQPAh3k2jhWMLm}#
                                               #{b _hoQGWMnyQPAh3k2jhWMLn}#)
                                        (#{rest _hoQGWMnyQPAh3k2jhWMKd}#
                                          #{b _hoQGWMnyQPAh3k2jhWMLn}#
                                          (reverse
                                            #{rreq _hoQGWMnyQPAh3k2jhWMKi}#)
                                          '()
                                          '()))
                                      #{tmp _hoQGWMnyQPAh3k2jhWMLg}#)
                                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWMLq}#
                                            (list #{args _hoQGWMnyQPAh3k2jhWMKh}#)))
                                      (if (@apply
                                            (lambda (#{r _hoQGWMnyQPAh3k2jhWMLs}#)
                                              (if (symbol?
                                                    #{r _hoQGWMnyQPAh3k2jhWMLs}#)
                                                #t
                                                (if (if (vector?
                                                          #{r _hoQGWMnyQPAh3k2jhWMLs}#)
                                                      (if (= (vector-length
                                                               #{r _hoQGWMnyQPAh3k2jhWMLs}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{r _hoQGWMnyQPAh3k2jhWMLs}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref
                                                      #{r _hoQGWMnyQPAh3k2jhWMLs}#
                                                      1))
                                                  #f)))
                                            #{tmp _hoQGWMnyQPAh3k2jhWMLq}#)
                                        (@apply
                                          (lambda (#{r _hoQGWMnyQPAh3k2jhWMMK}#)
                                            (#{rest _hoQGWMnyQPAh3k2jhWMKd}#
                                              #{r _hoQGWMnyQPAh3k2jhWMMK}#
                                              (reverse
                                                #{rreq _hoQGWMnyQPAh3k2jhWMKi}#)
                                              '()
                                              '()))
                                          #{tmp _hoQGWMnyQPAh3k2jhWMLq}#)
                                        (syntax-violation
                                          'lambda*
                                          "invalid argument list"
                                          #{orig-args _hoQGWMnyQPAh3k2jhWMKZ}#
                                          #{args _hoQGWMnyQPAh3k2jhWMKh}#)))))))))))))))
            (#{opt _hoQGWMnyQPAh3k2jhWMKb}#
              (lambda (#{args _hoQGWMnyQPAh3k2jhWMMd}#
                       #{req _hoQGWMnyQPAh3k2jhWMMe}#
                       #{ropt _hoQGWMnyQPAh3k2jhWMMf}#)
                (let ((#{tmp _hoQGWMnyQPAh3k2jhWMMh}#
                        ($sc-dispatch
                          #{args _hoQGWMnyQPAh3k2jhWMMd}#
                          '())))
                  (if #{tmp _hoQGWMnyQPAh3k2jhWMMh}#
                    (@apply
                      (lambda ()
                        (#{check _hoQGWMnyQPAh3k2jhWMKe}#
                          #{req _hoQGWMnyQPAh3k2jhWMMe}#
                          (reverse #{ropt _hoQGWMnyQPAh3k2jhWMMf}#)
                          #f
                          '()))
                      #{tmp _hoQGWMnyQPAh3k2jhWMMh}#)
                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWMMn}#
                            ($sc-dispatch
                              #{args _hoQGWMnyQPAh3k2jhWMMd}#
                              '(any . any))))
                      (if (if #{tmp _hoQGWMnyQPAh3k2jhWMMn}#
                            (@apply
                              (lambda (#{a _hoQGWMnyQPAh3k2jhWMMr}#
                                       #{b _hoQGWMnyQPAh3k2jhWMMs}#)
                                (if (symbol? #{a _hoQGWMnyQPAh3k2jhWMMr}#)
                                  #t
                                  (if (if (vector?
                                            #{a _hoQGWMnyQPAh3k2jhWMMr}#)
                                        (if (= (vector-length
                                                 #{a _hoQGWMnyQPAh3k2jhWMMr}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{a _hoQGWMnyQPAh3k2jhWMMr}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{a _hoQGWMnyQPAh3k2jhWMMr}#
                                        1))
                                    #f)))
                              #{tmp _hoQGWMnyQPAh3k2jhWMMn}#)
                            #f)
                        (@apply
                          (lambda (#{a _hoQGWMnyQPAh3k2jhWMNH}#
                                   #{b _hoQGWMnyQPAh3k2jhWMNI}#)
                            (#{opt _hoQGWMnyQPAh3k2jhWMKb}#
                              #{b _hoQGWMnyQPAh3k2jhWMNI}#
                              #{req _hoQGWMnyQPAh3k2jhWMMe}#
                              (cons (cons #{a _hoQGWMnyQPAh3k2jhWMNH}#
                                          '(#(syntax-object
                                              #f
                                              ((top)
                                               #(ribcage
                                                 #(a b)
                                                 #((top) (top))
                                                 #("2f1" "2f2"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(args req ropt)
                                                 #((top) (top) (top))
                                                 #("2ew" "2ex" "2ey"))
                                               #(ribcage
                                                 (check rest key opt req)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("2ea"
                                                  "2e9"
                                                  "2e8"
                                                  "2e7"
                                                  "2e6"))
                                               #(ribcage
                                                 #(orig-args)
                                                 #((top))
                                                 #("2e5"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-application
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   parse-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   with-transformer-environment
                                                   transformer-environment
                                                   resolve-identifier
                                                   locally-bound-identifiers
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-application
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-sequence
                                                   make-application
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("1tt"
                                                  "1ts"
                                                  "1tr"
                                                  "1tq"
                                                  "1tp"
                                                  "1to"
                                                  "1tn"
                                                  "1tm"
                                                  "1tl"
                                                  "1tk"
                                                  "1tj"
                                                  "1ti"
                                                  "1th"
                                                  "1tg"
                                                  "1tf"
                                                  "1te"
                                                  "1td"
                                                  "1tc"
                                                  "1tb"
                                                  "1ta"
                                                  "1t9"
                                                  "1t8"
                                                  "1t7"
                                                  "1t6"
                                                  "1t5"
                                                  "1t4"
                                                  "1t3"
                                                  "1t2"
                                                  "1t1"
                                                  "1t0"
                                                  "1sz"
                                                  "1sy"
                                                  "1sx"
                                                  "1sw"
                                                  "1sv"
                                                  "1su"
                                                  "1st"
                                                  "1ss"
                                                  "1sr"
                                                  "1sq"
                                                  "1sp"
                                                  "1so"
                                                  "1sn"
                                                  "1sm"
                                                  "1sl"
                                                  "1sk"
                                                  "1sj"
                                                  "1si"
                                                  "1sh"
                                                  "1sg"
                                                  "1sf"
                                                  "1se"
                                                  "1sd"
                                                  "1sc"
                                                  "1sb"
                                                  "1sa"
                                                  "1s9"
                                                  "1s8"
                                                  "1s7"
                                                  "1s6"
                                                  "1s5"
                                                  "1s4"
                                                  "1s3"
                                                  "1s2"
                                                  "1s1"
                                                  "1s0"
                                                  "1rz"
                                                  "1ry"
                                                  "1rx"
                                                  "1rw"
                                                  "1rv"
                                                  "1ru"
                                                  "1rt"
                                                  "1rs"
                                                  "1rr"
                                                  "1rq"
                                                  "1rp"
                                                  "1ro"
                                                  "1rn"
                                                  "1rm"
                                                  "1rl"
                                                  "1rk"
                                                  "1rj"
                                                  "1ri"
                                                  "1rh"
                                                  "1rg"
                                                  "1rf"
                                                  "1re"
                                                  "1rd"
                                                  "1rc"
                                                  "1rb"
                                                  "1ra"
                                                  "1r9"
                                                  "1r8"
                                                  "1r7"
                                                  "1r6"
                                                  "1r5"
                                                  "1r4"
                                                  "1r3"
                                                  "1r2"
                                                  "1r1"
                                                  "1r0"
                                                  "1qz"
                                                  "1qy"
                                                  "1qx"
                                                  "1qw"
                                                  "1qv"
                                                  "1qu"
                                                  "1qt"
                                                  "1qs"
                                                  "1qr"
                                                  "1qq"
                                                  "1qp"
                                                  "1qo"
                                                  "1qn"
                                                  "1qm"
                                                  "1ql"
                                                  "1qk"
                                                  "1qj"
                                                  "1qi"
                                                  "1qh"
                                                  "1qg"
                                                  "1qf"
                                                  "1qe"
                                                  "1qd"
                                                  "1qc"
                                                  "1qb"
                                                  "1qa"
                                                  "1q9"
                                                  "1q8"
                                                  "1q7"
                                                  "1q6"
                                                  "1q5"
                                                  "1q4"
                                                  "1q3"
                                                  "1q2"
                                                  "1q1"
                                                  "1q0"
                                                  "1pz"
                                                  "1py"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("1og" "1of" "1oe")))
                                              (hygiene guile))))
                                    #{ropt _hoQGWMnyQPAh3k2jhWMMf}#)))
                          #{tmp _hoQGWMnyQPAh3k2jhWMMn}#)
                        (let ((#{tmp _hoQGWMnyQPAh3k2jhWMNJ}#
                                ($sc-dispatch
                                  #{args _hoQGWMnyQPAh3k2jhWMMd}#
                                  '((any any) . any))))
                          (if (if #{tmp _hoQGWMnyQPAh3k2jhWMNJ}#
                                (@apply
                                  (lambda (#{a _hoQGWMnyQPAh3k2jhWMNN}#
                                           #{init _hoQGWMnyQPAh3k2jhWMNO}#
                                           #{b _hoQGWMnyQPAh3k2jhWMNP}#)
                                    (if (symbol? #{a _hoQGWMnyQPAh3k2jhWMNN}#)
                                      #t
                                      (if (if (vector?
                                                #{a _hoQGWMnyQPAh3k2jhWMNN}#)
                                            (if (= (vector-length
                                                     #{a _hoQGWMnyQPAh3k2jhWMNN}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{a _hoQGWMnyQPAh3k2jhWMNN}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol?
                                          (vector-ref
                                            #{a _hoQGWMnyQPAh3k2jhWMNN}#
                                            1))
                                        #f)))
                                  #{tmp _hoQGWMnyQPAh3k2jhWMNJ}#)
                                #f)
                            (@apply
                              (lambda (#{a _hoQGWMnyQPAh3k2jhWMNq}#
                                       #{init _hoQGWMnyQPAh3k2jhWMNr}#
                                       #{b _hoQGWMnyQPAh3k2jhWMNs}#)
                                (#{opt _hoQGWMnyQPAh3k2jhWMKb}#
                                  #{b _hoQGWMnyQPAh3k2jhWMNs}#
                                  #{req _hoQGWMnyQPAh3k2jhWMMe}#
                                  (cons (list #{a _hoQGWMnyQPAh3k2jhWMNq}#
                                              #{init _hoQGWMnyQPAh3k2jhWMNr}#)
                                        #{ropt _hoQGWMnyQPAh3k2jhWMMf}#)))
                              #{tmp _hoQGWMnyQPAh3k2jhWMNJ}#)
                            (let ((#{tmp _hoQGWMnyQPAh3k2jhWMNt}#
                                    ($sc-dispatch
                                      #{args _hoQGWMnyQPAh3k2jhWMMd}#
                                      '(any . any))))
                              (if (if #{tmp _hoQGWMnyQPAh3k2jhWMNt}#
                                    (@apply
                                      (lambda (#{a _hoQGWMnyQPAh3k2jhWMNx}#
                                               #{b _hoQGWMnyQPAh3k2jhWMNy}#)
                                        (eq? (syntax->datum
                                               #{a _hoQGWMnyQPAh3k2jhWMNx}#)
                                             #:key))
                                      #{tmp _hoQGWMnyQPAh3k2jhWMNt}#)
                                    #f)
                                (@apply
                                  (lambda (#{a _hoQGWMnyQPAh3k2jhWMNz}#
                                           #{b _hoQGWMnyQPAh3k2jhWMN0}#)
                                    (#{key _hoQGWMnyQPAh3k2jhWMKc}#
                                      #{b _hoQGWMnyQPAh3k2jhWMN0}#
                                      #{req _hoQGWMnyQPAh3k2jhWMMe}#
                                      (reverse #{ropt _hoQGWMnyQPAh3k2jhWMMf}#)
                                      '()))
                                  #{tmp _hoQGWMnyQPAh3k2jhWMNt}#)
                                (let ((#{tmp _hoQGWMnyQPAh3k2jhWMN3}#
                                        ($sc-dispatch
                                          #{args _hoQGWMnyQPAh3k2jhWMMd}#
                                          '(any any))))
                                  (if (if #{tmp _hoQGWMnyQPAh3k2jhWMN3}#
                                        (@apply
                                          (lambda (#{a _hoQGWMnyQPAh3k2jhWMN7}#
                                                   #{b _hoQGWMnyQPAh3k2jhWMN8}#)
                                            (eq? (syntax->datum
                                                   #{a _hoQGWMnyQPAh3k2jhWMN7}#)
                                                 #:rest))
                                          #{tmp _hoQGWMnyQPAh3k2jhWMN3}#)
                                        #f)
                                    (@apply
                                      (lambda (#{a _hoQGWMnyQPAh3k2jhWMN9}#
                                               #{b _hoQGWMnyQPAh3k2jhWMN$}#)
                                        (#{rest _hoQGWMnyQPAh3k2jhWMKd}#
                                          #{b _hoQGWMnyQPAh3k2jhWMN$}#
                                          #{req _hoQGWMnyQPAh3k2jhWMMe}#
                                          (reverse
                                            #{ropt _hoQGWMnyQPAh3k2jhWMMf}#)
                                          '()))
                                      #{tmp _hoQGWMnyQPAh3k2jhWMN3}#)
                                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWMOB}#
                                            (list #{args _hoQGWMnyQPAh3k2jhWMMd}#)))
                                      (if (@apply
                                            (lambda (#{r _hoQGWMnyQPAh3k2jhWMOD}#)
                                              (if (symbol?
                                                    #{r _hoQGWMnyQPAh3k2jhWMOD}#)
                                                #t
                                                (if (if (vector?
                                                          #{r _hoQGWMnyQPAh3k2jhWMOD}#)
                                                      (if (= (vector-length
                                                               #{r _hoQGWMnyQPAh3k2jhWMOD}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{r _hoQGWMnyQPAh3k2jhWMOD}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref
                                                      #{r _hoQGWMnyQPAh3k2jhWMOD}#
                                                      1))
                                                  #f)))
                                            #{tmp _hoQGWMnyQPAh3k2jhWMOB}#)
                                        (@apply
                                          (lambda (#{r _hoQGWMnyQPAh3k2jhWMOh}#)
                                            (#{rest _hoQGWMnyQPAh3k2jhWMKd}#
                                              #{r _hoQGWMnyQPAh3k2jhWMOh}#
                                              #{req _hoQGWMnyQPAh3k2jhWMMe}#
                                              (reverse
                                                #{ropt _hoQGWMnyQPAh3k2jhWMMf}#)
                                              '()))
                                          #{tmp _hoQGWMnyQPAh3k2jhWMOB}#)
                                        (syntax-violation
                                          'lambda*
                                          "invalid optional argument list"
                                          #{orig-args _hoQGWMnyQPAh3k2jhWMKZ}#
                                          #{args _hoQGWMnyQPAh3k2jhWMMd}#)))))))))))))))
            (#{key _hoQGWMnyQPAh3k2jhWMKc}#
              (lambda (#{args _hoQGWMnyQPAh3k2jhWMO0}#
                       #{req _hoQGWMnyQPAh3k2jhWMO1}#
                       #{opt _hoQGWMnyQPAh3k2jhWMO2}#
                       #{rkey _hoQGWMnyQPAh3k2jhWMO3}#)
                (let ((#{tmp _hoQGWMnyQPAh3k2jhWMO5}#
                        ($sc-dispatch
                          #{args _hoQGWMnyQPAh3k2jhWMO0}#
                          '())))
                  (if #{tmp _hoQGWMnyQPAh3k2jhWMO5}#
                    (@apply
                      (lambda ()
                        (#{check _hoQGWMnyQPAh3k2jhWMKe}#
                          #{req _hoQGWMnyQPAh3k2jhWMO1}#
                          #{opt _hoQGWMnyQPAh3k2jhWMO2}#
                          #f
                          (cons #f
                                (reverse #{rkey _hoQGWMnyQPAh3k2jhWMO3}#))))
                      #{tmp _hoQGWMnyQPAh3k2jhWMO5}#)
                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWMO@}#
                            ($sc-dispatch
                              #{args _hoQGWMnyQPAh3k2jhWMO0}#
                              '(any . any))))
                      (if (if #{tmp _hoQGWMnyQPAh3k2jhWMO@}#
                            (@apply
                              (lambda (#{a _hoQGWMnyQPAh3k2jhWMPD}#
                                       #{b _hoQGWMnyQPAh3k2jhWMPE}#)
                                (if (symbol? #{a _hoQGWMnyQPAh3k2jhWMPD}#)
                                  #t
                                  (if (if (vector?
                                            #{a _hoQGWMnyQPAh3k2jhWMPD}#)
                                        (if (= (vector-length
                                                 #{a _hoQGWMnyQPAh3k2jhWMPD}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{a _hoQGWMnyQPAh3k2jhWMPD}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{a _hoQGWMnyQPAh3k2jhWMPD}#
                                        1))
                                    #f)))
                              #{tmp _hoQGWMnyQPAh3k2jhWMO@}#)
                            #f)
                        (@apply
                          (lambda (#{a _hoQGWMnyQPAh3k2jhWMPf}#
                                   #{b _hoQGWMnyQPAh3k2jhWMPg}#)
                            (let ((#{tmp _hoQGWMnyQPAh3k2jhWMPh}#
                                    (symbol->keyword
                                      (syntax->datum
                                        #{a _hoQGWMnyQPAh3k2jhWMPf}#))))
                              (#{key _hoQGWMnyQPAh3k2jhWMKc}#
                                #{b _hoQGWMnyQPAh3k2jhWMPg}#
                                #{req _hoQGWMnyQPAh3k2jhWMO1}#
                                #{opt _hoQGWMnyQPAh3k2jhWMO2}#
                                (cons (cons #{tmp _hoQGWMnyQPAh3k2jhWMPh}#
                                            (cons #{a _hoQGWMnyQPAh3k2jhWMPf}#
                                                  '(#(syntax-object
                                                      #f
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(k)
                                                         #((top))
                                                         #("2fs"))
                                                       #(ribcage
                                                         #(a b)
                                                         #((top) (top))
                                                         #("2fq" "2fr"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(args req opt rkey)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("2fk"
                                                           "2fl"
                                                           "2fm"
                                                           "2fn"))
                                                       #(ribcage
                                                         (check rest
                                                                key
                                                                opt
                                                                req)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("2ea"
                                                          "2e9"
                                                          "2e8"
                                                          "2e7"
                                                          "2e6"))
                                                       #(ribcage
                                                         #(orig-args)
                                                         #((top))
                                                         #("2e5"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("1tt"
                                                          "1ts"
                                                          "1tr"
                                                          "1tq"
                                                          "1tp"
                                                          "1to"
                                                          "1tn"
                                                          "1tm"
                                                          "1tl"
                                                          "1tk"
                                                          "1tj"
                                                          "1ti"
                                                          "1th"
                                                          "1tg"
                                                          "1tf"
                                                          "1te"
                                                          "1td"
                                                          "1tc"
                                                          "1tb"
                                                          "1ta"
                                                          "1t9"
                                                          "1t8"
                                                          "1t7"
                                                          "1t6"
                                                          "1t5"
                                                          "1t4"
                                                          "1t3"
                                                          "1t2"
                                                          "1t1"
                                                          "1t0"
                                                          "1sz"
                                                          "1sy"
                                                          "1sx"
                                                          "1sw"
                                                          "1sv"
                                                          "1su"
                                                          "1st"
                                                          "1ss"
                                                          "1sr"
                                                          "1sq"
                                                          "1sp"
                                                          "1so"
                                                          "1sn"
                                                          "1sm"
                                                          "1sl"
                                                          "1sk"
                                                          "1sj"
                                                          "1si"
                                                          "1sh"
                                                          "1sg"
                                                          "1sf"
                                                          "1se"
                                                          "1sd"
                                                          "1sc"
                                                          "1sb"
                                                          "1sa"
                                                          "1s9"
                                                          "1s8"
                                                          "1s7"
                                                          "1s6"
                                                          "1s5"
                                                          "1s4"
                                                          "1s3"
                                                          "1s2"
                                                          "1s1"
                                                          "1s0"
                                                          "1rz"
                                                          "1ry"
                                                          "1rx"
                                                          "1rw"
                                                          "1rv"
                                                          "1ru"
                                                          "1rt"
                                                          "1rs"
                                                          "1rr"
                                                          "1rq"
                                                          "1rp"
                                                          "1ro"
                                                          "1rn"
                                                          "1rm"
                                                          "1rl"
                                                          "1rk"
                                                          "1rj"
                                                          "1ri"
                                                          "1rh"
                                                          "1rg"
                                                          "1rf"
                                                          "1re"
                                                          "1rd"
                                                          "1rc"
                                                          "1rb"
                                                          "1ra"
                                                          "1r9"
                                                          "1r8"
                                                          "1r7"
                                                          "1r6"
                                                          "1r5"
                                                          "1r4"
                                                          "1r3"
                                                          "1r2"
                                                          "1r1"
                                                          "1r0"
                                                          "1qz"
                                                          "1qy"
                                                          "1qx"
                                                          "1qw"
                                                          "1qv"
                                                          "1qu"
                                                          "1qt"
                                                          "1qs"
                                                          "1qr"
                                                          "1qq"
                                                          "1qp"
                                                          "1qo"
                                                          "1qn"
                                                          "1qm"
                                                          "1ql"
                                                          "1qk"
                                                          "1qj"
                                                          "1qi"
                                                          "1qh"
                                                          "1qg"
                                                          "1qf"
                                                          "1qe"
                                                          "1qd"
                                                          "1qc"
                                                          "1qb"
                                                          "1qa"
                                                          "1q9"
                                                          "1q8"
                                                          "1q7"
                                                          "1q6"
                                                          "1q5"
                                                          "1q4"
                                                          "1q3"
                                                          "1q2"
                                                          "1q1"
                                                          "1q0"
                                                          "1pz"
                                                          "1py"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("1og" "1of" "1oe")))
                                                      (hygiene guile)))))
                                      #{rkey _hoQGWMnyQPAh3k2jhWMO3}#))))
                          #{tmp _hoQGWMnyQPAh3k2jhWMO@}#)
                        (let ((#{tmp _hoQGWMnyQPAh3k2jhWMPk}#
                                ($sc-dispatch
                                  #{args _hoQGWMnyQPAh3k2jhWMO0}#
                                  '((any any) . any))))
                          (if (if #{tmp _hoQGWMnyQPAh3k2jhWMPk}#
                                (@apply
                                  (lambda (#{a _hoQGWMnyQPAh3k2jhWMPo}#
                                           #{init _hoQGWMnyQPAh3k2jhWMPp}#
                                           #{b _hoQGWMnyQPAh3k2jhWMPq}#)
                                    (if (symbol? #{a _hoQGWMnyQPAh3k2jhWMPo}#)
                                      #t
                                      (if (if (vector?
                                                #{a _hoQGWMnyQPAh3k2jhWMPo}#)
                                            (if (= (vector-length
                                                     #{a _hoQGWMnyQPAh3k2jhWMPo}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{a _hoQGWMnyQPAh3k2jhWMPo}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol?
                                          (vector-ref
                                            #{a _hoQGWMnyQPAh3k2jhWMPo}#
                                            1))
                                        #f)))
                                  #{tmp _hoQGWMnyQPAh3k2jhWMPk}#)
                                #f)
                            (@apply
                              (lambda (#{a _hoQGWMnyQPAh3k2jhWMQF}#
                                       #{init _hoQGWMnyQPAh3k2jhWMQG}#
                                       #{b _hoQGWMnyQPAh3k2jhWMQH}#)
                                (let ((#{tmp _hoQGWMnyQPAh3k2jhWMQI}#
                                        (symbol->keyword
                                          (syntax->datum
                                            #{a _hoQGWMnyQPAh3k2jhWMQF}#))))
                                  (#{key _hoQGWMnyQPAh3k2jhWMKc}#
                                    #{b _hoQGWMnyQPAh3k2jhWMQH}#
                                    #{req _hoQGWMnyQPAh3k2jhWMO1}#
                                    #{opt _hoQGWMnyQPAh3k2jhWMO2}#
                                    (cons (list #{tmp _hoQGWMnyQPAh3k2jhWMQI}#
                                                #{a _hoQGWMnyQPAh3k2jhWMQF}#
                                                #{init _hoQGWMnyQPAh3k2jhWMQG}#)
                                          #{rkey _hoQGWMnyQPAh3k2jhWMO3}#))))
                              #{tmp _hoQGWMnyQPAh3k2jhWMPk}#)
                            (let ((#{tmp _hoQGWMnyQPAh3k2jhWMQL}#
                                    ($sc-dispatch
                                      #{args _hoQGWMnyQPAh3k2jhWMO0}#
                                      '((any any any) . any))))
                              (if (if #{tmp _hoQGWMnyQPAh3k2jhWMQL}#
                                    (@apply
                                      (lambda (#{a _hoQGWMnyQPAh3k2jhWMQP}#
                                               #{init _hoQGWMnyQPAh3k2jhWMQQ}#
                                               #{k _hoQGWMnyQPAh3k2jhWMQR}#
                                               #{b _hoQGWMnyQPAh3k2jhWMQS}#)
                                        (if (if (symbol?
                                                  #{a _hoQGWMnyQPAh3k2jhWMQP}#)
                                              #t
                                              (if (if (vector?
                                                        #{a _hoQGWMnyQPAh3k2jhWMQP}#)
                                                    (if (= (vector-length
                                                             #{a _hoQGWMnyQPAh3k2jhWMQP}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{a _hoQGWMnyQPAh3k2jhWMQP}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref
                                                    #{a _hoQGWMnyQPAh3k2jhWMQP}#
                                                    1))
                                                #f))
                                          (keyword?
                                            (syntax->datum
                                              #{k _hoQGWMnyQPAh3k2jhWMQR}#))
                                          #f))
                                      #{tmp _hoQGWMnyQPAh3k2jhWMQL}#)
                                    #f)
                                (@apply
                                  (lambda (#{a _hoQGWMnyQPAh3k2jhWMQt}#
                                           #{init _hoQGWMnyQPAh3k2jhWMQu}#
                                           #{k _hoQGWMnyQPAh3k2jhWMQv}#
                                           #{b _hoQGWMnyQPAh3k2jhWMQw}#)
                                    (#{key _hoQGWMnyQPAh3k2jhWMKc}#
                                      #{b _hoQGWMnyQPAh3k2jhWMQw}#
                                      #{req _hoQGWMnyQPAh3k2jhWMO1}#
                                      #{opt _hoQGWMnyQPAh3k2jhWMO2}#
                                      (cons (list #{k _hoQGWMnyQPAh3k2jhWMQv}#
                                                  #{a _hoQGWMnyQPAh3k2jhWMQt}#
                                                  #{init _hoQGWMnyQPAh3k2jhWMQu}#)
                                            #{rkey _hoQGWMnyQPAh3k2jhWMO3}#)))
                                  #{tmp _hoQGWMnyQPAh3k2jhWMQL}#)
                                (let ((#{tmp _hoQGWMnyQPAh3k2jhWMQx}#
                                        ($sc-dispatch
                                          #{args _hoQGWMnyQPAh3k2jhWMO0}#
                                          '(any))))
                                  (if (if #{tmp _hoQGWMnyQPAh3k2jhWMQx}#
                                        (@apply
                                          (lambda (#{aok _hoQGWMnyQPAh3k2jhWMQ1}#)
                                            (eq? (syntax->datum
                                                   #{aok _hoQGWMnyQPAh3k2jhWMQ1}#)
                                                 #:allow-other-keys))
                                          #{tmp _hoQGWMnyQPAh3k2jhWMQx}#)
                                        #f)
                                    (@apply
                                      (lambda (#{aok _hoQGWMnyQPAh3k2jhWMQ2}#)
                                        (#{check _hoQGWMnyQPAh3k2jhWMKe}#
                                          #{req _hoQGWMnyQPAh3k2jhWMO1}#
                                          #{opt _hoQGWMnyQPAh3k2jhWMO2}#
                                          #f
                                          (cons #t
                                                (reverse
                                                  #{rkey _hoQGWMnyQPAh3k2jhWMO3}#))))
                                      #{tmp _hoQGWMnyQPAh3k2jhWMQx}#)
                                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWMQ5}#
                                            ($sc-dispatch
                                              #{args _hoQGWMnyQPAh3k2jhWMO0}#
                                              '(any any any))))
                                      (if (if #{tmp _hoQGWMnyQPAh3k2jhWMQ5}#
                                            (@apply
                                              (lambda (#{aok _hoQGWMnyQPAh3k2jhWMQ9}#
                                                       #{a _hoQGWMnyQPAh3k2jhWMQ$}#
                                                       #{b _hoQGWMnyQPAh3k2jhWMQ@}#)
                                                (if (eq? (syntax->datum
                                                           #{aok _hoQGWMnyQPAh3k2jhWMQ9}#)
                                                         #:allow-other-keys)
                                                  (eq? (syntax->datum
                                                         #{a _hoQGWMnyQPAh3k2jhWMQ$}#)
                                                       #:rest)
                                                  #f))
                                              #{tmp _hoQGWMnyQPAh3k2jhWMQ5}#)
                                            #f)
                                        (@apply
                                          (lambda (#{aok _hoQGWMnyQPAh3k2jhWMRA}#
                                                   #{a _hoQGWMnyQPAh3k2jhWMRB}#
                                                   #{b _hoQGWMnyQPAh3k2jhWMRC}#)
                                            (#{rest _hoQGWMnyQPAh3k2jhWMKd}#
                                              #{b _hoQGWMnyQPAh3k2jhWMRC}#
                                              #{req _hoQGWMnyQPAh3k2jhWMO1}#
                                              #{opt _hoQGWMnyQPAh3k2jhWMO2}#
                                              (cons #t
                                                    (reverse
                                                      #{rkey _hoQGWMnyQPAh3k2jhWMO3}#))))
                                          #{tmp _hoQGWMnyQPAh3k2jhWMQ5}#)
                                        (let ((#{tmp _hoQGWMnyQPAh3k2jhWMRF}#
                                                ($sc-dispatch
                                                  #{args _hoQGWMnyQPAh3k2jhWMO0}#
                                                  '(any . any))))
                                          (if (if #{tmp _hoQGWMnyQPAh3k2jhWMRF}#
                                                (@apply
                                                  (lambda (#{aok _hoQGWMnyQPAh3k2jhWMRJ}#
                                                           #{r _hoQGWMnyQPAh3k2jhWMRK}#)
                                                    (if (eq? (syntax->datum
                                                               #{aok _hoQGWMnyQPAh3k2jhWMRJ}#)
                                                             #:allow-other-keys)
                                                      (if (symbol?
                                                            #{r _hoQGWMnyQPAh3k2jhWMRK}#)
                                                        #t
                                                        (if (if (vector?
                                                                  #{r _hoQGWMnyQPAh3k2jhWMRK}#)
                                                              (if (= (vector-length
                                                                       #{r _hoQGWMnyQPAh3k2jhWMRK}#)
                                                                     4)
                                                                (eq? (vector-ref
                                                                       #{r _hoQGWMnyQPAh3k2jhWMRK}#
                                                                       0)
                                                                     'syntax-object)
                                                                #f)
                                                              #f)
                                                          (symbol?
                                                            (vector-ref
                                                              #{r _hoQGWMnyQPAh3k2jhWMRK}#
                                                              1))
                                                          #f))
                                                      #f))
                                                  #{tmp _hoQGWMnyQPAh3k2jhWMRF}#)
                                                #f)
                                            (@apply
                                              (lambda (#{aok _hoQGWMnyQPAh3k2jhWMRl}#
                                                       #{r _hoQGWMnyQPAh3k2jhWMRm}#)
                                                (#{rest _hoQGWMnyQPAh3k2jhWMKd}#
                                                  #{r _hoQGWMnyQPAh3k2jhWMRm}#
                                                  #{req _hoQGWMnyQPAh3k2jhWMO1}#
                                                  #{opt _hoQGWMnyQPAh3k2jhWMO2}#
                                                  (cons #t
                                                        (reverse
                                                          #{rkey _hoQGWMnyQPAh3k2jhWMO3}#))))
                                              #{tmp _hoQGWMnyQPAh3k2jhWMRF}#)
                                            (let ((#{tmp _hoQGWMnyQPAh3k2jhWMRp}#
                                                    ($sc-dispatch
                                                      #{args _hoQGWMnyQPAh3k2jhWMO0}#
                                                      '(any any))))
                                              (if (if #{tmp _hoQGWMnyQPAh3k2jhWMRp}#
                                                    (@apply
                                                      (lambda (#{a _hoQGWMnyQPAh3k2jhWMRt}#
                                                               #{b _hoQGWMnyQPAh3k2jhWMRu}#)
                                                        (eq? (syntax->datum
                                                               #{a _hoQGWMnyQPAh3k2jhWMRt}#)
                                                             #:rest))
                                                      #{tmp _hoQGWMnyQPAh3k2jhWMRp}#)
                                                    #f)
                                                (@apply
                                                  (lambda (#{a _hoQGWMnyQPAh3k2jhWMRv}#
                                                           #{b _hoQGWMnyQPAh3k2jhWMRw}#)
                                                    (#{rest _hoQGWMnyQPAh3k2jhWMKd}#
                                                      #{b _hoQGWMnyQPAh3k2jhWMRw}#
                                                      #{req _hoQGWMnyQPAh3k2jhWMO1}#
                                                      #{opt _hoQGWMnyQPAh3k2jhWMO2}#
                                                      (cons #f
                                                            (reverse
                                                              #{rkey _hoQGWMnyQPAh3k2jhWMO3}#))))
                                                  #{tmp _hoQGWMnyQPAh3k2jhWMRp}#)
                                                (let ((#{tmp _hoQGWMnyQPAh3k2jhWMRz}#
                                                        (list #{args _hoQGWMnyQPAh3k2jhWMO0}#)))
                                                  (if (@apply
                                                        (lambda (#{r _hoQGWMnyQPAh3k2jhWMR1}#)
                                                          (if (symbol?
                                                                #{r _hoQGWMnyQPAh3k2jhWMR1}#)
                                                            #t
                                                            (if (if (vector?
                                                                      #{r _hoQGWMnyQPAh3k2jhWMR1}#)
                                                                  (if (= (vector-length
                                                                           #{r _hoQGWMnyQPAh3k2jhWMR1}#)
                                                                         4)
                                                                    (eq? (vector-ref
                                                                           #{r _hoQGWMnyQPAh3k2jhWMR1}#
                                                                           0)
                                                                         'syntax-object)
                                                                    #f)
                                                                  #f)
                                                              (symbol?
                                                                (vector-ref
                                                                  #{r _hoQGWMnyQPAh3k2jhWMR1}#
                                                                  1))
                                                              #f)))
                                                        #{tmp _hoQGWMnyQPAh3k2jhWMRz}#)
                                                    (@apply
                                                      (lambda (#{r _hoQGWMnyQPAh3k2jhWMST}#)
                                                        (#{rest _hoQGWMnyQPAh3k2jhWMKd}#
                                                          #{r _hoQGWMnyQPAh3k2jhWMST}#
                                                          #{req _hoQGWMnyQPAh3k2jhWMO1}#
                                                          #{opt _hoQGWMnyQPAh3k2jhWMO2}#
                                                          (cons #f
                                                                (reverse
                                                                  #{rkey _hoQGWMnyQPAh3k2jhWMO3}#))))
                                                      #{tmp _hoQGWMnyQPAh3k2jhWMRz}#)
                                                    (syntax-violation
                                                      'lambda*
                                                      "invalid keyword argument list"
                                                      #{orig-args _hoQGWMnyQPAh3k2jhWMKZ}#
                                                      #{args _hoQGWMnyQPAh3k2jhWMO0}#)))))))))))))))))))))
            (#{rest _hoQGWMnyQPAh3k2jhWMKd}#
              (lambda (#{args _hoQGWMnyQPAh3k2jhWMSv}#
                       #{req _hoQGWMnyQPAh3k2jhWMSw}#
                       #{opt _hoQGWMnyQPAh3k2jhWMSx}#
                       #{kw _hoQGWMnyQPAh3k2jhWMSy}#)
                (let ((#{tmp _hoQGWMnyQPAh3k2jhWMS0}#
                        (list #{args _hoQGWMnyQPAh3k2jhWMSv}#)))
                  (if (@apply
                        (lambda (#{r _hoQGWMnyQPAh3k2jhWMS2}#)
                          (if (symbol? #{r _hoQGWMnyQPAh3k2jhWMS2}#)
                            #t
                            (if (if (vector? #{r _hoQGWMnyQPAh3k2jhWMS2}#)
                                  (if (= (vector-length
                                           #{r _hoQGWMnyQPAh3k2jhWMS2}#)
                                         4)
                                    (eq? (vector-ref
                                           #{r _hoQGWMnyQPAh3k2jhWMS2}#
                                           0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol?
                                (vector-ref #{r _hoQGWMnyQPAh3k2jhWMS2}# 1))
                              #f)))
                        #{tmp _hoQGWMnyQPAh3k2jhWMS0}#)
                    (@apply
                      (lambda (#{r _hoQGWMnyQPAh3k2jhWMTU}#)
                        (#{check _hoQGWMnyQPAh3k2jhWMKe}#
                          #{req _hoQGWMnyQPAh3k2jhWMSw}#
                          #{opt _hoQGWMnyQPAh3k2jhWMSx}#
                          #{r _hoQGWMnyQPAh3k2jhWMTU}#
                          #{kw _hoQGWMnyQPAh3k2jhWMSy}#))
                      #{tmp _hoQGWMnyQPAh3k2jhWMS0}#)
                    (syntax-violation
                      'lambda*
                      "invalid rest argument"
                      #{orig-args _hoQGWMnyQPAh3k2jhWMKZ}#
                      #{args _hoQGWMnyQPAh3k2jhWMSv}#)))))
            (#{check _hoQGWMnyQPAh3k2jhWMKe}#
              (lambda (#{req _hoQGWMnyQPAh3k2jhWMTY}#
                       #{opt _hoQGWMnyQPAh3k2jhWMTZ}#
                       #{rest _hoQGWMnyQPAh3k2jhWMTa}#
                       #{kw _hoQGWMnyQPAh3k2jhWMTb}#)
                (if (#{distinct-bound-ids? _hoQGWMnyQPAh3k2jhWHTc}#
                      (append
                        #{req _hoQGWMnyQPAh3k2jhWMTY}#
                        (map car #{opt _hoQGWMnyQPAh3k2jhWMTZ}#)
                        (if #{rest _hoQGWMnyQPAh3k2jhWMTa}#
                          (list #{rest _hoQGWMnyQPAh3k2jhWMTa}#)
                          '())
                        (if (pair? #{kw _hoQGWMnyQPAh3k2jhWMTb}#)
                          (map cadr (cdr #{kw _hoQGWMnyQPAh3k2jhWMTb}#))
                          '())))
                  (values
                    #{req _hoQGWMnyQPAh3k2jhWMTY}#
                    #{opt _hoQGWMnyQPAh3k2jhWMTZ}#
                    #{rest _hoQGWMnyQPAh3k2jhWMTa}#
                    #{kw _hoQGWMnyQPAh3k2jhWMTb}#)
                  (syntax-violation
                    'lambda*
                    "duplicate identifier in argument list"
                    #{orig-args _hoQGWMnyQPAh3k2jhWMKZ}#)))))
           (#{req _hoQGWMnyQPAh3k2jhWMKa}#
             #{orig-args _hoQGWMnyQPAh3k2jhWMKZ}#
             '()))))
     (#{expand-lambda-case _hoQGWMnyQPAh3k2jhWHTx}#
       (lambda (#{e _hoQGWMnyQPAh3k2jhWMVP}#
                #{r _hoQGWMnyQPAh3k2jhWMVQ}#
                #{w _hoQGWMnyQPAh3k2jhWMVR}#
                #{s _hoQGWMnyQPAh3k2jhWMVS}#
                #{mod _hoQGWMnyQPAh3k2jhWMVT}#
                #{get-formals _hoQGWMnyQPAh3k2jhWMVU}#
                #{clauses _hoQGWMnyQPAh3k2jhWMVV}#)
         (letrec*
           ((#{parse-req _hoQGWMnyQPAh3k2jhWMVW}#
              (lambda (#{req _hoQGWMnyQPAh3k2jhWMXV}#
                       #{opt _hoQGWMnyQPAh3k2jhWMXW}#
                       #{rest _hoQGWMnyQPAh3k2jhWMXX}#
                       #{kw _hoQGWMnyQPAh3k2jhWMXY}#
                       #{body _hoQGWMnyQPAh3k2jhWMXZ}#)
                (let ((#{vars _hoQGWMnyQPAh3k2jhWMXa}#
                        (map #{gen-var _hoQGWMnyQPAh3k2jhWHTz}#
                             #{req _hoQGWMnyQPAh3k2jhWMXV}#))
                      (#{labels _hoQGWMnyQPAh3k2jhWMXb}#
                        (#{gen-labels _hoQGWMnyQPAh3k2jhWHTE}#
                          #{req _hoQGWMnyQPAh3k2jhWMXV}#)))
                  (let ((#{r* _hoQGWMnyQPAh3k2jhWMXc}#
                          (#{extend-var-env _hoQGWMnyQPAh3k2jhWHS8}#
                            #{labels _hoQGWMnyQPAh3k2jhWMXb}#
                            #{vars _hoQGWMnyQPAh3k2jhWMXa}#
                            #{r _hoQGWMnyQPAh3k2jhWMVQ}#))
                        (#{w* _hoQGWMnyQPAh3k2jhWMXd}#
                          (#{make-binding-wrap _hoQGWMnyQPAh3k2jhWHTP}#
                            #{req _hoQGWMnyQPAh3k2jhWMXV}#
                            #{labels _hoQGWMnyQPAh3k2jhWMXb}#
                            #{w _hoQGWMnyQPAh3k2jhWMVR}#)))
                    (#{parse-opt _hoQGWMnyQPAh3k2jhWMVX}#
                      (map syntax->datum
                           #{req _hoQGWMnyQPAh3k2jhWMXV}#)
                      #{opt _hoQGWMnyQPAh3k2jhWMXW}#
                      #{rest _hoQGWMnyQPAh3k2jhWMXX}#
                      #{kw _hoQGWMnyQPAh3k2jhWMXY}#
                      #{body _hoQGWMnyQPAh3k2jhWMXZ}#
                      (reverse #{vars _hoQGWMnyQPAh3k2jhWMXa}#)
                      #{r* _hoQGWMnyQPAh3k2jhWMXc}#
                      #{w* _hoQGWMnyQPAh3k2jhWMXd}#
                      '()
                      '())))))
            (#{parse-opt _hoQGWMnyQPAh3k2jhWMVX}#
              (lambda (#{req _hoQGWMnyQPAh3k2jhWMaN}#
                       #{opt _hoQGWMnyQPAh3k2jhWMaO}#
                       #{rest _hoQGWMnyQPAh3k2jhWMaP}#
                       #{kw _hoQGWMnyQPAh3k2jhWMaQ}#
                       #{body _hoQGWMnyQPAh3k2jhWMaR}#
                       #{vars _hoQGWMnyQPAh3k2jhWMaS}#
                       #{r* _hoQGWMnyQPAh3k2jhWMaT}#
                       #{w* _hoQGWMnyQPAh3k2jhWMaU}#
                       #{out _hoQGWMnyQPAh3k2jhWMaV}#
                       #{inits _hoQGWMnyQPAh3k2jhWMaW}#)
                (if (pair? #{opt _hoQGWMnyQPAh3k2jhWMaO}#)
                  (let ((#{tmp _hoQGWMnyQPAh3k2jhWMaX}#
                          (car #{opt _hoQGWMnyQPAh3k2jhWMaO}#)))
                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWMaY}#
                            ($sc-dispatch
                              #{tmp _hoQGWMnyQPAh3k2jhWMaX}#
                              '(any any))))
                      (if #{tmp _hoQGWMnyQPAh3k2jhWMaY}#
                        (@apply
                          (lambda (#{id _hoQGWMnyQPAh3k2jhWMaa}#
                                   #{i _hoQGWMnyQPAh3k2jhWMab}#)
                            (let ((#{v _hoQGWMnyQPAh3k2jhWMac}#
                                    (let ((#{id _hoQGWMnyQPAh3k2jhWMak}#
                                            (if (if (vector?
                                                      #{id _hoQGWMnyQPAh3k2jhWMaa}#)
                                                  (if (= (vector-length
                                                           #{id _hoQGWMnyQPAh3k2jhWMaa}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{id _hoQGWMnyQPAh3k2jhWMaa}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref
                                                #{id _hoQGWMnyQPAh3k2jhWMaa}#
                                                1)
                                              #{id _hoQGWMnyQPAh3k2jhWMaa}#)))
                                      (gensym
                                        (string-append
                                          (symbol->string
                                            #{id _hoQGWMnyQPAh3k2jhWMak}#)
                                          " ")))))
                              (let ((#{l _hoQGWMnyQPAh3k2jhWMad}#
                                      (#{gen-labels _hoQGWMnyQPAh3k2jhWHTE}#
                                        (list #{v _hoQGWMnyQPAh3k2jhWMac}#))))
                                (let ((#{r** _hoQGWMnyQPAh3k2jhWMae}#
                                        (#{extend-var-env _hoQGWMnyQPAh3k2jhWHS8}#
                                          #{l _hoQGWMnyQPAh3k2jhWMad}#
                                          (list #{v _hoQGWMnyQPAh3k2jhWMac}#)
                                          #{r* _hoQGWMnyQPAh3k2jhWMaT}#)))
                                  (let ((#{w** _hoQGWMnyQPAh3k2jhWMaf}#
                                          (#{make-binding-wrap _hoQGWMnyQPAh3k2jhWHTP}#
                                            (list #{id _hoQGWMnyQPAh3k2jhWMaa}#)
                                            #{l _hoQGWMnyQPAh3k2jhWMad}#
                                            #{w* _hoQGWMnyQPAh3k2jhWMaU}#)))
                                    (#{parse-opt _hoQGWMnyQPAh3k2jhWMVX}#
                                      #{req _hoQGWMnyQPAh3k2jhWMaN}#
                                      (cdr #{opt _hoQGWMnyQPAh3k2jhWMaO}#)
                                      #{rest _hoQGWMnyQPAh3k2jhWMaP}#
                                      #{kw _hoQGWMnyQPAh3k2jhWMaQ}#
                                      #{body _hoQGWMnyQPAh3k2jhWMaR}#
                                      (cons #{v _hoQGWMnyQPAh3k2jhWMac}#
                                            #{vars _hoQGWMnyQPAh3k2jhWMaS}#)
                                      #{r** _hoQGWMnyQPAh3k2jhWMae}#
                                      #{w** _hoQGWMnyQPAh3k2jhWMaf}#
                                      (cons (syntax->datum
                                              #{id _hoQGWMnyQPAh3k2jhWMaa}#)
                                            #{out _hoQGWMnyQPAh3k2jhWMaV}#)
                                      (cons (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                              #{i _hoQGWMnyQPAh3k2jhWMab}#
                                              #{r* _hoQGWMnyQPAh3k2jhWMaT}#
                                              #{w* _hoQGWMnyQPAh3k2jhWMaU}#
                                              #{mod _hoQGWMnyQPAh3k2jhWMVT}#)
                                            #{inits _hoQGWMnyQPAh3k2jhWMaW}#)))))))
                          #{tmp _hoQGWMnyQPAh3k2jhWMaY}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp _hoQGWMnyQPAh3k2jhWMaX}#))))
                  (if #{rest _hoQGWMnyQPAh3k2jhWMaP}#
                    (let ((#{v _hoQGWMnyQPAh3k2jhWMeJ}#
                            (let ((#{id _hoQGWMnyQPAh3k2jhWMeT}#
                                    (if (if (vector?
                                              #{rest _hoQGWMnyQPAh3k2jhWMaP}#)
                                          (if (= (vector-length
                                                   #{rest _hoQGWMnyQPAh3k2jhWMaP}#)
                                                 4)
                                            (eq? (vector-ref
                                                   #{rest _hoQGWMnyQPAh3k2jhWMaP}#
                                                   0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref
                                        #{rest _hoQGWMnyQPAh3k2jhWMaP}#
                                        1)
                                      #{rest _hoQGWMnyQPAh3k2jhWMaP}#)))
                              (gensym
                                (string-append
                                  (symbol->string
                                    #{id _hoQGWMnyQPAh3k2jhWMeT}#)
                                  " ")))))
                      (let ((#{l _hoQGWMnyQPAh3k2jhWMeK}#
                              (#{gen-labels _hoQGWMnyQPAh3k2jhWHTE}#
                                (list #{v _hoQGWMnyQPAh3k2jhWMeJ}#))))
                        (let ((#{r* _hoQGWMnyQPAh3k2jhWMeL}#
                                (#{extend-var-env _hoQGWMnyQPAh3k2jhWHS8}#
                                  #{l _hoQGWMnyQPAh3k2jhWMeK}#
                                  (list #{v _hoQGWMnyQPAh3k2jhWMeJ}#)
                                  #{r* _hoQGWMnyQPAh3k2jhWMaT}#)))
                          (let ((#{w* _hoQGWMnyQPAh3k2jhWMeM}#
                                  (#{make-binding-wrap _hoQGWMnyQPAh3k2jhWHTP}#
                                    (list #{rest _hoQGWMnyQPAh3k2jhWMaP}#)
                                    #{l _hoQGWMnyQPAh3k2jhWMeK}#
                                    #{w* _hoQGWMnyQPAh3k2jhWMaU}#)))
                            (#{parse-kw _hoQGWMnyQPAh3k2jhWMVY}#
                              #{req _hoQGWMnyQPAh3k2jhWMaN}#
                              (if (pair? #{out _hoQGWMnyQPAh3k2jhWMaV}#)
                                (reverse #{out _hoQGWMnyQPAh3k2jhWMaV}#)
                                #f)
                              (syntax->datum #{rest _hoQGWMnyQPAh3k2jhWMaP}#)
                              (if (pair? #{kw _hoQGWMnyQPAh3k2jhWMaQ}#)
                                (cdr #{kw _hoQGWMnyQPAh3k2jhWMaQ}#)
                                #{kw _hoQGWMnyQPAh3k2jhWMaQ}#)
                              #{body _hoQGWMnyQPAh3k2jhWMaR}#
                              (cons #{v _hoQGWMnyQPAh3k2jhWMeJ}#
                                    #{vars _hoQGWMnyQPAh3k2jhWMaS}#)
                              #{r* _hoQGWMnyQPAh3k2jhWMeL}#
                              #{w* _hoQGWMnyQPAh3k2jhWMeM}#
                              (if (pair? #{kw _hoQGWMnyQPAh3k2jhWMaQ}#)
                                (car #{kw _hoQGWMnyQPAh3k2jhWMaQ}#)
                                #f)
                              '()
                              #{inits _hoQGWMnyQPAh3k2jhWMaW}#)))))
                    (#{parse-kw _hoQGWMnyQPAh3k2jhWMVY}#
                      #{req _hoQGWMnyQPAh3k2jhWMaN}#
                      (if (pair? #{out _hoQGWMnyQPAh3k2jhWMaV}#)
                        (reverse #{out _hoQGWMnyQPAh3k2jhWMaV}#)
                        #f)
                      #f
                      (if (pair? #{kw _hoQGWMnyQPAh3k2jhWMaQ}#)
                        (cdr #{kw _hoQGWMnyQPAh3k2jhWMaQ}#)
                        #{kw _hoQGWMnyQPAh3k2jhWMaQ}#)
                      #{body _hoQGWMnyQPAh3k2jhWMaR}#
                      #{vars _hoQGWMnyQPAh3k2jhWMaS}#
                      #{r* _hoQGWMnyQPAh3k2jhWMaT}#
                      #{w* _hoQGWMnyQPAh3k2jhWMaU}#
                      (if (pair? #{kw _hoQGWMnyQPAh3k2jhWMaQ}#)
                        (car #{kw _hoQGWMnyQPAh3k2jhWMaQ}#)
                        #f)
                      '()
                      #{inits _hoQGWMnyQPAh3k2jhWMaW}#)))))
            (#{parse-kw _hoQGWMnyQPAh3k2jhWMVY}#
              (lambda (#{req _hoQGWMnyQPAh3k2jhWMg1}#
                       #{opt _hoQGWMnyQPAh3k2jhWMg2}#
                       #{rest _hoQGWMnyQPAh3k2jhWMg3}#
                       #{kw _hoQGWMnyQPAh3k2jhWMg4}#
                       #{body _hoQGWMnyQPAh3k2jhWMg5}#
                       #{vars _hoQGWMnyQPAh3k2jhWMg6}#
                       #{r* _hoQGWMnyQPAh3k2jhWMg7}#
                       #{w* _hoQGWMnyQPAh3k2jhWMg8}#
                       #{aok _hoQGWMnyQPAh3k2jhWMg9}#
                       #{out _hoQGWMnyQPAh3k2jhWMg$}#
                       #{inits _hoQGWMnyQPAh3k2jhWMg@}#)
                (if (pair? #{kw _hoQGWMnyQPAh3k2jhWMg4}#)
                  (let ((#{tmp _hoQGWMnyQPAh3k2jhWMhA}#
                          (car #{kw _hoQGWMnyQPAh3k2jhWMg4}#)))
                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWMhB}#
                            ($sc-dispatch
                              #{tmp _hoQGWMnyQPAh3k2jhWMhA}#
                              '(any any any))))
                      (if #{tmp _hoQGWMnyQPAh3k2jhWMhB}#
                        (@apply
                          (lambda (#{k _hoQGWMnyQPAh3k2jhWMhD}#
                                   #{id _hoQGWMnyQPAh3k2jhWMhE}#
                                   #{i _hoQGWMnyQPAh3k2jhWMhF}#)
                            (let ((#{v _hoQGWMnyQPAh3k2jhWMhG}#
                                    (let ((#{id _hoQGWMnyQPAh3k2jhWMhO}#
                                            (if (if (vector?
                                                      #{id _hoQGWMnyQPAh3k2jhWMhE}#)
                                                  (if (= (vector-length
                                                           #{id _hoQGWMnyQPAh3k2jhWMhE}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{id _hoQGWMnyQPAh3k2jhWMhE}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref
                                                #{id _hoQGWMnyQPAh3k2jhWMhE}#
                                                1)
                                              #{id _hoQGWMnyQPAh3k2jhWMhE}#)))
                                      (gensym
                                        (string-append
                                          (symbol->string
                                            #{id _hoQGWMnyQPAh3k2jhWMhO}#)
                                          " ")))))
                              (let ((#{l _hoQGWMnyQPAh3k2jhWMhH}#
                                      (#{gen-labels _hoQGWMnyQPAh3k2jhWHTE}#
                                        (list #{v _hoQGWMnyQPAh3k2jhWMhG}#))))
                                (let ((#{r** _hoQGWMnyQPAh3k2jhWMhI}#
                                        (#{extend-var-env _hoQGWMnyQPAh3k2jhWHS8}#
                                          #{l _hoQGWMnyQPAh3k2jhWMhH}#
                                          (list #{v _hoQGWMnyQPAh3k2jhWMhG}#)
                                          #{r* _hoQGWMnyQPAh3k2jhWMg7}#)))
                                  (let ((#{w** _hoQGWMnyQPAh3k2jhWMhJ}#
                                          (#{make-binding-wrap _hoQGWMnyQPAh3k2jhWHTP}#
                                            (list #{id _hoQGWMnyQPAh3k2jhWMhE}#)
                                            #{l _hoQGWMnyQPAh3k2jhWMhH}#
                                            #{w* _hoQGWMnyQPAh3k2jhWMg8}#)))
                                    (#{parse-kw _hoQGWMnyQPAh3k2jhWMVY}#
                                      #{req _hoQGWMnyQPAh3k2jhWMg1}#
                                      #{opt _hoQGWMnyQPAh3k2jhWMg2}#
                                      #{rest _hoQGWMnyQPAh3k2jhWMg3}#
                                      (cdr #{kw _hoQGWMnyQPAh3k2jhWMg4}#)
                                      #{body _hoQGWMnyQPAh3k2jhWMg5}#
                                      (cons #{v _hoQGWMnyQPAh3k2jhWMhG}#
                                            #{vars _hoQGWMnyQPAh3k2jhWMg6}#)
                                      #{r** _hoQGWMnyQPAh3k2jhWMhI}#
                                      #{w** _hoQGWMnyQPAh3k2jhWMhJ}#
                                      #{aok _hoQGWMnyQPAh3k2jhWMg9}#
                                      (cons (list (syntax->datum
                                                    #{k _hoQGWMnyQPAh3k2jhWMhD}#)
                                                  (syntax->datum
                                                    #{id _hoQGWMnyQPAh3k2jhWMhE}#)
                                                  #{v _hoQGWMnyQPAh3k2jhWMhG}#)
                                            #{out _hoQGWMnyQPAh3k2jhWMg$}#)
                                      (cons (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                              #{i _hoQGWMnyQPAh3k2jhWMhF}#
                                              #{r* _hoQGWMnyQPAh3k2jhWMg7}#
                                              #{w* _hoQGWMnyQPAh3k2jhWMg8}#
                                              #{mod _hoQGWMnyQPAh3k2jhWMVT}#)
                                            #{inits _hoQGWMnyQPAh3k2jhWMg@}#)))))))
                          #{tmp _hoQGWMnyQPAh3k2jhWMhB}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp _hoQGWMnyQPAh3k2jhWMhA}#))))
                  (#{parse-body _hoQGWMnyQPAh3k2jhWMVZ}#
                    #{req _hoQGWMnyQPAh3k2jhWMg1}#
                    #{opt _hoQGWMnyQPAh3k2jhWMg2}#
                    #{rest _hoQGWMnyQPAh3k2jhWMg3}#
                    (if (if #{aok _hoQGWMnyQPAh3k2jhWMg9}#
                          #{aok _hoQGWMnyQPAh3k2jhWMg9}#
                          (pair? #{out _hoQGWMnyQPAh3k2jhWMg$}#))
                      (cons #{aok _hoQGWMnyQPAh3k2jhWMg9}#
                            (reverse #{out _hoQGWMnyQPAh3k2jhWMg$}#))
                      #f)
                    #{body _hoQGWMnyQPAh3k2jhWMg5}#
                    (reverse #{vars _hoQGWMnyQPAh3k2jhWMg6}#)
                    #{r* _hoQGWMnyQPAh3k2jhWMg7}#
                    #{w* _hoQGWMnyQPAh3k2jhWMg8}#
                    (reverse #{inits _hoQGWMnyQPAh3k2jhWMg@}#)
                    '()))))
            (#{parse-body _hoQGWMnyQPAh3k2jhWMVZ}#
              (lambda (#{req _hoQGWMnyQPAh3k2jhWMk8}#
                       #{opt _hoQGWMnyQPAh3k2jhWMk9}#
                       #{rest _hoQGWMnyQPAh3k2jhWMk$}#
                       #{kw _hoQGWMnyQPAh3k2jhWMk@}#
                       #{body _hoQGWMnyQPAh3k2jhWMlA}#
                       #{vars _hoQGWMnyQPAh3k2jhWMlB}#
                       #{r* _hoQGWMnyQPAh3k2jhWMlC}#
                       #{w* _hoQGWMnyQPAh3k2jhWMlD}#
                       #{inits _hoQGWMnyQPAh3k2jhWMlE}#
                       #{meta _hoQGWMnyQPAh3k2jhWMlF}#)
                (let ((#{tmp _hoQGWMnyQPAh3k2jhWMlH}#
                        ($sc-dispatch
                          #{body _hoQGWMnyQPAh3k2jhWMlA}#
                          '(any any . each-any))))
                  (if (if #{tmp _hoQGWMnyQPAh3k2jhWMlH}#
                        (@apply
                          (lambda (#{docstring _hoQGWMnyQPAh3k2jhWMlL}#
                                   #{e1 _hoQGWMnyQPAh3k2jhWMlM}#
                                   #{e2 _hoQGWMnyQPAh3k2jhWMlN}#)
                            (string?
                              (syntax->datum
                                #{docstring _hoQGWMnyQPAh3k2jhWMlL}#)))
                          #{tmp _hoQGWMnyQPAh3k2jhWMlH}#)
                        #f)
                    (@apply
                      (lambda (#{docstring _hoQGWMnyQPAh3k2jhWMlO}#
                               #{e1 _hoQGWMnyQPAh3k2jhWMlP}#
                               #{e2 _hoQGWMnyQPAh3k2jhWMlQ}#)
                        (#{parse-body _hoQGWMnyQPAh3k2jhWMVZ}#
                          #{req _hoQGWMnyQPAh3k2jhWMk8}#
                          #{opt _hoQGWMnyQPAh3k2jhWMk9}#
                          #{rest _hoQGWMnyQPAh3k2jhWMk$}#
                          #{kw _hoQGWMnyQPAh3k2jhWMk@}#
                          (cons #{e1 _hoQGWMnyQPAh3k2jhWMlP}#
                                #{e2 _hoQGWMnyQPAh3k2jhWMlQ}#)
                          #{vars _hoQGWMnyQPAh3k2jhWMlB}#
                          #{r* _hoQGWMnyQPAh3k2jhWMlC}#
                          #{w* _hoQGWMnyQPAh3k2jhWMlD}#
                          #{inits _hoQGWMnyQPAh3k2jhWMlE}#
                          (append
                            #{meta _hoQGWMnyQPAh3k2jhWMlF}#
                            (list (cons 'documentation
                                        (syntax->datum
                                          #{docstring _hoQGWMnyQPAh3k2jhWMlO}#))))))
                      #{tmp _hoQGWMnyQPAh3k2jhWMlH}#)
                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWMlR}#
                            ($sc-dispatch
                              #{body _hoQGWMnyQPAh3k2jhWMlA}#
                              '(#(vector #(each (any . any)))
                                any
                                .
                                each-any))))
                      (if #{tmp _hoQGWMnyQPAh3k2jhWMlR}#
                        (@apply
                          (lambda (#{k _hoQGWMnyQPAh3k2jhWMlV}#
                                   #{v _hoQGWMnyQPAh3k2jhWMlW}#
                                   #{e1 _hoQGWMnyQPAh3k2jhWMlX}#
                                   #{e2 _hoQGWMnyQPAh3k2jhWMlY}#)
                            (#{parse-body _hoQGWMnyQPAh3k2jhWMVZ}#
                              #{req _hoQGWMnyQPAh3k2jhWMk8}#
                              #{opt _hoQGWMnyQPAh3k2jhWMk9}#
                              #{rest _hoQGWMnyQPAh3k2jhWMk$}#
                              #{kw _hoQGWMnyQPAh3k2jhWMk@}#
                              (cons #{e1 _hoQGWMnyQPAh3k2jhWMlX}#
                                    #{e2 _hoQGWMnyQPAh3k2jhWMlY}#)
                              #{vars _hoQGWMnyQPAh3k2jhWMlB}#
                              #{r* _hoQGWMnyQPAh3k2jhWMlC}#
                              #{w* _hoQGWMnyQPAh3k2jhWMlD}#
                              #{inits _hoQGWMnyQPAh3k2jhWMlE}#
                              (append
                                #{meta _hoQGWMnyQPAh3k2jhWMlF}#
                                (syntax->datum
                                  (map cons
                                       #{k _hoQGWMnyQPAh3k2jhWMlV}#
                                       #{v _hoQGWMnyQPAh3k2jhWMlW}#)))))
                          #{tmp _hoQGWMnyQPAh3k2jhWMlR}#)
                        (let ((#{tmp _hoQGWMnyQPAh3k2jhWMlZ}#
                                ($sc-dispatch
                                  #{body _hoQGWMnyQPAh3k2jhWMlA}#
                                  '(any . each-any))))
                          (if #{tmp _hoQGWMnyQPAh3k2jhWMlZ}#
                            (@apply
                              (lambda (#{e1 _hoQGWMnyQPAh3k2jhWMld}#
                                       #{e2 _hoQGWMnyQPAh3k2jhWMle}#)
                                (values
                                  #{meta _hoQGWMnyQPAh3k2jhWMlF}#
                                  #{req _hoQGWMnyQPAh3k2jhWMk8}#
                                  #{opt _hoQGWMnyQPAh3k2jhWMk9}#
                                  #{rest _hoQGWMnyQPAh3k2jhWMk$}#
                                  #{kw _hoQGWMnyQPAh3k2jhWMk@}#
                                  #{inits _hoQGWMnyQPAh3k2jhWMlE}#
                                  #{vars _hoQGWMnyQPAh3k2jhWMlB}#
                                  (#{expand-body _hoQGWMnyQPAh3k2jhWHTp}#
                                    (cons #{e1 _hoQGWMnyQPAh3k2jhWMld}#
                                          #{e2 _hoQGWMnyQPAh3k2jhWMle}#)
                                    (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                      (begin
                                        (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWMVP}#)
                                              #{s _hoQGWMnyQPAh3k2jhWMVS}#
                                              #f)
                                          (set-source-properties!
                                            #{e _hoQGWMnyQPAh3k2jhWMVP}#
                                            #{s _hoQGWMnyQPAh3k2jhWMVS}#))
                                        #{e _hoQGWMnyQPAh3k2jhWMVP}#)
                                      #{w _hoQGWMnyQPAh3k2jhWMVR}#
                                      #{mod _hoQGWMnyQPAh3k2jhWMVT}#)
                                    #{r* _hoQGWMnyQPAh3k2jhWMlC}#
                                    #{w* _hoQGWMnyQPAh3k2jhWMlD}#
                                    #{mod _hoQGWMnyQPAh3k2jhWMVT}#)))
                              #{tmp _hoQGWMnyQPAh3k2jhWMlZ}#)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              #{body _hoQGWMnyQPAh3k2jhWMlA}#))))))))))
           (let ((#{tmp _hoQGWMnyQPAh3k2jhWMVb}#
                   ($sc-dispatch
                     #{clauses _hoQGWMnyQPAh3k2jhWMVV}#
                     '())))
             (if #{tmp _hoQGWMnyQPAh3k2jhWMVb}#
               (@apply
                 (lambda () (values '() #f))
                 #{tmp _hoQGWMnyQPAh3k2jhWMVb}#)
               (let ((#{tmp _hoQGWMnyQPAh3k2jhWMVf}#
                       ($sc-dispatch
                         #{clauses _hoQGWMnyQPAh3k2jhWMVV}#
                         '((any any . each-any)
                           .
                           #(each (any any . each-any))))))
                 (if #{tmp _hoQGWMnyQPAh3k2jhWMVf}#
                   (@apply
                     (lambda (#{args _hoQGWMnyQPAh3k2jhWMVj}#
                              #{e1 _hoQGWMnyQPAh3k2jhWMVk}#
                              #{e2 _hoQGWMnyQPAh3k2jhWMVl}#
                              #{args* _hoQGWMnyQPAh3k2jhWMVm}#
                              #{e1* _hoQGWMnyQPAh3k2jhWMVn}#
                              #{e2* _hoQGWMnyQPAh3k2jhWMVo}#)
                       (call-with-values
                         (lambda ()
                           (#{get-formals _hoQGWMnyQPAh3k2jhWMVU}#
                             #{args _hoQGWMnyQPAh3k2jhWMVj}#))
                         (lambda (#{req _hoQGWMnyQPAh3k2jhWMVp}#
                                  #{opt _hoQGWMnyQPAh3k2jhWMVq}#
                                  #{rest _hoQGWMnyQPAh3k2jhWMVr}#
                                  #{kw _hoQGWMnyQPAh3k2jhWMVs}#)
                           (call-with-values
                             (lambda ()
                               (#{parse-req _hoQGWMnyQPAh3k2jhWMVW}#
                                 #{req _hoQGWMnyQPAh3k2jhWMVp}#
                                 #{opt _hoQGWMnyQPAh3k2jhWMVq}#
                                 #{rest _hoQGWMnyQPAh3k2jhWMVr}#
                                 #{kw _hoQGWMnyQPAh3k2jhWMVs}#
                                 (cons #{e1 _hoQGWMnyQPAh3k2jhWMVk}#
                                       #{e2 _hoQGWMnyQPAh3k2jhWMVl}#)))
                             (lambda (#{meta _hoQGWMnyQPAh3k2jhWMWp}#
                                      #{req _hoQGWMnyQPAh3k2jhWMWq}#
                                      #{opt _hoQGWMnyQPAh3k2jhWMWr}#
                                      #{rest _hoQGWMnyQPAh3k2jhWMWs}#
                                      #{kw _hoQGWMnyQPAh3k2jhWMWt}#
                                      #{inits _hoQGWMnyQPAh3k2jhWMWu}#
                                      #{vars _hoQGWMnyQPAh3k2jhWMWv}#
                                      #{body _hoQGWMnyQPAh3k2jhWMWw}#)
                               (call-with-values
                                 (lambda ()
                                   (#{expand-lambda-case _hoQGWMnyQPAh3k2jhWHTx}#
                                     #{e _hoQGWMnyQPAh3k2jhWMVP}#
                                     #{r _hoQGWMnyQPAh3k2jhWMVQ}#
                                     #{w _hoQGWMnyQPAh3k2jhWMVR}#
                                     #{s _hoQGWMnyQPAh3k2jhWMVS}#
                                     #{mod _hoQGWMnyQPAh3k2jhWMVT}#
                                     #{get-formals _hoQGWMnyQPAh3k2jhWMVU}#
                                     (map (lambda (#{tmp _hoQGWMnyQPAh3k2jhWHDD _hoQGWMnyQPAh3k2jhWMWx}#
                                                   #{tmp _hoQGWMnyQPAh3k2jhWHDC _hoQGWMnyQPAh3k2jhWMWy}#
                                                   #{tmp _hoQGWMnyQPAh3k2jhWHDB _hoQGWMnyQPAh3k2jhWMWz}#)
                                            (cons #{tmp _hoQGWMnyQPAh3k2jhWHDB _hoQGWMnyQPAh3k2jhWMWz}#
                                                  (cons #{tmp _hoQGWMnyQPAh3k2jhWHDC _hoQGWMnyQPAh3k2jhWMWy}#
                                                        #{tmp _hoQGWMnyQPAh3k2jhWHDD _hoQGWMnyQPAh3k2jhWMWx}#)))
                                          #{e2* _hoQGWMnyQPAh3k2jhWMVo}#
                                          #{e1* _hoQGWMnyQPAh3k2jhWMVn}#
                                          #{args* _hoQGWMnyQPAh3k2jhWMVm}#)))
                                 (lambda (#{meta* _hoQGWMnyQPAh3k2jhWMW0}#
                                          #{else* _hoQGWMnyQPAh3k2jhWMW1}#)
                                   (values
                                     (append
                                       #{meta _hoQGWMnyQPAh3k2jhWMWp}#
                                       #{meta* _hoQGWMnyQPAh3k2jhWMW0}#)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #{s _hoQGWMnyQPAh3k2jhWMVS}#
                                       #{req _hoQGWMnyQPAh3k2jhWMWq}#
                                       #{opt _hoQGWMnyQPAh3k2jhWMWr}#
                                       #{rest _hoQGWMnyQPAh3k2jhWMWs}#
                                       #{kw _hoQGWMnyQPAh3k2jhWMWt}#
                                       #{inits _hoQGWMnyQPAh3k2jhWMWu}#
                                       #{vars _hoQGWMnyQPAh3k2jhWMWv}#
                                       #{body _hoQGWMnyQPAh3k2jhWMWw}#
                                       #{else* _hoQGWMnyQPAh3k2jhWMW1}#)))))))))
                     #{tmp _hoQGWMnyQPAh3k2jhWMVf}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{clauses _hoQGWMnyQPAh3k2jhWMVV}#))))))))
     (#{strip _hoQGWMnyQPAh3k2jhWHTy}#
       (lambda (#{x _hoQGWMnyQPAh3k2jhWMmD}#
                #{w _hoQGWMnyQPAh3k2jhWMmE}#)
         (if (memq 'top (car #{w _hoQGWMnyQPAh3k2jhWMmE}#))
           #{x _hoQGWMnyQPAh3k2jhWMmD}#
           (letrec*
             ((#{f _hoQGWMnyQPAh3k2jhWMmF}#
                (lambda (#{x _hoQGWMnyQPAh3k2jhWMmI}#)
                  (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWMmI}#)
                        (if (= (vector-length #{x _hoQGWMnyQPAh3k2jhWMmI}#)
                               4)
                          (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWMmI}# 0)
                               'syntax-object)
                          #f)
                        #f)
                    (#{strip _hoQGWMnyQPAh3k2jhWHTy}#
                      (vector-ref #{x _hoQGWMnyQPAh3k2jhWMmI}# 1)
                      (vector-ref #{x _hoQGWMnyQPAh3k2jhWMmI}# 2))
                    (if (pair? #{x _hoQGWMnyQPAh3k2jhWMmI}#)
                      (let ((#{a _hoQGWMnyQPAh3k2jhWMmb}#
                              (#{f _hoQGWMnyQPAh3k2jhWMmF}#
                                (car #{x _hoQGWMnyQPAh3k2jhWMmI}#)))
                            (#{d _hoQGWMnyQPAh3k2jhWMmc}#
                              (#{f _hoQGWMnyQPAh3k2jhWMmF}#
                                (cdr #{x _hoQGWMnyQPAh3k2jhWMmI}#))))
                        (if (if (eq? #{a _hoQGWMnyQPAh3k2jhWMmb}#
                                     (car #{x _hoQGWMnyQPAh3k2jhWMmI}#))
                              (eq? #{d _hoQGWMnyQPAh3k2jhWMmc}#
                                   (cdr #{x _hoQGWMnyQPAh3k2jhWMmI}#))
                              #f)
                          #{x _hoQGWMnyQPAh3k2jhWMmI}#
                          (cons #{a _hoQGWMnyQPAh3k2jhWMmb}#
                                #{d _hoQGWMnyQPAh3k2jhWMmc}#)))
                      (if (vector? #{x _hoQGWMnyQPAh3k2jhWMmI}#)
                        (let ((#{old _hoQGWMnyQPAh3k2jhWMmf}#
                                (vector->list #{x _hoQGWMnyQPAh3k2jhWMmI}#)))
                          (let ((#{new _hoQGWMnyQPAh3k2jhWMmg}#
                                  (map #{f _hoQGWMnyQPAh3k2jhWMmF}#
                                       #{old _hoQGWMnyQPAh3k2jhWMmf}#)))
                            (letrec*
                              ((#{lp _hoQGWMnyQPAh3k2jhWMmh}#
                                 (lambda (#{l1 _hoQGWMnyQPAh3k2jhWMnt}#
                                          #{l2 _hoQGWMnyQPAh3k2jhWMnu}#)
                                   (if (null? #{l1 _hoQGWMnyQPAh3k2jhWMnt}#)
                                     #{x _hoQGWMnyQPAh3k2jhWMmI}#
                                     (if (eq? (car #{l1 _hoQGWMnyQPAh3k2jhWMnt}#)
                                              (car #{l2 _hoQGWMnyQPAh3k2jhWMnu}#))
                                       (#{lp _hoQGWMnyQPAh3k2jhWMmh}#
                                         (cdr #{l1 _hoQGWMnyQPAh3k2jhWMnt}#)
                                         (cdr #{l2 _hoQGWMnyQPAh3k2jhWMnu}#))
                                       (list->vector
                                         #{new _hoQGWMnyQPAh3k2jhWMmg}#))))))
                              (#{lp _hoQGWMnyQPAh3k2jhWMmh}#
                                #{old _hoQGWMnyQPAh3k2jhWMmf}#
                                #{new _hoQGWMnyQPAh3k2jhWMmg}#))))
                        #{x _hoQGWMnyQPAh3k2jhWMmI}#))))))
             (#{f _hoQGWMnyQPAh3k2jhWMmF}#
               #{x _hoQGWMnyQPAh3k2jhWMmD}#)))))
     (#{gen-var _hoQGWMnyQPAh3k2jhWHTz}#
       (lambda (#{id _hoQGWMnyQPAh3k2jhWMXh}#)
         (let ((#{id _hoQGWMnyQPAh3k2jhWMXi}#
                 (if (if (vector? #{id _hoQGWMnyQPAh3k2jhWMXh}#)
                       (if (= (vector-length #{id _hoQGWMnyQPAh3k2jhWMXh}#)
                              4)
                         (eq? (vector-ref #{id _hoQGWMnyQPAh3k2jhWMXh}# 0)
                              'syntax-object)
                         #f)
                       #f)
                   (vector-ref #{id _hoQGWMnyQPAh3k2jhWMXh}# 1)
                   #{id _hoQGWMnyQPAh3k2jhWMXh}#)))
           (gensym
             (string-append
               (symbol->string #{id _hoQGWMnyQPAh3k2jhWMXi}#)
               " "))))))
    (begin
      (set! #{gen-label _hoQGWMnyQPAh3k2jhWHTD}#
        (let ((#{i _hoQGWMnyQPAh3k2jhWKEc}# 0))
          (lambda ()
            (let ((#{n _hoQGWMnyQPAh3k2jhWKEd}#
                    #{i _hoQGWMnyQPAh3k2jhWKEc}#))
              (begin
                (set! #{i _hoQGWMnyQPAh3k2jhWKEc}#
                  (#{1+}# #{n _hoQGWMnyQPAh3k2jhWKEd}#))
                (number->string #{n _hoQGWMnyQPAh3k2jhWKEd}# 36))))))
      (set! #{transformer-environment _hoQGWMnyQPAh3k2jhWHTX}#
        (make-fluid
          (lambda (#{k _hoQGWMnyQPAh3k2jhWJpb}#)
            (error "called outside the dynamic extent of a syntax transformer"))))
      (module-define!
        (current-module)
        'letrec-syntax
        (make-syntax-transformer
          'letrec-syntax
          'local-syntax
          #t))
      (module-define!
        (current-module)
        'let-syntax
        (make-syntax-transformer
          'let-syntax
          'local-syntax
          #f))
      (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
        'core
        'syntax-parameterize
        (lambda (#{e _hoQGWMnyQPAh3k2jhWHVs}#
                 #{r _hoQGWMnyQPAh3k2jhWHVt}#
                 #{w _hoQGWMnyQPAh3k2jhWHVu}#
                 #{s _hoQGWMnyQPAh3k2jhWHVv}#
                 #{mod _hoQGWMnyQPAh3k2jhWHVw}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWHVy}#
                  ($sc-dispatch
                    #{e _hoQGWMnyQPAh3k2jhWHVs}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp _hoQGWMnyQPAh3k2jhWHVy}#
                  (@apply
                    (lambda (#{var _hoQGWMnyQPAh3k2jhWHV2}#
                             #{val _hoQGWMnyQPAh3k2jhWHV3}#
                             #{e1 _hoQGWMnyQPAh3k2jhWHV4}#
                             #{e2 _hoQGWMnyQPAh3k2jhWHV5}#)
                      (#{valid-bound-ids? _hoQGWMnyQPAh3k2jhWHTb}#
                        #{var _hoQGWMnyQPAh3k2jhWHV2}#))
                    #{tmp _hoQGWMnyQPAh3k2jhWHVy}#)
                  #f)
              (@apply
                (lambda (#{var _hoQGWMnyQPAh3k2jhWHXH}#
                         #{val _hoQGWMnyQPAh3k2jhWHXI}#
                         #{e1 _hoQGWMnyQPAh3k2jhWHXJ}#
                         #{e2 _hoQGWMnyQPAh3k2jhWHXK}#)
                  (let ((#{names _hoQGWMnyQPAh3k2jhWHXL}#
                          (map (lambda (#{x _hoQGWMnyQPAh3k2jhWHX9}#)
                                 (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                   #{x _hoQGWMnyQPAh3k2jhWHX9}#
                                   #{w _hoQGWMnyQPAh3k2jhWHVu}#))
                               #{var _hoQGWMnyQPAh3k2jhWHXH}#)))
                    (begin
                      (for-each
                        (lambda (#{id _hoQGWMnyQPAh3k2jhWHXM}#
                                 #{n _hoQGWMnyQPAh3k2jhWHXN}#)
                          (let ((#{atom-key _hoQGWMnyQPAh3k2jhWHXO}#
                                  (car (let ((#{t _hoQGWMnyQPAh3k2jhWHXV}#
                                               (assq #{n _hoQGWMnyQPAh3k2jhWHXN}#
                                                     #{r _hoQGWMnyQPAh3k2jhWHVt}#)))
                                         (if #{t _hoQGWMnyQPAh3k2jhWHXV}#
                                           (cdr #{t _hoQGWMnyQPAh3k2jhWHXV}#)
                                           (if (symbol?
                                                 #{n _hoQGWMnyQPAh3k2jhWHXN}#)
                                             (let ((#{t _hoQGWMnyQPAh3k2jhWHXa}#
                                                     (#{get-global-definition-hook _hoQGWMnyQPAh3k2jhWHSc}#
                                                       #{n _hoQGWMnyQPAh3k2jhWHXN}#
                                                       #{mod _hoQGWMnyQPAh3k2jhWHVw}#)))
                                               (if #{t _hoQGWMnyQPAh3k2jhWHXa}#
                                                 #{t _hoQGWMnyQPAh3k2jhWHXa}#
                                                 '(global)))
                                             '(displaced-lexical)))))))
                            (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWHXO}#
                                      'displaced-lexical)
                              (syntax-violation
                                'syntax-parameterize
                                "identifier out of context"
                                #{e _hoQGWMnyQPAh3k2jhWHVs}#
                                (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                  (begin
                                    (if (if (pair? #{id _hoQGWMnyQPAh3k2jhWHXM}#)
                                          #{s _hoQGWMnyQPAh3k2jhWHVv}#
                                          #f)
                                      (set-source-properties!
                                        #{id _hoQGWMnyQPAh3k2jhWHXM}#
                                        #{s _hoQGWMnyQPAh3k2jhWHVv}#))
                                    #{id _hoQGWMnyQPAh3k2jhWHXM}#)
                                  #{w _hoQGWMnyQPAh3k2jhWHVu}#
                                  #{mod _hoQGWMnyQPAh3k2jhWHVw}#)))))
                        #{var _hoQGWMnyQPAh3k2jhWHXH}#
                        #{names _hoQGWMnyQPAh3k2jhWHXL}#)
                      (#{expand-body _hoQGWMnyQPAh3k2jhWHTp}#
                        (cons #{e1 _hoQGWMnyQPAh3k2jhWHXJ}#
                              #{e2 _hoQGWMnyQPAh3k2jhWHXK}#)
                        (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                          (begin
                            (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWHVs}#)
                                  #{s _hoQGWMnyQPAh3k2jhWHVv}#
                                  #f)
                              (set-source-properties!
                                #{e _hoQGWMnyQPAh3k2jhWHVs}#
                                #{s _hoQGWMnyQPAh3k2jhWHVv}#))
                            #{e _hoQGWMnyQPAh3k2jhWHVs}#)
                          #{w _hoQGWMnyQPAh3k2jhWHVu}#
                          #{mod _hoQGWMnyQPAh3k2jhWHVw}#)
                        (#{extend-env _hoQGWMnyQPAh3k2jhWHS7}#
                          #{names _hoQGWMnyQPAh3k2jhWHXL}#
                          (let ((#{trans-r _hoQGWMnyQPAh3k2jhWHZT}#
                                  (#{macros-only-env _hoQGWMnyQPAh3k2jhWHS9}#
                                    #{r _hoQGWMnyQPAh3k2jhWHVt}#)))
                            (map (lambda (#{x _hoQGWMnyQPAh3k2jhWHZU}#)
                                   (cons 'macro
                                         (#{eval-local-transformer _hoQGWMnyQPAh3k2jhWHTr}#
                                           (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                             #{x _hoQGWMnyQPAh3k2jhWHZU}#
                                             #{trans-r _hoQGWMnyQPAh3k2jhWHZT}#
                                             #{w _hoQGWMnyQPAh3k2jhWHVu}#
                                             #{mod _hoQGWMnyQPAh3k2jhWHVw}#)
                                           #{mod _hoQGWMnyQPAh3k2jhWHVw}#)))
                                 #{val _hoQGWMnyQPAh3k2jhWHXI}#))
                          #{r _hoQGWMnyQPAh3k2jhWHVt}#)
                        #{w _hoQGWMnyQPAh3k2jhWHVu}#
                        #{mod _hoQGWMnyQPAh3k2jhWHVw}#))))
                #{tmp _hoQGWMnyQPAh3k2jhWHVy}#)
              (syntax-violation
                'syntax-parameterize
                "bad syntax"
                (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                  (begin
                    (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWHVs}#)
                          #{s _hoQGWMnyQPAh3k2jhWHVv}#
                          #f)
                      (set-source-properties!
                        #{e _hoQGWMnyQPAh3k2jhWHVs}#
                        #{s _hoQGWMnyQPAh3k2jhWHVv}#))
                    #{e _hoQGWMnyQPAh3k2jhWHVs}#)
                  #{w _hoQGWMnyQPAh3k2jhWHVu}#
                  #{mod _hoQGWMnyQPAh3k2jhWHVw}#))))))
      (module-define!
        (current-module)
        'quote
        (make-syntax-transformer
          'quote
          'core
          (lambda (#{e _hoQGWMnyQPAh3k2jhWHcl}#
                   #{r _hoQGWMnyQPAh3k2jhWHcm}#
                   #{w _hoQGWMnyQPAh3k2jhWHcn}#
                   #{s _hoQGWMnyQPAh3k2jhWHco}#
                   #{mod _hoQGWMnyQPAh3k2jhWHcp}#)
            (let ((#{tmp _hoQGWMnyQPAh3k2jhWHcr}#
                    ($sc-dispatch
                      #{e _hoQGWMnyQPAh3k2jhWHcl}#
                      '(_ any))))
              (if #{tmp _hoQGWMnyQPAh3k2jhWHcr}#
                (@apply
                  (lambda (#{e _hoQGWMnyQPAh3k2jhWHcu}#)
                    (let ((#{exp _hoQGWMnyQPAh3k2jhWHcy}#
                            (#{strip _hoQGWMnyQPAh3k2jhWHTy}#
                              #{e _hoQGWMnyQPAh3k2jhWHcu}#
                              #{w _hoQGWMnyQPAh3k2jhWHcn}#)))
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 1)
                        #{s _hoQGWMnyQPAh3k2jhWHco}#
                        #{exp _hoQGWMnyQPAh3k2jhWHcy}#)))
                  #{tmp _hoQGWMnyQPAh3k2jhWHcr}#)
                (syntax-violation
                  'quote
                  "bad syntax"
                  (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                    (begin
                      (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWHcl}#)
                            #{s _hoQGWMnyQPAh3k2jhWHco}#
                            #f)
                        (set-source-properties!
                          #{e _hoQGWMnyQPAh3k2jhWHcl}#
                          #{s _hoQGWMnyQPAh3k2jhWHco}#))
                      #{e _hoQGWMnyQPAh3k2jhWHcl}#)
                    #{w _hoQGWMnyQPAh3k2jhWHcn}#
                    #{mod _hoQGWMnyQPAh3k2jhWHcp}#)))))))
      (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
        'core
        'syntax
        (letrec*
          ((#{gen-syntax _hoQGWMnyQPAh3k2jhWHgO}#
             (lambda (#{src _hoQGWMnyQPAh3k2jhWHh0}#
                      #{e _hoQGWMnyQPAh3k2jhWHh1}#
                      #{r _hoQGWMnyQPAh3k2jhWHh2}#
                      #{maps _hoQGWMnyQPAh3k2jhWHh3}#
                      #{ellipsis? _hoQGWMnyQPAh3k2jhWHh4}#
                      #{mod _hoQGWMnyQPAh3k2jhWHh5}#)
               (if (if (symbol? #{e _hoQGWMnyQPAh3k2jhWHh1}#)
                     #t
                     (if (if (vector? #{e _hoQGWMnyQPAh3k2jhWHh1}#)
                           (if (= (vector-length #{e _hoQGWMnyQPAh3k2jhWHh1}#)
                                  4)
                             (eq? (vector-ref #{e _hoQGWMnyQPAh3k2jhWHh1}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{e _hoQGWMnyQPAh3k2jhWHh1}# 1))
                       #f))
                 (let ((#{label _hoQGWMnyQPAh3k2jhWHiU}#
                         (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                           #{e _hoQGWMnyQPAh3k2jhWHh1}#
                           '(()))))
                   (let ((#{b _hoQGWMnyQPAh3k2jhWHiV}#
                           (let ((#{t _hoQGWMnyQPAh3k2jhWHic}#
                                   (assq #{label _hoQGWMnyQPAh3k2jhWHiU}#
                                         #{r _hoQGWMnyQPAh3k2jhWHh2}#)))
                             (if #{t _hoQGWMnyQPAh3k2jhWHic}#
                               (cdr #{t _hoQGWMnyQPAh3k2jhWHic}#)
                               (if (symbol? #{label _hoQGWMnyQPAh3k2jhWHiU}#)
                                 (let ((#{t _hoQGWMnyQPAh3k2jhWHii}#
                                         (#{get-global-definition-hook _hoQGWMnyQPAh3k2jhWHSc}#
                                           #{label _hoQGWMnyQPAh3k2jhWHiU}#
                                           #{mod _hoQGWMnyQPAh3k2jhWHh5}#)))
                                   (if #{t _hoQGWMnyQPAh3k2jhWHii}#
                                     #{t _hoQGWMnyQPAh3k2jhWHii}#
                                     '(global)))
                                 '(displaced-lexical))))))
                     (if (eq? (car #{b _hoQGWMnyQPAh3k2jhWHiV}#) 'syntax)
                       (call-with-values
                         (lambda ()
                           (let ((#{var.lev _hoQGWMnyQPAh3k2jhWHir}#
                                   (cdr #{b _hoQGWMnyQPAh3k2jhWHiV}#)))
                             (#{gen-ref _hoQGWMnyQPAh3k2jhWHgP}#
                               #{src _hoQGWMnyQPAh3k2jhWHh0}#
                               (car #{var.lev _hoQGWMnyQPAh3k2jhWHir}#)
                               (cdr #{var.lev _hoQGWMnyQPAh3k2jhWHir}#)
                               #{maps _hoQGWMnyQPAh3k2jhWHh3}#)))
                         (lambda (#{var _hoQGWMnyQPAh3k2jhWHiv}#
                                  #{maps _hoQGWMnyQPAh3k2jhWHiw}#)
                           (values
                             (list 'ref #{var _hoQGWMnyQPAh3k2jhWHiv}#)
                             #{maps _hoQGWMnyQPAh3k2jhWHiw}#)))
                       (if (#{ellipsis? _hoQGWMnyQPAh3k2jhWHh4}#
                             #{e _hoQGWMnyQPAh3k2jhWHh1}#)
                         (syntax-violation
                           'syntax
                           "misplaced ellipsis"
                           #{src _hoQGWMnyQPAh3k2jhWHh0}#)
                         (values
                           (list 'quote #{e _hoQGWMnyQPAh3k2jhWHh1}#)
                           #{maps _hoQGWMnyQPAh3k2jhWHh3}#)))))
                 (let ((#{tmp _hoQGWMnyQPAh3k2jhWHiy}#
                         ($sc-dispatch
                           #{e _hoQGWMnyQPAh3k2jhWHh1}#
                           '(any any))))
                   (if (if #{tmp _hoQGWMnyQPAh3k2jhWHiy}#
                         (@apply
                           (lambda (#{dots _hoQGWMnyQPAh3k2jhWHi2}#
                                    #{e _hoQGWMnyQPAh3k2jhWHi3}#)
                             (#{ellipsis? _hoQGWMnyQPAh3k2jhWHh4}#
                               #{dots _hoQGWMnyQPAh3k2jhWHi2}#))
                           #{tmp _hoQGWMnyQPAh3k2jhWHiy}#)
                         #f)
                     (@apply
                       (lambda (#{dots _hoQGWMnyQPAh3k2jhWHi4}#
                                #{e _hoQGWMnyQPAh3k2jhWHi5}#)
                         (#{gen-syntax _hoQGWMnyQPAh3k2jhWHgO}#
                           #{src _hoQGWMnyQPAh3k2jhWHh0}#
                           #{e _hoQGWMnyQPAh3k2jhWHi5}#
                           #{r _hoQGWMnyQPAh3k2jhWHh2}#
                           #{maps _hoQGWMnyQPAh3k2jhWHh3}#
                           (lambda (#{x _hoQGWMnyQPAh3k2jhWHi6}#) #f)
                           #{mod _hoQGWMnyQPAh3k2jhWHh5}#))
                       #{tmp _hoQGWMnyQPAh3k2jhWHiy}#)
                     (let ((#{tmp _hoQGWMnyQPAh3k2jhWHi7}#
                             ($sc-dispatch
                               #{e _hoQGWMnyQPAh3k2jhWHh1}#
                               '(any any . any))))
                       (if (if #{tmp _hoQGWMnyQPAh3k2jhWHi7}#
                             (@apply
                               (lambda (#{x _hoQGWMnyQPAh3k2jhWHi@}#
                                        #{dots _hoQGWMnyQPAh3k2jhWHjA}#
                                        #{y _hoQGWMnyQPAh3k2jhWHjB}#)
                                 (#{ellipsis? _hoQGWMnyQPAh3k2jhWHh4}#
                                   #{dots _hoQGWMnyQPAh3k2jhWHjA}#))
                               #{tmp _hoQGWMnyQPAh3k2jhWHi7}#)
                             #f)
                         (@apply
                           (lambda (#{x _hoQGWMnyQPAh3k2jhWHjC}#
                                    #{dots _hoQGWMnyQPAh3k2jhWHjD}#
                                    #{y _hoQGWMnyQPAh3k2jhWHjE}#)
                             (letrec*
                               ((#{f _hoQGWMnyQPAh3k2jhWHjF}#
                                  (lambda (#{y _hoQGWMnyQPAh3k2jhWHjN}#
                                           #{k _hoQGWMnyQPAh3k2jhWHjO}#)
                                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWHjQ}#
                                            ($sc-dispatch
                                              #{y _hoQGWMnyQPAh3k2jhWHjN}#
                                              '(any . any))))
                                      (if (if #{tmp _hoQGWMnyQPAh3k2jhWHjQ}#
                                            (@apply
                                              (lambda (#{dots _hoQGWMnyQPAh3k2jhWHjU}#
                                                       #{y _hoQGWMnyQPAh3k2jhWHjV}#)
                                                (#{ellipsis? _hoQGWMnyQPAh3k2jhWHh4}#
                                                  #{dots _hoQGWMnyQPAh3k2jhWHjU}#))
                                              #{tmp _hoQGWMnyQPAh3k2jhWHjQ}#)
                                            #f)
                                        (@apply
                                          (lambda (#{dots _hoQGWMnyQPAh3k2jhWHjW}#
                                                   #{y _hoQGWMnyQPAh3k2jhWHjX}#)
                                            (#{f _hoQGWMnyQPAh3k2jhWHjF}#
                                              #{y _hoQGWMnyQPAh3k2jhWHjX}#
                                              (lambda (#{maps _hoQGWMnyQPAh3k2jhWHjY}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{k _hoQGWMnyQPAh3k2jhWHjO}#
                                                      (cons '()
                                                            #{maps _hoQGWMnyQPAh3k2jhWHjY}#)))
                                                  (lambda (#{x _hoQGWMnyQPAh3k2jhWHjZ}#
                                                           #{maps _hoQGWMnyQPAh3k2jhWHja}#)
                                                    (if (null? (car #{maps _hoQGWMnyQPAh3k2jhWHja}#))
                                                      (syntax-violation
                                                        'syntax
                                                        "extra ellipsis"
                                                        #{src _hoQGWMnyQPAh3k2jhWHh0}#)
                                                      (values
                                                        (let ((#{map-env _hoQGWMnyQPAh3k2jhWHje}#
                                                                (car #{maps _hoQGWMnyQPAh3k2jhWHja}#)))
                                                          (list 'apply
                                                                '(primitive
                                                                   append)
                                                                (#{gen-map _hoQGWMnyQPAh3k2jhWHgR}#
                                                                  #{x _hoQGWMnyQPAh3k2jhWHjZ}#
                                                                  #{map-env _hoQGWMnyQPAh3k2jhWHje}#)))
                                                        (cdr #{maps _hoQGWMnyQPAh3k2jhWHja}#))))))))
                                          #{tmp _hoQGWMnyQPAh3k2jhWHjQ}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{gen-syntax _hoQGWMnyQPAh3k2jhWHgO}#
                                              #{src _hoQGWMnyQPAh3k2jhWHh0}#
                                              #{y _hoQGWMnyQPAh3k2jhWHjN}#
                                              #{r _hoQGWMnyQPAh3k2jhWHh2}#
                                              #{maps _hoQGWMnyQPAh3k2jhWHh3}#
                                              #{ellipsis? _hoQGWMnyQPAh3k2jhWHh4}#
                                              #{mod _hoQGWMnyQPAh3k2jhWHh5}#))
                                          (lambda (#{y _hoQGWMnyQPAh3k2jhWHjh}#
                                                   #{maps _hoQGWMnyQPAh3k2jhWHji}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{k _hoQGWMnyQPAh3k2jhWHjO}#
                                                  #{maps _hoQGWMnyQPAh3k2jhWHji}#))
                                              (lambda (#{x _hoQGWMnyQPAh3k2jhWHjj}#
                                                       #{maps _hoQGWMnyQPAh3k2jhWHjk}#)
                                                (values
                                                  (if (equal?
                                                        #{y _hoQGWMnyQPAh3k2jhWHjh}#
                                                        ''())
                                                    #{x _hoQGWMnyQPAh3k2jhWHjj}#
                                                    (list 'append
                                                          #{x _hoQGWMnyQPAh3k2jhWHjj}#
                                                          #{y _hoQGWMnyQPAh3k2jhWHjh}#))
                                                  #{maps _hoQGWMnyQPAh3k2jhWHjk}#))))))))))
                               (#{f _hoQGWMnyQPAh3k2jhWHjF}#
                                 #{y _hoQGWMnyQPAh3k2jhWHjE}#
                                 (lambda (#{maps _hoQGWMnyQPAh3k2jhWHjI}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax _hoQGWMnyQPAh3k2jhWHgO}#
                                         #{src _hoQGWMnyQPAh3k2jhWHh0}#
                                         #{x _hoQGWMnyQPAh3k2jhWHjC}#
                                         #{r _hoQGWMnyQPAh3k2jhWHh2}#
                                         (cons '()
                                               #{maps _hoQGWMnyQPAh3k2jhWHjI}#)
                                         #{ellipsis? _hoQGWMnyQPAh3k2jhWHh4}#
                                         #{mod _hoQGWMnyQPAh3k2jhWHh5}#))
                                     (lambda (#{x _hoQGWMnyQPAh3k2jhWHjJ}#
                                              #{maps _hoQGWMnyQPAh3k2jhWHjK}#)
                                       (if (null? (car #{maps _hoQGWMnyQPAh3k2jhWHjK}#))
                                         (syntax-violation
                                           'syntax
                                           "extra ellipsis"
                                           #{src _hoQGWMnyQPAh3k2jhWHh0}#)
                                         (values
                                           (#{gen-map _hoQGWMnyQPAh3k2jhWHgR}#
                                             #{x _hoQGWMnyQPAh3k2jhWHjJ}#
                                             (car #{maps _hoQGWMnyQPAh3k2jhWHjK}#))
                                           (cdr #{maps _hoQGWMnyQPAh3k2jhWHjK}#)))))))))
                           #{tmp _hoQGWMnyQPAh3k2jhWHi7}#)
                         (let ((#{tmp _hoQGWMnyQPAh3k2jhWHj0}#
                                 ($sc-dispatch
                                   #{e _hoQGWMnyQPAh3k2jhWHh1}#
                                   '(any . any))))
                           (if #{tmp _hoQGWMnyQPAh3k2jhWHj0}#
                             (@apply
                               (lambda (#{x _hoQGWMnyQPAh3k2jhWHj4}#
                                        #{y _hoQGWMnyQPAh3k2jhWHj5}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax _hoQGWMnyQPAh3k2jhWHgO}#
                                       #{src _hoQGWMnyQPAh3k2jhWHh0}#
                                       #{x _hoQGWMnyQPAh3k2jhWHj4}#
                                       #{r _hoQGWMnyQPAh3k2jhWHh2}#
                                       #{maps _hoQGWMnyQPAh3k2jhWHh3}#
                                       #{ellipsis? _hoQGWMnyQPAh3k2jhWHh4}#
                                       #{mod _hoQGWMnyQPAh3k2jhWHh5}#))
                                   (lambda (#{x _hoQGWMnyQPAh3k2jhWHj6}#
                                            #{maps _hoQGWMnyQPAh3k2jhWHj7}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{gen-syntax _hoQGWMnyQPAh3k2jhWHgO}#
                                           #{src _hoQGWMnyQPAh3k2jhWHh0}#
                                           #{y _hoQGWMnyQPAh3k2jhWHj5}#
                                           #{r _hoQGWMnyQPAh3k2jhWHh2}#
                                           #{maps _hoQGWMnyQPAh3k2jhWHj7}#
                                           #{ellipsis? _hoQGWMnyQPAh3k2jhWHh4}#
                                           #{mod _hoQGWMnyQPAh3k2jhWHh5}#))
                                       (lambda (#{y _hoQGWMnyQPAh3k2jhWHj8}#
                                                #{maps _hoQGWMnyQPAh3k2jhWHj9}#)
                                         (values
                                           (let ((#{atom-key _hoQGWMnyQPAh3k2jhWHkC}#
                                                   (car #{y _hoQGWMnyQPAh3k2jhWHj8}#)))
                                             (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWHkC}#
                                                       'quote)
                                               (if (eq? (car #{x _hoQGWMnyQPAh3k2jhWHj6}#)
                                                        'quote)
                                                 (list 'quote
                                                       (cons (car (cdr #{x _hoQGWMnyQPAh3k2jhWHj6}#))
                                                             (car (cdr #{y _hoQGWMnyQPAh3k2jhWHj8}#))))
                                                 (if (eq? (car (cdr #{y _hoQGWMnyQPAh3k2jhWHj8}#))
                                                          '())
                                                   (list 'list
                                                         #{x _hoQGWMnyQPAh3k2jhWHj6}#)
                                                   (list 'cons
                                                         #{x _hoQGWMnyQPAh3k2jhWHj6}#
                                                         #{y _hoQGWMnyQPAh3k2jhWHj8}#)))
                                               (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWHkC}#
                                                         'list)
                                                 (cons 'list
                                                       (cons #{x _hoQGWMnyQPAh3k2jhWHj6}#
                                                             (cdr #{y _hoQGWMnyQPAh3k2jhWHj8}#)))
                                                 (list 'cons
                                                       #{x _hoQGWMnyQPAh3k2jhWHj6}#
                                                       #{y _hoQGWMnyQPAh3k2jhWHj8}#))))
                                           #{maps _hoQGWMnyQPAh3k2jhWHj9}#))))))
                               #{tmp _hoQGWMnyQPAh3k2jhWHj0}#)
                             (let ((#{tmp _hoQGWMnyQPAh3k2jhWHkf}#
                                     ($sc-dispatch
                                       #{e _hoQGWMnyQPAh3k2jhWHh1}#
                                       '#(vector (any . each-any)))))
                               (if #{tmp _hoQGWMnyQPAh3k2jhWHkf}#
                                 (@apply
                                   (lambda (#{e1 _hoQGWMnyQPAh3k2jhWHkj}#
                                            #{e2 _hoQGWMnyQPAh3k2jhWHkk}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{gen-syntax _hoQGWMnyQPAh3k2jhWHgO}#
                                           #{src _hoQGWMnyQPAh3k2jhWHh0}#
                                           (cons #{e1 _hoQGWMnyQPAh3k2jhWHkj}#
                                                 #{e2 _hoQGWMnyQPAh3k2jhWHkk}#)
                                           #{r _hoQGWMnyQPAh3k2jhWHh2}#
                                           #{maps _hoQGWMnyQPAh3k2jhWHh3}#
                                           #{ellipsis? _hoQGWMnyQPAh3k2jhWHh4}#
                                           #{mod _hoQGWMnyQPAh3k2jhWHh5}#))
                                       (lambda (#{e _hoQGWMnyQPAh3k2jhWHkl}#
                                                #{maps _hoQGWMnyQPAh3k2jhWHkm}#)
                                         (values
                                           (if (eq? (car #{e _hoQGWMnyQPAh3k2jhWHkl}#)
                                                    'list)
                                             (cons 'vector
                                                   (cdr #{e _hoQGWMnyQPAh3k2jhWHkl}#))
                                             (if (eq? (car #{e _hoQGWMnyQPAh3k2jhWHkl}#)
                                                      'quote)
                                               (list 'quote
                                                     (list->vector
                                                       (car (cdr #{e _hoQGWMnyQPAh3k2jhWHkl}#))))
                                               (list 'list->vector
                                                     #{e _hoQGWMnyQPAh3k2jhWHkl}#)))
                                           #{maps _hoQGWMnyQPAh3k2jhWHkm}#))))
                                   #{tmp _hoQGWMnyQPAh3k2jhWHkf}#)
                                 (values
                                   (list 'quote #{e _hoQGWMnyQPAh3k2jhWHh1}#)
                                   #{maps _hoQGWMnyQPAh3k2jhWHh3}#))))))))))))
           (#{gen-ref _hoQGWMnyQPAh3k2jhWHgP}#
             (lambda (#{src _hoQGWMnyQPAh3k2jhWHlB}#
                      #{var _hoQGWMnyQPAh3k2jhWHlC}#
                      #{level _hoQGWMnyQPAh3k2jhWHlD}#
                      #{maps _hoQGWMnyQPAh3k2jhWHlE}#)
               (if (= #{level _hoQGWMnyQPAh3k2jhWHlD}# 0)
                 (values
                   #{var _hoQGWMnyQPAh3k2jhWHlC}#
                   #{maps _hoQGWMnyQPAh3k2jhWHlE}#)
                 (if (null? #{maps _hoQGWMnyQPAh3k2jhWHlE}#)
                   (syntax-violation
                     'syntax
                     "missing ellipsis"
                     #{src _hoQGWMnyQPAh3k2jhWHlB}#)
                   (call-with-values
                     (lambda ()
                       (#{gen-ref _hoQGWMnyQPAh3k2jhWHgP}#
                         #{src _hoQGWMnyQPAh3k2jhWHlB}#
                         #{var _hoQGWMnyQPAh3k2jhWHlC}#
                         (#{1-}# #{level _hoQGWMnyQPAh3k2jhWHlD}#)
                         (cdr #{maps _hoQGWMnyQPAh3k2jhWHlE}#)))
                     (lambda (#{outer-var _hoQGWMnyQPAh3k2jhWHlF}#
                              #{outer-maps _hoQGWMnyQPAh3k2jhWHlG}#)
                       (let ((#{b _hoQGWMnyQPAh3k2jhWHlH}#
                               (assq #{outer-var _hoQGWMnyQPAh3k2jhWHlF}#
                                     (car #{maps _hoQGWMnyQPAh3k2jhWHlE}#))))
                         (if #{b _hoQGWMnyQPAh3k2jhWHlH}#
                           (values
                             (cdr #{b _hoQGWMnyQPAh3k2jhWHlH}#)
                             #{maps _hoQGWMnyQPAh3k2jhWHlE}#)
                           (let ((#{inner-var _hoQGWMnyQPAh3k2jhWHlJ}#
                                   (gensym
                                     (string-append
                                       (symbol->string 'tmp)
                                       " "))))
                             (values
                               #{inner-var _hoQGWMnyQPAh3k2jhWHlJ}#
                               (cons (cons (cons #{outer-var _hoQGWMnyQPAh3k2jhWHlF}#
                                                 #{inner-var _hoQGWMnyQPAh3k2jhWHlJ}#)
                                           (car #{maps _hoQGWMnyQPAh3k2jhWHlE}#))
                                     #{outer-maps _hoQGWMnyQPAh3k2jhWHlG}#)))))))))))
           (#{gen-map _hoQGWMnyQPAh3k2jhWHgR}#
             (lambda (#{e _hoQGWMnyQPAh3k2jhWHlX}#
                      #{map-env _hoQGWMnyQPAh3k2jhWHlY}#)
               (let ((#{formals _hoQGWMnyQPAh3k2jhWHlZ}#
                       (map cdr #{map-env _hoQGWMnyQPAh3k2jhWHlY}#))
                     (#{actuals _hoQGWMnyQPAh3k2jhWHla}#
                       (map (lambda (#{x _hoQGWMnyQPAh3k2jhWHlc}#)
                              (list 'ref (car #{x _hoQGWMnyQPAh3k2jhWHlc}#)))
                            #{map-env _hoQGWMnyQPAh3k2jhWHlY}#)))
                 (if (eq? (car #{e _hoQGWMnyQPAh3k2jhWHlX}#) 'ref)
                   (car #{actuals _hoQGWMnyQPAh3k2jhWHla}#)
                   (if (and-map
                         (lambda (#{x _hoQGWMnyQPAh3k2jhWHld}#)
                           (if (eq? (car #{x _hoQGWMnyQPAh3k2jhWHld}#) 'ref)
                             (memq (car (cdr #{x _hoQGWMnyQPAh3k2jhWHld}#))
                                   #{formals _hoQGWMnyQPAh3k2jhWHlZ}#)
                             #f))
                         (cdr #{e _hoQGWMnyQPAh3k2jhWHlX}#))
                     (cons 'map
                           (cons (list 'primitive
                                       (car #{e _hoQGWMnyQPAh3k2jhWHlX}#))
                                 (map (let ((#{r _hoQGWMnyQPAh3k2jhWHlf}#
                                              (map cons
                                                   #{formals _hoQGWMnyQPAh3k2jhWHlZ}#
                                                   #{actuals _hoQGWMnyQPAh3k2jhWHla}#)))
                                        (lambda (#{x _hoQGWMnyQPAh3k2jhWHlg}#)
                                          (cdr (assq (car (cdr #{x _hoQGWMnyQPAh3k2jhWHlg}#))
                                                     #{r _hoQGWMnyQPAh3k2jhWHlf}#))))
                                      (cdr #{e _hoQGWMnyQPAh3k2jhWHlX}#))))
                     (cons 'map
                           (cons (list 'lambda
                                       #{formals _hoQGWMnyQPAh3k2jhWHlZ}#
                                       #{e _hoQGWMnyQPAh3k2jhWHlX}#)
                                 #{actuals _hoQGWMnyQPAh3k2jhWHla}#)))))))
           (#{regen _hoQGWMnyQPAh3k2jhWHgV}#
             (lambda (#{x _hoQGWMnyQPAh3k2jhWHli}#)
               (let ((#{atom-key _hoQGWMnyQPAh3k2jhWHlj}#
                       (car #{x _hoQGWMnyQPAh3k2jhWHli}#)))
                 (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWHlj}# 'ref)
                   (let ((#{name _hoQGWMnyQPAh3k2jhWHlt}#
                           (car (cdr #{x _hoQGWMnyQPAh3k2jhWHli}#)))
                         (#{var _hoQGWMnyQPAh3k2jhWHlu}#
                           (car (cdr #{x _hoQGWMnyQPAh3k2jhWHli}#))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 3)
                       #f
                       #{name _hoQGWMnyQPAh3k2jhWHlt}#
                       #{var _hoQGWMnyQPAh3k2jhWHlu}#))
                   (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWHlj}#
                             'primitive)
                     (let ((#{name _hoQGWMnyQPAh3k2jhWHl6}#
                             (car (cdr #{x _hoQGWMnyQPAh3k2jhWHli}#))))
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           #{name _hoQGWMnyQPAh3k2jhWHl6}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           #{name _hoQGWMnyQPAh3k2jhWHl6}#
                           #f)))
                     (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWHlj}# 'quote)
                       (let ((#{exp _hoQGWMnyQPAh3k2jhWHmM}#
                               (car (cdr #{x _hoQGWMnyQPAh3k2jhWHli}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 1)
                           #f
                           #{exp _hoQGWMnyQPAh3k2jhWHmM}#))
                       (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWHlj}#
                                 'lambda)
                         (if (list? (car (cdr #{x _hoQGWMnyQPAh3k2jhWHli}#)))
                           (let ((#{req _hoQGWMnyQPAh3k2jhWHmX}#
                                   (car (cdr #{x _hoQGWMnyQPAh3k2jhWHli}#)))
                                 (#{vars _hoQGWMnyQPAh3k2jhWHmZ}#
                                   (car (cdr #{x _hoQGWMnyQPAh3k2jhWHli}#)))
                                 (#{exp _hoQGWMnyQPAh3k2jhWHmb}#
                                   (#{regen _hoQGWMnyQPAh3k2jhWHgV}#
                                     (car (cdr (cdr #{x _hoQGWMnyQPAh3k2jhWHli}#))))))
                             (let ((#{body _hoQGWMnyQPAh3k2jhWHmg}#
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       #{req _hoQGWMnyQPAh3k2jhWHmX}#
                                       #f
                                       #f
                                       #f
                                       '()
                                       #{vars _hoQGWMnyQPAh3k2jhWHmZ}#
                                       #{exp _hoQGWMnyQPAh3k2jhWHmb}#
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 #{body _hoQGWMnyQPAh3k2jhWHmg}#)))
                           (error "how did we get here"
                                  #{x _hoQGWMnyQPAh3k2jhWHli}#))
                         (let ((#{fun-exp _hoQGWMnyQPAh3k2jhWHmw}#
                                 (let ((#{name _hoQGWMnyQPAh3k2jhWHm5}#
                                         (car #{x _hoQGWMnyQPAh3k2jhWHli}#)))
                                   (if (equal?
                                         (module-name (current-module))
                                         '(guile))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 7)
                                       #f
                                       #{name _hoQGWMnyQPAh3k2jhWHm5}#)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 5)
                                       #f
                                       '(guile)
                                       #{name _hoQGWMnyQPAh3k2jhWHm5}#
                                       #f))))
                               (#{arg-exps _hoQGWMnyQPAh3k2jhWHmx}#
                                 (map #{regen _hoQGWMnyQPAh3k2jhWHgV}#
                                      (cdr #{x _hoQGWMnyQPAh3k2jhWHli}#))))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 11)
                             #f
                             #{fun-exp _hoQGWMnyQPAh3k2jhWHmw}#
                             #{arg-exps _hoQGWMnyQPAh3k2jhWHmx}#))))))))))
          (lambda (#{e _hoQGWMnyQPAh3k2jhWHgW}#
                   #{r _hoQGWMnyQPAh3k2jhWHgX}#
                   #{w _hoQGWMnyQPAh3k2jhWHgY}#
                   #{s _hoQGWMnyQPAh3k2jhWHgZ}#
                   #{mod _hoQGWMnyQPAh3k2jhWHga}#)
            (let ((#{e _hoQGWMnyQPAh3k2jhWHgb}#
                    (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                      (begin
                        (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWHgW}#)
                              #{s _hoQGWMnyQPAh3k2jhWHgZ}#
                              #f)
                          (set-source-properties!
                            #{e _hoQGWMnyQPAh3k2jhWHgW}#
                            #{s _hoQGWMnyQPAh3k2jhWHgZ}#))
                        #{e _hoQGWMnyQPAh3k2jhWHgW}#)
                      #{w _hoQGWMnyQPAh3k2jhWHgY}#
                      #{mod _hoQGWMnyQPAh3k2jhWHga}#)))
              (let ((#{tmp _hoQGWMnyQPAh3k2jhWHgd}#
                      ($sc-dispatch
                        #{e _hoQGWMnyQPAh3k2jhWHgb}#
                        '(_ any))))
                (if #{tmp _hoQGWMnyQPAh3k2jhWHgd}#
                  (@apply
                    (lambda (#{x _hoQGWMnyQPAh3k2jhWHg2}#)
                      (call-with-values
                        (lambda ()
                          (#{gen-syntax _hoQGWMnyQPAh3k2jhWHgO}#
                            #{e _hoQGWMnyQPAh3k2jhWHgb}#
                            #{x _hoQGWMnyQPAh3k2jhWHg2}#
                            #{r _hoQGWMnyQPAh3k2jhWHgX}#
                            '()
                            #{ellipsis? _hoQGWMnyQPAh3k2jhWHTt}#
                            #{mod _hoQGWMnyQPAh3k2jhWHga}#))
                        (lambda (#{e _hoQGWMnyQPAh3k2jhWHhs}#
                                 #{maps _hoQGWMnyQPAh3k2jhWHht}#)
                          (#{regen _hoQGWMnyQPAh3k2jhWHgV}#
                            #{e _hoQGWMnyQPAh3k2jhWHhs}#))))
                    #{tmp _hoQGWMnyQPAh3k2jhWHgd}#)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    #{e _hoQGWMnyQPAh3k2jhWHgb}#)))))))
      (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
        'core
        'lambda
        (lambda (#{e _hoQGWMnyQPAh3k2jhWHp2}#
                 #{r _hoQGWMnyQPAh3k2jhWHp3}#
                 #{w _hoQGWMnyQPAh3k2jhWHp4}#
                 #{s _hoQGWMnyQPAh3k2jhWHp5}#
                 #{mod _hoQGWMnyQPAh3k2jhWHp6}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWHp8}#
                  ($sc-dispatch
                    #{e _hoQGWMnyQPAh3k2jhWHp2}#
                    '(_ any any . each-any))))
            (if #{tmp _hoQGWMnyQPAh3k2jhWHp8}#
              (@apply
                (lambda (#{args _hoQGWMnyQPAh3k2jhWHqA}#
                         #{e1 _hoQGWMnyQPAh3k2jhWHqB}#
                         #{e2 _hoQGWMnyQPAh3k2jhWHqC}#)
                  (call-with-values
                    (lambda ()
                      (#{lambda-formals _hoQGWMnyQPAh3k2jhWHTu}#
                        #{args _hoQGWMnyQPAh3k2jhWHqA}#))
                    (lambda (#{req _hoQGWMnyQPAh3k2jhWHqF}#
                             #{opt _hoQGWMnyQPAh3k2jhWHqG}#
                             #{rest _hoQGWMnyQPAh3k2jhWHqH}#
                             #{kw _hoQGWMnyQPAh3k2jhWHqI}#)
                      (letrec*
                        ((#{lp _hoQGWMnyQPAh3k2jhWHqJ}#
                           (lambda (#{body _hoQGWMnyQPAh3k2jhWHqM}#
                                    #{meta _hoQGWMnyQPAh3k2jhWHqN}#)
                             (let ((#{tmp _hoQGWMnyQPAh3k2jhWHqP}#
                                     ($sc-dispatch
                                       #{body _hoQGWMnyQPAh3k2jhWHqM}#
                                       '(any any . each-any))))
                               (if (if #{tmp _hoQGWMnyQPAh3k2jhWHqP}#
                                     (@apply
                                       (lambda (#{docstring _hoQGWMnyQPAh3k2jhWHqT}#
                                                #{e1 _hoQGWMnyQPAh3k2jhWHqU}#
                                                #{e2 _hoQGWMnyQPAh3k2jhWHqV}#)
                                         (string?
                                           (syntax->datum
                                             #{docstring _hoQGWMnyQPAh3k2jhWHqT}#)))
                                       #{tmp _hoQGWMnyQPAh3k2jhWHqP}#)
                                     #f)
                                 (@apply
                                   (lambda (#{docstring _hoQGWMnyQPAh3k2jhWHqW}#
                                            #{e1 _hoQGWMnyQPAh3k2jhWHqX}#
                                            #{e2 _hoQGWMnyQPAh3k2jhWHqY}#)
                                     (#{lp _hoQGWMnyQPAh3k2jhWHqJ}#
                                       (cons #{e1 _hoQGWMnyQPAh3k2jhWHqX}#
                                             #{e2 _hoQGWMnyQPAh3k2jhWHqY}#)
                                       (append
                                         #{meta _hoQGWMnyQPAh3k2jhWHqN}#
                                         (list (cons 'documentation
                                                     (syntax->datum
                                                       #{docstring _hoQGWMnyQPAh3k2jhWHqW}#))))))
                                   #{tmp _hoQGWMnyQPAh3k2jhWHqP}#)
                                 (let ((#{tmp _hoQGWMnyQPAh3k2jhWHqZ}#
                                         ($sc-dispatch
                                           #{body _hoQGWMnyQPAh3k2jhWHqM}#
                                           '(#(vector #(each (any . any)))
                                             any
                                             .
                                             each-any))))
                                   (if #{tmp _hoQGWMnyQPAh3k2jhWHqZ}#
                                     (@apply
                                       (lambda (#{k _hoQGWMnyQPAh3k2jhWHqd}#
                                                #{v _hoQGWMnyQPAh3k2jhWHqe}#
                                                #{e1 _hoQGWMnyQPAh3k2jhWHqf}#
                                                #{e2 _hoQGWMnyQPAh3k2jhWHqg}#)
                                         (#{lp _hoQGWMnyQPAh3k2jhWHqJ}#
                                           (cons #{e1 _hoQGWMnyQPAh3k2jhWHqf}#
                                                 #{e2 _hoQGWMnyQPAh3k2jhWHqg}#)
                                           (append
                                             #{meta _hoQGWMnyQPAh3k2jhWHqN}#
                                             (syntax->datum
                                               (map cons
                                                    #{k _hoQGWMnyQPAh3k2jhWHqd}#
                                                    #{v _hoQGWMnyQPAh3k2jhWHqe}#)))))
                                       #{tmp _hoQGWMnyQPAh3k2jhWHqZ}#)
                                     (#{expand-simple-lambda _hoQGWMnyQPAh3k2jhWHTv}#
                                       #{e _hoQGWMnyQPAh3k2jhWHp2}#
                                       #{r _hoQGWMnyQPAh3k2jhWHp3}#
                                       #{w _hoQGWMnyQPAh3k2jhWHp4}#
                                       #{s _hoQGWMnyQPAh3k2jhWHp5}#
                                       #{mod _hoQGWMnyQPAh3k2jhWHp6}#
                                       #{req _hoQGWMnyQPAh3k2jhWHqF}#
                                       #{rest _hoQGWMnyQPAh3k2jhWHqH}#
                                       #{meta _hoQGWMnyQPAh3k2jhWHqN}#
                                       #{body _hoQGWMnyQPAh3k2jhWHqM}#))))))))
                        (#{lp _hoQGWMnyQPAh3k2jhWHqJ}#
                          (cons #{e1 _hoQGWMnyQPAh3k2jhWHqB}#
                                #{e2 _hoQGWMnyQPAh3k2jhWHqC}#)
                          '())))))
                #{tmp _hoQGWMnyQPAh3k2jhWHp8}#)
              (syntax-violation
                'lambda
                "bad lambda"
                #{e _hoQGWMnyQPAh3k2jhWHp2}#)))))
      (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
        'core
        'lambda*
        (lambda (#{e _hoQGWMnyQPAh3k2jhWHu9}#
                 #{r _hoQGWMnyQPAh3k2jhWHu$}#
                 #{w _hoQGWMnyQPAh3k2jhWHu@}#
                 #{s _hoQGWMnyQPAh3k2jhWHvA}#
                 #{mod _hoQGWMnyQPAh3k2jhWHvB}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWHvD}#
                  ($sc-dispatch
                    #{e _hoQGWMnyQPAh3k2jhWHu9}#
                    '(_ any any . each-any))))
            (if #{tmp _hoQGWMnyQPAh3k2jhWHvD}#
              (@apply
                (lambda (#{args _hoQGWMnyQPAh3k2jhWHvH}#
                         #{e1 _hoQGWMnyQPAh3k2jhWHvI}#
                         #{e2 _hoQGWMnyQPAh3k2jhWHvJ}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case _hoQGWMnyQPAh3k2jhWHTx}#
                        #{e _hoQGWMnyQPAh3k2jhWHu9}#
                        #{r _hoQGWMnyQPAh3k2jhWHu$}#
                        #{w _hoQGWMnyQPAh3k2jhWHu@}#
                        #{s _hoQGWMnyQPAh3k2jhWHvA}#
                        #{mod _hoQGWMnyQPAh3k2jhWHvB}#
                        #{lambda*-formals _hoQGWMnyQPAh3k2jhWHTw}#
                        (list (cons #{args _hoQGWMnyQPAh3k2jhWHvH}#
                                    (cons #{e1 _hoQGWMnyQPAh3k2jhWHvI}#
                                          #{e2 _hoQGWMnyQPAh3k2jhWHvJ}#)))))
                    (lambda (#{meta _hoQGWMnyQPAh3k2jhWHvM}#
                             #{lcase _hoQGWMnyQPAh3k2jhWHvN}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s _hoQGWMnyQPAh3k2jhWHvA}#
                        #{meta _hoQGWMnyQPAh3k2jhWHvM}#
                        #{lcase _hoQGWMnyQPAh3k2jhWHvN}#))))
                #{tmp _hoQGWMnyQPAh3k2jhWHvD}#)
              (syntax-violation
                'lambda
                "bad lambda*"
                #{e _hoQGWMnyQPAh3k2jhWHu9}#)))))
      (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
        'core
        'case-lambda
        (lambda (#{e _hoQGWMnyQPAh3k2jhWHx3}#
                 #{r _hoQGWMnyQPAh3k2jhWHx4}#
                 #{w _hoQGWMnyQPAh3k2jhWHx5}#
                 #{s _hoQGWMnyQPAh3k2jhWHx6}#
                 #{mod _hoQGWMnyQPAh3k2jhWHx7}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWHx9}#
                  ($sc-dispatch
                    #{e _hoQGWMnyQPAh3k2jhWHx3}#
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if #{tmp _hoQGWMnyQPAh3k2jhWHx9}#
              (@apply
                (lambda (#{args _hoQGWMnyQPAh3k2jhWHyB}#
                         #{e1 _hoQGWMnyQPAh3k2jhWHyC}#
                         #{e2 _hoQGWMnyQPAh3k2jhWHyD}#
                         #{args* _hoQGWMnyQPAh3k2jhWHyE}#
                         #{e1* _hoQGWMnyQPAh3k2jhWHyF}#
                         #{e2* _hoQGWMnyQPAh3k2jhWHyG}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case _hoQGWMnyQPAh3k2jhWHTx}#
                        #{e _hoQGWMnyQPAh3k2jhWHx3}#
                        #{r _hoQGWMnyQPAh3k2jhWHx4}#
                        #{w _hoQGWMnyQPAh3k2jhWHx5}#
                        #{s _hoQGWMnyQPAh3k2jhWHx6}#
                        #{mod _hoQGWMnyQPAh3k2jhWHx7}#
                        #{lambda-formals _hoQGWMnyQPAh3k2jhWHTu}#
                        (cons (cons #{args _hoQGWMnyQPAh3k2jhWHyB}#
                                    (cons #{e1 _hoQGWMnyQPAh3k2jhWHyC}#
                                          #{e2 _hoQGWMnyQPAh3k2jhWHyD}#))
                              (map (lambda (#{tmp _hoQGWMnyQPAh3k2jhWHH2 _hoQGWMnyQPAh3k2jhWHyJ}#
                                            #{tmp _hoQGWMnyQPAh3k2jhWHH1 _hoQGWMnyQPAh3k2jhWHyK}#
                                            #{tmp _hoQGWMnyQPAh3k2jhWHH0 _hoQGWMnyQPAh3k2jhWHyL}#)
                                     (cons #{tmp _hoQGWMnyQPAh3k2jhWHH0 _hoQGWMnyQPAh3k2jhWHyL}#
                                           (cons #{tmp _hoQGWMnyQPAh3k2jhWHH1 _hoQGWMnyQPAh3k2jhWHyK}#
                                                 #{tmp _hoQGWMnyQPAh3k2jhWHH2 _hoQGWMnyQPAh3k2jhWHyJ}#)))
                                   #{e2* _hoQGWMnyQPAh3k2jhWHyG}#
                                   #{e1* _hoQGWMnyQPAh3k2jhWHyF}#
                                   #{args* _hoQGWMnyQPAh3k2jhWHyE}#))))
                    (lambda (#{meta _hoQGWMnyQPAh3k2jhWHyM}#
                             #{lcase _hoQGWMnyQPAh3k2jhWHyN}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s _hoQGWMnyQPAh3k2jhWHx6}#
                        #{meta _hoQGWMnyQPAh3k2jhWHyM}#
                        #{lcase _hoQGWMnyQPAh3k2jhWHyN}#))))
                #{tmp _hoQGWMnyQPAh3k2jhWHx9}#)
              (syntax-violation
                'case-lambda
                "bad case-lambda"
                #{e _hoQGWMnyQPAh3k2jhWHx3}#)))))
      (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
        'core
        'case-lambda*
        (lambda (#{e _hoQGWMnyQPAh3k2jhWH0v}#
                 #{r _hoQGWMnyQPAh3k2jhWH0w}#
                 #{w _hoQGWMnyQPAh3k2jhWH0x}#
                 #{s _hoQGWMnyQPAh3k2jhWH0y}#
                 #{mod _hoQGWMnyQPAh3k2jhWH0z}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWH01}#
                  ($sc-dispatch
                    #{e _hoQGWMnyQPAh3k2jhWH0v}#
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if #{tmp _hoQGWMnyQPAh3k2jhWH01}#
              (@apply
                (lambda (#{args _hoQGWMnyQPAh3k2jhWH05}#
                         #{e1 _hoQGWMnyQPAh3k2jhWH06}#
                         #{e2 _hoQGWMnyQPAh3k2jhWH07}#
                         #{args* _hoQGWMnyQPAh3k2jhWH08}#
                         #{e1* _hoQGWMnyQPAh3k2jhWH09}#
                         #{e2* _hoQGWMnyQPAh3k2jhWH0$}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case _hoQGWMnyQPAh3k2jhWHTx}#
                        #{e _hoQGWMnyQPAh3k2jhWH0v}#
                        #{r _hoQGWMnyQPAh3k2jhWH0w}#
                        #{w _hoQGWMnyQPAh3k2jhWH0x}#
                        #{s _hoQGWMnyQPAh3k2jhWH0y}#
                        #{mod _hoQGWMnyQPAh3k2jhWH0z}#
                        #{lambda*-formals _hoQGWMnyQPAh3k2jhWHTw}#
                        (cons (cons #{args _hoQGWMnyQPAh3k2jhWH05}#
                                    (cons #{e1 _hoQGWMnyQPAh3k2jhWH06}#
                                          #{e2 _hoQGWMnyQPAh3k2jhWH07}#))
                              (map (lambda (#{tmp _hoQGWMnyQPAh3k2jhWHIL _hoQGWMnyQPAh3k2jhWH1B}#
                                            #{tmp _hoQGWMnyQPAh3k2jhWHIK _hoQGWMnyQPAh3k2jhWH1C}#
                                            #{tmp _hoQGWMnyQPAh3k2jhWHIJ _hoQGWMnyQPAh3k2jhWH1D}#)
                                     (cons #{tmp _hoQGWMnyQPAh3k2jhWHIJ _hoQGWMnyQPAh3k2jhWH1D}#
                                           (cons #{tmp _hoQGWMnyQPAh3k2jhWHIK _hoQGWMnyQPAh3k2jhWH1C}#
                                                 #{tmp _hoQGWMnyQPAh3k2jhWHIL _hoQGWMnyQPAh3k2jhWH1B}#)))
                                   #{e2* _hoQGWMnyQPAh3k2jhWH0$}#
                                   #{e1* _hoQGWMnyQPAh3k2jhWH09}#
                                   #{args* _hoQGWMnyQPAh3k2jhWH08}#))))
                    (lambda (#{meta _hoQGWMnyQPAh3k2jhWH1E}#
                             #{lcase _hoQGWMnyQPAh3k2jhWH1F}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s _hoQGWMnyQPAh3k2jhWH0y}#
                        #{meta _hoQGWMnyQPAh3k2jhWH1E}#
                        #{lcase _hoQGWMnyQPAh3k2jhWH1F}#))))
                #{tmp _hoQGWMnyQPAh3k2jhWH01}#)
              (syntax-violation
                'case-lambda
                "bad case-lambda*"
                #{e _hoQGWMnyQPAh3k2jhWH0v}#)))))
      (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
        'core
        'let
        (letrec*
          ((#{expand-let _hoQGWMnyQPAh3k2jhWH4E}#
             (lambda (#{e _hoQGWMnyQPAh3k2jhWH6Z}#
                      #{r _hoQGWMnyQPAh3k2jhWH6a}#
                      #{w _hoQGWMnyQPAh3k2jhWH6b}#
                      #{s _hoQGWMnyQPAh3k2jhWH6c}#
                      #{mod _hoQGWMnyQPAh3k2jhWH6d}#
                      #{constructor _hoQGWMnyQPAh3k2jhWH6e}#
                      #{ids _hoQGWMnyQPAh3k2jhWH6f}#
                      #{vals _hoQGWMnyQPAh3k2jhWH6g}#
                      #{exps _hoQGWMnyQPAh3k2jhWH6h}#)
               (if (not (#{valid-bound-ids? _hoQGWMnyQPAh3k2jhWHTb}#
                          #{ids _hoQGWMnyQPAh3k2jhWH6f}#))
                 (syntax-violation
                   'let
                   "duplicate bound variable"
                   #{e _hoQGWMnyQPAh3k2jhWH6Z}#)
                 (let ((#{labels _hoQGWMnyQPAh3k2jhWH7v}#
                         (#{gen-labels _hoQGWMnyQPAh3k2jhWHTE}#
                           #{ids _hoQGWMnyQPAh3k2jhWH6f}#))
                       (#{new-vars _hoQGWMnyQPAh3k2jhWH7w}#
                         (map #{gen-var _hoQGWMnyQPAh3k2jhWHTz}#
                              #{ids _hoQGWMnyQPAh3k2jhWH6f}#)))
                   (let ((#{nw _hoQGWMnyQPAh3k2jhWH7x}#
                           (#{make-binding-wrap _hoQGWMnyQPAh3k2jhWHTP}#
                             #{ids _hoQGWMnyQPAh3k2jhWH6f}#
                             #{labels _hoQGWMnyQPAh3k2jhWH7v}#
                             #{w _hoQGWMnyQPAh3k2jhWH6b}#))
                         (#{nr _hoQGWMnyQPAh3k2jhWH7y}#
                           (#{extend-var-env _hoQGWMnyQPAh3k2jhWHS8}#
                             #{labels _hoQGWMnyQPAh3k2jhWH7v}#
                             #{new-vars _hoQGWMnyQPAh3k2jhWH7w}#
                             #{r _hoQGWMnyQPAh3k2jhWH6a}#)))
                     (#{constructor _hoQGWMnyQPAh3k2jhWH6e}#
                       #{s _hoQGWMnyQPAh3k2jhWH6c}#
                       (map syntax->datum
                            #{ids _hoQGWMnyQPAh3k2jhWH6f}#)
                       #{new-vars _hoQGWMnyQPAh3k2jhWH7w}#
                       (map (lambda (#{x _hoQGWMnyQPAh3k2jhWH8D}#)
                              (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                #{x _hoQGWMnyQPAh3k2jhWH8D}#
                                #{r _hoQGWMnyQPAh3k2jhWH6a}#
                                #{w _hoQGWMnyQPAh3k2jhWH6b}#
                                #{mod _hoQGWMnyQPAh3k2jhWH6d}#))
                            #{vals _hoQGWMnyQPAh3k2jhWH6g}#)
                       (#{expand-body _hoQGWMnyQPAh3k2jhWHTp}#
                         #{exps _hoQGWMnyQPAh3k2jhWH6h}#
                         (#{source-wrap _hoQGWMnyQPAh3k2jhWHTf}#
                           #{e _hoQGWMnyQPAh3k2jhWH6Z}#
                           #{nw _hoQGWMnyQPAh3k2jhWH7x}#
                           #{s _hoQGWMnyQPAh3k2jhWH6c}#
                           #{mod _hoQGWMnyQPAh3k2jhWH6d}#)
                         #{nr _hoQGWMnyQPAh3k2jhWH7y}#
                         #{nw _hoQGWMnyQPAh3k2jhWH7x}#
                         #{mod _hoQGWMnyQPAh3k2jhWH6d}#))))))))
          (lambda (#{e _hoQGWMnyQPAh3k2jhWH4F}#
                   #{r _hoQGWMnyQPAh3k2jhWH4G}#
                   #{w _hoQGWMnyQPAh3k2jhWH4H}#
                   #{s _hoQGWMnyQPAh3k2jhWH4I}#
                   #{mod _hoQGWMnyQPAh3k2jhWH4J}#)
            (let ((#{tmp _hoQGWMnyQPAh3k2jhWH4L}#
                    ($sc-dispatch
                      #{e _hoQGWMnyQPAh3k2jhWH4F}#
                      '(_ #(each (any any)) any . each-any))))
              (if (if #{tmp _hoQGWMnyQPAh3k2jhWH4L}#
                    (@apply
                      (lambda (#{id _hoQGWMnyQPAh3k2jhWH4P}#
                               #{val _hoQGWMnyQPAh3k2jhWH4Q}#
                               #{e1 _hoQGWMnyQPAh3k2jhWH4R}#
                               #{e2 _hoQGWMnyQPAh3k2jhWH4S}#)
                        (and-map
                          #{id? _hoQGWMnyQPAh3k2jhWHTB}#
                          #{id _hoQGWMnyQPAh3k2jhWH4P}#))
                      #{tmp _hoQGWMnyQPAh3k2jhWH4L}#)
                    #f)
                (@apply
                  (lambda (#{id _hoQGWMnyQPAh3k2jhWH4i}#
                           #{val _hoQGWMnyQPAh3k2jhWH4j}#
                           #{e1 _hoQGWMnyQPAh3k2jhWH4k}#
                           #{e2 _hoQGWMnyQPAh3k2jhWH4l}#)
                    (#{expand-let _hoQGWMnyQPAh3k2jhWH4E}#
                      #{e _hoQGWMnyQPAh3k2jhWH4F}#
                      #{r _hoQGWMnyQPAh3k2jhWH4G}#
                      #{w _hoQGWMnyQPAh3k2jhWH4H}#
                      #{s _hoQGWMnyQPAh3k2jhWH4I}#
                      #{mod _hoQGWMnyQPAh3k2jhWH4J}#
                      #{build-let _hoQGWMnyQPAh3k2jhWHSv}#
                      #{id _hoQGWMnyQPAh3k2jhWH4i}#
                      #{val _hoQGWMnyQPAh3k2jhWH4j}#
                      (cons #{e1 _hoQGWMnyQPAh3k2jhWH4k}#
                            #{e2 _hoQGWMnyQPAh3k2jhWH4l}#)))
                  #{tmp _hoQGWMnyQPAh3k2jhWH4L}#)
                (let ((#{tmp _hoQGWMnyQPAh3k2jhWH5D}#
                        ($sc-dispatch
                          #{e _hoQGWMnyQPAh3k2jhWH4F}#
                          '(_ any #(each (any any)) any . each-any))))
                  (if (if #{tmp _hoQGWMnyQPAh3k2jhWH5D}#
                        (@apply
                          (lambda (#{f _hoQGWMnyQPAh3k2jhWH5H}#
                                   #{id _hoQGWMnyQPAh3k2jhWH5I}#
                                   #{val _hoQGWMnyQPAh3k2jhWH5J}#
                                   #{e1 _hoQGWMnyQPAh3k2jhWH5K}#
                                   #{e2 _hoQGWMnyQPAh3k2jhWH5L}#)
                            (if (if (symbol? #{f _hoQGWMnyQPAh3k2jhWH5H}#)
                                  #t
                                  (if (if (vector?
                                            #{f _hoQGWMnyQPAh3k2jhWH5H}#)
                                        (if (= (vector-length
                                                 #{f _hoQGWMnyQPAh3k2jhWH5H}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{f _hoQGWMnyQPAh3k2jhWH5H}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{f _hoQGWMnyQPAh3k2jhWH5H}#
                                        1))
                                    #f))
                              (and-map
                                #{id? _hoQGWMnyQPAh3k2jhWHTB}#
                                #{id _hoQGWMnyQPAh3k2jhWH5I}#)
                              #f))
                          #{tmp _hoQGWMnyQPAh3k2jhWH5D}#)
                        #f)
                    (@apply
                      (lambda (#{f _hoQGWMnyQPAh3k2jhWH51}#
                               #{id _hoQGWMnyQPAh3k2jhWH52}#
                               #{val _hoQGWMnyQPAh3k2jhWH53}#
                               #{e1 _hoQGWMnyQPAh3k2jhWH54}#
                               #{e2 _hoQGWMnyQPAh3k2jhWH55}#)
                        (#{expand-let _hoQGWMnyQPAh3k2jhWH4E}#
                          #{e _hoQGWMnyQPAh3k2jhWH4F}#
                          #{r _hoQGWMnyQPAh3k2jhWH4G}#
                          #{w _hoQGWMnyQPAh3k2jhWH4H}#
                          #{s _hoQGWMnyQPAh3k2jhWH4I}#
                          #{mod _hoQGWMnyQPAh3k2jhWH4J}#
                          #{build-named-let _hoQGWMnyQPAh3k2jhWHSw}#
                          (cons #{f _hoQGWMnyQPAh3k2jhWH51}#
                                #{id _hoQGWMnyQPAh3k2jhWH52}#)
                          #{val _hoQGWMnyQPAh3k2jhWH53}#
                          (cons #{e1 _hoQGWMnyQPAh3k2jhWH54}#
                                #{e2 _hoQGWMnyQPAh3k2jhWH55}#)))
                      #{tmp _hoQGWMnyQPAh3k2jhWH5D}#)
                    (syntax-violation
                      'let
                      "bad let"
                      (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                        (begin
                          (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWH4F}#)
                                #{s _hoQGWMnyQPAh3k2jhWH4I}#
                                #f)
                            (set-source-properties!
                              #{e _hoQGWMnyQPAh3k2jhWH4F}#
                              #{s _hoQGWMnyQPAh3k2jhWH4I}#))
                          #{e _hoQGWMnyQPAh3k2jhWH4F}#)
                        #{w _hoQGWMnyQPAh3k2jhWH4H}#
                        #{mod _hoQGWMnyQPAh3k2jhWH4J}#)))))))))
      (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
        'core
        'letrec
        (lambda (#{e _hoQGWMnyQPAh3k2jhWICR}#
                 #{r _hoQGWMnyQPAh3k2jhWICS}#
                 #{w _hoQGWMnyQPAh3k2jhWICT}#
                 #{s _hoQGWMnyQPAh3k2jhWICU}#
                 #{mod _hoQGWMnyQPAh3k2jhWICV}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWICX}#
                  ($sc-dispatch
                    #{e _hoQGWMnyQPAh3k2jhWICR}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp _hoQGWMnyQPAh3k2jhWICX}#
                  (@apply
                    (lambda (#{id _hoQGWMnyQPAh3k2jhWICb}#
                             #{val _hoQGWMnyQPAh3k2jhWICc}#
                             #{e1 _hoQGWMnyQPAh3k2jhWICd}#
                             #{e2 _hoQGWMnyQPAh3k2jhWICe}#)
                      (and-map
                        #{id? _hoQGWMnyQPAh3k2jhWHTB}#
                        #{id _hoQGWMnyQPAh3k2jhWICb}#))
                    #{tmp _hoQGWMnyQPAh3k2jhWICX}#)
                  #f)
              (@apply
                (lambda (#{id _hoQGWMnyQPAh3k2jhWICu}#
                         #{val _hoQGWMnyQPAh3k2jhWICv}#
                         #{e1 _hoQGWMnyQPAh3k2jhWICw}#
                         #{e2 _hoQGWMnyQPAh3k2jhWICx}#)
                  (if (not (#{valid-bound-ids? _hoQGWMnyQPAh3k2jhWHTb}#
                             #{id _hoQGWMnyQPAh3k2jhWICu}#))
                    (syntax-violation
                      'letrec
                      "duplicate bound variable"
                      #{e _hoQGWMnyQPAh3k2jhWICR}#)
                    (let ((#{labels _hoQGWMnyQPAh3k2jhWIEL}#
                            (#{gen-labels _hoQGWMnyQPAh3k2jhWHTE}#
                              #{id _hoQGWMnyQPAh3k2jhWICu}#))
                          (#{new-vars _hoQGWMnyQPAh3k2jhWIEM}#
                            (map #{gen-var _hoQGWMnyQPAh3k2jhWHTz}#
                                 #{id _hoQGWMnyQPAh3k2jhWICu}#)))
                      (let ((#{w _hoQGWMnyQPAh3k2jhWIEN}#
                              (#{make-binding-wrap _hoQGWMnyQPAh3k2jhWHTP}#
                                #{id _hoQGWMnyQPAh3k2jhWICu}#
                                #{labels _hoQGWMnyQPAh3k2jhWIEL}#
                                #{w _hoQGWMnyQPAh3k2jhWICT}#))
                            (#{r _hoQGWMnyQPAh3k2jhWIEO}#
                              (#{extend-var-env _hoQGWMnyQPAh3k2jhWHS8}#
                                #{labels _hoQGWMnyQPAh3k2jhWIEL}#
                                #{new-vars _hoQGWMnyQPAh3k2jhWIEM}#
                                #{r _hoQGWMnyQPAh3k2jhWICS}#)))
                        (#{build-letrec _hoQGWMnyQPAh3k2jhWHSx}#
                          #{s _hoQGWMnyQPAh3k2jhWICU}#
                          #f
                          (map syntax->datum #{id _hoQGWMnyQPAh3k2jhWICu}#)
                          #{new-vars _hoQGWMnyQPAh3k2jhWIEM}#
                          (map (lambda (#{x _hoQGWMnyQPAh3k2jhWIFf}#)
                                 (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                   #{x _hoQGWMnyQPAh3k2jhWIFf}#
                                   #{r _hoQGWMnyQPAh3k2jhWIEO}#
                                   #{w _hoQGWMnyQPAh3k2jhWIEN}#
                                   #{mod _hoQGWMnyQPAh3k2jhWICV}#))
                               #{val _hoQGWMnyQPAh3k2jhWICv}#)
                          (#{expand-body _hoQGWMnyQPAh3k2jhWHTp}#
                            (cons #{e1 _hoQGWMnyQPAh3k2jhWICw}#
                                  #{e2 _hoQGWMnyQPAh3k2jhWICx}#)
                            (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                              (begin
                                (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWICR}#)
                                      #{s _hoQGWMnyQPAh3k2jhWICU}#
                                      #f)
                                  (set-source-properties!
                                    #{e _hoQGWMnyQPAh3k2jhWICR}#
                                    #{s _hoQGWMnyQPAh3k2jhWICU}#))
                                #{e _hoQGWMnyQPAh3k2jhWICR}#)
                              #{w _hoQGWMnyQPAh3k2jhWIEN}#
                              #{mod _hoQGWMnyQPAh3k2jhWICV}#)
                            #{r _hoQGWMnyQPAh3k2jhWIEO}#
                            #{w _hoQGWMnyQPAh3k2jhWIEN}#
                            #{mod _hoQGWMnyQPAh3k2jhWICV}#))))))
                #{tmp _hoQGWMnyQPAh3k2jhWICX}#)
              (syntax-violation
                'letrec
                "bad letrec"
                (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                  (begin
                    (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWICR}#)
                          #{s _hoQGWMnyQPAh3k2jhWICU}#
                          #f)
                      (set-source-properties!
                        #{e _hoQGWMnyQPAh3k2jhWICR}#
                        #{s _hoQGWMnyQPAh3k2jhWICU}#))
                    #{e _hoQGWMnyQPAh3k2jhWICR}#)
                  #{w _hoQGWMnyQPAh3k2jhWICT}#
                  #{mod _hoQGWMnyQPAh3k2jhWICV}#))))))
      (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
        'core
        'letrec*
        (lambda (#{e _hoQGWMnyQPAh3k2jhWILi}#
                 #{r _hoQGWMnyQPAh3k2jhWILj}#
                 #{w _hoQGWMnyQPAh3k2jhWILk}#
                 #{s _hoQGWMnyQPAh3k2jhWILl}#
                 #{mod _hoQGWMnyQPAh3k2jhWILm}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWILo}#
                  ($sc-dispatch
                    #{e _hoQGWMnyQPAh3k2jhWILi}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp _hoQGWMnyQPAh3k2jhWILo}#
                  (@apply
                    (lambda (#{id _hoQGWMnyQPAh3k2jhWILs}#
                             #{val _hoQGWMnyQPAh3k2jhWILt}#
                             #{e1 _hoQGWMnyQPAh3k2jhWILu}#
                             #{e2 _hoQGWMnyQPAh3k2jhWILv}#)
                      (and-map
                        #{id? _hoQGWMnyQPAh3k2jhWHTB}#
                        #{id _hoQGWMnyQPAh3k2jhWILs}#))
                    #{tmp _hoQGWMnyQPAh3k2jhWILo}#)
                  #f)
              (@apply
                (lambda (#{id _hoQGWMnyQPAh3k2jhWIL@}#
                         #{val _hoQGWMnyQPAh3k2jhWIMA}#
                         #{e1 _hoQGWMnyQPAh3k2jhWIMB}#
                         #{e2 _hoQGWMnyQPAh3k2jhWIMC}#)
                  (if (not (#{valid-bound-ids? _hoQGWMnyQPAh3k2jhWHTb}#
                             #{id _hoQGWMnyQPAh3k2jhWIL@}#))
                    (syntax-violation
                      'letrec*
                      "duplicate bound variable"
                      #{e _hoQGWMnyQPAh3k2jhWILi}#)
                    (let ((#{labels _hoQGWMnyQPAh3k2jhWINc}#
                            (#{gen-labels _hoQGWMnyQPAh3k2jhWHTE}#
                              #{id _hoQGWMnyQPAh3k2jhWIL@}#))
                          (#{new-vars _hoQGWMnyQPAh3k2jhWINd}#
                            (map #{gen-var _hoQGWMnyQPAh3k2jhWHTz}#
                                 #{id _hoQGWMnyQPAh3k2jhWIL@}#)))
                      (let ((#{w _hoQGWMnyQPAh3k2jhWINe}#
                              (#{make-binding-wrap _hoQGWMnyQPAh3k2jhWHTP}#
                                #{id _hoQGWMnyQPAh3k2jhWIL@}#
                                #{labels _hoQGWMnyQPAh3k2jhWINc}#
                                #{w _hoQGWMnyQPAh3k2jhWILk}#))
                            (#{r _hoQGWMnyQPAh3k2jhWINf}#
                              (#{extend-var-env _hoQGWMnyQPAh3k2jhWHS8}#
                                #{labels _hoQGWMnyQPAh3k2jhWINc}#
                                #{new-vars _hoQGWMnyQPAh3k2jhWINd}#
                                #{r _hoQGWMnyQPAh3k2jhWILj}#)))
                        (#{build-letrec _hoQGWMnyQPAh3k2jhWHSx}#
                          #{s _hoQGWMnyQPAh3k2jhWILl}#
                          #t
                          (map syntax->datum #{id _hoQGWMnyQPAh3k2jhWIL@}#)
                          #{new-vars _hoQGWMnyQPAh3k2jhWINd}#
                          (map (lambda (#{x _hoQGWMnyQPAh3k2jhWIOw}#)
                                 (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                   #{x _hoQGWMnyQPAh3k2jhWIOw}#
                                   #{r _hoQGWMnyQPAh3k2jhWINf}#
                                   #{w _hoQGWMnyQPAh3k2jhWINe}#
                                   #{mod _hoQGWMnyQPAh3k2jhWILm}#))
                               #{val _hoQGWMnyQPAh3k2jhWIMA}#)
                          (#{expand-body _hoQGWMnyQPAh3k2jhWHTp}#
                            (cons #{e1 _hoQGWMnyQPAh3k2jhWIMB}#
                                  #{e2 _hoQGWMnyQPAh3k2jhWIMC}#)
                            (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                              (begin
                                (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWILi}#)
                                      #{s _hoQGWMnyQPAh3k2jhWILl}#
                                      #f)
                                  (set-source-properties!
                                    #{e _hoQGWMnyQPAh3k2jhWILi}#
                                    #{s _hoQGWMnyQPAh3k2jhWILl}#))
                                #{e _hoQGWMnyQPAh3k2jhWILi}#)
                              #{w _hoQGWMnyQPAh3k2jhWINe}#
                              #{mod _hoQGWMnyQPAh3k2jhWILm}#)
                            #{r _hoQGWMnyQPAh3k2jhWINf}#
                            #{w _hoQGWMnyQPAh3k2jhWINe}#
                            #{mod _hoQGWMnyQPAh3k2jhWILm}#))))))
                #{tmp _hoQGWMnyQPAh3k2jhWILo}#)
              (syntax-violation
                'letrec*
                "bad letrec*"
                (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                  (begin
                    (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWILi}#)
                          #{s _hoQGWMnyQPAh3k2jhWILl}#
                          #f)
                      (set-source-properties!
                        #{e _hoQGWMnyQPAh3k2jhWILi}#
                        #{s _hoQGWMnyQPAh3k2jhWILl}#))
                    #{e _hoQGWMnyQPAh3k2jhWILi}#)
                  #{w _hoQGWMnyQPAh3k2jhWILk}#
                  #{mod _hoQGWMnyQPAh3k2jhWILm}#))))))
      (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
        'core
        'set!
        (lambda (#{e _hoQGWMnyQPAh3k2jhWIVa}#
                 #{r _hoQGWMnyQPAh3k2jhWIVb}#
                 #{w _hoQGWMnyQPAh3k2jhWIVc}#
                 #{s _hoQGWMnyQPAh3k2jhWIVd}#
                 #{mod _hoQGWMnyQPAh3k2jhWIVe}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWIVg}#
                  ($sc-dispatch
                    #{e _hoQGWMnyQPAh3k2jhWIVa}#
                    '(_ any any))))
            (if (if #{tmp _hoQGWMnyQPAh3k2jhWIVg}#
                  (@apply
                    (lambda (#{id _hoQGWMnyQPAh3k2jhWIVk}#
                             #{val _hoQGWMnyQPAh3k2jhWIVl}#)
                      (if (symbol? #{id _hoQGWMnyQPAh3k2jhWIVk}#)
                        #t
                        (if (if (vector? #{id _hoQGWMnyQPAh3k2jhWIVk}#)
                              (if (= (vector-length
                                       #{id _hoQGWMnyQPAh3k2jhWIVk}#)
                                     4)
                                (eq? (vector-ref
                                       #{id _hoQGWMnyQPAh3k2jhWIVk}#
                                       0)
                                     'syntax-object)
                                #f)
                              #f)
                          (symbol?
                            (vector-ref #{id _hoQGWMnyQPAh3k2jhWIVk}# 1))
                          #f)))
                    #{tmp _hoQGWMnyQPAh3k2jhWIVg}#)
                  #f)
              (@apply
                (lambda (#{id _hoQGWMnyQPAh3k2jhWIWA}#
                         #{val _hoQGWMnyQPAh3k2jhWIWB}#)
                  (let ((#{n _hoQGWMnyQPAh3k2jhWIWC}#
                          (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                            #{id _hoQGWMnyQPAh3k2jhWIWA}#
                            #{w _hoQGWMnyQPAh3k2jhWIVc}#))
                        (#{id-mod _hoQGWMnyQPAh3k2jhWIWD}#
                          (if (if (vector? #{id _hoQGWMnyQPAh3k2jhWIWA}#)
                                (if (= (vector-length
                                         #{id _hoQGWMnyQPAh3k2jhWIWA}#)
                                       4)
                                  (eq? (vector-ref
                                         #{id _hoQGWMnyQPAh3k2jhWIWA}#
                                         0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (vector-ref #{id _hoQGWMnyQPAh3k2jhWIWA}# 3)
                            #{mod _hoQGWMnyQPAh3k2jhWIVe}#)))
                    (let ((#{b _hoQGWMnyQPAh3k2jhWIWE}#
                            (let ((#{t _hoQGWMnyQPAh3k2jhWIWt}#
                                    (assq #{n _hoQGWMnyQPAh3k2jhWIWC}#
                                          #{r _hoQGWMnyQPAh3k2jhWIVb}#)))
                              (if #{t _hoQGWMnyQPAh3k2jhWIWt}#
                                (cdr #{t _hoQGWMnyQPAh3k2jhWIWt}#)
                                (if (symbol? #{n _hoQGWMnyQPAh3k2jhWIWC}#)
                                  (let ((#{t _hoQGWMnyQPAh3k2jhWIWy}#
                                          (#{get-global-definition-hook _hoQGWMnyQPAh3k2jhWHSc}#
                                            #{n _hoQGWMnyQPAh3k2jhWIWC}#
                                            #{id-mod _hoQGWMnyQPAh3k2jhWIWD}#)))
                                    (if #{t _hoQGWMnyQPAh3k2jhWIWy}#
                                      #{t _hoQGWMnyQPAh3k2jhWIWy}#
                                      '(global)))
                                  '(displaced-lexical))))))
                      (let ((#{atom-key _hoQGWMnyQPAh3k2jhWIWF}#
                              (car #{b _hoQGWMnyQPAh3k2jhWIWE}#)))
                        (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWIWF}#
                                  'lexical)
                          (#{build-lexical-assignment _hoQGWMnyQPAh3k2jhWHSk}#
                            #{s _hoQGWMnyQPAh3k2jhWIVd}#
                            (syntax->datum #{id _hoQGWMnyQPAh3k2jhWIWA}#)
                            (cdr #{b _hoQGWMnyQPAh3k2jhWIWE}#)
                            (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                              #{val _hoQGWMnyQPAh3k2jhWIWB}#
                              #{r _hoQGWMnyQPAh3k2jhWIVb}#
                              #{w _hoQGWMnyQPAh3k2jhWIVc}#
                              #{mod _hoQGWMnyQPAh3k2jhWIVe}#))
                          (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWIWF}#
                                    'global)
                            (#{build-global-assignment _hoQGWMnyQPAh3k2jhWHSn}#
                              #{s _hoQGWMnyQPAh3k2jhWIVd}#
                              #{n _hoQGWMnyQPAh3k2jhWIWC}#
                              (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                #{val _hoQGWMnyQPAh3k2jhWIWB}#
                                #{r _hoQGWMnyQPAh3k2jhWIVb}#
                                #{w _hoQGWMnyQPAh3k2jhWIVc}#
                                #{mod _hoQGWMnyQPAh3k2jhWIVe}#)
                              #{id-mod _hoQGWMnyQPAh3k2jhWIWD}#)
                            (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWIWF}#
                                      'macro)
                              (let ((#{p _hoQGWMnyQPAh3k2jhWIbs}#
                                      (cdr #{b _hoQGWMnyQPAh3k2jhWIWE}#)))
                                (if (procedure-property
                                      #{p _hoQGWMnyQPAh3k2jhWIbs}#
                                      'variable-transformer)
                                  (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                    (#{expand-macro _hoQGWMnyQPAh3k2jhWHTo}#
                                      #{p _hoQGWMnyQPAh3k2jhWIbs}#
                                      #{e _hoQGWMnyQPAh3k2jhWIVa}#
                                      #{r _hoQGWMnyQPAh3k2jhWIVb}#
                                      #{w _hoQGWMnyQPAh3k2jhWIVc}#
                                      #{s _hoQGWMnyQPAh3k2jhWIVd}#
                                      #f
                                      #{mod _hoQGWMnyQPAh3k2jhWIVe}#)
                                    #{r _hoQGWMnyQPAh3k2jhWIVb}#
                                    '(())
                                    #{mod _hoQGWMnyQPAh3k2jhWIVe}#)
                                  (syntax-violation
                                    'set!
                                    "not a variable transformer"
                                    (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                      #{e _hoQGWMnyQPAh3k2jhWIVa}#
                                      #{w _hoQGWMnyQPAh3k2jhWIVc}#
                                      #{mod _hoQGWMnyQPAh3k2jhWIVe}#)
                                    (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                      #{id _hoQGWMnyQPAh3k2jhWIWA}#
                                      #{w _hoQGWMnyQPAh3k2jhWIVc}#
                                      #{id-mod _hoQGWMnyQPAh3k2jhWIWD}#))))
                              (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWIWF}#
                                        'displaced-lexical)
                                (syntax-violation
                                  'set!
                                  "identifier out of context"
                                  (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                    #{id _hoQGWMnyQPAh3k2jhWIWA}#
                                    #{w _hoQGWMnyQPAh3k2jhWIVc}#
                                    #{mod _hoQGWMnyQPAh3k2jhWIVe}#))
                                (syntax-violation
                                  'set!
                                  "bad set!"
                                  (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                    (begin
                                      (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWIVa}#)
                                            #{s _hoQGWMnyQPAh3k2jhWIVd}#
                                            #f)
                                        (set-source-properties!
                                          #{e _hoQGWMnyQPAh3k2jhWIVa}#
                                          #{s _hoQGWMnyQPAh3k2jhWIVd}#))
                                      #{e _hoQGWMnyQPAh3k2jhWIVa}#)
                                    #{w _hoQGWMnyQPAh3k2jhWIVc}#
                                    #{mod _hoQGWMnyQPAh3k2jhWIVe}#))))))))))
                #{tmp _hoQGWMnyQPAh3k2jhWIVg}#)
              (let ((#{tmp _hoQGWMnyQPAh3k2jhWIdL}#
                      ($sc-dispatch
                        #{e _hoQGWMnyQPAh3k2jhWIVa}#
                        '(_ (any . each-any) any))))
                (if #{tmp _hoQGWMnyQPAh3k2jhWIdL}#
                  (@apply
                    (lambda (#{head _hoQGWMnyQPAh3k2jhWIdP}#
                             #{tail _hoQGWMnyQPAh3k2jhWIdQ}#
                             #{val _hoQGWMnyQPAh3k2jhWIdR}#)
                      (call-with-values
                        (lambda ()
                          (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
                            #{head _hoQGWMnyQPAh3k2jhWIdP}#
                            #{r _hoQGWMnyQPAh3k2jhWIVb}#
                            '(())
                            #f
                            #f
                            #{mod _hoQGWMnyQPAh3k2jhWIVe}#
                            #t))
                        (lambda (#{type _hoQGWMnyQPAh3k2jhWIdU}#
                                 #{value _hoQGWMnyQPAh3k2jhWIdV}#
                                 #{ee _hoQGWMnyQPAh3k2jhWIdW}#
                                 #{ww _hoQGWMnyQPAh3k2jhWIdX}#
                                 #{ss _hoQGWMnyQPAh3k2jhWIdY}#
                                 #{modmod _hoQGWMnyQPAh3k2jhWIdZ}#)
                          (if (eqv? #{type _hoQGWMnyQPAh3k2jhWIdU}#
                                    'module-ref)
                            (let ((#{val _hoQGWMnyQPAh3k2jhWIdd}#
                                    (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                      #{val _hoQGWMnyQPAh3k2jhWIdR}#
                                      #{r _hoQGWMnyQPAh3k2jhWIVb}#
                                      #{w _hoQGWMnyQPAh3k2jhWIVc}#
                                      #{mod _hoQGWMnyQPAh3k2jhWIVe}#)))
                              (call-with-values
                                (lambda ()
                                  (#{value _hoQGWMnyQPAh3k2jhWIdV}#
                                    (cons #{head _hoQGWMnyQPAh3k2jhWIdP}#
                                          #{tail _hoQGWMnyQPAh3k2jhWIdQ}#)
                                    #{r _hoQGWMnyQPAh3k2jhWIVb}#
                                    #{w _hoQGWMnyQPAh3k2jhWIVc}#))
                                (lambda (#{e _hoQGWMnyQPAh3k2jhWIde}#
                                         #{r _hoQGWMnyQPAh3k2jhWIdf}#
                                         #{w _hoQGWMnyQPAh3k2jhWIdg}#
                                         #{s* _hoQGWMnyQPAh3k2jhWIdh}#
                                         #{mod _hoQGWMnyQPAh3k2jhWIdi}#)
                                  (let ((#{tmp _hoQGWMnyQPAh3k2jhWIdk}#
                                          (list #{e _hoQGWMnyQPAh3k2jhWIde}#)))
                                    (if (@apply
                                          (lambda (#{e _hoQGWMnyQPAh3k2jhWIdm}#)
                                            (if (symbol?
                                                  #{e _hoQGWMnyQPAh3k2jhWIdm}#)
                                              #t
                                              (if (if (vector?
                                                        #{e _hoQGWMnyQPAh3k2jhWIdm}#)
                                                    (if (= (vector-length
                                                             #{e _hoQGWMnyQPAh3k2jhWIdm}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{e _hoQGWMnyQPAh3k2jhWIdm}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref
                                                    #{e _hoQGWMnyQPAh3k2jhWIdm}#
                                                    1))
                                                #f)))
                                          #{tmp _hoQGWMnyQPAh3k2jhWIdk}#)
                                      (@apply
                                        (lambda (#{e _hoQGWMnyQPAh3k2jhWIeE}#)
                                          (#{build-global-assignment _hoQGWMnyQPAh3k2jhWHSn}#
                                            #{s _hoQGWMnyQPAh3k2jhWIVd}#
                                            (syntax->datum
                                              #{e _hoQGWMnyQPAh3k2jhWIeE}#)
                                            #{val _hoQGWMnyQPAh3k2jhWIdd}#
                                            #{mod _hoQGWMnyQPAh3k2jhWIdi}#))
                                        #{tmp _hoQGWMnyQPAh3k2jhWIdk}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e _hoQGWMnyQPAh3k2jhWIde}#))))))
                            (#{build-application _hoQGWMnyQPAh3k2jhWHSg}#
                              #{s _hoQGWMnyQPAh3k2jhWIVd}#
                              (let ((#{e _hoQGWMnyQPAh3k2jhWIhl}#
                                      (list '#(syntax-object
                                               setter
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(type value ee ww ss modmod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("2sa"
                                                    "2sb"
                                                    "2sc"
                                                    "2sd"
                                                    "2se"
                                                    "2sf"))
                                                #(ribcage
                                                  #(head tail val)
                                                  #((top) (top) (top))
                                                  #("2s7" "2s8" "2s9"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(e r w s mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("2rt"
                                                    "2ru"
                                                    "2rv"
                                                    "2rw"
                                                    "2rx"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("1tt"
                                                   "1ts"
                                                   "1tr"
                                                   "1tq"
                                                   "1tp"
                                                   "1to"
                                                   "1tn"
                                                   "1tm"
                                                   "1tl"
                                                   "1tk"
                                                   "1tj"
                                                   "1ti"
                                                   "1th"
                                                   "1tg"
                                                   "1tf"
                                                   "1te"
                                                   "1td"
                                                   "1tc"
                                                   "1tb"
                                                   "1ta"
                                                   "1t9"
                                                   "1t8"
                                                   "1t7"
                                                   "1t6"
                                                   "1t5"
                                                   "1t4"
                                                   "1t3"
                                                   "1t2"
                                                   "1t1"
                                                   "1t0"
                                                   "1sz"
                                                   "1sy"
                                                   "1sx"
                                                   "1sw"
                                                   "1sv"
                                                   "1su"
                                                   "1st"
                                                   "1ss"
                                                   "1sr"
                                                   "1sq"
                                                   "1sp"
                                                   "1so"
                                                   "1sn"
                                                   "1sm"
                                                   "1sl"
                                                   "1sk"
                                                   "1sj"
                                                   "1si"
                                                   "1sh"
                                                   "1sg"
                                                   "1sf"
                                                   "1se"
                                                   "1sd"
                                                   "1sc"
                                                   "1sb"
                                                   "1sa"
                                                   "1s9"
                                                   "1s8"
                                                   "1s7"
                                                   "1s6"
                                                   "1s5"
                                                   "1s4"
                                                   "1s3"
                                                   "1s2"
                                                   "1s1"
                                                   "1s0"
                                                   "1rz"
                                                   "1ry"
                                                   "1rx"
                                                   "1rw"
                                                   "1rv"
                                                   "1ru"
                                                   "1rt"
                                                   "1rs"
                                                   "1rr"
                                                   "1rq"
                                                   "1rp"
                                                   "1ro"
                                                   "1rn"
                                                   "1rm"
                                                   "1rl"
                                                   "1rk"
                                                   "1rj"
                                                   "1ri"
                                                   "1rh"
                                                   "1rg"
                                                   "1rf"
                                                   "1re"
                                                   "1rd"
                                                   "1rc"
                                                   "1rb"
                                                   "1ra"
                                                   "1r9"
                                                   "1r8"
                                                   "1r7"
                                                   "1r6"
                                                   "1r5"
                                                   "1r4"
                                                   "1r3"
                                                   "1r2"
                                                   "1r1"
                                                   "1r0"
                                                   "1qz"
                                                   "1qy"
                                                   "1qx"
                                                   "1qw"
                                                   "1qv"
                                                   "1qu"
                                                   "1qt"
                                                   "1qs"
                                                   "1qr"
                                                   "1qq"
                                                   "1qp"
                                                   "1qo"
                                                   "1qn"
                                                   "1qm"
                                                   "1ql"
                                                   "1qk"
                                                   "1qj"
                                                   "1qi"
                                                   "1qh"
                                                   "1qg"
                                                   "1qf"
                                                   "1qe"
                                                   "1qd"
                                                   "1qc"
                                                   "1qb"
                                                   "1qa"
                                                   "1q9"
                                                   "1q8"
                                                   "1q7"
                                                   "1q6"
                                                   "1q5"
                                                   "1q4"
                                                   "1q3"
                                                   "1q2"
                                                   "1q1"
                                                   "1q0"
                                                   "1pz"
                                                   "1py"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("1og" "1of" "1oe")))
                                               (hygiene guile))
                                            #{head _hoQGWMnyQPAh3k2jhWIdP}#)))
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
                                      #{e _hoQGWMnyQPAh3k2jhWIhl}#
                                      #{r _hoQGWMnyQPAh3k2jhWIVb}#
                                      #{w _hoQGWMnyQPAh3k2jhWIVc}#
                                      (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
                                        #{e _hoQGWMnyQPAh3k2jhWIhl}#)
                                      #f
                                      #{mod _hoQGWMnyQPAh3k2jhWIVe}#
                                      #f))
                                  (lambda (#{type _hoQGWMnyQPAh3k2jhWIhs}#
                                           #{value _hoQGWMnyQPAh3k2jhWIht}#
                                           #{e _hoQGWMnyQPAh3k2jhWIhu}#
                                           #{w _hoQGWMnyQPAh3k2jhWIhv}#
                                           #{s _hoQGWMnyQPAh3k2jhWIhw}#
                                           #{mod _hoQGWMnyQPAh3k2jhWIhx}#)
                                    (#{expand-expr _hoQGWMnyQPAh3k2jhWHTm}#
                                      #{type _hoQGWMnyQPAh3k2jhWIhs}#
                                      #{value _hoQGWMnyQPAh3k2jhWIht}#
                                      #{e _hoQGWMnyQPAh3k2jhWIhu}#
                                      #{r _hoQGWMnyQPAh3k2jhWIVb}#
                                      #{w _hoQGWMnyQPAh3k2jhWIhv}#
                                      #{s _hoQGWMnyQPAh3k2jhWIhw}#
                                      #{mod _hoQGWMnyQPAh3k2jhWIhx}#))))
                              (map (lambda (#{e _hoQGWMnyQPAh3k2jhWIh1}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{syntax-type _hoQGWMnyQPAh3k2jhWHTk}#
                                           #{e _hoQGWMnyQPAh3k2jhWIh1}#
                                           #{r _hoQGWMnyQPAh3k2jhWIVb}#
                                           #{w _hoQGWMnyQPAh3k2jhWIVc}#
                                           (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
                                             #{e _hoQGWMnyQPAh3k2jhWIh1}#)
                                           #f
                                           #{mod _hoQGWMnyQPAh3k2jhWIVe}#
                                           #f))
                                       (lambda (#{type _hoQGWMnyQPAh3k2jhWIiE}#
                                                #{value _hoQGWMnyQPAh3k2jhWIiF}#
                                                #{e _hoQGWMnyQPAh3k2jhWIiG}#
                                                #{w _hoQGWMnyQPAh3k2jhWIiH}#
                                                #{s _hoQGWMnyQPAh3k2jhWIiI}#
                                                #{mod _hoQGWMnyQPAh3k2jhWIiJ}#)
                                         (#{expand-expr _hoQGWMnyQPAh3k2jhWHTm}#
                                           #{type _hoQGWMnyQPAh3k2jhWIiE}#
                                           #{value _hoQGWMnyQPAh3k2jhWIiF}#
                                           #{e _hoQGWMnyQPAh3k2jhWIiG}#
                                           #{r _hoQGWMnyQPAh3k2jhWIVb}#
                                           #{w _hoQGWMnyQPAh3k2jhWIiH}#
                                           #{s _hoQGWMnyQPAh3k2jhWIiI}#
                                           #{mod _hoQGWMnyQPAh3k2jhWIiJ}#))))
                                   (append
                                     #{tail _hoQGWMnyQPAh3k2jhWIdQ}#
                                     (list #{val _hoQGWMnyQPAh3k2jhWIdR}#))))))))
                    #{tmp _hoQGWMnyQPAh3k2jhWIdL}#)
                  (syntax-violation
                    'set!
                    "bad set!"
                    (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                      (begin
                        (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWIVa}#)
                              #{s _hoQGWMnyQPAh3k2jhWIVd}#
                              #f)
                          (set-source-properties!
                            #{e _hoQGWMnyQPAh3k2jhWIVa}#
                            #{s _hoQGWMnyQPAh3k2jhWIVd}#))
                        #{e _hoQGWMnyQPAh3k2jhWIVa}#)
                      #{w _hoQGWMnyQPAh3k2jhWIVc}#
                      #{mod _hoQGWMnyQPAh3k2jhWIVe}#))))))))
      (module-define!
        (current-module)
        '@
        (make-syntax-transformer
          '@
          'module-ref
          (lambda (#{e _hoQGWMnyQPAh3k2jhWIi0}#
                   #{r _hoQGWMnyQPAh3k2jhWIi1}#
                   #{w _hoQGWMnyQPAh3k2jhWIi2}#)
            (let ((#{tmp _hoQGWMnyQPAh3k2jhWIi4}#
                    ($sc-dispatch
                      #{e _hoQGWMnyQPAh3k2jhWIi0}#
                      '(_ each-any any))))
              (if (if #{tmp _hoQGWMnyQPAh3k2jhWIi4}#
                    (@apply
                      (lambda (#{mod _hoQGWMnyQPAh3k2jhWIi7}#
                               #{id _hoQGWMnyQPAh3k2jhWIi8}#)
                        (if (and-map
                              #{id? _hoQGWMnyQPAh3k2jhWHTB}#
                              #{mod _hoQGWMnyQPAh3k2jhWIi7}#)
                          (if (symbol? #{id _hoQGWMnyQPAh3k2jhWIi8}#)
                            #t
                            (if (if (vector? #{id _hoQGWMnyQPAh3k2jhWIi8}#)
                                  (if (= (vector-length
                                           #{id _hoQGWMnyQPAh3k2jhWIi8}#)
                                         4)
                                    (eq? (vector-ref
                                           #{id _hoQGWMnyQPAh3k2jhWIi8}#
                                           0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol?
                                (vector-ref #{id _hoQGWMnyQPAh3k2jhWIi8}# 1))
                              #f))
                          #f))
                      #{tmp _hoQGWMnyQPAh3k2jhWIi4}#)
                    #f)
                (@apply
                  (lambda (#{mod _hoQGWMnyQPAh3k2jhWIjk}#
                           #{id _hoQGWMnyQPAh3k2jhWIjl}#)
                    (values
                      (syntax->datum #{id _hoQGWMnyQPAh3k2jhWIjl}#)
                      #{r _hoQGWMnyQPAh3k2jhWIi1}#
                      #{w _hoQGWMnyQPAh3k2jhWIi2}#
                      #f
                      (syntax->datum
                        (cons '#(syntax-object
                                 public
                                 ((top)
                                  #(ribcage
                                    #(mod id)
                                    #((top) (top))
                                    #("2sv" "2sw"))
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(e r w)
                                    #((top) (top) (top))
                                    #("2sq" "2sr" "2ss"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      expand-lambda-case
                                      lambda*-formals
                                      expand-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      expand-void
                                      eval-local-transformer
                                      expand-local-syntax
                                      expand-body
                                      expand-macro
                                      expand-application
                                      expand-expr
                                      expand
                                      syntax-type
                                      parse-when-list
                                      expand-install-global
                                      expand-top-sequence
                                      expand-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      with-transformer-environment
                                      transformer-environment
                                      resolve-identifier
                                      locally-bound-identifiers
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      lookup
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-application
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      gensym-hook
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-sequence
                                      make-application
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("1tt"
                                     "1ts"
                                     "1tr"
                                     "1tq"
                                     "1tp"
                                     "1to"
                                     "1tn"
                                     "1tm"
                                     "1tl"
                                     "1tk"
                                     "1tj"
                                     "1ti"
                                     "1th"
                                     "1tg"
                                     "1tf"
                                     "1te"
                                     "1td"
                                     "1tc"
                                     "1tb"
                                     "1ta"
                                     "1t9"
                                     "1t8"
                                     "1t7"
                                     "1t6"
                                     "1t5"
                                     "1t4"
                                     "1t3"
                                     "1t2"
                                     "1t1"
                                     "1t0"
                                     "1sz"
                                     "1sy"
                                     "1sx"
                                     "1sw"
                                     "1sv"
                                     "1su"
                                     "1st"
                                     "1ss"
                                     "1sr"
                                     "1sq"
                                     "1sp"
                                     "1so"
                                     "1sn"
                                     "1sm"
                                     "1sl"
                                     "1sk"
                                     "1sj"
                                     "1si"
                                     "1sh"
                                     "1sg"
                                     "1sf"
                                     "1se"
                                     "1sd"
                                     "1sc"
                                     "1sb"
                                     "1sa"
                                     "1s9"
                                     "1s8"
                                     "1s7"
                                     "1s6"
                                     "1s5"
                                     "1s4"
                                     "1s3"
                                     "1s2"
                                     "1s1"
                                     "1s0"
                                     "1rz"
                                     "1ry"
                                     "1rx"
                                     "1rw"
                                     "1rv"
                                     "1ru"
                                     "1rt"
                                     "1rs"
                                     "1rr"
                                     "1rq"
                                     "1rp"
                                     "1ro"
                                     "1rn"
                                     "1rm"
                                     "1rl"
                                     "1rk"
                                     "1rj"
                                     "1ri"
                                     "1rh"
                                     "1rg"
                                     "1rf"
                                     "1re"
                                     "1rd"
                                     "1rc"
                                     "1rb"
                                     "1ra"
                                     "1r9"
                                     "1r8"
                                     "1r7"
                                     "1r6"
                                     "1r5"
                                     "1r4"
                                     "1r3"
                                     "1r2"
                                     "1r1"
                                     "1r0"
                                     "1qz"
                                     "1qy"
                                     "1qx"
                                     "1qw"
                                     "1qv"
                                     "1qu"
                                     "1qt"
                                     "1qs"
                                     "1qr"
                                     "1qq"
                                     "1qp"
                                     "1qo"
                                     "1qn"
                                     "1qm"
                                     "1ql"
                                     "1qk"
                                     "1qj"
                                     "1qi"
                                     "1qh"
                                     "1qg"
                                     "1qf"
                                     "1qe"
                                     "1qd"
                                     "1qc"
                                     "1qb"
                                     "1qa"
                                     "1q9"
                                     "1q8"
                                     "1q7"
                                     "1q6"
                                     "1q5"
                                     "1q4"
                                     "1q3"
                                     "1q2"
                                     "1q1"
                                     "1q0"
                                     "1pz"
                                     "1py"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("1og" "1of" "1oe")))
                                 (hygiene guile))
                              #{mod _hoQGWMnyQPAh3k2jhWIjk}#))))
                  #{tmp _hoQGWMnyQPAh3k2jhWIi4}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e _hoQGWMnyQPAh3k2jhWIi0}#))))))
      (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
        'module-ref
        '@@
        (lambda (#{e _hoQGWMnyQPAh3k2jhWIlB}#
                 #{r _hoQGWMnyQPAh3k2jhWIlC}#
                 #{w _hoQGWMnyQPAh3k2jhWIlD}#)
          (letrec*
            ((#{remodulate _hoQGWMnyQPAh3k2jhWIlE}#
               (lambda (#{x _hoQGWMnyQPAh3k2jhWIln}#
                        #{mod _hoQGWMnyQPAh3k2jhWIlo}#)
                 (if (pair? #{x _hoQGWMnyQPAh3k2jhWIln}#)
                   (cons (#{remodulate _hoQGWMnyQPAh3k2jhWIlE}#
                           (car #{x _hoQGWMnyQPAh3k2jhWIln}#)
                           #{mod _hoQGWMnyQPAh3k2jhWIlo}#)
                         (#{remodulate _hoQGWMnyQPAh3k2jhWIlE}#
                           (cdr #{x _hoQGWMnyQPAh3k2jhWIln}#)
                           #{mod _hoQGWMnyQPAh3k2jhWIlo}#))
                   (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWIln}#)
                         (if (= (vector-length #{x _hoQGWMnyQPAh3k2jhWIln}#)
                                4)
                           (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWIln}# 0)
                                'syntax-object)
                           #f)
                         #f)
                     (let ((#{expression _hoQGWMnyQPAh3k2jhWIl2}#
                             (#{remodulate _hoQGWMnyQPAh3k2jhWIlE}#
                               (vector-ref #{x _hoQGWMnyQPAh3k2jhWIln}# 1)
                               #{mod _hoQGWMnyQPAh3k2jhWIlo}#))
                           (#{wrap _hoQGWMnyQPAh3k2jhWIl3}#
                             (vector-ref #{x _hoQGWMnyQPAh3k2jhWIln}# 2)))
                       (vector
                         'syntax-object
                         #{expression _hoQGWMnyQPAh3k2jhWIl2}#
                         #{wrap _hoQGWMnyQPAh3k2jhWIl3}#
                         #{mod _hoQGWMnyQPAh3k2jhWIlo}#))
                     (if (vector? #{x _hoQGWMnyQPAh3k2jhWIln}#)
                       (let ((#{n _hoQGWMnyQPAh3k2jhWIl@}#
                               (vector-length #{x _hoQGWMnyQPAh3k2jhWIln}#)))
                         (let ((#{v _hoQGWMnyQPAh3k2jhWImA}#
                                 (make-vector #{n _hoQGWMnyQPAh3k2jhWIl@}#)))
                           (letrec*
                             ((#{loop _hoQGWMnyQPAh3k2jhWImB}#
                                (lambda (#{i _hoQGWMnyQPAh3k2jhWImw}#)
                                  (if (= #{i _hoQGWMnyQPAh3k2jhWImw}#
                                         #{n _hoQGWMnyQPAh3k2jhWIl@}#)
                                    #{v _hoQGWMnyQPAh3k2jhWImA}#
                                    (begin
                                      (vector-set!
                                        #{v _hoQGWMnyQPAh3k2jhWImA}#
                                        #{i _hoQGWMnyQPAh3k2jhWImw}#
                                        (#{remodulate _hoQGWMnyQPAh3k2jhWIlE}#
                                          (vector-ref
                                            #{x _hoQGWMnyQPAh3k2jhWIln}#
                                            #{i _hoQGWMnyQPAh3k2jhWImw}#)
                                          #{mod _hoQGWMnyQPAh3k2jhWIlo}#))
                                      (#{loop _hoQGWMnyQPAh3k2jhWImB}#
                                        (#{1+}# #{i _hoQGWMnyQPAh3k2jhWImw}#)))))))
                             (#{loop _hoQGWMnyQPAh3k2jhWImB}# 0))))
                       #{x _hoQGWMnyQPAh3k2jhWIln}#))))))
            (let ((#{tmp _hoQGWMnyQPAh3k2jhWIlG}#
                    ($sc-dispatch
                      #{e _hoQGWMnyQPAh3k2jhWIlB}#
                      '(_ each-any any))))
              (if (if #{tmp _hoQGWMnyQPAh3k2jhWIlG}#
                    (@apply
                      (lambda (#{mod _hoQGWMnyQPAh3k2jhWIlK}#
                               #{exp _hoQGWMnyQPAh3k2jhWIlL}#)
                        (and-map
                          #{id? _hoQGWMnyQPAh3k2jhWHTB}#
                          #{mod _hoQGWMnyQPAh3k2jhWIlK}#))
                      #{tmp _hoQGWMnyQPAh3k2jhWIlG}#)
                    #f)
                (@apply
                  (lambda (#{mod _hoQGWMnyQPAh3k2jhWIlb}#
                           #{exp _hoQGWMnyQPAh3k2jhWIlc}#)
                    (let ((#{mod _hoQGWMnyQPAh3k2jhWIld}#
                            (syntax->datum
                              (cons '#(syntax-object
                                       private
                                       ((top)
                                        #(ribcage
                                          #(mod exp)
                                          #((top) (top))
                                          #("2t9" "2ta"))
                                        #(ribcage (remodulate) ((top)) ("2t0"))
                                        #(ribcage
                                          #(e r w)
                                          #((top) (top) (top))
                                          #("2sx" "2sy" "2sz"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            expand-lambda-case
                                            lambda*-formals
                                            expand-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            expand-void
                                            eval-local-transformer
                                            expand-local-syntax
                                            expand-body
                                            expand-macro
                                            expand-application
                                            expand-expr
                                            expand
                                            syntax-type
                                            parse-when-list
                                            expand-install-global
                                            expand-top-sequence
                                            expand-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            with-transformer-environment
                                            transformer-environment
                                            resolve-identifier
                                            locally-bound-identifiers
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("1tt"
                                           "1ts"
                                           "1tr"
                                           "1tq"
                                           "1tp"
                                           "1to"
                                           "1tn"
                                           "1tm"
                                           "1tl"
                                           "1tk"
                                           "1tj"
                                           "1ti"
                                           "1th"
                                           "1tg"
                                           "1tf"
                                           "1te"
                                           "1td"
                                           "1tc"
                                           "1tb"
                                           "1ta"
                                           "1t9"
                                           "1t8"
                                           "1t7"
                                           "1t6"
                                           "1t5"
                                           "1t4"
                                           "1t3"
                                           "1t2"
                                           "1t1"
                                           "1t0"
                                           "1sz"
                                           "1sy"
                                           "1sx"
                                           "1sw"
                                           "1sv"
                                           "1su"
                                           "1st"
                                           "1ss"
                                           "1sr"
                                           "1sq"
                                           "1sp"
                                           "1so"
                                           "1sn"
                                           "1sm"
                                           "1sl"
                                           "1sk"
                                           "1sj"
                                           "1si"
                                           "1sh"
                                           "1sg"
                                           "1sf"
                                           "1se"
                                           "1sd"
                                           "1sc"
                                           "1sb"
                                           "1sa"
                                           "1s9"
                                           "1s8"
                                           "1s7"
                                           "1s6"
                                           "1s5"
                                           "1s4"
                                           "1s3"
                                           "1s2"
                                           "1s1"
                                           "1s0"
                                           "1rz"
                                           "1ry"
                                           "1rx"
                                           "1rw"
                                           "1rv"
                                           "1ru"
                                           "1rt"
                                           "1rs"
                                           "1rr"
                                           "1rq"
                                           "1rp"
                                           "1ro"
                                           "1rn"
                                           "1rm"
                                           "1rl"
                                           "1rk"
                                           "1rj"
                                           "1ri"
                                           "1rh"
                                           "1rg"
                                           "1rf"
                                           "1re"
                                           "1rd"
                                           "1rc"
                                           "1rb"
                                           "1ra"
                                           "1r9"
                                           "1r8"
                                           "1r7"
                                           "1r6"
                                           "1r5"
                                           "1r4"
                                           "1r3"
                                           "1r2"
                                           "1r1"
                                           "1r0"
                                           "1qz"
                                           "1qy"
                                           "1qx"
                                           "1qw"
                                           "1qv"
                                           "1qu"
                                           "1qt"
                                           "1qs"
                                           "1qr"
                                           "1qq"
                                           "1qp"
                                           "1qo"
                                           "1qn"
                                           "1qm"
                                           "1ql"
                                           "1qk"
                                           "1qj"
                                           "1qi"
                                           "1qh"
                                           "1qg"
                                           "1qf"
                                           "1qe"
                                           "1qd"
                                           "1qc"
                                           "1qb"
                                           "1qa"
                                           "1q9"
                                           "1q8"
                                           "1q7"
                                           "1q6"
                                           "1q5"
                                           "1q4"
                                           "1q3"
                                           "1q2"
                                           "1q1"
                                           "1q0"
                                           "1pz"
                                           "1py"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("1og" "1of" "1oe")))
                                       (hygiene guile))
                                    #{mod _hoQGWMnyQPAh3k2jhWIlb}#))))
                      (values
                        (#{remodulate _hoQGWMnyQPAh3k2jhWIlE}#
                          #{exp _hoQGWMnyQPAh3k2jhWIlc}#
                          #{mod _hoQGWMnyQPAh3k2jhWIld}#)
                        #{r _hoQGWMnyQPAh3k2jhWIlC}#
                        #{w _hoQGWMnyQPAh3k2jhWIlD}#
                        (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
                          #{exp _hoQGWMnyQPAh3k2jhWIlc}#)
                        #{mod _hoQGWMnyQPAh3k2jhWIld}#)))
                  #{tmp _hoQGWMnyQPAh3k2jhWIlG}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e _hoQGWMnyQPAh3k2jhWIlB}#))))))
      (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
        'core
        'if
        (lambda (#{e _hoQGWMnyQPAh3k2jhWIoV}#
                 #{r _hoQGWMnyQPAh3k2jhWIoW}#
                 #{w _hoQGWMnyQPAh3k2jhWIoX}#
                 #{s _hoQGWMnyQPAh3k2jhWIoY}#
                 #{mod _hoQGWMnyQPAh3k2jhWIoZ}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWIob}#
                  ($sc-dispatch
                    #{e _hoQGWMnyQPAh3k2jhWIoV}#
                    '(_ any any))))
            (if #{tmp _hoQGWMnyQPAh3k2jhWIob}#
              (@apply
                (lambda (#{test _hoQGWMnyQPAh3k2jhWIof}#
                         #{then _hoQGWMnyQPAh3k2jhWIog}#)
                  (#{build-conditional _hoQGWMnyQPAh3k2jhWHSh}#
                    #{s _hoQGWMnyQPAh3k2jhWIoY}#
                    (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                      #{test _hoQGWMnyQPAh3k2jhWIof}#
                      #{r _hoQGWMnyQPAh3k2jhWIoW}#
                      #{w _hoQGWMnyQPAh3k2jhWIoX}#
                      #{mod _hoQGWMnyQPAh3k2jhWIoZ}#)
                    (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                      #{then _hoQGWMnyQPAh3k2jhWIog}#
                      #{r _hoQGWMnyQPAh3k2jhWIoW}#
                      #{w _hoQGWMnyQPAh3k2jhWIoX}#
                      #{mod _hoQGWMnyQPAh3k2jhWIoZ}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 0)
                      #f)))
                #{tmp _hoQGWMnyQPAh3k2jhWIob}#)
              (let ((#{tmp _hoQGWMnyQPAh3k2jhWIsB}#
                      ($sc-dispatch
                        #{e _hoQGWMnyQPAh3k2jhWIoV}#
                        '(_ any any any))))
                (if #{tmp _hoQGWMnyQPAh3k2jhWIsB}#
                  (@apply
                    (lambda (#{test _hoQGWMnyQPAh3k2jhWIsF}#
                             #{then _hoQGWMnyQPAh3k2jhWIsG}#
                             #{else _hoQGWMnyQPAh3k2jhWIsH}#)
                      (#{build-conditional _hoQGWMnyQPAh3k2jhWHSh}#
                        #{s _hoQGWMnyQPAh3k2jhWIoY}#
                        (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                          #{test _hoQGWMnyQPAh3k2jhWIsF}#
                          #{r _hoQGWMnyQPAh3k2jhWIoW}#
                          #{w _hoQGWMnyQPAh3k2jhWIoX}#
                          #{mod _hoQGWMnyQPAh3k2jhWIoZ}#)
                        (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                          #{then _hoQGWMnyQPAh3k2jhWIsG}#
                          #{r _hoQGWMnyQPAh3k2jhWIoW}#
                          #{w _hoQGWMnyQPAh3k2jhWIoX}#
                          #{mod _hoQGWMnyQPAh3k2jhWIoZ}#)
                        (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                          #{else _hoQGWMnyQPAh3k2jhWIsH}#
                          #{r _hoQGWMnyQPAh3k2jhWIoW}#
                          #{w _hoQGWMnyQPAh3k2jhWIoX}#
                          #{mod _hoQGWMnyQPAh3k2jhWIoZ}#)))
                    #{tmp _hoQGWMnyQPAh3k2jhWIsB}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{e _hoQGWMnyQPAh3k2jhWIoV}#)))))))
      (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
        'core
        'with-fluids
        (lambda (#{e _hoQGWMnyQPAh3k2jhWIyW}#
                 #{r _hoQGWMnyQPAh3k2jhWIyX}#
                 #{w _hoQGWMnyQPAh3k2jhWIyY}#
                 #{s _hoQGWMnyQPAh3k2jhWIyZ}#
                 #{mod _hoQGWMnyQPAh3k2jhWIya}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWIyc}#
                  ($sc-dispatch
                    #{e _hoQGWMnyQPAh3k2jhWIyW}#
                    '(_ #(each (any any)) any . each-any))))
            (if #{tmp _hoQGWMnyQPAh3k2jhWIyc}#
              (@apply
                (lambda (#{fluid _hoQGWMnyQPAh3k2jhWIyg}#
                         #{val _hoQGWMnyQPAh3k2jhWIyh}#
                         #{b _hoQGWMnyQPAh3k2jhWIyi}#
                         #{b* _hoQGWMnyQPAh3k2jhWIyj}#)
                  (#{build-dynlet _hoQGWMnyQPAh3k2jhWHSi}#
                    #{s _hoQGWMnyQPAh3k2jhWIyZ}#
                    (map (lambda (#{x _hoQGWMnyQPAh3k2jhWIz0}#)
                           (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                             #{x _hoQGWMnyQPAh3k2jhWIz0}#
                             #{r _hoQGWMnyQPAh3k2jhWIyX}#
                             #{w _hoQGWMnyQPAh3k2jhWIyY}#
                             #{mod _hoQGWMnyQPAh3k2jhWIya}#))
                         #{fluid _hoQGWMnyQPAh3k2jhWIyg}#)
                    (map (lambda (#{x _hoQGWMnyQPAh3k2jhWI06}#)
                           (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                             #{x _hoQGWMnyQPAh3k2jhWI06}#
                             #{r _hoQGWMnyQPAh3k2jhWIyX}#
                             #{w _hoQGWMnyQPAh3k2jhWIyY}#
                             #{mod _hoQGWMnyQPAh3k2jhWIya}#))
                         #{val _hoQGWMnyQPAh3k2jhWIyh}#)
                    (#{expand-body _hoQGWMnyQPAh3k2jhWHTp}#
                      (cons #{b _hoQGWMnyQPAh3k2jhWIyi}#
                            #{b* _hoQGWMnyQPAh3k2jhWIyj}#)
                      (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                        (begin
                          (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWIyW}#)
                                #{s _hoQGWMnyQPAh3k2jhWIyZ}#
                                #f)
                            (set-source-properties!
                              #{e _hoQGWMnyQPAh3k2jhWIyW}#
                              #{s _hoQGWMnyQPAh3k2jhWIyZ}#))
                          #{e _hoQGWMnyQPAh3k2jhWIyW}#)
                        #{w _hoQGWMnyQPAh3k2jhWIyY}#
                        #{mod _hoQGWMnyQPAh3k2jhWIya}#)
                      #{r _hoQGWMnyQPAh3k2jhWIyX}#
                      #{w _hoQGWMnyQPAh3k2jhWIyY}#
                      #{mod _hoQGWMnyQPAh3k2jhWIya}#)))
                #{tmp _hoQGWMnyQPAh3k2jhWIyc}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e _hoQGWMnyQPAh3k2jhWIyW}#)))))
      (module-define!
        (current-module)
        'begin
        (make-syntax-transformer 'begin 'begin '()))
      (module-define!
        (current-module)
        'define
        (make-syntax-transformer 'define 'define '()))
      (module-define!
        (current-module)
        'define-syntax
        (make-syntax-transformer
          'define-syntax
          'define-syntax
          '()))
      (module-define!
        (current-module)
        'define-syntax-parameter
        (make-syntax-transformer
          'define-syntax-parameter
          'define-syntax-parameter
          '()))
      (module-define!
        (current-module)
        'eval-when
        (make-syntax-transformer
          'eval-when
          'eval-when
          '()))
      (#{global-extend _hoQGWMnyQPAh3k2jhWHS@}#
        'core
        'syntax-case
        (letrec*
          ((#{convert-pattern _hoQGWMnyQPAh3k2jhWI6q}#
             (lambda (#{pattern _hoQGWMnyQPAh3k2jhWJTl}#
                      #{keys _hoQGWMnyQPAh3k2jhWJTm}#)
               (letrec*
                 ((#{cvt* _hoQGWMnyQPAh3k2jhWJTn}#
                    (lambda (#{p* _hoQGWMnyQPAh3k2jhWJdX}#
                             #{n _hoQGWMnyQPAh3k2jhWJdY}#
                             #{ids _hoQGWMnyQPAh3k2jhWJdZ}#)
                      (if (not (pair? #{p* _hoQGWMnyQPAh3k2jhWJdX}#))
                        (#{cvt _hoQGWMnyQPAh3k2jhWJTp}#
                          #{p* _hoQGWMnyQPAh3k2jhWJdX}#
                          #{n _hoQGWMnyQPAh3k2jhWJdY}#
                          #{ids _hoQGWMnyQPAh3k2jhWJdZ}#)
                        (call-with-values
                          (lambda ()
                            (#{cvt* _hoQGWMnyQPAh3k2jhWJTn}#
                              (cdr #{p* _hoQGWMnyQPAh3k2jhWJdX}#)
                              #{n _hoQGWMnyQPAh3k2jhWJdY}#
                              #{ids _hoQGWMnyQPAh3k2jhWJdZ}#))
                          (lambda (#{y _hoQGWMnyQPAh3k2jhWJdc}#
                                   #{ids _hoQGWMnyQPAh3k2jhWJdd}#)
                            (call-with-values
                              (lambda ()
                                (#{cvt _hoQGWMnyQPAh3k2jhWJTp}#
                                  (car #{p* _hoQGWMnyQPAh3k2jhWJdX}#)
                                  #{n _hoQGWMnyQPAh3k2jhWJdY}#
                                  #{ids _hoQGWMnyQPAh3k2jhWJdd}#))
                              (lambda (#{x _hoQGWMnyQPAh3k2jhWJdg}#
                                       #{ids _hoQGWMnyQPAh3k2jhWJdh}#)
                                (values
                                  (cons #{x _hoQGWMnyQPAh3k2jhWJdg}#
                                        #{y _hoQGWMnyQPAh3k2jhWJdc}#)
                                  #{ids _hoQGWMnyQPAh3k2jhWJdh}#))))))))
                  (#{v-reverse _hoQGWMnyQPAh3k2jhWJTo}#
                    (lambda (#{x _hoQGWMnyQPAh3k2jhWJdi}#)
                      (letrec*
                        ((#{loop _hoQGWMnyQPAh3k2jhWJdj}#
                           (lambda (#{r _hoQGWMnyQPAh3k2jhWJez}#
                                    #{x _hoQGWMnyQPAh3k2jhWJe0}#)
                             (if (not (pair? #{x _hoQGWMnyQPAh3k2jhWJe0}#))
                               (values
                                 #{r _hoQGWMnyQPAh3k2jhWJez}#
                                 #{x _hoQGWMnyQPAh3k2jhWJe0}#)
                               (#{loop _hoQGWMnyQPAh3k2jhWJdj}#
                                 (cons (car #{x _hoQGWMnyQPAh3k2jhWJe0}#)
                                       #{r _hoQGWMnyQPAh3k2jhWJez}#)
                                 (cdr #{x _hoQGWMnyQPAh3k2jhWJe0}#))))))
                        (#{loop _hoQGWMnyQPAh3k2jhWJdj}#
                          '()
                          #{x _hoQGWMnyQPAh3k2jhWJdi}#))))
                  (#{cvt _hoQGWMnyQPAh3k2jhWJTp}#
                    (lambda (#{p _hoQGWMnyQPAh3k2jhWJTs}#
                             #{n _hoQGWMnyQPAh3k2jhWJTt}#
                             #{ids _hoQGWMnyQPAh3k2jhWJTu}#)
                      (if (if (symbol? #{p _hoQGWMnyQPAh3k2jhWJTs}#)
                            #t
                            (if (if (vector? #{p _hoQGWMnyQPAh3k2jhWJTs}#)
                                  (if (= (vector-length
                                           #{p _hoQGWMnyQPAh3k2jhWJTs}#)
                                         4)
                                    (eq? (vector-ref
                                           #{p _hoQGWMnyQPAh3k2jhWJTs}#
                                           0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol?
                                (vector-ref #{p _hoQGWMnyQPAh3k2jhWJTs}# 1))
                              #f))
                        (if (#{bound-id-member? _hoQGWMnyQPAh3k2jhWHTd}#
                              #{p _hoQGWMnyQPAh3k2jhWJTs}#
                              #{keys _hoQGWMnyQPAh3k2jhWJTm}#)
                          (values
                            (vector 'free-id #{p _hoQGWMnyQPAh3k2jhWJTs}#)
                            #{ids _hoQGWMnyQPAh3k2jhWJTu}#)
                          (if (if (eq? (if (if (vector?
                                                 #{p _hoQGWMnyQPAh3k2jhWJTs}#)
                                             (if (= (vector-length
                                                      #{p _hoQGWMnyQPAh3k2jhWJTs}#)
                                                    4)
                                               (eq? (vector-ref
                                                      #{p _hoQGWMnyQPAh3k2jhWJTs}#
                                                      0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (vector-ref
                                           #{p _hoQGWMnyQPAh3k2jhWJTs}#
                                           1)
                                         #{p _hoQGWMnyQPAh3k2jhWJTs}#)
                                       (if (if (= (vector-length
                                                    '#(syntax-object
                                                       _
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p n ids)
                                                          #((top) (top) (top))
                                                          #("2uh" "2ui" "2uj"))
                                                        #(ribcage
                                                          (cvt v-reverse cvt*)
                                                          ((top) (top) (top))
                                                          ("2u5" "2u4" "2u3"))
                                                        #(ribcage
                                                          #(pattern keys)
                                                          #((top) (top))
                                                          #("2u1" "2u2"))
                                                        #(ribcage
                                                          (gen-syntax-case
                                                            gen-clause
                                                            build-dispatch-call
                                                            convert-pattern)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("2u0"
                                                           "2tz"
                                                           "2ty"
                                                           "2tx"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            locally-bound-identifiers
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("1tt"
                                                           "1ts"
                                                           "1tr"
                                                           "1tq"
                                                           "1tp"
                                                           "1to"
                                                           "1tn"
                                                           "1tm"
                                                           "1tl"
                                                           "1tk"
                                                           "1tj"
                                                           "1ti"
                                                           "1th"
                                                           "1tg"
                                                           "1tf"
                                                           "1te"
                                                           "1td"
                                                           "1tc"
                                                           "1tb"
                                                           "1ta"
                                                           "1t9"
                                                           "1t8"
                                                           "1t7"
                                                           "1t6"
                                                           "1t5"
                                                           "1t4"
                                                           "1t3"
                                                           "1t2"
                                                           "1t1"
                                                           "1t0"
                                                           "1sz"
                                                           "1sy"
                                                           "1sx"
                                                           "1sw"
                                                           "1sv"
                                                           "1su"
                                                           "1st"
                                                           "1ss"
                                                           "1sr"
                                                           "1sq"
                                                           "1sp"
                                                           "1so"
                                                           "1sn"
                                                           "1sm"
                                                           "1sl"
                                                           "1sk"
                                                           "1sj"
                                                           "1si"
                                                           "1sh"
                                                           "1sg"
                                                           "1sf"
                                                           "1se"
                                                           "1sd"
                                                           "1sc"
                                                           "1sb"
                                                           "1sa"
                                                           "1s9"
                                                           "1s8"
                                                           "1s7"
                                                           "1s6"
                                                           "1s5"
                                                           "1s4"
                                                           "1s3"
                                                           "1s2"
                                                           "1s1"
                                                           "1s0"
                                                           "1rz"
                                                           "1ry"
                                                           "1rx"
                                                           "1rw"
                                                           "1rv"
                                                           "1ru"
                                                           "1rt"
                                                           "1rs"
                                                           "1rr"
                                                           "1rq"
                                                           "1rp"
                                                           "1ro"
                                                           "1rn"
                                                           "1rm"
                                                           "1rl"
                                                           "1rk"
                                                           "1rj"
                                                           "1ri"
                                                           "1rh"
                                                           "1rg"
                                                           "1rf"
                                                           "1re"
                                                           "1rd"
                                                           "1rc"
                                                           "1rb"
                                                           "1ra"
                                                           "1r9"
                                                           "1r8"
                                                           "1r7"
                                                           "1r6"
                                                           "1r5"
                                                           "1r4"
                                                           "1r3"
                                                           "1r2"
                                                           "1r1"
                                                           "1r0"
                                                           "1qz"
                                                           "1qy"
                                                           "1qx"
                                                           "1qw"
                                                           "1qv"
                                                           "1qu"
                                                           "1qt"
                                                           "1qs"
                                                           "1qr"
                                                           "1qq"
                                                           "1qp"
                                                           "1qo"
                                                           "1qn"
                                                           "1qm"
                                                           "1ql"
                                                           "1qk"
                                                           "1qj"
                                                           "1qi"
                                                           "1qh"
                                                           "1qg"
                                                           "1qf"
                                                           "1qe"
                                                           "1qd"
                                                           "1qc"
                                                           "1qb"
                                                           "1qa"
                                                           "1q9"
                                                           "1q8"
                                                           "1q7"
                                                           "1q6"
                                                           "1q5"
                                                           "1q4"
                                                           "1q3"
                                                           "1q2"
                                                           "1q1"
                                                           "1q0"
                                                           "1pz"
                                                           "1py"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("1og" "1of" "1oe")))
                                                       (hygiene guile)))
                                                  4)
                                             #t
                                             #f)
                                         '_
                                         '#(syntax-object
                                            _
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(p n ids)
                                               #((top) (top) (top))
                                               #("2uh" "2ui" "2uj"))
                                             #(ribcage
                                               (cvt v-reverse cvt*)
                                               ((top) (top) (top))
                                               ("2u5" "2u4" "2u3"))
                                             #(ribcage
                                               #(pattern keys)
                                               #((top) (top))
                                               #("2u1" "2u2"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("2u0" "2tz" "2ty" "2tx"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("1tt"
                                                "1ts"
                                                "1tr"
                                                "1tq"
                                                "1tp"
                                                "1to"
                                                "1tn"
                                                "1tm"
                                                "1tl"
                                                "1tk"
                                                "1tj"
                                                "1ti"
                                                "1th"
                                                "1tg"
                                                "1tf"
                                                "1te"
                                                "1td"
                                                "1tc"
                                                "1tb"
                                                "1ta"
                                                "1t9"
                                                "1t8"
                                                "1t7"
                                                "1t6"
                                                "1t5"
                                                "1t4"
                                                "1t3"
                                                "1t2"
                                                "1t1"
                                                "1t0"
                                                "1sz"
                                                "1sy"
                                                "1sx"
                                                "1sw"
                                                "1sv"
                                                "1su"
                                                "1st"
                                                "1ss"
                                                "1sr"
                                                "1sq"
                                                "1sp"
                                                "1so"
                                                "1sn"
                                                "1sm"
                                                "1sl"
                                                "1sk"
                                                "1sj"
                                                "1si"
                                                "1sh"
                                                "1sg"
                                                "1sf"
                                                "1se"
                                                "1sd"
                                                "1sc"
                                                "1sb"
                                                "1sa"
                                                "1s9"
                                                "1s8"
                                                "1s7"
                                                "1s6"
                                                "1s5"
                                                "1s4"
                                                "1s3"
                                                "1s2"
                                                "1s1"
                                                "1s0"
                                                "1rz"
                                                "1ry"
                                                "1rx"
                                                "1rw"
                                                "1rv"
                                                "1ru"
                                                "1rt"
                                                "1rs"
                                                "1rr"
                                                "1rq"
                                                "1rp"
                                                "1ro"
                                                "1rn"
                                                "1rm"
                                                "1rl"
                                                "1rk"
                                                "1rj"
                                                "1ri"
                                                "1rh"
                                                "1rg"
                                                "1rf"
                                                "1re"
                                                "1rd"
                                                "1rc"
                                                "1rb"
                                                "1ra"
                                                "1r9"
                                                "1r8"
                                                "1r7"
                                                "1r6"
                                                "1r5"
                                                "1r4"
                                                "1r3"
                                                "1r2"
                                                "1r1"
                                                "1r0"
                                                "1qz"
                                                "1qy"
                                                "1qx"
                                                "1qw"
                                                "1qv"
                                                "1qu"
                                                "1qt"
                                                "1qs"
                                                "1qr"
                                                "1qq"
                                                "1qp"
                                                "1qo"
                                                "1qn"
                                                "1qm"
                                                "1ql"
                                                "1qk"
                                                "1qj"
                                                "1qi"
                                                "1qh"
                                                "1qg"
                                                "1qf"
                                                "1qe"
                                                "1qd"
                                                "1qc"
                                                "1qb"
                                                "1qa"
                                                "1q9"
                                                "1q8"
                                                "1q7"
                                                "1q6"
                                                "1q5"
                                                "1q4"
                                                "1q3"
                                                "1q2"
                                                "1q1"
                                                "1q0"
                                                "1pz"
                                                "1py"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("1og" "1of" "1oe")))
                                            (hygiene guile))))
                                (eq? (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                       #{p _hoQGWMnyQPAh3k2jhWJTs}#
                                       '(()))
                                     (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("2uh" "2ui" "2uj"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("2u5" "2u4" "2u3"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("2u1" "2u2"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("2u0" "2tz" "2ty" "2tx"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               with-transformer-environment
                                               transformer-environment
                                               resolve-identifier
                                               locally-bound-identifiers
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("1tt"
                                              "1ts"
                                              "1tr"
                                              "1tq"
                                              "1tp"
                                              "1to"
                                              "1tn"
                                              "1tm"
                                              "1tl"
                                              "1tk"
                                              "1tj"
                                              "1ti"
                                              "1th"
                                              "1tg"
                                              "1tf"
                                              "1te"
                                              "1td"
                                              "1tc"
                                              "1tb"
                                              "1ta"
                                              "1t9"
                                              "1t8"
                                              "1t7"
                                              "1t6"
                                              "1t5"
                                              "1t4"
                                              "1t3"
                                              "1t2"
                                              "1t1"
                                              "1t0"
                                              "1sz"
                                              "1sy"
                                              "1sx"
                                              "1sw"
                                              "1sv"
                                              "1su"
                                              "1st"
                                              "1ss"
                                              "1sr"
                                              "1sq"
                                              "1sp"
                                              "1so"
                                              "1sn"
                                              "1sm"
                                              "1sl"
                                              "1sk"
                                              "1sj"
                                              "1si"
                                              "1sh"
                                              "1sg"
                                              "1sf"
                                              "1se"
                                              "1sd"
                                              "1sc"
                                              "1sb"
                                              "1sa"
                                              "1s9"
                                              "1s8"
                                              "1s7"
                                              "1s6"
                                              "1s5"
                                              "1s4"
                                              "1s3"
                                              "1s2"
                                              "1s1"
                                              "1s0"
                                              "1rz"
                                              "1ry"
                                              "1rx"
                                              "1rw"
                                              "1rv"
                                              "1ru"
                                              "1rt"
                                              "1rs"
                                              "1rr"
                                              "1rq"
                                              "1rp"
                                              "1ro"
                                              "1rn"
                                              "1rm"
                                              "1rl"
                                              "1rk"
                                              "1rj"
                                              "1ri"
                                              "1rh"
                                              "1rg"
                                              "1rf"
                                              "1re"
                                              "1rd"
                                              "1rc"
                                              "1rb"
                                              "1ra"
                                              "1r9"
                                              "1r8"
                                              "1r7"
                                              "1r6"
                                              "1r5"
                                              "1r4"
                                              "1r3"
                                              "1r2"
                                              "1r1"
                                              "1r0"
                                              "1qz"
                                              "1qy"
                                              "1qx"
                                              "1qw"
                                              "1qv"
                                              "1qu"
                                              "1qt"
                                              "1qs"
                                              "1qr"
                                              "1qq"
                                              "1qp"
                                              "1qo"
                                              "1qn"
                                              "1qm"
                                              "1ql"
                                              "1qk"
                                              "1qj"
                                              "1qi"
                                              "1qh"
                                              "1qg"
                                              "1qf"
                                              "1qe"
                                              "1qd"
                                              "1qc"
                                              "1qb"
                                              "1qa"
                                              "1q9"
                                              "1q8"
                                              "1q7"
                                              "1q6"
                                              "1q5"
                                              "1q4"
                                              "1q3"
                                              "1q2"
                                              "1q1"
                                              "1q0"
                                              "1pz"
                                              "1py"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("1og" "1of" "1oe")))
                                          (hygiene guile))
                                       '(())))
                                #f)
                            (values '_ #{ids _hoQGWMnyQPAh3k2jhWJTu}#)
                            (values
                              'any
                              (cons (cons #{p _hoQGWMnyQPAh3k2jhWJTs}#
                                          #{n _hoQGWMnyQPAh3k2jhWJTt}#)
                                    #{ids _hoQGWMnyQPAh3k2jhWJTu}#))))
                        (let ((#{tmp _hoQGWMnyQPAh3k2jhWJYu}#
                                ($sc-dispatch
                                  #{p _hoQGWMnyQPAh3k2jhWJTs}#
                                  '(any any))))
                          (if (if #{tmp _hoQGWMnyQPAh3k2jhWJYu}#
                                (@apply
                                  (lambda (#{x _hoQGWMnyQPAh3k2jhWJYy}#
                                           #{dots _hoQGWMnyQPAh3k2jhWJYz}#)
                                    (if (if (if (vector?
                                                  #{dots _hoQGWMnyQPAh3k2jhWJYz}#)
                                              (if (= (vector-length
                                                       #{dots _hoQGWMnyQPAh3k2jhWJYz}#)
                                                     4)
                                                (eq? (vector-ref
                                                       #{dots _hoQGWMnyQPAh3k2jhWJYz}#
                                                       0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (symbol?
                                            (vector-ref
                                              #{dots _hoQGWMnyQPAh3k2jhWJYz}#
                                              1))
                                          #f)
                                      (if (eq? (if (if (vector?
                                                         #{dots _hoQGWMnyQPAh3k2jhWJYz}#)
                                                     (if (= (vector-length
                                                              #{dots _hoQGWMnyQPAh3k2jhWJYz}#)
                                                            4)
                                                       (eq? (vector-ref
                                                              #{dots _hoQGWMnyQPAh3k2jhWJYz}#
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref
                                                   #{dots _hoQGWMnyQPAh3k2jhWJYz}#
                                                   1)
                                                 #{dots _hoQGWMnyQPAh3k2jhWJYz}#)
                                               (if (if (= (vector-length
                                                            '#(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("2de"))
                                                                #(ribcage
                                                                  (lambda-var-list
                                                                    gen-var
                                                                    strip
                                                                    expand-lambda-case
                                                                    lambda*-formals
                                                                    expand-simple-lambda
                                                                    lambda-formals
                                                                    ellipsis?
                                                                    expand-void
                                                                    eval-local-transformer
                                                                    expand-local-syntax
                                                                    expand-body
                                                                    expand-macro
                                                                    expand-application
                                                                    expand-expr
                                                                    expand
                                                                    syntax-type
                                                                    parse-when-list
                                                                    expand-install-global
                                                                    expand-top-sequence
                                                                    expand-sequence
                                                                    source-wrap
                                                                    wrap
                                                                    bound-id-member?
                                                                    distinct-bound-ids?
                                                                    valid-bound-ids?
                                                                    bound-id=?
                                                                    free-id=?
                                                                    with-transformer-environment
                                                                    transformer-environment
                                                                    resolve-identifier
                                                                    locally-bound-identifiers
                                                                    id-var-name
                                                                    same-marks?
                                                                    join-marks
                                                                    join-wraps
                                                                    smart-append
                                                                    make-binding-wrap
                                                                    extend-ribcage!
                                                                    make-empty-ribcage
                                                                    new-mark
                                                                    anti-mark
                                                                    the-anti-mark
                                                                    top-marked?
                                                                    top-wrap
                                                                    empty-wrap
                                                                    set-ribcage-labels!
                                                                    set-ribcage-marks!
                                                                    set-ribcage-symnames!
                                                                    ribcage-labels
                                                                    ribcage-marks
                                                                    ribcage-symnames
                                                                    ribcage?
                                                                    make-ribcage
                                                                    gen-labels
                                                                    gen-label
                                                                    make-rename
                                                                    rename-marks
                                                                    rename-new
                                                                    rename-old
                                                                    subst-rename?
                                                                    wrap-subst
                                                                    wrap-marks
                                                                    make-wrap
                                                                    id-sym-name&marks
                                                                    id-sym-name
                                                                    id?
                                                                    nonsymbol-id?
                                                                    global-extend
                                                                    lookup
                                                                    macros-only-env
                                                                    extend-var-env
                                                                    extend-env
                                                                    null-env
                                                                    binding-value
                                                                    binding-type
                                                                    make-binding
                                                                    arg-check
                                                                    source-annotation
                                                                    no-source
                                                                    set-syntax-object-module!
                                                                    set-syntax-object-wrap!
                                                                    set-syntax-object-expression!
                                                                    syntax-object-module
                                                                    syntax-object-wrap
                                                                    syntax-object-expression
                                                                    syntax-object?
                                                                    make-syntax-object
                                                                    build-lexical-var
                                                                    build-letrec
                                                                    build-named-let
                                                                    build-let
                                                                    build-sequence
                                                                    build-data
                                                                    build-primref
                                                                    build-lambda-case
                                                                    build-case-lambda
                                                                    build-simple-lambda
                                                                    build-global-definition
                                                                    build-global-assignment
                                                                    build-global-reference
                                                                    analyze-variable
                                                                    build-lexical-assignment
                                                                    build-lexical-reference
                                                                    build-dynlet
                                                                    build-conditional
                                                                    build-application
                                                                    build-void
                                                                    maybe-name-value!
                                                                    decorate-source
                                                                    get-global-definition-hook
                                                                    put-global-definition-hook
                                                                    gensym-hook
                                                                    local-eval-hook
                                                                    top-level-eval-hook
                                                                    fx<
                                                                    fx=
                                                                    fx-
                                                                    fx+
                                                                    set-lambda-meta!
                                                                    lambda-meta
                                                                    lambda?
                                                                    make-dynlet
                                                                    make-letrec
                                                                    make-let
                                                                    make-lambda-case
                                                                    make-lambda
                                                                    make-sequence
                                                                    make-application
                                                                    make-conditional
                                                                    make-toplevel-define
                                                                    make-toplevel-set
                                                                    make-toplevel-ref
                                                                    make-module-set
                                                                    make-module-ref
                                                                    make-lexical-set
                                                                    make-lexical-ref
                                                                    make-primitive-ref
                                                                    make-const
                                                                    make-void)
                                                                  ((top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                  ("1tt"
                                                                   "1ts"
                                                                   "1tr"
                                                                   "1tq"
                                                                   "1tp"
                                                                   "1to"
                                                                   "1tn"
                                                                   "1tm"
                                                                   "1tl"
                                                                   "1tk"
                                                                   "1tj"
                                                                   "1ti"
                                                                   "1th"
                                                                   "1tg"
                                                                   "1tf"
                                                                   "1te"
                                                                   "1td"
                                                                   "1tc"
                                                                   "1tb"
                                                                   "1ta"
                                                                   "1t9"
                                                                   "1t8"
                                                                   "1t7"
                                                                   "1t6"
                                                                   "1t5"
                                                                   "1t4"
                                                                   "1t3"
                                                                   "1t2"
                                                                   "1t1"
                                                                   "1t0"
                                                                   "1sz"
                                                                   "1sy"
                                                                   "1sx"
                                                                   "1sw"
                                                                   "1sv"
                                                                   "1su"
                                                                   "1st"
                                                                   "1ss"
                                                                   "1sr"
                                                                   "1sq"
                                                                   "1sp"
                                                                   "1so"
                                                                   "1sn"
                                                                   "1sm"
                                                                   "1sl"
                                                                   "1sk"
                                                                   "1sj"
                                                                   "1si"
                                                                   "1sh"
                                                                   "1sg"
                                                                   "1sf"
                                                                   "1se"
                                                                   "1sd"
                                                                   "1sc"
                                                                   "1sb"
                                                                   "1sa"
                                                                   "1s9"
                                                                   "1s8"
                                                                   "1s7"
                                                                   "1s6"
                                                                   "1s5"
                                                                   "1s4"
                                                                   "1s3"
                                                                   "1s2"
                                                                   "1s1"
                                                                   "1s0"
                                                                   "1rz"
                                                                   "1ry"
                                                                   "1rx"
                                                                   "1rw"
                                                                   "1rv"
                                                                   "1ru"
                                                                   "1rt"
                                                                   "1rs"
                                                                   "1rr"
                                                                   "1rq"
                                                                   "1rp"
                                                                   "1ro"
                                                                   "1rn"
                                                                   "1rm"
                                                                   "1rl"
                                                                   "1rk"
                                                                   "1rj"
                                                                   "1ri"
                                                                   "1rh"
                                                                   "1rg"
                                                                   "1rf"
                                                                   "1re"
                                                                   "1rd"
                                                                   "1rc"
                                                                   "1rb"
                                                                   "1ra"
                                                                   "1r9"
                                                                   "1r8"
                                                                   "1r7"
                                                                   "1r6"
                                                                   "1r5"
                                                                   "1r4"
                                                                   "1r3"
                                                                   "1r2"
                                                                   "1r1"
                                                                   "1r0"
                                                                   "1qz"
                                                                   "1qy"
                                                                   "1qx"
                                                                   "1qw"
                                                                   "1qv"
                                                                   "1qu"
                                                                   "1qt"
                                                                   "1qs"
                                                                   "1qr"
                                                                   "1qq"
                                                                   "1qp"
                                                                   "1qo"
                                                                   "1qn"
                                                                   "1qm"
                                                                   "1ql"
                                                                   "1qk"
                                                                   "1qj"
                                                                   "1qi"
                                                                   "1qh"
                                                                   "1qg"
                                                                   "1qf"
                                                                   "1qe"
                                                                   "1qd"
                                                                   "1qc"
                                                                   "1qb"
                                                                   "1qa"
                                                                   "1q9"
                                                                   "1q8"
                                                                   "1q7"
                                                                   "1q6"
                                                                   "1q5"
                                                                   "1q4"
                                                                   "1q3"
                                                                   "1q2"
                                                                   "1q1"
                                                                   "1q0"
                                                                   "1pz"
                                                                   "1py"))
                                                                #(ribcage
                                                                  (define-structure
                                                                    define-expansion-accessors
                                                                    define-expansion-constructors)
                                                                  ((top)
                                                                   (top)
                                                                   (top))
                                                                  ("1og"
                                                                   "1of"
                                                                   "1oe")))
                                                               (hygiene
                                                                 guile)))
                                                          4)
                                                     #t
                                                     #f)
                                                 '...
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("2de"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         with-transformer-environment
                                                         transformer-environment
                                                         resolve-identifier
                                                         locally-bound-identifiers
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("1tt"
                                                        "1ts"
                                                        "1tr"
                                                        "1tq"
                                                        "1tp"
                                                        "1to"
                                                        "1tn"
                                                        "1tm"
                                                        "1tl"
                                                        "1tk"
                                                        "1tj"
                                                        "1ti"
                                                        "1th"
                                                        "1tg"
                                                        "1tf"
                                                        "1te"
                                                        "1td"
                                                        "1tc"
                                                        "1tb"
                                                        "1ta"
                                                        "1t9"
                                                        "1t8"
                                                        "1t7"
                                                        "1t6"
                                                        "1t5"
                                                        "1t4"
                                                        "1t3"
                                                        "1t2"
                                                        "1t1"
                                                        "1t0"
                                                        "1sz"
                                                        "1sy"
                                                        "1sx"
                                                        "1sw"
                                                        "1sv"
                                                        "1su"
                                                        "1st"
                                                        "1ss"
                                                        "1sr"
                                                        "1sq"
                                                        "1sp"
                                                        "1so"
                                                        "1sn"
                                                        "1sm"
                                                        "1sl"
                                                        "1sk"
                                                        "1sj"
                                                        "1si"
                                                        "1sh"
                                                        "1sg"
                                                        "1sf"
                                                        "1se"
                                                        "1sd"
                                                        "1sc"
                                                        "1sb"
                                                        "1sa"
                                                        "1s9"
                                                        "1s8"
                                                        "1s7"
                                                        "1s6"
                                                        "1s5"
                                                        "1s4"
                                                        "1s3"
                                                        "1s2"
                                                        "1s1"
                                                        "1s0"
                                                        "1rz"
                                                        "1ry"
                                                        "1rx"
                                                        "1rw"
                                                        "1rv"
                                                        "1ru"
                                                        "1rt"
                                                        "1rs"
                                                        "1rr"
                                                        "1rq"
                                                        "1rp"
                                                        "1ro"
                                                        "1rn"
                                                        "1rm"
                                                        "1rl"
                                                        "1rk"
                                                        "1rj"
                                                        "1ri"
                                                        "1rh"
                                                        "1rg"
                                                        "1rf"
                                                        "1re"
                                                        "1rd"
                                                        "1rc"
                                                        "1rb"
                                                        "1ra"
                                                        "1r9"
                                                        "1r8"
                                                        "1r7"
                                                        "1r6"
                                                        "1r5"
                                                        "1r4"
                                                        "1r3"
                                                        "1r2"
                                                        "1r1"
                                                        "1r0"
                                                        "1qz"
                                                        "1qy"
                                                        "1qx"
                                                        "1qw"
                                                        "1qv"
                                                        "1qu"
                                                        "1qt"
                                                        "1qs"
                                                        "1qr"
                                                        "1qq"
                                                        "1qp"
                                                        "1qo"
                                                        "1qn"
                                                        "1qm"
                                                        "1ql"
                                                        "1qk"
                                                        "1qj"
                                                        "1qi"
                                                        "1qh"
                                                        "1qg"
                                                        "1qf"
                                                        "1qe"
                                                        "1qd"
                                                        "1qc"
                                                        "1qb"
                                                        "1qa"
                                                        "1q9"
                                                        "1q8"
                                                        "1q7"
                                                        "1q6"
                                                        "1q5"
                                                        "1q4"
                                                        "1q3"
                                                        "1q2"
                                                        "1q1"
                                                        "1q0"
                                                        "1pz"
                                                        "1py"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("1og" "1of" "1oe")))
                                                    (hygiene guile))))
                                        (eq? (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                               #{dots _hoQGWMnyQPAh3k2jhWJYz}#
                                               '(()))
                                             (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("2de"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       expand-lambda-case
                                                       lambda*-formals
                                                       expand-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       expand-void
                                                       eval-local-transformer
                                                       expand-local-syntax
                                                       expand-body
                                                       expand-macro
                                                       expand-application
                                                       expand-expr
                                                       expand
                                                       syntax-type
                                                       parse-when-list
                                                       expand-install-global
                                                       expand-top-sequence
                                                       expand-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       with-transformer-environment
                                                       transformer-environment
                                                       resolve-identifier
                                                       locally-bound-identifiers
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("1tt"
                                                      "1ts"
                                                      "1tr"
                                                      "1tq"
                                                      "1tp"
                                                      "1to"
                                                      "1tn"
                                                      "1tm"
                                                      "1tl"
                                                      "1tk"
                                                      "1tj"
                                                      "1ti"
                                                      "1th"
                                                      "1tg"
                                                      "1tf"
                                                      "1te"
                                                      "1td"
                                                      "1tc"
                                                      "1tb"
                                                      "1ta"
                                                      "1t9"
                                                      "1t8"
                                                      "1t7"
                                                      "1t6"
                                                      "1t5"
                                                      "1t4"
                                                      "1t3"
                                                      "1t2"
                                                      "1t1"
                                                      "1t0"
                                                      "1sz"
                                                      "1sy"
                                                      "1sx"
                                                      "1sw"
                                                      "1sv"
                                                      "1su"
                                                      "1st"
                                                      "1ss"
                                                      "1sr"
                                                      "1sq"
                                                      "1sp"
                                                      "1so"
                                                      "1sn"
                                                      "1sm"
                                                      "1sl"
                                                      "1sk"
                                                      "1sj"
                                                      "1si"
                                                      "1sh"
                                                      "1sg"
                                                      "1sf"
                                                      "1se"
                                                      "1sd"
                                                      "1sc"
                                                      "1sb"
                                                      "1sa"
                                                      "1s9"
                                                      "1s8"
                                                      "1s7"
                                                      "1s6"
                                                      "1s5"
                                                      "1s4"
                                                      "1s3"
                                                      "1s2"
                                                      "1s1"
                                                      "1s0"
                                                      "1rz"
                                                      "1ry"
                                                      "1rx"
                                                      "1rw"
                                                      "1rv"
                                                      "1ru"
                                                      "1rt"
                                                      "1rs"
                                                      "1rr"
                                                      "1rq"
                                                      "1rp"
                                                      "1ro"
                                                      "1rn"
                                                      "1rm"
                                                      "1rl"
                                                      "1rk"
                                                      "1rj"
                                                      "1ri"
                                                      "1rh"
                                                      "1rg"
                                                      "1rf"
                                                      "1re"
                                                      "1rd"
                                                      "1rc"
                                                      "1rb"
                                                      "1ra"
                                                      "1r9"
                                                      "1r8"
                                                      "1r7"
                                                      "1r6"
                                                      "1r5"
                                                      "1r4"
                                                      "1r3"
                                                      "1r2"
                                                      "1r1"
                                                      "1r0"
                                                      "1qz"
                                                      "1qy"
                                                      "1qx"
                                                      "1qw"
                                                      "1qv"
                                                      "1qu"
                                                      "1qt"
                                                      "1qs"
                                                      "1qr"
                                                      "1qq"
                                                      "1qp"
                                                      "1qo"
                                                      "1qn"
                                                      "1qm"
                                                      "1ql"
                                                      "1qk"
                                                      "1qj"
                                                      "1qi"
                                                      "1qh"
                                                      "1qg"
                                                      "1qf"
                                                      "1qe"
                                                      "1qd"
                                                      "1qc"
                                                      "1qb"
                                                      "1qa"
                                                      "1q9"
                                                      "1q8"
                                                      "1q7"
                                                      "1q6"
                                                      "1q5"
                                                      "1q4"
                                                      "1q3"
                                                      "1q2"
                                                      "1q1"
                                                      "1q0"
                                                      "1pz"
                                                      "1py"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("1og" "1of" "1oe")))
                                                  (hygiene guile))
                                               '(())))
                                        #f)
                                      #f))
                                  #{tmp _hoQGWMnyQPAh3k2jhWJYu}#)
                                #f)
                            (@apply
                              (lambda (#{x _hoQGWMnyQPAh3k2jhWJaX}#
                                       #{dots _hoQGWMnyQPAh3k2jhWJaY}#)
                                (call-with-values
                                  (lambda ()
                                    (#{cvt _hoQGWMnyQPAh3k2jhWJTp}#
                                      #{x _hoQGWMnyQPAh3k2jhWJaX}#
                                      (#{1+}# #{n _hoQGWMnyQPAh3k2jhWJTt}#)
                                      #{ids _hoQGWMnyQPAh3k2jhWJTu}#))
                                  (lambda (#{p _hoQGWMnyQPAh3k2jhWJaZ}#
                                           #{ids _hoQGWMnyQPAh3k2jhWJaa}#)
                                    (values
                                      (if (eq? #{p _hoQGWMnyQPAh3k2jhWJaZ}#
                                               'any)
                                        'each-any
                                        (vector
                                          'each
                                          #{p _hoQGWMnyQPAh3k2jhWJaZ}#))
                                      #{ids _hoQGWMnyQPAh3k2jhWJaa}#))))
                              #{tmp _hoQGWMnyQPAh3k2jhWJYu}#)
                            (let ((#{tmp _hoQGWMnyQPAh3k2jhWJab}#
                                    ($sc-dispatch
                                      #{p _hoQGWMnyQPAh3k2jhWJTs}#
                                      '(any any . any))))
                              (if (if #{tmp _hoQGWMnyQPAh3k2jhWJab}#
                                    (@apply
                                      (lambda (#{x _hoQGWMnyQPAh3k2jhWJaf}#
                                               #{dots _hoQGWMnyQPAh3k2jhWJag}#
                                               #{ys _hoQGWMnyQPAh3k2jhWJah}#)
                                        (if (if (if (vector?
                                                      #{dots _hoQGWMnyQPAh3k2jhWJag}#)
                                                  (if (= (vector-length
                                                           #{dots _hoQGWMnyQPAh3k2jhWJag}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{dots _hoQGWMnyQPAh3k2jhWJag}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref
                                                  #{dots _hoQGWMnyQPAh3k2jhWJag}#
                                                  1))
                                              #f)
                                          (if (eq? (if (if (vector?
                                                             #{dots _hoQGWMnyQPAh3k2jhWJag}#)
                                                         (if (= (vector-length
                                                                  #{dots _hoQGWMnyQPAh3k2jhWJag}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{dots _hoQGWMnyQPAh3k2jhWJag}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref
                                                       #{dots _hoQGWMnyQPAh3k2jhWJag}#
                                                       1)
                                                     #{dots _hoQGWMnyQPAh3k2jhWJag}#)
                                                   (if (if (= (vector-length
                                                                '#(syntax-object
                                                                   ...
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(x)
                                                                      #((top))
                                                                      #("2de"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        expand-lambda-case
                                                                        lambda*-formals
                                                                        expand-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        expand-void
                                                                        eval-local-transformer
                                                                        expand-local-syntax
                                                                        expand-body
                                                                        expand-macro
                                                                        expand-application
                                                                        expand-expr
                                                                        expand
                                                                        syntax-type
                                                                        parse-when-list
                                                                        expand-install-global
                                                                        expand-top-sequence
                                                                        expand-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        with-transformer-environment
                                                                        transformer-environment
                                                                        resolve-identifier
                                                                        locally-bound-identifiers
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        gensym-hook
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("1tt"
                                                                       "1ts"
                                                                       "1tr"
                                                                       "1tq"
                                                                       "1tp"
                                                                       "1to"
                                                                       "1tn"
                                                                       "1tm"
                                                                       "1tl"
                                                                       "1tk"
                                                                       "1tj"
                                                                       "1ti"
                                                                       "1th"
                                                                       "1tg"
                                                                       "1tf"
                                                                       "1te"
                                                                       "1td"
                                                                       "1tc"
                                                                       "1tb"
                                                                       "1ta"
                                                                       "1t9"
                                                                       "1t8"
                                                                       "1t7"
                                                                       "1t6"
                                                                       "1t5"
                                                                       "1t4"
                                                                       "1t3"
                                                                       "1t2"
                                                                       "1t1"
                                                                       "1t0"
                                                                       "1sz"
                                                                       "1sy"
                                                                       "1sx"
                                                                       "1sw"
                                                                       "1sv"
                                                                       "1su"
                                                                       "1st"
                                                                       "1ss"
                                                                       "1sr"
                                                                       "1sq"
                                                                       "1sp"
                                                                       "1so"
                                                                       "1sn"
                                                                       "1sm"
                                                                       "1sl"
                                                                       "1sk"
                                                                       "1sj"
                                                                       "1si"
                                                                       "1sh"
                                                                       "1sg"
                                                                       "1sf"
                                                                       "1se"
                                                                       "1sd"
                                                                       "1sc"
                                                                       "1sb"
                                                                       "1sa"
                                                                       "1s9"
                                                                       "1s8"
                                                                       "1s7"
                                                                       "1s6"
                                                                       "1s5"
                                                                       "1s4"
                                                                       "1s3"
                                                                       "1s2"
                                                                       "1s1"
                                                                       "1s0"
                                                                       "1rz"
                                                                       "1ry"
                                                                       "1rx"
                                                                       "1rw"
                                                                       "1rv"
                                                                       "1ru"
                                                                       "1rt"
                                                                       "1rs"
                                                                       "1rr"
                                                                       "1rq"
                                                                       "1rp"
                                                                       "1ro"
                                                                       "1rn"
                                                                       "1rm"
                                                                       "1rl"
                                                                       "1rk"
                                                                       "1rj"
                                                                       "1ri"
                                                                       "1rh"
                                                                       "1rg"
                                                                       "1rf"
                                                                       "1re"
                                                                       "1rd"
                                                                       "1rc"
                                                                       "1rb"
                                                                       "1ra"
                                                                       "1r9"
                                                                       "1r8"
                                                                       "1r7"
                                                                       "1r6"
                                                                       "1r5"
                                                                       "1r4"
                                                                       "1r3"
                                                                       "1r2"
                                                                       "1r1"
                                                                       "1r0"
                                                                       "1qz"
                                                                       "1qy"
                                                                       "1qx"
                                                                       "1qw"
                                                                       "1qv"
                                                                       "1qu"
                                                                       "1qt"
                                                                       "1qs"
                                                                       "1qr"
                                                                       "1qq"
                                                                       "1qp"
                                                                       "1qo"
                                                                       "1qn"
                                                                       "1qm"
                                                                       "1ql"
                                                                       "1qk"
                                                                       "1qj"
                                                                       "1qi"
                                                                       "1qh"
                                                                       "1qg"
                                                                       "1qf"
                                                                       "1qe"
                                                                       "1qd"
                                                                       "1qc"
                                                                       "1qb"
                                                                       "1qa"
                                                                       "1q9"
                                                                       "1q8"
                                                                       "1q7"
                                                                       "1q6"
                                                                       "1q5"
                                                                       "1q4"
                                                                       "1q3"
                                                                       "1q2"
                                                                       "1q1"
                                                                       "1q0"
                                                                       "1pz"
                                                                       "1py"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors)
                                                                      ((top)
                                                                       (top)
                                                                       (top))
                                                                      ("1og"
                                                                       "1of"
                                                                       "1oe")))
                                                                   (hygiene
                                                                     guile)))
                                                              4)
                                                         #t
                                                         #f)
                                                     '...
                                                     '#(syntax-object
                                                        ...
                                                        ((top)
                                                         #(ribcage () () ())
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("2de"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             with-transformer-environment
                                                             transformer-environment
                                                             resolve-identifier
                                                             locally-bound-identifiers
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("1tt"
                                                            "1ts"
                                                            "1tr"
                                                            "1tq"
                                                            "1tp"
                                                            "1to"
                                                            "1tn"
                                                            "1tm"
                                                            "1tl"
                                                            "1tk"
                                                            "1tj"
                                                            "1ti"
                                                            "1th"
                                                            "1tg"
                                                            "1tf"
                                                            "1te"
                                                            "1td"
                                                            "1tc"
                                                            "1tb"
                                                            "1ta"
                                                            "1t9"
                                                            "1t8"
                                                            "1t7"
                                                            "1t6"
                                                            "1t5"
                                                            "1t4"
                                                            "1t3"
                                                            "1t2"
                                                            "1t1"
                                                            "1t0"
                                                            "1sz"
                                                            "1sy"
                                                            "1sx"
                                                            "1sw"
                                                            "1sv"
                                                            "1su"
                                                            "1st"
                                                            "1ss"
                                                            "1sr"
                                                            "1sq"
                                                            "1sp"
                                                            "1so"
                                                            "1sn"
                                                            "1sm"
                                                            "1sl"
                                                            "1sk"
                                                            "1sj"
                                                            "1si"
                                                            "1sh"
                                                            "1sg"
                                                            "1sf"
                                                            "1se"
                                                            "1sd"
                                                            "1sc"
                                                            "1sb"
                                                            "1sa"
                                                            "1s9"
                                                            "1s8"
                                                            "1s7"
                                                            "1s6"
                                                            "1s5"
                                                            "1s4"
                                                            "1s3"
                                                            "1s2"
                                                            "1s1"
                                                            "1s0"
                                                            "1rz"
                                                            "1ry"
                                                            "1rx"
                                                            "1rw"
                                                            "1rv"
                                                            "1ru"
                                                            "1rt"
                                                            "1rs"
                                                            "1rr"
                                                            "1rq"
                                                            "1rp"
                                                            "1ro"
                                                            "1rn"
                                                            "1rm"
                                                            "1rl"
                                                            "1rk"
                                                            "1rj"
                                                            "1ri"
                                                            "1rh"
                                                            "1rg"
                                                            "1rf"
                                                            "1re"
                                                            "1rd"
                                                            "1rc"
                                                            "1rb"
                                                            "1ra"
                                                            "1r9"
                                                            "1r8"
                                                            "1r7"
                                                            "1r6"
                                                            "1r5"
                                                            "1r4"
                                                            "1r3"
                                                            "1r2"
                                                            "1r1"
                                                            "1r0"
                                                            "1qz"
                                                            "1qy"
                                                            "1qx"
                                                            "1qw"
                                                            "1qv"
                                                            "1qu"
                                                            "1qt"
                                                            "1qs"
                                                            "1qr"
                                                            "1qq"
                                                            "1qp"
                                                            "1qo"
                                                            "1qn"
                                                            "1qm"
                                                            "1ql"
                                                            "1qk"
                                                            "1qj"
                                                            "1qi"
                                                            "1qh"
                                                            "1qg"
                                                            "1qf"
                                                            "1qe"
                                                            "1qd"
                                                            "1qc"
                                                            "1qb"
                                                            "1qa"
                                                            "1q9"
                                                            "1q8"
                                                            "1q7"
                                                            "1q6"
                                                            "1q5"
                                                            "1q4"
                                                            "1q3"
                                                            "1q2"
                                                            "1q1"
                                                            "1q0"
                                                            "1pz"
                                                            "1py"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("1og"
                                                            "1of"
                                                            "1oe")))
                                                        (hygiene guile))))
                                            (eq? (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                                   #{dots _hoQGWMnyQPAh3k2jhWJag}#
                                                   '(()))
                                                 (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("2de"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("1tt"
                                                          "1ts"
                                                          "1tr"
                                                          "1tq"
                                                          "1tp"
                                                          "1to"
                                                          "1tn"
                                                          "1tm"
                                                          "1tl"
                                                          "1tk"
                                                          "1tj"
                                                          "1ti"
                                                          "1th"
                                                          "1tg"
                                                          "1tf"
                                                          "1te"
                                                          "1td"
                                                          "1tc"
                                                          "1tb"
                                                          "1ta"
                                                          "1t9"
                                                          "1t8"
                                                          "1t7"
                                                          "1t6"
                                                          "1t5"
                                                          "1t4"
                                                          "1t3"
                                                          "1t2"
                                                          "1t1"
                                                          "1t0"
                                                          "1sz"
                                                          "1sy"
                                                          "1sx"
                                                          "1sw"
                                                          "1sv"
                                                          "1su"
                                                          "1st"
                                                          "1ss"
                                                          "1sr"
                                                          "1sq"
                                                          "1sp"
                                                          "1so"
                                                          "1sn"
                                                          "1sm"
                                                          "1sl"
                                                          "1sk"
                                                          "1sj"
                                                          "1si"
                                                          "1sh"
                                                          "1sg"
                                                          "1sf"
                                                          "1se"
                                                          "1sd"
                                                          "1sc"
                                                          "1sb"
                                                          "1sa"
                                                          "1s9"
                                                          "1s8"
                                                          "1s7"
                                                          "1s6"
                                                          "1s5"
                                                          "1s4"
                                                          "1s3"
                                                          "1s2"
                                                          "1s1"
                                                          "1s0"
                                                          "1rz"
                                                          "1ry"
                                                          "1rx"
                                                          "1rw"
                                                          "1rv"
                                                          "1ru"
                                                          "1rt"
                                                          "1rs"
                                                          "1rr"
                                                          "1rq"
                                                          "1rp"
                                                          "1ro"
                                                          "1rn"
                                                          "1rm"
                                                          "1rl"
                                                          "1rk"
                                                          "1rj"
                                                          "1ri"
                                                          "1rh"
                                                          "1rg"
                                                          "1rf"
                                                          "1re"
                                                          "1rd"
                                                          "1rc"
                                                          "1rb"
                                                          "1ra"
                                                          "1r9"
                                                          "1r8"
                                                          "1r7"
                                                          "1r6"
                                                          "1r5"
                                                          "1r4"
                                                          "1r3"
                                                          "1r2"
                                                          "1r1"
                                                          "1r0"
                                                          "1qz"
                                                          "1qy"
                                                          "1qx"
                                                          "1qw"
                                                          "1qv"
                                                          "1qu"
                                                          "1qt"
                                                          "1qs"
                                                          "1qr"
                                                          "1qq"
                                                          "1qp"
                                                          "1qo"
                                                          "1qn"
                                                          "1qm"
                                                          "1ql"
                                                          "1qk"
                                                          "1qj"
                                                          "1qi"
                                                          "1qh"
                                                          "1qg"
                                                          "1qf"
                                                          "1qe"
                                                          "1qd"
                                                          "1qc"
                                                          "1qb"
                                                          "1qa"
                                                          "1q9"
                                                          "1q8"
                                                          "1q7"
                                                          "1q6"
                                                          "1q5"
                                                          "1q4"
                                                          "1q3"
                                                          "1q2"
                                                          "1q1"
                                                          "1q0"
                                                          "1pz"
                                                          "1py"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("1og" "1of" "1oe")))
                                                      (hygiene guile))
                                                   '(())))
                                            #f)
                                          #f))
                                      #{tmp _hoQGWMnyQPAh3k2jhWJab}#)
                                    #f)
                                (@apply
                                  (lambda (#{x _hoQGWMnyQPAh3k2jhWJcF}#
                                           #{dots _hoQGWMnyQPAh3k2jhWJcG}#
                                           #{ys _hoQGWMnyQPAh3k2jhWJcH}#)
                                    (call-with-values
                                      (lambda ()
                                        (#{cvt* _hoQGWMnyQPAh3k2jhWJTn}#
                                          #{ys _hoQGWMnyQPAh3k2jhWJcH}#
                                          #{n _hoQGWMnyQPAh3k2jhWJTt}#
                                          #{ids _hoQGWMnyQPAh3k2jhWJTu}#))
                                      (lambda (#{ys _hoQGWMnyQPAh3k2jhWJcK}#
                                               #{ids _hoQGWMnyQPAh3k2jhWJcL}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt _hoQGWMnyQPAh3k2jhWJTp}#
                                              #{x _hoQGWMnyQPAh3k2jhWJcF}#
                                              (#{1+}# #{n _hoQGWMnyQPAh3k2jhWJTt}#)
                                              #{ids _hoQGWMnyQPAh3k2jhWJcL}#))
                                          (lambda (#{x _hoQGWMnyQPAh3k2jhWJcM}#
                                                   #{ids _hoQGWMnyQPAh3k2jhWJcN}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{v-reverse _hoQGWMnyQPAh3k2jhWJTo}#
                                                  #{ys _hoQGWMnyQPAh3k2jhWJcK}#))
                                              (lambda (#{ys _hoQGWMnyQPAh3k2jhWJcu}#
                                                       #{e _hoQGWMnyQPAh3k2jhWJcv}#)
                                                (values
                                                  (vector
                                                    'each+
                                                    #{x _hoQGWMnyQPAh3k2jhWJcM}#
                                                    #{ys _hoQGWMnyQPAh3k2jhWJcu}#
                                                    #{e _hoQGWMnyQPAh3k2jhWJcv}#)
                                                  #{ids _hoQGWMnyQPAh3k2jhWJcN}#))))))))
                                  #{tmp _hoQGWMnyQPAh3k2jhWJab}#)
                                (let ((#{tmp _hoQGWMnyQPAh3k2jhWJcw}#
                                        ($sc-dispatch
                                          #{p _hoQGWMnyQPAh3k2jhWJTs}#
                                          '(any . any))))
                                  (if #{tmp _hoQGWMnyQPAh3k2jhWJcw}#
                                    (@apply
                                      (lambda (#{x _hoQGWMnyQPAh3k2jhWJc0}#
                                               #{y _hoQGWMnyQPAh3k2jhWJc1}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt _hoQGWMnyQPAh3k2jhWJTp}#
                                              #{y _hoQGWMnyQPAh3k2jhWJc1}#
                                              #{n _hoQGWMnyQPAh3k2jhWJTt}#
                                              #{ids _hoQGWMnyQPAh3k2jhWJTu}#))
                                          (lambda (#{y _hoQGWMnyQPAh3k2jhWJc2}#
                                                   #{ids _hoQGWMnyQPAh3k2jhWJc3}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{cvt _hoQGWMnyQPAh3k2jhWJTp}#
                                                  #{x _hoQGWMnyQPAh3k2jhWJc0}#
                                                  #{n _hoQGWMnyQPAh3k2jhWJTt}#
                                                  #{ids _hoQGWMnyQPAh3k2jhWJc3}#))
                                              (lambda (#{x _hoQGWMnyQPAh3k2jhWJc4}#
                                                       #{ids _hoQGWMnyQPAh3k2jhWJc5}#)
                                                (values
                                                  (cons #{x _hoQGWMnyQPAh3k2jhWJc4}#
                                                        #{y _hoQGWMnyQPAh3k2jhWJc2}#)
                                                  #{ids _hoQGWMnyQPAh3k2jhWJc5}#))))))
                                      #{tmp _hoQGWMnyQPAh3k2jhWJcw}#)
                                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWJc6}#
                                            ($sc-dispatch
                                              #{p _hoQGWMnyQPAh3k2jhWJTs}#
                                              '())))
                                      (if #{tmp _hoQGWMnyQPAh3k2jhWJc6}#
                                        (@apply
                                          (lambda ()
                                            (values
                                              '()
                                              #{ids _hoQGWMnyQPAh3k2jhWJTu}#))
                                          #{tmp _hoQGWMnyQPAh3k2jhWJc6}#)
                                        (let ((#{tmp _hoQGWMnyQPAh3k2jhWJc$}#
                                                ($sc-dispatch
                                                  #{p _hoQGWMnyQPAh3k2jhWJTs}#
                                                  '#(vector each-any))))
                                          (if #{tmp _hoQGWMnyQPAh3k2jhWJc$}#
                                            (@apply
                                              (lambda (#{x _hoQGWMnyQPAh3k2jhWJdC}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{cvt _hoQGWMnyQPAh3k2jhWJTp}#
                                                      #{x _hoQGWMnyQPAh3k2jhWJdC}#
                                                      #{n _hoQGWMnyQPAh3k2jhWJTt}#
                                                      #{ids _hoQGWMnyQPAh3k2jhWJTu}#))
                                                  (lambda (#{p _hoQGWMnyQPAh3k2jhWJdD}#
                                                           #{ids _hoQGWMnyQPAh3k2jhWJdE}#)
                                                    (values
                                                      (vector
                                                        'vector
                                                        #{p _hoQGWMnyQPAh3k2jhWJdD}#)
                                                      #{ids _hoQGWMnyQPAh3k2jhWJdE}#))))
                                              #{tmp _hoQGWMnyQPAh3k2jhWJc$}#)
                                            (values
                                              (vector
                                                'atom
                                                (#{strip _hoQGWMnyQPAh3k2jhWHTy}#
                                                  #{p _hoQGWMnyQPAh3k2jhWJTs}#
                                                  '(())))
                                              #{ids _hoQGWMnyQPAh3k2jhWJTu}#)))))))))))))))
                 (#{cvt _hoQGWMnyQPAh3k2jhWJTp}#
                   #{pattern _hoQGWMnyQPAh3k2jhWJTl}#
                   0
                   '()))))
           (#{build-dispatch-call _hoQGWMnyQPAh3k2jhWI6r}#
             (lambda (#{pvars _hoQGWMnyQPAh3k2jhWJe1}#
                      #{exp _hoQGWMnyQPAh3k2jhWJe2}#
                      #{y _hoQGWMnyQPAh3k2jhWJe3}#
                      #{r _hoQGWMnyQPAh3k2jhWJe4}#
                      #{mod _hoQGWMnyQPAh3k2jhWJe5}#)
               (let ((#{ids _hoQGWMnyQPAh3k2jhWJe6}#
                       (map car #{pvars _hoQGWMnyQPAh3k2jhWJe1}#)))
                 (begin
                   (map cdr #{pvars _hoQGWMnyQPAh3k2jhWJe1}#)
                   (let ((#{labels _hoQGWMnyQPAh3k2jhWJe8}#
                           (#{gen-labels _hoQGWMnyQPAh3k2jhWHTE}#
                             #{ids _hoQGWMnyQPAh3k2jhWJe6}#))
                         (#{new-vars _hoQGWMnyQPAh3k2jhWJe9}#
                           (map #{gen-var _hoQGWMnyQPAh3k2jhWHTz}#
                                #{ids _hoQGWMnyQPAh3k2jhWJe6}#)))
                     (#{build-application _hoQGWMnyQPAh3k2jhWHSg}#
                       #f
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'apply)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'apply
                           #f))
                       (list (#{build-simple-lambda _hoQGWMnyQPAh3k2jhWHSp}#
                               #f
                               (map syntax->datum
                                    #{ids _hoQGWMnyQPAh3k2jhWJe6}#)
                               #f
                               #{new-vars _hoQGWMnyQPAh3k2jhWJe9}#
                               '()
                               (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                 #{exp _hoQGWMnyQPAh3k2jhWJe2}#
                                 (#{extend-env _hoQGWMnyQPAh3k2jhWHS7}#
                                   #{labels _hoQGWMnyQPAh3k2jhWJe8}#
                                   (map (lambda (#{var _hoQGWMnyQPAh3k2jhWJj8}#
                                                 #{level _hoQGWMnyQPAh3k2jhWJj9}#)
                                          (cons 'syntax
                                                (cons #{var _hoQGWMnyQPAh3k2jhWJj8}#
                                                      #{level _hoQGWMnyQPAh3k2jhWJj9}#)))
                                        #{new-vars _hoQGWMnyQPAh3k2jhWJe9}#
                                        (map cdr
                                             #{pvars _hoQGWMnyQPAh3k2jhWJe1}#))
                                   #{r _hoQGWMnyQPAh3k2jhWJe4}#)
                                 (#{make-binding-wrap _hoQGWMnyQPAh3k2jhWHTP}#
                                   #{ids _hoQGWMnyQPAh3k2jhWJe6}#
                                   #{labels _hoQGWMnyQPAh3k2jhWJe8}#
                                   '(()))
                                 #{mod _hoQGWMnyQPAh3k2jhWJe5}#))
                             #{y _hoQGWMnyQPAh3k2jhWJe3}#)))))))
           (#{gen-clause _hoQGWMnyQPAh3k2jhWI6s}#
             (lambda (#{x _hoQGWMnyQPAh3k2jhWJJx}#
                      #{keys _hoQGWMnyQPAh3k2jhWJJy}#
                      #{clauses _hoQGWMnyQPAh3k2jhWJJz}#
                      #{r _hoQGWMnyQPAh3k2jhWJJ0}#
                      #{pat _hoQGWMnyQPAh3k2jhWJJ1}#
                      #{fender _hoQGWMnyQPAh3k2jhWJJ2}#
                      #{exp _hoQGWMnyQPAh3k2jhWJJ3}#
                      #{mod _hoQGWMnyQPAh3k2jhWJJ4}#)
               (call-with-values
                 (lambda ()
                   (#{convert-pattern _hoQGWMnyQPAh3k2jhWI6q}#
                     #{pat _hoQGWMnyQPAh3k2jhWJJ1}#
                     #{keys _hoQGWMnyQPAh3k2jhWJJy}#))
                 (lambda (#{p _hoQGWMnyQPAh3k2jhWJMT}#
                          #{pvars _hoQGWMnyQPAh3k2jhWJMU}#)
                   (if (not (#{distinct-bound-ids? _hoQGWMnyQPAh3k2jhWHTc}#
                              (map car #{pvars _hoQGWMnyQPAh3k2jhWJMU}#)))
                     (syntax-violation
                       'syntax-case
                       "duplicate pattern variable"
                       #{pat _hoQGWMnyQPAh3k2jhWJJ1}#)
                     (if (not (and-map
                                (lambda (#{x _hoQGWMnyQPAh3k2jhWJOI}#)
                                  (not (let ((#{x _hoQGWMnyQPAh3k2jhWJOM}#
                                               (car #{x _hoQGWMnyQPAh3k2jhWJOI}#)))
                                         (if (if (if (vector?
                                                       #{x _hoQGWMnyQPAh3k2jhWJOM}#)
                                                   (if (= (vector-length
                                                            #{x _hoQGWMnyQPAh3k2jhWJOM}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{x _hoQGWMnyQPAh3k2jhWJOM}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (symbol?
                                                 (vector-ref
                                                   #{x _hoQGWMnyQPAh3k2jhWJOM}#
                                                   1))
                                               #f)
                                           (if (eq? (if (if (vector?
                                                              #{x _hoQGWMnyQPAh3k2jhWJOM}#)
                                                          (if (= (vector-length
                                                                   #{x _hoQGWMnyQPAh3k2jhWJOM}#)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   #{x _hoQGWMnyQPAh3k2jhWJOM}#
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (vector-ref
                                                        #{x _hoQGWMnyQPAh3k2jhWJOM}#
                                                        1)
                                                      #{x _hoQGWMnyQPAh3k2jhWJOM}#)
                                                    (if (if (= (vector-length
                                                                 '#(syntax-object
                                                                    ...
                                                                    ((top)
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("2de"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("1tt"
                                                                        "1ts"
                                                                        "1tr"
                                                                        "1tq"
                                                                        "1tp"
                                                                        "1to"
                                                                        "1tn"
                                                                        "1tm"
                                                                        "1tl"
                                                                        "1tk"
                                                                        "1tj"
                                                                        "1ti"
                                                                        "1th"
                                                                        "1tg"
                                                                        "1tf"
                                                                        "1te"
                                                                        "1td"
                                                                        "1tc"
                                                                        "1tb"
                                                                        "1ta"
                                                                        "1t9"
                                                                        "1t8"
                                                                        "1t7"
                                                                        "1t6"
                                                                        "1t5"
                                                                        "1t4"
                                                                        "1t3"
                                                                        "1t2"
                                                                        "1t1"
                                                                        "1t0"
                                                                        "1sz"
                                                                        "1sy"
                                                                        "1sx"
                                                                        "1sw"
                                                                        "1sv"
                                                                        "1su"
                                                                        "1st"
                                                                        "1ss"
                                                                        "1sr"
                                                                        "1sq"
                                                                        "1sp"
                                                                        "1so"
                                                                        "1sn"
                                                                        "1sm"
                                                                        "1sl"
                                                                        "1sk"
                                                                        "1sj"
                                                                        "1si"
                                                                        "1sh"
                                                                        "1sg"
                                                                        "1sf"
                                                                        "1se"
                                                                        "1sd"
                                                                        "1sc"
                                                                        "1sb"
                                                                        "1sa"
                                                                        "1s9"
                                                                        "1s8"
                                                                        "1s7"
                                                                        "1s6"
                                                                        "1s5"
                                                                        "1s4"
                                                                        "1s3"
                                                                        "1s2"
                                                                        "1s1"
                                                                        "1s0"
                                                                        "1rz"
                                                                        "1ry"
                                                                        "1rx"
                                                                        "1rw"
                                                                        "1rv"
                                                                        "1ru"
                                                                        "1rt"
                                                                        "1rs"
                                                                        "1rr"
                                                                        "1rq"
                                                                        "1rp"
                                                                        "1ro"
                                                                        "1rn"
                                                                        "1rm"
                                                                        "1rl"
                                                                        "1rk"
                                                                        "1rj"
                                                                        "1ri"
                                                                        "1rh"
                                                                        "1rg"
                                                                        "1rf"
                                                                        "1re"
                                                                        "1rd"
                                                                        "1rc"
                                                                        "1rb"
                                                                        "1ra"
                                                                        "1r9"
                                                                        "1r8"
                                                                        "1r7"
                                                                        "1r6"
                                                                        "1r5"
                                                                        "1r4"
                                                                        "1r3"
                                                                        "1r2"
                                                                        "1r1"
                                                                        "1r0"
                                                                        "1qz"
                                                                        "1qy"
                                                                        "1qx"
                                                                        "1qw"
                                                                        "1qv"
                                                                        "1qu"
                                                                        "1qt"
                                                                        "1qs"
                                                                        "1qr"
                                                                        "1qq"
                                                                        "1qp"
                                                                        "1qo"
                                                                        "1qn"
                                                                        "1qm"
                                                                        "1ql"
                                                                        "1qk"
                                                                        "1qj"
                                                                        "1qi"
                                                                        "1qh"
                                                                        "1qg"
                                                                        "1qf"
                                                                        "1qe"
                                                                        "1qd"
                                                                        "1qc"
                                                                        "1qb"
                                                                        "1qa"
                                                                        "1q9"
                                                                        "1q8"
                                                                        "1q7"
                                                                        "1q6"
                                                                        "1q5"
                                                                        "1q4"
                                                                        "1q3"
                                                                        "1q2"
                                                                        "1q1"
                                                                        "1q0"
                                                                        "1pz"
                                                                        "1py"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("1og"
                                                                        "1of"
                                                                        "1oe")))
                                                                    (hygiene
                                                                      guile)))
                                                               4)
                                                          #t
                                                          #f)
                                                      '...
                                                      '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("2de"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              with-transformer-environment
                                                              transformer-environment
                                                              resolve-identifier
                                                              locally-bound-identifiers
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("1tt"
                                                             "1ts"
                                                             "1tr"
                                                             "1tq"
                                                             "1tp"
                                                             "1to"
                                                             "1tn"
                                                             "1tm"
                                                             "1tl"
                                                             "1tk"
                                                             "1tj"
                                                             "1ti"
                                                             "1th"
                                                             "1tg"
                                                             "1tf"
                                                             "1te"
                                                             "1td"
                                                             "1tc"
                                                             "1tb"
                                                             "1ta"
                                                             "1t9"
                                                             "1t8"
                                                             "1t7"
                                                             "1t6"
                                                             "1t5"
                                                             "1t4"
                                                             "1t3"
                                                             "1t2"
                                                             "1t1"
                                                             "1t0"
                                                             "1sz"
                                                             "1sy"
                                                             "1sx"
                                                             "1sw"
                                                             "1sv"
                                                             "1su"
                                                             "1st"
                                                             "1ss"
                                                             "1sr"
                                                             "1sq"
                                                             "1sp"
                                                             "1so"
                                                             "1sn"
                                                             "1sm"
                                                             "1sl"
                                                             "1sk"
                                                             "1sj"
                                                             "1si"
                                                             "1sh"
                                                             "1sg"
                                                             "1sf"
                                                             "1se"
                                                             "1sd"
                                                             "1sc"
                                                             "1sb"
                                                             "1sa"
                                                             "1s9"
                                                             "1s8"
                                                             "1s7"
                                                             "1s6"
                                                             "1s5"
                                                             "1s4"
                                                             "1s3"
                                                             "1s2"
                                                             "1s1"
                                                             "1s0"
                                                             "1rz"
                                                             "1ry"
                                                             "1rx"
                                                             "1rw"
                                                             "1rv"
                                                             "1ru"
                                                             "1rt"
                                                             "1rs"
                                                             "1rr"
                                                             "1rq"
                                                             "1rp"
                                                             "1ro"
                                                             "1rn"
                                                             "1rm"
                                                             "1rl"
                                                             "1rk"
                                                             "1rj"
                                                             "1ri"
                                                             "1rh"
                                                             "1rg"
                                                             "1rf"
                                                             "1re"
                                                             "1rd"
                                                             "1rc"
                                                             "1rb"
                                                             "1ra"
                                                             "1r9"
                                                             "1r8"
                                                             "1r7"
                                                             "1r6"
                                                             "1r5"
                                                             "1r4"
                                                             "1r3"
                                                             "1r2"
                                                             "1r1"
                                                             "1r0"
                                                             "1qz"
                                                             "1qy"
                                                             "1qx"
                                                             "1qw"
                                                             "1qv"
                                                             "1qu"
                                                             "1qt"
                                                             "1qs"
                                                             "1qr"
                                                             "1qq"
                                                             "1qp"
                                                             "1qo"
                                                             "1qn"
                                                             "1qm"
                                                             "1ql"
                                                             "1qk"
                                                             "1qj"
                                                             "1qi"
                                                             "1qh"
                                                             "1qg"
                                                             "1qf"
                                                             "1qe"
                                                             "1qd"
                                                             "1qc"
                                                             "1qb"
                                                             "1qa"
                                                             "1q9"
                                                             "1q8"
                                                             "1q7"
                                                             "1q6"
                                                             "1q5"
                                                             "1q4"
                                                             "1q3"
                                                             "1q2"
                                                             "1q1"
                                                             "1q0"
                                                             "1pz"
                                                             "1py"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("1og"
                                                             "1of"
                                                             "1oe")))
                                                         (hygiene guile))))
                                             (eq? (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                                    #{x _hoQGWMnyQPAh3k2jhWJOM}#
                                                    '(()))
                                                  (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("2de"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            locally-bound-identifiers
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("1tt"
                                                           "1ts"
                                                           "1tr"
                                                           "1tq"
                                                           "1tp"
                                                           "1to"
                                                           "1tn"
                                                           "1tm"
                                                           "1tl"
                                                           "1tk"
                                                           "1tj"
                                                           "1ti"
                                                           "1th"
                                                           "1tg"
                                                           "1tf"
                                                           "1te"
                                                           "1td"
                                                           "1tc"
                                                           "1tb"
                                                           "1ta"
                                                           "1t9"
                                                           "1t8"
                                                           "1t7"
                                                           "1t6"
                                                           "1t5"
                                                           "1t4"
                                                           "1t3"
                                                           "1t2"
                                                           "1t1"
                                                           "1t0"
                                                           "1sz"
                                                           "1sy"
                                                           "1sx"
                                                           "1sw"
                                                           "1sv"
                                                           "1su"
                                                           "1st"
                                                           "1ss"
                                                           "1sr"
                                                           "1sq"
                                                           "1sp"
                                                           "1so"
                                                           "1sn"
                                                           "1sm"
                                                           "1sl"
                                                           "1sk"
                                                           "1sj"
                                                           "1si"
                                                           "1sh"
                                                           "1sg"
                                                           "1sf"
                                                           "1se"
                                                           "1sd"
                                                           "1sc"
                                                           "1sb"
                                                           "1sa"
                                                           "1s9"
                                                           "1s8"
                                                           "1s7"
                                                           "1s6"
                                                           "1s5"
                                                           "1s4"
                                                           "1s3"
                                                           "1s2"
                                                           "1s1"
                                                           "1s0"
                                                           "1rz"
                                                           "1ry"
                                                           "1rx"
                                                           "1rw"
                                                           "1rv"
                                                           "1ru"
                                                           "1rt"
                                                           "1rs"
                                                           "1rr"
                                                           "1rq"
                                                           "1rp"
                                                           "1ro"
                                                           "1rn"
                                                           "1rm"
                                                           "1rl"
                                                           "1rk"
                                                           "1rj"
                                                           "1ri"
                                                           "1rh"
                                                           "1rg"
                                                           "1rf"
                                                           "1re"
                                                           "1rd"
                                                           "1rc"
                                                           "1rb"
                                                           "1ra"
                                                           "1r9"
                                                           "1r8"
                                                           "1r7"
                                                           "1r6"
                                                           "1r5"
                                                           "1r4"
                                                           "1r3"
                                                           "1r2"
                                                           "1r1"
                                                           "1r0"
                                                           "1qz"
                                                           "1qy"
                                                           "1qx"
                                                           "1qw"
                                                           "1qv"
                                                           "1qu"
                                                           "1qt"
                                                           "1qs"
                                                           "1qr"
                                                           "1qq"
                                                           "1qp"
                                                           "1qo"
                                                           "1qn"
                                                           "1qm"
                                                           "1ql"
                                                           "1qk"
                                                           "1qj"
                                                           "1qi"
                                                           "1qh"
                                                           "1qg"
                                                           "1qf"
                                                           "1qe"
                                                           "1qd"
                                                           "1qc"
                                                           "1qb"
                                                           "1qa"
                                                           "1q9"
                                                           "1q8"
                                                           "1q7"
                                                           "1q6"
                                                           "1q5"
                                                           "1q4"
                                                           "1q3"
                                                           "1q2"
                                                           "1q1"
                                                           "1q0"
                                                           "1pz"
                                                           "1py"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("1og" "1of" "1oe")))
                                                       (hygiene guile))
                                                    '(())))
                                             #f)
                                           #f))))
                                #{pvars _hoQGWMnyQPAh3k2jhWJMU}#))
                       (syntax-violation
                         'syntax-case
                         "misplaced ellipsis"
                         #{pat _hoQGWMnyQPAh3k2jhWJJ1}#)
                       (let ((#{y _hoQGWMnyQPAh3k2jhWJPY}#
                               (gensym
                                 (string-append (symbol->string 'tmp) " "))))
                         (#{build-application _hoQGWMnyQPAh3k2jhWHSg}#
                           #f
                           (let ((#{req _hoQGWMnyQPAh3k2jhWJRn}# (list 'tmp))
                                 (#{vars _hoQGWMnyQPAh3k2jhWJRp}#
                                   (list #{y _hoQGWMnyQPAh3k2jhWJPY}#))
                                 (#{exp _hoQGWMnyQPAh3k2jhWJRr}#
                                   (let ((#{y _hoQGWMnyQPAh3k2jhWJR8}#
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 3)
                                             #f
                                             'tmp
                                             #{y _hoQGWMnyQPAh3k2jhWJPY}#)))
                                     (let ((#{test-exp _hoQGWMnyQPAh3k2jhWJSA}#
                                             (let ((#{tmp _hoQGWMnyQPAh3k2jhWJSJ}#
                                                     ($sc-dispatch
                                                       #{fender _hoQGWMnyQPAh3k2jhWJJ2}#
                                                       '#(atom #t))))
                                               (if #{tmp _hoQGWMnyQPAh3k2jhWJSJ}#
                                                 (@apply
                                                   (lambda ()
                                                     #{y _hoQGWMnyQPAh3k2jhWJR8}#)
                                                   #{tmp _hoQGWMnyQPAh3k2jhWJSJ}#)
                                                 (let ((#{then-exp _hoQGWMnyQPAh3k2jhWJSb}#
                                                         (#{build-dispatch-call _hoQGWMnyQPAh3k2jhWI6r}#
                                                           #{pvars _hoQGWMnyQPAh3k2jhWJMU}#
                                                           #{fender _hoQGWMnyQPAh3k2jhWJJ2}#
                                                           #{y _hoQGWMnyQPAh3k2jhWJR8}#
                                                           #{r _hoQGWMnyQPAh3k2jhWJJ0}#
                                                           #{mod _hoQGWMnyQPAh3k2jhWJJ4}#))
                                                       (#{else-exp _hoQGWMnyQPAh3k2jhWJSc}#
                                                         (make-struct/no-tail
                                                           (vector-ref
                                                             %expanded-vtables
                                                             1)
                                                           #f
                                                           #f)))
                                                   (make-struct/no-tail
                                                     (vector-ref
                                                       %expanded-vtables
                                                       10)
                                                     #f
                                                     #{y _hoQGWMnyQPAh3k2jhWJR8}#
                                                     #{then-exp _hoQGWMnyQPAh3k2jhWJSb}#
                                                     #{else-exp _hoQGWMnyQPAh3k2jhWJSc}#)))))
                                           (#{then-exp _hoQGWMnyQPAh3k2jhWJSB}#
                                             (#{build-dispatch-call _hoQGWMnyQPAh3k2jhWI6r}#
                                               #{pvars _hoQGWMnyQPAh3k2jhWJMU}#
                                               #{exp _hoQGWMnyQPAh3k2jhWJJ3}#
                                               #{y _hoQGWMnyQPAh3k2jhWJR8}#
                                               #{r _hoQGWMnyQPAh3k2jhWJJ0}#
                                               #{mod _hoQGWMnyQPAh3k2jhWJJ4}#))
                                           (#{else-exp _hoQGWMnyQPAh3k2jhWJSC}#
                                             (#{gen-syntax-case _hoQGWMnyQPAh3k2jhWI6t}#
                                               #{x _hoQGWMnyQPAh3k2jhWJJx}#
                                               #{keys _hoQGWMnyQPAh3k2jhWJJy}#
                                               #{clauses _hoQGWMnyQPAh3k2jhWJJz}#
                                               #{r _hoQGWMnyQPAh3k2jhWJJ0}#
                                               #{mod _hoQGWMnyQPAh3k2jhWJJ4}#)))
                                       (make-struct/no-tail
                                         (vector-ref %expanded-vtables 10)
                                         #f
                                         #{test-exp _hoQGWMnyQPAh3k2jhWJSA}#
                                         #{then-exp _hoQGWMnyQPAh3k2jhWJSB}#
                                         #{else-exp _hoQGWMnyQPAh3k2jhWJSC}#)))))
                             (let ((#{body _hoQGWMnyQPAh3k2jhWJRw}#
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       #{req _hoQGWMnyQPAh3k2jhWJRn}#
                                       #f
                                       #f
                                       #f
                                       '()
                                       #{vars _hoQGWMnyQPAh3k2jhWJRp}#
                                       #{exp _hoQGWMnyQPAh3k2jhWJRr}#
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 #{body _hoQGWMnyQPAh3k2jhWJRw}#)))
                           (list (if (eq? #{p _hoQGWMnyQPAh3k2jhWJMT}# 'any)
                                   (let ((#{fun-exp _hoQGWMnyQPAh3k2jhWJSy}#
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               'list)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               'list
                                               #f)))
                                         (#{arg-exps _hoQGWMnyQPAh3k2jhWJSz}#
                                           (list #{x _hoQGWMnyQPAh3k2jhWJJx}#)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       #{fun-exp _hoQGWMnyQPAh3k2jhWJSy}#
                                       #{arg-exps _hoQGWMnyQPAh3k2jhWJSz}#))
                                   (let ((#{fun-exp _hoQGWMnyQPAh3k2jhWJTK}#
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               '$sc-dispatch)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               '$sc-dispatch
                                               #f)))
                                         (#{arg-exps _hoQGWMnyQPAh3k2jhWJTL}#
                                           (list #{x _hoQGWMnyQPAh3k2jhWJJx}#
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     1)
                                                   #f
                                                   #{p _hoQGWMnyQPAh3k2jhWJMT}#))))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       #{fun-exp _hoQGWMnyQPAh3k2jhWJTK}#
                                       #{arg-exps _hoQGWMnyQPAh3k2jhWJTL}#))))))))))))
           (#{gen-syntax-case _hoQGWMnyQPAh3k2jhWI6t}#
             (lambda (#{x _hoQGWMnyQPAh3k2jhWJA8}#
                      #{keys _hoQGWMnyQPAh3k2jhWJA9}#
                      #{clauses _hoQGWMnyQPAh3k2jhWJA$}#
                      #{r _hoQGWMnyQPAh3k2jhWJA@}#
                      #{mod _hoQGWMnyQPAh3k2jhWJBA}#)
               (if (null? #{clauses _hoQGWMnyQPAh3k2jhWJA$}#)
                 (let ((#{fun-exp _hoQGWMnyQPAh3k2jhWJBF}#
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'syntax-violation)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'syntax-violation
                             #f)))
                       (#{arg-exps _hoQGWMnyQPAh3k2jhWJBG}#
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #f)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 "source expression failed to match any pattern")
                               #{x _hoQGWMnyQPAh3k2jhWJA8}#)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     #{fun-exp _hoQGWMnyQPAh3k2jhWJBF}#
                     #{arg-exps _hoQGWMnyQPAh3k2jhWJBG}#))
                 (let ((#{tmp _hoQGWMnyQPAh3k2jhWJBn}#
                         (car #{clauses _hoQGWMnyQPAh3k2jhWJA$}#)))
                   (let ((#{tmp _hoQGWMnyQPAh3k2jhWJBo}#
                           ($sc-dispatch
                             #{tmp _hoQGWMnyQPAh3k2jhWJBn}#
                             '(any any))))
                     (if #{tmp _hoQGWMnyQPAh3k2jhWJBo}#
                       (@apply
                         (lambda (#{pat _hoQGWMnyQPAh3k2jhWJBq}#
                                  #{exp _hoQGWMnyQPAh3k2jhWJBr}#)
                           (if (if (if (symbol? #{pat _hoQGWMnyQPAh3k2jhWJBq}#)
                                     #t
                                     (if (if (vector?
                                               #{pat _hoQGWMnyQPAh3k2jhWJBq}#)
                                           (if (= (vector-length
                                                    #{pat _hoQGWMnyQPAh3k2jhWJBq}#)
                                                  4)
                                             (eq? (vector-ref
                                                    #{pat _hoQGWMnyQPAh3k2jhWJBq}#
                                                    0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (symbol?
                                         (vector-ref
                                           #{pat _hoQGWMnyQPAh3k2jhWJBq}#
                                           1))
                                       #f))
                                 (and-map
                                   (lambda (#{x _hoQGWMnyQPAh3k2jhWJCG}#)
                                     (not (if (eq? (if (if (vector?
                                                             #{pat _hoQGWMnyQPAh3k2jhWJBq}#)
                                                         (if (= (vector-length
                                                                  #{pat _hoQGWMnyQPAh3k2jhWJBq}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{pat _hoQGWMnyQPAh3k2jhWJBq}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref
                                                       #{pat _hoQGWMnyQPAh3k2jhWJBq}#
                                                       1)
                                                     #{pat _hoQGWMnyQPAh3k2jhWJBq}#)
                                                   (if (if (vector?
                                                             #{x _hoQGWMnyQPAh3k2jhWJCG}#)
                                                         (if (= (vector-length
                                                                  #{x _hoQGWMnyQPAh3k2jhWJCG}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{x _hoQGWMnyQPAh3k2jhWJCG}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref
                                                       #{x _hoQGWMnyQPAh3k2jhWJCG}#
                                                       1)
                                                     #{x _hoQGWMnyQPAh3k2jhWJCG}#))
                                            (eq? (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                                   #{pat _hoQGWMnyQPAh3k2jhWJBq}#
                                                   '(()))
                                                 (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                                   #{x _hoQGWMnyQPAh3k2jhWJCG}#
                                                   '(())))
                                            #f)))
                                   (cons '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("2w6" "2w7"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("2w1"
                                                 "2w2"
                                                 "2w3"
                                                 "2w4"
                                                 "2w5"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("2u0" "2tz" "2ty" "2tx"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("1tt"
                                                "1ts"
                                                "1tr"
                                                "1tq"
                                                "1tp"
                                                "1to"
                                                "1tn"
                                                "1tm"
                                                "1tl"
                                                "1tk"
                                                "1tj"
                                                "1ti"
                                                "1th"
                                                "1tg"
                                                "1tf"
                                                "1te"
                                                "1td"
                                                "1tc"
                                                "1tb"
                                                "1ta"
                                                "1t9"
                                                "1t8"
                                                "1t7"
                                                "1t6"
                                                "1t5"
                                                "1t4"
                                                "1t3"
                                                "1t2"
                                                "1t1"
                                                "1t0"
                                                "1sz"
                                                "1sy"
                                                "1sx"
                                                "1sw"
                                                "1sv"
                                                "1su"
                                                "1st"
                                                "1ss"
                                                "1sr"
                                                "1sq"
                                                "1sp"
                                                "1so"
                                                "1sn"
                                                "1sm"
                                                "1sl"
                                                "1sk"
                                                "1sj"
                                                "1si"
                                                "1sh"
                                                "1sg"
                                                "1sf"
                                                "1se"
                                                "1sd"
                                                "1sc"
                                                "1sb"
                                                "1sa"
                                                "1s9"
                                                "1s8"
                                                "1s7"
                                                "1s6"
                                                "1s5"
                                                "1s4"
                                                "1s3"
                                                "1s2"
                                                "1s1"
                                                "1s0"
                                                "1rz"
                                                "1ry"
                                                "1rx"
                                                "1rw"
                                                "1rv"
                                                "1ru"
                                                "1rt"
                                                "1rs"
                                                "1rr"
                                                "1rq"
                                                "1rp"
                                                "1ro"
                                                "1rn"
                                                "1rm"
                                                "1rl"
                                                "1rk"
                                                "1rj"
                                                "1ri"
                                                "1rh"
                                                "1rg"
                                                "1rf"
                                                "1re"
                                                "1rd"
                                                "1rc"
                                                "1rb"
                                                "1ra"
                                                "1r9"
                                                "1r8"
                                                "1r7"
                                                "1r6"
                                                "1r5"
                                                "1r4"
                                                "1r3"
                                                "1r2"
                                                "1r1"
                                                "1r0"
                                                "1qz"
                                                "1qy"
                                                "1qx"
                                                "1qw"
                                                "1qv"
                                                "1qu"
                                                "1qt"
                                                "1qs"
                                                "1qr"
                                                "1qq"
                                                "1qp"
                                                "1qo"
                                                "1qn"
                                                "1qm"
                                                "1ql"
                                                "1qk"
                                                "1qj"
                                                "1qi"
                                                "1qh"
                                                "1qg"
                                                "1qf"
                                                "1qe"
                                                "1qd"
                                                "1qc"
                                                "1qb"
                                                "1qa"
                                                "1q9"
                                                "1q8"
                                                "1q7"
                                                "1q6"
                                                "1q5"
                                                "1q4"
                                                "1q3"
                                                "1q2"
                                                "1q1"
                                                "1q0"
                                                "1pz"
                                                "1py"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("1og" "1of" "1oe")))
                                            (hygiene guile))
                                         #{keys _hoQGWMnyQPAh3k2jhWJA9}#))
                                 #f)
                             (if (if (eq? (if (if (= (vector-length
                                                       '#(syntax-object
                                                          pad
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("2w6" "2w7"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("2w1"
                                                               "2w2"
                                                               "2w3"
                                                               "2w4"
                                                               "2w5"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("2u0"
                                                              "2tz"
                                                              "2ty"
                                                              "2tx"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               locally-bound-identifiers
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               gensym-hook
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("1tt"
                                                              "1ts"
                                                              "1tr"
                                                              "1tq"
                                                              "1tp"
                                                              "1to"
                                                              "1tn"
                                                              "1tm"
                                                              "1tl"
                                                              "1tk"
                                                              "1tj"
                                                              "1ti"
                                                              "1th"
                                                              "1tg"
                                                              "1tf"
                                                              "1te"
                                                              "1td"
                                                              "1tc"
                                                              "1tb"
                                                              "1ta"
                                                              "1t9"
                                                              "1t8"
                                                              "1t7"
                                                              "1t6"
                                                              "1t5"
                                                              "1t4"
                                                              "1t3"
                                                              "1t2"
                                                              "1t1"
                                                              "1t0"
                                                              "1sz"
                                                              "1sy"
                                                              "1sx"
                                                              "1sw"
                                                              "1sv"
                                                              "1su"
                                                              "1st"
                                                              "1ss"
                                                              "1sr"
                                                              "1sq"
                                                              "1sp"
                                                              "1so"
                                                              "1sn"
                                                              "1sm"
                                                              "1sl"
                                                              "1sk"
                                                              "1sj"
                                                              "1si"
                                                              "1sh"
                                                              "1sg"
                                                              "1sf"
                                                              "1se"
                                                              "1sd"
                                                              "1sc"
                                                              "1sb"
                                                              "1sa"
                                                              "1s9"
                                                              "1s8"
                                                              "1s7"
                                                              "1s6"
                                                              "1s5"
                                                              "1s4"
                                                              "1s3"
                                                              "1s2"
                                                              "1s1"
                                                              "1s0"
                                                              "1rz"
                                                              "1ry"
                                                              "1rx"
                                                              "1rw"
                                                              "1rv"
                                                              "1ru"
                                                              "1rt"
                                                              "1rs"
                                                              "1rr"
                                                              "1rq"
                                                              "1rp"
                                                              "1ro"
                                                              "1rn"
                                                              "1rm"
                                                              "1rl"
                                                              "1rk"
                                                              "1rj"
                                                              "1ri"
                                                              "1rh"
                                                              "1rg"
                                                              "1rf"
                                                              "1re"
                                                              "1rd"
                                                              "1rc"
                                                              "1rb"
                                                              "1ra"
                                                              "1r9"
                                                              "1r8"
                                                              "1r7"
                                                              "1r6"
                                                              "1r5"
                                                              "1r4"
                                                              "1r3"
                                                              "1r2"
                                                              "1r1"
                                                              "1r0"
                                                              "1qz"
                                                              "1qy"
                                                              "1qx"
                                                              "1qw"
                                                              "1qv"
                                                              "1qu"
                                                              "1qt"
                                                              "1qs"
                                                              "1qr"
                                                              "1qq"
                                                              "1qp"
                                                              "1qo"
                                                              "1qn"
                                                              "1qm"
                                                              "1ql"
                                                              "1qk"
                                                              "1qj"
                                                              "1qi"
                                                              "1qh"
                                                              "1qg"
                                                              "1qf"
                                                              "1qe"
                                                              "1qd"
                                                              "1qc"
                                                              "1qb"
                                                              "1qa"
                                                              "1q9"
                                                              "1q8"
                                                              "1q7"
                                                              "1q6"
                                                              "1q5"
                                                              "1q4"
                                                              "1q3"
                                                              "1q2"
                                                              "1q1"
                                                              "1q0"
                                                              "1pz"
                                                              "1py"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("1og"
                                                              "1of"
                                                              "1oe")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            'pad
                                            '#(syntax-object
                                               pad
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("2w6" "2w7"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("2w1"
                                                    "2w2"
                                                    "2w3"
                                                    "2w4"
                                                    "2w5"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("2u0" "2tz" "2ty" "2tx"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("1tt"
                                                   "1ts"
                                                   "1tr"
                                                   "1tq"
                                                   "1tp"
                                                   "1to"
                                                   "1tn"
                                                   "1tm"
                                                   "1tl"
                                                   "1tk"
                                                   "1tj"
                                                   "1ti"
                                                   "1th"
                                                   "1tg"
                                                   "1tf"
                                                   "1te"
                                                   "1td"
                                                   "1tc"
                                                   "1tb"
                                                   "1ta"
                                                   "1t9"
                                                   "1t8"
                                                   "1t7"
                                                   "1t6"
                                                   "1t5"
                                                   "1t4"
                                                   "1t3"
                                                   "1t2"
                                                   "1t1"
                                                   "1t0"
                                                   "1sz"
                                                   "1sy"
                                                   "1sx"
                                                   "1sw"
                                                   "1sv"
                                                   "1su"
                                                   "1st"
                                                   "1ss"
                                                   "1sr"
                                                   "1sq"
                                                   "1sp"
                                                   "1so"
                                                   "1sn"
                                                   "1sm"
                                                   "1sl"
                                                   "1sk"
                                                   "1sj"
                                                   "1si"
                                                   "1sh"
                                                   "1sg"
                                                   "1sf"
                                                   "1se"
                                                   "1sd"
                                                   "1sc"
                                                   "1sb"
                                                   "1sa"
                                                   "1s9"
                                                   "1s8"
                                                   "1s7"
                                                   "1s6"
                                                   "1s5"
                                                   "1s4"
                                                   "1s3"
                                                   "1s2"
                                                   "1s1"
                                                   "1s0"
                                                   "1rz"
                                                   "1ry"
                                                   "1rx"
                                                   "1rw"
                                                   "1rv"
                                                   "1ru"
                                                   "1rt"
                                                   "1rs"
                                                   "1rr"
                                                   "1rq"
                                                   "1rp"
                                                   "1ro"
                                                   "1rn"
                                                   "1rm"
                                                   "1rl"
                                                   "1rk"
                                                   "1rj"
                                                   "1ri"
                                                   "1rh"
                                                   "1rg"
                                                   "1rf"
                                                   "1re"
                                                   "1rd"
                                                   "1rc"
                                                   "1rb"
                                                   "1ra"
                                                   "1r9"
                                                   "1r8"
                                                   "1r7"
                                                   "1r6"
                                                   "1r5"
                                                   "1r4"
                                                   "1r3"
                                                   "1r2"
                                                   "1r1"
                                                   "1r0"
                                                   "1qz"
                                                   "1qy"
                                                   "1qx"
                                                   "1qw"
                                                   "1qv"
                                                   "1qu"
                                                   "1qt"
                                                   "1qs"
                                                   "1qr"
                                                   "1qq"
                                                   "1qp"
                                                   "1qo"
                                                   "1qn"
                                                   "1qm"
                                                   "1ql"
                                                   "1qk"
                                                   "1qj"
                                                   "1qi"
                                                   "1qh"
                                                   "1qg"
                                                   "1qf"
                                                   "1qe"
                                                   "1qd"
                                                   "1qc"
                                                   "1qb"
                                                   "1qa"
                                                   "1q9"
                                                   "1q8"
                                                   "1q7"
                                                   "1q6"
                                                   "1q5"
                                                   "1q4"
                                                   "1q3"
                                                   "1q2"
                                                   "1q1"
                                                   "1q0"
                                                   "1pz"
                                                   "1py"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("1og" "1of" "1oe")))
                                               (hygiene guile)))
                                          (if (if (= (vector-length
                                                       '#(syntax-object
                                                          _
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("2w6" "2w7"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("2w1"
                                                               "2w2"
                                                               "2w3"
                                                               "2w4"
                                                               "2w5"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("2u0"
                                                              "2tz"
                                                              "2ty"
                                                              "2tx"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               locally-bound-identifiers
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               gensym-hook
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("1tt"
                                                              "1ts"
                                                              "1tr"
                                                              "1tq"
                                                              "1tp"
                                                              "1to"
                                                              "1tn"
                                                              "1tm"
                                                              "1tl"
                                                              "1tk"
                                                              "1tj"
                                                              "1ti"
                                                              "1th"
                                                              "1tg"
                                                              "1tf"
                                                              "1te"
                                                              "1td"
                                                              "1tc"
                                                              "1tb"
                                                              "1ta"
                                                              "1t9"
                                                              "1t8"
                                                              "1t7"
                                                              "1t6"
                                                              "1t5"
                                                              "1t4"
                                                              "1t3"
                                                              "1t2"
                                                              "1t1"
                                                              "1t0"
                                                              "1sz"
                                                              "1sy"
                                                              "1sx"
                                                              "1sw"
                                                              "1sv"
                                                              "1su"
                                                              "1st"
                                                              "1ss"
                                                              "1sr"
                                                              "1sq"
                                                              "1sp"
                                                              "1so"
                                                              "1sn"
                                                              "1sm"
                                                              "1sl"
                                                              "1sk"
                                                              "1sj"
                                                              "1si"
                                                              "1sh"
                                                              "1sg"
                                                              "1sf"
                                                              "1se"
                                                              "1sd"
                                                              "1sc"
                                                              "1sb"
                                                              "1sa"
                                                              "1s9"
                                                              "1s8"
                                                              "1s7"
                                                              "1s6"
                                                              "1s5"
                                                              "1s4"
                                                              "1s3"
                                                              "1s2"
                                                              "1s1"
                                                              "1s0"
                                                              "1rz"
                                                              "1ry"
                                                              "1rx"
                                                              "1rw"
                                                              "1rv"
                                                              "1ru"
                                                              "1rt"
                                                              "1rs"
                                                              "1rr"
                                                              "1rq"
                                                              "1rp"
                                                              "1ro"
                                                              "1rn"
                                                              "1rm"
                                                              "1rl"
                                                              "1rk"
                                                              "1rj"
                                                              "1ri"
                                                              "1rh"
                                                              "1rg"
                                                              "1rf"
                                                              "1re"
                                                              "1rd"
                                                              "1rc"
                                                              "1rb"
                                                              "1ra"
                                                              "1r9"
                                                              "1r8"
                                                              "1r7"
                                                              "1r6"
                                                              "1r5"
                                                              "1r4"
                                                              "1r3"
                                                              "1r2"
                                                              "1r1"
                                                              "1r0"
                                                              "1qz"
                                                              "1qy"
                                                              "1qx"
                                                              "1qw"
                                                              "1qv"
                                                              "1qu"
                                                              "1qt"
                                                              "1qs"
                                                              "1qr"
                                                              "1qq"
                                                              "1qp"
                                                              "1qo"
                                                              "1qn"
                                                              "1qm"
                                                              "1ql"
                                                              "1qk"
                                                              "1qj"
                                                              "1qi"
                                                              "1qh"
                                                              "1qg"
                                                              "1qf"
                                                              "1qe"
                                                              "1qd"
                                                              "1qc"
                                                              "1qb"
                                                              "1qa"
                                                              "1q9"
                                                              "1q8"
                                                              "1q7"
                                                              "1q6"
                                                              "1q5"
                                                              "1q4"
                                                              "1q3"
                                                              "1q2"
                                                              "1q1"
                                                              "1q0"
                                                              "1pz"
                                                              "1py"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("1og"
                                                              "1of"
                                                              "1oe")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            '_
                                            '#(syntax-object
                                               _
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("2w6" "2w7"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("2w1"
                                                    "2w2"
                                                    "2w3"
                                                    "2w4"
                                                    "2w5"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("2u0" "2tz" "2ty" "2tx"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("1tt"
                                                   "1ts"
                                                   "1tr"
                                                   "1tq"
                                                   "1tp"
                                                   "1to"
                                                   "1tn"
                                                   "1tm"
                                                   "1tl"
                                                   "1tk"
                                                   "1tj"
                                                   "1ti"
                                                   "1th"
                                                   "1tg"
                                                   "1tf"
                                                   "1te"
                                                   "1td"
                                                   "1tc"
                                                   "1tb"
                                                   "1ta"
                                                   "1t9"
                                                   "1t8"
                                                   "1t7"
                                                   "1t6"
                                                   "1t5"
                                                   "1t4"
                                                   "1t3"
                                                   "1t2"
                                                   "1t1"
                                                   "1t0"
                                                   "1sz"
                                                   "1sy"
                                                   "1sx"
                                                   "1sw"
                                                   "1sv"
                                                   "1su"
                                                   "1st"
                                                   "1ss"
                                                   "1sr"
                                                   "1sq"
                                                   "1sp"
                                                   "1so"
                                                   "1sn"
                                                   "1sm"
                                                   "1sl"
                                                   "1sk"
                                                   "1sj"
                                                   "1si"
                                                   "1sh"
                                                   "1sg"
                                                   "1sf"
                                                   "1se"
                                                   "1sd"
                                                   "1sc"
                                                   "1sb"
                                                   "1sa"
                                                   "1s9"
                                                   "1s8"
                                                   "1s7"
                                                   "1s6"
                                                   "1s5"
                                                   "1s4"
                                                   "1s3"
                                                   "1s2"
                                                   "1s1"
                                                   "1s0"
                                                   "1rz"
                                                   "1ry"
                                                   "1rx"
                                                   "1rw"
                                                   "1rv"
                                                   "1ru"
                                                   "1rt"
                                                   "1rs"
                                                   "1rr"
                                                   "1rq"
                                                   "1rp"
                                                   "1ro"
                                                   "1rn"
                                                   "1rm"
                                                   "1rl"
                                                   "1rk"
                                                   "1rj"
                                                   "1ri"
                                                   "1rh"
                                                   "1rg"
                                                   "1rf"
                                                   "1re"
                                                   "1rd"
                                                   "1rc"
                                                   "1rb"
                                                   "1ra"
                                                   "1r9"
                                                   "1r8"
                                                   "1r7"
                                                   "1r6"
                                                   "1r5"
                                                   "1r4"
                                                   "1r3"
                                                   "1r2"
                                                   "1r1"
                                                   "1r0"
                                                   "1qz"
                                                   "1qy"
                                                   "1qx"
                                                   "1qw"
                                                   "1qv"
                                                   "1qu"
                                                   "1qt"
                                                   "1qs"
                                                   "1qr"
                                                   "1qq"
                                                   "1qp"
                                                   "1qo"
                                                   "1qn"
                                                   "1qm"
                                                   "1ql"
                                                   "1qk"
                                                   "1qj"
                                                   "1qi"
                                                   "1qh"
                                                   "1qg"
                                                   "1qf"
                                                   "1qe"
                                                   "1qd"
                                                   "1qc"
                                                   "1qb"
                                                   "1qa"
                                                   "1q9"
                                                   "1q8"
                                                   "1q7"
                                                   "1q6"
                                                   "1q5"
                                                   "1q4"
                                                   "1q3"
                                                   "1q2"
                                                   "1q1"
                                                   "1q0"
                                                   "1pz"
                                                   "1py"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("1og" "1of" "1oe")))
                                               (hygiene guile))))
                                   (eq? (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("2w6" "2w7"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("2w1"
                                                  "2w2"
                                                  "2w3"
                                                  "2w4"
                                                  "2w5"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("2u0" "2tz" "2ty" "2tx"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  locally-bound-identifiers
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("1tt"
                                                 "1ts"
                                                 "1tr"
                                                 "1tq"
                                                 "1tp"
                                                 "1to"
                                                 "1tn"
                                                 "1tm"
                                                 "1tl"
                                                 "1tk"
                                                 "1tj"
                                                 "1ti"
                                                 "1th"
                                                 "1tg"
                                                 "1tf"
                                                 "1te"
                                                 "1td"
                                                 "1tc"
                                                 "1tb"
                                                 "1ta"
                                                 "1t9"
                                                 "1t8"
                                                 "1t7"
                                                 "1t6"
                                                 "1t5"
                                                 "1t4"
                                                 "1t3"
                                                 "1t2"
                                                 "1t1"
                                                 "1t0"
                                                 "1sz"
                                                 "1sy"
                                                 "1sx"
                                                 "1sw"
                                                 "1sv"
                                                 "1su"
                                                 "1st"
                                                 "1ss"
                                                 "1sr"
                                                 "1sq"
                                                 "1sp"
                                                 "1so"
                                                 "1sn"
                                                 "1sm"
                                                 "1sl"
                                                 "1sk"
                                                 "1sj"
                                                 "1si"
                                                 "1sh"
                                                 "1sg"
                                                 "1sf"
                                                 "1se"
                                                 "1sd"
                                                 "1sc"
                                                 "1sb"
                                                 "1sa"
                                                 "1s9"
                                                 "1s8"
                                                 "1s7"
                                                 "1s6"
                                                 "1s5"
                                                 "1s4"
                                                 "1s3"
                                                 "1s2"
                                                 "1s1"
                                                 "1s0"
                                                 "1rz"
                                                 "1ry"
                                                 "1rx"
                                                 "1rw"
                                                 "1rv"
                                                 "1ru"
                                                 "1rt"
                                                 "1rs"
                                                 "1rr"
                                                 "1rq"
                                                 "1rp"
                                                 "1ro"
                                                 "1rn"
                                                 "1rm"
                                                 "1rl"
                                                 "1rk"
                                                 "1rj"
                                                 "1ri"
                                                 "1rh"
                                                 "1rg"
                                                 "1rf"
                                                 "1re"
                                                 "1rd"
                                                 "1rc"
                                                 "1rb"
                                                 "1ra"
                                                 "1r9"
                                                 "1r8"
                                                 "1r7"
                                                 "1r6"
                                                 "1r5"
                                                 "1r4"
                                                 "1r3"
                                                 "1r2"
                                                 "1r1"
                                                 "1r0"
                                                 "1qz"
                                                 "1qy"
                                                 "1qx"
                                                 "1qw"
                                                 "1qv"
                                                 "1qu"
                                                 "1qt"
                                                 "1qs"
                                                 "1qr"
                                                 "1qq"
                                                 "1qp"
                                                 "1qo"
                                                 "1qn"
                                                 "1qm"
                                                 "1ql"
                                                 "1qk"
                                                 "1qj"
                                                 "1qi"
                                                 "1qh"
                                                 "1qg"
                                                 "1qf"
                                                 "1qe"
                                                 "1qd"
                                                 "1qc"
                                                 "1qb"
                                                 "1qa"
                                                 "1q9"
                                                 "1q8"
                                                 "1q7"
                                                 "1q6"
                                                 "1q5"
                                                 "1q4"
                                                 "1q3"
                                                 "1q2"
                                                 "1q1"
                                                 "1q0"
                                                 "1pz"
                                                 "1py"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("1og" "1of" "1oe")))
                                             (hygiene guile))
                                          '(()))
                                        (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("2w6" "2w7"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("2w1"
                                                  "2w2"
                                                  "2w3"
                                                  "2w4"
                                                  "2w5"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("2u0" "2tz" "2ty" "2tx"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  locally-bound-identifiers
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("1tt"
                                                 "1ts"
                                                 "1tr"
                                                 "1tq"
                                                 "1tp"
                                                 "1to"
                                                 "1tn"
                                                 "1tm"
                                                 "1tl"
                                                 "1tk"
                                                 "1tj"
                                                 "1ti"
                                                 "1th"
                                                 "1tg"
                                                 "1tf"
                                                 "1te"
                                                 "1td"
                                                 "1tc"
                                                 "1tb"
                                                 "1ta"
                                                 "1t9"
                                                 "1t8"
                                                 "1t7"
                                                 "1t6"
                                                 "1t5"
                                                 "1t4"
                                                 "1t3"
                                                 "1t2"
                                                 "1t1"
                                                 "1t0"
                                                 "1sz"
                                                 "1sy"
                                                 "1sx"
                                                 "1sw"
                                                 "1sv"
                                                 "1su"
                                                 "1st"
                                                 "1ss"
                                                 "1sr"
                                                 "1sq"
                                                 "1sp"
                                                 "1so"
                                                 "1sn"
                                                 "1sm"
                                                 "1sl"
                                                 "1sk"
                                                 "1sj"
                                                 "1si"
                                                 "1sh"
                                                 "1sg"
                                                 "1sf"
                                                 "1se"
                                                 "1sd"
                                                 "1sc"
                                                 "1sb"
                                                 "1sa"
                                                 "1s9"
                                                 "1s8"
                                                 "1s7"
                                                 "1s6"
                                                 "1s5"
                                                 "1s4"
                                                 "1s3"
                                                 "1s2"
                                                 "1s1"
                                                 "1s0"
                                                 "1rz"
                                                 "1ry"
                                                 "1rx"
                                                 "1rw"
                                                 "1rv"
                                                 "1ru"
                                                 "1rt"
                                                 "1rs"
                                                 "1rr"
                                                 "1rq"
                                                 "1rp"
                                                 "1ro"
                                                 "1rn"
                                                 "1rm"
                                                 "1rl"
                                                 "1rk"
                                                 "1rj"
                                                 "1ri"
                                                 "1rh"
                                                 "1rg"
                                                 "1rf"
                                                 "1re"
                                                 "1rd"
                                                 "1rc"
                                                 "1rb"
                                                 "1ra"
                                                 "1r9"
                                                 "1r8"
                                                 "1r7"
                                                 "1r6"
                                                 "1r5"
                                                 "1r4"
                                                 "1r3"
                                                 "1r2"
                                                 "1r1"
                                                 "1r0"
                                                 "1qz"
                                                 "1qy"
                                                 "1qx"
                                                 "1qw"
                                                 "1qv"
                                                 "1qu"
                                                 "1qt"
                                                 "1qs"
                                                 "1qr"
                                                 "1qq"
                                                 "1qp"
                                                 "1qo"
                                                 "1qn"
                                                 "1qm"
                                                 "1ql"
                                                 "1qk"
                                                 "1qj"
                                                 "1qi"
                                                 "1qh"
                                                 "1qg"
                                                 "1qf"
                                                 "1qe"
                                                 "1qd"
                                                 "1qc"
                                                 "1qb"
                                                 "1qa"
                                                 "1q9"
                                                 "1q8"
                                                 "1q7"
                                                 "1q6"
                                                 "1q5"
                                                 "1q4"
                                                 "1q3"
                                                 "1q2"
                                                 "1q1"
                                                 "1q0"
                                                 "1pz"
                                                 "1py"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("1og" "1of" "1oe")))
                                             (hygiene guile))
                                          '(())))
                                   #f)
                               (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                 #{exp _hoQGWMnyQPAh3k2jhWJBr}#
                                 #{r _hoQGWMnyQPAh3k2jhWJA@}#
                                 '(())
                                 #{mod _hoQGWMnyQPAh3k2jhWJBA}#)
                               (let ((#{labels _hoQGWMnyQPAh3k2jhWJE2}#
                                       (list (#{gen-label _hoQGWMnyQPAh3k2jhWHTD}#)))
                                     (#{var _hoQGWMnyQPAh3k2jhWJE3}#
                                       (let ((#{id _hoQGWMnyQPAh3k2jhWJFd}#
                                               (if (if (vector?
                                                         #{pat _hoQGWMnyQPAh3k2jhWJBq}#)
                                                     (if (= (vector-length
                                                              #{pat _hoQGWMnyQPAh3k2jhWJBq}#)
                                                            4)
                                                       (eq? (vector-ref
                                                              #{pat _hoQGWMnyQPAh3k2jhWJBq}#
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref
                                                   #{pat _hoQGWMnyQPAh3k2jhWJBq}#
                                                   1)
                                                 #{pat _hoQGWMnyQPAh3k2jhWJBq}#)))
                                         (gensym
                                           (string-append
                                             (symbol->string
                                               #{id _hoQGWMnyQPAh3k2jhWJFd}#)
                                             " ")))))
                                 (#{build-application _hoQGWMnyQPAh3k2jhWHSg}#
                                   #f
                                   (#{build-simple-lambda _hoQGWMnyQPAh3k2jhWHSp}#
                                     #f
                                     (list (syntax->datum
                                             #{pat _hoQGWMnyQPAh3k2jhWJBq}#))
                                     #f
                                     (list #{var _hoQGWMnyQPAh3k2jhWJE3}#)
                                     '()
                                     (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                       #{exp _hoQGWMnyQPAh3k2jhWJBr}#
                                       (#{extend-env _hoQGWMnyQPAh3k2jhWHS7}#
                                         #{labels _hoQGWMnyQPAh3k2jhWJE2}#
                                         (list (cons 'syntax
                                                     (cons #{var _hoQGWMnyQPAh3k2jhWJE3}#
                                                           0)))
                                         #{r _hoQGWMnyQPAh3k2jhWJA@}#)
                                       (#{make-binding-wrap _hoQGWMnyQPAh3k2jhWHTP}#
                                         (list #{pat _hoQGWMnyQPAh3k2jhWJBq}#)
                                         #{labels _hoQGWMnyQPAh3k2jhWJE2}#
                                         '(()))
                                       #{mod _hoQGWMnyQPAh3k2jhWJBA}#))
                                   (list #{x _hoQGWMnyQPAh3k2jhWJA8}#))))
                             (#{gen-clause _hoQGWMnyQPAh3k2jhWI6s}#
                               #{x _hoQGWMnyQPAh3k2jhWJA8}#
                               #{keys _hoQGWMnyQPAh3k2jhWJA9}#
                               (cdr #{clauses _hoQGWMnyQPAh3k2jhWJA$}#)
                               #{r _hoQGWMnyQPAh3k2jhWJA@}#
                               #{pat _hoQGWMnyQPAh3k2jhWJBq}#
                               #t
                               #{exp _hoQGWMnyQPAh3k2jhWJBr}#
                               #{mod _hoQGWMnyQPAh3k2jhWJBA}#)))
                         #{tmp _hoQGWMnyQPAh3k2jhWJBo}#)
                       (let ((#{tmp _hoQGWMnyQPAh3k2jhWJJp}#
                               ($sc-dispatch
                                 #{tmp _hoQGWMnyQPAh3k2jhWJBn}#
                                 '(any any any))))
                         (if #{tmp _hoQGWMnyQPAh3k2jhWJJp}#
                           (@apply
                             (lambda (#{pat _hoQGWMnyQPAh3k2jhWJJr}#
                                      #{fender _hoQGWMnyQPAh3k2jhWJJs}#
                                      #{exp _hoQGWMnyQPAh3k2jhWJJt}#)
                               (#{gen-clause _hoQGWMnyQPAh3k2jhWI6s}#
                                 #{x _hoQGWMnyQPAh3k2jhWJA8}#
                                 #{keys _hoQGWMnyQPAh3k2jhWJA9}#
                                 (cdr #{clauses _hoQGWMnyQPAh3k2jhWJA$}#)
                                 #{r _hoQGWMnyQPAh3k2jhWJA@}#
                                 #{pat _hoQGWMnyQPAh3k2jhWJJr}#
                                 #{fender _hoQGWMnyQPAh3k2jhWJJs}#
                                 #{exp _hoQGWMnyQPAh3k2jhWJJt}#
                                 #{mod _hoQGWMnyQPAh3k2jhWJBA}#))
                             #{tmp _hoQGWMnyQPAh3k2jhWJJp}#)
                           (syntax-violation
                             'syntax-case
                             "invalid clause"
                             (car #{clauses _hoQGWMnyQPAh3k2jhWJA$}#)))))))))))
          (lambda (#{e _hoQGWMnyQPAh3k2jhWI6u}#
                   #{r _hoQGWMnyQPAh3k2jhWI6v}#
                   #{w _hoQGWMnyQPAh3k2jhWI6w}#
                   #{s _hoQGWMnyQPAh3k2jhWI6x}#
                   #{mod _hoQGWMnyQPAh3k2jhWI6y}#)
            (let ((#{e _hoQGWMnyQPAh3k2jhWI6z}#
                    (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                      (begin
                        (if (if (pair? #{e _hoQGWMnyQPAh3k2jhWI6u}#)
                              #{s _hoQGWMnyQPAh3k2jhWI6x}#
                              #f)
                          (set-source-properties!
                            #{e _hoQGWMnyQPAh3k2jhWI6u}#
                            #{s _hoQGWMnyQPAh3k2jhWI6x}#))
                        #{e _hoQGWMnyQPAh3k2jhWI6u}#)
                      #{w _hoQGWMnyQPAh3k2jhWI6w}#
                      #{mod _hoQGWMnyQPAh3k2jhWI6y}#)))
              (let ((#{tmp _hoQGWMnyQPAh3k2jhWI61}#
                      ($sc-dispatch
                        #{e _hoQGWMnyQPAh3k2jhWI6z}#
                        '(_ any each-any . each-any))))
                (if #{tmp _hoQGWMnyQPAh3k2jhWI61}#
                  (@apply
                    (lambda (#{val _hoQGWMnyQPAh3k2jhWI7O}#
                             #{key _hoQGWMnyQPAh3k2jhWI7P}#
                             #{m _hoQGWMnyQPAh3k2jhWI7Q}#)
                      (if (and-map
                            (lambda (#{x _hoQGWMnyQPAh3k2jhWI7R}#)
                              (if (if (symbol? #{x _hoQGWMnyQPAh3k2jhWI7R}#)
                                    #t
                                    (if (if (vector?
                                              #{x _hoQGWMnyQPAh3k2jhWI7R}#)
                                          (if (= (vector-length
                                                   #{x _hoQGWMnyQPAh3k2jhWI7R}#)
                                                 4)
                                            (eq? (vector-ref
                                                   #{x _hoQGWMnyQPAh3k2jhWI7R}#
                                                   0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol?
                                        (vector-ref
                                          #{x _hoQGWMnyQPAh3k2jhWI7R}#
                                          1))
                                      #f))
                                (not (if (if (if (vector?
                                                   #{x _hoQGWMnyQPAh3k2jhWI7R}#)
                                               (if (= (vector-length
                                                        #{x _hoQGWMnyQPAh3k2jhWI7R}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x _hoQGWMnyQPAh3k2jhWI7R}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol?
                                             (vector-ref
                                               #{x _hoQGWMnyQPAh3k2jhWI7R}#
                                               1))
                                           #f)
                                       (if (eq? (if (if (vector?
                                                          #{x _hoQGWMnyQPAh3k2jhWI7R}#)
                                                      (if (= (vector-length
                                                               #{x _hoQGWMnyQPAh3k2jhWI7R}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{x _hoQGWMnyQPAh3k2jhWI7R}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref
                                                    #{x _hoQGWMnyQPAh3k2jhWI7R}#
                                                    1)
                                                  #{x _hoQGWMnyQPAh3k2jhWI7R}#)
                                                (if (if (= (vector-length
                                                             '#(syntax-object
                                                                ...
                                                                ((top)
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("2de"))
                                                                 #(ribcage
                                                                   (lambda-var-list
                                                                     gen-var
                                                                     strip
                                                                     expand-lambda-case
                                                                     lambda*-formals
                                                                     expand-simple-lambda
                                                                     lambda-formals
                                                                     ellipsis?
                                                                     expand-void
                                                                     eval-local-transformer
                                                                     expand-local-syntax
                                                                     expand-body
                                                                     expand-macro
                                                                     expand-application
                                                                     expand-expr
                                                                     expand
                                                                     syntax-type
                                                                     parse-when-list
                                                                     expand-install-global
                                                                     expand-top-sequence
                                                                     expand-sequence
                                                                     source-wrap
                                                                     wrap
                                                                     bound-id-member?
                                                                     distinct-bound-ids?
                                                                     valid-bound-ids?
                                                                     bound-id=?
                                                                     free-id=?
                                                                     with-transformer-environment
                                                                     transformer-environment
                                                                     resolve-identifier
                                                                     locally-bound-identifiers
                                                                     id-var-name
                                                                     same-marks?
                                                                     join-marks
                                                                     join-wraps
                                                                     smart-append
                                                                     make-binding-wrap
                                                                     extend-ribcage!
                                                                     make-empty-ribcage
                                                                     new-mark
                                                                     anti-mark
                                                                     the-anti-mark
                                                                     top-marked?
                                                                     top-wrap
                                                                     empty-wrap
                                                                     set-ribcage-labels!
                                                                     set-ribcage-marks!
                                                                     set-ribcage-symnames!
                                                                     ribcage-labels
                                                                     ribcage-marks
                                                                     ribcage-symnames
                                                                     ribcage?
                                                                     make-ribcage
                                                                     gen-labels
                                                                     gen-label
                                                                     make-rename
                                                                     rename-marks
                                                                     rename-new
                                                                     rename-old
                                                                     subst-rename?
                                                                     wrap-subst
                                                                     wrap-marks
                                                                     make-wrap
                                                                     id-sym-name&marks
                                                                     id-sym-name
                                                                     id?
                                                                     nonsymbol-id?
                                                                     global-extend
                                                                     lookup
                                                                     macros-only-env
                                                                     extend-var-env
                                                                     extend-env
                                                                     null-env
                                                                     binding-value
                                                                     binding-type
                                                                     make-binding
                                                                     arg-check
                                                                     source-annotation
                                                                     no-source
                                                                     set-syntax-object-module!
                                                                     set-syntax-object-wrap!
                                                                     set-syntax-object-expression!
                                                                     syntax-object-module
                                                                     syntax-object-wrap
                                                                     syntax-object-expression
                                                                     syntax-object?
                                                                     make-syntax-object
                                                                     build-lexical-var
                                                                     build-letrec
                                                                     build-named-let
                                                                     build-let
                                                                     build-sequence
                                                                     build-data
                                                                     build-primref
                                                                     build-lambda-case
                                                                     build-case-lambda
                                                                     build-simple-lambda
                                                                     build-global-definition
                                                                     build-global-assignment
                                                                     build-global-reference
                                                                     analyze-variable
                                                                     build-lexical-assignment
                                                                     build-lexical-reference
                                                                     build-dynlet
                                                                     build-conditional
                                                                     build-application
                                                                     build-void
                                                                     maybe-name-value!
                                                                     decorate-source
                                                                     get-global-definition-hook
                                                                     put-global-definition-hook
                                                                     gensym-hook
                                                                     local-eval-hook
                                                                     top-level-eval-hook
                                                                     fx<
                                                                     fx=
                                                                     fx-
                                                                     fx+
                                                                     set-lambda-meta!
                                                                     lambda-meta
                                                                     lambda?
                                                                     make-dynlet
                                                                     make-letrec
                                                                     make-let
                                                                     make-lambda-case
                                                                     make-lambda
                                                                     make-sequence
                                                                     make-application
                                                                     make-conditional
                                                                     make-toplevel-define
                                                                     make-toplevel-set
                                                                     make-toplevel-ref
                                                                     make-module-set
                                                                     make-module-ref
                                                                     make-lexical-set
                                                                     make-lexical-ref
                                                                     make-primitive-ref
                                                                     make-const
                                                                     make-void)
                                                                   ((top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top))
                                                                   ("1tt"
                                                                    "1ts"
                                                                    "1tr"
                                                                    "1tq"
                                                                    "1tp"
                                                                    "1to"
                                                                    "1tn"
                                                                    "1tm"
                                                                    "1tl"
                                                                    "1tk"
                                                                    "1tj"
                                                                    "1ti"
                                                                    "1th"
                                                                    "1tg"
                                                                    "1tf"
                                                                    "1te"
                                                                    "1td"
                                                                    "1tc"
                                                                    "1tb"
                                                                    "1ta"
                                                                    "1t9"
                                                                    "1t8"
                                                                    "1t7"
                                                                    "1t6"
                                                                    "1t5"
                                                                    "1t4"
                                                                    "1t3"
                                                                    "1t2"
                                                                    "1t1"
                                                                    "1t0"
                                                                    "1sz"
                                                                    "1sy"
                                                                    "1sx"
                                                                    "1sw"
                                                                    "1sv"
                                                                    "1su"
                                                                    "1st"
                                                                    "1ss"
                                                                    "1sr"
                                                                    "1sq"
                                                                    "1sp"
                                                                    "1so"
                                                                    "1sn"
                                                                    "1sm"
                                                                    "1sl"
                                                                    "1sk"
                                                                    "1sj"
                                                                    "1si"
                                                                    "1sh"
                                                                    "1sg"
                                                                    "1sf"
                                                                    "1se"
                                                                    "1sd"
                                                                    "1sc"
                                                                    "1sb"
                                                                    "1sa"
                                                                    "1s9"
                                                                    "1s8"
                                                                    "1s7"
                                                                    "1s6"
                                                                    "1s5"
                                                                    "1s4"
                                                                    "1s3"
                                                                    "1s2"
                                                                    "1s1"
                                                                    "1s0"
                                                                    "1rz"
                                                                    "1ry"
                                                                    "1rx"
                                                                    "1rw"
                                                                    "1rv"
                                                                    "1ru"
                                                                    "1rt"
                                                                    "1rs"
                                                                    "1rr"
                                                                    "1rq"
                                                                    "1rp"
                                                                    "1ro"
                                                                    "1rn"
                                                                    "1rm"
                                                                    "1rl"
                                                                    "1rk"
                                                                    "1rj"
                                                                    "1ri"
                                                                    "1rh"
                                                                    "1rg"
                                                                    "1rf"
                                                                    "1re"
                                                                    "1rd"
                                                                    "1rc"
                                                                    "1rb"
                                                                    "1ra"
                                                                    "1r9"
                                                                    "1r8"
                                                                    "1r7"
                                                                    "1r6"
                                                                    "1r5"
                                                                    "1r4"
                                                                    "1r3"
                                                                    "1r2"
                                                                    "1r1"
                                                                    "1r0"
                                                                    "1qz"
                                                                    "1qy"
                                                                    "1qx"
                                                                    "1qw"
                                                                    "1qv"
                                                                    "1qu"
                                                                    "1qt"
                                                                    "1qs"
                                                                    "1qr"
                                                                    "1qq"
                                                                    "1qp"
                                                                    "1qo"
                                                                    "1qn"
                                                                    "1qm"
                                                                    "1ql"
                                                                    "1qk"
                                                                    "1qj"
                                                                    "1qi"
                                                                    "1qh"
                                                                    "1qg"
                                                                    "1qf"
                                                                    "1qe"
                                                                    "1qd"
                                                                    "1qc"
                                                                    "1qb"
                                                                    "1qa"
                                                                    "1q9"
                                                                    "1q8"
                                                                    "1q7"
                                                                    "1q6"
                                                                    "1q5"
                                                                    "1q4"
                                                                    "1q3"
                                                                    "1q2"
                                                                    "1q1"
                                                                    "1q0"
                                                                    "1pz"
                                                                    "1py"))
                                                                 #(ribcage
                                                                   (define-structure
                                                                     define-expansion-accessors
                                                                     define-expansion-constructors)
                                                                   ((top)
                                                                    (top)
                                                                    (top))
                                                                   ("1og"
                                                                    "1of"
                                                                    "1oe")))
                                                                (hygiene
                                                                  guile)))
                                                           4)
                                                      #t
                                                      #f)
                                                  '...
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("2de"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          with-transformer-environment
                                                          transformer-environment
                                                          resolve-identifier
                                                          locally-bound-identifiers
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("1tt"
                                                         "1ts"
                                                         "1tr"
                                                         "1tq"
                                                         "1tp"
                                                         "1to"
                                                         "1tn"
                                                         "1tm"
                                                         "1tl"
                                                         "1tk"
                                                         "1tj"
                                                         "1ti"
                                                         "1th"
                                                         "1tg"
                                                         "1tf"
                                                         "1te"
                                                         "1td"
                                                         "1tc"
                                                         "1tb"
                                                         "1ta"
                                                         "1t9"
                                                         "1t8"
                                                         "1t7"
                                                         "1t6"
                                                         "1t5"
                                                         "1t4"
                                                         "1t3"
                                                         "1t2"
                                                         "1t1"
                                                         "1t0"
                                                         "1sz"
                                                         "1sy"
                                                         "1sx"
                                                         "1sw"
                                                         "1sv"
                                                         "1su"
                                                         "1st"
                                                         "1ss"
                                                         "1sr"
                                                         "1sq"
                                                         "1sp"
                                                         "1so"
                                                         "1sn"
                                                         "1sm"
                                                         "1sl"
                                                         "1sk"
                                                         "1sj"
                                                         "1si"
                                                         "1sh"
                                                         "1sg"
                                                         "1sf"
                                                         "1se"
                                                         "1sd"
                                                         "1sc"
                                                         "1sb"
                                                         "1sa"
                                                         "1s9"
                                                         "1s8"
                                                         "1s7"
                                                         "1s6"
                                                         "1s5"
                                                         "1s4"
                                                         "1s3"
                                                         "1s2"
                                                         "1s1"
                                                         "1s0"
                                                         "1rz"
                                                         "1ry"
                                                         "1rx"
                                                         "1rw"
                                                         "1rv"
                                                         "1ru"
                                                         "1rt"
                                                         "1rs"
                                                         "1rr"
                                                         "1rq"
                                                         "1rp"
                                                         "1ro"
                                                         "1rn"
                                                         "1rm"
                                                         "1rl"
                                                         "1rk"
                                                         "1rj"
                                                         "1ri"
                                                         "1rh"
                                                         "1rg"
                                                         "1rf"
                                                         "1re"
                                                         "1rd"
                                                         "1rc"
                                                         "1rb"
                                                         "1ra"
                                                         "1r9"
                                                         "1r8"
                                                         "1r7"
                                                         "1r6"
                                                         "1r5"
                                                         "1r4"
                                                         "1r3"
                                                         "1r2"
                                                         "1r1"
                                                         "1r0"
                                                         "1qz"
                                                         "1qy"
                                                         "1qx"
                                                         "1qw"
                                                         "1qv"
                                                         "1qu"
                                                         "1qt"
                                                         "1qs"
                                                         "1qr"
                                                         "1qq"
                                                         "1qp"
                                                         "1qo"
                                                         "1qn"
                                                         "1qm"
                                                         "1ql"
                                                         "1qk"
                                                         "1qj"
                                                         "1qi"
                                                         "1qh"
                                                         "1qg"
                                                         "1qf"
                                                         "1qe"
                                                         "1qd"
                                                         "1qc"
                                                         "1qb"
                                                         "1qa"
                                                         "1q9"
                                                         "1q8"
                                                         "1q7"
                                                         "1q6"
                                                         "1q5"
                                                         "1q4"
                                                         "1q3"
                                                         "1q2"
                                                         "1q1"
                                                         "1q0"
                                                         "1pz"
                                                         "1py"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("1og" "1of" "1oe")))
                                                     (hygiene guile))))
                                         (eq? (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                                #{x _hoQGWMnyQPAh3k2jhWI7R}#
                                                '(()))
                                              (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("2de"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        expand-lambda-case
                                                        lambda*-formals
                                                        expand-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        expand-void
                                                        eval-local-transformer
                                                        expand-local-syntax
                                                        expand-body
                                                        expand-macro
                                                        expand-application
                                                        expand-expr
                                                        expand
                                                        syntax-type
                                                        parse-when-list
                                                        expand-install-global
                                                        expand-top-sequence
                                                        expand-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        with-transformer-environment
                                                        transformer-environment
                                                        resolve-identifier
                                                        locally-bound-identifiers
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("1tt"
                                                       "1ts"
                                                       "1tr"
                                                       "1tq"
                                                       "1tp"
                                                       "1to"
                                                       "1tn"
                                                       "1tm"
                                                       "1tl"
                                                       "1tk"
                                                       "1tj"
                                                       "1ti"
                                                       "1th"
                                                       "1tg"
                                                       "1tf"
                                                       "1te"
                                                       "1td"
                                                       "1tc"
                                                       "1tb"
                                                       "1ta"
                                                       "1t9"
                                                       "1t8"
                                                       "1t7"
                                                       "1t6"
                                                       "1t5"
                                                       "1t4"
                                                       "1t3"
                                                       "1t2"
                                                       "1t1"
                                                       "1t0"
                                                       "1sz"
                                                       "1sy"
                                                       "1sx"
                                                       "1sw"
                                                       "1sv"
                                                       "1su"
                                                       "1st"
                                                       "1ss"
                                                       "1sr"
                                                       "1sq"
                                                       "1sp"
                                                       "1so"
                                                       "1sn"
                                                       "1sm"
                                                       "1sl"
                                                       "1sk"
                                                       "1sj"
                                                       "1si"
                                                       "1sh"
                                                       "1sg"
                                                       "1sf"
                                                       "1se"
                                                       "1sd"
                                                       "1sc"
                                                       "1sb"
                                                       "1sa"
                                                       "1s9"
                                                       "1s8"
                                                       "1s7"
                                                       "1s6"
                                                       "1s5"
                                                       "1s4"
                                                       "1s3"
                                                       "1s2"
                                                       "1s1"
                                                       "1s0"
                                                       "1rz"
                                                       "1ry"
                                                       "1rx"
                                                       "1rw"
                                                       "1rv"
                                                       "1ru"
                                                       "1rt"
                                                       "1rs"
                                                       "1rr"
                                                       "1rq"
                                                       "1rp"
                                                       "1ro"
                                                       "1rn"
                                                       "1rm"
                                                       "1rl"
                                                       "1rk"
                                                       "1rj"
                                                       "1ri"
                                                       "1rh"
                                                       "1rg"
                                                       "1rf"
                                                       "1re"
                                                       "1rd"
                                                       "1rc"
                                                       "1rb"
                                                       "1ra"
                                                       "1r9"
                                                       "1r8"
                                                       "1r7"
                                                       "1r6"
                                                       "1r5"
                                                       "1r4"
                                                       "1r3"
                                                       "1r2"
                                                       "1r1"
                                                       "1r0"
                                                       "1qz"
                                                       "1qy"
                                                       "1qx"
                                                       "1qw"
                                                       "1qv"
                                                       "1qu"
                                                       "1qt"
                                                       "1qs"
                                                       "1qr"
                                                       "1qq"
                                                       "1qp"
                                                       "1qo"
                                                       "1qn"
                                                       "1qm"
                                                       "1ql"
                                                       "1qk"
                                                       "1qj"
                                                       "1qi"
                                                       "1qh"
                                                       "1qg"
                                                       "1qf"
                                                       "1qe"
                                                       "1qd"
                                                       "1qc"
                                                       "1qb"
                                                       "1qa"
                                                       "1q9"
                                                       "1q8"
                                                       "1q7"
                                                       "1q6"
                                                       "1q5"
                                                       "1q4"
                                                       "1q3"
                                                       "1q2"
                                                       "1q1"
                                                       "1q0"
                                                       "1pz"
                                                       "1py"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("1og" "1of" "1oe")))
                                                   (hygiene guile))
                                                '(())))
                                         #f)
                                       #f))
                                #f))
                            #{key _hoQGWMnyQPAh3k2jhWI7P}#)
                        (let ((#{x _hoQGWMnyQPAh3k2jhWI9P}#
                                (gensym
                                  (string-append (symbol->string 'tmp) " "))))
                          (#{build-application _hoQGWMnyQPAh3k2jhWHSg}#
                            #{s _hoQGWMnyQPAh3k2jhWI6x}#
                            (let ((#{req _hoQGWMnyQPAh3k2jhWI@R}# (list 'tmp))
                                  (#{vars _hoQGWMnyQPAh3k2jhWI@T}#
                                    (list #{x _hoQGWMnyQPAh3k2jhWI9P}#))
                                  (#{exp _hoQGWMnyQPAh3k2jhWI@V}#
                                    (#{gen-syntax-case _hoQGWMnyQPAh3k2jhWI6t}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        #{x _hoQGWMnyQPAh3k2jhWI9P}#)
                                      #{key _hoQGWMnyQPAh3k2jhWI7P}#
                                      #{m _hoQGWMnyQPAh3k2jhWI7Q}#
                                      #{r _hoQGWMnyQPAh3k2jhWI6v}#
                                      #{mod _hoQGWMnyQPAh3k2jhWI6y}#)))
                              (let ((#{body _hoQGWMnyQPAh3k2jhWI@a}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 14)
                                        #f
                                        #{req _hoQGWMnyQPAh3k2jhWI@R}#
                                        #f
                                        #f
                                        #f
                                        '()
                                        #{vars _hoQGWMnyQPAh3k2jhWI@T}#
                                        #{exp _hoQGWMnyQPAh3k2jhWI@V}#
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 13)
                                  #f
                                  '()
                                  #{body _hoQGWMnyQPAh3k2jhWI@a}#)))
                            (list (#{expand _hoQGWMnyQPAh3k2jhWHTl}#
                                    #{val _hoQGWMnyQPAh3k2jhWI7O}#
                                    #{r _hoQGWMnyQPAh3k2jhWI6v}#
                                    '(())
                                    #{mod _hoQGWMnyQPAh3k2jhWI6y}#))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          #{e _hoQGWMnyQPAh3k2jhWI6z}#)))
                    #{tmp _hoQGWMnyQPAh3k2jhWI61}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{e _hoQGWMnyQPAh3k2jhWI6z}#)))))))
      (set! macroexpand
        (lambda*
          (#{x _hoQGWMnyQPAh3k2jhWJlC}#
            #:optional
            (#{m _hoQGWMnyQPAh3k2jhWJlD}# 'e)
            (#{esew _hoQGWMnyQPAh3k2jhWJlE}# '(eval)))
          (#{expand-top-sequence _hoQGWMnyQPAh3k2jhWHTh}#
            (list #{x _hoQGWMnyQPAh3k2jhWJlC}#)
            '()
            '((top))
            #f
            #{m _hoQGWMnyQPAh3k2jhWJlD}#
            #{esew _hoQGWMnyQPAh3k2jhWJlE}#
            (cons 'hygiene (module-name (current-module))))))
      (set! identifier?
        (lambda (#{x _hoQGWMnyQPAh3k2jhWJlH}#)
          (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWJlH}#)
                (if (= (vector-length #{x _hoQGWMnyQPAh3k2jhWJlH}#)
                       4)
                  (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWJlH}# 0)
                       'syntax-object)
                  #f)
                #f)
            (symbol?
              (vector-ref #{x _hoQGWMnyQPAh3k2jhWJlH}# 1))
            #f)))
      (set! datum->syntax
        (lambda (#{id _hoQGWMnyQPAh3k2jhWJlg}#
                 #{datum _hoQGWMnyQPAh3k2jhWJlh}#)
          (let ((#{wrap _hoQGWMnyQPAh3k2jhWJlm}#
                  (vector-ref #{id _hoQGWMnyQPAh3k2jhWJlg}# 2))
                (#{module _hoQGWMnyQPAh3k2jhWJln}#
                  (vector-ref #{id _hoQGWMnyQPAh3k2jhWJlg}# 3)))
            (vector
              'syntax-object
              #{datum _hoQGWMnyQPAh3k2jhWJlh}#
              #{wrap _hoQGWMnyQPAh3k2jhWJlm}#
              #{module _hoQGWMnyQPAh3k2jhWJln}#))))
      (set! syntax->datum
        (lambda (#{x _hoQGWMnyQPAh3k2jhWJlu}#)
          (#{strip _hoQGWMnyQPAh3k2jhWHTy}#
            #{x _hoQGWMnyQPAh3k2jhWJlu}#
            '(()))))
      (set! syntax-source
        (lambda (#{x _hoQGWMnyQPAh3k2jhWJlx}#)
          (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
            #{x _hoQGWMnyQPAh3k2jhWJlx}#)))
      (set! syntax-module
        (lambda (#{id _hoQGWMnyQPAh3k2jhWJoK}#)
          (begin
            (if (not (if (if (vector? #{id _hoQGWMnyQPAh3k2jhWJoK}#)
                           (if (= (vector-length #{id _hoQGWMnyQPAh3k2jhWJoK}#)
                                  4)
                             (eq? (vector-ref #{id _hoQGWMnyQPAh3k2jhWJoK}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{id _hoQGWMnyQPAh3k2jhWJoK}# 1))
                       #f))
              (syntax-violation
                'syntax-module
                "invalid argument"
                #{id _hoQGWMnyQPAh3k2jhWJoK}#))
            (cdr (vector-ref #{id _hoQGWMnyQPAh3k2jhWJoK}# 3)))))
      (set! syntax-local-binding
        (lambda (#{id _hoQGWMnyQPAh3k2jhWJoz}#)
          (begin
            (if (not (if (if (vector? #{id _hoQGWMnyQPAh3k2jhWJoz}#)
                           (if (= (vector-length #{id _hoQGWMnyQPAh3k2jhWJoz}#)
                                  4)
                             (eq? (vector-ref #{id _hoQGWMnyQPAh3k2jhWJoz}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{id _hoQGWMnyQPAh3k2jhWJoz}# 1))
                       #f))
              (syntax-violation
                'syntax-local-binding
                "invalid argument"
                #{id _hoQGWMnyQPAh3k2jhWJoz}#))
            ((fluid-ref
               #{transformer-environment _hoQGWMnyQPAh3k2jhWHTX}#)
             (lambda (#{e _hoQGWMnyQPAh3k2jhWJpc}#
                      #{r _hoQGWMnyQPAh3k2jhWJpd}#
                      #{w _hoQGWMnyQPAh3k2jhWJpe}#
                      #{s _hoQGWMnyQPAh3k2jhWJpf}#
                      #{rib _hoQGWMnyQPAh3k2jhWJpg}#
                      #{mod _hoQGWMnyQPAh3k2jhWJph}#)
               (call-with-values
                 (lambda ()
                   (let ((#{id _hoQGWMnyQPAh3k2jhWJpk}#
                           (vector-ref #{id _hoQGWMnyQPAh3k2jhWJoz}# 1))
                         (#{w _hoQGWMnyQPAh3k2jhWJpl}#
                           (let ((#{w _hoQGWMnyQPAh3k2jhWJpw}#
                                   (vector-ref
                                     #{id _hoQGWMnyQPAh3k2jhWJoz}#
                                     2)))
                             (let ((#{ms _hoQGWMnyQPAh3k2jhWJpx}#
                                     (car #{w _hoQGWMnyQPAh3k2jhWJpw}#))
                                   (#{s _hoQGWMnyQPAh3k2jhWJpy}#
                                     (cdr #{w _hoQGWMnyQPAh3k2jhWJpw}#)))
                               (if (if (pair? #{ms _hoQGWMnyQPAh3k2jhWJpx}#)
                                     (eq? (car #{ms _hoQGWMnyQPAh3k2jhWJpx}#)
                                          #f)
                                     #f)
                                 (cons (cdr #{ms _hoQGWMnyQPAh3k2jhWJpx}#)
                                       (if #{rib _hoQGWMnyQPAh3k2jhWJpg}#
                                         (cons #{rib _hoQGWMnyQPAh3k2jhWJpg}#
                                               (cdr #{s _hoQGWMnyQPAh3k2jhWJpy}#))
                                         (cdr #{s _hoQGWMnyQPAh3k2jhWJpy}#)))
                                 (cons #{ms _hoQGWMnyQPAh3k2jhWJpx}#
                                       (if #{rib _hoQGWMnyQPAh3k2jhWJpg}#
                                         (cons #{rib _hoQGWMnyQPAh3k2jhWJpg}#
                                               #{s _hoQGWMnyQPAh3k2jhWJpy}#)
                                         #{s _hoQGWMnyQPAh3k2jhWJpy}#))))))
                         (#{mod _hoQGWMnyQPAh3k2jhWJpn}#
                           (vector-ref #{id _hoQGWMnyQPAh3k2jhWJoz}# 3)))
                     (let ((#{n _hoQGWMnyQPAh3k2jhWJpq}#
                             (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                               #{id _hoQGWMnyQPAh3k2jhWJpk}#
                               #{w _hoQGWMnyQPAh3k2jhWJpl}#)))
                       (if (symbol? #{n _hoQGWMnyQPAh3k2jhWJpq}#)
                         (let ((#{mod _hoQGWMnyQPAh3k2jhWJp4}#
                                 (if (if (vector?
                                           #{id _hoQGWMnyQPAh3k2jhWJpk}#)
                                       (if (= (vector-length
                                                #{id _hoQGWMnyQPAh3k2jhWJpk}#)
                                              4)
                                         (eq? (vector-ref
                                                #{id _hoQGWMnyQPAh3k2jhWJpk}#
                                                0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (vector-ref #{id _hoQGWMnyQPAh3k2jhWJpk}# 3)
                                   #{mod _hoQGWMnyQPAh3k2jhWJpn}#)))
                           (let ((#{b _hoQGWMnyQPAh3k2jhWJp5}#
                                   (let ((#{t _hoQGWMnyQPAh3k2jhWJp6}#
                                           (#{get-global-definition-hook _hoQGWMnyQPAh3k2jhWHSc}#
                                             #{n _hoQGWMnyQPAh3k2jhWJpq}#
                                             #{mod _hoQGWMnyQPAh3k2jhWJp4}#)))
                                     (if #{t _hoQGWMnyQPAh3k2jhWJp6}#
                                       #{t _hoQGWMnyQPAh3k2jhWJp6}#
                                       '(global)))))
                             (if (eq? (car #{b _hoQGWMnyQPAh3k2jhWJp5}#)
                                      'global)
                               (values
                                 'global
                                 #{n _hoQGWMnyQPAh3k2jhWJpq}#
                                 #{mod _hoQGWMnyQPAh3k2jhWJp4}#)
                               (values
                                 (car #{b _hoQGWMnyQPAh3k2jhWJp5}#)
                                 (cdr #{b _hoQGWMnyQPAh3k2jhWJp5}#)
                                 #{mod _hoQGWMnyQPAh3k2jhWJp4}#))))
                         (if (string? #{n _hoQGWMnyQPAh3k2jhWJpq}#)
                           (let ((#{mod _hoQGWMnyQPAh3k2jhWJqU}#
                                   (if (if (vector?
                                             #{id _hoQGWMnyQPAh3k2jhWJpk}#)
                                         (if (= (vector-length
                                                  #{id _hoQGWMnyQPAh3k2jhWJpk}#)
                                                4)
                                           (eq? (vector-ref
                                                  #{id _hoQGWMnyQPAh3k2jhWJpk}#
                                                  0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (vector-ref
                                       #{id _hoQGWMnyQPAh3k2jhWJpk}#
                                       3)
                                     #{mod _hoQGWMnyQPAh3k2jhWJpn}#)))
                             (let ((#{b _hoQGWMnyQPAh3k2jhWJqV}#
                                     (let ((#{t _hoQGWMnyQPAh3k2jhWJqW}#
                                             (assq-ref
                                               #{r _hoQGWMnyQPAh3k2jhWJpd}#
                                               #{n _hoQGWMnyQPAh3k2jhWJpq}#)))
                                       (if #{t _hoQGWMnyQPAh3k2jhWJqW}#
                                         #{t _hoQGWMnyQPAh3k2jhWJqW}#
                                         '(displaced-lexical)))))
                               (values
                                 (car #{b _hoQGWMnyQPAh3k2jhWJqV}#)
                                 (cdr #{b _hoQGWMnyQPAh3k2jhWJqV}#)
                                 #{mod _hoQGWMnyQPAh3k2jhWJqU}#)))
                           (error "unexpected id-var-name"
                                  #{id _hoQGWMnyQPAh3k2jhWJpk}#
                                  #{w _hoQGWMnyQPAh3k2jhWJpl}#
                                  #{n _hoQGWMnyQPAh3k2jhWJpq}#))))))
                 (lambda (#{type _hoQGWMnyQPAh3k2jhWJqj}#
                          #{value _hoQGWMnyQPAh3k2jhWJqk}#
                          #{mod _hoQGWMnyQPAh3k2jhWJql}#)
                   (if (eqv? #{type _hoQGWMnyQPAh3k2jhWJqj}# 'lexical)
                     (values
                       'lexical
                       #{value _hoQGWMnyQPAh3k2jhWJqk}#)
                     (if (eqv? #{type _hoQGWMnyQPAh3k2jhWJqj}# 'macro)
                       (values 'macro #{value _hoQGWMnyQPAh3k2jhWJqk}#)
                       (if (eqv? #{type _hoQGWMnyQPAh3k2jhWJqj}# 'syntax)
                         (values
                           'pattern-variable
                           #{value _hoQGWMnyQPAh3k2jhWJqk}#)
                         (if (eqv? #{type _hoQGWMnyQPAh3k2jhWJqj}#
                                   'displaced-lexical)
                           (values 'displaced-lexical #f)
                           (if (eqv? #{type _hoQGWMnyQPAh3k2jhWJqj}# 'global)
                             (values
                               'global
                               (cons #{value _hoQGWMnyQPAh3k2jhWJqk}#
                                     (cdr #{mod _hoQGWMnyQPAh3k2jhWJql}#)))
                             (values 'other #f)))))))))))))
      (set! syntax-locally-bound-identifiers
        (lambda (#{x _hoQGWMnyQPAh3k2jhWJqw}#)
          (begin
            (if (not (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWJqw}#)
                           (if (= (vector-length #{x _hoQGWMnyQPAh3k2jhWJqw}#)
                                  4)
                             (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWJqw}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{x _hoQGWMnyQPAh3k2jhWJqw}# 1))
                       #f))
              (syntax-violation
                'syntax-locally-bound-identifiers
                "invalid argument"
                #{x _hoQGWMnyQPAh3k2jhWJqw}#))
            (#{locally-bound-identifiers _hoQGWMnyQPAh3k2jhWHTV}#
              (vector-ref #{x _hoQGWMnyQPAh3k2jhWJqw}# 2)
              (vector-ref #{x _hoQGWMnyQPAh3k2jhWJqw}# 3)))))
      (set! generate-temporaries
        (lambda (#{ls _hoQGWMnyQPAh3k2jhWJsb}#)
          (begin
            (if (not (list? #{ls _hoQGWMnyQPAh3k2jhWJsb}#))
              (syntax-violation
                'generate-temporaries
                "invalid argument"
                #{ls _hoQGWMnyQPAh3k2jhWJsb}#))
            (let ((#{mod _hoQGWMnyQPAh3k2jhWJsj}#
                    (cons 'hygiene (module-name (current-module)))))
              (map (lambda (#{x _hoQGWMnyQPAh3k2jhWJsk}#)
                     (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                       (gensym)
                       '((top))
                       #{mod _hoQGWMnyQPAh3k2jhWJsj}#))
                   #{ls _hoQGWMnyQPAh3k2jhWJsb}#)))))
      (set! free-identifier=?
        (lambda (#{x _hoQGWMnyQPAh3k2jhWJso}#
                 #{y _hoQGWMnyQPAh3k2jhWJsp}#)
          (begin
            (if (not (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWJso}#)
                           (if (= (vector-length #{x _hoQGWMnyQPAh3k2jhWJso}#)
                                  4)
                             (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWJso}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{x _hoQGWMnyQPAh3k2jhWJso}# 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                #{x _hoQGWMnyQPAh3k2jhWJso}#))
            (if (not (if (if (vector? #{y _hoQGWMnyQPAh3k2jhWJsp}#)
                           (if (= (vector-length #{y _hoQGWMnyQPAh3k2jhWJsp}#)
                                  4)
                             (eq? (vector-ref #{y _hoQGWMnyQPAh3k2jhWJsp}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{y _hoQGWMnyQPAh3k2jhWJsp}# 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                #{y _hoQGWMnyQPAh3k2jhWJsp}#))
            (if (eq? (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWJso}#)
                           (if (= (vector-length #{x _hoQGWMnyQPAh3k2jhWJso}#)
                                  4)
                             (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWJso}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{x _hoQGWMnyQPAh3k2jhWJso}# 1)
                       #{x _hoQGWMnyQPAh3k2jhWJso}#)
                     (if (if (vector? #{y _hoQGWMnyQPAh3k2jhWJsp}#)
                           (if (= (vector-length #{y _hoQGWMnyQPAh3k2jhWJsp}#)
                                  4)
                             (eq? (vector-ref #{y _hoQGWMnyQPAh3k2jhWJsp}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{y _hoQGWMnyQPAh3k2jhWJsp}# 1)
                       #{y _hoQGWMnyQPAh3k2jhWJsp}#))
              (eq? (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                     #{x _hoQGWMnyQPAh3k2jhWJso}#
                     '(()))
                   (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                     #{y _hoQGWMnyQPAh3k2jhWJsp}#
                     '(())))
              #f))))
      (set! bound-identifier=?
        (lambda (#{x _hoQGWMnyQPAh3k2jhWJu@}#
                 #{y _hoQGWMnyQPAh3k2jhWJvA}#)
          (begin
            (if (not (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWJu@}#)
                           (if (= (vector-length #{x _hoQGWMnyQPAh3k2jhWJu@}#)
                                  4)
                             (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWJu@}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{x _hoQGWMnyQPAh3k2jhWJu@}# 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                #{x _hoQGWMnyQPAh3k2jhWJu@}#))
            (if (not (if (if (vector? #{y _hoQGWMnyQPAh3k2jhWJvA}#)
                           (if (= (vector-length #{y _hoQGWMnyQPAh3k2jhWJvA}#)
                                  4)
                             (eq? (vector-ref #{y _hoQGWMnyQPAh3k2jhWJvA}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{y _hoQGWMnyQPAh3k2jhWJvA}# 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                #{y _hoQGWMnyQPAh3k2jhWJvA}#))
            (if (if (if (vector? #{x _hoQGWMnyQPAh3k2jhWJu@}#)
                      (if (= (vector-length #{x _hoQGWMnyQPAh3k2jhWJu@}#)
                             4)
                        (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWJu@}# 0)
                             'syntax-object)
                        #f)
                      #f)
                  (if (vector? #{y _hoQGWMnyQPAh3k2jhWJvA}#)
                    (if (= (vector-length #{y _hoQGWMnyQPAh3k2jhWJvA}#)
                           4)
                      (eq? (vector-ref #{y _hoQGWMnyQPAh3k2jhWJvA}# 0)
                           'syntax-object)
                      #f)
                    #f)
                  #f)
              (if (eq? (vector-ref #{x _hoQGWMnyQPAh3k2jhWJu@}# 1)
                       (vector-ref #{y _hoQGWMnyQPAh3k2jhWJvA}# 1))
                (#{same-marks? _hoQGWMnyQPAh3k2jhWHTT}#
                  (car (vector-ref #{x _hoQGWMnyQPAh3k2jhWJu@}# 2))
                  (car (vector-ref #{y _hoQGWMnyQPAh3k2jhWJvA}# 2)))
                #f)
              (eq? #{x _hoQGWMnyQPAh3k2jhWJu@}#
                   #{y _hoQGWMnyQPAh3k2jhWJvA}#)))))
      (set! syntax-violation
        (lambda*
          (#{who _hoQGWMnyQPAh3k2jhWJxF}#
            #{message _hoQGWMnyQPAh3k2jhWJxG}#
            #{form _hoQGWMnyQPAh3k2jhWJxH}#
            #:optional
            (#{subform _hoQGWMnyQPAh3k2jhWJxI}# #f))
          (begin
            (if (not (if (not #{who _hoQGWMnyQPAh3k2jhWJxF}#)
                       (not #{who _hoQGWMnyQPAh3k2jhWJxF}#)
                       (let ((#{t _hoQGWMnyQPAh3k2jhWJxa}#
                               (string? #{who _hoQGWMnyQPAh3k2jhWJxF}#)))
                         (if #{t _hoQGWMnyQPAh3k2jhWJxa}#
                           #{t _hoQGWMnyQPAh3k2jhWJxa}#
                           (symbol? #{who _hoQGWMnyQPAh3k2jhWJxF}#)))))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                #{who _hoQGWMnyQPAh3k2jhWJxF}#))
            (if (not (string? #{message _hoQGWMnyQPAh3k2jhWJxG}#))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                #{message _hoQGWMnyQPAh3k2jhWJxG}#))
            (throw 'syntax-error
                   #{who _hoQGWMnyQPAh3k2jhWJxF}#
                   #{message _hoQGWMnyQPAh3k2jhWJxG}#
                   (#{source-annotation _hoQGWMnyQPAh3k2jhWHS6}#
                     (if #{form _hoQGWMnyQPAh3k2jhWJxH}#
                       #{form _hoQGWMnyQPAh3k2jhWJxH}#
                       #{subform _hoQGWMnyQPAh3k2jhWJxI}#))
                   (#{strip _hoQGWMnyQPAh3k2jhWHTy}#
                     #{form _hoQGWMnyQPAh3k2jhWJxH}#
                     '(()))
                   (if #{subform _hoQGWMnyQPAh3k2jhWJxI}#
                     (#{strip _hoQGWMnyQPAh3k2jhWHTy}#
                       #{subform _hoQGWMnyQPAh3k2jhWJxI}#
                       '(()))
                     #f)))))
      (letrec*
        ((#{match-each _hoQGWMnyQPAh3k2jhWJ0l}#
           (lambda (#{e _hoQGWMnyQPAh3k2jhWJ9w}#
                    #{p _hoQGWMnyQPAh3k2jhWJ9x}#
                    #{w _hoQGWMnyQPAh3k2jhWJ9y}#
                    #{mod _hoQGWMnyQPAh3k2jhWJ9z}#)
             (if (pair? #{e _hoQGWMnyQPAh3k2jhWJ9w}#)
               (let ((#{first _hoQGWMnyQPAh3k2jhWJ90}#
                       (#{match _hoQGWMnyQPAh3k2jhWJ0r}#
                         (car #{e _hoQGWMnyQPAh3k2jhWJ9w}#)
                         #{p _hoQGWMnyQPAh3k2jhWJ9x}#
                         #{w _hoQGWMnyQPAh3k2jhWJ9y}#
                         '()
                         #{mod _hoQGWMnyQPAh3k2jhWJ9z}#)))
                 (if #{first _hoQGWMnyQPAh3k2jhWJ90}#
                   (let ((#{rest _hoQGWMnyQPAh3k2jhWJ93}#
                           (#{match-each _hoQGWMnyQPAh3k2jhWJ0l}#
                             (cdr #{e _hoQGWMnyQPAh3k2jhWJ9w}#)
                             #{p _hoQGWMnyQPAh3k2jhWJ9x}#
                             #{w _hoQGWMnyQPAh3k2jhWJ9y}#
                             #{mod _hoQGWMnyQPAh3k2jhWJ9z}#)))
                     (if #{rest _hoQGWMnyQPAh3k2jhWJ93}#
                       (cons #{first _hoQGWMnyQPAh3k2jhWJ90}#
                             #{rest _hoQGWMnyQPAh3k2jhWJ93}#)
                       #f))
                   #f))
               (if (null? #{e _hoQGWMnyQPAh3k2jhWJ9w}#)
                 '()
                 (if (if (vector? #{e _hoQGWMnyQPAh3k2jhWJ9w}#)
                       (if (= (vector-length #{e _hoQGWMnyQPAh3k2jhWJ9w}#)
                              4)
                         (eq? (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ9w}# 0)
                              'syntax-object)
                         #f)
                       #f)
                   (#{match-each _hoQGWMnyQPAh3k2jhWJ0l}#
                     (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ9w}# 1)
                     #{p _hoQGWMnyQPAh3k2jhWJ9x}#
                     (#{join-wraps _hoQGWMnyQPAh3k2jhWHTR}#
                       #{w _hoQGWMnyQPAh3k2jhWJ9y}#
                       (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ9w}# 2))
                     (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ9w}# 3))
                   #f)))))
         (#{match-each-any _hoQGWMnyQPAh3k2jhWJ0n}#
           (lambda (#{e _hoQGWMnyQPAh3k2jhWJ$T}#
                    #{w _hoQGWMnyQPAh3k2jhWJ$U}#
                    #{mod _hoQGWMnyQPAh3k2jhWJ$V}#)
             (if (pair? #{e _hoQGWMnyQPAh3k2jhWJ$T}#)
               (let ((#{l _hoQGWMnyQPAh3k2jhWJ$W}#
                       (#{match-each-any _hoQGWMnyQPAh3k2jhWJ0n}#
                         (cdr #{e _hoQGWMnyQPAh3k2jhWJ$T}#)
                         #{w _hoQGWMnyQPAh3k2jhWJ$U}#
                         #{mod _hoQGWMnyQPAh3k2jhWJ$V}#)))
                 (if #{l _hoQGWMnyQPAh3k2jhWJ$W}#
                   (cons (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                           (car #{e _hoQGWMnyQPAh3k2jhWJ$T}#)
                           #{w _hoQGWMnyQPAh3k2jhWJ$U}#
                           #{mod _hoQGWMnyQPAh3k2jhWJ$V}#)
                         #{l _hoQGWMnyQPAh3k2jhWJ$W}#)
                   #f))
               (if (null? #{e _hoQGWMnyQPAh3k2jhWJ$T}#)
                 '()
                 (if (if (vector? #{e _hoQGWMnyQPAh3k2jhWJ$T}#)
                       (if (= (vector-length #{e _hoQGWMnyQPAh3k2jhWJ$T}#)
                              4)
                         (eq? (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ$T}# 0)
                              'syntax-object)
                         #f)
                       #f)
                   (#{match-each-any _hoQGWMnyQPAh3k2jhWJ0n}#
                     (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ$T}# 1)
                     (#{join-wraps _hoQGWMnyQPAh3k2jhWHTR}#
                       #{w _hoQGWMnyQPAh3k2jhWJ$U}#
                       (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ$T}# 2))
                     #{mod _hoQGWMnyQPAh3k2jhWJ$V}#)
                   #f)))))
         (#{match-empty _hoQGWMnyQPAh3k2jhWJ0o}#
           (lambda (#{p _hoQGWMnyQPAh3k2jhWJ$u}#
                    #{r _hoQGWMnyQPAh3k2jhWJ$v}#)
             (if (null? #{p _hoQGWMnyQPAh3k2jhWJ$u}#)
               #{r _hoQGWMnyQPAh3k2jhWJ$v}#
               (if (eq? #{p _hoQGWMnyQPAh3k2jhWJ$u}# '_)
                 #{r _hoQGWMnyQPAh3k2jhWJ$v}#
                 (if (eq? #{p _hoQGWMnyQPAh3k2jhWJ$u}# 'any)
                   (cons '() #{r _hoQGWMnyQPAh3k2jhWJ$v}#)
                   (if (pair? #{p _hoQGWMnyQPAh3k2jhWJ$u}#)
                     (#{match-empty _hoQGWMnyQPAh3k2jhWJ0o}#
                       (car #{p _hoQGWMnyQPAh3k2jhWJ$u}#)
                       (#{match-empty _hoQGWMnyQPAh3k2jhWJ0o}#
                         (cdr #{p _hoQGWMnyQPAh3k2jhWJ$u}#)
                         #{r _hoQGWMnyQPAh3k2jhWJ$v}#))
                     (if (eq? #{p _hoQGWMnyQPAh3k2jhWJ$u}# 'each-any)
                       (cons '() #{r _hoQGWMnyQPAh3k2jhWJ$v}#)
                       (let ((#{atom-key _hoQGWMnyQPAh3k2jhWJ$w}#
                               (vector-ref #{p _hoQGWMnyQPAh3k2jhWJ$u}# 0)))
                         (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWJ$w}# 'each)
                           (#{match-empty _hoQGWMnyQPAh3k2jhWJ0o}#
                             (vector-ref #{p _hoQGWMnyQPAh3k2jhWJ$u}# 1)
                             #{r _hoQGWMnyQPAh3k2jhWJ$v}#)
                           (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWJ$w}#
                                     'each+)
                             (#{match-empty _hoQGWMnyQPAh3k2jhWJ0o}#
                               (vector-ref #{p _hoQGWMnyQPAh3k2jhWJ$u}# 1)
                               (#{match-empty _hoQGWMnyQPAh3k2jhWJ0o}#
                                 (reverse
                                   (vector-ref #{p _hoQGWMnyQPAh3k2jhWJ$u}# 2))
                                 (#{match-empty _hoQGWMnyQPAh3k2jhWJ0o}#
                                   (vector-ref #{p _hoQGWMnyQPAh3k2jhWJ$u}# 3)
                                   #{r _hoQGWMnyQPAh3k2jhWJ$v}#)))
                             (if (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWJ$w}#
                                           'free-id)
                                   #t
                                   (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWJ$w}#
                                         'atom))
                               #{r _hoQGWMnyQPAh3k2jhWJ$v}#
                               (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWJ$w}#
                                         'vector)
                                 (#{match-empty _hoQGWMnyQPAh3k2jhWJ0o}#
                                   (vector-ref #{p _hoQGWMnyQPAh3k2jhWJ$u}# 1)
                                   #{r _hoQGWMnyQPAh3k2jhWJ$v}#)))))))))))))
         (#{combine _hoQGWMnyQPAh3k2jhWJ0p}#
           (lambda (#{r* _hoQGWMnyQPAh3k2jhWJ@D}#
                    #{r _hoQGWMnyQPAh3k2jhWJ@E}#)
             (if (null? (car #{r* _hoQGWMnyQPAh3k2jhWJ@D}#))
               #{r _hoQGWMnyQPAh3k2jhWJ@E}#
               (cons (map car #{r* _hoQGWMnyQPAh3k2jhWJ@D}#)
                     (#{combine _hoQGWMnyQPAh3k2jhWJ0p}#
                       (map cdr #{r* _hoQGWMnyQPAh3k2jhWJ@D}#)
                       #{r _hoQGWMnyQPAh3k2jhWJ@E}#)))))
         (#{match* _hoQGWMnyQPAh3k2jhWJ0q}#
           (lambda (#{e _hoQGWMnyQPAh3k2jhWJ1I}#
                    #{p _hoQGWMnyQPAh3k2jhWJ1J}#
                    #{w _hoQGWMnyQPAh3k2jhWJ1K}#
                    #{r _hoQGWMnyQPAh3k2jhWJ1L}#
                    #{mod _hoQGWMnyQPAh3k2jhWJ1M}#)
             (if (null? #{p _hoQGWMnyQPAh3k2jhWJ1J}#)
               (if (null? #{e _hoQGWMnyQPAh3k2jhWJ1I}#)
                 #{r _hoQGWMnyQPAh3k2jhWJ1L}#
                 #f)
               (if (pair? #{p _hoQGWMnyQPAh3k2jhWJ1J}#)
                 (if (pair? #{e _hoQGWMnyQPAh3k2jhWJ1I}#)
                   (#{match _hoQGWMnyQPAh3k2jhWJ0r}#
                     (car #{e _hoQGWMnyQPAh3k2jhWJ1I}#)
                     (car #{p _hoQGWMnyQPAh3k2jhWJ1J}#)
                     #{w _hoQGWMnyQPAh3k2jhWJ1K}#
                     (#{match _hoQGWMnyQPAh3k2jhWJ0r}#
                       (cdr #{e _hoQGWMnyQPAh3k2jhWJ1I}#)
                       (cdr #{p _hoQGWMnyQPAh3k2jhWJ1J}#)
                       #{w _hoQGWMnyQPAh3k2jhWJ1K}#
                       #{r _hoQGWMnyQPAh3k2jhWJ1L}#
                       #{mod _hoQGWMnyQPAh3k2jhWJ1M}#)
                     #{mod _hoQGWMnyQPAh3k2jhWJ1M}#)
                   #f)
                 (if (eq? #{p _hoQGWMnyQPAh3k2jhWJ1J}# 'each-any)
                   (let ((#{l _hoQGWMnyQPAh3k2jhWJ1R}#
                           (#{match-each-any _hoQGWMnyQPAh3k2jhWJ0n}#
                             #{e _hoQGWMnyQPAh3k2jhWJ1I}#
                             #{w _hoQGWMnyQPAh3k2jhWJ1K}#
                             #{mod _hoQGWMnyQPAh3k2jhWJ1M}#)))
                     (if #{l _hoQGWMnyQPAh3k2jhWJ1R}#
                       (cons #{l _hoQGWMnyQPAh3k2jhWJ1R}#
                             #{r _hoQGWMnyQPAh3k2jhWJ1L}#)
                       #f))
                   (let ((#{atom-key _hoQGWMnyQPAh3k2jhWJ1W}#
                           (vector-ref #{p _hoQGWMnyQPAh3k2jhWJ1J}# 0)))
                     (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWJ1W}# 'each)
                       (if (null? #{e _hoQGWMnyQPAh3k2jhWJ1I}#)
                         (#{match-empty _hoQGWMnyQPAh3k2jhWJ0o}#
                           (vector-ref #{p _hoQGWMnyQPAh3k2jhWJ1J}# 1)
                           #{r _hoQGWMnyQPAh3k2jhWJ1L}#)
                         (let ((#{l _hoQGWMnyQPAh3k2jhWJ1d}#
                                 (#{match-each _hoQGWMnyQPAh3k2jhWJ0l}#
                                   #{e _hoQGWMnyQPAh3k2jhWJ1I}#
                                   (vector-ref #{p _hoQGWMnyQPAh3k2jhWJ1J}# 1)
                                   #{w _hoQGWMnyQPAh3k2jhWJ1K}#
                                   #{mod _hoQGWMnyQPAh3k2jhWJ1M}#)))
                           (if #{l _hoQGWMnyQPAh3k2jhWJ1d}#
                             (letrec*
                               ((#{collect _hoQGWMnyQPAh3k2jhWJ1g}#
                                  (lambda (#{l _hoQGWMnyQPAh3k2jhWJ2T}#)
                                    (if (null? (car #{l _hoQGWMnyQPAh3k2jhWJ2T}#))
                                      #{r _hoQGWMnyQPAh3k2jhWJ1L}#
                                      (cons (map car
                                                 #{l _hoQGWMnyQPAh3k2jhWJ2T}#)
                                            (#{collect _hoQGWMnyQPAh3k2jhWJ1g}#
                                              (map cdr
                                                   #{l _hoQGWMnyQPAh3k2jhWJ2T}#)))))))
                               (#{collect _hoQGWMnyQPAh3k2jhWJ1g}#
                                 #{l _hoQGWMnyQPAh3k2jhWJ1d}#))
                             #f)))
                       (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWJ1W}# 'each+)
                         (call-with-values
                           (lambda ()
                             (let ((#{x-pat _hoQGWMnyQPAh3k2jhWJ2c}#
                                     (vector-ref
                                       #{p _hoQGWMnyQPAh3k2jhWJ1J}#
                                       1))
                                   (#{y-pat _hoQGWMnyQPAh3k2jhWJ2d}#
                                     (vector-ref
                                       #{p _hoQGWMnyQPAh3k2jhWJ1J}#
                                       2))
                                   (#{z-pat _hoQGWMnyQPAh3k2jhWJ2e}#
                                     (vector-ref
                                       #{p _hoQGWMnyQPAh3k2jhWJ1J}#
                                       3)))
                               (letrec*
                                 ((#{f _hoQGWMnyQPAh3k2jhWJ2i}#
                                    (lambda (#{e _hoQGWMnyQPAh3k2jhWJ2k}#
                                             #{w _hoQGWMnyQPAh3k2jhWJ2l}#)
                                      (if (pair? #{e _hoQGWMnyQPAh3k2jhWJ2k}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{f _hoQGWMnyQPAh3k2jhWJ2i}#
                                              (cdr #{e _hoQGWMnyQPAh3k2jhWJ2k}#)
                                              #{w _hoQGWMnyQPAh3k2jhWJ2l}#))
                                          (lambda (#{xr* _hoQGWMnyQPAh3k2jhWJ2m}#
                                                   #{y-pat _hoQGWMnyQPAh3k2jhWJ2n}#
                                                   #{r _hoQGWMnyQPAh3k2jhWJ2o}#)
                                            (if #{r _hoQGWMnyQPAh3k2jhWJ2o}#
                                              (if (null? #{y-pat _hoQGWMnyQPAh3k2jhWJ2n}#)
                                                (let ((#{xr _hoQGWMnyQPAh3k2jhWJ2p}#
                                                        (#{match _hoQGWMnyQPAh3k2jhWJ0r}#
                                                          (car #{e _hoQGWMnyQPAh3k2jhWJ2k}#)
                                                          #{x-pat _hoQGWMnyQPAh3k2jhWJ2c}#
                                                          #{w _hoQGWMnyQPAh3k2jhWJ2l}#
                                                          '()
                                                          #{mod _hoQGWMnyQPAh3k2jhWJ1M}#)))
                                                  (if #{xr _hoQGWMnyQPAh3k2jhWJ2p}#
                                                    (values
                                                      (cons #{xr _hoQGWMnyQPAh3k2jhWJ2p}#
                                                            #{xr* _hoQGWMnyQPAh3k2jhWJ2m}#)
                                                      #{y-pat _hoQGWMnyQPAh3k2jhWJ2n}#
                                                      #{r _hoQGWMnyQPAh3k2jhWJ2o}#)
                                                    (values #f #f #f)))
                                                (values
                                                  '()
                                                  (cdr #{y-pat _hoQGWMnyQPAh3k2jhWJ2n}#)
                                                  (#{match _hoQGWMnyQPAh3k2jhWJ0r}#
                                                    (car #{e _hoQGWMnyQPAh3k2jhWJ2k}#)
                                                    (car #{y-pat _hoQGWMnyQPAh3k2jhWJ2n}#)
                                                    #{w _hoQGWMnyQPAh3k2jhWJ2l}#
                                                    #{r _hoQGWMnyQPAh3k2jhWJ2o}#
                                                    #{mod _hoQGWMnyQPAh3k2jhWJ1M}#)))
                                              (values #f #f #f))))
                                        (if (if (vector?
                                                  #{e _hoQGWMnyQPAh3k2jhWJ2k}#)
                                              (if (= (vector-length
                                                       #{e _hoQGWMnyQPAh3k2jhWJ2k}#)
                                                     4)
                                                (eq? (vector-ref
                                                       #{e _hoQGWMnyQPAh3k2jhWJ2k}#
                                                       0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (#{f _hoQGWMnyQPAh3k2jhWJ2i}#
                                            (vector-ref
                                              #{e _hoQGWMnyQPAh3k2jhWJ2k}#
                                              1)
                                            (#{join-wraps _hoQGWMnyQPAh3k2jhWHTR}#
                                              #{w _hoQGWMnyQPAh3k2jhWJ2l}#
                                              #{e _hoQGWMnyQPAh3k2jhWJ2k}#))
                                          (values
                                            '()
                                            #{y-pat _hoQGWMnyQPAh3k2jhWJ2d}#
                                            (#{match _hoQGWMnyQPAh3k2jhWJ0r}#
                                              #{e _hoQGWMnyQPAh3k2jhWJ2k}#
                                              #{z-pat _hoQGWMnyQPAh3k2jhWJ2e}#
                                              #{w _hoQGWMnyQPAh3k2jhWJ2l}#
                                              #{r _hoQGWMnyQPAh3k2jhWJ1L}#
                                              #{mod _hoQGWMnyQPAh3k2jhWJ1M}#)))))))
                                 (#{f _hoQGWMnyQPAh3k2jhWJ2i}#
                                   #{e _hoQGWMnyQPAh3k2jhWJ1I}#
                                   #{w _hoQGWMnyQPAh3k2jhWJ1K}#))))
                           (lambda (#{xr* _hoQGWMnyQPAh3k2jhWJ3D}#
                                    #{y-pat _hoQGWMnyQPAh3k2jhWJ3E}#
                                    #{r _hoQGWMnyQPAh3k2jhWJ3F}#)
                             (if #{r _hoQGWMnyQPAh3k2jhWJ3F}#
                               (if (null? #{y-pat _hoQGWMnyQPAh3k2jhWJ3E}#)
                                 (if (null? #{xr* _hoQGWMnyQPAh3k2jhWJ3D}#)
                                   (#{match-empty _hoQGWMnyQPAh3k2jhWJ0o}#
                                     (vector-ref
                                       #{p _hoQGWMnyQPAh3k2jhWJ1J}#
                                       1)
                                     #{r _hoQGWMnyQPAh3k2jhWJ3F}#)
                                   (#{combine _hoQGWMnyQPAh3k2jhWJ0p}#
                                     #{xr* _hoQGWMnyQPAh3k2jhWJ3D}#
                                     #{r _hoQGWMnyQPAh3k2jhWJ3F}#))
                                 #f)
                               #f)))
                         (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWJ1W}#
                                   'free-id)
                           (if (if (symbol? #{e _hoQGWMnyQPAh3k2jhWJ1I}#)
                                 #t
                                 (if (if (vector? #{e _hoQGWMnyQPAh3k2jhWJ1I}#)
                                       (if (= (vector-length
                                                #{e _hoQGWMnyQPAh3k2jhWJ1I}#)
                                              4)
                                         (eq? (vector-ref
                                                #{e _hoQGWMnyQPAh3k2jhWJ1I}#
                                                0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (symbol?
                                     (vector-ref
                                       #{e _hoQGWMnyQPAh3k2jhWJ1I}#
                                       1))
                                   #f))
                             (if (let ((#{i _hoQGWMnyQPAh3k2jhWJ8Q}#
                                         (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                                           #{e _hoQGWMnyQPAh3k2jhWJ1I}#
                                           #{w _hoQGWMnyQPAh3k2jhWJ1K}#
                                           #{mod _hoQGWMnyQPAh3k2jhWJ1M}#))
                                       (#{j _hoQGWMnyQPAh3k2jhWJ8R}#
                                         (vector-ref
                                           #{p _hoQGWMnyQPAh3k2jhWJ1J}#
                                           1)))
                                   (if (eq? (if (if (vector?
                                                      #{i _hoQGWMnyQPAh3k2jhWJ8Q}#)
                                                  (if (= (vector-length
                                                           #{i _hoQGWMnyQPAh3k2jhWJ8Q}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{i _hoQGWMnyQPAh3k2jhWJ8Q}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref
                                                #{i _hoQGWMnyQPAh3k2jhWJ8Q}#
                                                1)
                                              #{i _hoQGWMnyQPAh3k2jhWJ8Q}#)
                                            (if (if (vector?
                                                      #{j _hoQGWMnyQPAh3k2jhWJ8R}#)
                                                  (if (= (vector-length
                                                           #{j _hoQGWMnyQPAh3k2jhWJ8R}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{j _hoQGWMnyQPAh3k2jhWJ8R}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref
                                                #{j _hoQGWMnyQPAh3k2jhWJ8R}#
                                                1)
                                              #{j _hoQGWMnyQPAh3k2jhWJ8R}#))
                                     (eq? (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                            #{i _hoQGWMnyQPAh3k2jhWJ8Q}#
                                            '(()))
                                          (#{id-var-name _hoQGWMnyQPAh3k2jhWHTU}#
                                            #{j _hoQGWMnyQPAh3k2jhWJ8R}#
                                            '(())))
                                     #f))
                               #{r _hoQGWMnyQPAh3k2jhWJ1L}#
                               #f)
                             #f)
                           (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWJ1W}# 'atom)
                             (if (equal?
                                   (vector-ref #{p _hoQGWMnyQPAh3k2jhWJ1J}# 1)
                                   (#{strip _hoQGWMnyQPAh3k2jhWHTy}#
                                     #{e _hoQGWMnyQPAh3k2jhWJ1I}#
                                     #{w _hoQGWMnyQPAh3k2jhWJ1K}#))
                               #{r _hoQGWMnyQPAh3k2jhWJ1L}#
                               #f)
                             (if (eqv? #{atom-key _hoQGWMnyQPAh3k2jhWJ1W}#
                                       'vector)
                               (if (vector? #{e _hoQGWMnyQPAh3k2jhWJ1I}#)
                                 (#{match _hoQGWMnyQPAh3k2jhWJ0r}#
                                   (vector->list #{e _hoQGWMnyQPAh3k2jhWJ1I}#)
                                   (vector-ref #{p _hoQGWMnyQPAh3k2jhWJ1J}# 1)
                                   #{w _hoQGWMnyQPAh3k2jhWJ1K}#
                                   #{r _hoQGWMnyQPAh3k2jhWJ1L}#
                                   #{mod _hoQGWMnyQPAh3k2jhWJ1M}#)
                                 #f))))))))))))
         (#{match _hoQGWMnyQPAh3k2jhWJ0r}#
           (lambda (#{e _hoQGWMnyQPAh3k2jhWJ9N}#
                    #{p _hoQGWMnyQPAh3k2jhWJ9O}#
                    #{w _hoQGWMnyQPAh3k2jhWJ9P}#
                    #{r _hoQGWMnyQPAh3k2jhWJ9Q}#
                    #{mod _hoQGWMnyQPAh3k2jhWJ9R}#)
             (if (not #{r _hoQGWMnyQPAh3k2jhWJ9Q}#)
               #f
               (if (eq? #{p _hoQGWMnyQPAh3k2jhWJ9O}# '_)
                 #{r _hoQGWMnyQPAh3k2jhWJ9Q}#
                 (if (eq? #{p _hoQGWMnyQPAh3k2jhWJ9O}# 'any)
                   (cons (#{wrap _hoQGWMnyQPAh3k2jhWHTe}#
                           #{e _hoQGWMnyQPAh3k2jhWJ9N}#
                           #{w _hoQGWMnyQPAh3k2jhWJ9P}#
                           #{mod _hoQGWMnyQPAh3k2jhWJ9R}#)
                         #{r _hoQGWMnyQPAh3k2jhWJ9Q}#)
                   (if (if (vector? #{e _hoQGWMnyQPAh3k2jhWJ9N}#)
                         (if (= (vector-length #{e _hoQGWMnyQPAh3k2jhWJ9N}#)
                                4)
                           (eq? (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ9N}# 0)
                                'syntax-object)
                           #f)
                         #f)
                     (#{match* _hoQGWMnyQPAh3k2jhWJ0q}#
                       (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ9N}# 1)
                       #{p _hoQGWMnyQPAh3k2jhWJ9O}#
                       (#{join-wraps _hoQGWMnyQPAh3k2jhWHTR}#
                         #{w _hoQGWMnyQPAh3k2jhWJ9P}#
                         (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ9N}# 2))
                       #{r _hoQGWMnyQPAh3k2jhWJ9Q}#
                       (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ9N}# 3))
                     (#{match* _hoQGWMnyQPAh3k2jhWJ0q}#
                       #{e _hoQGWMnyQPAh3k2jhWJ9N}#
                       #{p _hoQGWMnyQPAh3k2jhWJ9O}#
                       #{w _hoQGWMnyQPAh3k2jhWJ9P}#
                       #{r _hoQGWMnyQPAh3k2jhWJ9Q}#
                       #{mod _hoQGWMnyQPAh3k2jhWJ9R}#))))))))
        (set! $sc-dispatch
          (lambda (#{e _hoQGWMnyQPAh3k2jhWJ0s}#
                   #{p _hoQGWMnyQPAh3k2jhWJ0t}#)
            (if (eq? #{p _hoQGWMnyQPAh3k2jhWJ0t}# 'any)
              (list #{e _hoQGWMnyQPAh3k2jhWJ0s}#)
              (if (eq? #{p _hoQGWMnyQPAh3k2jhWJ0t}# '_)
                '()
                (if (if (vector? #{e _hoQGWMnyQPAh3k2jhWJ0s}#)
                      (if (= (vector-length #{e _hoQGWMnyQPAh3k2jhWJ0s}#)
                             4)
                        (eq? (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ0s}# 0)
                             'syntax-object)
                        #f)
                      #f)
                  (#{match* _hoQGWMnyQPAh3k2jhWJ0q}#
                    (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ0s}# 1)
                    #{p _hoQGWMnyQPAh3k2jhWJ0t}#
                    (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ0s}# 2)
                    '()
                    (vector-ref #{e _hoQGWMnyQPAh3k2jhWJ0s}# 3))
                  (#{match* _hoQGWMnyQPAh3k2jhWJ0q}#
                    #{e _hoQGWMnyQPAh3k2jhWJ0s}#
                    #{p _hoQGWMnyQPAh3k2jhWJ0t}#
                    '(())
                    '()
                    #f))))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x _hoQGWMnyQPAh3k2jhWMwo}#)
      (let ((#{tmp _hoQGWMnyQPAh3k2jhWMwq}#
              ($sc-dispatch
                #{x _hoQGWMnyQPAh3k2jhWMwo}#
                '(_ () any . each-any))))
        (if #{tmp _hoQGWMnyQPAh3k2jhWMwq}#
          (@apply
            (lambda (#{e1 _hoQGWMnyQPAh3k2jhWMwu}#
                     #{e2 _hoQGWMnyQPAh3k2jhWMwv}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage #(e1 e2) #((top) (top)) #("2zo" "2zp"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("2zn")))
                       (hygiene guile))
                    (cons '()
                          (cons #{e1 _hoQGWMnyQPAh3k2jhWMwu}#
                                #{e2 _hoQGWMnyQPAh3k2jhWMwv}#))))
            #{tmp _hoQGWMnyQPAh3k2jhWMwq}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWMww}#
                  ($sc-dispatch
                    #{x _hoQGWMnyQPAh3k2jhWMwo}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp _hoQGWMnyQPAh3k2jhWMww}#
              (@apply
                (lambda (#{out _hoQGWMnyQPAh3k2jhWMw0}#
                         #{in _hoQGWMnyQPAh3k2jhWMw1}#
                         #{e1 _hoQGWMnyQPAh3k2jhWMw2}#
                         #{e2 _hoQGWMnyQPAh3k2jhWMw3}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("2zq" "2zr" "2zs" "2zt"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("2zn")))
                           (hygiene guile))
                        #{in _hoQGWMnyQPAh3k2jhWMw1}#
                        '()
                        (list #{out _hoQGWMnyQPAh3k2jhWMw0}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("2zq" "2zr" "2zs" "2zt"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("2zn")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 _hoQGWMnyQPAh3k2jhWMw2}#
                                                #{e2 _hoQGWMnyQPAh3k2jhWMw3}#))))))
                #{tmp _hoQGWMnyQPAh3k2jhWMww}#)
              (let ((#{tmp _hoQGWMnyQPAh3k2jhWMw4}#
                      ($sc-dispatch
                        #{x _hoQGWMnyQPAh3k2jhWMwo}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp _hoQGWMnyQPAh3k2jhWMw4}#
                  (@apply
                    (lambda (#{out _hoQGWMnyQPAh3k2jhWMw8}#
                             #{in _hoQGWMnyQPAh3k2jhWMw9}#
                             #{e1 _hoQGWMnyQPAh3k2jhWMw$}#
                             #{e2 _hoQGWMnyQPAh3k2jhWMw@}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("2zu" "2zv" "2zw" "2zx"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("2zn")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("2zu" "2zv" "2zw" "2zx"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("2zn")))
                                     (hygiene guile))
                                  #{in _hoQGWMnyQPAh3k2jhWMw9}#)
                            '()
                            (list #{out _hoQGWMnyQPAh3k2jhWMw8}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("2zu" "2zv" "2zw" "2zx"))
                                            #(ribcage () () ())
                                            #(ribcage #(x) #((top)) #("2zn")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 _hoQGWMnyQPAh3k2jhWMw$}#
                                                    #{e2 _hoQGWMnyQPAh3k2jhWMw@}#))))))
                    #{tmp _hoQGWMnyQPAh3k2jhWMw4}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x _hoQGWMnyQPAh3k2jhWMwo}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x _hoQGWMnyQPAh3k2jhWMxm}#)
      (let ((#{tmp _hoQGWMnyQPAh3k2jhWMxo}#
              ($sc-dispatch
                #{x _hoQGWMnyQPAh3k2jhWMxm}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp _hoQGWMnyQPAh3k2jhWMxo}#
          (@apply
            (lambda (#{k _hoQGWMnyQPAh3k2jhWMxs}#
                     #{keyword _hoQGWMnyQPAh3k2jhWMxt}#
                     #{pattern _hoQGWMnyQPAh3k2jhWMxu}#
                     #{template _hoQGWMnyQPAh3k2jhWMxv}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("2zz" "300" "301" "302"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("2zy")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("2zz" "300" "301" "302"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("2zy")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("2zz" "300" "301" "302"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("2zy")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("2zz" "300" "301" "302"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("2zy")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("2zz" "300" "301" "302"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("2zy")))
                               (hygiene guile))
                            #{pattern _hoQGWMnyQPAh3k2jhWMxu}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("2zz" "300" "301" "302"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("2zy")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("2zz" "300" "301" "302"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("2zy")))
                                   (hygiene guile))
                                (cons #{k _hoQGWMnyQPAh3k2jhWMxs}#
                                      (map (lambda (#{tmp _hoQGWMnyQPAh3k2jhWMxW _hoQGWMnyQPAh3k2jhWMxw}#
                                                    #{tmp _hoQGWMnyQPAh3k2jhWMxV _hoQGWMnyQPAh3k2jhWMxx}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("2zz"
                                                                 "300"
                                                                 "301"
                                                                 "302"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("2zy")))
                                                            (hygiene guile))
                                                         #{tmp _hoQGWMnyQPAh3k2jhWMxV _hoQGWMnyQPAh3k2jhWMxx}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("2zz"
                                                                 "300"
                                                                 "301"
                                                                 "302"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("2zy")))
                                                            (hygiene guile))
                                                         #{tmp _hoQGWMnyQPAh3k2jhWMxW _hoQGWMnyQPAh3k2jhWMxw}#)))
                                           #{template _hoQGWMnyQPAh3k2jhWMxv}#
                                           #{pattern _hoQGWMnyQPAh3k2jhWMxu}#))))))
            #{tmp _hoQGWMnyQPAh3k2jhWMxo}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWMxy}#
                  ($sc-dispatch
                    #{x _hoQGWMnyQPAh3k2jhWMxm}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp _hoQGWMnyQPAh3k2jhWMxy}#
                  (@apply
                    (lambda (#{k _hoQGWMnyQPAh3k2jhWMx2}#
                             #{docstring _hoQGWMnyQPAh3k2jhWMx3}#
                             #{keyword _hoQGWMnyQPAh3k2jhWMx4}#
                             #{pattern _hoQGWMnyQPAh3k2jhWMx5}#
                             #{template _hoQGWMnyQPAh3k2jhWMx6}#)
                      (string?
                        (syntax->datum
                          #{docstring _hoQGWMnyQPAh3k2jhWMx3}#)))
                    #{tmp _hoQGWMnyQPAh3k2jhWMxy}#)
                  #f)
              (@apply
                (lambda (#{k _hoQGWMnyQPAh3k2jhWMx7}#
                         #{docstring _hoQGWMnyQPAh3k2jhWMx8}#
                         #{keyword _hoQGWMnyQPAh3k2jhWMx9}#
                         #{pattern _hoQGWMnyQPAh3k2jhWMx$}#
                         #{template _hoQGWMnyQPAh3k2jhWMx@}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("308" "309" "30a" "30b" "30c"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("2zy")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("308" "309" "30a" "30b" "30c"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("2zy")))
                            (hygiene guile)))
                        #{docstring _hoQGWMnyQPAh3k2jhWMx8}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("308" "309" "30a" "30b" "30c"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("2zy")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("308" "309" "30a" "30b" "30c"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("2zy")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("308" "309" "30a" "30b" "30c"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("2zy")))
                                   (hygiene guile))
                                #{pattern _hoQGWMnyQPAh3k2jhWMx$}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("308" "309" "30a" "30b" "30c"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("2zy")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("308" "309" "30a" "30b" "30c"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("2zy")))
                                       (hygiene guile))
                                    (cons #{k _hoQGWMnyQPAh3k2jhWMx7}#
                                          (map (lambda (#{tmp _hoQGWMnyQPAh3k2jhWMxl _hoQGWMnyQPAh3k2jhWMyA}#
                                                        #{tmp _hoQGWMnyQPAh3k2jhWMxk _hoQGWMnyQPAh3k2jhWMyB}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("308"
                                                                     "309"
                                                                     "30a"
                                                                     "30b"
                                                                     "30c"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("2zy")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp _hoQGWMnyQPAh3k2jhWMxk _hoQGWMnyQPAh3k2jhWMyB}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("308"
                                                                     "309"
                                                                     "30a"
                                                                     "30b"
                                                                     "30c"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("2zy")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp _hoQGWMnyQPAh3k2jhWMxl _hoQGWMnyQPAh3k2jhWMyA}#)))
                                               #{template _hoQGWMnyQPAh3k2jhWMx@}#
                                               #{pattern _hoQGWMnyQPAh3k2jhWMx$}#))))))
                #{tmp _hoQGWMnyQPAh3k2jhWMxy}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x _hoQGWMnyQPAh3k2jhWMxm}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x _hoQGWMnyQPAh3k2jhWMya}#)
      (let ((#{tmp _hoQGWMnyQPAh3k2jhWMyc}#
              ($sc-dispatch
                #{x _hoQGWMnyQPAh3k2jhWMya}#
                '(_ (any . any) any))))
        (if #{tmp _hoQGWMnyQPAh3k2jhWMyc}#
          (@apply
            (lambda (#{name _hoQGWMnyQPAh3k2jhWMyg}#
                     #{pattern _hoQGWMnyQPAh3k2jhWMyh}#
                     #{template _hoQGWMnyQPAh3k2jhWMyi}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("30e" "30f" "30g"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("30d")))
                       (hygiene guile))
                    #{name _hoQGWMnyQPAh3k2jhWMyg}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("30e" "30f" "30g"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("30d")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("30e" "30f" "30g"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("30d")))
                                         (hygiene guile))
                                      #{pattern _hoQGWMnyQPAh3k2jhWMyh}#)
                                #{template _hoQGWMnyQPAh3k2jhWMyi}#))))
            #{tmp _hoQGWMnyQPAh3k2jhWMyc}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWMyj}#
                  ($sc-dispatch
                    #{x _hoQGWMnyQPAh3k2jhWMya}#
                    '(_ (any . any) any any))))
            (if (if #{tmp _hoQGWMnyQPAh3k2jhWMyj}#
                  (@apply
                    (lambda (#{name _hoQGWMnyQPAh3k2jhWMyn}#
                             #{pattern _hoQGWMnyQPAh3k2jhWMyo}#
                             #{docstring _hoQGWMnyQPAh3k2jhWMyp}#
                             #{template _hoQGWMnyQPAh3k2jhWMyq}#)
                      (string?
                        (syntax->datum
                          #{docstring _hoQGWMnyQPAh3k2jhWMyp}#)))
                    #{tmp _hoQGWMnyQPAh3k2jhWMyj}#)
                  #f)
              (@apply
                (lambda (#{name _hoQGWMnyQPAh3k2jhWMyr}#
                         #{pattern _hoQGWMnyQPAh3k2jhWMys}#
                         #{docstring _hoQGWMnyQPAh3k2jhWMyt}#
                         #{template _hoQGWMnyQPAh3k2jhWMyu}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("30l" "30m" "30n" "30o"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("30d")))
                           (hygiene guile))
                        #{name _hoQGWMnyQPAh3k2jhWMyr}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("30l" "30m" "30n" "30o"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("30d")))
                                 (hygiene guile))
                              '()
                              #{docstring _hoQGWMnyQPAh3k2jhWMyt}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("30l" "30m" "30n" "30o"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("30d")))
                                             (hygiene guile))
                                          #{pattern _hoQGWMnyQPAh3k2jhWMys}#)
                                    #{template _hoQGWMnyQPAh3k2jhWMyu}#))))
                #{tmp _hoQGWMnyQPAh3k2jhWMyj}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x _hoQGWMnyQPAh3k2jhWMya}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x _hoQGWMnyQPAh3k2jhWMzQ}#)
      (let ((#{tmp _hoQGWMnyQPAh3k2jhWMzS}#
              ($sc-dispatch
                #{x _hoQGWMnyQPAh3k2jhWMzQ}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp _hoQGWMnyQPAh3k2jhWMzS}#
              (@apply
                (lambda (#{let* _hoQGWMnyQPAh3k2jhWMzW}#
                         #{x _hoQGWMnyQPAh3k2jhWMzX}#
                         #{v _hoQGWMnyQPAh3k2jhWMzY}#
                         #{e1 _hoQGWMnyQPAh3k2jhWMzZ}#
                         #{e2 _hoQGWMnyQPAh3k2jhWMza}#)
                  (and-map
                    identifier?
                    #{x _hoQGWMnyQPAh3k2jhWMzX}#))
                #{tmp _hoQGWMnyQPAh3k2jhWMzS}#)
              #f)
          (@apply
            (lambda (#{let* _hoQGWMnyQPAh3k2jhWMzb}#
                     #{x _hoQGWMnyQPAh3k2jhWMzc}#
                     #{v _hoQGWMnyQPAh3k2jhWMzd}#
                     #{e1 _hoQGWMnyQPAh3k2jhWMze}#
                     #{e2 _hoQGWMnyQPAh3k2jhWMzf}#)
              (letrec*
                ((#{f _hoQGWMnyQPAh3k2jhWMzg}#
                   (lambda (#{bindings _hoQGWMnyQPAh3k2jhWMzj}#)
                     (if (null? #{bindings _hoQGWMnyQPAh3k2jhWMzj}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("310" "311"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("30v" "30w" "30x" "30y" "30z"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("30p")))
                                (hygiene guile))
                             (cons '()
                                   (cons #{e1 _hoQGWMnyQPAh3k2jhWMze}#
                                         #{e2 _hoQGWMnyQPAh3k2jhWMzf}#)))
                       (let ((#{tmp _hoQGWMnyQPAh3k2jhWMzk}#
                               (list (#{f _hoQGWMnyQPAh3k2jhWMzg}#
                                       (cdr #{bindings _hoQGWMnyQPAh3k2jhWMzj}#))
                                     (car #{bindings _hoQGWMnyQPAh3k2jhWMzj}#))))
                         (let ((#{tmp _hoQGWMnyQPAh3k2jhWMzl}#
                                 ($sc-dispatch
                                   #{tmp _hoQGWMnyQPAh3k2jhWMzk}#
                                   '(any any))))
                           (if #{tmp _hoQGWMnyQPAh3k2jhWMzl}#
                             (@apply
                               (lambda (#{body _hoQGWMnyQPAh3k2jhWMzn}#
                                        #{binding _hoQGWMnyQPAh3k2jhWMzo}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("312" "313"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("310" "311"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("30v" "30w" "30x" "30y" "30z"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("30p")))
                                          (hygiene guile))
                                       (list #{binding _hoQGWMnyQPAh3k2jhWMzo}#)
                                       #{body _hoQGWMnyQPAh3k2jhWMzn}#))
                               #{tmp _hoQGWMnyQPAh3k2jhWMzl}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp _hoQGWMnyQPAh3k2jhWMzk}#))))))))
                (#{f _hoQGWMnyQPAh3k2jhWMzg}#
                  (map list
                       #{x _hoQGWMnyQPAh3k2jhWMzc}#
                       #{v _hoQGWMnyQPAh3k2jhWMzd}#))))
            #{tmp _hoQGWMnyQPAh3k2jhWMzS}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x _hoQGWMnyQPAh3k2jhWMzQ}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x _hoQGWMnyQPAh3k2jhWM0U}#)
      (let ((#{tmp _hoQGWMnyQPAh3k2jhWM0W}#
              ($sc-dispatch
                #{orig-x _hoQGWMnyQPAh3k2jhWM0U}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp _hoQGWMnyQPAh3k2jhWM0W}#
          (@apply
            (lambda (#{var _hoQGWMnyQPAh3k2jhWM0a}#
                     #{init _hoQGWMnyQPAh3k2jhWM0b}#
                     #{step _hoQGWMnyQPAh3k2jhWM0c}#
                     #{e0 _hoQGWMnyQPAh3k2jhWM0d}#
                     #{e1 _hoQGWMnyQPAh3k2jhWM0e}#
                     #{c _hoQGWMnyQPAh3k2jhWM0f}#)
              (let ((#{tmp _hoQGWMnyQPAh3k2jhWM0g}#
                      (map (lambda (#{v _hoQGWMnyQPAh3k2jhWM0j}#
                                    #{s _hoQGWMnyQPAh3k2jhWM0k}#)
                             (let ((#{tmp _hoQGWMnyQPAh3k2jhWM0m}#
                                     ($sc-dispatch
                                       #{s _hoQGWMnyQPAh3k2jhWM0k}#
                                       '())))
                               (if #{tmp _hoQGWMnyQPAh3k2jhWM0m}#
                                 (@apply
                                   (lambda () #{v _hoQGWMnyQPAh3k2jhWM0j}#)
                                   #{tmp _hoQGWMnyQPAh3k2jhWM0m}#)
                                 (let ((#{tmp _hoQGWMnyQPAh3k2jhWM0p}#
                                         ($sc-dispatch
                                           #{s _hoQGWMnyQPAh3k2jhWM0k}#
                                           '(any))))
                                   (if #{tmp _hoQGWMnyQPAh3k2jhWM0p}#
                                     (@apply
                                       (lambda (#{e _hoQGWMnyQPAh3k2jhWM0s}#)
                                         #{e _hoQGWMnyQPAh3k2jhWM0s}#)
                                       #{tmp _hoQGWMnyQPAh3k2jhWM0p}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x _hoQGWMnyQPAh3k2jhWM0U}#
                                       #{s _hoQGWMnyQPAh3k2jhWM0k}#))))))
                           #{var _hoQGWMnyQPAh3k2jhWM0a}#
                           #{step _hoQGWMnyQPAh3k2jhWM0c}#)))
                (let ((#{tmp _hoQGWMnyQPAh3k2jhWM0h}#
                        ($sc-dispatch
                          #{tmp _hoQGWMnyQPAh3k2jhWM0g}#
                          'each-any)))
                  (if #{tmp _hoQGWMnyQPAh3k2jhWM0h}#
                    (@apply
                      (lambda (#{step _hoQGWMnyQPAh3k2jhWM0y}#)
                        (let ((#{tmp _hoQGWMnyQPAh3k2jhWM00}#
                                ($sc-dispatch
                                  #{e1 _hoQGWMnyQPAh3k2jhWM0e}#
                                  '())))
                          (if #{tmp _hoQGWMnyQPAh3k2jhWM00}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage #(step) #((top)) #("31b"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("315"
                                              "316"
                                              "317"
                                              "318"
                                              "319"
                                              "31a"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("314")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage #(step) #((top)) #("31b"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("315"
                                              "316"
                                              "317"
                                              "318"
                                              "319"
                                              "31a"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("314")))
                                         (hygiene guile))
                                      (map list
                                           #{var _hoQGWMnyQPAh3k2jhWM0a}#
                                           #{init _hoQGWMnyQPAh3k2jhWM0b}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("31b"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("315"
                                                    "316"
                                                    "317"
                                                    "318"
                                                    "319"
                                                    "31a"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("314")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("31b"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("315"
                                                          "316"
                                                          "317"
                                                          "318"
                                                          "319"
                                                          "31a"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("314")))
                                                     (hygiene guile))
                                                  #{e0 _hoQGWMnyQPAh3k2jhWM0d}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("31b"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("315"
                                                          "316"
                                                          "317"
                                                          "318"
                                                          "319"
                                                          "31a"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("314")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c _hoQGWMnyQPAh3k2jhWM0f}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("31b"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("315"
                                                                        "316"
                                                                        "317"
                                                                        "318"
                                                                        "319"
                                                                        "31a"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("314")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step _hoQGWMnyQPAh3k2jhWM0y}#)))))))
                              #{tmp _hoQGWMnyQPAh3k2jhWM00}#)
                            (let ((#{tmp _hoQGWMnyQPAh3k2jhWM04}#
                                    ($sc-dispatch
                                      #{e1 _hoQGWMnyQPAh3k2jhWM0e}#
                                      '(any . each-any))))
                              (if #{tmp _hoQGWMnyQPAh3k2jhWM04}#
                                (@apply
                                  (lambda (#{e1 _hoQGWMnyQPAh3k2jhWM08}#
                                           #{e2 _hoQGWMnyQPAh3k2jhWM09}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("31c" "31d"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("31b"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("315"
                                                  "316"
                                                  "317"
                                                  "318"
                                                  "319"
                                                  "31a"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("314")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("31c" "31d"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("31b"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("315"
                                                  "316"
                                                  "317"
                                                  "318"
                                                  "319"
                                                  "31a"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("314")))
                                             (hygiene guile))
                                          (map list
                                               #{var _hoQGWMnyQPAh3k2jhWM0a}#
                                               #{init _hoQGWMnyQPAh3k2jhWM0b}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("31c" "31d"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("31b"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("315"
                                                        "316"
                                                        "317"
                                                        "318"
                                                        "319"
                                                        "31a"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("314")))
                                                   (hygiene guile))
                                                #{e0 _hoQGWMnyQPAh3k2jhWM0d}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("31c" "31d"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("31b"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("315"
                                                              "316"
                                                              "317"
                                                              "318"
                                                              "319"
                                                              "31a"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("314")))
                                                         (hygiene guile))
                                                      (cons #{e1 _hoQGWMnyQPAh3k2jhWM08}#
                                                            #{e2 _hoQGWMnyQPAh3k2jhWM09}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("31c" "31d"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("31b"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("315"
                                                              "316"
                                                              "317"
                                                              "318"
                                                              "319"
                                                              "31a"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("314")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c _hoQGWMnyQPAh3k2jhWM0f}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("31c"
                                                                            "31d"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("31b"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("315"
                                                                            "316"
                                                                            "317"
                                                                            "318"
                                                                            "319"
                                                                            "31a"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("314")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step _hoQGWMnyQPAh3k2jhWM0y}#)))))))
                                  #{tmp _hoQGWMnyQPAh3k2jhWM04}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 _hoQGWMnyQPAh3k2jhWM0e}#))))))
                      #{tmp _hoQGWMnyQPAh3k2jhWM0h}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp _hoQGWMnyQPAh3k2jhWM0g}#)))))
            #{tmp _hoQGWMnyQPAh3k2jhWM0W}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x _hoQGWMnyQPAh3k2jhWM0U}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
         (lambda (#{p _hoQGWMnyQPAh3k2jhWM4k}#
                  #{lev _hoQGWMnyQPAh3k2jhWM4l}#)
           (let ((#{tmp _hoQGWMnyQPAh3k2jhWM4n}#
                   ($sc-dispatch
                     #{p _hoQGWMnyQPAh3k2jhWM4k}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("31p" "31q"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("31o" "31n" "31m" "31l" "31k" "31j" "31i")))
                           (hygiene guile)))
                       any))))
             (if #{tmp _hoQGWMnyQPAh3k2jhWM4n}#
               (@apply
                 (lambda (#{p _hoQGWMnyQPAh3k2jhWM4r}#)
                   (if (= #{lev _hoQGWMnyQPAh3k2jhWM4l}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("31r"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("31p" "31q"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("31o" "31n" "31m" "31l" "31k" "31j" "31i")))
                              (hygiene guile))
                           #{p _hoQGWMnyQPAh3k2jhWM4r}#)
                     (#{quasicons _hoQGWMnyQPAh3k2jhWM4O}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("31r"))
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("31p" "31q"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("31o" "31n" "31m" "31l" "31k" "31j" "31i")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("31r"))
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("31p" "31q"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("31o" "31n" "31m" "31l" "31k" "31j" "31i")))
                           (hygiene guile)))
                       (#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
                         (list #{p _hoQGWMnyQPAh3k2jhWM4r}#)
                         (#{1-}# #{lev _hoQGWMnyQPAh3k2jhWM4l}#)))))
                 #{tmp _hoQGWMnyQPAh3k2jhWM4n}#)
               (let ((#{tmp _hoQGWMnyQPAh3k2jhWM4u}#
                       ($sc-dispatch
                         #{p _hoQGWMnyQPAh3k2jhWM4k}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("31p" "31q"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("31o" "31n" "31m" "31l" "31k" "31j" "31i")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp _hoQGWMnyQPAh3k2jhWM4u}#
                   (@apply
                     (lambda (#{p _hoQGWMnyQPAh3k2jhWM4y}#)
                       (#{quasicons _hoQGWMnyQPAh3k2jhWM4O}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("31s"))
                              #(ribcage () () ())
                              #(ribcage #(p lev) #((top) (top)) #("31p" "31q"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("31o" "31n" "31m" "31l" "31k" "31j" "31i")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("31s"))
                              #(ribcage () () ())
                              #(ribcage #(p lev) #((top) (top)) #("31p" "31q"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("31o" "31n" "31m" "31l" "31k" "31j" "31i")))
                             (hygiene guile)))
                         (#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
                           (list #{p _hoQGWMnyQPAh3k2jhWM4y}#)
                           (#{1+}# #{lev _hoQGWMnyQPAh3k2jhWM4l}#))))
                     #{tmp _hoQGWMnyQPAh3k2jhWM4u}#)
                   (let ((#{tmp _hoQGWMnyQPAh3k2jhWM41}#
                           ($sc-dispatch
                             #{p _hoQGWMnyQPAh3k2jhWM4k}#
                             '(any . any))))
                     (if #{tmp _hoQGWMnyQPAh3k2jhWM41}#
                       (@apply
                         (lambda (#{p _hoQGWMnyQPAh3k2jhWM45}#
                                  #{q _hoQGWMnyQPAh3k2jhWM46}#)
                           (let ((#{tmp _hoQGWMnyQPAh3k2jhWM48}#
                                   ($sc-dispatch
                                     #{p _hoQGWMnyQPAh3k2jhWM45}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("31t" "31u"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("31p" "31q"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("31o"
                                               "31n"
                                               "31m"
                                               "31l"
                                               "31k"
                                               "31j"
                                               "31i")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp _hoQGWMnyQPAh3k2jhWM48}#
                               (@apply
                                 (lambda (#{p _hoQGWMnyQPAh3k2jhWM5A}#)
                                   (if (= #{lev _hoQGWMnyQPAh3k2jhWM4l}# 0)
                                     (#{quasilist* _hoQGWMnyQPAh3k2jhWM4Q}#
                                       (map (lambda (#{tmp _hoQGWMnyQPAh3k2jhWM1h _hoQGWMnyQPAh3k2jhWM5k}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("31v"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("31t" "31u"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("31p" "31q"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("31o"
                                                           "31n"
                                                           "31m"
                                                           "31l"
                                                           "31k"
                                                           "31j"
                                                           "31i")))
                                                       (hygiene guile))
                                                    #{tmp _hoQGWMnyQPAh3k2jhWM1h _hoQGWMnyQPAh3k2jhWM5k}#))
                                            #{p _hoQGWMnyQPAh3k2jhWM5A}#)
                                       (#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
                                         #{q _hoQGWMnyQPAh3k2jhWM46}#
                                         #{lev _hoQGWMnyQPAh3k2jhWM4l}#))
                                     (#{quasicons _hoQGWMnyQPAh3k2jhWM4O}#
                                       (#{quasicons _hoQGWMnyQPAh3k2jhWM4O}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage #(p) #((top)) #("31v"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("31t" "31u"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("31p" "31q"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("31o"
                                                 "31n"
                                                 "31m"
                                                 "31l"
                                                 "31k"
                                                 "31j"
                                                 "31i")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage #(p) #((top)) #("31v"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("31t" "31u"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("31p" "31q"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("31o"
                                                 "31n"
                                                 "31m"
                                                 "31l"
                                                 "31k"
                                                 "31j"
                                                 "31i")))
                                             (hygiene guile)))
                                         (#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
                                           #{p _hoQGWMnyQPAh3k2jhWM5A}#
                                           (#{1-}# #{lev _hoQGWMnyQPAh3k2jhWM4l}#)))
                                       (#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
                                         #{q _hoQGWMnyQPAh3k2jhWM46}#
                                         #{lev _hoQGWMnyQPAh3k2jhWM4l}#))))
                                 #{tmp _hoQGWMnyQPAh3k2jhWM48}#)
                               (let ((#{tmp _hoQGWMnyQPAh3k2jhWM5p}#
                                       ($sc-dispatch
                                         #{p _hoQGWMnyQPAh3k2jhWM45}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("31t" "31u"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("31p" "31q"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("31o"
                                                   "31n"
                                                   "31m"
                                                   "31l"
                                                   "31k"
                                                   "31j"
                                                   "31i")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp _hoQGWMnyQPAh3k2jhWM5p}#
                                   (@apply
                                     (lambda (#{p _hoQGWMnyQPAh3k2jhWM5t}#)
                                       (if (= #{lev _hoQGWMnyQPAh3k2jhWM4l}# 0)
                                         (#{quasiappend _hoQGWMnyQPAh3k2jhWM4P}#
                                           (map (lambda (#{tmp _hoQGWMnyQPAh3k2jhWM1l _hoQGWMnyQPAh3k2jhWM5w}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("31w"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("31t" "31u"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("31p" "31q"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("31o"
                                                               "31n"
                                                               "31m"
                                                               "31l"
                                                               "31k"
                                                               "31j"
                                                               "31i")))
                                                           (hygiene guile))
                                                        #{tmp _hoQGWMnyQPAh3k2jhWM1l _hoQGWMnyQPAh3k2jhWM5w}#))
                                                #{p _hoQGWMnyQPAh3k2jhWM5t}#)
                                           (#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
                                             #{q _hoQGWMnyQPAh3k2jhWM46}#
                                             #{lev _hoQGWMnyQPAh3k2jhWM4l}#))
                                         (#{quasicons _hoQGWMnyQPAh3k2jhWM4O}#
                                           (#{quasicons _hoQGWMnyQPAh3k2jhWM4O}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("31w"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("31t" "31u"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("31p" "31q"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("31o"
                                                     "31n"
                                                     "31m"
                                                     "31l"
                                                     "31k"
                                                     "31j"
                                                     "31i")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("31w"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("31t" "31u"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("31p" "31q"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("31o"
                                                     "31n"
                                                     "31m"
                                                     "31l"
                                                     "31k"
                                                     "31j"
                                                     "31i")))
                                                 (hygiene guile)))
                                             (#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
                                               #{p _hoQGWMnyQPAh3k2jhWM5t}#
                                               (#{1-}# #{lev _hoQGWMnyQPAh3k2jhWM4l}#)))
                                           (#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
                                             #{q _hoQGWMnyQPAh3k2jhWM46}#
                                             #{lev _hoQGWMnyQPAh3k2jhWM4l}#))))
                                     #{tmp _hoQGWMnyQPAh3k2jhWM5p}#)
                                   (#{quasicons _hoQGWMnyQPAh3k2jhWM4O}#
                                     (#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
                                       #{p _hoQGWMnyQPAh3k2jhWM45}#
                                       #{lev _hoQGWMnyQPAh3k2jhWM4l}#)
                                     (#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
                                       #{q _hoQGWMnyQPAh3k2jhWM46}#
                                       #{lev _hoQGWMnyQPAh3k2jhWM4l}#)))))))
                         #{tmp _hoQGWMnyQPAh3k2jhWM41}#)
                       (let ((#{tmp _hoQGWMnyQPAh3k2jhWM5$}#
                               ($sc-dispatch
                                 #{p _hoQGWMnyQPAh3k2jhWM4k}#
                                 '#(vector each-any))))
                         (if #{tmp _hoQGWMnyQPAh3k2jhWM5$}#
                           (@apply
                             (lambda (#{x _hoQGWMnyQPAh3k2jhWM6C}#)
                               (let ((#{x _hoQGWMnyQPAh3k2jhWM6F}#
                                       (#{vquasi _hoQGWMnyQPAh3k2jhWM4N}#
                                         #{x _hoQGWMnyQPAh3k2jhWM6C}#
                                         #{lev _hoQGWMnyQPAh3k2jhWM4l}#)))
                                 (let ((#{tmp _hoQGWMnyQPAh3k2jhWM6H}#
                                         ($sc-dispatch
                                           #{x _hoQGWMnyQPAh3k2jhWM6F}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp _hoQGWMnyQPAh3k2jhWM6H}#
                                     (@apply
                                       (lambda (#{x _hoQGWMnyQPAh3k2jhWM6L}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("32s"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("32r"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("31o"
                                                      "31n"
                                                      "31m"
                                                      "31l"
                                                      "31k"
                                                      "31j"
                                                      "31i")))
                                                  (hygiene guile))
                                               (list->vector
                                                 #{x _hoQGWMnyQPAh3k2jhWM6L}#)))
                                       #{tmp _hoQGWMnyQPAh3k2jhWM6H}#)
                                     (letrec*
                                       ((#{f _hoQGWMnyQPAh3k2jhWM6N}#
                                          (lambda (#{y _hoQGWMnyQPAh3k2jhWM6Z}#
                                                   #{k _hoQGWMnyQPAh3k2jhWM6a}#)
                                            (let ((#{tmp _hoQGWMnyQPAh3k2jhWM6c}#
                                                    ($sc-dispatch
                                                      #{y _hoQGWMnyQPAh3k2jhWM6Z}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp _hoQGWMnyQPAh3k2jhWM6c}#
                                                (@apply
                                                  (lambda (#{y _hoQGWMnyQPAh3k2jhWM6f}#)
                                                    (#{k _hoQGWMnyQPAh3k2jhWM6a}#
                                                      (map (lambda (#{tmp _hoQGWMnyQPAh3k2jhWM3A _hoQGWMnyQPAh3k2jhWM6g}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("32z"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("32u"
                                                                           "32v"
                                                                           "32w"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("32t"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("32r"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("31o"
                                                                          "31n"
                                                                          "31m"
                                                                          "31l"
                                                                          "31k"
                                                                          "31j"
                                                                          "31i")))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp _hoQGWMnyQPAh3k2jhWM3A _hoQGWMnyQPAh3k2jhWM6g}#))
                                                           #{y _hoQGWMnyQPAh3k2jhWM6f}#)))
                                                  #{tmp _hoQGWMnyQPAh3k2jhWM6c}#)
                                                (let ((#{tmp _hoQGWMnyQPAh3k2jhWM6h}#
                                                        ($sc-dispatch
                                                          #{y _hoQGWMnyQPAh3k2jhWM6Z}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp _hoQGWMnyQPAh3k2jhWM6h}#
                                                    (@apply
                                                      (lambda (#{y _hoQGWMnyQPAh3k2jhWM6k}#)
                                                        (#{k _hoQGWMnyQPAh3k2jhWM6a}#
                                                          #{y _hoQGWMnyQPAh3k2jhWM6k}#))
                                                      #{tmp _hoQGWMnyQPAh3k2jhWM6h}#)
                                                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWM6l}#
                                                            ($sc-dispatch
                                                              #{y _hoQGWMnyQPAh3k2jhWM6Z}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp _hoQGWMnyQPAh3k2jhWM6l}#
                                                        (@apply
                                                          (lambda (#{y _hoQGWMnyQPAh3k2jhWM6o}#
                                                                   #{z _hoQGWMnyQPAh3k2jhWM6p}#)
                                                            (#{f _hoQGWMnyQPAh3k2jhWM6N}#
                                                              #{z _hoQGWMnyQPAh3k2jhWM6p}#
                                                              (lambda (#{ls _hoQGWMnyQPAh3k2jhWM6q}#)
                                                                (#{k _hoQGWMnyQPAh3k2jhWM6a}#
                                                                  (append
                                                                    #{y _hoQGWMnyQPAh3k2jhWM6o}#
                                                                    #{ls _hoQGWMnyQPAh3k2jhWM6q}#)))))
                                                          #{tmp _hoQGWMnyQPAh3k2jhWM6l}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g_hoQGWMnyQPAh3k2jhWM3K}#)
                                                                    #((m_hoQGWMnyQPAh3k2jhWM3L
                                                                        top))
                                                                    #("335"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("334"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("32u"
                                                                      "32v"
                                                                      "32w"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("32t"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("32r"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("31o"
                                                                     "31n"
                                                                     "31m"
                                                                     "31l"
                                                                     "31k"
                                                                     "31j"
                                                                     "31i")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x _hoQGWMnyQPAh3k2jhWM6F}#))))))))))
                                       (#{f _hoQGWMnyQPAh3k2jhWM6N}#
                                         #{x _hoQGWMnyQPAh3k2jhWM6F}#
                                         (lambda (#{ls _hoQGWMnyQPAh3k2jhWM6P}#)
                                           (let ((#{tmp _hoQGWMnyQPAh3k2jhWM6R}#
                                                   ($sc-dispatch
                                                     #{ls _hoQGWMnyQPAh3k2jhWM6P}#
                                                     'each-any)))
                                             (if #{tmp _hoQGWMnyQPAh3k2jhWM6R}#
                                               (@apply
                                                 (lambda (#{ g_hoQGWMnyQPAh3k2jhWM22 _hoQGWMnyQPAh3k2jhWM6U}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g_hoQGWMnyQPAh3k2jhWM22}#)
                                                               #((m_hoQGWMnyQPAh3k2jhWM23
                                                                   top))
                                                               #("32y"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("32x"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("32t"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("32r"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("31o"
                                                                "31n"
                                                                "31m"
                                                                "31l"
                                                                "31k"
                                                                "31j"
                                                                "31i")))
                                                            (hygiene guile))
                                                         #{ g_hoQGWMnyQPAh3k2jhWM22 _hoQGWMnyQPAh3k2jhWM6U}#))
                                                 #{tmp _hoQGWMnyQPAh3k2jhWM6R}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls _hoQGWMnyQPAh3k2jhWM6P}#))))))))))
                             #{tmp _hoQGWMnyQPAh3k2jhWM5$}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("31z"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("31p" "31q"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("31o"
                                        "31n"
                                        "31m"
                                        "31l"
                                        "31k"
                                        "31j"
                                        "31i")))
                                    (hygiene guile))
                                 #{p _hoQGWMnyQPAh3k2jhWM4k}#)))))))))))
       (#{vquasi _hoQGWMnyQPAh3k2jhWM4N}#
         (lambda (#{p _hoQGWMnyQPAh3k2jhWM7G}#
                  #{lev _hoQGWMnyQPAh3k2jhWM7H}#)
           (let ((#{tmp _hoQGWMnyQPAh3k2jhWM7J}#
                   ($sc-dispatch
                     #{p _hoQGWMnyQPAh3k2jhWM7G}#
                     '(any . any))))
             (if #{tmp _hoQGWMnyQPAh3k2jhWM7J}#
               (@apply
                 (lambda (#{p _hoQGWMnyQPAh3k2jhWM7N}#
                          #{q _hoQGWMnyQPAh3k2jhWM7O}#)
                   (let ((#{tmp _hoQGWMnyQPAh3k2jhWM7Q}#
                           ($sc-dispatch
                             #{p _hoQGWMnyQPAh3k2jhWM7N}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("322" "323"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("320" "321"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("31o"
                                       "31n"
                                       "31m"
                                       "31l"
                                       "31k"
                                       "31j"
                                       "31i")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp _hoQGWMnyQPAh3k2jhWM7Q}#
                       (@apply
                         (lambda (#{p _hoQGWMnyQPAh3k2jhWM7U}#)
                           (if (= #{lev _hoQGWMnyQPAh3k2jhWM7H}# 0)
                             (#{quasilist* _hoQGWMnyQPAh3k2jhWM4Q}#
                               (map (lambda (#{tmp _hoQGWMnyQPAh3k2jhWM11 _hoQGWMnyQPAh3k2jhWM74}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("324"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("322" "323"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("320" "321"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("31o"
                                                   "31n"
                                                   "31m"
                                                   "31l"
                                                   "31k"
                                                   "31j"
                                                   "31i")))
                                               (hygiene guile))
                                            #{tmp _hoQGWMnyQPAh3k2jhWM11 _hoQGWMnyQPAh3k2jhWM74}#))
                                    #{p _hoQGWMnyQPAh3k2jhWM7U}#)
                               (#{vquasi _hoQGWMnyQPAh3k2jhWM4N}#
                                 #{q _hoQGWMnyQPAh3k2jhWM7O}#
                                 #{lev _hoQGWMnyQPAh3k2jhWM7H}#))
                             (#{quasicons _hoQGWMnyQPAh3k2jhWM4O}#
                               (#{quasicons _hoQGWMnyQPAh3k2jhWM4O}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("324"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("322" "323"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("320" "321"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("31o"
                                         "31n"
                                         "31m"
                                         "31l"
                                         "31k"
                                         "31j"
                                         "31i")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("324"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("322" "323"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("320" "321"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("31o"
                                         "31n"
                                         "31m"
                                         "31l"
                                         "31k"
                                         "31j"
                                         "31i")))
                                     (hygiene guile)))
                                 (#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
                                   #{p _hoQGWMnyQPAh3k2jhWM7U}#
                                   (#{1-}# #{lev _hoQGWMnyQPAh3k2jhWM7H}#)))
                               (#{vquasi _hoQGWMnyQPAh3k2jhWM4N}#
                                 #{q _hoQGWMnyQPAh3k2jhWM7O}#
                                 #{lev _hoQGWMnyQPAh3k2jhWM7H}#))))
                         #{tmp _hoQGWMnyQPAh3k2jhWM7Q}#)
                       (let ((#{tmp _hoQGWMnyQPAh3k2jhWM7@}#
                               ($sc-dispatch
                                 #{p _hoQGWMnyQPAh3k2jhWM7N}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("322" "323"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("320" "321"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("31o"
                                           "31n"
                                           "31m"
                                           "31l"
                                           "31k"
                                           "31j"
                                           "31i")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp _hoQGWMnyQPAh3k2jhWM7@}#
                           (@apply
                             (lambda (#{p _hoQGWMnyQPAh3k2jhWM8D}#)
                               (if (= #{lev _hoQGWMnyQPAh3k2jhWM7H}# 0)
                                 (#{quasiappend _hoQGWMnyQPAh3k2jhWM4P}#
                                   (map (lambda (#{tmp _hoQGWMnyQPAh3k2jhWM15 _hoQGWMnyQPAh3k2jhWM8G}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("325"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("322" "323"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("320" "321"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("31o"
                                                       "31n"
                                                       "31m"
                                                       "31l"
                                                       "31k"
                                                       "31j"
                                                       "31i")))
                                                   (hygiene guile))
                                                #{tmp _hoQGWMnyQPAh3k2jhWM15 _hoQGWMnyQPAh3k2jhWM8G}#))
                                        #{p _hoQGWMnyQPAh3k2jhWM8D}#)
                                   (#{vquasi _hoQGWMnyQPAh3k2jhWM4N}#
                                     #{q _hoQGWMnyQPAh3k2jhWM7O}#
                                     #{lev _hoQGWMnyQPAh3k2jhWM7H}#))
                                 (#{quasicons _hoQGWMnyQPAh3k2jhWM4O}#
                                   (#{quasicons _hoQGWMnyQPAh3k2jhWM4O}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("325"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("322" "323"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("320" "321"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("31o"
                                             "31n"
                                             "31m"
                                             "31l"
                                             "31k"
                                             "31j"
                                             "31i")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("325"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("322" "323"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("320" "321"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("31o"
                                             "31n"
                                             "31m"
                                             "31l"
                                             "31k"
                                             "31j"
                                             "31i")))
                                         (hygiene guile)))
                                     (#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
                                       #{p _hoQGWMnyQPAh3k2jhWM8D}#
                                       (#{1-}# #{lev _hoQGWMnyQPAh3k2jhWM7H}#)))
                                   (#{vquasi _hoQGWMnyQPAh3k2jhWM4N}#
                                     #{q _hoQGWMnyQPAh3k2jhWM7O}#
                                     #{lev _hoQGWMnyQPAh3k2jhWM7H}#))))
                             #{tmp _hoQGWMnyQPAh3k2jhWM7@}#)
                           (#{quasicons _hoQGWMnyQPAh3k2jhWM4O}#
                             (#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
                               #{p _hoQGWMnyQPAh3k2jhWM7N}#
                               #{lev _hoQGWMnyQPAh3k2jhWM7H}#)
                             (#{vquasi _hoQGWMnyQPAh3k2jhWM4N}#
                               #{q _hoQGWMnyQPAh3k2jhWM7O}#
                               #{lev _hoQGWMnyQPAh3k2jhWM7H}#)))))))
                 #{tmp _hoQGWMnyQPAh3k2jhWM7J}#)
               (let ((#{tmp _hoQGWMnyQPAh3k2jhWM8Y}#
                       ($sc-dispatch #{p _hoQGWMnyQPAh3k2jhWM7G}# '())))
                 (if #{tmp _hoQGWMnyQPAh3k2jhWM8Y}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("320" "321"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("31o" "31n" "31m" "31l" "31k" "31j" "31i")))
                           (hygiene guile))
                         ()))
                     #{tmp _hoQGWMnyQPAh3k2jhWM8Y}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p _hoQGWMnyQPAh3k2jhWM7G}#)))))))
       (#{quasicons _hoQGWMnyQPAh3k2jhWM4O}#
         (lambda (#{x _hoQGWMnyQPAh3k2jhWM8l}#
                  #{y _hoQGWMnyQPAh3k2jhWM8m}#)
           (let ((#{tmp _hoQGWMnyQPAh3k2jhWM8n}#
                   (list #{x _hoQGWMnyQPAh3k2jhWM8l}#
                         #{y _hoQGWMnyQPAh3k2jhWM8m}#)))
             (let ((#{tmp _hoQGWMnyQPAh3k2jhWM8o}#
                     ($sc-dispatch
                       #{tmp _hoQGWMnyQPAh3k2jhWM8n}#
                       '(any any))))
               (if #{tmp _hoQGWMnyQPAh3k2jhWM8o}#
                 (@apply
                   (lambda (#{x _hoQGWMnyQPAh3k2jhWM8q}#
                            #{y _hoQGWMnyQPAh3k2jhWM8r}#)
                     (let ((#{tmp _hoQGWMnyQPAh3k2jhWM8t}#
                             ($sc-dispatch
                               #{y _hoQGWMnyQPAh3k2jhWM8r}#
                               '(#(atom "quote") any))))
                       (if #{tmp _hoQGWMnyQPAh3k2jhWM8t}#
                         (@apply
                           (lambda (#{dy _hoQGWMnyQPAh3k2jhWM8x}#)
                             (let ((#{tmp _hoQGWMnyQPAh3k2jhWM8z}#
                                     ($sc-dispatch
                                       #{x _hoQGWMnyQPAh3k2jhWM8q}#
                                       '(#(atom "quote") any))))
                               (if #{tmp _hoQGWMnyQPAh3k2jhWM8z}#
                                 (@apply
                                   (lambda (#{dx _hoQGWMnyQPAh3k2jhWM83}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("32c"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("32b"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("329" "32a"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("327" "328"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("31o"
                                                  "31n"
                                                  "31m"
                                                  "31l"
                                                  "31k"
                                                  "31j"
                                                  "31i")))
                                              (hygiene guile))
                                           (cons #{dx _hoQGWMnyQPAh3k2jhWM83}#
                                                 #{dy _hoQGWMnyQPAh3k2jhWM8x}#)))
                                   #{tmp _hoQGWMnyQPAh3k2jhWM8z}#)
                                 (if (null? #{dy _hoQGWMnyQPAh3k2jhWM8x}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage #(_) #((top)) #("32d"))
                                             #(ribcage #(dy) #((top)) #("32b"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("329" "32a"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("327" "328"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("31o"
                                                "31n"
                                                "31m"
                                                "31l"
                                                "31k"
                                                "31j"
                                                "31i")))
                                            (hygiene guile))
                                         #{x _hoQGWMnyQPAh3k2jhWM8q}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage #(_) #((top)) #("32d"))
                                             #(ribcage #(dy) #((top)) #("32b"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("329" "32a"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("327" "328"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("31o"
                                                "31n"
                                                "31m"
                                                "31l"
                                                "31k"
                                                "31j"
                                                "31i")))
                                            (hygiene guile))
                                         #{x _hoQGWMnyQPAh3k2jhWM8q}#
                                         #{y _hoQGWMnyQPAh3k2jhWM8r}#)))))
                           #{tmp _hoQGWMnyQPAh3k2jhWM8t}#)
                         (let ((#{tmp _hoQGWMnyQPAh3k2jhWM88}#
                                 ($sc-dispatch
                                   #{y _hoQGWMnyQPAh3k2jhWM8r}#
                                   '(#(atom "list") . any))))
                           (if #{tmp _hoQGWMnyQPAh3k2jhWM88}#
                             (@apply
                               (lambda (#{stuff _hoQGWMnyQPAh3k2jhWM9A}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("32e"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("329" "32a"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("327" "328"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("31o"
                                              "31n"
                                              "31m"
                                              "31l"
                                              "31k"
                                              "31j"
                                              "31i")))
                                          (hygiene guile))
                                       (cons #{x _hoQGWMnyQPAh3k2jhWM8q}#
                                             #{stuff _hoQGWMnyQPAh3k2jhWM9A}#)))
                               #{tmp _hoQGWMnyQPAh3k2jhWM88}#)
                             (let ((#{tmp _hoQGWMnyQPAh3k2jhWM9B}#
                                     ($sc-dispatch
                                       #{y _hoQGWMnyQPAh3k2jhWM8r}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp _hoQGWMnyQPAh3k2jhWM9B}#
                                 (@apply
                                   (lambda (#{stuff _hoQGWMnyQPAh3k2jhWM9F}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("32f"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("329" "32a"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("327" "328"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("31o"
                                                  "31n"
                                                  "31m"
                                                  "31l"
                                                  "31k"
                                                  "31j"
                                                  "31i")))
                                              (hygiene guile))
                                           (cons #{x _hoQGWMnyQPAh3k2jhWM8q}#
                                                 #{stuff _hoQGWMnyQPAh3k2jhWM9F}#)))
                                   #{tmp _hoQGWMnyQPAh3k2jhWM9B}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("32g"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("329" "32a"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("327" "328"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("31o"
                                              "31n"
                                              "31m"
                                              "31l"
                                              "31k"
                                              "31j"
                                              "31i")))
                                          (hygiene guile))
                                       #{x _hoQGWMnyQPAh3k2jhWM8q}#
                                       #{y _hoQGWMnyQPAh3k2jhWM8r}#))))))))
                   #{tmp _hoQGWMnyQPAh3k2jhWM8o}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp _hoQGWMnyQPAh3k2jhWM8n}#))))))
       (#{quasiappend _hoQGWMnyQPAh3k2jhWM4P}#
         (lambda (#{x _hoQGWMnyQPAh3k2jhWM9Q}#
                  #{y _hoQGWMnyQPAh3k2jhWM9R}#)
           (let ((#{tmp _hoQGWMnyQPAh3k2jhWM9T}#
                   ($sc-dispatch
                     #{y _hoQGWMnyQPAh3k2jhWM9R}#
                     '(#(atom "quote") ()))))
             (if #{tmp _hoQGWMnyQPAh3k2jhWM9T}#
               (@apply
                 (lambda ()
                   (if (null? #{x _hoQGWMnyQPAh3k2jhWM9Q}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage #(x y) #((top) (top)) #("32h" "32i"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("31o" "31n" "31m" "31l" "31k" "31j" "31i")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x _hoQGWMnyQPAh3k2jhWM9Q}#))
                       (car #{x _hoQGWMnyQPAh3k2jhWM9Q}#)
                       (let ((#{tmp _hoQGWMnyQPAh3k2jhWM9Y}#
                               ($sc-dispatch
                                 #{x _hoQGWMnyQPAh3k2jhWM9Q}#
                                 'each-any)))
                         (if #{tmp _hoQGWMnyQPAh3k2jhWM9Y}#
                           (@apply
                             (lambda (#{p _hoQGWMnyQPAh3k2jhWM9c}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("32j"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("32h" "32i"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("31o"
                                            "31n"
                                            "31m"
                                            "31l"
                                            "31k"
                                            "31j"
                                            "31i")))
                                        (hygiene guile))
                                     #{p _hoQGWMnyQPAh3k2jhWM9c}#))
                             #{tmp _hoQGWMnyQPAh3k2jhWM9Y}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x _hoQGWMnyQPAh3k2jhWM9Q}#))))))
                 #{tmp _hoQGWMnyQPAh3k2jhWM9T}#)
               (if (null? #{x _hoQGWMnyQPAh3k2jhWM9Q}#)
                 #{y _hoQGWMnyQPAh3k2jhWM9R}#
                 (let ((#{tmp _hoQGWMnyQPAh3k2jhWM9k}#
                         (list #{x _hoQGWMnyQPAh3k2jhWM9Q}#
                               #{y _hoQGWMnyQPAh3k2jhWM9R}#)))
                   (let ((#{tmp _hoQGWMnyQPAh3k2jhWM9l}#
                           ($sc-dispatch
                             #{tmp _hoQGWMnyQPAh3k2jhWM9k}#
                             '(each-any any))))
                     (if #{tmp _hoQGWMnyQPAh3k2jhWM9l}#
                       (@apply
                         (lambda (#{p _hoQGWMnyQPAh3k2jhWM9n}#
                                  #{y _hoQGWMnyQPAh3k2jhWM9o}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("32l" "32m"))
                                     #(ribcage #(_) #((top)) #("32k"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("32h" "32i"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("31o"
                                        "31n"
                                        "31m"
                                        "31l"
                                        "31k"
                                        "31j"
                                        "31i")))
                                    (hygiene guile))
                                 (append
                                   #{p _hoQGWMnyQPAh3k2jhWM9n}#
                                   (list #{y _hoQGWMnyQPAh3k2jhWM9o}#))))
                         #{tmp _hoQGWMnyQPAh3k2jhWM9l}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp _hoQGWMnyQPAh3k2jhWM9k}#)))))))))
       (#{quasilist* _hoQGWMnyQPAh3k2jhWM4Q}#
         (lambda (#{x _hoQGWMnyQPAh3k2jhWM9s}#
                  #{y _hoQGWMnyQPAh3k2jhWM9t}#)
           (letrec*
             ((#{f _hoQGWMnyQPAh3k2jhWM9u}#
                (lambda (#{x _hoQGWMnyQPAh3k2jhWM@H}#)
                  (if (null? #{x _hoQGWMnyQPAh3k2jhWM@H}#)
                    #{y _hoQGWMnyQPAh3k2jhWM9t}#
                    (#{quasicons _hoQGWMnyQPAh3k2jhWM4O}#
                      (car #{x _hoQGWMnyQPAh3k2jhWM@H}#)
                      (#{f _hoQGWMnyQPAh3k2jhWM9u}#
                        (cdr #{x _hoQGWMnyQPAh3k2jhWM@H}#)))))))
             (#{f _hoQGWMnyQPAh3k2jhWM9u}#
               #{x _hoQGWMnyQPAh3k2jhWM9s}#))))
       (#{emit _hoQGWMnyQPAh3k2jhWM4S}#
         (lambda (#{x _hoQGWMnyQPAh3k2jhWM@K}#)
           (let ((#{tmp _hoQGWMnyQPAh3k2jhWM@M}#
                   ($sc-dispatch
                     #{x _hoQGWMnyQPAh3k2jhWM@K}#
                     '(#(atom "quote") any))))
             (if #{tmp _hoQGWMnyQPAh3k2jhWM@M}#
               (@apply
                 (lambda (#{x _hoQGWMnyQPAh3k2jhWM@Q}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("337"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("336"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("31o" "31n" "31m" "31l" "31k" "31j" "31i")))
                            (hygiene guile))
                         #{x _hoQGWMnyQPAh3k2jhWM@Q}#))
                 #{tmp _hoQGWMnyQPAh3k2jhWM@M}#)
               (let ((#{tmp _hoQGWMnyQPAh3k2jhWM@R}#
                       ($sc-dispatch
                         #{x _hoQGWMnyQPAh3k2jhWM@K}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp _hoQGWMnyQPAh3k2jhWM@R}#
                   (@apply
                     (lambda (#{x _hoQGWMnyQPAh3k2jhWM@V}#)
                       (let ((#{tmp _hoQGWMnyQPAh3k2jhWM@W}#
                               (map #{emit _hoQGWMnyQPAh3k2jhWM4S}#
                                    #{x _hoQGWMnyQPAh3k2jhWM@V}#)))
                         (let ((#{tmp _hoQGWMnyQPAh3k2jhWM@X}#
                                 ($sc-dispatch
                                   #{tmp _hoQGWMnyQPAh3k2jhWM@W}#
                                   'each-any)))
                           (if #{tmp _hoQGWMnyQPAh3k2jhWM@X}#
                             (@apply
                               (lambda (#{ g_hoQGWMnyQPAh3k2jhWM3V _hoQGWMnyQPAh3k2jhWM@Z}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g_hoQGWMnyQPAh3k2jhWM3V}#)
                                             #((m_hoQGWMnyQPAh3k2jhWM3W top))
                                             #("339"))
                                           #(ribcage #(x) #((top)) #("338"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("336"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("31o"
                                              "31n"
                                              "31m"
                                              "31l"
                                              "31k"
                                              "31j"
                                              "31i")))
                                          (hygiene guile))
                                       #{ g_hoQGWMnyQPAh3k2jhWM3V _hoQGWMnyQPAh3k2jhWM@Z}#))
                               #{tmp _hoQGWMnyQPAh3k2jhWM@X}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp _hoQGWMnyQPAh3k2jhWM@W}#)))))
                     #{tmp _hoQGWMnyQPAh3k2jhWM@R}#)
                   (let ((#{tmp _hoQGWMnyQPAh3k2jhWM@a}#
                           ($sc-dispatch
                             #{x _hoQGWMnyQPAh3k2jhWM@K}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp _hoQGWMnyQPAh3k2jhWM@a}#
                       (@apply
                         (lambda (#{x _hoQGWMnyQPAh3k2jhWM@e}#
                                  #{y _hoQGWMnyQPAh3k2jhWM@f}#)
                           (letrec*
                             ((#{f _hoQGWMnyQPAh3k2jhWM@g}#
                                (lambda (#{x* _hoQGWMnyQPAh3k2jhWM@j}#)
                                  (if (null? #{x* _hoQGWMnyQPAh3k2jhWM@j}#)
                                    (#{emit _hoQGWMnyQPAh3k2jhWM4S}#
                                      #{y _hoQGWMnyQPAh3k2jhWM@f}#)
                                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWM@k}#
                                            (list (#{emit _hoQGWMnyQPAh3k2jhWM4S}#
                                                    (car #{x* _hoQGWMnyQPAh3k2jhWM@j}#))
                                                  (#{f _hoQGWMnyQPAh3k2jhWM@g}#
                                                    (cdr #{x* _hoQGWMnyQPAh3k2jhWM@j}#)))))
                                      (let ((#{tmp _hoQGWMnyQPAh3k2jhWM@l}#
                                              ($sc-dispatch
                                                #{tmp _hoQGWMnyQPAh3k2jhWM@k}#
                                                '(any any))))
                                        (if #{tmp _hoQGWMnyQPAh3k2jhWM@l}#
                                          (@apply
                                            (lambda (#{ g_hoQGWMnyQPAh3k2jhWM3k _hoQGWMnyQPAh3k2jhWM@n}#
                                                     #{ g_hoQGWMnyQPAh3k2jhWM3j _hoQGWMnyQPAh3k2jhWM@o}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g_hoQGWMnyQPAh3k2jhWM3k}#
                                                            #{ g_hoQGWMnyQPAh3k2jhWM3j}#)
                                                          #((m_hoQGWMnyQPAh3k2jhWM3l
                                                              top)
                                                            (m_hoQGWMnyQPAh3k2jhWM3l
                                                              top))
                                                          #("33e" "33f"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("33c" "33d"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("33a" "33b"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("336"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("31o"
                                                           "31n"
                                                           "31m"
                                                           "31l"
                                                           "31k"
                                                           "31j"
                                                           "31i")))
                                                       (hygiene guile))
                                                    #{ g_hoQGWMnyQPAh3k2jhWM3k _hoQGWMnyQPAh3k2jhWM@n}#
                                                    #{ g_hoQGWMnyQPAh3k2jhWM3j _hoQGWMnyQPAh3k2jhWM@o}#))
                                            #{tmp _hoQGWMnyQPAh3k2jhWM@l}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp _hoQGWMnyQPAh3k2jhWM@k}#))))))))
                             (#{f _hoQGWMnyQPAh3k2jhWM@g}#
                               #{x _hoQGWMnyQPAh3k2jhWM@e}#)))
                         #{tmp _hoQGWMnyQPAh3k2jhWM@a}#)
                       (let ((#{tmp _hoQGWMnyQPAh3k2jhWM@p}#
                               ($sc-dispatch
                                 #{x _hoQGWMnyQPAh3k2jhWM@K}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp _hoQGWMnyQPAh3k2jhWM@p}#
                           (@apply
                             (lambda (#{x _hoQGWMnyQPAh3k2jhWM@t}#)
                               (let ((#{tmp _hoQGWMnyQPAh3k2jhWM@u}#
                                       (map #{emit _hoQGWMnyQPAh3k2jhWM4S}#
                                            #{x _hoQGWMnyQPAh3k2jhWM@t}#)))
                                 (let ((#{tmp _hoQGWMnyQPAh3k2jhWM@v}#
                                         ($sc-dispatch
                                           #{tmp _hoQGWMnyQPAh3k2jhWM@u}#
                                           'each-any)))
                                   (if #{tmp _hoQGWMnyQPAh3k2jhWM@v}#
                                     (@apply
                                       (lambda (#{ g_hoQGWMnyQPAh3k2jhWM3t _hoQGWMnyQPAh3k2jhWM@x}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g_hoQGWMnyQPAh3k2jhWM3t}#)
                                                     #((m_hoQGWMnyQPAh3k2jhWM3u
                                                         top))
                                                     #("33h"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("33g"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("336"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("31o"
                                                      "31n"
                                                      "31m"
                                                      "31l"
                                                      "31k"
                                                      "31j"
                                                      "31i")))
                                                  (hygiene guile))
                                               #{ g_hoQGWMnyQPAh3k2jhWM3t _hoQGWMnyQPAh3k2jhWM@x}#))
                                       #{tmp _hoQGWMnyQPAh3k2jhWM@v}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp _hoQGWMnyQPAh3k2jhWM@u}#)))))
                             #{tmp _hoQGWMnyQPAh3k2jhWM@p}#)
                           (let ((#{tmp _hoQGWMnyQPAh3k2jhWM@y}#
                                   ($sc-dispatch
                                     #{x _hoQGWMnyQPAh3k2jhWM@K}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp _hoQGWMnyQPAh3k2jhWM@y}#
                               (@apply
                                 (lambda (#{x _hoQGWMnyQPAh3k2jhWM@2}#)
                                   (let ((#{tmp _hoQGWMnyQPAh3k2jhWM@3}#
                                           (map #{emit _hoQGWMnyQPAh3k2jhWM4S}#
                                                #{x _hoQGWMnyQPAh3k2jhWM@2}#)))
                                     (let ((#{tmp _hoQGWMnyQPAh3k2jhWM@4}#
                                             ($sc-dispatch
                                               #{tmp _hoQGWMnyQPAh3k2jhWM@3}#
                                               'each-any)))
                                       (if #{tmp _hoQGWMnyQPAh3k2jhWM@4}#
                                         (@apply
                                           (lambda (#{ g_hoQGWMnyQPAh3k2jhWM33 _hoQGWMnyQPAh3k2jhWM@6}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g_hoQGWMnyQPAh3k2jhWM33}#)
                                                         #((m_hoQGWMnyQPAh3k2jhWM34
                                                             top))
                                                         #("33j"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("33i"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("336"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("31o"
                                                          "31n"
                                                          "31m"
                                                          "31l"
                                                          "31k"
                                                          "31j"
                                                          "31i")))
                                                      (hygiene guile))
                                                   #{ g_hoQGWMnyQPAh3k2jhWM33 _hoQGWMnyQPAh3k2jhWM@6}#))
                                           #{tmp _hoQGWMnyQPAh3k2jhWM@4}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp _hoQGWMnyQPAh3k2jhWM@3}#)))))
                                 #{tmp _hoQGWMnyQPAh3k2jhWM@y}#)
                               (let ((#{tmp _hoQGWMnyQPAh3k2jhWM@7}#
                                       ($sc-dispatch
                                         #{x _hoQGWMnyQPAh3k2jhWM@K}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp _hoQGWMnyQPAh3k2jhWM@7}#
                                   (@apply
                                     (lambda (#{x _hoQGWMnyQPAh3k2jhWM@@}#)
                                       (let ((#{tmp _hoQGWMnyQPAh3k2jhWNAA}#
                                               (#{emit _hoQGWMnyQPAh3k2jhWM4S}#
                                                 #{x _hoQGWMnyQPAh3k2jhWM@@}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g_hoQGWMnyQPAh3k2jhWM4B}#)
                                                     #((m_hoQGWMnyQPAh3k2jhWM4C
                                                         top))
                                                     #("33l"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("33k"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("336"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("31o"
                                                      "31n"
                                                      "31m"
                                                      "31l"
                                                      "31k"
                                                      "31j"
                                                      "31i")))
                                                  (hygiene guile))
                                               #{tmp _hoQGWMnyQPAh3k2jhWNAA}#)))
                                     #{tmp _hoQGWMnyQPAh3k2jhWM@7}#)
                                   (let ((#{tmp _hoQGWMnyQPAh3k2jhWNAD}#
                                           ($sc-dispatch
                                             #{x _hoQGWMnyQPAh3k2jhWM@K}#
                                             '(#(atom "value") any))))
                                     (if #{tmp _hoQGWMnyQPAh3k2jhWNAD}#
                                       (@apply
                                         (lambda (#{x _hoQGWMnyQPAh3k2jhWNAH}#)
                                           #{x _hoQGWMnyQPAh3k2jhWNAH}#)
                                         #{tmp _hoQGWMnyQPAh3k2jhWNAD}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x _hoQGWMnyQPAh3k2jhWM@K}#))))))))))))))))))
      (lambda (#{x _hoQGWMnyQPAh3k2jhWM4T}#)
        (let ((#{tmp _hoQGWMnyQPAh3k2jhWM4V}#
                ($sc-dispatch
                  #{x _hoQGWMnyQPAh3k2jhWM4T}#
                  '(_ any))))
          (if #{tmp _hoQGWMnyQPAh3k2jhWM4V}#
            (@apply
              (lambda (#{e _hoQGWMnyQPAh3k2jhWM4Z}#)
                (#{emit _hoQGWMnyQPAh3k2jhWM4S}#
                  (#{quasi _hoQGWMnyQPAh3k2jhWM4M}#
                    #{e _hoQGWMnyQPAh3k2jhWM4Z}#
                    0)))
              #{tmp _hoQGWMnyQPAh3k2jhWM4V}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x _hoQGWMnyQPAh3k2jhWM4T}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x _hoQGWMnyQPAh3k2jhWNAy}#)
      (letrec*
        ((#{read-file _hoQGWMnyQPAh3k2jhWNAz}#
           (lambda (#{fn _hoQGWMnyQPAh3k2jhWNCg}#
                    #{k _hoQGWMnyQPAh3k2jhWNCh}#)
             (let ((#{p _hoQGWMnyQPAh3k2jhWNCi}#
                     (open-input-file #{fn _hoQGWMnyQPAh3k2jhWNCg}#)))
               (letrec*
                 ((#{f _hoQGWMnyQPAh3k2jhWNCj}#
                    (lambda (#{x _hoQGWMnyQPAh3k2jhWNDZ}#
                             #{result _hoQGWMnyQPAh3k2jhWNDa}#)
                      (if (eof-object? #{x _hoQGWMnyQPAh3k2jhWNDZ}#)
                        (begin
                          (close-input-port #{p _hoQGWMnyQPAh3k2jhWNCi}#)
                          (reverse #{result _hoQGWMnyQPAh3k2jhWNDa}#))
                        (#{f _hoQGWMnyQPAh3k2jhWNCj}#
                          (read #{p _hoQGWMnyQPAh3k2jhWNCi}#)
                          (cons (datum->syntax
                                  #{k _hoQGWMnyQPAh3k2jhWNCh}#
                                  #{x _hoQGWMnyQPAh3k2jhWNDZ}#)
                                #{result _hoQGWMnyQPAh3k2jhWNDa}#))))))
                 (#{f _hoQGWMnyQPAh3k2jhWNCj}#
                   (read #{p _hoQGWMnyQPAh3k2jhWNCi}#)
                   '()))))))
        (let ((#{tmp _hoQGWMnyQPAh3k2jhWNA1}#
                ($sc-dispatch
                  #{x _hoQGWMnyQPAh3k2jhWNAy}#
                  '(any any))))
          (if #{tmp _hoQGWMnyQPAh3k2jhWNA1}#
            (@apply
              (lambda (#{k _hoQGWMnyQPAh3k2jhWNA5}#
                       #{filename _hoQGWMnyQPAh3k2jhWNA6}#)
                (let ((#{fn _hoQGWMnyQPAh3k2jhWNA7}#
                        (syntax->datum
                          #{filename _hoQGWMnyQPAh3k2jhWNA6}#)))
                  (let ((#{tmp _hoQGWMnyQPAh3k2jhWNA8}#
                          (#{read-file _hoQGWMnyQPAh3k2jhWNAz}#
                            #{fn _hoQGWMnyQPAh3k2jhWNA7}#
                            #{filename _hoQGWMnyQPAh3k2jhWNA6}#)))
                    (let ((#{tmp _hoQGWMnyQPAh3k2jhWNA9}#
                            ($sc-dispatch
                              #{tmp _hoQGWMnyQPAh3k2jhWNA8}#
                              'each-any)))
                      (if #{tmp _hoQGWMnyQPAh3k2jhWNA9}#
                        (@apply
                          (lambda (#{exp _hoQGWMnyQPAh3k2jhWNBP}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("340"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("33z"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("33x" "33y"))
                                      #(ribcage (read-file) ((top)) ("33q"))
                                      #(ribcage #(x) #((top)) #("33p")))
                                     (hygiene guile))
                                  #{exp _hoQGWMnyQPAh3k2jhWNBP}#))
                          #{tmp _hoQGWMnyQPAh3k2jhWNA9}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp _hoQGWMnyQPAh3k2jhWNA8}#))))))
              #{tmp _hoQGWMnyQPAh3k2jhWNA1}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x _hoQGWMnyQPAh3k2jhWNAy}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x _hoQGWMnyQPAh3k2jhWNDn}#)
      (let ((#{tmp _hoQGWMnyQPAh3k2jhWNDp}#
              ($sc-dispatch
                #{x _hoQGWMnyQPAh3k2jhWNDn}#
                '(any any))))
        (if #{tmp _hoQGWMnyQPAh3k2jhWNDp}#
          (@apply
            (lambda (#{k _hoQGWMnyQPAh3k2jhWNDt}#
                     #{filename _hoQGWMnyQPAh3k2jhWNDu}#)
              (let ((#{fn _hoQGWMnyQPAh3k2jhWNDv}#
                      (syntax->datum
                        #{filename _hoQGWMnyQPAh3k2jhWNDu}#)))
                (let ((#{tmp _hoQGWMnyQPAh3k2jhWNDw}#
                        (datum->syntax
                          #{filename _hoQGWMnyQPAh3k2jhWNDu}#
                          (let ((#{t _hoQGWMnyQPAh3k2jhWNDz}#
                                  (%search-load-path
                                    #{fn _hoQGWMnyQPAh3k2jhWNDv}#)))
                            (if #{t _hoQGWMnyQPAh3k2jhWNDz}#
                              #{t _hoQGWMnyQPAh3k2jhWNDz}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x _hoQGWMnyQPAh3k2jhWNDn}#
                                #{filename _hoQGWMnyQPAh3k2jhWNDu}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("345"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("344"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("342" "343"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("341")))
                           (hygiene guile))
                        #{tmp _hoQGWMnyQPAh3k2jhWNDw}#))))
            #{tmp _hoQGWMnyQPAh3k2jhWNDp}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x _hoQGWMnyQPAh3k2jhWNDn}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x _hoQGWMnyQPAh3k2jhWND7}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x _hoQGWMnyQPAh3k2jhWND7}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x _hoQGWMnyQPAh3k2jhWND9}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x _hoQGWMnyQPAh3k2jhWND9}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x _hoQGWMnyQPAh3k2jhWNEi}#)
      (let ((#{tmp _hoQGWMnyQPAh3k2jhWNEk}#
              ($sc-dispatch
                #{x _hoQGWMnyQPAh3k2jhWNEi}#
                '(_ any any . each-any))))
        (if #{tmp _hoQGWMnyQPAh3k2jhWNEk}#
          (@apply
            (lambda (#{e _hoQGWMnyQPAh3k2jhWNEo}#
                     #{m1 _hoQGWMnyQPAh3k2jhWNEp}#
                     #{m2 _hoQGWMnyQPAh3k2jhWNEq}#)
              (let ((#{tmp _hoQGWMnyQPAh3k2jhWNEr}#
                      (letrec*
                        ((#{f _hoQGWMnyQPAh3k2jhWNFV}#
                           (lambda (#{clause _hoQGWMnyQPAh3k2jhWNFY}#
                                    #{clauses _hoQGWMnyQPAh3k2jhWNFZ}#)
                             (if (null? #{clauses _hoQGWMnyQPAh3k2jhWNFZ}#)
                               (let ((#{tmp _hoQGWMnyQPAh3k2jhWNFb}#
                                       ($sc-dispatch
                                         #{clause _hoQGWMnyQPAh3k2jhWNFY}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("34e" "34f" "34g"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("34a" "34b" "34c"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("349")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp _hoQGWMnyQPAh3k2jhWNFb}#
                                   (@apply
                                     (lambda (#{e1 _hoQGWMnyQPAh3k2jhWNFf}#
                                              #{e2 _hoQGWMnyQPAh3k2jhWNFg}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("34h" "34i"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("34e" "34f" "34g"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("34a" "34b" "34c"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("349")))
                                                (hygiene guile))
                                             (cons #{e1 _hoQGWMnyQPAh3k2jhWNFf}#
                                                   #{e2 _hoQGWMnyQPAh3k2jhWNFg}#)))
                                     #{tmp _hoQGWMnyQPAh3k2jhWNFb}#)
                                   (let ((#{tmp _hoQGWMnyQPAh3k2jhWNFh}#
                                           ($sc-dispatch
                                             #{clause _hoQGWMnyQPAh3k2jhWNFY}#
                                             '(each-any any . each-any))))
                                     (if #{tmp _hoQGWMnyQPAh3k2jhWNFh}#
                                       (@apply
                                         (lambda (#{k _hoQGWMnyQPAh3k2jhWNFl}#
                                                  #{e1 _hoQGWMnyQPAh3k2jhWNFm}#
                                                  #{e2 _hoQGWMnyQPAh3k2jhWNFn}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("34j" "34k" "34l"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("34e" "34f" "34g"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("34a" "34b" "34c"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("349")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34j"
                                                               "34k"
                                                               "34l"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34e"
                                                               "34f"
                                                               "34g"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34a"
                                                               "34b"
                                                               "34c"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("349")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34j"
                                                               "34k"
                                                               "34l"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34e"
                                                               "34f"
                                                               "34g"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34a"
                                                               "34b"
                                                               "34c"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("349")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("34j"
                                                                     "34k"
                                                                     "34l"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("34e"
                                                                     "34f"
                                                                     "34g"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("34a"
                                                                     "34b"
                                                                     "34c"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("349")))
                                                                (hygiene
                                                                  guile))
                                                             #{k _hoQGWMnyQPAh3k2jhWNFl}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34j"
                                                               "34k"
                                                               "34l"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34e"
                                                               "34f"
                                                               "34g"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34a"
                                                               "34b"
                                                               "34c"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("349")))
                                                          (hygiene guile))
                                                       (cons #{e1 _hoQGWMnyQPAh3k2jhWNFm}#
                                                             #{e2 _hoQGWMnyQPAh3k2jhWNFn}#))))
                                         #{tmp _hoQGWMnyQPAh3k2jhWNFh}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x _hoQGWMnyQPAh3k2jhWNEi}#
                                         #{clause _hoQGWMnyQPAh3k2jhWNFY}#)))))
                               (let ((#{tmp _hoQGWMnyQPAh3k2jhWNFv}#
                                       (#{f _hoQGWMnyQPAh3k2jhWNFV}#
                                         (car #{clauses _hoQGWMnyQPAh3k2jhWNFZ}#)
                                         (cdr #{clauses _hoQGWMnyQPAh3k2jhWNFZ}#))))
                                 (let ((#{tmp _hoQGWMnyQPAh3k2jhWNFy}#
                                         ($sc-dispatch
                                           #{clause _hoQGWMnyQPAh3k2jhWNFY}#
                                           '(each-any any . each-any))))
                                   (if #{tmp _hoQGWMnyQPAh3k2jhWNFy}#
                                     (@apply
                                       (lambda (#{k _hoQGWMnyQPAh3k2jhWNF2}#
                                                #{e1 _hoQGWMnyQPAh3k2jhWNF3}#
                                                #{e2 _hoQGWMnyQPAh3k2jhWNF4}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("34o" "34p" "34q"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("34n"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("34e" "34f" "34g"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("34a" "34b" "34c"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("349")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("34o"
                                                             "34p"
                                                             "34q"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("34n"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("34e"
                                                             "34f"
                                                             "34g"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("34a"
                                                             "34b"
                                                             "34c"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("349")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("34o"
                                                             "34p"
                                                             "34q"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("34n"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("34e"
                                                             "34f"
                                                             "34g"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("34a"
                                                             "34b"
                                                             "34c"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("349")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("34o"
                                                                   "34p"
                                                                   "34q"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("34n"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("34e"
                                                                   "34f"
                                                                   "34g"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("34a"
                                                                   "34b"
                                                                   "34c"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("349")))
                                                              (hygiene guile))
                                                           #{k _hoQGWMnyQPAh3k2jhWNF2}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("34o"
                                                             "34p"
                                                             "34q"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("34n"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("34e"
                                                             "34f"
                                                             "34g"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("34a"
                                                             "34b"
                                                             "34c"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("349")))
                                                        (hygiene guile))
                                                     (cons #{e1 _hoQGWMnyQPAh3k2jhWNF3}#
                                                           #{e2 _hoQGWMnyQPAh3k2jhWNF4}#))
                                               #{tmp _hoQGWMnyQPAh3k2jhWNFv}#))
                                       #{tmp _hoQGWMnyQPAh3k2jhWNFy}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x _hoQGWMnyQPAh3k2jhWNEi}#
                                       #{clause _hoQGWMnyQPAh3k2jhWNFY}#))))))))
                        (#{f _hoQGWMnyQPAh3k2jhWNFV}#
                          #{m1 _hoQGWMnyQPAh3k2jhWNEp}#
                          #{m2 _hoQGWMnyQPAh3k2jhWNEq}#))))
                (let ((#{body _hoQGWMnyQPAh3k2jhWNEs}#
                        #{tmp _hoQGWMnyQPAh3k2jhWNEr}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("34d"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("34a" "34b" "34c"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("349")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("34d"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("34a" "34b" "34c"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("349")))
                                       (hygiene guile))
                                    #{e _hoQGWMnyQPAh3k2jhWNEo}#))
                        #{body _hoQGWMnyQPAh3k2jhWNEs}#))))
            #{tmp _hoQGWMnyQPAh3k2jhWNEk}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x _hoQGWMnyQPAh3k2jhWNEi}#))))))

(define make-variable-transformer
  (lambda (#{proc _hoQGWMnyQPAh3k2jhWNGH}#)
    (if (procedure? #{proc _hoQGWMnyQPAh3k2jhWNGH}#)
      (letrec*
        ((#{trans _hoQGWMnyQPAh3k2jhWNGI}#
           (lambda (#{x _hoQGWMnyQPAh3k2jhWNGO}#)
             (#{proc _hoQGWMnyQPAh3k2jhWNGH}#
               #{x _hoQGWMnyQPAh3k2jhWNGO}#))))
        (begin
          (set-procedure-property!
            #{trans _hoQGWMnyQPAh3k2jhWNGI}#
            'variable-transformer
            #t)
          #{trans _hoQGWMnyQPAh3k2jhWNGI}#))
      (error "variable transformer not a procedure"
             #{proc _hoQGWMnyQPAh3k2jhWNGH}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x _hoQGWMnyQPAh3k2jhWNGi}#)
      (let ((#{tmp _hoQGWMnyQPAh3k2jhWNGk}#
              ($sc-dispatch
                #{x _hoQGWMnyQPAh3k2jhWNGi}#
                '(_ any))))
        (if #{tmp _hoQGWMnyQPAh3k2jhWNGk}#
          (@apply
            (lambda (#{e _hoQGWMnyQPAh3k2jhWNGo}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("34w"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("34v")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("34w"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("34v")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("34w"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("34v")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("34w"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("34v")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("34w"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("34v")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("34w"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("34v")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("34w"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("34v")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("34w"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("34v")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("34w"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("34v")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("34w"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("34v")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("34w"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("34v")))
                                         (hygiene guile))
                                      #{e _hoQGWMnyQPAh3k2jhWNGo}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("34w"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("34v")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("34w"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("34v")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("34w"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("34v")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("34w"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("34v")))
                                         (hygiene guile))
                                      (cons #{e _hoQGWMnyQPAh3k2jhWNGo}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("34w"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("34v")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("34w"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("34v")))
                                                (hygiene guile)))))))))
            #{tmp _hoQGWMnyQPAh3k2jhWNGk}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWNGp}#
                  ($sc-dispatch
                    #{x _hoQGWMnyQPAh3k2jhWNGi}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("34v")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp _hoQGWMnyQPAh3k2jhWNGp}#
                  (@apply
                    (lambda (#{id _hoQGWMnyQPAh3k2jhWNGt}#
                             #{exp1 _hoQGWMnyQPAh3k2jhWNGu}#
                             #{var _hoQGWMnyQPAh3k2jhWNGv}#
                             #{val _hoQGWMnyQPAh3k2jhWNGw}#
                             #{exp2 _hoQGWMnyQPAh3k2jhWNGx}#)
                      (if (identifier? #{id _hoQGWMnyQPAh3k2jhWNGt}#)
                        (identifier? #{var _hoQGWMnyQPAh3k2jhWNGv}#)
                        #f))
                    #{tmp _hoQGWMnyQPAh3k2jhWNGp}#)
                  #f)
              (@apply
                (lambda (#{id _hoQGWMnyQPAh3k2jhWNGy}#
                         #{exp1 _hoQGWMnyQPAh3k2jhWNGz}#
                         #{var _hoQGWMnyQPAh3k2jhWNG0}#
                         #{val _hoQGWMnyQPAh3k2jhWNG1}#
                         #{exp2 _hoQGWMnyQPAh3k2jhWNG2}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("352" "353" "354" "355" "356"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("34v")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("352" "353" "354" "355" "356"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("34v")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("352" "353" "354" "355" "356"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("34v")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("352" "353" "354" "355" "356"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("34v")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("352" "353" "354" "355" "356"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("34v")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("352" "353" "354" "355" "356"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("34v")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("352" "353" "354" "355" "356"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("34v")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("352" "353" "354" "355" "356"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("34v")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("352"
                                                        "353"
                                                        "354"
                                                        "355"
                                                        "356"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("34v")))
                                                   (hygiene guile))
                                                #{var _hoQGWMnyQPAh3k2jhWNG0}#
                                                #{val _hoQGWMnyQPAh3k2jhWNG1}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("352"
                                                        "353"
                                                        "354"
                                                        "355"
                                                        "356"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("34v")))
                                                   (hygiene guile))
                                                #{exp2 _hoQGWMnyQPAh3k2jhWNG2}#))
                                    (list (cons #{id _hoQGWMnyQPAh3k2jhWNGy}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("352"
                                                         "353"
                                                         "354"
                                                         "355"
                                                         "356"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("34v")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("352"
                                                         "353"
                                                         "354"
                                                         "355"
                                                         "356"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("34v")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("352"
                                                        "353"
                                                        "354"
                                                        "355"
                                                        "356"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("34v")))
                                                   (hygiene guile))
                                                (cons #{exp1 _hoQGWMnyQPAh3k2jhWNGz}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("352"
                                                               "353"
                                                               "354"
                                                               "355"
                                                               "356"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("34v")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("352"
                                                               "353"
                                                               "354"
                                                               "355"
                                                               "356"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("34v")))
                                                          (hygiene guile))))))
                                    (list #{id _hoQGWMnyQPAh3k2jhWNGy}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("352"
                                                        "353"
                                                        "354"
                                                        "355"
                                                        "356"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("34v")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("352"
                                                              "353"
                                                              "354"
                                                              "355"
                                                              "356"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("34v")))
                                                         (hygiene guile))
                                                      #{id _hoQGWMnyQPAh3k2jhWNGy}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("352"
                                                        "353"
                                                        "354"
                                                        "355"
                                                        "356"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("34v")))
                                                   (hygiene guile))
                                                #{exp1 _hoQGWMnyQPAh3k2jhWNGz}#))))))
                #{tmp _hoQGWMnyQPAh3k2jhWNGp}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x _hoQGWMnyQPAh3k2jhWNGi}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x _hoQGWMnyQPAh3k2jhWNHN}#)
      (let ((#{tmp _hoQGWMnyQPAh3k2jhWNHP}#
              ($sc-dispatch
                #{x _hoQGWMnyQPAh3k2jhWNHN}#
                '(_ (any . any) any . each-any))))
        (if #{tmp _hoQGWMnyQPAh3k2jhWNHP}#
          (@apply
            (lambda (#{id _hoQGWMnyQPAh3k2jhWNHT}#
                     #{args _hoQGWMnyQPAh3k2jhWNHU}#
                     #{b0 _hoQGWMnyQPAh3k2jhWNHV}#
                     #{b1 _hoQGWMnyQPAh3k2jhWNHW}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("358" "359" "35a" "35b"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("357")))
                       (hygiene guile))
                    #{id _hoQGWMnyQPAh3k2jhWNHT}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("358" "359" "35a" "35b"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("357")))
                             (hygiene guile))
                          (cons #{args _hoQGWMnyQPAh3k2jhWNHU}#
                                (cons #{b0 _hoQGWMnyQPAh3k2jhWNHV}#
                                      #{b1 _hoQGWMnyQPAh3k2jhWNHW}#)))))
            #{tmp _hoQGWMnyQPAh3k2jhWNHP}#)
          (let ((#{tmp _hoQGWMnyQPAh3k2jhWNHX}#
                  ($sc-dispatch
                    #{x _hoQGWMnyQPAh3k2jhWNHN}#
                    '(_ any any))))
            (if (if #{tmp _hoQGWMnyQPAh3k2jhWNHX}#
                  (@apply
                    (lambda (#{id _hoQGWMnyQPAh3k2jhWNHb}#
                             #{val _hoQGWMnyQPAh3k2jhWNHc}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("35c" "35d"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("357")))
                           (hygiene guile))))
                    #{tmp _hoQGWMnyQPAh3k2jhWNHX}#)
                  #f)
              (@apply
                (lambda (#{id _hoQGWMnyQPAh3k2jhWNHd}#
                         #{val _hoQGWMnyQPAh3k2jhWNHe}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("35e" "35f"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("357")))
                           (hygiene guile))
                        #{id _hoQGWMnyQPAh3k2jhWNHd}#
                        #{val _hoQGWMnyQPAh3k2jhWNHe}#))
                #{tmp _hoQGWMnyQPAh3k2jhWNHX}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x _hoQGWMnyQPAh3k2jhWNHN}#))))))))

