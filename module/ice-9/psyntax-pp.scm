(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{and-map*\ 30}#
     (lambda (#{f\ 202}# #{first\ 203}# . #{rest\ 204}#)
       (let ((#{t\ 210}# (null? #{first\ 203}#)))
         (if #{t\ 210}#
           #{t\ 210}#
           (if (null? #{rest\ 204}#)
             (letrec ((#{andmap\ 214}#
                        (lambda (#{first\ 215}#)
                          (let ((#{x\ 218}# (car #{first\ 215}#))
                                (#{first\ 219}# (cdr #{first\ 215}#)))
                            (if (null? #{first\ 219}#)
                              (#{f\ 202}# #{x\ 218}#)
                              (if (#{f\ 202}# #{x\ 218}#)
                                (#{andmap\ 214}# #{first\ 219}#)
                                #f))))))
               (#{andmap\ 214}# #{first\ 203}#))
             (letrec ((#{andmap\ 225}#
                        (lambda (#{first\ 226}# #{rest\ 227}#)
                          (let ((#{x\ 232}# (car #{first\ 226}#))
                                (#{xr\ 233}# (map car #{rest\ 227}#))
                                (#{first\ 234}# (cdr #{first\ 226}#))
                                (#{rest\ 235}# (map cdr #{rest\ 227}#)))
                            (if (null? #{first\ 234}#)
                              (apply #{f\ 202}# (cons #{x\ 232}# #{xr\ 233}#))
                              (if (apply #{f\ 202}#
                                         (cons #{x\ 232}# #{xr\ 233}#))
                                (#{andmap\ 225}# #{first\ 234}# #{rest\ 235}#)
                                #f))))))
               (#{andmap\ 225}# #{first\ 203}# #{rest\ 204}#))))))))
  (letrec*
    ((#{lambda-var-list\ 497}#
       (lambda (#{vars\ 712}#)
         (letrec ((#{lvl\ 718}#
                    (lambda (#{vars\ 719}# #{ls\ 720}# #{w\ 721}#)
                      (if (pair? #{vars\ 719}#)
                        (#{lvl\ 718}#
                          (cdr #{vars\ 719}#)
                          (cons (#{wrap\ 451}#
                                  (car #{vars\ 719}#)
                                  #{w\ 721}#
                                  #f)
                                #{ls\ 720}#)
                          #{w\ 721}#)
                        (if (#{id?\ 382}# #{vars\ 719}#)
                          (cons (#{wrap\ 451}# #{vars\ 719}# #{w\ 721}# #f)
                                #{ls\ 720}#)
                          (if (null? #{vars\ 719}#)
                            #{ls\ 720}#
                            (if (#{syntax-object?\ 346}# #{vars\ 719}#)
                              (#{lvl\ 718}#
                                (#{syntax-object-expression\ 348}#
                                  #{vars\ 719}#)
                                #{ls\ 720}#
                                (#{join-wraps\ 433}#
                                  #{w\ 721}#
                                  (#{syntax-object-wrap\ 350}# #{vars\ 719}#)))
                              (cons #{vars\ 719}# #{ls\ 720}#))))))))
           (#{lvl\ 718}#
             #{vars\ 712}#
             '()
             '(())))))
     (#{gen-var\ 495}#
       (lambda (#{id\ 732}#)
         (let ((#{id\ 735}#
                 (if (#{syntax-object?\ 346}# #{id\ 732}#)
                   (#{syntax-object-expression\ 348}# #{id\ 732}#)
                   #{id\ 732}#)))
           (gensym
             (string-append (symbol->string #{id\ 735}#) " ")))))
     (#{strip\ 493}#
       (lambda (#{x\ 737}# #{w\ 738}#)
         (if (memq 'top
                   (#{wrap-marks\ 389}# #{w\ 738}#))
           #{x\ 737}#
           (letrec ((#{f\ 744}# (lambda (#{x\ 745}#)
                                  (if (#{syntax-object?\ 346}# #{x\ 745}#)
                                    (#{strip\ 493}#
                                      (#{syntax-object-expression\ 348}#
                                        #{x\ 745}#)
                                      (#{syntax-object-wrap\ 350}# #{x\ 745}#))
                                    (if (pair? #{x\ 745}#)
                                      (let ((#{a\ 752}# (#{f\ 744}# (car #{x\ 745}#)))
                                            (#{d\ 753}# (#{f\ 744}# (cdr #{x\ 745}#))))
                                        (if (if (eq? #{a\ 752}#
                                                     (car #{x\ 745}#))
                                              (eq? #{d\ 753}# (cdr #{x\ 745}#))
                                              #f)
                                          #{x\ 745}#
                                          (cons #{a\ 752}# #{d\ 753}#)))
                                      (if (vector? #{x\ 745}#)
                                        (let ((#{old\ 759}#
                                                (vector->list #{x\ 745}#)))
                                          (let ((#{new\ 761}#
                                                  (map #{f\ 744}#
                                                       #{old\ 759}#)))
                                            (if (#{and-map*\ 30}#
                                                  eq?
                                                  #{old\ 759}#
                                                  #{new\ 761}#)
                                              #{x\ 745}#
                                              (list->vector #{new\ 761}#))))
                                        #{x\ 745}#))))))
             (#{f\ 744}# #{x\ 737}#)))))
     (#{chi-lambda-case\ 491}#
       (lambda (#{e\ 763}#
                #{r\ 764}#
                #{w\ 765}#
                #{s\ 766}#
                #{mod\ 767}#
                #{get-formals\ 768}#
                #{clauses\ 769}#)
         (letrec*
           ((#{expand-body\ 784}#
              (lambda (#{req\ 785}#
                       #{opt\ 786}#
                       #{rest\ 787}#
                       #{kw\ 788}#
                       #{body\ 789}#
                       #{vars\ 790}#
                       #{r*\ 791}#
                       #{w*\ 792}#
                       #{inits\ 793}#
                       #{meta\ 794}#)
                ((lambda (#{tmp\ 805}#)
                   ((lambda (#{tmp\ 806}#)
                      (if (if #{tmp\ 806}#
                            (apply (lambda (#{docstring\ 810}#
                                            #{e1\ 811}#
                                            #{e2\ 812}#)
                                     (string?
                                       (syntax->datum #{docstring\ 810}#)))
                                   #{tmp\ 806}#)
                            #f)
                        (apply (lambda (#{docstring\ 816}#
                                        #{e1\ 817}#
                                        #{e2\ 818}#)
                                 (#{expand-body\ 784}#
                                   #{req\ 785}#
                                   #{opt\ 786}#
                                   #{rest\ 787}#
                                   #{kw\ 788}#
                                   (cons #{e1\ 817}# #{e2\ 818}#)
                                   #{vars\ 790}#
                                   #{r*\ 791}#
                                   #{w*\ 792}#
                                   #{inits\ 793}#
                                   (append
                                     #{meta\ 794}#
                                     (list (cons 'documentation
                                                 (syntax->datum
                                                   #{docstring\ 816}#))))))
                               #{tmp\ 806}#)
                        ((lambda (#{tmp\ 821}#)
                           (if #{tmp\ 821}#
                             (apply (lambda (#{k\ 826}#
                                             #{v\ 827}#
                                             #{e1\ 828}#
                                             #{e2\ 829}#)
                                      (#{expand-body\ 784}#
                                        #{req\ 785}#
                                        #{opt\ 786}#
                                        #{rest\ 787}#
                                        #{kw\ 788}#
                                        (cons #{e1\ 828}# #{e2\ 829}#)
                                        #{vars\ 790}#
                                        #{r*\ 791}#
                                        #{w*\ 792}#
                                        #{inits\ 793}#
                                        (append
                                          #{meta\ 794}#
                                          (syntax->datum
                                            (map cons
                                                 #{k\ 826}#
                                                 #{v\ 827}#)))))
                                    #{tmp\ 821}#)
                             ((lambda (#{tmp\ 833}#)
                                (if #{tmp\ 833}#
                                  (apply (lambda (#{e1\ 836}# #{e2\ 837}#)
                                           (values
                                             #{meta\ 794}#
                                             #{req\ 785}#
                                             #{opt\ 786}#
                                             #{rest\ 787}#
                                             #{kw\ 788}#
                                             #{inits\ 793}#
                                             #{vars\ 790}#
                                             (#{chi-body\ 475}#
                                               (cons #{e1\ 836}# #{e2\ 837}#)
                                               (#{source-wrap\ 453}#
                                                 #{e\ 763}#
                                                 #{w\ 765}#
                                                 #{s\ 766}#
                                                 #{mod\ 767}#)
                                               #{r*\ 791}#
                                               #{w*\ 792}#
                                               #{mod\ 767}#)))
                                         #{tmp\ 833}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{tmp\ 805}#)))
                              ($sc-dispatch
                                #{tmp\ 805}#
                                '(any . each-any)))))
                         ($sc-dispatch
                           #{tmp\ 805}#
                           '(#(vector #(each (any . any))) any . each-any)))))
                    ($sc-dispatch
                      #{tmp\ 805}#
                      '(any any . each-any))))
                 #{body\ 789}#)))
            (#{expand-kw\ 782}#
              (lambda (#{req\ 839}#
                       #{opt\ 840}#
                       #{rest\ 841}#
                       #{kw\ 842}#
                       #{body\ 843}#
                       #{vars\ 844}#
                       #{r*\ 845}#
                       #{w*\ 846}#
                       #{aok\ 847}#
                       #{out\ 848}#
                       #{inits\ 849}#)
                (if (pair? #{kw\ 842}#)
                  ((lambda (#{tmp\ 863}#)
                     ((lambda (#{tmp\ 864}#)
                        (if #{tmp\ 864}#
                          (apply (lambda (#{k\ 868}# #{id\ 869}# #{i\ 870}#)
                                   (let ((#{v\ 873}# (#{gen-var\ 495}#
                                                       #{id\ 869}#)))
                                     (let ((#{l\ 875}# (#{gen-labels\ 400}#
                                                         (list #{v\ 873}#))))
                                       (let ((#{r**\ 877}#
                                               (#{extend-var-env\ 372}#
                                                 #{l\ 875}#
                                                 (list #{v\ 873}#)
                                                 #{r*\ 845}#)))
                                         (let ((#{w**\ 879}#
                                                 (#{make-binding-wrap\ 429}#
                                                   (list #{id\ 869}#)
                                                   #{l\ 875}#
                                                   #{w*\ 846}#)))
                                           (#{expand-kw\ 782}#
                                             #{req\ 839}#
                                             #{opt\ 840}#
                                             #{rest\ 841}#
                                             (cdr #{kw\ 842}#)
                                             #{body\ 843}#
                                             (cons #{v\ 873}# #{vars\ 844}#)
                                             #{r**\ 877}#
                                             #{w**\ 879}#
                                             #{aok\ 847}#
                                             (cons (list (syntax->datum
                                                           #{k\ 868}#)
                                                         (syntax->datum
                                                           #{id\ 869}#)
                                                         #{v\ 873}#)
                                                   #{out\ 848}#)
                                             (cons (#{chi\ 467}#
                                                     #{i\ 870}#
                                                     #{r*\ 845}#
                                                     #{w*\ 846}#
                                                     #{mod\ 767}#)
                                                   #{inits\ 849}#)))))))
                                 #{tmp\ 864}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{tmp\ 863}#)))
                      ($sc-dispatch #{tmp\ 863}# (quote (any any any)))))
                   (car #{kw\ 842}#))
                  (#{expand-body\ 784}#
                    #{req\ 839}#
                    #{opt\ 840}#
                    #{rest\ 841}#
                    (if (let ((#{t\ 883}# #{aok\ 847}#))
                          (if #{t\ 883}# #{t\ 883}# (pair? #{out\ 848}#)))
                      (cons #{aok\ 847}# (reverse #{out\ 848}#))
                      #f)
                    #{body\ 843}#
                    (reverse #{vars\ 844}#)
                    #{r*\ 845}#
                    #{w*\ 846}#
                    (reverse #{inits\ 849}#)
                    '()))))
            (#{expand-opt\ 780}#
              (lambda (#{req\ 885}#
                       #{opt\ 886}#
                       #{rest\ 887}#
                       #{kw\ 888}#
                       #{body\ 889}#
                       #{vars\ 890}#
                       #{r*\ 891}#
                       #{w*\ 892}#
                       #{out\ 893}#
                       #{inits\ 894}#)
                (if (pair? #{opt\ 886}#)
                  ((lambda (#{tmp\ 907}#)
                     ((lambda (#{tmp\ 908}#)
                        (if #{tmp\ 908}#
                          (apply (lambda (#{id\ 911}# #{i\ 912}#)
                                   (let ((#{v\ 915}# (#{gen-var\ 495}#
                                                       #{id\ 911}#)))
                                     (let ((#{l\ 917}# (#{gen-labels\ 400}#
                                                         (list #{v\ 915}#))))
                                       (let ((#{r**\ 919}#
                                               (#{extend-var-env\ 372}#
                                                 #{l\ 917}#
                                                 (list #{v\ 915}#)
                                                 #{r*\ 891}#)))
                                         (let ((#{w**\ 921}#
                                                 (#{make-binding-wrap\ 429}#
                                                   (list #{id\ 911}#)
                                                   #{l\ 917}#
                                                   #{w*\ 892}#)))
                                           (#{expand-opt\ 780}#
                                             #{req\ 885}#
                                             (cdr #{opt\ 886}#)
                                             #{rest\ 887}#
                                             #{kw\ 888}#
                                             #{body\ 889}#
                                             (cons #{v\ 915}# #{vars\ 890}#)
                                             #{r**\ 919}#
                                             #{w**\ 921}#
                                             (cons (syntax->datum #{id\ 911}#)
                                                   #{out\ 893}#)
                                             (cons (#{chi\ 467}#
                                                     #{i\ 912}#
                                                     #{r*\ 891}#
                                                     #{w*\ 892}#
                                                     #{mod\ 767}#)
                                                   #{inits\ 894}#)))))))
                                 #{tmp\ 908}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{tmp\ 907}#)))
                      ($sc-dispatch #{tmp\ 907}# (quote (any any)))))
                   (car #{opt\ 886}#))
                  (if #{rest\ 887}#
                    (let ((#{v\ 926}# (#{gen-var\ 495}# #{rest\ 887}#)))
                      (let ((#{l\ 928}# (#{gen-labels\ 400}#
                                          (list #{v\ 926}#))))
                        (let ((#{r*\ 930}#
                                (#{extend-var-env\ 372}#
                                  #{l\ 928}#
                                  (list #{v\ 926}#)
                                  #{r*\ 891}#)))
                          (let ((#{w*\ 932}#
                                  (#{make-binding-wrap\ 429}#
                                    (list #{rest\ 887}#)
                                    #{l\ 928}#
                                    #{w*\ 892}#)))
                            (#{expand-kw\ 782}#
                              #{req\ 885}#
                              (if (pair? #{out\ 893}#)
                                (reverse #{out\ 893}#)
                                #f)
                              (syntax->datum #{rest\ 887}#)
                              (if (pair? #{kw\ 888}#)
                                (cdr #{kw\ 888}#)
                                #{kw\ 888}#)
                              #{body\ 889}#
                              (cons #{v\ 926}# #{vars\ 890}#)
                              #{r*\ 930}#
                              #{w*\ 932}#
                              (if (pair? #{kw\ 888}#) (car #{kw\ 888}#) #f)
                              '()
                              #{inits\ 894}#)))))
                    (#{expand-kw\ 782}#
                      #{req\ 885}#
                      (if (pair? #{out\ 893}#)
                        (reverse #{out\ 893}#)
                        #f)
                      #f
                      (if (pair? #{kw\ 888}#)
                        (cdr #{kw\ 888}#)
                        #{kw\ 888}#)
                      #{body\ 889}#
                      #{vars\ 890}#
                      #{r*\ 891}#
                      #{w*\ 892}#
                      (if (pair? #{kw\ 888}#) (car #{kw\ 888}#) #f)
                      '()
                      #{inits\ 894}#)))))
            (#{expand-req\ 778}#
              (lambda (#{req\ 934}#
                       #{opt\ 935}#
                       #{rest\ 936}#
                       #{kw\ 937}#
                       #{body\ 938}#)
                (let ((#{vars\ 946}#
                        (map #{gen-var\ 495}# #{req\ 934}#))
                      (#{labels\ 947}#
                        (#{gen-labels\ 400}# #{req\ 934}#)))
                  (let ((#{r*\ 950}#
                          (#{extend-var-env\ 372}#
                            #{labels\ 947}#
                            #{vars\ 946}#
                            #{r\ 764}#))
                        (#{w*\ 951}#
                          (#{make-binding-wrap\ 429}#
                            #{req\ 934}#
                            #{labels\ 947}#
                            #{w\ 765}#)))
                    (#{expand-opt\ 780}#
                      (map syntax->datum #{req\ 934}#)
                      #{opt\ 935}#
                      #{rest\ 936}#
                      #{kw\ 937}#
                      #{body\ 938}#
                      (reverse #{vars\ 946}#)
                      #{r*\ 950}#
                      #{w*\ 951}#
                      '()
                      '()))))))
           ((lambda (#{tmp\ 952}#)
              ((lambda (#{tmp\ 953}#)
                 (if #{tmp\ 953}#
                   (apply (lambda () (values (quote ()) #f))
                          #{tmp\ 953}#)
                   ((lambda (#{tmp\ 954}#)
                      (if #{tmp\ 954}#
                        (apply (lambda (#{args\ 961}#
                                        #{e1\ 962}#
                                        #{e2\ 963}#
                                        #{args*\ 964}#
                                        #{e1*\ 965}#
                                        #{e2*\ 966}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{get-formals\ 768}# #{args\ 961}#))
                                   (lambda (#{req\ 967}#
                                            #{opt\ 968}#
                                            #{rest\ 969}#
                                            #{kw\ 970}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{expand-req\ 778}#
                                           #{req\ 967}#
                                           #{opt\ 968}#
                                           #{rest\ 969}#
                                           #{kw\ 970}#
                                           (cons #{e1\ 962}# #{e2\ 963}#)))
                                       (lambda (#{meta\ 976}#
                                                #{req\ 977}#
                                                #{opt\ 978}#
                                                #{rest\ 979}#
                                                #{kw\ 980}#
                                                #{inits\ 981}#
                                                #{vars\ 982}#
                                                #{body\ 983}#)
                                         (call-with-values
                                           (lambda ()
                                             (#{chi-lambda-case\ 491}#
                                               #{e\ 763}#
                                               #{r\ 764}#
                                               #{w\ 765}#
                                               #{s\ 766}#
                                               #{mod\ 767}#
                                               #{get-formals\ 768}#
                                               (map (lambda (#{tmp\ 994}#
                                                             #{tmp\ 993}#
                                                             #{tmp\ 992}#)
                                                      (cons #{tmp\ 992}#
                                                            (cons #{tmp\ 993}#
                                                                  #{tmp\ 994}#)))
                                                    #{e2*\ 966}#
                                                    #{e1*\ 965}#
                                                    #{args*\ 964}#)))
                                           (lambda (#{meta*\ 996}#
                                                    #{else*\ 997}#)
                                             (values
                                               (append
                                                 #{meta\ 976}#
                                                 #{meta*\ 996}#)
                                               (#{build-lambda-case\ 328}#
                                                 #{s\ 766}#
                                                 #{req\ 977}#
                                                 #{opt\ 978}#
                                                 #{rest\ 979}#
                                                 #{kw\ 980}#
                                                 #{inits\ 981}#
                                                 #{vars\ 982}#
                                                 #{body\ 983}#
                                                 #{else*\ 997}#)))))))))
                               #{tmp\ 954}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp\ 952}#)))
                    ($sc-dispatch
                      #{tmp\ 952}#
                      '((any any . each-any)
                        .
                        #(each (any any . each-any)))))))
               ($sc-dispatch #{tmp\ 952}# (quote ()))))
            #{clauses\ 769}#))))
     (#{lambda*-formals\ 489}#
       (lambda (#{orig-args\ 1000}#)
         (letrec*
           ((#{check\ 1011}#
              (lambda (#{req\ 1012}#
                       #{opt\ 1013}#
                       #{rest\ 1014}#
                       #{kw\ 1015}#)
                (if (#{distinct-bound-ids?\ 447}#
                      (append
                        #{req\ 1012}#
                        (map car #{opt\ 1013}#)
                        (if #{rest\ 1014}#
                          (list #{rest\ 1014}#)
                          '())
                        (if (pair? #{kw\ 1015}#)
                          (map cadr (cdr #{kw\ 1015}#))
                          '())))
                  (values
                    #{req\ 1012}#
                    #{opt\ 1013}#
                    #{rest\ 1014}#
                    #{kw\ 1015}#)
                  (syntax-violation
                    'lambda*
                    "duplicate identifier in argument list"
                    #{orig-args\ 1000}#))))
            (#{rest\ 1009}#
              (lambda (#{args\ 1023}#
                       #{req\ 1024}#
                       #{opt\ 1025}#
                       #{kw\ 1026}#)
                ((lambda (#{tmp\ 1031}#)
                   ((lambda (#{tmp\ 1032}#)
                      (if (if #{tmp\ 1032}#
                            (apply (lambda (#{r\ 1034}#)
                                     (#{id?\ 382}# #{r\ 1034}#))
                                   #{tmp\ 1032}#)
                            #f)
                        (apply (lambda (#{r\ 1036}#)
                                 (#{check\ 1011}#
                                   #{req\ 1024}#
                                   #{opt\ 1025}#
                                   #{r\ 1036}#
                                   #{kw\ 1026}#))
                               #{tmp\ 1032}#)
                        ((lambda (#{else\ 1038}#)
                           (syntax-violation
                             'lambda*
                             "invalid rest argument"
                             #{orig-args\ 1000}#
                             #{args\ 1023}#))
                         #{tmp\ 1031}#)))
                    (list #{tmp\ 1031}#)))
                 #{args\ 1023}#)))
            (#{key\ 1007}#
              (lambda (#{args\ 1039}#
                       #{req\ 1040}#
                       #{opt\ 1041}#
                       #{rkey\ 1042}#)
                ((lambda (#{tmp\ 1047}#)
                   ((lambda (#{tmp\ 1048}#)
                      (if #{tmp\ 1048}#
                        (apply (lambda ()
                                 (#{check\ 1011}#
                                   #{req\ 1040}#
                                   #{opt\ 1041}#
                                   #f
                                   (cons #f (reverse #{rkey\ 1042}#))))
                               #{tmp\ 1048}#)
                        ((lambda (#{tmp\ 1049}#)
                           (if (if #{tmp\ 1049}#
                                 (apply (lambda (#{a\ 1052}# #{b\ 1053}#)
                                          (#{id?\ 382}# #{a\ 1052}#))
                                        #{tmp\ 1049}#)
                                 #f)
                             (apply (lambda (#{a\ 1056}# #{b\ 1057}#)
                                      ((lambda (#{tmp\ 1059}#)
                                         ((lambda (#{k\ 1061}#)
                                            (#{key\ 1007}#
                                              #{b\ 1057}#
                                              #{req\ 1040}#
                                              #{opt\ 1041}#
                                              (cons (cons #{k\ 1061}#
                                                          (cons #{a\ 1056}#
                                                                '(#(syntax-object
                                                                    #f
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(k)
                                                                       #((top))
                                                                       #("i1060"))
                                                                     #(ribcage
                                                                       #(a b)
                                                                       #((top)
                                                                         (top))
                                                                       #("i1054"
                                                                         "i1055"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(args
                                                                         req
                                                                         opt
                                                                         rkey)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("i1043"
                                                                         "i1044"
                                                                         "i1045"
                                                                         "i1046"))
                                                                     #(ribcage
                                                                       (check rest
                                                                              key
                                                                              opt
                                                                              req)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i1010"
                                                                        "i1008"
                                                                        "i1006"
                                                                        "i1004"
                                                                        "i1002"))
                                                                     #(ribcage
                                                                       #(orig-args)
                                                                       #((top))
                                                                       #("i1001"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         chi-lambda-case
                                                                         lambda*-formals
                                                                         chi-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         chi-void
                                                                         eval-local-transformer
                                                                         chi-local-syntax
                                                                         chi-body
                                                                         chi-macro
                                                                         chi-application
                                                                         chi-expr
                                                                         chi
                                                                         chi-top
                                                                         syntax-type
                                                                         chi-when-list
                                                                         chi-install-global
                                                                         chi-top-sequence
                                                                         chi-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         maybe-name-value!
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i496"
                                                                        "i494"
                                                                        "i492"
                                                                        "i490"
                                                                        "i488"
                                                                        "i486"
                                                                        "i484"
                                                                        "i482"
                                                                        "i480"
                                                                        "i478"
                                                                        "i476"
                                                                        "i474"
                                                                        "i472"
                                                                        "i470"
                                                                        "i468"
                                                                        "i466"
                                                                        "i464"
                                                                        "i462"
                                                                        "i460"
                                                                        "i458"
                                                                        "i456"
                                                                        "i454"
                                                                        "i452"
                                                                        "i450"
                                                                        "i448"
                                                                        "i446"
                                                                        "i444"
                                                                        "i442"
                                                                        "i440"
                                                                        "i438"
                                                                        "i436"
                                                                        "i434"
                                                                        "i432"
                                                                        "i430"
                                                                        "i428"
                                                                        "i426"
                                                                        "i425"
                                                                        "i424"
                                                                        "i422"
                                                                        "i421"
                                                                        "i420"
                                                                        "i419"
                                                                        "i418"
                                                                        "i416"
                                                                        "i414"
                                                                        "i412"
                                                                        "i410"
                                                                        "i408"
                                                                        "i406"
                                                                        "i404"
                                                                        "i402"
                                                                        "i399"
                                                                        "i397"
                                                                        "i396"
                                                                        "i395"
                                                                        "i394"
                                                                        "i393"
                                                                        "i392"
                                                                        "i390"
                                                                        "i388"
                                                                        "i386"
                                                                        "i384"
                                                                        "i383"
                                                                        "i381"
                                                                        "i379"
                                                                        "i377"
                                                                        "i375"
                                                                        "i373"
                                                                        "i371"
                                                                        "i369"
                                                                        "i368"
                                                                        "i366"
                                                                        "i364"
                                                                        "i363"
                                                                        "i362"
                                                                        "i360"
                                                                        "i359"
                                                                        "i357"
                                                                        "i355"
                                                                        "i353"
                                                                        "i351"
                                                                        "i349"
                                                                        "i347"
                                                                        "i345"
                                                                        "i343"
                                                                        "i341"
                                                                        "i339"
                                                                        "i337"
                                                                        "i335"
                                                                        "i333"
                                                                        "i331"
                                                                        "i329"
                                                                        "i327"
                                                                        "i325"
                                                                        "i323"
                                                                        "i321"
                                                                        "i319"
                                                                        "i317"
                                                                        "i315"
                                                                        "i313"
                                                                        "i311"
                                                                        "i309"
                                                                        "i307"
                                                                        "i305"
                                                                        "i303"
                                                                        "i301"
                                                                        "i299"
                                                                        "i297"
                                                                        "i295"
                                                                        "i294"
                                                                        "i292"
                                                                        "i290"
                                                                        "i288"
                                                                        "i286"
                                                                        "i284"
                                                                        "i282"
                                                                        "i280"
                                                                        "i278"
                                                                        "i276"
                                                                        "i273"
                                                                        "i271"
                                                                        "i269"
                                                                        "i267"
                                                                        "i265"
                                                                        "i263"
                                                                        "i261"
                                                                        "i259"
                                                                        "i257"
                                                                        "i255"
                                                                        "i253"
                                                                        "i251"
                                                                        "i249"
                                                                        "i247"
                                                                        "i245"
                                                                        "i243"
                                                                        "i241"
                                                                        "i239"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors
                                                                         and-map*)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i33"
                                                                        "i32"
                                                                        "i31"
                                                                        "i29")))
                                                                    (hygiene
                                                                      guile)))))
                                                    #{rkey\ 1042}#)))
                                          #{tmp\ 1059}#))
                                       (symbol->keyword
                                         (syntax->datum #{a\ 1056}#))))
                                    #{tmp\ 1049}#)
                             ((lambda (#{tmp\ 1062}#)
                                (if (if #{tmp\ 1062}#
                                      (apply (lambda (#{a\ 1066}#
                                                      #{init\ 1067}#
                                                      #{b\ 1068}#)
                                               (#{id?\ 382}# #{a\ 1066}#))
                                             #{tmp\ 1062}#)
                                      #f)
                                  (apply (lambda (#{a\ 1072}#
                                                  #{init\ 1073}#
                                                  #{b\ 1074}#)
                                           ((lambda (#{tmp\ 1076}#)
                                              ((lambda (#{k\ 1078}#)
                                                 (#{key\ 1007}#
                                                   #{b\ 1074}#
                                                   #{req\ 1040}#
                                                   #{opt\ 1041}#
                                                   (cons (list #{k\ 1078}#
                                                               #{a\ 1072}#
                                                               #{init\ 1073}#)
                                                         #{rkey\ 1042}#)))
                                               #{tmp\ 1076}#))
                                            (symbol->keyword
                                              (syntax->datum #{a\ 1072}#))))
                                         #{tmp\ 1062}#)
                                  ((lambda (#{tmp\ 1079}#)
                                     (if (if #{tmp\ 1079}#
                                           (apply (lambda (#{a\ 1084}#
                                                           #{init\ 1085}#
                                                           #{k\ 1086}#
                                                           #{b\ 1087}#)
                                                    (if (#{id?\ 382}#
                                                          #{a\ 1084}#)
                                                      (keyword?
                                                        (syntax->datum
                                                          #{k\ 1086}#))
                                                      #f))
                                                  #{tmp\ 1079}#)
                                           #f)
                                       (apply (lambda (#{a\ 1094}#
                                                       #{init\ 1095}#
                                                       #{k\ 1096}#
                                                       #{b\ 1097}#)
                                                (#{key\ 1007}#
                                                  #{b\ 1097}#
                                                  #{req\ 1040}#
                                                  #{opt\ 1041}#
                                                  (cons (list #{k\ 1096}#
                                                              #{a\ 1094}#
                                                              #{init\ 1095}#)
                                                        #{rkey\ 1042}#)))
                                              #{tmp\ 1079}#)
                                       ((lambda (#{tmp\ 1098}#)
                                          (if (if #{tmp\ 1098}#
                                                (apply (lambda (#{aok\ 1100}#)
                                                         (eq? (syntax->datum
                                                                #{aok\ 1100}#)
                                                              #:allow-other-keys))
                                                       #{tmp\ 1098}#)
                                                #f)
                                            (apply (lambda (#{aok\ 1102}#)
                                                     (#{check\ 1011}#
                                                       #{req\ 1040}#
                                                       #{opt\ 1041}#
                                                       #f
                                                       (cons #t
                                                             (reverse
                                                               #{rkey\ 1042}#))))
                                                   #{tmp\ 1098}#)
                                            ((lambda (#{tmp\ 1103}#)
                                               (if (if #{tmp\ 1103}#
                                                     (apply (lambda (#{aok\ 1107}#
                                                                     #{a\ 1108}#
                                                                     #{b\ 1109}#)
                                                              (if (eq? (syntax->datum
                                                                         #{aok\ 1107}#)
                                                                       #:allow-other-keys)
                                                                (eq? (syntax->datum
                                                                       #{a\ 1108}#)
                                                                     #:rest)
                                                                #f))
                                                            #{tmp\ 1103}#)
                                                     #f)
                                                 (apply (lambda (#{aok\ 1115}#
                                                                 #{a\ 1116}#
                                                                 #{b\ 1117}#)
                                                          (#{rest\ 1009}#
                                                            #{b\ 1117}#
                                                            #{req\ 1040}#
                                                            #{opt\ 1041}#
                                                            (cons #t
                                                                  (reverse
                                                                    #{rkey\ 1042}#))))
                                                        #{tmp\ 1103}#)
                                                 ((lambda (#{tmp\ 1118}#)
                                                    (if (if #{tmp\ 1118}#
                                                          (apply (lambda (#{aok\ 1121}#
                                                                          #{r\ 1122}#)
                                                                   (if (eq? (syntax->datum
                                                                              #{aok\ 1121}#)
                                                                            #:allow-other-keys)
                                                                     (#{id?\ 382}#
                                                                       #{r\ 1122}#)
                                                                     #f))
                                                                 #{tmp\ 1118}#)
                                                          #f)
                                                      (apply (lambda (#{aok\ 1127}#
                                                                      #{r\ 1128}#)
                                                               (#{rest\ 1009}#
                                                                 #{r\ 1128}#
                                                                 #{req\ 1040}#
                                                                 #{opt\ 1041}#
                                                                 (cons #t
                                                                       (reverse
                                                                         #{rkey\ 1042}#))))
                                                             #{tmp\ 1118}#)
                                                      ((lambda (#{tmp\ 1129}#)
                                                         (if (if #{tmp\ 1129}#
                                                               (apply (lambda (#{a\ 1132}#
                                                                               #{b\ 1133}#)
                                                                        (eq? (syntax->datum
                                                                               #{a\ 1132}#)
                                                                             #:rest))
                                                                      #{tmp\ 1129}#)
                                                               #f)
                                                           (apply (lambda (#{a\ 1136}#
                                                                           #{b\ 1137}#)
                                                                    (#{rest\ 1009}#
                                                                      #{b\ 1137}#
                                                                      #{req\ 1040}#
                                                                      #{opt\ 1041}#
                                                                      (cons #f
                                                                            (reverse
                                                                              #{rkey\ 1042}#))))
                                                                  #{tmp\ 1129}#)
                                                           ((lambda (#{tmp\ 1138}#)
                                                              (if (if #{tmp\ 1138}#
                                                                    (apply (lambda (#{r\ 1140}#)
                                                                             (#{id?\ 382}#
                                                                               #{r\ 1140}#))
                                                                           #{tmp\ 1138}#)
                                                                    #f)
                                                                (apply (lambda (#{r\ 1142}#)
                                                                         (#{rest\ 1009}#
                                                                           #{r\ 1142}#
                                                                           #{req\ 1040}#
                                                                           #{opt\ 1041}#
                                                                           (cons #f
                                                                                 (reverse
                                                                                   #{rkey\ 1042}#))))
                                                                       #{tmp\ 1138}#)
                                                                ((lambda (#{else\ 1144}#)
                                                                   (syntax-violation
                                                                     'lambda*
                                                                     "invalid keyword argument list"
                                                                     #{orig-args\ 1000}#
                                                                     #{args\ 1039}#))
                                                                 #{tmp\ 1047}#)))
                                                            (list #{tmp\ 1047}#))))
                                                       ($sc-dispatch
                                                         #{tmp\ 1047}#
                                                         '(any any)))))
                                                  ($sc-dispatch
                                                    #{tmp\ 1047}#
                                                    '(any . any)))))
                                             ($sc-dispatch
                                               #{tmp\ 1047}#
                                               '(any any any)))))
                                        ($sc-dispatch
                                          #{tmp\ 1047}#
                                          '(any)))))
                                   ($sc-dispatch
                                     #{tmp\ 1047}#
                                     '((any any any) . any)))))
                              ($sc-dispatch
                                #{tmp\ 1047}#
                                '((any any) . any)))))
                         ($sc-dispatch #{tmp\ 1047}# (quote (any . any))))))
                    ($sc-dispatch #{tmp\ 1047}# (quote ()))))
                 #{args\ 1039}#)))
            (#{opt\ 1005}#
              (lambda (#{args\ 1145}# #{req\ 1146}# #{ropt\ 1147}#)
                ((lambda (#{tmp\ 1151}#)
                   ((lambda (#{tmp\ 1152}#)
                      (if #{tmp\ 1152}#
                        (apply (lambda ()
                                 (#{check\ 1011}#
                                   #{req\ 1146}#
                                   (reverse #{ropt\ 1147}#)
                                   #f
                                   '()))
                               #{tmp\ 1152}#)
                        ((lambda (#{tmp\ 1153}#)
                           (if (if #{tmp\ 1153}#
                                 (apply (lambda (#{a\ 1156}# #{b\ 1157}#)
                                          (#{id?\ 382}# #{a\ 1156}#))
                                        #{tmp\ 1153}#)
                                 #f)
                             (apply (lambda (#{a\ 1160}# #{b\ 1161}#)
                                      (#{opt\ 1005}#
                                        #{b\ 1161}#
                                        #{req\ 1146}#
                                        (cons (cons #{a\ 1160}#
                                                    '(#(syntax-object
                                                        #f
                                                        ((top)
                                                         #(ribcage
                                                           #(a b)
                                                           #((top) (top))
                                                           #("i1158" "i1159"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(args req ropt)
                                                           #((top) (top) (top))
                                                           #("i1148"
                                                             "i1149"
                                                             "i1150"))
                                                         #(ribcage
                                                           (check rest
                                                                  key
                                                                  opt
                                                                  req)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i1010"
                                                            "i1008"
                                                            "i1006"
                                                            "i1004"
                                                            "i1002"))
                                                         #(ribcage
                                                           #(orig-args)
                                                           #((top))
                                                           #("i1001"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             chi-lambda-case
                                                             lambda*-formals
                                                             chi-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             chi-void
                                                             eval-local-transformer
                                                             chi-local-syntax
                                                             chi-body
                                                             chi-macro
                                                             chi-application
                                                             chi-expr
                                                             chi
                                                             chi-top
                                                             syntax-type
                                                             chi-when-list
                                                             chi-install-global
                                                             chi-top-sequence
                                                             chi-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             maybe-name-value!
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i496"
                                                            "i494"
                                                            "i492"
                                                            "i490"
                                                            "i488"
                                                            "i486"
                                                            "i484"
                                                            "i482"
                                                            "i480"
                                                            "i478"
                                                            "i476"
                                                            "i474"
                                                            "i472"
                                                            "i470"
                                                            "i468"
                                                            "i466"
                                                            "i464"
                                                            "i462"
                                                            "i460"
                                                            "i458"
                                                            "i456"
                                                            "i454"
                                                            "i452"
                                                            "i450"
                                                            "i448"
                                                            "i446"
                                                            "i444"
                                                            "i442"
                                                            "i440"
                                                            "i438"
                                                            "i436"
                                                            "i434"
                                                            "i432"
                                                            "i430"
                                                            "i428"
                                                            "i426"
                                                            "i425"
                                                            "i424"
                                                            "i422"
                                                            "i421"
                                                            "i420"
                                                            "i419"
                                                            "i418"
                                                            "i416"
                                                            "i414"
                                                            "i412"
                                                            "i410"
                                                            "i408"
                                                            "i406"
                                                            "i404"
                                                            "i402"
                                                            "i399"
                                                            "i397"
                                                            "i396"
                                                            "i395"
                                                            "i394"
                                                            "i393"
                                                            "i392"
                                                            "i390"
                                                            "i388"
                                                            "i386"
                                                            "i384"
                                                            "i383"
                                                            "i381"
                                                            "i379"
                                                            "i377"
                                                            "i375"
                                                            "i373"
                                                            "i371"
                                                            "i369"
                                                            "i368"
                                                            "i366"
                                                            "i364"
                                                            "i363"
                                                            "i362"
                                                            "i360"
                                                            "i359"
                                                            "i357"
                                                            "i355"
                                                            "i353"
                                                            "i351"
                                                            "i349"
                                                            "i347"
                                                            "i345"
                                                            "i343"
                                                            "i341"
                                                            "i339"
                                                            "i337"
                                                            "i335"
                                                            "i333"
                                                            "i331"
                                                            "i329"
                                                            "i327"
                                                            "i325"
                                                            "i323"
                                                            "i321"
                                                            "i319"
                                                            "i317"
                                                            "i315"
                                                            "i313"
                                                            "i311"
                                                            "i309"
                                                            "i307"
                                                            "i305"
                                                            "i303"
                                                            "i301"
                                                            "i299"
                                                            "i297"
                                                            "i295"
                                                            "i294"
                                                            "i292"
                                                            "i290"
                                                            "i288"
                                                            "i286"
                                                            "i284"
                                                            "i282"
                                                            "i280"
                                                            "i278"
                                                            "i276"
                                                            "i273"
                                                            "i271"
                                                            "i269"
                                                            "i267"
                                                            "i265"
                                                            "i263"
                                                            "i261"
                                                            "i259"
                                                            "i257"
                                                            "i255"
                                                            "i253"
                                                            "i251"
                                                            "i249"
                                                            "i247"
                                                            "i245"
                                                            "i243"
                                                            "i241"
                                                            "i239"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors
                                                             and-map*)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i33"
                                                            "i32"
                                                            "i31"
                                                            "i29")))
                                                        (hygiene guile))))
                                              #{ropt\ 1147}#)))
                                    #{tmp\ 1153}#)
                             ((lambda (#{tmp\ 1162}#)
                                (if (if #{tmp\ 1162}#
                                      (apply (lambda (#{a\ 1166}#
                                                      #{init\ 1167}#
                                                      #{b\ 1168}#)
                                               (#{id?\ 382}# #{a\ 1166}#))
                                             #{tmp\ 1162}#)
                                      #f)
                                  (apply (lambda (#{a\ 1172}#
                                                  #{init\ 1173}#
                                                  #{b\ 1174}#)
                                           (#{opt\ 1005}#
                                             #{b\ 1174}#
                                             #{req\ 1146}#
                                             (cons (list #{a\ 1172}#
                                                         #{init\ 1173}#)
                                                   #{ropt\ 1147}#)))
                                         #{tmp\ 1162}#)
                                  ((lambda (#{tmp\ 1175}#)
                                     (if (if #{tmp\ 1175}#
                                           (apply (lambda (#{a\ 1178}#
                                                           #{b\ 1179}#)
                                                    (eq? (syntax->datum
                                                           #{a\ 1178}#)
                                                         #:key))
                                                  #{tmp\ 1175}#)
                                           #f)
                                       (apply (lambda (#{a\ 1182}# #{b\ 1183}#)
                                                (#{key\ 1007}#
                                                  #{b\ 1183}#
                                                  #{req\ 1146}#
                                                  (reverse #{ropt\ 1147}#)
                                                  '()))
                                              #{tmp\ 1175}#)
                                       ((lambda (#{tmp\ 1184}#)
                                          (if (if #{tmp\ 1184}#
                                                (apply (lambda (#{a\ 1187}#
                                                                #{b\ 1188}#)
                                                         (eq? (syntax->datum
                                                                #{a\ 1187}#)
                                                              #:rest))
                                                       #{tmp\ 1184}#)
                                                #f)
                                            (apply (lambda (#{a\ 1191}#
                                                            #{b\ 1192}#)
                                                     (#{rest\ 1009}#
                                                       #{b\ 1192}#
                                                       #{req\ 1146}#
                                                       (reverse #{ropt\ 1147}#)
                                                       '()))
                                                   #{tmp\ 1184}#)
                                            ((lambda (#{tmp\ 1193}#)
                                               (if (if #{tmp\ 1193}#
                                                     (apply (lambda (#{r\ 1195}#)
                                                              (#{id?\ 382}#
                                                                #{r\ 1195}#))
                                                            #{tmp\ 1193}#)
                                                     #f)
                                                 (apply (lambda (#{r\ 1197}#)
                                                          (#{rest\ 1009}#
                                                            #{r\ 1197}#
                                                            #{req\ 1146}#
                                                            (reverse
                                                              #{ropt\ 1147}#)
                                                            '()))
                                                        #{tmp\ 1193}#)
                                                 ((lambda (#{else\ 1199}#)
                                                    (syntax-violation
                                                      'lambda*
                                                      "invalid optional argument list"
                                                      #{orig-args\ 1000}#
                                                      #{args\ 1145}#))
                                                  #{tmp\ 1151}#)))
                                             (list #{tmp\ 1151}#))))
                                        ($sc-dispatch
                                          #{tmp\ 1151}#
                                          '(any any)))))
                                   ($sc-dispatch
                                     #{tmp\ 1151}#
                                     '(any . any)))))
                              ($sc-dispatch
                                #{tmp\ 1151}#
                                '((any any) . any)))))
                         ($sc-dispatch #{tmp\ 1151}# (quote (any . any))))))
                    ($sc-dispatch #{tmp\ 1151}# (quote ()))))
                 #{args\ 1145}#)))
            (#{req\ 1003}#
              (lambda (#{args\ 1200}# #{rreq\ 1201}#)
                ((lambda (#{tmp\ 1204}#)
                   ((lambda (#{tmp\ 1205}#)
                      (if #{tmp\ 1205}#
                        (apply (lambda ()
                                 (#{check\ 1011}#
                                   (reverse #{rreq\ 1201}#)
                                   '()
                                   #f
                                   '()))
                               #{tmp\ 1205}#)
                        ((lambda (#{tmp\ 1206}#)
                           (if (if #{tmp\ 1206}#
                                 (apply (lambda (#{a\ 1209}# #{b\ 1210}#)
                                          (#{id?\ 382}# #{a\ 1209}#))
                                        #{tmp\ 1206}#)
                                 #f)
                             (apply (lambda (#{a\ 1213}# #{b\ 1214}#)
                                      (#{req\ 1003}#
                                        #{b\ 1214}#
                                        (cons #{a\ 1213}# #{rreq\ 1201}#)))
                                    #{tmp\ 1206}#)
                             ((lambda (#{tmp\ 1215}#)
                                (if (if #{tmp\ 1215}#
                                      (apply (lambda (#{a\ 1218}# #{b\ 1219}#)
                                               (eq? (syntax->datum #{a\ 1218}#)
                                                    #:optional))
                                             #{tmp\ 1215}#)
                                      #f)
                                  (apply (lambda (#{a\ 1222}# #{b\ 1223}#)
                                           (#{opt\ 1005}#
                                             #{b\ 1223}#
                                             (reverse #{rreq\ 1201}#)
                                             '()))
                                         #{tmp\ 1215}#)
                                  ((lambda (#{tmp\ 1224}#)
                                     (if (if #{tmp\ 1224}#
                                           (apply (lambda (#{a\ 1227}#
                                                           #{b\ 1228}#)
                                                    (eq? (syntax->datum
                                                           #{a\ 1227}#)
                                                         #:key))
                                                  #{tmp\ 1224}#)
                                           #f)
                                       (apply (lambda (#{a\ 1231}# #{b\ 1232}#)
                                                (#{key\ 1007}#
                                                  #{b\ 1232}#
                                                  (reverse #{rreq\ 1201}#)
                                                  '()
                                                  '()))
                                              #{tmp\ 1224}#)
                                       ((lambda (#{tmp\ 1233}#)
                                          (if (if #{tmp\ 1233}#
                                                (apply (lambda (#{a\ 1236}#
                                                                #{b\ 1237}#)
                                                         (eq? (syntax->datum
                                                                #{a\ 1236}#)
                                                              #:rest))
                                                       #{tmp\ 1233}#)
                                                #f)
                                            (apply (lambda (#{a\ 1240}#
                                                            #{b\ 1241}#)
                                                     (#{rest\ 1009}#
                                                       #{b\ 1241}#
                                                       (reverse #{rreq\ 1201}#)
                                                       '()
                                                       '()))
                                                   #{tmp\ 1233}#)
                                            ((lambda (#{tmp\ 1242}#)
                                               (if (if #{tmp\ 1242}#
                                                     (apply (lambda (#{r\ 1244}#)
                                                              (#{id?\ 382}#
                                                                #{r\ 1244}#))
                                                            #{tmp\ 1242}#)
                                                     #f)
                                                 (apply (lambda (#{r\ 1246}#)
                                                          (#{rest\ 1009}#
                                                            #{r\ 1246}#
                                                            (reverse
                                                              #{rreq\ 1201}#)
                                                            '()
                                                            '()))
                                                        #{tmp\ 1242}#)
                                                 ((lambda (#{else\ 1248}#)
                                                    (syntax-violation
                                                      'lambda*
                                                      "invalid argument list"
                                                      #{orig-args\ 1000}#
                                                      #{args\ 1200}#))
                                                  #{tmp\ 1204}#)))
                                             (list #{tmp\ 1204}#))))
                                        ($sc-dispatch
                                          #{tmp\ 1204}#
                                          '(any any)))))
                                   ($sc-dispatch
                                     #{tmp\ 1204}#
                                     '(any . any)))))
                              ($sc-dispatch
                                #{tmp\ 1204}#
                                '(any . any)))))
                         ($sc-dispatch #{tmp\ 1204}# (quote (any . any))))))
                    ($sc-dispatch #{tmp\ 1204}# (quote ()))))
                 #{args\ 1200}#))))
           (#{req\ 1003}# #{orig-args\ 1000}# (quote ())))))
     (#{chi-simple-lambda\ 487}#
       (lambda (#{e\ 1249}#
                #{r\ 1250}#
                #{w\ 1251}#
                #{s\ 1252}#
                #{mod\ 1253}#
                #{req\ 1254}#
                #{rest\ 1255}#
                #{meta\ 1256}#
                #{body\ 1257}#)
         (let ((#{ids\ 1269}#
                 (if #{rest\ 1255}#
                   (append #{req\ 1254}# (list #{rest\ 1255}#))
                   #{req\ 1254}#)))
           (let ((#{vars\ 1271}#
                   (map #{gen-var\ 495}# #{ids\ 1269}#)))
             (let ((#{labels\ 1273}#
                     (#{gen-labels\ 400}# #{ids\ 1269}#)))
               (#{build-simple-lambda\ 324}#
                 #{s\ 1252}#
                 (map syntax->datum #{req\ 1254}#)
                 (if #{rest\ 1255}#
                   (syntax->datum #{rest\ 1255}#)
                   #f)
                 #{vars\ 1271}#
                 #{meta\ 1256}#
                 (#{chi-body\ 475}#
                   #{body\ 1257}#
                   (#{source-wrap\ 453}#
                     #{e\ 1249}#
                     #{w\ 1251}#
                     #{s\ 1252}#
                     #{mod\ 1253}#)
                   (#{extend-var-env\ 372}#
                     #{labels\ 1273}#
                     #{vars\ 1271}#
                     #{r\ 1250}#)
                   (#{make-binding-wrap\ 429}#
                     #{ids\ 1269}#
                     #{labels\ 1273}#
                     #{w\ 1251}#)
                   #{mod\ 1253}#)))))))
     (#{lambda-formals\ 485}#
       (lambda (#{orig-args\ 1276}#)
         (letrec*
           ((#{check\ 1281}#
              (lambda (#{req\ 1282}# #{rest\ 1283}#)
                (if (#{distinct-bound-ids?\ 447}#
                      (if #{rest\ 1283}#
                        (cons #{rest\ 1283}# #{req\ 1282}#)
                        #{req\ 1282}#))
                  (values #{req\ 1282}# #f #{rest\ 1283}# #f)
                  (syntax-violation
                    'lambda
                    "duplicate identifier in argument list"
                    #{orig-args\ 1276}#))))
            (#{req\ 1279}#
              (lambda (#{args\ 1289}# #{rreq\ 1290}#)
                ((lambda (#{tmp\ 1293}#)
                   ((lambda (#{tmp\ 1294}#)
                      (if #{tmp\ 1294}#
                        (apply (lambda ()
                                 (#{check\ 1281}# (reverse #{rreq\ 1290}#) #f))
                               #{tmp\ 1294}#)
                        ((lambda (#{tmp\ 1295}#)
                           (if (if #{tmp\ 1295}#
                                 (apply (lambda (#{a\ 1298}# #{b\ 1299}#)
                                          (#{id?\ 382}# #{a\ 1298}#))
                                        #{tmp\ 1295}#)
                                 #f)
                             (apply (lambda (#{a\ 1302}# #{b\ 1303}#)
                                      (#{req\ 1279}#
                                        #{b\ 1303}#
                                        (cons #{a\ 1302}# #{rreq\ 1290}#)))
                                    #{tmp\ 1295}#)
                             ((lambda (#{tmp\ 1304}#)
                                (if (if #{tmp\ 1304}#
                                      (apply (lambda (#{r\ 1306}#)
                                               (#{id?\ 382}# #{r\ 1306}#))
                                             #{tmp\ 1304}#)
                                      #f)
                                  (apply (lambda (#{r\ 1308}#)
                                           (#{check\ 1281}#
                                             (reverse #{rreq\ 1290}#)
                                             #{r\ 1308}#))
                                         #{tmp\ 1304}#)
                                  ((lambda (#{else\ 1310}#)
                                     (syntax-violation
                                       'lambda
                                       "invalid argument list"
                                       #{orig-args\ 1276}#
                                       #{args\ 1289}#))
                                   #{tmp\ 1293}#)))
                              (list #{tmp\ 1293}#))))
                         ($sc-dispatch #{tmp\ 1293}# (quote (any . any))))))
                    ($sc-dispatch #{tmp\ 1293}# (quote ()))))
                 #{args\ 1289}#))))
           (#{req\ 1279}# #{orig-args\ 1276}# (quote ())))))
     (#{ellipsis?\ 483}#
       (lambda (#{x\ 1311}#)
         (if (#{nonsymbol-id?\ 380}# #{x\ 1311}#)
           (#{free-id=?\ 441}#
             #{x\ 1311}#
             '#(syntax-object
                ...
                ((top)
                 #(ribcage () () ())
                 #(ribcage () () ())
                 #(ribcage #(x) #((top)) #("i1312"))
                 #(ribcage
                   (lambda-var-list
                     gen-var
                     strip
                     chi-lambda-case
                     lambda*-formals
                     chi-simple-lambda
                     lambda-formals
                     ellipsis?
                     chi-void
                     eval-local-transformer
                     chi-local-syntax
                     chi-body
                     chi-macro
                     chi-application
                     chi-expr
                     chi
                     chi-top
                     syntax-type
                     chi-when-list
                     chi-install-global
                     chi-top-sequence
                     chi-sequence
                     source-wrap
                     wrap
                     bound-id-member?
                     distinct-bound-ids?
                     valid-bound-ids?
                     bound-id=?
                     free-id=?
                     id-var-name
                     same-marks?
                     join-marks
                     join-wraps
                     smart-append
                     make-binding-wrap
                     extend-ribcage!
                     make-empty-ribcage
                     new-mark
                     anti-mark
                     the-anti-mark
                     top-marked?
                     top-wrap
                     empty-wrap
                     set-ribcage-labels!
                     set-ribcage-marks!
                     set-ribcage-symnames!
                     ribcage-labels
                     ribcage-marks
                     ribcage-symnames
                     ribcage?
                     make-ribcage
                     gen-labels
                     gen-label
                     make-rename
                     rename-marks
                     rename-new
                     rename-old
                     subst-rename?
                     wrap-subst
                     wrap-marks
                     make-wrap
                     id-sym-name&marks
                     id-sym-name
                     id?
                     nonsymbol-id?
                     global-extend
                     lookup
                     macros-only-env
                     extend-var-env
                     extend-env
                     null-env
                     binding-value
                     binding-type
                     make-binding
                     arg-check
                     source-annotation
                     no-source
                     set-syntax-object-module!
                     set-syntax-object-wrap!
                     set-syntax-object-expression!
                     syntax-object-module
                     syntax-object-wrap
                     syntax-object-expression
                     syntax-object?
                     make-syntax-object
                     build-lexical-var
                     build-letrec
                     build-named-let
                     build-let
                     build-sequence
                     build-data
                     build-primref
                     build-lambda-case
                     build-case-lambda
                     build-simple-lambda
                     build-global-definition
                     maybe-name-value!
                     build-global-assignment
                     build-global-reference
                     analyze-variable
                     build-lexical-assignment
                     build-lexical-reference
                     build-dynlet
                     build-conditional
                     build-application
                     build-void
                     decorate-source
                     get-global-definition-hook
                     put-global-definition-hook
                     gensym-hook
                     local-eval-hook
                     top-level-eval-hook
                     fx<
                     fx=
                     fx-
                     fx+
                     set-lambda-meta!
                     lambda-meta
                     lambda?
                     make-dynlet
                     make-letrec
                     make-let
                     make-lambda-case
                     make-lambda
                     make-sequence
                     make-application
                     make-conditional
                     make-toplevel-define
                     make-toplevel-set
                     make-toplevel-ref
                     make-module-set
                     make-module-ref
                     make-lexical-set
                     make-lexical-ref
                     make-primitive-ref
                     make-const
                     make-void)
                   ((top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top))
                   ("i496"
                    "i494"
                    "i492"
                    "i490"
                    "i488"
                    "i486"
                    "i484"
                    "i482"
                    "i480"
                    "i478"
                    "i476"
                    "i474"
                    "i472"
                    "i470"
                    "i468"
                    "i466"
                    "i464"
                    "i462"
                    "i460"
                    "i458"
                    "i456"
                    "i454"
                    "i452"
                    "i450"
                    "i448"
                    "i446"
                    "i444"
                    "i442"
                    "i440"
                    "i438"
                    "i436"
                    "i434"
                    "i432"
                    "i430"
                    "i428"
                    "i426"
                    "i425"
                    "i424"
                    "i422"
                    "i421"
                    "i420"
                    "i419"
                    "i418"
                    "i416"
                    "i414"
                    "i412"
                    "i410"
                    "i408"
                    "i406"
                    "i404"
                    "i402"
                    "i399"
                    "i397"
                    "i396"
                    "i395"
                    "i394"
                    "i393"
                    "i392"
                    "i390"
                    "i388"
                    "i386"
                    "i384"
                    "i383"
                    "i381"
                    "i379"
                    "i377"
                    "i375"
                    "i373"
                    "i371"
                    "i369"
                    "i368"
                    "i366"
                    "i364"
                    "i363"
                    "i362"
                    "i360"
                    "i359"
                    "i357"
                    "i355"
                    "i353"
                    "i351"
                    "i349"
                    "i347"
                    "i345"
                    "i343"
                    "i341"
                    "i339"
                    "i337"
                    "i335"
                    "i333"
                    "i331"
                    "i329"
                    "i327"
                    "i325"
                    "i323"
                    "i321"
                    "i319"
                    "i317"
                    "i315"
                    "i313"
                    "i311"
                    "i309"
                    "i307"
                    "i305"
                    "i303"
                    "i301"
                    "i299"
                    "i297"
                    "i295"
                    "i294"
                    "i292"
                    "i290"
                    "i288"
                    "i286"
                    "i284"
                    "i282"
                    "i280"
                    "i278"
                    "i276"
                    "i273"
                    "i271"
                    "i269"
                    "i267"
                    "i265"
                    "i263"
                    "i261"
                    "i259"
                    "i257"
                    "i255"
                    "i253"
                    "i251"
                    "i249"
                    "i247"
                    "i245"
                    "i243"
                    "i241"
                    "i239"))
                 #(ribcage
                   (define-structure
                     define-expansion-accessors
                     define-expansion-constructors
                     and-map*)
                   ((top) (top) (top) (top))
                   ("i33" "i32" "i31" "i29")))
                (hygiene guile)))
           #f)))
     (#{chi-void\ 481}#
       (lambda () (#{build-void\ 302}# #f)))
     (#{eval-local-transformer\ 479}#
       (lambda (#{expanded\ 1316}# #{mod\ 1317}#)
         (let ((#{p\ 1321}#
                 (#{local-eval-hook\ 293}#
                   #{expanded\ 1316}#
                   #{mod\ 1317}#)))
           (if (procedure? #{p\ 1321}#)
             #{p\ 1321}#
             (syntax-violation
               #f
               "nonprocedure transformer"
               #{p\ 1321}#)))))
     (#{chi-local-syntax\ 477}#
       (lambda (#{rec?\ 1322}#
                #{e\ 1323}#
                #{r\ 1324}#
                #{w\ 1325}#
                #{s\ 1326}#
                #{mod\ 1327}#
                #{k\ 1328}#)
         ((lambda (#{tmp\ 1336}#)
            ((lambda (#{tmp\ 1337}#)
               (if #{tmp\ 1337}#
                 (apply (lambda (#{_\ 1343}#
                                 #{id\ 1344}#
                                 #{val\ 1345}#
                                 #{e1\ 1346}#
                                 #{e2\ 1347}#)
                          (let ((#{ids\ 1349}# #{id\ 1344}#))
                            (if (not (#{valid-bound-ids?\ 445}# #{ids\ 1349}#))
                              (syntax-violation
                                #f
                                "duplicate bound keyword"
                                #{e\ 1323}#)
                              (let ((#{labels\ 1352}#
                                      (#{gen-labels\ 400}# #{ids\ 1349}#)))
                                (let ((#{new-w\ 1354}#
                                        (#{make-binding-wrap\ 429}#
                                          #{ids\ 1349}#
                                          #{labels\ 1352}#
                                          #{w\ 1325}#)))
                                  (#{k\ 1328}#
                                    (cons #{e1\ 1346}# #{e2\ 1347}#)
                                    (#{extend-env\ 370}#
                                      #{labels\ 1352}#
                                      (let ((#{w\ 1358}#
                                              (if #{rec?\ 1322}#
                                                #{new-w\ 1354}#
                                                #{w\ 1325}#))
                                            (#{trans-r\ 1359}#
                                              (#{macros-only-env\ 374}#
                                                #{r\ 1324}#)))
                                        (map (lambda (#{x\ 1360}#)
                                               (cons 'macro
                                                     (#{eval-local-transformer\ 479}#
                                                       (#{chi\ 467}#
                                                         #{x\ 1360}#
                                                         #{trans-r\ 1359}#
                                                         #{w\ 1358}#
                                                         #{mod\ 1327}#)
                                                       #{mod\ 1327}#)))
                                             #{val\ 1345}#))
                                      #{r\ 1324}#)
                                    #{new-w\ 1354}#
                                    #{s\ 1326}#
                                    #{mod\ 1327}#))))))
                        #{tmp\ 1337}#)
                 ((lambda (#{_\ 1365}#)
                    (syntax-violation
                      #f
                      "bad local syntax definition"
                      (#{source-wrap\ 453}#
                        #{e\ 1323}#
                        #{w\ 1325}#
                        #{s\ 1326}#
                        #{mod\ 1327}#)))
                  #{tmp\ 1336}#)))
             ($sc-dispatch
               #{tmp\ 1336}#
               '(any #(each (any any)) any . each-any))))
          #{e\ 1323}#)))
     (#{chi-body\ 475}#
       (lambda (#{body\ 1366}#
                #{outer-form\ 1367}#
                #{r\ 1368}#
                #{w\ 1369}#
                #{mod\ 1370}#)
         (let ((#{r\ 1378}#
                 (cons '("placeholder" placeholder)
                       #{r\ 1368}#)))
           (let ((#{ribcage\ 1380}#
                   (#{make-ribcage\ 403}#
                     '()
                     '()
                     '())))
             (let ((#{w\ 1383}#
                     (#{make-wrap\ 387}#
                       (#{wrap-marks\ 389}# #{w\ 1369}#)
                       (cons #{ribcage\ 1380}#
                             (#{wrap-subst\ 391}# #{w\ 1369}#)))))
               (letrec ((#{parse\ 1392}#
                          (lambda (#{body\ 1393}#
                                   #{ids\ 1394}#
                                   #{labels\ 1395}#
                                   #{var-ids\ 1396}#
                                   #{vars\ 1397}#
                                   #{vals\ 1398}#
                                   #{bindings\ 1399}#)
                            (if (null? #{body\ 1393}#)
                              (syntax-violation
                                #f
                                "no expressions in body"
                                #{outer-form\ 1367}#)
                              (let ((#{e\ 1404}# (cdar #{body\ 1393}#))
                                    (#{er\ 1405}# (caar #{body\ 1393}#)))
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type\ 463}#
                                      #{e\ 1404}#
                                      #{er\ 1405}#
                                      '(())
                                      (#{source-annotation\ 361}# #{er\ 1405}#)
                                      #{ribcage\ 1380}#
                                      #{mod\ 1370}#
                                      #f))
                                  (lambda (#{type\ 1407}#
                                           #{value\ 1408}#
                                           #{e\ 1409}#
                                           #{w\ 1410}#
                                           #{s\ 1411}#
                                           #{mod\ 1412}#)
                                    (if (memv #{type\ 1407}#
                                              '(define-form))
                                      (let ((#{id\ 1422}#
                                              (#{wrap\ 451}#
                                                #{value\ 1408}#
                                                #{w\ 1410}#
                                                #{mod\ 1412}#))
                                            (#{label\ 1423}#
                                              (#{gen-label\ 398}#)))
                                        (let ((#{var\ 1425}#
                                                (#{gen-var\ 495}#
                                                  #{id\ 1422}#)))
                                          (begin
                                            (#{extend-ribcage!\ 427}#
                                              #{ribcage\ 1380}#
                                              #{id\ 1422}#
                                              #{label\ 1423}#)
                                            (#{parse\ 1392}#
                                              (cdr #{body\ 1393}#)
                                              (cons #{id\ 1422}# #{ids\ 1394}#)
                                              (cons #{label\ 1423}#
                                                    #{labels\ 1395}#)
                                              (cons #{id\ 1422}#
                                                    #{var-ids\ 1396}#)
                                              (cons #{var\ 1425}#
                                                    #{vars\ 1397}#)
                                              (cons (cons #{er\ 1405}#
                                                          (#{wrap\ 451}#
                                                            #{e\ 1409}#
                                                            #{w\ 1410}#
                                                            #{mod\ 1412}#))
                                                    #{vals\ 1398}#)
                                              (cons (cons 'lexical
                                                          #{var\ 1425}#)
                                                    #{bindings\ 1399}#)))))
                                      (if (memv #{type\ 1407}#
                                                '(define-syntax-form))
                                        (let ((#{id\ 1430}#
                                                (#{wrap\ 451}#
                                                  #{value\ 1408}#
                                                  #{w\ 1410}#
                                                  #{mod\ 1412}#))
                                              (#{label\ 1431}#
                                                (#{gen-label\ 398}#)))
                                          (begin
                                            (#{extend-ribcage!\ 427}#
                                              #{ribcage\ 1380}#
                                              #{id\ 1430}#
                                              #{label\ 1431}#)
                                            (#{parse\ 1392}#
                                              (cdr #{body\ 1393}#)
                                              (cons #{id\ 1430}# #{ids\ 1394}#)
                                              (cons #{label\ 1431}#
                                                    #{labels\ 1395}#)
                                              #{var-ids\ 1396}#
                                              #{vars\ 1397}#
                                              #{vals\ 1398}#
                                              (cons (cons 'macro
                                                          (cons #{er\ 1405}#
                                                                (#{wrap\ 451}#
                                                                  #{e\ 1409}#
                                                                  #{w\ 1410}#
                                                                  #{mod\ 1412}#)))
                                                    #{bindings\ 1399}#))))
                                        (if (memv #{type\ 1407}#
                                                  '(begin-form))
                                          ((lambda (#{tmp\ 1434}#)
                                             ((lambda (#{tmp\ 1435}#)
                                                (if #{tmp\ 1435}#
                                                  (apply (lambda (#{_\ 1438}#
                                                                  #{e1\ 1439}#)
                                                           (#{parse\ 1392}#
                                                             (letrec ((#{f\ 1442}#
                                                                        (lambda (#{forms\ 1443}#)
                                                                          (if (null? #{forms\ 1443}#)
                                                                            (cdr #{body\ 1393}#)
                                                                            (cons (cons #{er\ 1405}#
                                                                                        (#{wrap\ 451}#
                                                                                          (car #{forms\ 1443}#)
                                                                                          #{w\ 1410}#
                                                                                          #{mod\ 1412}#))
                                                                                  (#{f\ 1442}#
                                                                                    (cdr #{forms\ 1443}#)))))))
                                                               (#{f\ 1442}#
                                                                 #{e1\ 1439}#))
                                                             #{ids\ 1394}#
                                                             #{labels\ 1395}#
                                                             #{var-ids\ 1396}#
                                                             #{vars\ 1397}#
                                                             #{vals\ 1398}#
                                                             #{bindings\ 1399}#))
                                                         #{tmp\ 1435}#)
                                                  (syntax-violation
                                                    #f
                                                    "source expression failed to match any pattern"
                                                    #{tmp\ 1434}#)))
                                              ($sc-dispatch
                                                #{tmp\ 1434}#
                                                '(any . each-any))))
                                           #{e\ 1409}#)
                                          (if (memv #{type\ 1407}#
                                                    '(local-syntax-form))
                                            (#{chi-local-syntax\ 477}#
                                              #{value\ 1408}#
                                              #{e\ 1409}#
                                              #{er\ 1405}#
                                              #{w\ 1410}#
                                              #{s\ 1411}#
                                              #{mod\ 1412}#
                                              (lambda (#{forms\ 1446}#
                                                       #{er\ 1447}#
                                                       #{w\ 1448}#
                                                       #{s\ 1449}#
                                                       #{mod\ 1450}#)
                                                (#{parse\ 1392}#
                                                  (letrec ((#{f\ 1458}#
                                                             (lambda (#{forms\ 1459}#)
                                                               (if (null? #{forms\ 1459}#)
                                                                 (cdr #{body\ 1393}#)
                                                                 (cons (cons #{er\ 1447}#
                                                                             (#{wrap\ 451}#
                                                                               (car #{forms\ 1459}#)
                                                                               #{w\ 1448}#
                                                                               #{mod\ 1450}#))
                                                                       (#{f\ 1458}#
                                                                         (cdr #{forms\ 1459}#)))))))
                                                    (#{f\ 1458}#
                                                      #{forms\ 1446}#))
                                                  #{ids\ 1394}#
                                                  #{labels\ 1395}#
                                                  #{var-ids\ 1396}#
                                                  #{vars\ 1397}#
                                                  #{vals\ 1398}#
                                                  #{bindings\ 1399}#)))
                                            (if (null? #{ids\ 1394}#)
                                              (#{build-sequence\ 334}#
                                                #f
                                                (map (lambda (#{x\ 1462}#)
                                                       (#{chi\ 467}#
                                                         (cdr #{x\ 1462}#)
                                                         (car #{x\ 1462}#)
                                                         '(())
                                                         #{mod\ 1412}#))
                                                     (cons (cons #{er\ 1405}#
                                                                 (#{source-wrap\ 453}#
                                                                   #{e\ 1409}#
                                                                   #{w\ 1410}#
                                                                   #{s\ 1411}#
                                                                   #{mod\ 1412}#))
                                                           (cdr #{body\ 1393}#))))
                                              (begin
                                                (if (not (#{valid-bound-ids?\ 445}#
                                                           #{ids\ 1394}#))
                                                  (syntax-violation
                                                    #f
                                                    "invalid or duplicate identifier in definition"
                                                    #{outer-form\ 1367}#))
                                                (letrec ((#{loop\ 1469}#
                                                           (lambda (#{bs\ 1470}#
                                                                    #{er-cache\ 1471}#
                                                                    #{r-cache\ 1472}#)
                                                             (if (not (null? #{bs\ 1470}#))
                                                               (let ((#{b\ 1475}#
                                                                       (car #{bs\ 1470}#)))
                                                                 (if (eq? (car #{b\ 1475}#)
                                                                          'macro)
                                                                   (let ((#{er\ 1478}#
                                                                           (cadr #{b\ 1475}#)))
                                                                     (let ((#{r-cache\ 1480}#
                                                                             (if (eq? #{er\ 1478}#
                                                                                      #{er-cache\ 1471}#)
                                                                               #{r-cache\ 1472}#
                                                                               (#{macros-only-env\ 374}#
                                                                                 #{er\ 1478}#))))
                                                                       (begin
                                                                         (set-cdr!
                                                                           #{b\ 1475}#
                                                                           (#{eval-local-transformer\ 479}#
                                                                             (#{chi\ 467}#
                                                                               (cddr #{b\ 1475}#)
                                                                               #{r-cache\ 1480}#
                                                                               '(())
                                                                               #{mod\ 1412}#)
                                                                             #{mod\ 1412}#))
                                                                         (#{loop\ 1469}#
                                                                           (cdr #{bs\ 1470}#)
                                                                           #{er\ 1478}#
                                                                           #{r-cache\ 1480}#))))
                                                                   (#{loop\ 1469}#
                                                                     (cdr #{bs\ 1470}#)
                                                                     #{er-cache\ 1471}#
                                                                     #{r-cache\ 1472}#)))))))
                                                  (#{loop\ 1469}#
                                                    #{bindings\ 1399}#
                                                    #f
                                                    #f))
                                                (set-cdr!
                                                  #{r\ 1378}#
                                                  (#{extend-env\ 370}#
                                                    #{labels\ 1395}#
                                                    #{bindings\ 1399}#
                                                    (cdr #{r\ 1378}#)))
                                                (#{build-letrec\ 340}#
                                                  #f
                                                  #t
                                                  (map syntax->datum
                                                       #{var-ids\ 1396}#)
                                                  #{vars\ 1397}#
                                                  (map (lambda (#{x\ 1483}#)
                                                         (#{chi\ 467}#
                                                           (cdr #{x\ 1483}#)
                                                           (car #{x\ 1483}#)
                                                           '(())
                                                           #{mod\ 1412}#))
                                                       #{vals\ 1398}#)
                                                  (#{build-sequence\ 334}#
                                                    #f
                                                    (map (lambda (#{x\ 1487}#)
                                                           (#{chi\ 467}#
                                                             (cdr #{x\ 1487}#)
                                                             (car #{x\ 1487}#)
                                                             '(())
                                                             #{mod\ 1412}#))
                                                         (cons (cons #{er\ 1405}#
                                                                     (#{source-wrap\ 453}#
                                                                       #{e\ 1409}#
                                                                       #{w\ 1410}#
                                                                       #{s\ 1411}#
                                                                       #{mod\ 1412}#))
                                                               (cdr #{body\ 1393}#))))))))))))))))))
                 (#{parse\ 1392}#
                   (map (lambda (#{x\ 1400}#)
                          (cons #{r\ 1378}#
                                (#{wrap\ 451}#
                                  #{x\ 1400}#
                                  #{w\ 1383}#
                                  #{mod\ 1370}#)))
                        #{body\ 1366}#)
                   '()
                   '()
                   '()
                   '()
                   '()
                   '())))))))
     (#{chi-macro\ 473}#
       (lambda (#{p\ 1490}#
                #{e\ 1491}#
                #{r\ 1492}#
                #{w\ 1493}#
                #{s\ 1494}#
                #{rib\ 1495}#
                #{mod\ 1496}#)
         (letrec*
           ((#{rebuild-macro-output\ 1505}#
              (lambda (#{x\ 1506}# #{m\ 1507}#)
                (if (pair? #{x\ 1506}#)
                  (#{decorate-source\ 300}#
                    (cons (#{rebuild-macro-output\ 1505}#
                            (car #{x\ 1506}#)
                            #{m\ 1507}#)
                          (#{rebuild-macro-output\ 1505}#
                            (cdr #{x\ 1506}#)
                            #{m\ 1507}#))
                    #{s\ 1494}#)
                  (if (#{syntax-object?\ 346}# #{x\ 1506}#)
                    (let ((#{w\ 1515}#
                            (#{syntax-object-wrap\ 350}# #{x\ 1506}#)))
                      (let ((#{ms\ 1518}# (#{wrap-marks\ 389}# #{w\ 1515}#))
                            (#{s\ 1519}# (#{wrap-subst\ 391}# #{w\ 1515}#)))
                        (if (if (pair? #{ms\ 1518}#)
                              (eq? (car #{ms\ 1518}#) #f)
                              #f)
                          (#{make-syntax-object\ 344}#
                            (#{syntax-object-expression\ 348}# #{x\ 1506}#)
                            (#{make-wrap\ 387}#
                              (cdr #{ms\ 1518}#)
                              (if #{rib\ 1495}#
                                (cons #{rib\ 1495}# (cdr #{s\ 1519}#))
                                (cdr #{s\ 1519}#)))
                            (#{syntax-object-module\ 352}# #{x\ 1506}#))
                          (#{make-syntax-object\ 344}#
                            (#{decorate-source\ 300}#
                              (#{syntax-object-expression\ 348}# #{x\ 1506}#)
                              #{s\ 1519}#)
                            (#{make-wrap\ 387}#
                              (cons #{m\ 1507}# #{ms\ 1518}#)
                              (if #{rib\ 1495}#
                                (cons #{rib\ 1495}#
                                      (cons (quote shift) #{s\ 1519}#))
                                (cons (quote shift) #{s\ 1519}#)))
                            (#{syntax-object-module\ 352}# #{x\ 1506}#)))))
                    (if (vector? #{x\ 1506}#)
                      (let ((#{n\ 1527}# (vector-length #{x\ 1506}#)))
                        (let ((#{v\ 1529}#
                                (#{decorate-source\ 300}#
                                  (make-vector #{n\ 1527}#)
                                  #{x\ 1506}#)))
                          (letrec ((#{loop\ 1532}#
                                     (lambda (#{i\ 1533}#)
                                       (if (#{fx=\ 287}#
                                             #{i\ 1533}#
                                             #{n\ 1527}#)
                                         (begin (if #f #f) #{v\ 1529}#)
                                         (begin
                                           (vector-set!
                                             #{v\ 1529}#
                                             #{i\ 1533}#
                                             (#{rebuild-macro-output\ 1505}#
                                               (vector-ref
                                                 #{x\ 1506}#
                                                 #{i\ 1533}#)
                                               #{m\ 1507}#))
                                           (#{loop\ 1532}#
                                             (#{fx+\ 283}# #{i\ 1533}# 1)))))))
                            (#{loop\ 1532}# 0))))
                      (if (symbol? #{x\ 1506}#)
                        (syntax-violation
                          #f
                          "encountered raw symbol in macro output"
                          (#{source-wrap\ 453}#
                            #{e\ 1491}#
                            #{w\ 1493}#
                            (#{wrap-subst\ 391}# #{w\ 1493}#)
                            #{mod\ 1496}#)
                          #{x\ 1506}#)
                        (#{decorate-source\ 300}#
                          #{x\ 1506}#
                          #{s\ 1494}#))))))))
           (#{rebuild-macro-output\ 1505}#
             (#{p\ 1490}#
               (#{source-wrap\ 453}#
                 #{e\ 1491}#
                 (#{anti-mark\ 423}# #{w\ 1493}#)
                 #{s\ 1494}#
                 #{mod\ 1496}#))
             (gensym "m")))))
     (#{chi-application\ 471}#
       (lambda (#{x\ 1540}#
                #{e\ 1541}#
                #{r\ 1542}#
                #{w\ 1543}#
                #{s\ 1544}#
                #{mod\ 1545}#)
         ((lambda (#{tmp\ 1552}#)
            ((lambda (#{tmp\ 1553}#)
               (if #{tmp\ 1553}#
                 (apply (lambda (#{e0\ 1556}# #{e1\ 1557}#)
                          (#{build-application\ 304}#
                            #{s\ 1544}#
                            #{x\ 1540}#
                            (map (lambda (#{e\ 1558}#)
                                   (#{chi\ 467}#
                                     #{e\ 1558}#
                                     #{r\ 1542}#
                                     #{w\ 1543}#
                                     #{mod\ 1545}#))
                                 #{e1\ 1557}#)))
                        #{tmp\ 1553}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp\ 1552}#)))
             ($sc-dispatch
               #{tmp\ 1552}#
               '(any . each-any))))
          #{e\ 1541}#)))
     (#{chi-expr\ 469}#
       (lambda (#{type\ 1561}#
                #{value\ 1562}#
                #{e\ 1563}#
                #{r\ 1564}#
                #{w\ 1565}#
                #{s\ 1566}#
                #{mod\ 1567}#)
         (if (memv #{type\ 1561}# (quote (lexical)))
           (#{build-lexical-reference\ 310}#
             'value
             #{s\ 1566}#
             #{e\ 1563}#
             #{value\ 1562}#)
           (if (memv #{type\ 1561}# (quote (core core-form)))
             (#{value\ 1562}#
               #{e\ 1563}#
               #{r\ 1564}#
               #{w\ 1565}#
               #{s\ 1566}#
               #{mod\ 1567}#)
             (if (memv #{type\ 1561}# (quote (module-ref)))
               (call-with-values
                 (lambda ()
                   (#{value\ 1562}#
                     #{e\ 1563}#
                     #{r\ 1564}#
                     #{w\ 1565}#))
                 (lambda (#{e\ 1578}#
                          #{r\ 1579}#
                          #{w\ 1580}#
                          #{s\ 1581}#
                          #{mod\ 1582}#)
                   (#{chi\ 467}#
                     #{e\ 1578}#
                     #{r\ 1579}#
                     #{w\ 1580}#
                     #{mod\ 1582}#)))
               (if (memv #{type\ 1561}# (quote (lexical-call)))
                 (#{chi-application\ 471}#
                   (let ((#{id\ 1590}# (car #{e\ 1563}#)))
                     (#{build-lexical-reference\ 310}#
                       'fun
                       (#{source-annotation\ 361}# #{id\ 1590}#)
                       (if (#{syntax-object?\ 346}# #{id\ 1590}#)
                         (syntax->datum #{id\ 1590}#)
                         #{id\ 1590}#)
                       #{value\ 1562}#))
                   #{e\ 1563}#
                   #{r\ 1564}#
                   #{w\ 1565}#
                   #{s\ 1566}#
                   #{mod\ 1567}#)
                 (if (memv #{type\ 1561}# (quote (global-call)))
                   (#{chi-application\ 471}#
                     (#{build-global-reference\ 316}#
                       (#{source-annotation\ 361}# (car #{e\ 1563}#))
                       (if (#{syntax-object?\ 346}# #{value\ 1562}#)
                         (#{syntax-object-expression\ 348}#
                           #{value\ 1562}#)
                         #{value\ 1562}#)
                       (if (#{syntax-object?\ 346}# #{value\ 1562}#)
                         (#{syntax-object-module\ 352}# #{value\ 1562}#)
                         #{mod\ 1567}#))
                     #{e\ 1563}#
                     #{r\ 1564}#
                     #{w\ 1565}#
                     #{s\ 1566}#
                     #{mod\ 1567}#)
                   (if (memv #{type\ 1561}# (quote (constant)))
                     (#{build-data\ 332}#
                       #{s\ 1566}#
                       (#{strip\ 493}#
                         (#{source-wrap\ 453}#
                           #{e\ 1563}#
                           #{w\ 1565}#
                           #{s\ 1566}#
                           #{mod\ 1567}#)
                         '(())))
                     (if (memv #{type\ 1561}# (quote (global)))
                       (#{build-global-reference\ 316}#
                         #{s\ 1566}#
                         #{value\ 1562}#
                         #{mod\ 1567}#)
                       (if (memv #{type\ 1561}# (quote (call)))
                         (#{chi-application\ 471}#
                           (#{chi\ 467}#
                             (car #{e\ 1563}#)
                             #{r\ 1564}#
                             #{w\ 1565}#
                             #{mod\ 1567}#)
                           #{e\ 1563}#
                           #{r\ 1564}#
                           #{w\ 1565}#
                           #{s\ 1566}#
                           #{mod\ 1567}#)
                         (if (memv #{type\ 1561}# (quote (begin-form)))
                           ((lambda (#{tmp\ 1597}#)
                              ((lambda (#{tmp\ 1598}#)
                                 (if #{tmp\ 1598}#
                                   (apply (lambda (#{_\ 1602}#
                                                   #{e1\ 1603}#
                                                   #{e2\ 1604}#)
                                            (#{chi-sequence\ 455}#
                                              (cons #{e1\ 1603}# #{e2\ 1604}#)
                                              #{r\ 1564}#
                                              #{w\ 1565}#
                                              #{s\ 1566}#
                                              #{mod\ 1567}#))
                                          #{tmp\ 1598}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{tmp\ 1597}#)))
                               ($sc-dispatch
                                 #{tmp\ 1597}#
                                 '(any any . each-any))))
                            #{e\ 1563}#)
                           (if (memv #{type\ 1561}#
                                     '(local-syntax-form))
                             (#{chi-local-syntax\ 477}#
                               #{value\ 1562}#
                               #{e\ 1563}#
                               #{r\ 1564}#
                               #{w\ 1565}#
                               #{s\ 1566}#
                               #{mod\ 1567}#
                               #{chi-sequence\ 455}#)
                             (if (memv #{type\ 1561}# (quote (eval-when-form)))
                               ((lambda (#{tmp\ 1608}#)
                                  ((lambda (#{tmp\ 1609}#)
                                     (if #{tmp\ 1609}#
                                       (apply (lambda (#{_\ 1614}#
                                                       #{x\ 1615}#
                                                       #{e1\ 1616}#
                                                       #{e2\ 1617}#)
                                                (let ((#{when-list\ 1619}#
                                                        (#{chi-when-list\ 461}#
                                                          #{e\ 1563}#
                                                          #{x\ 1615}#
                                                          #{w\ 1565}#)))
                                                  (if (memq 'eval
                                                            #{when-list\ 1619}#)
                                                    (#{chi-sequence\ 455}#
                                                      (cons #{e1\ 1616}#
                                                            #{e2\ 1617}#)
                                                      #{r\ 1564}#
                                                      #{w\ 1565}#
                                                      #{s\ 1566}#
                                                      #{mod\ 1567}#)
                                                    (#{chi-void\ 481}#))))
                                              #{tmp\ 1609}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{tmp\ 1608}#)))
                                   ($sc-dispatch
                                     #{tmp\ 1608}#
                                     '(any each-any any . each-any))))
                                #{e\ 1563}#)
                               (if (memv #{type\ 1561}#
                                         '(define-form define-syntax-form))
                                 (syntax-violation
                                   #f
                                   "definition in expression context"
                                   #{e\ 1563}#
                                   (#{wrap\ 451}#
                                     #{value\ 1562}#
                                     #{w\ 1565}#
                                     #{mod\ 1567}#))
                                 (if (memv #{type\ 1561}# (quote (syntax)))
                                   (syntax-violation
                                     #f
                                     "reference to pattern variable outside syntax form"
                                     (#{source-wrap\ 453}#
                                       #{e\ 1563}#
                                       #{w\ 1565}#
                                       #{s\ 1566}#
                                       #{mod\ 1567}#))
                                   (if (memv #{type\ 1561}#
                                             '(displaced-lexical))
                                     (syntax-violation
                                       #f
                                       "reference to identifier outside its scope"
                                       (#{source-wrap\ 453}#
                                         #{e\ 1563}#
                                         #{w\ 1565}#
                                         #{s\ 1566}#
                                         #{mod\ 1567}#))
                                     (syntax-violation
                                       #f
                                       "unexpected syntax"
                                       (#{source-wrap\ 453}#
                                         #{e\ 1563}#
                                         #{w\ 1565}#
                                         #{s\ 1566}#
                                         #{mod\ 1567}#))))))))))))))))))
     (#{chi\ 467}#
       (lambda (#{e\ 1626}#
                #{r\ 1627}#
                #{w\ 1628}#
                #{mod\ 1629}#)
         (call-with-values
           (lambda ()
             (#{syntax-type\ 463}#
               #{e\ 1626}#
               #{r\ 1627}#
               #{w\ 1628}#
               (#{source-annotation\ 361}# #{e\ 1626}#)
               #f
               #{mod\ 1629}#
               #f))
           (lambda (#{type\ 1634}#
                    #{value\ 1635}#
                    #{e\ 1636}#
                    #{w\ 1637}#
                    #{s\ 1638}#
                    #{mod\ 1639}#)
             (#{chi-expr\ 469}#
               #{type\ 1634}#
               #{value\ 1635}#
               #{e\ 1636}#
               #{r\ 1627}#
               #{w\ 1637}#
               #{s\ 1638}#
               #{mod\ 1639}#)))))
     (#{chi-top\ 465}#
       (lambda (#{e\ 1646}#
                #{r\ 1647}#
                #{w\ 1648}#
                #{m\ 1649}#
                #{esew\ 1650}#
                #{mod\ 1651}#)
         (call-with-values
           (lambda ()
             (#{syntax-type\ 463}#
               #{e\ 1646}#
               #{r\ 1647}#
               #{w\ 1648}#
               (#{source-annotation\ 361}# #{e\ 1646}#)
               #f
               #{mod\ 1651}#
               #f))
           (lambda (#{type\ 1672}#
                    #{value\ 1673}#
                    #{e\ 1674}#
                    #{w\ 1675}#
                    #{s\ 1676}#
                    #{mod\ 1677}#)
             (if (memv #{type\ 1672}# (quote (begin-form)))
               ((lambda (#{tmp\ 1685}#)
                  ((lambda (#{tmp\ 1686}#)
                     (if #{tmp\ 1686}#
                       (apply (lambda (#{_\ 1688}#) (#{chi-void\ 481}#))
                              #{tmp\ 1686}#)
                       ((lambda (#{tmp\ 1689}#)
                          (if #{tmp\ 1689}#
                            (apply (lambda (#{_\ 1693}#
                                            #{e1\ 1694}#
                                            #{e2\ 1695}#)
                                     (#{chi-top-sequence\ 457}#
                                       (cons #{e1\ 1694}# #{e2\ 1695}#)
                                       #{r\ 1647}#
                                       #{w\ 1675}#
                                       #{s\ 1676}#
                                       #{m\ 1649}#
                                       #{esew\ 1650}#
                                       #{mod\ 1677}#))
                                   #{tmp\ 1689}#)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              #{tmp\ 1685}#)))
                        ($sc-dispatch
                          #{tmp\ 1685}#
                          '(any any . each-any)))))
                   ($sc-dispatch #{tmp\ 1685}# (quote (any)))))
                #{e\ 1674}#)
               (if (memv #{type\ 1672}# (quote (local-syntax-form)))
                 (#{chi-local-syntax\ 477}#
                   #{value\ 1673}#
                   #{e\ 1674}#
                   #{r\ 1647}#
                   #{w\ 1675}#
                   #{s\ 1676}#
                   #{mod\ 1677}#
                   (lambda (#{body\ 1698}#
                            #{r\ 1699}#
                            #{w\ 1700}#
                            #{s\ 1701}#
                            #{mod\ 1702}#)
                     (#{chi-top-sequence\ 457}#
                       #{body\ 1698}#
                       #{r\ 1699}#
                       #{w\ 1700}#
                       #{s\ 1701}#
                       #{m\ 1649}#
                       #{esew\ 1650}#
                       #{mod\ 1702}#)))
                 (if (memv #{type\ 1672}# (quote (eval-when-form)))
                   ((lambda (#{tmp\ 1709}#)
                      ((lambda (#{tmp\ 1710}#)
                         (if #{tmp\ 1710}#
                           (apply (lambda (#{_\ 1715}#
                                           #{x\ 1716}#
                                           #{e1\ 1717}#
                                           #{e2\ 1718}#)
                                    (let ((#{when-list\ 1721}#
                                            (#{chi-when-list\ 461}#
                                              #{e\ 1674}#
                                              #{x\ 1716}#
                                              #{w\ 1675}#))
                                          (#{body\ 1722}#
                                            (cons #{e1\ 1717}# #{e2\ 1718}#)))
                                      (if (eq? #{m\ 1649}# (quote e))
                                        (if (memq 'eval
                                                  #{when-list\ 1721}#)
                                          (#{chi-top-sequence\ 457}#
                                            #{body\ 1722}#
                                            #{r\ 1647}#
                                            #{w\ 1675}#
                                            #{s\ 1676}#
                                            (if (memq 'expand
                                                      #{when-list\ 1721}#)
                                              'c&e
                                              'e)
                                            '(eval)
                                            #{mod\ 1677}#)
                                          (begin
                                            (if (memq 'expand
                                                      #{when-list\ 1721}#)
                                              (#{top-level-eval-hook\ 291}#
                                                (#{chi-top-sequence\ 457}#
                                                  #{body\ 1722}#
                                                  #{r\ 1647}#
                                                  #{w\ 1675}#
                                                  #{s\ 1676}#
                                                  'e
                                                  '(eval)
                                                  #{mod\ 1677}#)
                                                #{mod\ 1677}#))
                                            (#{chi-void\ 481}#)))
                                        (if (memq 'load
                                                  #{when-list\ 1721}#)
                                          (if (let ((#{t\ 1731}#
                                                      (memq 'compile
                                                            #{when-list\ 1721}#)))
                                                (if #{t\ 1731}#
                                                  #{t\ 1731}#
                                                  (let ((#{t\ 1734}#
                                                          (memq 'expand
                                                                #{when-list\ 1721}#)))
                                                    (if #{t\ 1734}#
                                                      #{t\ 1734}#
                                                      (if (eq? #{m\ 1649}#
                                                               'c&e)
                                                        (memq 'eval
                                                              #{when-list\ 1721}#)
                                                        #f)))))
                                            (#{chi-top-sequence\ 457}#
                                              #{body\ 1722}#
                                              #{r\ 1647}#
                                              #{w\ 1675}#
                                              #{s\ 1676}#
                                              'c&e
                                              '(compile load)
                                              #{mod\ 1677}#)
                                            (if (memq #{m\ 1649}#
                                                      '(c c&e))
                                              (#{chi-top-sequence\ 457}#
                                                #{body\ 1722}#
                                                #{r\ 1647}#
                                                #{w\ 1675}#
                                                #{s\ 1676}#
                                                'c
                                                '(load)
                                                #{mod\ 1677}#)
                                              (#{chi-void\ 481}#)))
                                          (if (let ((#{t\ 1742}#
                                                      (memq 'compile
                                                            #{when-list\ 1721}#)))
                                                (if #{t\ 1742}#
                                                  #{t\ 1742}#
                                                  (let ((#{t\ 1745}#
                                                          (memq 'expand
                                                                #{when-list\ 1721}#)))
                                                    (if #{t\ 1745}#
                                                      #{t\ 1745}#
                                                      (if (eq? #{m\ 1649}#
                                                               'c&e)
                                                        (memq 'eval
                                                              #{when-list\ 1721}#)
                                                        #f)))))
                                            (begin
                                              (#{top-level-eval-hook\ 291}#
                                                (#{chi-top-sequence\ 457}#
                                                  #{body\ 1722}#
                                                  #{r\ 1647}#
                                                  #{w\ 1675}#
                                                  #{s\ 1676}#
                                                  'e
                                                  '(eval)
                                                  #{mod\ 1677}#)
                                                #{mod\ 1677}#)
                                              (#{chi-void\ 481}#))
                                            (#{chi-void\ 481}#))))))
                                  #{tmp\ 1710}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{tmp\ 1709}#)))
                       ($sc-dispatch
                         #{tmp\ 1709}#
                         '(any each-any any . each-any))))
                    #{e\ 1674}#)
                   (if (memv #{type\ 1672}#
                             '(define-syntax-form))
                     (let ((#{n\ 1753}#
                             (#{id-var-name\ 439}#
                               #{value\ 1673}#
                               #{w\ 1675}#))
                           (#{r\ 1754}#
                             (#{macros-only-env\ 374}# #{r\ 1647}#)))
                       (if (memv #{m\ 1649}# (quote (c)))
                         (if (memq (quote compile) #{esew\ 1650}#)
                           (let ((#{e\ 1757}#
                                   (#{chi-install-global\ 459}#
                                     #{n\ 1753}#
                                     (#{chi\ 467}#
                                       #{e\ 1674}#
                                       #{r\ 1754}#
                                       #{w\ 1675}#
                                       #{mod\ 1677}#))))
                             (begin
                               (#{top-level-eval-hook\ 291}#
                                 #{e\ 1757}#
                                 #{mod\ 1677}#)
                               (if (memq (quote load) #{esew\ 1650}#)
                                 #{e\ 1757}#
                                 (#{chi-void\ 481}#))))
                           (if (memq (quote load) #{esew\ 1650}#)
                             (#{chi-install-global\ 459}#
                               #{n\ 1753}#
                               (#{chi\ 467}#
                                 #{e\ 1674}#
                                 #{r\ 1754}#
                                 #{w\ 1675}#
                                 #{mod\ 1677}#))
                             (#{chi-void\ 481}#)))
                         (if (memv #{m\ 1649}# (quote (c&e)))
                           (let ((#{e\ 1760}#
                                   (#{chi-install-global\ 459}#
                                     #{n\ 1753}#
                                     (#{chi\ 467}#
                                       #{e\ 1674}#
                                       #{r\ 1754}#
                                       #{w\ 1675}#
                                       #{mod\ 1677}#))))
                             (begin
                               (#{top-level-eval-hook\ 291}#
                                 #{e\ 1760}#
                                 #{mod\ 1677}#)
                               #{e\ 1760}#))
                           (begin
                             (if (memq (quote eval) #{esew\ 1650}#)
                               (#{top-level-eval-hook\ 291}#
                                 (#{chi-install-global\ 459}#
                                   #{n\ 1753}#
                                   (#{chi\ 467}#
                                     #{e\ 1674}#
                                     #{r\ 1754}#
                                     #{w\ 1675}#
                                     #{mod\ 1677}#))
                                 #{mod\ 1677}#))
                             (#{chi-void\ 481}#)))))
                     (if (memv #{type\ 1672}# (quote (define-form)))
                       (let ((#{n\ 1765}#
                               (#{id-var-name\ 439}#
                                 #{value\ 1673}#
                                 #{w\ 1675}#)))
                         (let ((#{type\ 1767}#
                                 (#{binding-type\ 365}#
                                   (#{lookup\ 376}#
                                     #{n\ 1765}#
                                     #{r\ 1647}#
                                     #{mod\ 1677}#))))
                           (if (memv #{type\ 1767}#
                                     '(global core macro module-ref))
                             (begin
                               (if (if (memq #{m\ 1649}# (quote (c c&e)))
                                     (if (not (module-local-variable
                                                (current-module)
                                                #{n\ 1765}#))
                                       (current-module)
                                       #f)
                                     #f)
                                 (let ((#{old\ 1773}#
                                         (module-variable
                                           (current-module)
                                           #{n\ 1765}#)))
                                   (module-define!
                                     (current-module)
                                     #{n\ 1765}#
                                     (if (variable? #{old\ 1773}#)
                                       (variable-ref #{old\ 1773}#)
                                       #f))))
                               (let ((#{x\ 1776}#
                                       (#{build-global-definition\ 322}#
                                         #{s\ 1676}#
                                         #{n\ 1765}#
                                         (#{chi\ 467}#
                                           #{e\ 1674}#
                                           #{r\ 1647}#
                                           #{w\ 1675}#
                                           #{mod\ 1677}#))))
                                 (begin
                                   (if (eq? #{m\ 1649}# (quote c&e))
                                     (#{top-level-eval-hook\ 291}#
                                       #{x\ 1776}#
                                       #{mod\ 1677}#))
                                   #{x\ 1776}#)))
                             (if (memv #{type\ 1767}#
                                       '(displaced-lexical))
                               (syntax-violation
                                 #f
                                 "identifier out of context"
                                 #{e\ 1674}#
                                 (#{wrap\ 451}#
                                   #{value\ 1673}#
                                   #{w\ 1675}#
                                   #{mod\ 1677}#))
                               (syntax-violation
                                 #f
                                 "cannot define keyword at top level"
                                 #{e\ 1674}#
                                 (#{wrap\ 451}#
                                   #{value\ 1673}#
                                   #{w\ 1675}#
                                   #{mod\ 1677}#))))))
                       (let ((#{x\ 1782}#
                               (#{chi-expr\ 469}#
                                 #{type\ 1672}#
                                 #{value\ 1673}#
                                 #{e\ 1674}#
                                 #{r\ 1647}#
                                 #{w\ 1675}#
                                 #{s\ 1676}#
                                 #{mod\ 1677}#)))
                         (begin
                           (if (eq? #{m\ 1649}# (quote c&e))
                             (#{top-level-eval-hook\ 291}#
                               #{x\ 1782}#
                               #{mod\ 1677}#))
                           #{x\ 1782}#)))))))))))
     (#{syntax-type\ 463}#
       (lambda (#{e\ 1783}#
                #{r\ 1784}#
                #{w\ 1785}#
                #{s\ 1786}#
                #{rib\ 1787}#
                #{mod\ 1788}#
                #{for-car?\ 1789}#)
         (if (symbol? #{e\ 1783}#)
           (let ((#{n\ 1801}#
                   (#{id-var-name\ 439}# #{e\ 1783}# #{w\ 1785}#)))
             (let ((#{b\ 1803}#
                     (#{lookup\ 376}#
                       #{n\ 1801}#
                       #{r\ 1784}#
                       #{mod\ 1788}#)))
               (let ((#{type\ 1805}#
                       (#{binding-type\ 365}# #{b\ 1803}#)))
                 (if (memv #{type\ 1805}# (quote (lexical)))
                   (values
                     #{type\ 1805}#
                     (#{binding-value\ 367}# #{b\ 1803}#)
                     #{e\ 1783}#
                     #{w\ 1785}#
                     #{s\ 1786}#
                     #{mod\ 1788}#)
                   (if (memv #{type\ 1805}# (quote (global)))
                     (values
                       #{type\ 1805}#
                       #{n\ 1801}#
                       #{e\ 1783}#
                       #{w\ 1785}#
                       #{s\ 1786}#
                       #{mod\ 1788}#)
                     (if (memv #{type\ 1805}# (quote (macro)))
                       (if #{for-car?\ 1789}#
                         (values
                           #{type\ 1805}#
                           (#{binding-value\ 367}# #{b\ 1803}#)
                           #{e\ 1783}#
                           #{w\ 1785}#
                           #{s\ 1786}#
                           #{mod\ 1788}#)
                         (#{syntax-type\ 463}#
                           (#{chi-macro\ 473}#
                             (#{binding-value\ 367}# #{b\ 1803}#)
                             #{e\ 1783}#
                             #{r\ 1784}#
                             #{w\ 1785}#
                             #{s\ 1786}#
                             #{rib\ 1787}#
                             #{mod\ 1788}#)
                           #{r\ 1784}#
                           '(())
                           #{s\ 1786}#
                           #{rib\ 1787}#
                           #{mod\ 1788}#
                           #f))
                       (values
                         #{type\ 1805}#
                         (#{binding-value\ 367}# #{b\ 1803}#)
                         #{e\ 1783}#
                         #{w\ 1785}#
                         #{s\ 1786}#
                         #{mod\ 1788}#)))))))
           (if (pair? #{e\ 1783}#)
             (let ((#{first\ 1814}# (car #{e\ 1783}#)))
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 463}#
                     #{first\ 1814}#
                     #{r\ 1784}#
                     #{w\ 1785}#
                     #{s\ 1786}#
                     #{rib\ 1787}#
                     #{mod\ 1788}#
                     #t))
                 (lambda (#{ftype\ 1815}#
                          #{fval\ 1816}#
                          #{fe\ 1817}#
                          #{fw\ 1818}#
                          #{fs\ 1819}#
                          #{fmod\ 1820}#)
                   (if (memv #{ftype\ 1815}# (quote (lexical)))
                     (values
                       'lexical-call
                       #{fval\ 1816}#
                       #{e\ 1783}#
                       #{w\ 1785}#
                       #{s\ 1786}#
                       #{mod\ 1788}#)
                     (if (memv #{ftype\ 1815}# (quote (global)))
                       (values
                         'global-call
                         (#{make-syntax-object\ 344}#
                           #{fval\ 1816}#
                           #{w\ 1785}#
                           #{fmod\ 1820}#)
                         #{e\ 1783}#
                         #{w\ 1785}#
                         #{s\ 1786}#
                         #{mod\ 1788}#)
                       (if (memv #{ftype\ 1815}# (quote (macro)))
                         (#{syntax-type\ 463}#
                           (#{chi-macro\ 473}#
                             #{fval\ 1816}#
                             #{e\ 1783}#
                             #{r\ 1784}#
                             #{w\ 1785}#
                             #{s\ 1786}#
                             #{rib\ 1787}#
                             #{mod\ 1788}#)
                           #{r\ 1784}#
                           '(())
                           #{s\ 1786}#
                           #{rib\ 1787}#
                           #{mod\ 1788}#
                           #{for-car?\ 1789}#)
                         (if (memv #{ftype\ 1815}# (quote (module-ref)))
                           (call-with-values
                             (lambda ()
                               (#{fval\ 1816}#
                                 #{e\ 1783}#
                                 #{r\ 1784}#
                                 #{w\ 1785}#))
                             (lambda (#{e\ 1832}#
                                      #{r\ 1833}#
                                      #{w\ 1834}#
                                      #{s\ 1835}#
                                      #{mod\ 1836}#)
                               (#{syntax-type\ 463}#
                                 #{e\ 1832}#
                                 #{r\ 1833}#
                                 #{w\ 1834}#
                                 #{s\ 1835}#
                                 #{rib\ 1787}#
                                 #{mod\ 1836}#
                                 #{for-car?\ 1789}#)))
                           (if (memv #{ftype\ 1815}# (quote (core)))
                             (values
                               'core-form
                               #{fval\ 1816}#
                               #{e\ 1783}#
                               #{w\ 1785}#
                               #{s\ 1786}#
                               #{mod\ 1788}#)
                             (if (memv #{ftype\ 1815}# (quote (local-syntax)))
                               (values
                                 'local-syntax-form
                                 #{fval\ 1816}#
                                 #{e\ 1783}#
                                 #{w\ 1785}#
                                 #{s\ 1786}#
                                 #{mod\ 1788}#)
                               (if (memv #{ftype\ 1815}# (quote (begin)))
                                 (values
                                   'begin-form
                                   #f
                                   #{e\ 1783}#
                                   #{w\ 1785}#
                                   #{s\ 1786}#
                                   #{mod\ 1788}#)
                                 (if (memv #{ftype\ 1815}# (quote (eval-when)))
                                   (values
                                     'eval-when-form
                                     #f
                                     #{e\ 1783}#
                                     #{w\ 1785}#
                                     #{s\ 1786}#
                                     #{mod\ 1788}#)
                                   (if (memv #{ftype\ 1815}# (quote (define)))
                                     ((lambda (#{tmp\ 1847}#)
                                        ((lambda (#{tmp\ 1848}#)
                                           (if (if #{tmp\ 1848}#
                                                 (apply (lambda (#{_\ 1852}#
                                                                 #{name\ 1853}#
                                                                 #{val\ 1854}#)
                                                          (#{id?\ 382}#
                                                            #{name\ 1853}#))
                                                        #{tmp\ 1848}#)
                                                 #f)
                                             (apply (lambda (#{_\ 1858}#
                                                             #{name\ 1859}#
                                                             #{val\ 1860}#)
                                                      (values
                                                        'define-form
                                                        #{name\ 1859}#
                                                        #{val\ 1860}#
                                                        #{w\ 1785}#
                                                        #{s\ 1786}#
                                                        #{mod\ 1788}#))
                                                    #{tmp\ 1848}#)
                                             ((lambda (#{tmp\ 1861}#)
                                                (if (if #{tmp\ 1861}#
                                                      (apply (lambda (#{_\ 1867}#
                                                                      #{name\ 1868}#
                                                                      #{args\ 1869}#
                                                                      #{e1\ 1870}#
                                                                      #{e2\ 1871}#)
                                                               (if (#{id?\ 382}#
                                                                     #{name\ 1868}#)
                                                                 (#{valid-bound-ids?\ 445}#
                                                                   (#{lambda-var-list\ 497}#
                                                                     #{args\ 1869}#))
                                                                 #f))
                                                             #{tmp\ 1861}#)
                                                      #f)
                                                  (apply (lambda (#{_\ 1879}#
                                                                  #{name\ 1880}#
                                                                  #{args\ 1881}#
                                                                  #{e1\ 1882}#
                                                                  #{e2\ 1883}#)
                                                           (values
                                                             'define-form
                                                             (#{wrap\ 451}#
                                                               #{name\ 1880}#
                                                               #{w\ 1785}#
                                                               #{mod\ 1788}#)
                                                             (#{decorate-source\ 300}#
                                                               (cons '#(syntax-object
                                                                        lambda
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(_
                                                                             name
                                                                             args
                                                                             e1
                                                                             e2)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i1874"
                                                                             "i1875"
                                                                             "i1876"
                                                                             "i1877"
                                                                             "i1878"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(ftype
                                                                             fval
                                                                             fe
                                                                             fw
                                                                             fs
                                                                             fmod)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i1821"
                                                                             "i1822"
                                                                             "i1823"
                                                                             "i1824"
                                                                             "i1825"
                                                                             "i1826"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(first)
                                                                           #((top))
                                                                           #("i1813"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(e
                                                                             r
                                                                             w
                                                                             s
                                                                             rib
                                                                             mod
                                                                             for-car?)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i1790"
                                                                             "i1791"
                                                                             "i1792"
                                                                             "i1793"
                                                                             "i1794"
                                                                             "i1795"
                                                                             "i1796"))
                                                                         #(ribcage
                                                                           (lambda-var-list
                                                                             gen-var
                                                                             strip
                                                                             chi-lambda-case
                                                                             lambda*-formals
                                                                             chi-simple-lambda
                                                                             lambda-formals
                                                                             ellipsis?
                                                                             chi-void
                                                                             eval-local-transformer
                                                                             chi-local-syntax
                                                                             chi-body
                                                                             chi-macro
                                                                             chi-application
                                                                             chi-expr
                                                                             chi
                                                                             chi-top
                                                                             syntax-type
                                                                             chi-when-list
                                                                             chi-install-global
                                                                             chi-top-sequence
                                                                             chi-sequence
                                                                             source-wrap
                                                                             wrap
                                                                             bound-id-member?
                                                                             distinct-bound-ids?
                                                                             valid-bound-ids?
                                                                             bound-id=?
                                                                             free-id=?
                                                                             id-var-name
                                                                             same-marks?
                                                                             join-marks
                                                                             join-wraps
                                                                             smart-append
                                                                             make-binding-wrap
                                                                             extend-ribcage!
                                                                             make-empty-ribcage
                                                                             new-mark
                                                                             anti-mark
                                                                             the-anti-mark
                                                                             top-marked?
                                                                             top-wrap
                                                                             empty-wrap
                                                                             set-ribcage-labels!
                                                                             set-ribcage-marks!
                                                                             set-ribcage-symnames!
                                                                             ribcage-labels
                                                                             ribcage-marks
                                                                             ribcage-symnames
                                                                             ribcage?
                                                                             make-ribcage
                                                                             gen-labels
                                                                             gen-label
                                                                             make-rename
                                                                             rename-marks
                                                                             rename-new
                                                                             rename-old
                                                                             subst-rename?
                                                                             wrap-subst
                                                                             wrap-marks
                                                                             make-wrap
                                                                             id-sym-name&marks
                                                                             id-sym-name
                                                                             id?
                                                                             nonsymbol-id?
                                                                             global-extend
                                                                             lookup
                                                                             macros-only-env
                                                                             extend-var-env
                                                                             extend-env
                                                                             null-env
                                                                             binding-value
                                                                             binding-type
                                                                             make-binding
                                                                             arg-check
                                                                             source-annotation
                                                                             no-source
                                                                             set-syntax-object-module!
                                                                             set-syntax-object-wrap!
                                                                             set-syntax-object-expression!
                                                                             syntax-object-module
                                                                             syntax-object-wrap
                                                                             syntax-object-expression
                                                                             syntax-object?
                                                                             make-syntax-object
                                                                             build-lexical-var
                                                                             build-letrec
                                                                             build-named-let
                                                                             build-let
                                                                             build-sequence
                                                                             build-data
                                                                             build-primref
                                                                             build-lambda-case
                                                                             build-case-lambda
                                                                             build-simple-lambda
                                                                             build-global-definition
                                                                             maybe-name-value!
                                                                             build-global-assignment
                                                                             build-global-reference
                                                                             analyze-variable
                                                                             build-lexical-assignment
                                                                             build-lexical-reference
                                                                             build-dynlet
                                                                             build-conditional
                                                                             build-application
                                                                             build-void
                                                                             decorate-source
                                                                             get-global-definition-hook
                                                                             put-global-definition-hook
                                                                             gensym-hook
                                                                             local-eval-hook
                                                                             top-level-eval-hook
                                                                             fx<
                                                                             fx=
                                                                             fx-
                                                                             fx+
                                                                             set-lambda-meta!
                                                                             lambda-meta
                                                                             lambda?
                                                                             make-dynlet
                                                                             make-letrec
                                                                             make-let
                                                                             make-lambda-case
                                                                             make-lambda
                                                                             make-sequence
                                                                             make-application
                                                                             make-conditional
                                                                             make-toplevel-define
                                                                             make-toplevel-set
                                                                             make-toplevel-ref
                                                                             make-module-set
                                                                             make-module-ref
                                                                             make-lexical-set
                                                                             make-lexical-ref
                                                                             make-primitive-ref
                                                                             make-const
                                                                             make-void)
                                                                           ((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                           ("i496"
                                                                            "i494"
                                                                            "i492"
                                                                            "i490"
                                                                            "i488"
                                                                            "i486"
                                                                            "i484"
                                                                            "i482"
                                                                            "i480"
                                                                            "i478"
                                                                            "i476"
                                                                            "i474"
                                                                            "i472"
                                                                            "i470"
                                                                            "i468"
                                                                            "i466"
                                                                            "i464"
                                                                            "i462"
                                                                            "i460"
                                                                            "i458"
                                                                            "i456"
                                                                            "i454"
                                                                            "i452"
                                                                            "i450"
                                                                            "i448"
                                                                            "i446"
                                                                            "i444"
                                                                            "i442"
                                                                            "i440"
                                                                            "i438"
                                                                            "i436"
                                                                            "i434"
                                                                            "i432"
                                                                            "i430"
                                                                            "i428"
                                                                            "i426"
                                                                            "i425"
                                                                            "i424"
                                                                            "i422"
                                                                            "i421"
                                                                            "i420"
                                                                            "i419"
                                                                            "i418"
                                                                            "i416"
                                                                            "i414"
                                                                            "i412"
                                                                            "i410"
                                                                            "i408"
                                                                            "i406"
                                                                            "i404"
                                                                            "i402"
                                                                            "i399"
                                                                            "i397"
                                                                            "i396"
                                                                            "i395"
                                                                            "i394"
                                                                            "i393"
                                                                            "i392"
                                                                            "i390"
                                                                            "i388"
                                                                            "i386"
                                                                            "i384"
                                                                            "i383"
                                                                            "i381"
                                                                            "i379"
                                                                            "i377"
                                                                            "i375"
                                                                            "i373"
                                                                            "i371"
                                                                            "i369"
                                                                            "i368"
                                                                            "i366"
                                                                            "i364"
                                                                            "i363"
                                                                            "i362"
                                                                            "i360"
                                                                            "i359"
                                                                            "i357"
                                                                            "i355"
                                                                            "i353"
                                                                            "i351"
                                                                            "i349"
                                                                            "i347"
                                                                            "i345"
                                                                            "i343"
                                                                            "i341"
                                                                            "i339"
                                                                            "i337"
                                                                            "i335"
                                                                            "i333"
                                                                            "i331"
                                                                            "i329"
                                                                            "i327"
                                                                            "i325"
                                                                            "i323"
                                                                            "i321"
                                                                            "i319"
                                                                            "i317"
                                                                            "i315"
                                                                            "i313"
                                                                            "i311"
                                                                            "i309"
                                                                            "i307"
                                                                            "i305"
                                                                            "i303"
                                                                            "i301"
                                                                            "i299"
                                                                            "i297"
                                                                            "i295"
                                                                            "i294"
                                                                            "i292"
                                                                            "i290"
                                                                            "i288"
                                                                            "i286"
                                                                            "i284"
                                                                            "i282"
                                                                            "i280"
                                                                            "i278"
                                                                            "i276"
                                                                            "i273"
                                                                            "i271"
                                                                            "i269"
                                                                            "i267"
                                                                            "i265"
                                                                            "i263"
                                                                            "i261"
                                                                            "i259"
                                                                            "i257"
                                                                            "i255"
                                                                            "i253"
                                                                            "i251"
                                                                            "i249"
                                                                            "i247"
                                                                            "i245"
                                                                            "i243"
                                                                            "i241"
                                                                            "i239"))
                                                                         #(ribcage
                                                                           (define-structure
                                                                             define-expansion-accessors
                                                                             define-expansion-constructors
                                                                             and-map*)
                                                                           ((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                           ("i33"
                                                                            "i32"
                                                                            "i31"
                                                                            "i29")))
                                                                        (hygiene
                                                                          guile))
                                                                     (#{wrap\ 451}#
                                                                       (cons #{args\ 1881}#
                                                                             (cons #{e1\ 1882}#
                                                                                   #{e2\ 1883}#))
                                                                       #{w\ 1785}#
                                                                       #{mod\ 1788}#))
                                                               #{s\ 1786}#)
                                                             '(())
                                                             #{s\ 1786}#
                                                             #{mod\ 1788}#))
                                                         #{tmp\ 1861}#)
                                                  ((lambda (#{tmp\ 1886}#)
                                                     (if (if #{tmp\ 1886}#
                                                           (apply (lambda (#{_\ 1889}#
                                                                           #{name\ 1890}#)
                                                                    (#{id?\ 382}#
                                                                      #{name\ 1890}#))
                                                                  #{tmp\ 1886}#)
                                                           #f)
                                                       (apply (lambda (#{_\ 1893}#
                                                                       #{name\ 1894}#)
                                                                (values
                                                                  'define-form
                                                                  (#{wrap\ 451}#
                                                                    #{name\ 1894}#
                                                                    #{w\ 1785}#
                                                                    #{mod\ 1788}#)
                                                                  '(#(syntax-object
                                                                      if
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(_
                                                                           name)
                                                                         #((top)
                                                                           (top))
                                                                         #("i1891"
                                                                           "i1892"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(ftype
                                                                           fval
                                                                           fe
                                                                           fw
                                                                           fs
                                                                           fmod)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i1821"
                                                                           "i1822"
                                                                           "i1823"
                                                                           "i1824"
                                                                           "i1825"
                                                                           "i1826"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(first)
                                                                         #((top))
                                                                         #("i1813"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(e
                                                                           r
                                                                           w
                                                                           s
                                                                           rib
                                                                           mod
                                                                           for-car?)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i1790"
                                                                           "i1791"
                                                                           "i1792"
                                                                           "i1793"
                                                                           "i1794"
                                                                           "i1795"
                                                                           "i1796"))
                                                                       #(ribcage
                                                                         (lambda-var-list
                                                                           gen-var
                                                                           strip
                                                                           chi-lambda-case
                                                                           lambda*-formals
                                                                           chi-simple-lambda
                                                                           lambda-formals
                                                                           ellipsis?
                                                                           chi-void
                                                                           eval-local-transformer
                                                                           chi-local-syntax
                                                                           chi-body
                                                                           chi-macro
                                                                           chi-application
                                                                           chi-expr
                                                                           chi
                                                                           chi-top
                                                                           syntax-type
                                                                           chi-when-list
                                                                           chi-install-global
                                                                           chi-top-sequence
                                                                           chi-sequence
                                                                           source-wrap
                                                                           wrap
                                                                           bound-id-member?
                                                                           distinct-bound-ids?
                                                                           valid-bound-ids?
                                                                           bound-id=?
                                                                           free-id=?
                                                                           id-var-name
                                                                           same-marks?
                                                                           join-marks
                                                                           join-wraps
                                                                           smart-append
                                                                           make-binding-wrap
                                                                           extend-ribcage!
                                                                           make-empty-ribcage
                                                                           new-mark
                                                                           anti-mark
                                                                           the-anti-mark
                                                                           top-marked?
                                                                           top-wrap
                                                                           empty-wrap
                                                                           set-ribcage-labels!
                                                                           set-ribcage-marks!
                                                                           set-ribcage-symnames!
                                                                           ribcage-labels
                                                                           ribcage-marks
                                                                           ribcage-symnames
                                                                           ribcage?
                                                                           make-ribcage
                                                                           gen-labels
                                                                           gen-label
                                                                           make-rename
                                                                           rename-marks
                                                                           rename-new
                                                                           rename-old
                                                                           subst-rename?
                                                                           wrap-subst
                                                                           wrap-marks
                                                                           make-wrap
                                                                           id-sym-name&marks
                                                                           id-sym-name
                                                                           id?
                                                                           nonsymbol-id?
                                                                           global-extend
                                                                           lookup
                                                                           macros-only-env
                                                                           extend-var-env
                                                                           extend-env
                                                                           null-env
                                                                           binding-value
                                                                           binding-type
                                                                           make-binding
                                                                           arg-check
                                                                           source-annotation
                                                                           no-source
                                                                           set-syntax-object-module!
                                                                           set-syntax-object-wrap!
                                                                           set-syntax-object-expression!
                                                                           syntax-object-module
                                                                           syntax-object-wrap
                                                                           syntax-object-expression
                                                                           syntax-object?
                                                                           make-syntax-object
                                                                           build-lexical-var
                                                                           build-letrec
                                                                           build-named-let
                                                                           build-let
                                                                           build-sequence
                                                                           build-data
                                                                           build-primref
                                                                           build-lambda-case
                                                                           build-case-lambda
                                                                           build-simple-lambda
                                                                           build-global-definition
                                                                           maybe-name-value!
                                                                           build-global-assignment
                                                                           build-global-reference
                                                                           analyze-variable
                                                                           build-lexical-assignment
                                                                           build-lexical-reference
                                                                           build-dynlet
                                                                           build-conditional
                                                                           build-application
                                                                           build-void
                                                                           decorate-source
                                                                           get-global-definition-hook
                                                                           put-global-definition-hook
                                                                           gensym-hook
                                                                           local-eval-hook
                                                                           top-level-eval-hook
                                                                           fx<
                                                                           fx=
                                                                           fx-
                                                                           fx+
                                                                           set-lambda-meta!
                                                                           lambda-meta
                                                                           lambda?
                                                                           make-dynlet
                                                                           make-letrec
                                                                           make-let
                                                                           make-lambda-case
                                                                           make-lambda
                                                                           make-sequence
                                                                           make-application
                                                                           make-conditional
                                                                           make-toplevel-define
                                                                           make-toplevel-set
                                                                           make-toplevel-ref
                                                                           make-module-set
                                                                           make-module-ref
                                                                           make-lexical-set
                                                                           make-lexical-ref
                                                                           make-primitive-ref
                                                                           make-const
                                                                           make-void)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i496"
                                                                          "i494"
                                                                          "i492"
                                                                          "i490"
                                                                          "i488"
                                                                          "i486"
                                                                          "i484"
                                                                          "i482"
                                                                          "i480"
                                                                          "i478"
                                                                          "i476"
                                                                          "i474"
                                                                          "i472"
                                                                          "i470"
                                                                          "i468"
                                                                          "i466"
                                                                          "i464"
                                                                          "i462"
                                                                          "i460"
                                                                          "i458"
                                                                          "i456"
                                                                          "i454"
                                                                          "i452"
                                                                          "i450"
                                                                          "i448"
                                                                          "i446"
                                                                          "i444"
                                                                          "i442"
                                                                          "i440"
                                                                          "i438"
                                                                          "i436"
                                                                          "i434"
                                                                          "i432"
                                                                          "i430"
                                                                          "i428"
                                                                          "i426"
                                                                          "i425"
                                                                          "i424"
                                                                          "i422"
                                                                          "i421"
                                                                          "i420"
                                                                          "i419"
                                                                          "i418"
                                                                          "i416"
                                                                          "i414"
                                                                          "i412"
                                                                          "i410"
                                                                          "i408"
                                                                          "i406"
                                                                          "i404"
                                                                          "i402"
                                                                          "i399"
                                                                          "i397"
                                                                          "i396"
                                                                          "i395"
                                                                          "i394"
                                                                          "i393"
                                                                          "i392"
                                                                          "i390"
                                                                          "i388"
                                                                          "i386"
                                                                          "i384"
                                                                          "i383"
                                                                          "i381"
                                                                          "i379"
                                                                          "i377"
                                                                          "i375"
                                                                          "i373"
                                                                          "i371"
                                                                          "i369"
                                                                          "i368"
                                                                          "i366"
                                                                          "i364"
                                                                          "i363"
                                                                          "i362"
                                                                          "i360"
                                                                          "i359"
                                                                          "i357"
                                                                          "i355"
                                                                          "i353"
                                                                          "i351"
                                                                          "i349"
                                                                          "i347"
                                                                          "i345"
                                                                          "i343"
                                                                          "i341"
                                                                          "i339"
                                                                          "i337"
                                                                          "i335"
                                                                          "i333"
                                                                          "i331"
                                                                          "i329"
                                                                          "i327"
                                                                          "i325"
                                                                          "i323"
                                                                          "i321"
                                                                          "i319"
                                                                          "i317"
                                                                          "i315"
                                                                          "i313"
                                                                          "i311"
                                                                          "i309"
                                                                          "i307"
                                                                          "i305"
                                                                          "i303"
                                                                          "i301"
                                                                          "i299"
                                                                          "i297"
                                                                          "i295"
                                                                          "i294"
                                                                          "i292"
                                                                          "i290"
                                                                          "i288"
                                                                          "i286"
                                                                          "i284"
                                                                          "i282"
                                                                          "i280"
                                                                          "i278"
                                                                          "i276"
                                                                          "i273"
                                                                          "i271"
                                                                          "i269"
                                                                          "i267"
                                                                          "i265"
                                                                          "i263"
                                                                          "i261"
                                                                          "i259"
                                                                          "i257"
                                                                          "i255"
                                                                          "i253"
                                                                          "i251"
                                                                          "i249"
                                                                          "i247"
                                                                          "i245"
                                                                          "i243"
                                                                          "i241"
                                                                          "i239"))
                                                                       #(ribcage
                                                                         (define-structure
                                                                           define-expansion-accessors
                                                                           define-expansion-constructors
                                                                           and-map*)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i33"
                                                                          "i32"
                                                                          "i31"
                                                                          "i29")))
                                                                      (hygiene
                                                                        guile))
                                                                    #(syntax-object
                                                                      #f
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(_
                                                                           name)
                                                                         #((top)
                                                                           (top))
                                                                         #("i1891"
                                                                           "i1892"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(ftype
                                                                           fval
                                                                           fe
                                                                           fw
                                                                           fs
                                                                           fmod)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i1821"
                                                                           "i1822"
                                                                           "i1823"
                                                                           "i1824"
                                                                           "i1825"
                                                                           "i1826"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(first)
                                                                         #((top))
                                                                         #("i1813"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(e
                                                                           r
                                                                           w
                                                                           s
                                                                           rib
                                                                           mod
                                                                           for-car?)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i1790"
                                                                           "i1791"
                                                                           "i1792"
                                                                           "i1793"
                                                                           "i1794"
                                                                           "i1795"
                                                                           "i1796"))
                                                                       #(ribcage
                                                                         (lambda-var-list
                                                                           gen-var
                                                                           strip
                                                                           chi-lambda-case
                                                                           lambda*-formals
                                                                           chi-simple-lambda
                                                                           lambda-formals
                                                                           ellipsis?
                                                                           chi-void
                                                                           eval-local-transformer
                                                                           chi-local-syntax
                                                                           chi-body
                                                                           chi-macro
                                                                           chi-application
                                                                           chi-expr
                                                                           chi
                                                                           chi-top
                                                                           syntax-type
                                                                           chi-when-list
                                                                           chi-install-global
                                                                           chi-top-sequence
                                                                           chi-sequence
                                                                           source-wrap
                                                                           wrap
                                                                           bound-id-member?
                                                                           distinct-bound-ids?
                                                                           valid-bound-ids?
                                                                           bound-id=?
                                                                           free-id=?
                                                                           id-var-name
                                                                           same-marks?
                                                                           join-marks
                                                                           join-wraps
                                                                           smart-append
                                                                           make-binding-wrap
                                                                           extend-ribcage!
                                                                           make-empty-ribcage
                                                                           new-mark
                                                                           anti-mark
                                                                           the-anti-mark
                                                                           top-marked?
                                                                           top-wrap
                                                                           empty-wrap
                                                                           set-ribcage-labels!
                                                                           set-ribcage-marks!
                                                                           set-ribcage-symnames!
                                                                           ribcage-labels
                                                                           ribcage-marks
                                                                           ribcage-symnames
                                                                           ribcage?
                                                                           make-ribcage
                                                                           gen-labels
                                                                           gen-label
                                                                           make-rename
                                                                           rename-marks
                                                                           rename-new
                                                                           rename-old
                                                                           subst-rename?
                                                                           wrap-subst
                                                                           wrap-marks
                                                                           make-wrap
                                                                           id-sym-name&marks
                                                                           id-sym-name
                                                                           id?
                                                                           nonsymbol-id?
                                                                           global-extend
                                                                           lookup
                                                                           macros-only-env
                                                                           extend-var-env
                                                                           extend-env
                                                                           null-env
                                                                           binding-value
                                                                           binding-type
                                                                           make-binding
                                                                           arg-check
                                                                           source-annotation
                                                                           no-source
                                                                           set-syntax-object-module!
                                                                           set-syntax-object-wrap!
                                                                           set-syntax-object-expression!
                                                                           syntax-object-module
                                                                           syntax-object-wrap
                                                                           syntax-object-expression
                                                                           syntax-object?
                                                                           make-syntax-object
                                                                           build-lexical-var
                                                                           build-letrec
                                                                           build-named-let
                                                                           build-let
                                                                           build-sequence
                                                                           build-data
                                                                           build-primref
                                                                           build-lambda-case
                                                                           build-case-lambda
                                                                           build-simple-lambda
                                                                           build-global-definition
                                                                           maybe-name-value!
                                                                           build-global-assignment
                                                                           build-global-reference
                                                                           analyze-variable
                                                                           build-lexical-assignment
                                                                           build-lexical-reference
                                                                           build-dynlet
                                                                           build-conditional
                                                                           build-application
                                                                           build-void
                                                                           decorate-source
                                                                           get-global-definition-hook
                                                                           put-global-definition-hook
                                                                           gensym-hook
                                                                           local-eval-hook
                                                                           top-level-eval-hook
                                                                           fx<
                                                                           fx=
                                                                           fx-
                                                                           fx+
                                                                           set-lambda-meta!
                                                                           lambda-meta
                                                                           lambda?
                                                                           make-dynlet
                                                                           make-letrec
                                                                           make-let
                                                                           make-lambda-case
                                                                           make-lambda
                                                                           make-sequence
                                                                           make-application
                                                                           make-conditional
                                                                           make-toplevel-define
                                                                           make-toplevel-set
                                                                           make-toplevel-ref
                                                                           make-module-set
                                                                           make-module-ref
                                                                           make-lexical-set
                                                                           make-lexical-ref
                                                                           make-primitive-ref
                                                                           make-const
                                                                           make-void)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i496"
                                                                          "i494"
                                                                          "i492"
                                                                          "i490"
                                                                          "i488"
                                                                          "i486"
                                                                          "i484"
                                                                          "i482"
                                                                          "i480"
                                                                          "i478"
                                                                          "i476"
                                                                          "i474"
                                                                          "i472"
                                                                          "i470"
                                                                          "i468"
                                                                          "i466"
                                                                          "i464"
                                                                          "i462"
                                                                          "i460"
                                                                          "i458"
                                                                          "i456"
                                                                          "i454"
                                                                          "i452"
                                                                          "i450"
                                                                          "i448"
                                                                          "i446"
                                                                          "i444"
                                                                          "i442"
                                                                          "i440"
                                                                          "i438"
                                                                          "i436"
                                                                          "i434"
                                                                          "i432"
                                                                          "i430"
                                                                          "i428"
                                                                          "i426"
                                                                          "i425"
                                                                          "i424"
                                                                          "i422"
                                                                          "i421"
                                                                          "i420"
                                                                          "i419"
                                                                          "i418"
                                                                          "i416"
                                                                          "i414"
                                                                          "i412"
                                                                          "i410"
                                                                          "i408"
                                                                          "i406"
                                                                          "i404"
                                                                          "i402"
                                                                          "i399"
                                                                          "i397"
                                                                          "i396"
                                                                          "i395"
                                                                          "i394"
                                                                          "i393"
                                                                          "i392"
                                                                          "i390"
                                                                          "i388"
                                                                          "i386"
                                                                          "i384"
                                                                          "i383"
                                                                          "i381"
                                                                          "i379"
                                                                          "i377"
                                                                          "i375"
                                                                          "i373"
                                                                          "i371"
                                                                          "i369"
                                                                          "i368"
                                                                          "i366"
                                                                          "i364"
                                                                          "i363"
                                                                          "i362"
                                                                          "i360"
                                                                          "i359"
                                                                          "i357"
                                                                          "i355"
                                                                          "i353"
                                                                          "i351"
                                                                          "i349"
                                                                          "i347"
                                                                          "i345"
                                                                          "i343"
                                                                          "i341"
                                                                          "i339"
                                                                          "i337"
                                                                          "i335"
                                                                          "i333"
                                                                          "i331"
                                                                          "i329"
                                                                          "i327"
                                                                          "i325"
                                                                          "i323"
                                                                          "i321"
                                                                          "i319"
                                                                          "i317"
                                                                          "i315"
                                                                          "i313"
                                                                          "i311"
                                                                          "i309"
                                                                          "i307"
                                                                          "i305"
                                                                          "i303"
                                                                          "i301"
                                                                          "i299"
                                                                          "i297"
                                                                          "i295"
                                                                          "i294"
                                                                          "i292"
                                                                          "i290"
                                                                          "i288"
                                                                          "i286"
                                                                          "i284"
                                                                          "i282"
                                                                          "i280"
                                                                          "i278"
                                                                          "i276"
                                                                          "i273"
                                                                          "i271"
                                                                          "i269"
                                                                          "i267"
                                                                          "i265"
                                                                          "i263"
                                                                          "i261"
                                                                          "i259"
                                                                          "i257"
                                                                          "i255"
                                                                          "i253"
                                                                          "i251"
                                                                          "i249"
                                                                          "i247"
                                                                          "i245"
                                                                          "i243"
                                                                          "i241"
                                                                          "i239"))
                                                                       #(ribcage
                                                                         (define-structure
                                                                           define-expansion-accessors
                                                                           define-expansion-constructors
                                                                           and-map*)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i33"
                                                                          "i32"
                                                                          "i31"
                                                                          "i29")))
                                                                      (hygiene
                                                                        guile))
                                                                    #(syntax-object
                                                                      #f
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(_
                                                                           name)
                                                                         #((top)
                                                                           (top))
                                                                         #("i1891"
                                                                           "i1892"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(ftype
                                                                           fval
                                                                           fe
                                                                           fw
                                                                           fs
                                                                           fmod)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i1821"
                                                                           "i1822"
                                                                           "i1823"
                                                                           "i1824"
                                                                           "i1825"
                                                                           "i1826"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(first)
                                                                         #((top))
                                                                         #("i1813"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(e
                                                                           r
                                                                           w
                                                                           s
                                                                           rib
                                                                           mod
                                                                           for-car?)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i1790"
                                                                           "i1791"
                                                                           "i1792"
                                                                           "i1793"
                                                                           "i1794"
                                                                           "i1795"
                                                                           "i1796"))
                                                                       #(ribcage
                                                                         (lambda-var-list
                                                                           gen-var
                                                                           strip
                                                                           chi-lambda-case
                                                                           lambda*-formals
                                                                           chi-simple-lambda
                                                                           lambda-formals
                                                                           ellipsis?
                                                                           chi-void
                                                                           eval-local-transformer
                                                                           chi-local-syntax
                                                                           chi-body
                                                                           chi-macro
                                                                           chi-application
                                                                           chi-expr
                                                                           chi
                                                                           chi-top
                                                                           syntax-type
                                                                           chi-when-list
                                                                           chi-install-global
                                                                           chi-top-sequence
                                                                           chi-sequence
                                                                           source-wrap
                                                                           wrap
                                                                           bound-id-member?
                                                                           distinct-bound-ids?
                                                                           valid-bound-ids?
                                                                           bound-id=?
                                                                           free-id=?
                                                                           id-var-name
                                                                           same-marks?
                                                                           join-marks
                                                                           join-wraps
                                                                           smart-append
                                                                           make-binding-wrap
                                                                           extend-ribcage!
                                                                           make-empty-ribcage
                                                                           new-mark
                                                                           anti-mark
                                                                           the-anti-mark
                                                                           top-marked?
                                                                           top-wrap
                                                                           empty-wrap
                                                                           set-ribcage-labels!
                                                                           set-ribcage-marks!
                                                                           set-ribcage-symnames!
                                                                           ribcage-labels
                                                                           ribcage-marks
                                                                           ribcage-symnames
                                                                           ribcage?
                                                                           make-ribcage
                                                                           gen-labels
                                                                           gen-label
                                                                           make-rename
                                                                           rename-marks
                                                                           rename-new
                                                                           rename-old
                                                                           subst-rename?
                                                                           wrap-subst
                                                                           wrap-marks
                                                                           make-wrap
                                                                           id-sym-name&marks
                                                                           id-sym-name
                                                                           id?
                                                                           nonsymbol-id?
                                                                           global-extend
                                                                           lookup
                                                                           macros-only-env
                                                                           extend-var-env
                                                                           extend-env
                                                                           null-env
                                                                           binding-value
                                                                           binding-type
                                                                           make-binding
                                                                           arg-check
                                                                           source-annotation
                                                                           no-source
                                                                           set-syntax-object-module!
                                                                           set-syntax-object-wrap!
                                                                           set-syntax-object-expression!
                                                                           syntax-object-module
                                                                           syntax-object-wrap
                                                                           syntax-object-expression
                                                                           syntax-object?
                                                                           make-syntax-object
                                                                           build-lexical-var
                                                                           build-letrec
                                                                           build-named-let
                                                                           build-let
                                                                           build-sequence
                                                                           build-data
                                                                           build-primref
                                                                           build-lambda-case
                                                                           build-case-lambda
                                                                           build-simple-lambda
                                                                           build-global-definition
                                                                           maybe-name-value!
                                                                           build-global-assignment
                                                                           build-global-reference
                                                                           analyze-variable
                                                                           build-lexical-assignment
                                                                           build-lexical-reference
                                                                           build-dynlet
                                                                           build-conditional
                                                                           build-application
                                                                           build-void
                                                                           decorate-source
                                                                           get-global-definition-hook
                                                                           put-global-definition-hook
                                                                           gensym-hook
                                                                           local-eval-hook
                                                                           top-level-eval-hook
                                                                           fx<
                                                                           fx=
                                                                           fx-
                                                                           fx+
                                                                           set-lambda-meta!
                                                                           lambda-meta
                                                                           lambda?
                                                                           make-dynlet
                                                                           make-letrec
                                                                           make-let
                                                                           make-lambda-case
                                                                           make-lambda
                                                                           make-sequence
                                                                           make-application
                                                                           make-conditional
                                                                           make-toplevel-define
                                                                           make-toplevel-set
                                                                           make-toplevel-ref
                                                                           make-module-set
                                                                           make-module-ref
                                                                           make-lexical-set
                                                                           make-lexical-ref
                                                                           make-primitive-ref
                                                                           make-const
                                                                           make-void)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i496"
                                                                          "i494"
                                                                          "i492"
                                                                          "i490"
                                                                          "i488"
                                                                          "i486"
                                                                          "i484"
                                                                          "i482"
                                                                          "i480"
                                                                          "i478"
                                                                          "i476"
                                                                          "i474"
                                                                          "i472"
                                                                          "i470"
                                                                          "i468"
                                                                          "i466"
                                                                          "i464"
                                                                          "i462"
                                                                          "i460"
                                                                          "i458"
                                                                          "i456"
                                                                          "i454"
                                                                          "i452"
                                                                          "i450"
                                                                          "i448"
                                                                          "i446"
                                                                          "i444"
                                                                          "i442"
                                                                          "i440"
                                                                          "i438"
                                                                          "i436"
                                                                          "i434"
                                                                          "i432"
                                                                          "i430"
                                                                          "i428"
                                                                          "i426"
                                                                          "i425"
                                                                          "i424"
                                                                          "i422"
                                                                          "i421"
                                                                          "i420"
                                                                          "i419"
                                                                          "i418"
                                                                          "i416"
                                                                          "i414"
                                                                          "i412"
                                                                          "i410"
                                                                          "i408"
                                                                          "i406"
                                                                          "i404"
                                                                          "i402"
                                                                          "i399"
                                                                          "i397"
                                                                          "i396"
                                                                          "i395"
                                                                          "i394"
                                                                          "i393"
                                                                          "i392"
                                                                          "i390"
                                                                          "i388"
                                                                          "i386"
                                                                          "i384"
                                                                          "i383"
                                                                          "i381"
                                                                          "i379"
                                                                          "i377"
                                                                          "i375"
                                                                          "i373"
                                                                          "i371"
                                                                          "i369"
                                                                          "i368"
                                                                          "i366"
                                                                          "i364"
                                                                          "i363"
                                                                          "i362"
                                                                          "i360"
                                                                          "i359"
                                                                          "i357"
                                                                          "i355"
                                                                          "i353"
                                                                          "i351"
                                                                          "i349"
                                                                          "i347"
                                                                          "i345"
                                                                          "i343"
                                                                          "i341"
                                                                          "i339"
                                                                          "i337"
                                                                          "i335"
                                                                          "i333"
                                                                          "i331"
                                                                          "i329"
                                                                          "i327"
                                                                          "i325"
                                                                          "i323"
                                                                          "i321"
                                                                          "i319"
                                                                          "i317"
                                                                          "i315"
                                                                          "i313"
                                                                          "i311"
                                                                          "i309"
                                                                          "i307"
                                                                          "i305"
                                                                          "i303"
                                                                          "i301"
                                                                          "i299"
                                                                          "i297"
                                                                          "i295"
                                                                          "i294"
                                                                          "i292"
                                                                          "i290"
                                                                          "i288"
                                                                          "i286"
                                                                          "i284"
                                                                          "i282"
                                                                          "i280"
                                                                          "i278"
                                                                          "i276"
                                                                          "i273"
                                                                          "i271"
                                                                          "i269"
                                                                          "i267"
                                                                          "i265"
                                                                          "i263"
                                                                          "i261"
                                                                          "i259"
                                                                          "i257"
                                                                          "i255"
                                                                          "i253"
                                                                          "i251"
                                                                          "i249"
                                                                          "i247"
                                                                          "i245"
                                                                          "i243"
                                                                          "i241"
                                                                          "i239"))
                                                                       #(ribcage
                                                                         (define-structure
                                                                           define-expansion-accessors
                                                                           define-expansion-constructors
                                                                           and-map*)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i33"
                                                                          "i32"
                                                                          "i31"
                                                                          "i29")))
                                                                      (hygiene
                                                                        guile)))
                                                                  '(())
                                                                  #{s\ 1786}#
                                                                  #{mod\ 1788}#))
                                                              #{tmp\ 1886}#)
                                                       (syntax-violation
                                                         #f
                                                         "source expression failed to match any pattern"
                                                         #{tmp\ 1847}#)))
                                                   ($sc-dispatch
                                                     #{tmp\ 1847}#
                                                     '(any any)))))
                                              ($sc-dispatch
                                                #{tmp\ 1847}#
                                                '(any (any . any)
                                                      any
                                                      .
                                                      each-any)))))
                                         ($sc-dispatch
                                           #{tmp\ 1847}#
                                           '(any any any))))
                                      #{e\ 1783}#)
                                     (if (memv #{ftype\ 1815}#
                                               '(define-syntax))
                                       ((lambda (#{tmp\ 1897}#)
                                          ((lambda (#{tmp\ 1898}#)
                                             (if (if #{tmp\ 1898}#
                                                   (apply (lambda (#{_\ 1902}#
                                                                   #{name\ 1903}#
                                                                   #{val\ 1904}#)
                                                            (#{id?\ 382}#
                                                              #{name\ 1903}#))
                                                          #{tmp\ 1898}#)
                                                   #f)
                                               (apply (lambda (#{_\ 1908}#
                                                               #{name\ 1909}#
                                                               #{val\ 1910}#)
                                                        (values
                                                          'define-syntax-form
                                                          #{name\ 1909}#
                                                          #{val\ 1910}#
                                                          #{w\ 1785}#
                                                          #{s\ 1786}#
                                                          #{mod\ 1788}#))
                                                      #{tmp\ 1898}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{tmp\ 1897}#)))
                                           ($sc-dispatch
                                             #{tmp\ 1897}#
                                             '(any any any))))
                                        #{e\ 1783}#)
                                       (values
                                         'call
                                         #f
                                         #{e\ 1783}#
                                         #{w\ 1785}#
                                         #{s\ 1786}#
                                         #{mod\ 1788}#))))))))))))))
             (if (#{syntax-object?\ 346}# #{e\ 1783}#)
               (#{syntax-type\ 463}#
                 (#{syntax-object-expression\ 348}# #{e\ 1783}#)
                 #{r\ 1784}#
                 (#{join-wraps\ 433}#
                   #{w\ 1785}#
                   (#{syntax-object-wrap\ 350}# #{e\ 1783}#))
                 (let ((#{t\ 1916}#
                         (#{source-annotation\ 361}# #{e\ 1783}#)))
                   (if #{t\ 1916}# #{t\ 1916}# #{s\ 1786}#))
                 #{rib\ 1787}#
                 (let ((#{t\ 1920}#
                         (#{syntax-object-module\ 352}# #{e\ 1783}#)))
                   (if #{t\ 1920}# #{t\ 1920}# #{mod\ 1788}#))
                 #{for-car?\ 1789}#)
               (if (self-evaluating? #{e\ 1783}#)
                 (values
                   'constant
                   #f
                   #{e\ 1783}#
                   #{w\ 1785}#
                   #{s\ 1786}#
                   #{mod\ 1788}#)
                 (values
                   'other
                   #f
                   #{e\ 1783}#
                   #{w\ 1785}#
                   #{s\ 1786}#
                   #{mod\ 1788}#)))))))
     (#{chi-when-list\ 461}#
       (lambda (#{e\ 1925}# #{when-list\ 1926}# #{w\ 1927}#)
         (letrec ((#{f\ 1934}#
                    (lambda (#{when-list\ 1935}# #{situations\ 1936}#)
                      (if (null? #{when-list\ 1935}#)
                        #{situations\ 1936}#
                        (#{f\ 1934}#
                          (cdr #{when-list\ 1935}#)
                          (cons (let ((#{x\ 1938}# (car #{when-list\ 1935}#)))
                                  (if (#{free-id=?\ 441}#
                                        #{x\ 1938}#
                                        '#(syntax-object
                                           compile
                                           ((top)
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage #(x) #((top)) #("i1937"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(f when-list situations)
                                              #((top) (top) (top))
                                              #("i1931" "i1932" "i1933"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(e when-list w)
                                              #((top) (top) (top))
                                              #("i1928" "i1929" "i1930"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                chi-lambda-case
                                                lambda*-formals
                                                chi-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                chi-void
                                                eval-local-transformer
                                                chi-local-syntax
                                                chi-body
                                                chi-macro
                                                chi-application
                                                chi-expr
                                                chi
                                                chi-top
                                                syntax-type
                                                chi-when-list
                                                chi-install-global
                                                chi-top-sequence
                                                chi-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                maybe-name-value!
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i496"
                                               "i494"
                                               "i492"
                                               "i490"
                                               "i488"
                                               "i486"
                                               "i484"
                                               "i482"
                                               "i480"
                                               "i478"
                                               "i476"
                                               "i474"
                                               "i472"
                                               "i470"
                                               "i468"
                                               "i466"
                                               "i464"
                                               "i462"
                                               "i460"
                                               "i458"
                                               "i456"
                                               "i454"
                                               "i452"
                                               "i450"
                                               "i448"
                                               "i446"
                                               "i444"
                                               "i442"
                                               "i440"
                                               "i438"
                                               "i436"
                                               "i434"
                                               "i432"
                                               "i430"
                                               "i428"
                                               "i426"
                                               "i425"
                                               "i424"
                                               "i422"
                                               "i421"
                                               "i420"
                                               "i419"
                                               "i418"
                                               "i416"
                                               "i414"
                                               "i412"
                                               "i410"
                                               "i408"
                                               "i406"
                                               "i404"
                                               "i402"
                                               "i399"
                                               "i397"
                                               "i396"
                                               "i395"
                                               "i394"
                                               "i393"
                                               "i392"
                                               "i390"
                                               "i388"
                                               "i386"
                                               "i384"
                                               "i383"
                                               "i381"
                                               "i379"
                                               "i377"
                                               "i375"
                                               "i373"
                                               "i371"
                                               "i369"
                                               "i368"
                                               "i366"
                                               "i364"
                                               "i363"
                                               "i362"
                                               "i360"
                                               "i359"
                                               "i357"
                                               "i355"
                                               "i353"
                                               "i351"
                                               "i349"
                                               "i347"
                                               "i345"
                                               "i343"
                                               "i341"
                                               "i339"
                                               "i337"
                                               "i335"
                                               "i333"
                                               "i331"
                                               "i329"
                                               "i327"
                                               "i325"
                                               "i323"
                                               "i321"
                                               "i319"
                                               "i317"
                                               "i315"
                                               "i313"
                                               "i311"
                                               "i309"
                                               "i307"
                                               "i305"
                                               "i303"
                                               "i301"
                                               "i299"
                                               "i297"
                                               "i295"
                                               "i294"
                                               "i292"
                                               "i290"
                                               "i288"
                                               "i286"
                                               "i284"
                                               "i282"
                                               "i280"
                                               "i278"
                                               "i276"
                                               "i273"
                                               "i271"
                                               "i269"
                                               "i267"
                                               "i265"
                                               "i263"
                                               "i261"
                                               "i259"
                                               "i257"
                                               "i255"
                                               "i253"
                                               "i251"
                                               "i249"
                                               "i247"
                                               "i245"
                                               "i243"
                                               "i241"
                                               "i239"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors
                                                and-map*)
                                              ((top) (top) (top) (top))
                                              ("i33" "i32" "i31" "i29")))
                                           (hygiene guile)))
                                    'compile
                                    (if (#{free-id=?\ 441}#
                                          #{x\ 1938}#
                                          '#(syntax-object
                                             load
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i1937"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(f when-list situations)
                                                #((top) (top) (top))
                                                #("i1931" "i1932" "i1933"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(e when-list w)
                                                #((top) (top) (top))
                                                #("i1928" "i1929" "i1930"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  chi-lambda-case
                                                  lambda*-formals
                                                  chi-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  chi-void
                                                  eval-local-transformer
                                                  chi-local-syntax
                                                  chi-body
                                                  chi-macro
                                                  chi-application
                                                  chi-expr
                                                  chi
                                                  chi-top
                                                  syntax-type
                                                  chi-when-list
                                                  chi-install-global
                                                  chi-top-sequence
                                                  chi-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  maybe-name-value!
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i496"
                                                 "i494"
                                                 "i492"
                                                 "i490"
                                                 "i488"
                                                 "i486"
                                                 "i484"
                                                 "i482"
                                                 "i480"
                                                 "i478"
                                                 "i476"
                                                 "i474"
                                                 "i472"
                                                 "i470"
                                                 "i468"
                                                 "i466"
                                                 "i464"
                                                 "i462"
                                                 "i460"
                                                 "i458"
                                                 "i456"
                                                 "i454"
                                                 "i452"
                                                 "i450"
                                                 "i448"
                                                 "i446"
                                                 "i444"
                                                 "i442"
                                                 "i440"
                                                 "i438"
                                                 "i436"
                                                 "i434"
                                                 "i432"
                                                 "i430"
                                                 "i428"
                                                 "i426"
                                                 "i425"
                                                 "i424"
                                                 "i422"
                                                 "i421"
                                                 "i420"
                                                 "i419"
                                                 "i418"
                                                 "i416"
                                                 "i414"
                                                 "i412"
                                                 "i410"
                                                 "i408"
                                                 "i406"
                                                 "i404"
                                                 "i402"
                                                 "i399"
                                                 "i397"
                                                 "i396"
                                                 "i395"
                                                 "i394"
                                                 "i393"
                                                 "i392"
                                                 "i390"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i383"
                                                 "i381"
                                                 "i379"
                                                 "i377"
                                                 "i375"
                                                 "i373"
                                                 "i371"
                                                 "i369"
                                                 "i368"
                                                 "i366"
                                                 "i364"
                                                 "i363"
                                                 "i362"
                                                 "i360"
                                                 "i359"
                                                 "i357"
                                                 "i355"
                                                 "i353"
                                                 "i351"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i329"
                                                 "i327"
                                                 "i325"
                                                 "i323"
                                                 "i321"
                                                 "i319"
                                                 "i317"
                                                 "i315"
                                                 "i313"
                                                 "i311"
                                                 "i309"
                                                 "i307"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i294"
                                                 "i292"
                                                 "i290"
                                                 "i288"
                                                 "i286"
                                                 "i284"
                                                 "i282"
                                                 "i280"
                                                 "i278"
                                                 "i276"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i259"
                                                 "i257"
                                                 "i255"
                                                 "i253"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i243"
                                                 "i241"
                                                 "i239"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors
                                                  and-map*)
                                                ((top) (top) (top) (top))
                                                ("i33" "i32" "i31" "i29")))
                                             (hygiene guile)))
                                      'load
                                      (if (#{free-id=?\ 441}#
                                            #{x\ 1938}#
                                            '#(syntax-object
                                               eval
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i1937"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f when-list situations)
                                                  #((top) (top) (top))
                                                  #("i1931" "i1932" "i1933"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(e when-list w)
                                                  #((top) (top) (top))
                                                  #("i1928" "i1929" "i1930"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    chi-lambda-case
                                                    lambda*-formals
                                                    chi-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    chi-void
                                                    eval-local-transformer
                                                    chi-local-syntax
                                                    chi-body
                                                    chi-macro
                                                    chi-application
                                                    chi-expr
                                                    chi
                                                    chi-top
                                                    syntax-type
                                                    chi-when-list
                                                    chi-install-global
                                                    chi-top-sequence
                                                    chi-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    maybe-name-value!
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i496"
                                                   "i494"
                                                   "i492"
                                                   "i490"
                                                   "i488"
                                                   "i486"
                                                   "i484"
                                                   "i482"
                                                   "i480"
                                                   "i478"
                                                   "i476"
                                                   "i474"
                                                   "i472"
                                                   "i470"
                                                   "i468"
                                                   "i466"
                                                   "i464"
                                                   "i462"
                                                   "i460"
                                                   "i458"
                                                   "i456"
                                                   "i454"
                                                   "i452"
                                                   "i450"
                                                   "i448"
                                                   "i446"
                                                   "i444"
                                                   "i442"
                                                   "i440"
                                                   "i438"
                                                   "i436"
                                                   "i434"
                                                   "i432"
                                                   "i430"
                                                   "i428"
                                                   "i426"
                                                   "i425"
                                                   "i424"
                                                   "i422"
                                                   "i421"
                                                   "i420"
                                                   "i419"
                                                   "i418"
                                                   "i416"
                                                   "i414"
                                                   "i412"
                                                   "i410"
                                                   "i408"
                                                   "i406"
                                                   "i404"
                                                   "i402"
                                                   "i399"
                                                   "i397"
                                                   "i396"
                                                   "i395"
                                                   "i394"
                                                   "i393"
                                                   "i392"
                                                   "i390"
                                                   "i388"
                                                   "i386"
                                                   "i384"
                                                   "i383"
                                                   "i381"
                                                   "i379"
                                                   "i377"
                                                   "i375"
                                                   "i373"
                                                   "i371"
                                                   "i369"
                                                   "i368"
                                                   "i366"
                                                   "i364"
                                                   "i363"
                                                   "i362"
                                                   "i360"
                                                   "i359"
                                                   "i357"
                                                   "i355"
                                                   "i353"
                                                   "i351"
                                                   "i349"
                                                   "i347"
                                                   "i345"
                                                   "i343"
                                                   "i341"
                                                   "i339"
                                                   "i337"
                                                   "i335"
                                                   "i333"
                                                   "i331"
                                                   "i329"
                                                   "i327"
                                                   "i325"
                                                   "i323"
                                                   "i321"
                                                   "i319"
                                                   "i317"
                                                   "i315"
                                                   "i313"
                                                   "i311"
                                                   "i309"
                                                   "i307"
                                                   "i305"
                                                   "i303"
                                                   "i301"
                                                   "i299"
                                                   "i297"
                                                   "i295"
                                                   "i294"
                                                   "i292"
                                                   "i290"
                                                   "i288"
                                                   "i286"
                                                   "i284"
                                                   "i282"
                                                   "i280"
                                                   "i278"
                                                   "i276"
                                                   "i273"
                                                   "i271"
                                                   "i269"
                                                   "i267"
                                                   "i265"
                                                   "i263"
                                                   "i261"
                                                   "i259"
                                                   "i257"
                                                   "i255"
                                                   "i253"
                                                   "i251"
                                                   "i249"
                                                   "i247"
                                                   "i245"
                                                   "i243"
                                                   "i241"
                                                   "i239"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors
                                                    and-map*)
                                                  ((top) (top) (top) (top))
                                                  ("i33" "i32" "i31" "i29")))
                                               (hygiene guile)))
                                        'eval
                                        (if (#{free-id=?\ 441}#
                                              #{x\ 1938}#
                                              '#(syntax-object
                                                 expand
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i1937"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(f when-list situations)
                                                    #((top) (top) (top))
                                                    #("i1931" "i1932" "i1933"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e when-list w)
                                                    #((top) (top) (top))
                                                    #("i1928" "i1929" "i1930"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      chi-top
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      maybe-name-value!
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i496"
                                                     "i494"
                                                     "i492"
                                                     "i490"
                                                     "i488"
                                                     "i486"
                                                     "i484"
                                                     "i482"
                                                     "i480"
                                                     "i478"
                                                     "i476"
                                                     "i474"
                                                     "i472"
                                                     "i470"
                                                     "i468"
                                                     "i466"
                                                     "i464"
                                                     "i462"
                                                     "i460"
                                                     "i458"
                                                     "i456"
                                                     "i454"
                                                     "i452"
                                                     "i450"
                                                     "i448"
                                                     "i446"
                                                     "i444"
                                                     "i442"
                                                     "i440"
                                                     "i438"
                                                     "i436"
                                                     "i434"
                                                     "i432"
                                                     "i430"
                                                     "i428"
                                                     "i426"
                                                     "i425"
                                                     "i424"
                                                     "i422"
                                                     "i421"
                                                     "i420"
                                                     "i419"
                                                     "i418"
                                                     "i416"
                                                     "i414"
                                                     "i412"
                                                     "i410"
                                                     "i408"
                                                     "i406"
                                                     "i404"
                                                     "i402"
                                                     "i399"
                                                     "i397"
                                                     "i396"
                                                     "i395"
                                                     "i394"
                                                     "i393"
                                                     "i392"
                                                     "i390"
                                                     "i388"
                                                     "i386"
                                                     "i384"
                                                     "i383"
                                                     "i381"
                                                     "i379"
                                                     "i377"
                                                     "i375"
                                                     "i373"
                                                     "i371"
                                                     "i369"
                                                     "i368"
                                                     "i366"
                                                     "i364"
                                                     "i363"
                                                     "i362"
                                                     "i360"
                                                     "i359"
                                                     "i357"
                                                     "i355"
                                                     "i353"
                                                     "i351"
                                                     "i349"
                                                     "i347"
                                                     "i345"
                                                     "i343"
                                                     "i341"
                                                     "i339"
                                                     "i337"
                                                     "i335"
                                                     "i333"
                                                     "i331"
                                                     "i329"
                                                     "i327"
                                                     "i325"
                                                     "i323"
                                                     "i321"
                                                     "i319"
                                                     "i317"
                                                     "i315"
                                                     "i313"
                                                     "i311"
                                                     "i309"
                                                     "i307"
                                                     "i305"
                                                     "i303"
                                                     "i301"
                                                     "i299"
                                                     "i297"
                                                     "i295"
                                                     "i294"
                                                     "i292"
                                                     "i290"
                                                     "i288"
                                                     "i286"
                                                     "i284"
                                                     "i282"
                                                     "i280"
                                                     "i278"
                                                     "i276"
                                                     "i273"
                                                     "i271"
                                                     "i269"
                                                     "i267"
                                                     "i265"
                                                     "i263"
                                                     "i261"
                                                     "i259"
                                                     "i257"
                                                     "i255"
                                                     "i253"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i245"
                                                     "i243"
                                                     "i241"
                                                     "i239"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors
                                                      and-map*)
                                                    ((top) (top) (top) (top))
                                                    ("i33" "i32" "i31" "i29")))
                                                 (hygiene guile)))
                                          'expand
                                          (syntax-violation
                                            'eval-when
                                            "invalid situation"
                                            #{e\ 1925}#
                                            (#{wrap\ 451}#
                                              #{x\ 1938}#
                                              #{w\ 1927}#
                                              #f)))))))
                                #{situations\ 1936}#))))))
           (#{f\ 1934}# #{when-list\ 1926}# (quote ())))))
     (#{chi-install-global\ 459}#
       (lambda (#{name\ 1948}# #{e\ 1949}#)
         (#{build-global-definition\ 322}#
           #f
           #{name\ 1948}#
           (#{build-application\ 304}#
             #f
             (#{build-primref\ 330}#
               #f
               'make-syntax-transformer)
             (list (#{build-data\ 332}# #f #{name\ 1948}#)
                   (#{build-data\ 332}# #f (quote macro))
                   #{e\ 1949}#)))))
     (#{chi-top-sequence\ 457}#
       (lambda (#{body\ 1957}#
                #{r\ 1958}#
                #{w\ 1959}#
                #{s\ 1960}#
                #{m\ 1961}#
                #{esew\ 1962}#
                #{mod\ 1963}#)
         (#{build-sequence\ 334}#
           #{s\ 1960}#
           (letrec ((#{dobody\ 1979}#
                      (lambda (#{body\ 1980}#
                               #{r\ 1981}#
                               #{w\ 1982}#
                               #{m\ 1983}#
                               #{esew\ 1984}#
                               #{mod\ 1985}#
                               #{out\ 1986}#)
                        (if (null? #{body\ 1980}#)
                          (reverse #{out\ 1986}#)
                          (#{dobody\ 1979}#
                            (cdr #{body\ 1980}#)
                            #{r\ 1981}#
                            #{w\ 1982}#
                            #{m\ 1983}#
                            #{esew\ 1984}#
                            #{mod\ 1985}#
                            (cons (#{chi-top\ 465}#
                                    (car #{body\ 1980}#)
                                    #{r\ 1981}#
                                    #{w\ 1982}#
                                    #{m\ 1983}#
                                    #{esew\ 1984}#
                                    #{mod\ 1985}#)
                                  #{out\ 1986}#))))))
             (#{dobody\ 1979}#
               #{body\ 1957}#
               #{r\ 1958}#
               #{w\ 1959}#
               #{m\ 1961}#
               #{esew\ 1962}#
               #{mod\ 1963}#
               '())))))
     (#{chi-sequence\ 455}#
       (lambda (#{body\ 1987}#
                #{r\ 1988}#
                #{w\ 1989}#
                #{s\ 1990}#
                #{mod\ 1991}#)
         (#{build-sequence\ 334}#
           #{s\ 1990}#
           (letrec ((#{dobody\ 2002}#
                      (lambda (#{body\ 2003}#
                               #{r\ 2004}#
                               #{w\ 2005}#
                               #{mod\ 2006}#)
                        (if (null? #{body\ 2003}#)
                          '()
                          (let ((#{first\ 2008}#
                                  (#{chi\ 467}#
                                    (car #{body\ 2003}#)
                                    #{r\ 2004}#
                                    #{w\ 2005}#
                                    #{mod\ 2006}#)))
                            (cons #{first\ 2008}#
                                  (#{dobody\ 2002}#
                                    (cdr #{body\ 2003}#)
                                    #{r\ 2004}#
                                    #{w\ 2005}#
                                    #{mod\ 2006}#)))))))
             (#{dobody\ 2002}#
               #{body\ 1987}#
               #{r\ 1988}#
               #{w\ 1989}#
               #{mod\ 1991}#)))))
     (#{source-wrap\ 453}#
       (lambda (#{x\ 2009}#
                #{w\ 2010}#
                #{s\ 2011}#
                #{defmod\ 2012}#)
         (#{wrap\ 451}#
           (#{decorate-source\ 300}#
             #{x\ 2009}#
             #{s\ 2011}#)
           #{w\ 2010}#
           #{defmod\ 2012}#)))
     (#{wrap\ 451}#
       (lambda (#{x\ 2017}# #{w\ 2018}# #{defmod\ 2019}#)
         (if (if (null? (#{wrap-marks\ 389}# #{w\ 2018}#))
               (null? (#{wrap-subst\ 391}# #{w\ 2018}#))
               #f)
           #{x\ 2017}#
           (if (#{syntax-object?\ 346}# #{x\ 2017}#)
             (#{make-syntax-object\ 344}#
               (#{syntax-object-expression\ 348}# #{x\ 2017}#)
               (#{join-wraps\ 433}#
                 #{w\ 2018}#
                 (#{syntax-object-wrap\ 350}# #{x\ 2017}#))
               (#{syntax-object-module\ 352}# #{x\ 2017}#))
             (if (null? #{x\ 2017}#)
               #{x\ 2017}#
               (#{make-syntax-object\ 344}#
                 #{x\ 2017}#
                 #{w\ 2018}#
                 #{defmod\ 2019}#))))))
     (#{bound-id-member?\ 449}#
       (lambda (#{x\ 2032}# #{list\ 2033}#)
         (if (not (null? #{list\ 2033}#))
           (let ((#{t\ 2040}#
                   (#{bound-id=?\ 443}#
                     #{x\ 2032}#
                     (car #{list\ 2033}#))))
             (if #{t\ 2040}#
               #{t\ 2040}#
               (#{bound-id-member?\ 449}#
                 #{x\ 2032}#
                 (cdr #{list\ 2033}#))))
           #f)))
     (#{distinct-bound-ids?\ 447}#
       (lambda (#{ids\ 2042}#)
         (letrec ((#{distinct?\ 2046}#
                    (lambda (#{ids\ 2047}#)
                      (let ((#{t\ 2050}# (null? #{ids\ 2047}#)))
                        (if #{t\ 2050}#
                          #{t\ 2050}#
                          (if (not (#{bound-id-member?\ 449}#
                                     (car #{ids\ 2047}#)
                                     (cdr #{ids\ 2047}#)))
                            (#{distinct?\ 2046}# (cdr #{ids\ 2047}#))
                            #f))))))
           (#{distinct?\ 2046}# #{ids\ 2042}#))))
     (#{valid-bound-ids?\ 445}#
       (lambda (#{ids\ 2054}#)
         (if (letrec ((#{all-ids?\ 2059}#
                        (lambda (#{ids\ 2060}#)
                          (let ((#{t\ 2063}# (null? #{ids\ 2060}#)))
                            (if #{t\ 2063}#
                              #{t\ 2063}#
                              (if (#{id?\ 382}# (car #{ids\ 2060}#))
                                (#{all-ids?\ 2059}# (cdr #{ids\ 2060}#))
                                #f))))))
               (#{all-ids?\ 2059}# #{ids\ 2054}#))
           (#{distinct-bound-ids?\ 447}# #{ids\ 2054}#)
           #f)))
     (#{bound-id=?\ 443}#
       (lambda (#{i\ 2068}# #{j\ 2069}#)
         (if (if (#{syntax-object?\ 346}# #{i\ 2068}#)
               (#{syntax-object?\ 346}# #{j\ 2069}#)
               #f)
           (if (eq? (#{syntax-object-expression\ 348}# #{i\ 2068}#)
                    (#{syntax-object-expression\ 348}# #{j\ 2069}#))
             (#{same-marks?\ 437}#
               (#{wrap-marks\ 389}#
                 (#{syntax-object-wrap\ 350}# #{i\ 2068}#))
               (#{wrap-marks\ 389}#
                 (#{syntax-object-wrap\ 350}# #{j\ 2069}#)))
             #f)
           (eq? #{i\ 2068}# #{j\ 2069}#))))
     (#{free-id=?\ 441}#
       (lambda (#{i\ 2076}# #{j\ 2077}#)
         (if (eq? (let ((#{x\ 2083}# #{i\ 2076}#))
                    (if (#{syntax-object?\ 346}# #{x\ 2083}#)
                      (#{syntax-object-expression\ 348}# #{x\ 2083}#)
                      #{x\ 2083}#))
                  (let ((#{x\ 2086}# #{j\ 2077}#))
                    (if (#{syntax-object?\ 346}# #{x\ 2086}#)
                      (#{syntax-object-expression\ 348}# #{x\ 2086}#)
                      #{x\ 2086}#)))
           (eq? (#{id-var-name\ 439}# #{i\ 2076}# (quote (())))
                (#{id-var-name\ 439}# #{j\ 2077}# (quote (()))))
           #f)))
     (#{id-var-name\ 439}#
       (lambda (#{id\ 2090}# #{w\ 2091}#)
         (letrec*
           ((#{search-vector-rib\ 2100}#
              (lambda (#{sym\ 2112}#
                       #{subst\ 2113}#
                       #{marks\ 2114}#
                       #{symnames\ 2115}#
                       #{ribcage\ 2116}#)
                (let ((#{n\ 2123}# (vector-length #{symnames\ 2115}#)))
                  (letrec ((#{f\ 2126}#
                             (lambda (#{i\ 2127}#)
                               (if (#{fx=\ 287}# #{i\ 2127}# #{n\ 2123}#)
                                 (#{search\ 2096}#
                                   #{sym\ 2112}#
                                   (cdr #{subst\ 2113}#)
                                   #{marks\ 2114}#)
                                 (if (if (eq? (vector-ref
                                                #{symnames\ 2115}#
                                                #{i\ 2127}#)
                                              #{sym\ 2112}#)
                                       (#{same-marks?\ 437}#
                                         #{marks\ 2114}#
                                         (vector-ref
                                           (#{ribcage-marks\ 409}#
                                             #{ribcage\ 2116}#)
                                           #{i\ 2127}#))
                                       #f)
                                   (values
                                     (vector-ref
                                       (#{ribcage-labels\ 411}#
                                         #{ribcage\ 2116}#)
                                       #{i\ 2127}#)
                                     #{marks\ 2114}#)
                                   (#{f\ 2126}#
                                     (#{fx+\ 283}# #{i\ 2127}# 1)))))))
                    (#{f\ 2126}# 0)))))
            (#{search-list-rib\ 2098}#
              (lambda (#{sym\ 2135}#
                       #{subst\ 2136}#
                       #{marks\ 2137}#
                       #{symnames\ 2138}#
                       #{ribcage\ 2139}#)
                (letrec ((#{f\ 2148}#
                           (lambda (#{symnames\ 2149}# #{i\ 2150}#)
                             (if (null? #{symnames\ 2149}#)
                               (#{search\ 2096}#
                                 #{sym\ 2135}#
                                 (cdr #{subst\ 2136}#)
                                 #{marks\ 2137}#)
                               (if (if (eq? (car #{symnames\ 2149}#)
                                            #{sym\ 2135}#)
                                     (#{same-marks?\ 437}#
                                       #{marks\ 2137}#
                                       (list-ref
                                         (#{ribcage-marks\ 409}#
                                           #{ribcage\ 2139}#)
                                         #{i\ 2150}#))
                                     #f)
                                 (values
                                   (list-ref
                                     (#{ribcage-labels\ 411}#
                                       #{ribcage\ 2139}#)
                                     #{i\ 2150}#)
                                   #{marks\ 2137}#)
                                 (#{f\ 2148}#
                                   (cdr #{symnames\ 2149}#)
                                   (#{fx+\ 283}# #{i\ 2150}# 1)))))))
                  (#{f\ 2148}# #{symnames\ 2138}# 0))))
            (#{search\ 2096}#
              (lambda (#{sym\ 2158}# #{subst\ 2159}# #{marks\ 2160}#)
                (if (null? #{subst\ 2159}#)
                  (values #f #{marks\ 2160}#)
                  (let ((#{fst\ 2165}# (car #{subst\ 2159}#)))
                    (if (eq? #{fst\ 2165}# (quote shift))
                      (#{search\ 2096}#
                        #{sym\ 2158}#
                        (cdr #{subst\ 2159}#)
                        (cdr #{marks\ 2160}#))
                      (let ((#{symnames\ 2167}#
                              (#{ribcage-symnames\ 407}# #{fst\ 2165}#)))
                        (if (vector? #{symnames\ 2167}#)
                          (#{search-vector-rib\ 2100}#
                            #{sym\ 2158}#
                            #{subst\ 2159}#
                            #{marks\ 2160}#
                            #{symnames\ 2167}#
                            #{fst\ 2165}#)
                          (#{search-list-rib\ 2098}#
                            #{sym\ 2158}#
                            #{subst\ 2159}#
                            #{marks\ 2160}#
                            #{symnames\ 2167}#
                            #{fst\ 2165}#)))))))))
           (if (symbol? #{id\ 2090}#)
             (let ((#{t\ 2170}#
                     (call-with-values
                       (lambda ()
                         (#{search\ 2096}#
                           #{id\ 2090}#
                           (#{wrap-subst\ 391}# #{w\ 2091}#)
                           (#{wrap-marks\ 389}# #{w\ 2091}#)))
                       (lambda (#{x\ 2172}# . #{ignore\ 2173}#)
                         #{x\ 2172}#))))
               (if #{t\ 2170}# #{t\ 2170}# #{id\ 2090}#))
             (if (#{syntax-object?\ 346}# #{id\ 2090}#)
               (let ((#{id\ 2181}#
                       (#{syntax-object-expression\ 348}# #{id\ 2090}#))
                     (#{w1\ 2182}#
                       (#{syntax-object-wrap\ 350}# #{id\ 2090}#)))
                 (let ((#{marks\ 2184}#
                         (#{join-marks\ 435}#
                           (#{wrap-marks\ 389}# #{w\ 2091}#)
                           (#{wrap-marks\ 389}# #{w1\ 2182}#))))
                   (call-with-values
                     (lambda ()
                       (#{search\ 2096}#
                         #{id\ 2181}#
                         (#{wrap-subst\ 391}# #{w\ 2091}#)
                         #{marks\ 2184}#))
                     (lambda (#{new-id\ 2185}# #{marks\ 2186}#)
                       (let ((#{t\ 2191}# #{new-id\ 2185}#))
                         (if #{t\ 2191}#
                           #{t\ 2191}#
                           (let ((#{t\ 2194}#
                                   (call-with-values
                                     (lambda ()
                                       (#{search\ 2096}#
                                         #{id\ 2181}#
                                         (#{wrap-subst\ 391}# #{w1\ 2182}#)
                                         #{marks\ 2186}#))
                                     (lambda (#{x\ 2196}# . #{ignore\ 2197}#)
                                       #{x\ 2196}#))))
                             (if #{t\ 2194}# #{t\ 2194}# #{id\ 2181}#))))))))
               (syntax-violation
                 'id-var-name
                 "invalid id"
                 #{id\ 2090}#))))))
     (#{same-marks?\ 437}#
       (lambda (#{x\ 2202}# #{y\ 2203}#)
         (let ((#{t\ 2208}# (eq? #{x\ 2202}# #{y\ 2203}#)))
           (if #{t\ 2208}#
             #{t\ 2208}#
             (if (not (null? #{x\ 2202}#))
               (if (not (null? #{y\ 2203}#))
                 (if (eq? (car #{x\ 2202}#) (car #{y\ 2203}#))
                   (#{same-marks?\ 437}#
                     (cdr #{x\ 2202}#)
                     (cdr #{y\ 2203}#))
                   #f)
                 #f)
               #f)))))
     (#{join-marks\ 435}#
       (lambda (#{m1\ 2214}# #{m2\ 2215}#)
         (#{smart-append\ 431}# #{m1\ 2214}# #{m2\ 2215}#)))
     (#{join-wraps\ 433}#
       (lambda (#{w1\ 2218}# #{w2\ 2219}#)
         (let ((#{m1\ 2224}# (#{wrap-marks\ 389}# #{w1\ 2218}#))
               (#{s1\ 2225}# (#{wrap-subst\ 391}# #{w1\ 2218}#)))
           (if (null? #{m1\ 2224}#)
             (if (null? #{s1\ 2225}#)
               #{w2\ 2219}#
               (#{make-wrap\ 387}#
                 (#{wrap-marks\ 389}# #{w2\ 2219}#)
                 (#{smart-append\ 431}#
                   #{s1\ 2225}#
                   (#{wrap-subst\ 391}# #{w2\ 2219}#))))
             (#{make-wrap\ 387}#
               (#{smart-append\ 431}#
                 #{m1\ 2224}#
                 (#{wrap-marks\ 389}# #{w2\ 2219}#))
               (#{smart-append\ 431}#
                 #{s1\ 2225}#
                 (#{wrap-subst\ 391}# #{w2\ 2219}#)))))))
     (#{smart-append\ 431}#
       (lambda (#{m1\ 2226}# #{m2\ 2227}#)
         (if (null? #{m2\ 2227}#)
           #{m1\ 2226}#
           (append #{m1\ 2226}# #{m2\ 2227}#))))
     (#{make-binding-wrap\ 429}#
       (lambda (#{ids\ 2230}# #{labels\ 2231}# #{w\ 2232}#)
         (if (null? #{ids\ 2230}#)
           #{w\ 2232}#
           (#{make-wrap\ 387}#
             (#{wrap-marks\ 389}# #{w\ 2232}#)
             (cons (let ((#{labelvec\ 2237}#
                           (list->vector #{labels\ 2231}#)))
                     (let ((#{n\ 2239}# (vector-length #{labelvec\ 2237}#)))
                       (let ((#{symnamevec\ 2242}# (make-vector #{n\ 2239}#))
                             (#{marksvec\ 2243}# (make-vector #{n\ 2239}#)))
                         (begin
                           (letrec ((#{f\ 2247}#
                                      (lambda (#{ids\ 2248}# #{i\ 2249}#)
                                        (if (not (null? #{ids\ 2248}#))
                                          (call-with-values
                                            (lambda ()
                                              (#{id-sym-name&marks\ 385}#
                                                (car #{ids\ 2248}#)
                                                #{w\ 2232}#))
                                            (lambda (#{symname\ 2250}#
                                                     #{marks\ 2251}#)
                                              (begin
                                                (vector-set!
                                                  #{symnamevec\ 2242}#
                                                  #{i\ 2249}#
                                                  #{symname\ 2250}#)
                                                (vector-set!
                                                  #{marksvec\ 2243}#
                                                  #{i\ 2249}#
                                                  #{marks\ 2251}#)
                                                (#{f\ 2247}#
                                                  (cdr #{ids\ 2248}#)
                                                  (#{fx+\ 283}#
                                                    #{i\ 2249}#
                                                    1)))))))))
                             (#{f\ 2247}# #{ids\ 2230}# 0))
                           (#{make-ribcage\ 403}#
                             #{symnamevec\ 2242}#
                             #{marksvec\ 2243}#
                             #{labelvec\ 2237}#)))))
                   (#{wrap-subst\ 391}# #{w\ 2232}#))))))
     (#{extend-ribcage!\ 427}#
       (lambda (#{ribcage\ 2254}# #{id\ 2255}# #{label\ 2256}#)
         (begin
           (#{set-ribcage-symnames!\ 413}#
             #{ribcage\ 2254}#
             (cons (#{syntax-object-expression\ 348}# #{id\ 2255}#)
                   (#{ribcage-symnames\ 407}# #{ribcage\ 2254}#)))
           (#{set-ribcage-marks!\ 415}#
             #{ribcage\ 2254}#
             (cons (#{wrap-marks\ 389}#
                     (#{syntax-object-wrap\ 350}# #{id\ 2255}#))
                   (#{ribcage-marks\ 409}# #{ribcage\ 2254}#)))
           (#{set-ribcage-labels!\ 417}#
             #{ribcage\ 2254}#
             (cons #{label\ 2256}#
                   (#{ribcage-labels\ 411}# #{ribcage\ 2254}#))))))
     (#{anti-mark\ 423}#
       (lambda (#{w\ 2260}#)
         (#{make-wrap\ 387}#
           (cons #f (#{wrap-marks\ 389}# #{w\ 2260}#))
           (cons 'shift
                 (#{wrap-subst\ 391}# #{w\ 2260}#)))))
     (#{set-ribcage-labels!\ 417}#
       (lambda (#{x\ 2263}# #{update\ 2264}#)
         (vector-set! #{x\ 2263}# 3 #{update\ 2264}#)))
     (#{set-ribcage-marks!\ 415}#
       (lambda (#{x\ 2267}# #{update\ 2268}#)
         (vector-set! #{x\ 2267}# 2 #{update\ 2268}#)))
     (#{set-ribcage-symnames!\ 413}#
       (lambda (#{x\ 2271}# #{update\ 2272}#)
         (vector-set! #{x\ 2271}# 1 #{update\ 2272}#)))
     (#{ribcage-labels\ 411}#
       (lambda (#{x\ 2275}#) (vector-ref #{x\ 2275}# 3)))
     (#{ribcage-marks\ 409}#
       (lambda (#{x\ 2277}#) (vector-ref #{x\ 2277}# 2)))
     (#{ribcage-symnames\ 407}#
       (lambda (#{x\ 2279}#) (vector-ref #{x\ 2279}# 1)))
     (#{ribcage?\ 405}#
       (lambda (#{x\ 2281}#)
         (if (vector? #{x\ 2281}#)
           (if (= (vector-length #{x\ 2281}#) 4)
             (eq? (vector-ref #{x\ 2281}# 0) (quote ribcage))
             #f)
           #f)))
     (#{make-ribcage\ 403}#
       (lambda (#{symnames\ 2286}#
                #{marks\ 2287}#
                #{labels\ 2288}#)
         (vector
           'ribcage
           #{symnames\ 2286}#
           #{marks\ 2287}#
           #{labels\ 2288}#)))
     (#{gen-labels\ 400}#
       (lambda (#{ls\ 2292}#)
         (if (null? #{ls\ 2292}#)
           '()
           (cons (#{gen-label\ 398}#)
                 (#{gen-labels\ 400}# (cdr #{ls\ 2292}#))))))
     (#{gen-label\ 398}#
       (lambda () (symbol->string (gensym "i"))))
     (#{wrap-subst\ 391}# cdr)
     (#{wrap-marks\ 389}# car)
     (#{make-wrap\ 387}# cons)
     (#{id-sym-name&marks\ 385}#
       (lambda (#{x\ 2294}# #{w\ 2295}#)
         (if (#{syntax-object?\ 346}# #{x\ 2294}#)
           (values
             (#{syntax-object-expression\ 348}# #{x\ 2294}#)
             (#{join-marks\ 435}#
               (#{wrap-marks\ 389}# #{w\ 2295}#)
               (#{wrap-marks\ 389}#
                 (#{syntax-object-wrap\ 350}# #{x\ 2294}#))))
           (values
             #{x\ 2294}#
             (#{wrap-marks\ 389}# #{w\ 2295}#)))))
     (#{id?\ 382}#
       (lambda (#{x\ 2298}#)
         (if (symbol? #{x\ 2298}#)
           #t
           (if (#{syntax-object?\ 346}# #{x\ 2298}#)
             (symbol?
               (#{syntax-object-expression\ 348}# #{x\ 2298}#))
             #f))))
     (#{nonsymbol-id?\ 380}#
       (lambda (#{x\ 2305}#)
         (if (#{syntax-object?\ 346}# #{x\ 2305}#)
           (symbol?
             (#{syntax-object-expression\ 348}# #{x\ 2305}#))
           #f)))
     (#{global-extend\ 378}#
       (lambda (#{type\ 2309}# #{sym\ 2310}# #{val\ 2311}#)
         (#{put-global-definition-hook\ 296}#
           #{sym\ 2310}#
           #{type\ 2309}#
           #{val\ 2311}#)))
     (#{lookup\ 376}#
       (lambda (#{x\ 2315}# #{r\ 2316}# #{mod\ 2317}#)
         (let ((#{t\ 2323}# (assq #{x\ 2315}# #{r\ 2316}#)))
           (if #{t\ 2323}#
             (cdr #{t\ 2323}#)
             (if (symbol? #{x\ 2315}#)
               (let ((#{t\ 2329}#
                       (#{get-global-definition-hook\ 298}#
                         #{x\ 2315}#
                         #{mod\ 2317}#)))
                 (if #{t\ 2329}# #{t\ 2329}# (quote (global))))
               '(displaced-lexical))))))
     (#{macros-only-env\ 374}#
       (lambda (#{r\ 2334}#)
         (if (null? #{r\ 2334}#)
           '()
           (let ((#{a\ 2337}# (car #{r\ 2334}#)))
             (if (eq? (cadr #{a\ 2337}#) (quote macro))
               (cons #{a\ 2337}#
                     (#{macros-only-env\ 374}# (cdr #{r\ 2334}#)))
               (#{macros-only-env\ 374}# (cdr #{r\ 2334}#)))))))
     (#{extend-var-env\ 372}#
       (lambda (#{labels\ 2338}# #{vars\ 2339}# #{r\ 2340}#)
         (if (null? #{labels\ 2338}#)
           #{r\ 2340}#
           (#{extend-var-env\ 372}#
             (cdr #{labels\ 2338}#)
             (cdr #{vars\ 2339}#)
             (cons (cons (car #{labels\ 2338}#)
                         (cons (quote lexical) (car #{vars\ 2339}#)))
                   #{r\ 2340}#)))))
     (#{extend-env\ 370}#
       (lambda (#{labels\ 2345}# #{bindings\ 2346}# #{r\ 2347}#)
         (if (null? #{labels\ 2345}#)
           #{r\ 2347}#
           (#{extend-env\ 370}#
             (cdr #{labels\ 2345}#)
             (cdr #{bindings\ 2346}#)
             (cons (cons (car #{labels\ 2345}#)
                         (car #{bindings\ 2346}#))
                   #{r\ 2347}#)))))
     (#{binding-value\ 367}# cdr)
     (#{binding-type\ 365}# car)
     (#{source-annotation\ 361}#
       (lambda (#{x\ 2351}#)
         (if (#{syntax-object?\ 346}# #{x\ 2351}#)
           (#{source-annotation\ 361}#
             (#{syntax-object-expression\ 348}# #{x\ 2351}#))
           (if (pair? #{x\ 2351}#)
             (let ((#{props\ 2358}# (source-properties #{x\ 2351}#)))
               (if (pair? #{props\ 2358}#) #{props\ 2358}# #f))
             #f))))
     (#{set-syntax-object-module!\ 358}#
       (lambda (#{x\ 2360}# #{update\ 2361}#)
         (vector-set! #{x\ 2360}# 3 #{update\ 2361}#)))
     (#{set-syntax-object-wrap!\ 356}#
       (lambda (#{x\ 2364}# #{update\ 2365}#)
         (vector-set! #{x\ 2364}# 2 #{update\ 2365}#)))
     (#{set-syntax-object-expression!\ 354}#
       (lambda (#{x\ 2368}# #{update\ 2369}#)
         (vector-set! #{x\ 2368}# 1 #{update\ 2369}#)))
     (#{syntax-object-module\ 352}#
       (lambda (#{x\ 2372}#) (vector-ref #{x\ 2372}# 3)))
     (#{syntax-object-wrap\ 350}#
       (lambda (#{x\ 2374}#) (vector-ref #{x\ 2374}# 2)))
     (#{syntax-object-expression\ 348}#
       (lambda (#{x\ 2376}#) (vector-ref #{x\ 2376}# 1)))
     (#{syntax-object?\ 346}#
       (lambda (#{x\ 2378}#)
         (if (vector? #{x\ 2378}#)
           (if (= (vector-length #{x\ 2378}#) 4)
             (eq? (vector-ref #{x\ 2378}# 0)
                  'syntax-object)
             #f)
           #f)))
     (#{make-syntax-object\ 344}#
       (lambda (#{expression\ 2383}#
                #{wrap\ 2384}#
                #{module\ 2385}#)
         (vector
           'syntax-object
           #{expression\ 2383}#
           #{wrap\ 2384}#
           #{module\ 2385}#)))
     (#{build-letrec\ 340}#
       (lambda (#{src\ 2389}#
                #{in-order?\ 2390}#
                #{ids\ 2391}#
                #{vars\ 2392}#
                #{val-exps\ 2393}#
                #{body-exp\ 2394}#)
         (if (null? #{vars\ 2392}#)
           #{body-exp\ 2394}#
           (begin
             (for-each
               #{maybe-name-value!\ 320}#
               #{ids\ 2391}#
               #{val-exps\ 2393}#)
             (#{make-letrec\ 272}#
               #{src\ 2389}#
               #{in-order?\ 2390}#
               #{ids\ 2391}#
               #{vars\ 2392}#
               #{val-exps\ 2393}#
               #{body-exp\ 2394}#)))))
     (#{build-named-let\ 338}#
       (lambda (#{src\ 2401}#
                #{ids\ 2402}#
                #{vars\ 2403}#
                #{val-exps\ 2404}#
                #{body-exp\ 2405}#)
         (let ((#{f\ 2415}# (car #{vars\ 2403}#))
               (#{f-name\ 2416}# (car #{ids\ 2402}#))
               (#{vars\ 2417}# (cdr #{vars\ 2403}#))
               (#{ids\ 2418}# (cdr #{ids\ 2402}#)))
           (let ((#{proc\ 2420}#
                   (#{build-simple-lambda\ 324}#
                     #{src\ 2401}#
                     #{ids\ 2418}#
                     #f
                     #{vars\ 2417}#
                     '()
                     #{body-exp\ 2405}#)))
             (begin
               (#{maybe-name-value!\ 320}#
                 #{f-name\ 2416}#
                 #{proc\ 2420}#)
               (for-each
                 #{maybe-name-value!\ 320}#
                 #{ids\ 2418}#
                 #{val-exps\ 2404}#)
               (#{make-letrec\ 272}#
                 #{src\ 2401}#
                 #f
                 (list #{f-name\ 2416}#)
                 (list #{f\ 2415}#)
                 (list #{proc\ 2420}#)
                 (#{build-application\ 304}#
                   #{src\ 2401}#
                   (#{build-lexical-reference\ 310}#
                     'fun
                     #{src\ 2401}#
                     #{f-name\ 2416}#
                     #{f\ 2415}#)
                   #{val-exps\ 2404}#)))))))
     (#{build-let\ 336}#
       (lambda (#{src\ 2421}#
                #{ids\ 2422}#
                #{vars\ 2423}#
                #{val-exps\ 2424}#
                #{body-exp\ 2425}#)
         (begin
           (for-each
             #{maybe-name-value!\ 320}#
             #{ids\ 2422}#
             #{val-exps\ 2424}#)
           (if (null? #{vars\ 2423}#)
             #{body-exp\ 2425}#
             (#{make-let\ 270}#
               #{src\ 2421}#
               #{ids\ 2422}#
               #{vars\ 2423}#
               #{val-exps\ 2424}#
               #{body-exp\ 2425}#)))))
     (#{build-sequence\ 334}#
       (lambda (#{src\ 2431}# #{exps\ 2432}#)
         (if (null? (cdr #{exps\ 2432}#))
           (car #{exps\ 2432}#)
           (#{make-sequence\ 264}#
             #{src\ 2431}#
             #{exps\ 2432}#))))
     (#{build-data\ 332}#
       (lambda (#{src\ 2435}# #{exp\ 2436}#)
         (#{make-const\ 242}# #{src\ 2435}# #{exp\ 2436}#)))
     (#{build-primref\ 330}#
       (lambda (#{src\ 2439}# #{name\ 2440}#)
         (if (equal?
               (module-name (current-module))
               '(guile))
           (#{make-toplevel-ref\ 254}#
             #{src\ 2439}#
             #{name\ 2440}#)
           (#{make-module-ref\ 250}#
             #{src\ 2439}#
             '(guile)
             #{name\ 2440}#
             #f))))
     (#{build-lambda-case\ 328}#
       (lambda (#{src\ 2443}#
                #{req\ 2444}#
                #{opt\ 2445}#
                #{rest\ 2446}#
                #{kw\ 2447}#
                #{inits\ 2448}#
                #{vars\ 2449}#
                #{body\ 2450}#
                #{else-case\ 2451}#)
         (#{make-lambda-case\ 268}#
           #{src\ 2443}#
           #{req\ 2444}#
           #{opt\ 2445}#
           #{rest\ 2446}#
           #{kw\ 2447}#
           #{inits\ 2448}#
           #{vars\ 2449}#
           #{body\ 2450}#
           #{else-case\ 2451}#)))
     (#{build-case-lambda\ 326}#
       (lambda (#{src\ 2461}# #{meta\ 2462}# #{body\ 2463}#)
         (#{make-lambda\ 266}#
           #{src\ 2461}#
           #{meta\ 2462}#
           #{body\ 2463}#)))
     (#{build-simple-lambda\ 324}#
       (lambda (#{src\ 2467}#
                #{req\ 2468}#
                #{rest\ 2469}#
                #{vars\ 2470}#
                #{meta\ 2471}#
                #{exp\ 2472}#)
         (#{make-lambda\ 266}#
           #{src\ 2467}#
           #{meta\ 2471}#
           (#{make-lambda-case\ 268}#
             #{src\ 2467}#
             #{req\ 2468}#
             #f
             #{rest\ 2469}#
             #f
             '()
             #{vars\ 2470}#
             #{exp\ 2472}#
             #f))))
     (#{build-global-definition\ 322}#
       (lambda (#{source\ 2479}# #{var\ 2480}# #{exp\ 2481}#)
         (begin
           (#{maybe-name-value!\ 320}#
             #{var\ 2480}#
             #{exp\ 2481}#)
           (#{make-toplevel-define\ 258}#
             #{source\ 2479}#
             #{var\ 2480}#
             #{exp\ 2481}#))))
     (#{maybe-name-value!\ 320}#
       (lambda (#{name\ 2485}# #{val\ 2486}#)
         (if (#{lambda?\ 277}# #{val\ 2486}#)
           (let ((#{meta\ 2490}#
                   (#{lambda-meta\ 279}# #{val\ 2486}#)))
             (if (not (assq (quote name) #{meta\ 2490}#))
               (#{set-lambda-meta!\ 281}#
                 #{val\ 2486}#
                 (acons 'name
                        #{name\ 2485}#
                        #{meta\ 2490}#)))))))
     (#{build-global-assignment\ 318}#
       (lambda (#{source\ 2491}#
                #{var\ 2492}#
                #{exp\ 2493}#
                #{mod\ 2494}#)
         (#{analyze-variable\ 314}#
           #{mod\ 2494}#
           #{var\ 2492}#
           (lambda (#{mod\ 2499}# #{var\ 2500}# #{public?\ 2501}#)
             (#{make-module-set\ 252}#
               #{source\ 2491}#
               #{mod\ 2499}#
               #{var\ 2500}#
               #{public?\ 2501}#
               #{exp\ 2493}#))
           (lambda (#{var\ 2505}#)
             (#{make-toplevel-set\ 256}#
               #{source\ 2491}#
               #{var\ 2505}#
               #{exp\ 2493}#)))))
     (#{build-global-reference\ 316}#
       (lambda (#{source\ 2507}# #{var\ 2508}# #{mod\ 2509}#)
         (#{analyze-variable\ 314}#
           #{mod\ 2509}#
           #{var\ 2508}#
           (lambda (#{mod\ 2513}# #{var\ 2514}# #{public?\ 2515}#)
             (#{make-module-ref\ 250}#
               #{source\ 2507}#
               #{mod\ 2513}#
               #{var\ 2514}#
               #{public?\ 2515}#))
           (lambda (#{var\ 2519}#)
             (#{make-toplevel-ref\ 254}#
               #{source\ 2507}#
               #{var\ 2519}#)))))
     (#{analyze-variable\ 314}#
       (lambda (#{mod\ 2521}#
                #{var\ 2522}#
                #{modref-cont\ 2523}#
                #{bare-cont\ 2524}#)
         (if (not #{mod\ 2521}#)
           (#{bare-cont\ 2524}# #{var\ 2522}#)
           (let ((#{kind\ 2531}# (car #{mod\ 2521}#))
                 (#{mod\ 2532}# (cdr #{mod\ 2521}#)))
             (if (memv #{kind\ 2531}# (quote (public)))
               (#{modref-cont\ 2523}#
                 #{mod\ 2532}#
                 #{var\ 2522}#
                 #t)
               (if (memv #{kind\ 2531}# (quote (private)))
                 (if (not (equal?
                            #{mod\ 2532}#
                            (module-name (current-module))))
                   (#{modref-cont\ 2523}#
                     #{mod\ 2532}#
                     #{var\ 2522}#
                     #f)
                   (#{bare-cont\ 2524}# #{var\ 2522}#))
                 (if (memv #{kind\ 2531}# (quote (bare)))
                   (#{bare-cont\ 2524}# #{var\ 2522}#)
                   (if (memv #{kind\ 2531}# (quote (hygiene)))
                     (if (if (not (equal?
                                    #{mod\ 2532}#
                                    (module-name (current-module))))
                           (module-variable
                             (resolve-module #{mod\ 2532}#)
                             #{var\ 2522}#)
                           #f)
                       (#{modref-cont\ 2523}#
                         #{mod\ 2532}#
                         #{var\ 2522}#
                         #f)
                       (#{bare-cont\ 2524}# #{var\ 2522}#))
                     (syntax-violation
                       #f
                       "bad module kind"
                       #{var\ 2522}#
                       #{mod\ 2532}#)))))))))
     (#{build-lexical-assignment\ 312}#
       (lambda (#{source\ 2540}#
                #{name\ 2541}#
                #{var\ 2542}#
                #{exp\ 2543}#)
         (#{make-lexical-set\ 248}#
           #{source\ 2540}#
           #{name\ 2541}#
           #{var\ 2542}#
           #{exp\ 2543}#)))
     (#{build-lexical-reference\ 310}#
       (lambda (#{type\ 2548}#
                #{source\ 2549}#
                #{name\ 2550}#
                #{var\ 2551}#)
         (#{make-lexical-ref\ 246}#
           #{source\ 2549}#
           #{name\ 2550}#
           #{var\ 2551}#)))
     (#{build-dynlet\ 308}#
       (lambda (#{source\ 2556}#
                #{fluids\ 2557}#
                #{vals\ 2558}#
                #{body\ 2559}#)
         (#{make-dynlet\ 274}#
           #{source\ 2556}#
           #{fluids\ 2557}#
           #{vals\ 2558}#
           #{body\ 2559}#)))
     (#{build-conditional\ 306}#
       (lambda (#{source\ 2564}#
                #{test-exp\ 2565}#
                #{then-exp\ 2566}#
                #{else-exp\ 2567}#)
         (#{make-conditional\ 260}#
           #{source\ 2564}#
           #{test-exp\ 2565}#
           #{then-exp\ 2566}#
           #{else-exp\ 2567}#)))
     (#{build-application\ 304}#
       (lambda (#{source\ 2572}#
                #{fun-exp\ 2573}#
                #{arg-exps\ 2574}#)
         (#{make-application\ 262}#
           #{source\ 2572}#
           #{fun-exp\ 2573}#
           #{arg-exps\ 2574}#)))
     (#{build-void\ 302}#
       (lambda (#{source\ 2578}#)
         (#{make-void\ 240}# #{source\ 2578}#)))
     (#{decorate-source\ 300}#
       (lambda (#{e\ 2580}# #{s\ 2581}#)
         (begin
           (if (if (pair? #{e\ 2580}#) #{s\ 2581}# #f)
             (set-source-properties! #{e\ 2580}# #{s\ 2581}#))
           #{e\ 2580}#)))
     (#{get-global-definition-hook\ 298}#
       (lambda (#{symbol\ 2586}# #{module\ 2587}#)
         (begin
           (if (if (not #{module\ 2587}#) (current-module) #f)
             (warn "module system is booted, we should have a module"
                   #{symbol\ 2586}#))
           (let ((#{v\ 2593}#
                   (module-variable
                     (if #{module\ 2587}#
                       (resolve-module (cdr #{module\ 2587}#))
                       (current-module))
                     #{symbol\ 2586}#)))
             (if #{v\ 2593}#
               (if (variable-bound? #{v\ 2593}#)
                 (let ((#{val\ 2598}# (variable-ref #{v\ 2593}#)))
                   (if (macro? #{val\ 2598}#)
                     (if (macro-type #{val\ 2598}#)
                       (cons (macro-type #{val\ 2598}#)
                             (macro-binding #{val\ 2598}#))
                       #f)
                     #f))
                 #f)
               #f)))))
     (#{put-global-definition-hook\ 296}#
       (lambda (#{symbol\ 2602}# #{type\ 2603}# #{val\ 2604}#)
         (module-define!
           (current-module)
           #{symbol\ 2602}#
           (make-syntax-transformer
             #{symbol\ 2602}#
             #{type\ 2603}#
             #{val\ 2604}#))))
     (#{local-eval-hook\ 293}#
       (lambda (#{x\ 2608}# #{mod\ 2609}#)
         (primitive-eval #{x\ 2608}#)))
     (#{top-level-eval-hook\ 291}#
       (lambda (#{x\ 2612}# #{mod\ 2613}#)
         (primitive-eval #{x\ 2612}#)))
     (#{fx<\ 289}# <)
     (#{fx=\ 287}# =)
     (#{fx-\ 285}# -)
     (#{fx+\ 283}# +)
     (#{set-lambda-meta!\ 281}#
       (lambda (#{x\ 2616}# #{v\ 2617}#)
         (struct-set! #{x\ 2616}# 1 #{v\ 2617}#)))
     (#{lambda-meta\ 279}#
       (lambda (#{x\ 2620}#) (struct-ref #{x\ 2620}# 1)))
     (#{lambda?\ 277}#
       (lambda (#{x\ 2622}#)
         (if (struct? #{x\ 2622}#)
           (eq? (struct-vtable #{x\ 2622}#)
                (vector-ref %expanded-vtables 13))
           #f)))
     (#{make-dynlet\ 274}#
       (lambda (#{src\ 2626}#
                #{fluids\ 2627}#
                #{vals\ 2628}#
                #{body\ 2629}#)
         (make-struct
           (vector-ref %expanded-vtables 17)
           0
           #{src\ 2626}#
           #{fluids\ 2627}#
           #{vals\ 2628}#
           #{body\ 2629}#)))
     (#{make-letrec\ 272}#
       (lambda (#{src\ 2634}#
                #{in-order?\ 2635}#
                #{names\ 2636}#
                #{gensyms\ 2637}#
                #{vals\ 2638}#
                #{body\ 2639}#)
         (make-struct
           (vector-ref %expanded-vtables 16)
           0
           #{src\ 2634}#
           #{in-order?\ 2635}#
           #{names\ 2636}#
           #{gensyms\ 2637}#
           #{vals\ 2638}#
           #{body\ 2639}#)))
     (#{make-let\ 270}#
       (lambda (#{src\ 2646}#
                #{names\ 2647}#
                #{gensyms\ 2648}#
                #{vals\ 2649}#
                #{body\ 2650}#)
         (make-struct
           (vector-ref %expanded-vtables 15)
           0
           #{src\ 2646}#
           #{names\ 2647}#
           #{gensyms\ 2648}#
           #{vals\ 2649}#
           #{body\ 2650}#)))
     (#{make-lambda-case\ 268}#
       (lambda (#{src\ 2656}#
                #{req\ 2657}#
                #{opt\ 2658}#
                #{rest\ 2659}#
                #{kw\ 2660}#
                #{inits\ 2661}#
                #{gensyms\ 2662}#
                #{body\ 2663}#
                #{alternate\ 2664}#)
         (make-struct
           (vector-ref %expanded-vtables 14)
           0
           #{src\ 2656}#
           #{req\ 2657}#
           #{opt\ 2658}#
           #{rest\ 2659}#
           #{kw\ 2660}#
           #{inits\ 2661}#
           #{gensyms\ 2662}#
           #{body\ 2663}#
           #{alternate\ 2664}#)))
     (#{make-lambda\ 266}#
       (lambda (#{src\ 2674}# #{meta\ 2675}# #{body\ 2676}#)
         (make-struct
           (vector-ref %expanded-vtables 13)
           0
           #{src\ 2674}#
           #{meta\ 2675}#
           #{body\ 2676}#)))
     (#{make-sequence\ 264}#
       (lambda (#{src\ 2680}# #{exps\ 2681}#)
         (make-struct
           (vector-ref %expanded-vtables 12)
           0
           #{src\ 2680}#
           #{exps\ 2681}#)))
     (#{make-application\ 262}#
       (lambda (#{src\ 2684}# #{proc\ 2685}# #{args\ 2686}#)
         (make-struct
           (vector-ref %expanded-vtables 11)
           0
           #{src\ 2684}#
           #{proc\ 2685}#
           #{args\ 2686}#)))
     (#{make-conditional\ 260}#
       (lambda (#{src\ 2690}#
                #{test\ 2691}#
                #{consequent\ 2692}#
                #{alternate\ 2693}#)
         (make-struct
           (vector-ref %expanded-vtables 10)
           0
           #{src\ 2690}#
           #{test\ 2691}#
           #{consequent\ 2692}#
           #{alternate\ 2693}#)))
     (#{make-toplevel-define\ 258}#
       (lambda (#{src\ 2698}# #{name\ 2699}# #{exp\ 2700}#)
         (make-struct
           (vector-ref %expanded-vtables 9)
           0
           #{src\ 2698}#
           #{name\ 2699}#
           #{exp\ 2700}#)))
     (#{make-toplevel-set\ 256}#
       (lambda (#{src\ 2704}# #{name\ 2705}# #{exp\ 2706}#)
         (make-struct
           (vector-ref %expanded-vtables 8)
           0
           #{src\ 2704}#
           #{name\ 2705}#
           #{exp\ 2706}#)))
     (#{make-toplevel-ref\ 254}#
       (lambda (#{src\ 2710}# #{name\ 2711}#)
         (make-struct
           (vector-ref %expanded-vtables 7)
           0
           #{src\ 2710}#
           #{name\ 2711}#)))
     (#{make-module-set\ 252}#
       (lambda (#{src\ 2714}#
                #{mod\ 2715}#
                #{name\ 2716}#
                #{public?\ 2717}#
                #{exp\ 2718}#)
         (make-struct
           (vector-ref %expanded-vtables 6)
           0
           #{src\ 2714}#
           #{mod\ 2715}#
           #{name\ 2716}#
           #{public?\ 2717}#
           #{exp\ 2718}#)))
     (#{make-module-ref\ 250}#
       (lambda (#{src\ 2724}#
                #{mod\ 2725}#
                #{name\ 2726}#
                #{public?\ 2727}#)
         (make-struct
           (vector-ref %expanded-vtables 5)
           0
           #{src\ 2724}#
           #{mod\ 2725}#
           #{name\ 2726}#
           #{public?\ 2727}#)))
     (#{make-lexical-set\ 248}#
       (lambda (#{src\ 2732}#
                #{name\ 2733}#
                #{gensym\ 2734}#
                #{exp\ 2735}#)
         (make-struct
           (vector-ref %expanded-vtables 4)
           0
           #{src\ 2732}#
           #{name\ 2733}#
           #{gensym\ 2734}#
           #{exp\ 2735}#)))
     (#{make-lexical-ref\ 246}#
       (lambda (#{src\ 2740}# #{name\ 2741}# #{gensym\ 2742}#)
         (make-struct
           (vector-ref %expanded-vtables 3)
           0
           #{src\ 2740}#
           #{name\ 2741}#
           #{gensym\ 2742}#)))
     (#{make-primitive-ref\ 244}#
       (lambda (#{src\ 2746}# #{name\ 2747}#)
         (make-struct
           (vector-ref %expanded-vtables 2)
           0
           #{src\ 2746}#
           #{name\ 2747}#)))
     (#{make-const\ 242}#
       (lambda (#{src\ 2750}# #{exp\ 2751}#)
         (make-struct
           (vector-ref %expanded-vtables 1)
           0
           #{src\ 2750}#
           #{exp\ 2751}#)))
     (#{make-void\ 240}#
       (lambda (#{src\ 2754}#)
         (make-struct
           (vector-ref %expanded-vtables 0)
           0
           #{src\ 2754}#))))
    (begin
      (#{global-extend\ 378}#
        'local-syntax
        'letrec-syntax
        #t)
      (#{global-extend\ 378}#
        'local-syntax
        'let-syntax
        #f)
      (#{global-extend\ 378}#
        'core
        'fluid-let-syntax
        (lambda (#{e\ 2756}#
                 #{r\ 2757}#
                 #{w\ 2758}#
                 #{s\ 2759}#
                 #{mod\ 2760}#)
          ((lambda (#{tmp\ 2766}#)
             ((lambda (#{tmp\ 2767}#)
                (if (if #{tmp\ 2767}#
                      (apply (lambda (#{_\ 2773}#
                                      #{var\ 2774}#
                                      #{val\ 2775}#
                                      #{e1\ 2776}#
                                      #{e2\ 2777}#)
                               (#{valid-bound-ids?\ 445}# #{var\ 2774}#))
                             #{tmp\ 2767}#)
                      #f)
                  (apply (lambda (#{_\ 2784}#
                                  #{var\ 2785}#
                                  #{val\ 2786}#
                                  #{e1\ 2787}#
                                  #{e2\ 2788}#)
                           (let ((#{names\ 2790}#
                                   (map (lambda (#{x\ 2791}#)
                                          (#{id-var-name\ 439}#
                                            #{x\ 2791}#
                                            #{w\ 2758}#))
                                        #{var\ 2785}#)))
                             (begin
                               (for-each
                                 (lambda (#{id\ 2794}# #{n\ 2795}#)
                                   (let ((#{atom-key\ 2800}#
                                           (#{binding-type\ 365}#
                                             (#{lookup\ 376}#
                                               #{n\ 2795}#
                                               #{r\ 2757}#
                                               #{mod\ 2760}#))))
                                     (if (memv #{atom-key\ 2800}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'fluid-let-syntax
                                         "identifier out of context"
                                         #{e\ 2756}#
                                         (#{source-wrap\ 453}#
                                           #{id\ 2794}#
                                           #{w\ 2758}#
                                           #{s\ 2759}#
                                           #{mod\ 2760}#)))))
                                 #{var\ 2785}#
                                 #{names\ 2790}#)
                               (#{chi-body\ 475}#
                                 (cons #{e1\ 2787}# #{e2\ 2788}#)
                                 (#{source-wrap\ 453}#
                                   #{e\ 2756}#
                                   #{w\ 2758}#
                                   #{s\ 2759}#
                                   #{mod\ 2760}#)
                                 (#{extend-env\ 370}#
                                   #{names\ 2790}#
                                   (let ((#{trans-r\ 2805}#
                                           (#{macros-only-env\ 374}#
                                             #{r\ 2757}#)))
                                     (map (lambda (#{x\ 2806}#)
                                            (cons 'macro
                                                  (#{eval-local-transformer\ 479}#
                                                    (#{chi\ 467}#
                                                      #{x\ 2806}#
                                                      #{trans-r\ 2805}#
                                                      #{w\ 2758}#
                                                      #{mod\ 2760}#)
                                                    #{mod\ 2760}#)))
                                          #{val\ 2786}#))
                                   #{r\ 2757}#)
                                 #{w\ 2758}#
                                 #{mod\ 2760}#))))
                         #{tmp\ 2767}#)
                  ((lambda (#{_\ 2811}#)
                     (syntax-violation
                       'fluid-let-syntax
                       "bad syntax"
                       (#{source-wrap\ 453}#
                         #{e\ 2756}#
                         #{w\ 2758}#
                         #{s\ 2759}#
                         #{mod\ 2760}#)))
                   #{tmp\ 2766}#)))
              ($sc-dispatch
                #{tmp\ 2766}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 2756}#)))
      (#{global-extend\ 378}#
        'core
        'quote
        (lambda (#{e\ 2812}#
                 #{r\ 2813}#
                 #{w\ 2814}#
                 #{s\ 2815}#
                 #{mod\ 2816}#)
          ((lambda (#{tmp\ 2822}#)
             ((lambda (#{tmp\ 2823}#)
                (if #{tmp\ 2823}#
                  (apply (lambda (#{_\ 2826}# #{e\ 2827}#)
                           (#{build-data\ 332}#
                             #{s\ 2815}#
                             (#{strip\ 493}# #{e\ 2827}# #{w\ 2814}#)))
                         #{tmp\ 2823}#)
                  ((lambda (#{_\ 2829}#)
                     (syntax-violation
                       'quote
                       "bad syntax"
                       (#{source-wrap\ 453}#
                         #{e\ 2812}#
                         #{w\ 2814}#
                         #{s\ 2815}#
                         #{mod\ 2816}#)))
                   #{tmp\ 2822}#)))
              ($sc-dispatch #{tmp\ 2822}# (quote (any any)))))
           #{e\ 2812}#)))
      (#{global-extend\ 378}#
        'core
        'syntax
        (letrec*
          ((#{regen\ 2845}#
             (lambda (#{x\ 2846}#)
               (let ((#{atom-key\ 2850}# (car #{x\ 2846}#)))
                 (if (memv #{atom-key\ 2850}# (quote (ref)))
                   (#{build-lexical-reference\ 310}#
                     'value
                     #f
                     (cadr #{x\ 2846}#)
                     (cadr #{x\ 2846}#))
                   (if (memv #{atom-key\ 2850}# (quote (primitive)))
                     (#{build-primref\ 330}# #f (cadr #{x\ 2846}#))
                     (if (memv #{atom-key\ 2850}# (quote (quote)))
                       (#{build-data\ 332}# #f (cadr #{x\ 2846}#))
                       (if (memv #{atom-key\ 2850}# (quote (lambda)))
                         (if (list? (cadr #{x\ 2846}#))
                           (#{build-simple-lambda\ 324}#
                             #f
                             (cadr #{x\ 2846}#)
                             #f
                             (cadr #{x\ 2846}#)
                             '()
                             (#{regen\ 2845}# (caddr #{x\ 2846}#)))
                           (error "how did we get here" #{x\ 2846}#))
                         (#{build-application\ 304}#
                           #f
                           (#{build-primref\ 330}# #f (car #{x\ 2846}#))
                           (map #{regen\ 2845}# (cdr #{x\ 2846}#))))))))))
           (#{gen-vector\ 2843}#
             (lambda (#{x\ 2862}#)
               (if (eq? (car #{x\ 2862}#) (quote list))
                 (cons (quote vector) (cdr #{x\ 2862}#))
                 (if (eq? (car #{x\ 2862}#) (quote quote))
                   (list 'quote
                         (list->vector (cadr #{x\ 2862}#)))
                   (list (quote list->vector) #{x\ 2862}#)))))
           (#{gen-append\ 2841}#
             (lambda (#{x\ 2872}# #{y\ 2873}#)
               (if (equal? #{y\ 2873}# (quote (quote ())))
                 #{x\ 2872}#
                 (list (quote append) #{x\ 2872}# #{y\ 2873}#))))
           (#{gen-cons\ 2839}#
             (lambda (#{x\ 2877}# #{y\ 2878}#)
               (let ((#{atom-key\ 2883}# (car #{y\ 2878}#)))
                 (if (memv #{atom-key\ 2883}# (quote (quote)))
                   (if (eq? (car #{x\ 2877}#) (quote quote))
                     (list 'quote
                           (cons (cadr #{x\ 2877}#) (cadr #{y\ 2878}#)))
                     (if (eq? (cadr #{y\ 2878}#) (quote ()))
                       (list (quote list) #{x\ 2877}#)
                       (list (quote cons) #{x\ 2877}# #{y\ 2878}#)))
                   (if (memv #{atom-key\ 2883}# (quote (list)))
                     (cons 'list
                           (cons #{x\ 2877}# (cdr #{y\ 2878}#)))
                     (list (quote cons) #{x\ 2877}# #{y\ 2878}#))))))
           (#{gen-map\ 2837}#
             (lambda (#{e\ 2892}# #{map-env\ 2893}#)
               (let ((#{formals\ 2898}# (map cdr #{map-env\ 2893}#))
                     (#{actuals\ 2899}#
                       (map (lambda (#{x\ 2900}#)
                              (list (quote ref) (car #{x\ 2900}#)))
                            #{map-env\ 2893}#)))
                 (if (eq? (car #{e\ 2892}#) (quote ref))
                   (car #{actuals\ 2899}#)
                   (if (and-map
                         (lambda (#{x\ 2907}#)
                           (if (eq? (car #{x\ 2907}#) (quote ref))
                             (memq (cadr #{x\ 2907}#) #{formals\ 2898}#)
                             #f))
                         (cdr #{e\ 2892}#))
                     (cons 'map
                           (cons (list (quote primitive) (car #{e\ 2892}#))
                                 (map (let ((#{r\ 2913}#
                                              (map cons
                                                   #{formals\ 2898}#
                                                   #{actuals\ 2899}#)))
                                        (lambda (#{x\ 2914}#)
                                          (cdr (assq (cadr #{x\ 2914}#)
                                                     #{r\ 2913}#))))
                                      (cdr #{e\ 2892}#))))
                     (cons 'map
                           (cons (list 'lambda
                                       #{formals\ 2898}#
                                       #{e\ 2892}#)
                                 #{actuals\ 2899}#)))))))
           (#{gen-mappend\ 2835}#
             (lambda (#{e\ 2918}# #{map-env\ 2919}#)
               (list 'apply
                     '(primitive append)
                     (#{gen-map\ 2837}# #{e\ 2918}# #{map-env\ 2919}#))))
           (#{gen-ref\ 2833}#
             (lambda (#{src\ 2923}#
                      #{var\ 2924}#
                      #{level\ 2925}#
                      #{maps\ 2926}#)
               (if (#{fx=\ 287}# #{level\ 2925}# 0)
                 (values #{var\ 2924}# #{maps\ 2926}#)
                 (if (null? #{maps\ 2926}#)
                   (syntax-violation
                     'syntax
                     "missing ellipsis"
                     #{src\ 2923}#)
                   (call-with-values
                     (lambda ()
                       (#{gen-ref\ 2833}#
                         #{src\ 2923}#
                         #{var\ 2924}#
                         (#{fx-\ 285}# #{level\ 2925}# 1)
                         (cdr #{maps\ 2926}#)))
                     (lambda (#{outer-var\ 2931}# #{outer-maps\ 2932}#)
                       (let ((#{b\ 2936}#
                               (assq #{outer-var\ 2931}#
                                     (car #{maps\ 2926}#))))
                         (if #{b\ 2936}#
                           (values (cdr #{b\ 2936}#) #{maps\ 2926}#)
                           (let ((#{inner-var\ 2938}#
                                   (#{gen-var\ 495}# (quote tmp))))
                             (values
                               #{inner-var\ 2938}#
                               (cons (cons (cons #{outer-var\ 2931}#
                                                 #{inner-var\ 2938}#)
                                           (car #{maps\ 2926}#))
                                     #{outer-maps\ 2932}#)))))))))))
           (#{gen-syntax\ 2831}#
             (lambda (#{src\ 2939}#
                      #{e\ 2940}#
                      #{r\ 2941}#
                      #{maps\ 2942}#
                      #{ellipsis?\ 2943}#
                      #{mod\ 2944}#)
               (if (#{id?\ 382}# #{e\ 2940}#)
                 (let ((#{label\ 2952}#
                         (#{id-var-name\ 439}# #{e\ 2940}# (quote (())))))
                   (let ((#{b\ 2955}#
                           (#{lookup\ 376}#
                             #{label\ 2952}#
                             #{r\ 2941}#
                             #{mod\ 2944}#)))
                     (if (eq? (#{binding-type\ 365}# #{b\ 2955}#)
                              'syntax)
                       (call-with-values
                         (lambda ()
                           (let ((#{var.lev\ 2957}#
                                   (#{binding-value\ 367}# #{b\ 2955}#)))
                             (#{gen-ref\ 2833}#
                               #{src\ 2939}#
                               (car #{var.lev\ 2957}#)
                               (cdr #{var.lev\ 2957}#)
                               #{maps\ 2942}#)))
                         (lambda (#{var\ 2958}# #{maps\ 2959}#)
                           (values
                             (list (quote ref) #{var\ 2958}#)
                             #{maps\ 2959}#)))
                       (if (#{ellipsis?\ 2943}# #{e\ 2940}#)
                         (syntax-violation
                           'syntax
                           "misplaced ellipsis"
                           #{src\ 2939}#)
                         (values
                           (list (quote quote) #{e\ 2940}#)
                           #{maps\ 2942}#)))))
                 ((lambda (#{tmp\ 2964}#)
                    ((lambda (#{tmp\ 2965}#)
                       (if (if #{tmp\ 2965}#
                             (apply (lambda (#{dots\ 2968}# #{e\ 2969}#)
                                      (#{ellipsis?\ 2943}# #{dots\ 2968}#))
                                    #{tmp\ 2965}#)
                             #f)
                         (apply (lambda (#{dots\ 2972}# #{e\ 2973}#)
                                  (#{gen-syntax\ 2831}#
                                    #{src\ 2939}#
                                    #{e\ 2973}#
                                    #{r\ 2941}#
                                    #{maps\ 2942}#
                                    (lambda (#{x\ 2974}#) #f)
                                    #{mod\ 2944}#))
                                #{tmp\ 2965}#)
                         ((lambda (#{tmp\ 2976}#)
                            (if (if #{tmp\ 2976}#
                                  (apply (lambda (#{x\ 2980}#
                                                  #{dots\ 2981}#
                                                  #{y\ 2982}#)
                                           (#{ellipsis?\ 2943}#
                                             #{dots\ 2981}#))
                                         #{tmp\ 2976}#)
                                  #f)
                              (apply (lambda (#{x\ 2986}#
                                              #{dots\ 2987}#
                                              #{y\ 2988}#)
                                       (letrec ((#{f\ 2992}#
                                                  (lambda (#{y\ 2993}#
                                                           #{k\ 2994}#)
                                                    ((lambda (#{tmp\ 3001}#)
                                                       ((lambda (#{tmp\ 3002}#)
                                                          (if (if #{tmp\ 3002}#
                                                                (apply (lambda (#{dots\ 3005}#
                                                                                #{y\ 3006}#)
                                                                         (#{ellipsis?\ 2943}#
                                                                           #{dots\ 3005}#))
                                                                       #{tmp\ 3002}#)
                                                                #f)
                                                            (apply (lambda (#{dots\ 3009}#
                                                                            #{y\ 3010}#)
                                                                     (#{f\ 2992}#
                                                                       #{y\ 3010}#
                                                                       (lambda (#{maps\ 3011}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{k\ 2994}#
                                                                               (cons '()
                                                                                     #{maps\ 3011}#)))
                                                                           (lambda (#{x\ 3013}#
                                                                                    #{maps\ 3014}#)
                                                                             (if (null? (car #{maps\ 3014}#))
                                                                               (syntax-violation
                                                                                 'syntax
                                                                                 "extra ellipsis"
                                                                                 #{src\ 2939}#)
                                                                               (values
                                                                                 (#{gen-mappend\ 2835}#
                                                                                   #{x\ 3013}#
                                                                                   (car #{maps\ 3014}#))
                                                                                 (cdr #{maps\ 3014}#))))))))
                                                                   #{tmp\ 3002}#)
                                                            ((lambda (#{_\ 3018}#)
                                                               (call-with-values
                                                                 (lambda ()
                                                                   (#{gen-syntax\ 2831}#
                                                                     #{src\ 2939}#
                                                                     #{y\ 2993}#
                                                                     #{r\ 2941}#
                                                                     #{maps\ 2942}#
                                                                     #{ellipsis?\ 2943}#
                                                                     #{mod\ 2944}#))
                                                                 (lambda (#{y\ 3019}#
                                                                          #{maps\ 3020}#)
                                                                   (call-with-values
                                                                     (lambda ()
                                                                       (#{k\ 2994}#
                                                                         #{maps\ 3020}#))
                                                                     (lambda (#{x\ 3023}#
                                                                              #{maps\ 3024}#)
                                                                       (values
                                                                         (#{gen-append\ 2841}#
                                                                           #{x\ 3023}#
                                                                           #{y\ 3019}#)
                                                                         #{maps\ 3024}#))))))
                                                             #{tmp\ 3001}#)))
                                                        ($sc-dispatch
                                                          #{tmp\ 3001}#
                                                          '(any . any))))
                                                     #{y\ 2993}#))))
                                         (#{f\ 2992}#
                                           #{y\ 2988}#
                                           (lambda (#{maps\ 2995}#)
                                             (call-with-values
                                               (lambda ()
                                                 (#{gen-syntax\ 2831}#
                                                   #{src\ 2939}#
                                                   #{x\ 2986}#
                                                   #{r\ 2941}#
                                                   (cons '()
                                                         #{maps\ 2995}#)
                                                   #{ellipsis?\ 2943}#
                                                   #{mod\ 2944}#))
                                               (lambda (#{x\ 2997}#
                                                        #{maps\ 2998}#)
                                                 (if (null? (car #{maps\ 2998}#))
                                                   (syntax-violation
                                                     'syntax
                                                     "extra ellipsis"
                                                     #{src\ 2939}#)
                                                   (values
                                                     (#{gen-map\ 2837}#
                                                       #{x\ 2997}#
                                                       (car #{maps\ 2998}#))
                                                     (cdr #{maps\ 2998}#)))))))))
                                     #{tmp\ 2976}#)
                              ((lambda (#{tmp\ 3027}#)
                                 (if #{tmp\ 3027}#
                                   (apply (lambda (#{x\ 3030}# #{y\ 3031}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{gen-syntax\ 2831}#
                                                  #{src\ 2939}#
                                                  #{x\ 3030}#
                                                  #{r\ 2941}#
                                                  #{maps\ 2942}#
                                                  #{ellipsis?\ 2943}#
                                                  #{mod\ 2944}#))
                                              (lambda (#{x\ 3032}#
                                                       #{maps\ 3033}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{gen-syntax\ 2831}#
                                                      #{src\ 2939}#
                                                      #{y\ 3031}#
                                                      #{r\ 2941}#
                                                      #{maps\ 3033}#
                                                      #{ellipsis?\ 2943}#
                                                      #{mod\ 2944}#))
                                                  (lambda (#{y\ 3036}#
                                                           #{maps\ 3037}#)
                                                    (values
                                                      (#{gen-cons\ 2839}#
                                                        #{x\ 3032}#
                                                        #{y\ 3036}#)
                                                      #{maps\ 3037}#))))))
                                          #{tmp\ 3027}#)
                                   ((lambda (#{tmp\ 3040}#)
                                      (if #{tmp\ 3040}#
                                        (apply (lambda (#{e1\ 3043}#
                                                        #{e2\ 3044}#)
                                                 (call-with-values
                                                   (lambda ()
                                                     (#{gen-syntax\ 2831}#
                                                       #{src\ 2939}#
                                                       (cons #{e1\ 3043}#
                                                             #{e2\ 3044}#)
                                                       #{r\ 2941}#
                                                       #{maps\ 2942}#
                                                       #{ellipsis?\ 2943}#
                                                       #{mod\ 2944}#))
                                                   (lambda (#{e\ 3046}#
                                                            #{maps\ 3047}#)
                                                     (values
                                                       (#{gen-vector\ 2843}#
                                                         #{e\ 3046}#)
                                                       #{maps\ 3047}#))))
                                               #{tmp\ 3040}#)
                                        ((lambda (#{_\ 3051}#)
                                           (values
                                             (list (quote quote) #{e\ 2940}#)
                                             #{maps\ 2942}#))
                                         #{tmp\ 2964}#)))
                                    ($sc-dispatch
                                      #{tmp\ 2964}#
                                      '#(vector (any . each-any))))))
                               ($sc-dispatch
                                 #{tmp\ 2964}#
                                 '(any . any)))))
                          ($sc-dispatch
                            #{tmp\ 2964}#
                            '(any any . any)))))
                     ($sc-dispatch #{tmp\ 2964}# (quote (any any)))))
                  #{e\ 2940}#)))))
          (lambda (#{e\ 3053}#
                   #{r\ 3054}#
                   #{w\ 3055}#
                   #{s\ 3056}#
                   #{mod\ 3057}#)
            (let ((#{e\ 3064}#
                    (#{source-wrap\ 453}#
                      #{e\ 3053}#
                      #{w\ 3055}#
                      #{s\ 3056}#
                      #{mod\ 3057}#)))
              ((lambda (#{tmp\ 3065}#)
                 ((lambda (#{tmp\ 3066}#)
                    (if #{tmp\ 3066}#
                      (apply (lambda (#{_\ 3069}# #{x\ 3070}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax\ 2831}#
                                     #{e\ 3064}#
                                     #{x\ 3070}#
                                     #{r\ 3054}#
                                     '()
                                     #{ellipsis?\ 483}#
                                     #{mod\ 3057}#))
                                 (lambda (#{e\ 3071}# #{maps\ 3072}#)
                                   (#{regen\ 2845}# #{e\ 3071}#))))
                             #{tmp\ 3066}#)
                      ((lambda (#{_\ 3076}#)
                         (syntax-violation
                           'syntax
                           "bad `syntax' form"
                           #{e\ 3064}#))
                       #{tmp\ 3065}#)))
                  ($sc-dispatch #{tmp\ 3065}# (quote (any any)))))
               #{e\ 3064}#)))))
      (#{global-extend\ 378}#
        'core
        'lambda
        (lambda (#{e\ 3077}#
                 #{r\ 3078}#
                 #{w\ 3079}#
                 #{s\ 3080}#
                 #{mod\ 3081}#)
          ((lambda (#{tmp\ 3087}#)
             ((lambda (#{tmp\ 3088}#)
                (if #{tmp\ 3088}#
                  (apply (lambda (#{_\ 3093}#
                                  #{args\ 3094}#
                                  #{e1\ 3095}#
                                  #{e2\ 3096}#)
                           (call-with-values
                             (lambda ()
                               (#{lambda-formals\ 485}# #{args\ 3094}#))
                             (lambda (#{req\ 3097}#
                                      #{opt\ 3098}#
                                      #{rest\ 3099}#
                                      #{kw\ 3100}#)
                               (letrec ((#{lp\ 3108}#
                                          (lambda (#{body\ 3109}#
                                                   #{meta\ 3110}#)
                                            ((lambda (#{tmp\ 3112}#)
                                               ((lambda (#{tmp\ 3113}#)
                                                  (if (if #{tmp\ 3113}#
                                                        (apply (lambda (#{docstring\ 3117}#
                                                                        #{e1\ 3118}#
                                                                        #{e2\ 3119}#)
                                                                 (string?
                                                                   (syntax->datum
                                                                     #{docstring\ 3117}#)))
                                                               #{tmp\ 3113}#)
                                                        #f)
                                                    (apply (lambda (#{docstring\ 3123}#
                                                                    #{e1\ 3124}#
                                                                    #{e2\ 3125}#)
                                                             (#{lp\ 3108}#
                                                               (cons #{e1\ 3124}#
                                                                     #{e2\ 3125}#)
                                                               (append
                                                                 #{meta\ 3110}#
                                                                 (list (cons 'documentation
                                                                             (syntax->datum
                                                                               #{docstring\ 3123}#))))))
                                                           #{tmp\ 3113}#)
                                                    ((lambda (#{tmp\ 3128}#)
                                                       (if #{tmp\ 3128}#
                                                         (apply (lambda (#{k\ 3133}#
                                                                         #{v\ 3134}#
                                                                         #{e1\ 3135}#
                                                                         #{e2\ 3136}#)
                                                                  (#{lp\ 3108}#
                                                                    (cons #{e1\ 3135}#
                                                                          #{e2\ 3136}#)
                                                                    (append
                                                                      #{meta\ 3110}#
                                                                      (syntax->datum
                                                                        (map cons
                                                                             #{k\ 3133}#
                                                                             #{v\ 3134}#)))))
                                                                #{tmp\ 3128}#)
                                                         ((lambda (#{_\ 3141}#)
                                                            (#{chi-simple-lambda\ 487}#
                                                              #{e\ 3077}#
                                                              #{r\ 3078}#
                                                              #{w\ 3079}#
                                                              #{s\ 3080}#
                                                              #{mod\ 3081}#
                                                              #{req\ 3097}#
                                                              #{rest\ 3099}#
                                                              #{meta\ 3110}#
                                                              #{body\ 3109}#))
                                                          #{tmp\ 3112}#)))
                                                     ($sc-dispatch
                                                       #{tmp\ 3112}#
                                                       '(#(vector
                                                           #(each (any . any)))
                                                         any
                                                         .
                                                         each-any)))))
                                                ($sc-dispatch
                                                  #{tmp\ 3112}#
                                                  '(any any . each-any))))
                                             #{body\ 3109}#))))
                                 (#{lp\ 3108}#
                                   (cons #{e1\ 3095}# #{e2\ 3096}#)
                                   '())))))
                         #{tmp\ 3088}#)
                  ((lambda (#{_\ 3143}#)
                     (syntax-violation
                       'lambda
                       "bad lambda"
                       #{e\ 3077}#))
                   #{tmp\ 3087}#)))
              ($sc-dispatch
                #{tmp\ 3087}#
                '(any any any . each-any))))
           #{e\ 3077}#)))
      (#{global-extend\ 378}#
        'core
        'lambda*
        (lambda (#{e\ 3144}#
                 #{r\ 3145}#
                 #{w\ 3146}#
                 #{s\ 3147}#
                 #{mod\ 3148}#)
          ((lambda (#{tmp\ 3154}#)
             ((lambda (#{tmp\ 3155}#)
                (if #{tmp\ 3155}#
                  (apply (lambda (#{_\ 3160}#
                                  #{args\ 3161}#
                                  #{e1\ 3162}#
                                  #{e2\ 3163}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 491}#
                                 #{e\ 3144}#
                                 #{r\ 3145}#
                                 #{w\ 3146}#
                                 #{s\ 3147}#
                                 #{mod\ 3148}#
                                 #{lambda*-formals\ 489}#
                                 (list (cons #{args\ 3161}#
                                             (cons #{e1\ 3162}#
                                                   #{e2\ 3163}#)))))
                             (lambda (#{meta\ 3165}# #{lcase\ 3166}#)
                               (#{build-case-lambda\ 326}#
                                 #{s\ 3147}#
                                 #{meta\ 3165}#
                                 #{lcase\ 3166}#))))
                         #{tmp\ 3155}#)
                  ((lambda (#{_\ 3170}#)
                     (syntax-violation
                       'lambda
                       "bad lambda*"
                       #{e\ 3144}#))
                   #{tmp\ 3154}#)))
              ($sc-dispatch
                #{tmp\ 3154}#
                '(any any any . each-any))))
           #{e\ 3144}#)))
      (#{global-extend\ 378}#
        'core
        'case-lambda
        (lambda (#{e\ 3171}#
                 #{r\ 3172}#
                 #{w\ 3173}#
                 #{s\ 3174}#
                 #{mod\ 3175}#)
          ((lambda (#{tmp\ 3181}#)
             ((lambda (#{tmp\ 3182}#)
                (if #{tmp\ 3182}#
                  (apply (lambda (#{_\ 3190}#
                                  #{args\ 3191}#
                                  #{e1\ 3192}#
                                  #{e2\ 3193}#
                                  #{args*\ 3194}#
                                  #{e1*\ 3195}#
                                  #{e2*\ 3196}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 491}#
                                 #{e\ 3171}#
                                 #{r\ 3172}#
                                 #{w\ 3173}#
                                 #{s\ 3174}#
                                 #{mod\ 3175}#
                                 #{lambda-formals\ 485}#
                                 (cons (cons #{args\ 3191}#
                                             (cons #{e1\ 3192}# #{e2\ 3193}#))
                                       (map (lambda (#{tmp\ 3200}#
                                                     #{tmp\ 3199}#
                                                     #{tmp\ 3198}#)
                                              (cons #{tmp\ 3198}#
                                                    (cons #{tmp\ 3199}#
                                                          #{tmp\ 3200}#)))
                                            #{e2*\ 3196}#
                                            #{e1*\ 3195}#
                                            #{args*\ 3194}#))))
                             (lambda (#{meta\ 3202}# #{lcase\ 3203}#)
                               (#{build-case-lambda\ 326}#
                                 #{s\ 3174}#
                                 #{meta\ 3202}#
                                 #{lcase\ 3203}#))))
                         #{tmp\ 3182}#)
                  ((lambda (#{_\ 3207}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda"
                       #{e\ 3171}#))
                   #{tmp\ 3181}#)))
              ($sc-dispatch
                #{tmp\ 3181}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 3171}#)))
      (#{global-extend\ 378}#
        'core
        'case-lambda*
        (lambda (#{e\ 3208}#
                 #{r\ 3209}#
                 #{w\ 3210}#
                 #{s\ 3211}#
                 #{mod\ 3212}#)
          ((lambda (#{tmp\ 3218}#)
             ((lambda (#{tmp\ 3219}#)
                (if #{tmp\ 3219}#
                  (apply (lambda (#{_\ 3227}#
                                  #{args\ 3228}#
                                  #{e1\ 3229}#
                                  #{e2\ 3230}#
                                  #{args*\ 3231}#
                                  #{e1*\ 3232}#
                                  #{e2*\ 3233}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 491}#
                                 #{e\ 3208}#
                                 #{r\ 3209}#
                                 #{w\ 3210}#
                                 #{s\ 3211}#
                                 #{mod\ 3212}#
                                 #{lambda*-formals\ 489}#
                                 (cons (cons #{args\ 3228}#
                                             (cons #{e1\ 3229}# #{e2\ 3230}#))
                                       (map (lambda (#{tmp\ 3237}#
                                                     #{tmp\ 3236}#
                                                     #{tmp\ 3235}#)
                                              (cons #{tmp\ 3235}#
                                                    (cons #{tmp\ 3236}#
                                                          #{tmp\ 3237}#)))
                                            #{e2*\ 3233}#
                                            #{e1*\ 3232}#
                                            #{args*\ 3231}#))))
                             (lambda (#{meta\ 3239}# #{lcase\ 3240}#)
                               (#{build-case-lambda\ 326}#
                                 #{s\ 3211}#
                                 #{meta\ 3239}#
                                 #{lcase\ 3240}#))))
                         #{tmp\ 3219}#)
                  ((lambda (#{_\ 3244}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda*"
                       #{e\ 3208}#))
                   #{tmp\ 3218}#)))
              ($sc-dispatch
                #{tmp\ 3218}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 3208}#)))
      (#{global-extend\ 378}#
        'core
        'let
        (letrec*
          ((#{chi-let\ 3246}#
             (lambda (#{e\ 3247}#
                      #{r\ 3248}#
                      #{w\ 3249}#
                      #{s\ 3250}#
                      #{mod\ 3251}#
                      #{constructor\ 3252}#
                      #{ids\ 3253}#
                      #{vals\ 3254}#
                      #{exps\ 3255}#)
               (if (not (#{valid-bound-ids?\ 445}# #{ids\ 3253}#))
                 (syntax-violation
                   'let
                   "duplicate bound variable"
                   #{e\ 3247}#)
                 (let ((#{labels\ 3267}#
                         (#{gen-labels\ 400}# #{ids\ 3253}#))
                       (#{new-vars\ 3268}#
                         (map #{gen-var\ 495}# #{ids\ 3253}#)))
                   (let ((#{nw\ 3271}#
                           (#{make-binding-wrap\ 429}#
                             #{ids\ 3253}#
                             #{labels\ 3267}#
                             #{w\ 3249}#))
                         (#{nr\ 3272}#
                           (#{extend-var-env\ 372}#
                             #{labels\ 3267}#
                             #{new-vars\ 3268}#
                             #{r\ 3248}#)))
                     (#{constructor\ 3252}#
                       #{s\ 3250}#
                       (map syntax->datum #{ids\ 3253}#)
                       #{new-vars\ 3268}#
                       (map (lambda (#{x\ 3273}#)
                              (#{chi\ 467}#
                                #{x\ 3273}#
                                #{r\ 3248}#
                                #{w\ 3249}#
                                #{mod\ 3251}#))
                            #{vals\ 3254}#)
                       (#{chi-body\ 475}#
                         #{exps\ 3255}#
                         (#{source-wrap\ 453}#
                           #{e\ 3247}#
                           #{nw\ 3271}#
                           #{s\ 3250}#
                           #{mod\ 3251}#)
                         #{nr\ 3272}#
                         #{nw\ 3271}#
                         #{mod\ 3251}#))))))))
          (lambda (#{e\ 3275}#
                   #{r\ 3276}#
                   #{w\ 3277}#
                   #{s\ 3278}#
                   #{mod\ 3279}#)
            ((lambda (#{tmp\ 3285}#)
               ((lambda (#{tmp\ 3286}#)
                  (if (if #{tmp\ 3286}#
                        (apply (lambda (#{_\ 3292}#
                                        #{id\ 3293}#
                                        #{val\ 3294}#
                                        #{e1\ 3295}#
                                        #{e2\ 3296}#)
                                 (and-map #{id?\ 382}# #{id\ 3293}#))
                               #{tmp\ 3286}#)
                        #f)
                    (apply (lambda (#{_\ 3303}#
                                    #{id\ 3304}#
                                    #{val\ 3305}#
                                    #{e1\ 3306}#
                                    #{e2\ 3307}#)
                             (#{chi-let\ 3246}#
                               #{e\ 3275}#
                               #{r\ 3276}#
                               #{w\ 3277}#
                               #{s\ 3278}#
                               #{mod\ 3279}#
                               #{build-let\ 336}#
                               #{id\ 3304}#
                               #{val\ 3305}#
                               (cons #{e1\ 3306}# #{e2\ 3307}#)))
                           #{tmp\ 3286}#)
                    ((lambda (#{tmp\ 3311}#)
                       (if (if #{tmp\ 3311}#
                             (apply (lambda (#{_\ 3318}#
                                             #{f\ 3319}#
                                             #{id\ 3320}#
                                             #{val\ 3321}#
                                             #{e1\ 3322}#
                                             #{e2\ 3323}#)
                                      (if (#{id?\ 382}# #{f\ 3319}#)
                                        (and-map #{id?\ 382}# #{id\ 3320}#)
                                        #f))
                                    #{tmp\ 3311}#)
                             #f)
                         (apply (lambda (#{_\ 3333}#
                                         #{f\ 3334}#
                                         #{id\ 3335}#
                                         #{val\ 3336}#
                                         #{e1\ 3337}#
                                         #{e2\ 3338}#)
                                  (#{chi-let\ 3246}#
                                    #{e\ 3275}#
                                    #{r\ 3276}#
                                    #{w\ 3277}#
                                    #{s\ 3278}#
                                    #{mod\ 3279}#
                                    #{build-named-let\ 338}#
                                    (cons #{f\ 3334}# #{id\ 3335}#)
                                    #{val\ 3336}#
                                    (cons #{e1\ 3337}# #{e2\ 3338}#)))
                                #{tmp\ 3311}#)
                         ((lambda (#{_\ 3343}#)
                            (syntax-violation
                              'let
                              "bad let"
                              (#{source-wrap\ 453}#
                                #{e\ 3275}#
                                #{w\ 3277}#
                                #{s\ 3278}#
                                #{mod\ 3279}#)))
                          #{tmp\ 3285}#)))
                     ($sc-dispatch
                       #{tmp\ 3285}#
                       '(any any #(each (any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 3285}#
                  '(any #(each (any any)) any . each-any))))
             #{e\ 3275}#))))
      (#{global-extend\ 378}#
        'core
        'letrec
        (lambda (#{e\ 3344}#
                 #{r\ 3345}#
                 #{w\ 3346}#
                 #{s\ 3347}#
                 #{mod\ 3348}#)
          ((lambda (#{tmp\ 3354}#)
             ((lambda (#{tmp\ 3355}#)
                (if (if #{tmp\ 3355}#
                      (apply (lambda (#{_\ 3361}#
                                      #{id\ 3362}#
                                      #{val\ 3363}#
                                      #{e1\ 3364}#
                                      #{e2\ 3365}#)
                               (and-map #{id?\ 382}# #{id\ 3362}#))
                             #{tmp\ 3355}#)
                      #f)
                  (apply (lambda (#{_\ 3372}#
                                  #{id\ 3373}#
                                  #{val\ 3374}#
                                  #{e1\ 3375}#
                                  #{e2\ 3376}#)
                           (let ((#{ids\ 3378}# #{id\ 3373}#))
                             (if (not (#{valid-bound-ids?\ 445}#
                                        #{ids\ 3378}#))
                               (syntax-violation
                                 'letrec
                                 "duplicate bound variable"
                                 #{e\ 3344}#)
                               (let ((#{labels\ 3382}#
                                       (#{gen-labels\ 400}# #{ids\ 3378}#))
                                     (#{new-vars\ 3383}#
                                       (map #{gen-var\ 495}# #{ids\ 3378}#)))
                                 (let ((#{w\ 3386}#
                                         (#{make-binding-wrap\ 429}#
                                           #{ids\ 3378}#
                                           #{labels\ 3382}#
                                           #{w\ 3346}#))
                                       (#{r\ 3387}#
                                         (#{extend-var-env\ 372}#
                                           #{labels\ 3382}#
                                           #{new-vars\ 3383}#
                                           #{r\ 3345}#)))
                                   (#{build-letrec\ 340}#
                                     #{s\ 3347}#
                                     #f
                                     (map syntax->datum #{ids\ 3378}#)
                                     #{new-vars\ 3383}#
                                     (map (lambda (#{x\ 3388}#)
                                            (#{chi\ 467}#
                                              #{x\ 3388}#
                                              #{r\ 3387}#
                                              #{w\ 3386}#
                                              #{mod\ 3348}#))
                                          #{val\ 3374}#)
                                     (#{chi-body\ 475}#
                                       (cons #{e1\ 3375}# #{e2\ 3376}#)
                                       (#{source-wrap\ 453}#
                                         #{e\ 3344}#
                                         #{w\ 3386}#
                                         #{s\ 3347}#
                                         #{mod\ 3348}#)
                                       #{r\ 3387}#
                                       #{w\ 3386}#
                                       #{mod\ 3348}#)))))))
                         #{tmp\ 3355}#)
                  ((lambda (#{_\ 3393}#)
                     (syntax-violation
                       'letrec
                       "bad letrec"
                       (#{source-wrap\ 453}#
                         #{e\ 3344}#
                         #{w\ 3346}#
                         #{s\ 3347}#
                         #{mod\ 3348}#)))
                   #{tmp\ 3354}#)))
              ($sc-dispatch
                #{tmp\ 3354}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3344}#)))
      (#{global-extend\ 378}#
        'core
        'letrec*
        (lambda (#{e\ 3394}#
                 #{r\ 3395}#
                 #{w\ 3396}#
                 #{s\ 3397}#
                 #{mod\ 3398}#)
          ((lambda (#{tmp\ 3404}#)
             ((lambda (#{tmp\ 3405}#)
                (if (if #{tmp\ 3405}#
                      (apply (lambda (#{_\ 3411}#
                                      #{id\ 3412}#
                                      #{val\ 3413}#
                                      #{e1\ 3414}#
                                      #{e2\ 3415}#)
                               (and-map #{id?\ 382}# #{id\ 3412}#))
                             #{tmp\ 3405}#)
                      #f)
                  (apply (lambda (#{_\ 3422}#
                                  #{id\ 3423}#
                                  #{val\ 3424}#
                                  #{e1\ 3425}#
                                  #{e2\ 3426}#)
                           (let ((#{ids\ 3428}# #{id\ 3423}#))
                             (if (not (#{valid-bound-ids?\ 445}#
                                        #{ids\ 3428}#))
                               (syntax-violation
                                 'letrec*
                                 "duplicate bound variable"
                                 #{e\ 3394}#)
                               (let ((#{labels\ 3432}#
                                       (#{gen-labels\ 400}# #{ids\ 3428}#))
                                     (#{new-vars\ 3433}#
                                       (map #{gen-var\ 495}# #{ids\ 3428}#)))
                                 (let ((#{w\ 3436}#
                                         (#{make-binding-wrap\ 429}#
                                           #{ids\ 3428}#
                                           #{labels\ 3432}#
                                           #{w\ 3396}#))
                                       (#{r\ 3437}#
                                         (#{extend-var-env\ 372}#
                                           #{labels\ 3432}#
                                           #{new-vars\ 3433}#
                                           #{r\ 3395}#)))
                                   (#{build-letrec\ 340}#
                                     #{s\ 3397}#
                                     #t
                                     (map syntax->datum #{ids\ 3428}#)
                                     #{new-vars\ 3433}#
                                     (map (lambda (#{x\ 3438}#)
                                            (#{chi\ 467}#
                                              #{x\ 3438}#
                                              #{r\ 3437}#
                                              #{w\ 3436}#
                                              #{mod\ 3398}#))
                                          #{val\ 3424}#)
                                     (#{chi-body\ 475}#
                                       (cons #{e1\ 3425}# #{e2\ 3426}#)
                                       (#{source-wrap\ 453}#
                                         #{e\ 3394}#
                                         #{w\ 3436}#
                                         #{s\ 3397}#
                                         #{mod\ 3398}#)
                                       #{r\ 3437}#
                                       #{w\ 3436}#
                                       #{mod\ 3398}#)))))))
                         #{tmp\ 3405}#)
                  ((lambda (#{_\ 3443}#)
                     (syntax-violation
                       'letrec*
                       "bad letrec*"
                       (#{source-wrap\ 453}#
                         #{e\ 3394}#
                         #{w\ 3396}#
                         #{s\ 3397}#
                         #{mod\ 3398}#)))
                   #{tmp\ 3404}#)))
              ($sc-dispatch
                #{tmp\ 3404}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3394}#)))
      (#{global-extend\ 378}#
        'core
        'set!
        (lambda (#{e\ 3444}#
                 #{r\ 3445}#
                 #{w\ 3446}#
                 #{s\ 3447}#
                 #{mod\ 3448}#)
          ((lambda (#{tmp\ 3454}#)
             ((lambda (#{tmp\ 3455}#)
                (if (if #{tmp\ 3455}#
                      (apply (lambda (#{_\ 3459}# #{id\ 3460}# #{val\ 3461}#)
                               (#{id?\ 382}# #{id\ 3460}#))
                             #{tmp\ 3455}#)
                      #f)
                  (apply (lambda (#{_\ 3465}# #{id\ 3466}# #{val\ 3467}#)
                           (let ((#{val\ 3470}#
                                   (#{chi\ 467}#
                                     #{val\ 3467}#
                                     #{r\ 3445}#
                                     #{w\ 3446}#
                                     #{mod\ 3448}#))
                                 (#{n\ 3471}#
                                   (#{id-var-name\ 439}#
                                     #{id\ 3466}#
                                     #{w\ 3446}#)))
                             (let ((#{b\ 3473}#
                                     (#{lookup\ 376}#
                                       #{n\ 3471}#
                                       #{r\ 3445}#
                                       #{mod\ 3448}#)))
                               (let ((#{atom-key\ 3476}#
                                       (#{binding-type\ 365}# #{b\ 3473}#)))
                                 (if (memv #{atom-key\ 3476}#
                                           '(lexical))
                                   (#{build-lexical-assignment\ 312}#
                                     #{s\ 3447}#
                                     (syntax->datum #{id\ 3466}#)
                                     (#{binding-value\ 367}# #{b\ 3473}#)
                                     #{val\ 3470}#)
                                   (if (memv #{atom-key\ 3476}#
                                             '(global))
                                     (#{build-global-assignment\ 318}#
                                       #{s\ 3447}#
                                       #{n\ 3471}#
                                       #{val\ 3470}#
                                       #{mod\ 3448}#)
                                     (if (memv #{atom-key\ 3476}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'set!
                                         "identifier out of context"
                                         (#{wrap\ 451}#
                                           #{id\ 3466}#
                                           #{w\ 3446}#
                                           #{mod\ 3448}#))
                                       (syntax-violation
                                         'set!
                                         "bad set!"
                                         (#{source-wrap\ 453}#
                                           #{e\ 3444}#
                                           #{w\ 3446}#
                                           #{s\ 3447}#
                                           #{mod\ 3448}#)))))))))
                         #{tmp\ 3455}#)
                  ((lambda (#{tmp\ 3481}#)
                     (if #{tmp\ 3481}#
                       (apply (lambda (#{_\ 3486}#
                                       #{head\ 3487}#
                                       #{tail\ 3488}#
                                       #{val\ 3489}#)
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type\ 463}#
                                      #{head\ 3487}#
                                      #{r\ 3445}#
                                      '(())
                                      #f
                                      #f
                                      #{mod\ 3448}#
                                      #t))
                                  (lambda (#{type\ 3492}#
                                           #{value\ 3493}#
                                           #{ee\ 3494}#
                                           #{ww\ 3495}#
                                           #{ss\ 3496}#
                                           #{modmod\ 3497}#)
                                    (if (memv #{type\ 3492}#
                                              '(module-ref))
                                      (let ((#{val\ 3506}#
                                              (#{chi\ 467}#
                                                #{val\ 3489}#
                                                #{r\ 3445}#
                                                #{w\ 3446}#
                                                #{mod\ 3448}#)))
                                        (call-with-values
                                          (lambda ()
                                            (#{value\ 3493}#
                                              (cons #{head\ 3487}#
                                                    #{tail\ 3488}#)
                                              #{r\ 3445}#
                                              #{w\ 3446}#))
                                          (lambda (#{e\ 3508}#
                                                   #{r\ 3509}#
                                                   #{w\ 3510}#
                                                   #{s*\ 3511}#
                                                   #{mod\ 3512}#)
                                            ((lambda (#{tmp\ 3518}#)
                                               ((lambda (#{tmp\ 3519}#)
                                                  (if (if #{tmp\ 3519}#
                                                        (apply (lambda (#{e\ 3521}#)
                                                                 (#{id?\ 382}#
                                                                   #{e\ 3521}#))
                                                               #{tmp\ 3519}#)
                                                        #f)
                                                    (apply (lambda (#{e\ 3523}#)
                                                             (#{build-global-assignment\ 318}#
                                                               #{s\ 3447}#
                                                               (syntax->datum
                                                                 #{e\ 3523}#)
                                                               #{val\ 3506}#
                                                               #{mod\ 3512}#))
                                                           #{tmp\ 3519}#)
                                                    (syntax-violation
                                                      #f
                                                      "source expression failed to match any pattern"
                                                      #{tmp\ 3518}#)))
                                                (list #{tmp\ 3518}#)))
                                             #{e\ 3508}#))))
                                      (#{build-application\ 304}#
                                        #{s\ 3447}#
                                        (#{chi\ 467}#
                                          (list '#(syntax-object
                                                   setter
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(type
                                                        value
                                                        ee
                                                        ww
                                                        ss
                                                        modmod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3498"
                                                        "i3499"
                                                        "i3500"
                                                        "i3501"
                                                        "i3502"
                                                        "i3503"))
                                                    #(ribcage
                                                      #(_ head tail val)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3482"
                                                        "i3483"
                                                        "i3484"
                                                        "i3485"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e r w s mod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3449"
                                                        "i3450"
                                                        "i3451"
                                                        "i3452"
                                                        "i3453"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i496"
                                                       "i494"
                                                       "i492"
                                                       "i490"
                                                       "i488"
                                                       "i486"
                                                       "i484"
                                                       "i482"
                                                       "i480"
                                                       "i478"
                                                       "i476"
                                                       "i474"
                                                       "i472"
                                                       "i470"
                                                       "i468"
                                                       "i466"
                                                       "i464"
                                                       "i462"
                                                       "i460"
                                                       "i458"
                                                       "i456"
                                                       "i454"
                                                       "i452"
                                                       "i450"
                                                       "i448"
                                                       "i446"
                                                       "i444"
                                                       "i442"
                                                       "i440"
                                                       "i438"
                                                       "i436"
                                                       "i434"
                                                       "i432"
                                                       "i430"
                                                       "i428"
                                                       "i426"
                                                       "i425"
                                                       "i424"
                                                       "i422"
                                                       "i421"
                                                       "i420"
                                                       "i419"
                                                       "i418"
                                                       "i416"
                                                       "i414"
                                                       "i412"
                                                       "i410"
                                                       "i408"
                                                       "i406"
                                                       "i404"
                                                       "i402"
                                                       "i399"
                                                       "i397"
                                                       "i396"
                                                       "i395"
                                                       "i394"
                                                       "i393"
                                                       "i392"
                                                       "i390"
                                                       "i388"
                                                       "i386"
                                                       "i384"
                                                       "i383"
                                                       "i381"
                                                       "i379"
                                                       "i377"
                                                       "i375"
                                                       "i373"
                                                       "i371"
                                                       "i369"
                                                       "i368"
                                                       "i366"
                                                       "i364"
                                                       "i363"
                                                       "i362"
                                                       "i360"
                                                       "i359"
                                                       "i357"
                                                       "i355"
                                                       "i353"
                                                       "i351"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i329"
                                                       "i327"
                                                       "i325"
                                                       "i323"
                                                       "i321"
                                                       "i319"
                                                       "i317"
                                                       "i315"
                                                       "i313"
                                                       "i311"
                                                       "i309"
                                                       "i307"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i294"
                                                       "i292"
                                                       "i290"
                                                       "i288"
                                                       "i286"
                                                       "i284"
                                                       "i282"
                                                       "i280"
                                                       "i278"
                                                       "i276"
                                                       "i273"
                                                       "i271"
                                                       "i269"
                                                       "i267"
                                                       "i265"
                                                       "i263"
                                                       "i261"
                                                       "i259"
                                                       "i257"
                                                       "i255"
                                                       "i253"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i243"
                                                       "i241"
                                                       "i239"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top) (top))
                                                      ("i33"
                                                       "i32"
                                                       "i31"
                                                       "i29")))
                                                   (hygiene guile))
                                                #{head\ 3487}#)
                                          #{r\ 3445}#
                                          #{w\ 3446}#
                                          #{mod\ 3448}#)
                                        (map (lambda (#{e\ 3525}#)
                                               (#{chi\ 467}#
                                                 #{e\ 3525}#
                                                 #{r\ 3445}#
                                                 #{w\ 3446}#
                                                 #{mod\ 3448}#))
                                             (append
                                               #{tail\ 3488}#
                                               (list #{val\ 3489}#))))))))
                              #{tmp\ 3481}#)
                       ((lambda (#{_\ 3529}#)
                          (syntax-violation
                            'set!
                            "bad set!"
                            (#{source-wrap\ 453}#
                              #{e\ 3444}#
                              #{w\ 3446}#
                              #{s\ 3447}#
                              #{mod\ 3448}#)))
                        #{tmp\ 3454}#)))
                   ($sc-dispatch
                     #{tmp\ 3454}#
                     '(any (any . each-any) any)))))
              ($sc-dispatch
                #{tmp\ 3454}#
                '(any any any))))
           #{e\ 3444}#)))
      (#{global-extend\ 378}#
        'module-ref
        '@
        (lambda (#{e\ 3530}# #{r\ 3531}# #{w\ 3532}#)
          ((lambda (#{tmp\ 3536}#)
             ((lambda (#{tmp\ 3537}#)
                (if (if #{tmp\ 3537}#
                      (apply (lambda (#{_\ 3541}# #{mod\ 3542}# #{id\ 3543}#)
                               (if (and-map #{id?\ 382}# #{mod\ 3542}#)
                                 (#{id?\ 382}# #{id\ 3543}#)
                                 #f))
                             #{tmp\ 3537}#)
                      #f)
                  (apply (lambda (#{_\ 3550}# #{mod\ 3551}# #{id\ 3552}#)
                           (values
                             (syntax->datum #{id\ 3552}#)
                             #{r\ 3531}#
                             #{w\ 3532}#
                             #f
                             (syntax->datum
                               (cons '#(syntax-object
                                        public
                                        ((top)
                                         #(ribcage
                                           #(_ mod id)
                                           #((top) (top) (top))
                                           #("i3547" "i3548" "i3549"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(e r w)
                                           #((top) (top) (top))
                                           #("i3533" "i3534" "i3535"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             chi-lambda-case
                                             lambda*-formals
                                             chi-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             chi-void
                                             eval-local-transformer
                                             chi-local-syntax
                                             chi-body
                                             chi-macro
                                             chi-application
                                             chi-expr
                                             chi
                                             chi-top
                                             syntax-type
                                             chi-when-list
                                             chi-install-global
                                             chi-top-sequence
                                             chi-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             maybe-name-value!
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             set-lambda-meta!
                                             lambda-meta
                                             lambda?
                                             make-dynlet
                                             make-letrec
                                             make-let
                                             make-lambda-case
                                             make-lambda
                                             make-sequence
                                             make-application
                                             make-conditional
                                             make-toplevel-define
                                             make-toplevel-set
                                             make-toplevel-ref
                                             make-module-set
                                             make-module-ref
                                             make-lexical-set
                                             make-lexical-ref
                                             make-primitive-ref
                                             make-const
                                             make-void)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i496"
                                            "i494"
                                            "i492"
                                            "i490"
                                            "i488"
                                            "i486"
                                            "i484"
                                            "i482"
                                            "i480"
                                            "i478"
                                            "i476"
                                            "i474"
                                            "i472"
                                            "i470"
                                            "i468"
                                            "i466"
                                            "i464"
                                            "i462"
                                            "i460"
                                            "i458"
                                            "i456"
                                            "i454"
                                            "i452"
                                            "i450"
                                            "i448"
                                            "i446"
                                            "i444"
                                            "i442"
                                            "i440"
                                            "i438"
                                            "i436"
                                            "i434"
                                            "i432"
                                            "i430"
                                            "i428"
                                            "i426"
                                            "i425"
                                            "i424"
                                            "i422"
                                            "i421"
                                            "i420"
                                            "i419"
                                            "i418"
                                            "i416"
                                            "i414"
                                            "i412"
                                            "i410"
                                            "i408"
                                            "i406"
                                            "i404"
                                            "i402"
                                            "i399"
                                            "i397"
                                            "i396"
                                            "i395"
                                            "i394"
                                            "i393"
                                            "i392"
                                            "i390"
                                            "i388"
                                            "i386"
                                            "i384"
                                            "i383"
                                            "i381"
                                            "i379"
                                            "i377"
                                            "i375"
                                            "i373"
                                            "i371"
                                            "i369"
                                            "i368"
                                            "i366"
                                            "i364"
                                            "i363"
                                            "i362"
                                            "i360"
                                            "i359"
                                            "i357"
                                            "i355"
                                            "i353"
                                            "i351"
                                            "i349"
                                            "i347"
                                            "i345"
                                            "i343"
                                            "i341"
                                            "i339"
                                            "i337"
                                            "i335"
                                            "i333"
                                            "i331"
                                            "i329"
                                            "i327"
                                            "i325"
                                            "i323"
                                            "i321"
                                            "i319"
                                            "i317"
                                            "i315"
                                            "i313"
                                            "i311"
                                            "i309"
                                            "i307"
                                            "i305"
                                            "i303"
                                            "i301"
                                            "i299"
                                            "i297"
                                            "i295"
                                            "i294"
                                            "i292"
                                            "i290"
                                            "i288"
                                            "i286"
                                            "i284"
                                            "i282"
                                            "i280"
                                            "i278"
                                            "i276"
                                            "i273"
                                            "i271"
                                            "i269"
                                            "i267"
                                            "i265"
                                            "i263"
                                            "i261"
                                            "i259"
                                            "i257"
                                            "i255"
                                            "i253"
                                            "i251"
                                            "i249"
                                            "i247"
                                            "i245"
                                            "i243"
                                            "i241"
                                            "i239"))
                                         #(ribcage
                                           (define-structure
                                             define-expansion-accessors
                                             define-expansion-constructors
                                             and-map*)
                                           ((top) (top) (top) (top))
                                           ("i33" "i32" "i31" "i29")))
                                        (hygiene guile))
                                     #{mod\ 3551}#))))
                         #{tmp\ 3537}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 3536}#)))
              ($sc-dispatch
                #{tmp\ 3536}#
                '(any each-any any))))
           #{e\ 3530}#)))
      (#{global-extend\ 378}#
        'module-ref
        '@@
        (lambda (#{e\ 3554}# #{r\ 3555}# #{w\ 3556}#)
          (letrec*
            ((#{remodulate\ 3561}#
               (lambda (#{x\ 3562}# #{mod\ 3563}#)
                 (if (pair? #{x\ 3562}#)
                   (cons (#{remodulate\ 3561}#
                           (car #{x\ 3562}#)
                           #{mod\ 3563}#)
                         (#{remodulate\ 3561}#
                           (cdr #{x\ 3562}#)
                           #{mod\ 3563}#))
                   (if (#{syntax-object?\ 346}# #{x\ 3562}#)
                     (#{make-syntax-object\ 344}#
                       (#{remodulate\ 3561}#
                         (#{syntax-object-expression\ 348}# #{x\ 3562}#)
                         #{mod\ 3563}#)
                       (#{syntax-object-wrap\ 350}# #{x\ 3562}#)
                       #{mod\ 3563}#)
                     (if (vector? #{x\ 3562}#)
                       (let ((#{n\ 3574}# (vector-length #{x\ 3562}#)))
                         (let ((#{v\ 3576}# (make-vector #{n\ 3574}#)))
                           (letrec ((#{loop\ 3579}#
                                      (lambda (#{i\ 3580}#)
                                        (if (#{fx=\ 287}#
                                              #{i\ 3580}#
                                              #{n\ 3574}#)
                                          (begin (if #f #f) #{v\ 3576}#)
                                          (begin
                                            (vector-set!
                                              #{v\ 3576}#
                                              #{i\ 3580}#
                                              (#{remodulate\ 3561}#
                                                (vector-ref
                                                  #{x\ 3562}#
                                                  #{i\ 3580}#)
                                                #{mod\ 3563}#))
                                            (#{loop\ 3579}#
                                              (#{fx+\ 283}#
                                                #{i\ 3580}#
                                                1)))))))
                             (#{loop\ 3579}# 0))))
                       #{x\ 3562}#))))))
            ((lambda (#{tmp\ 3584}#)
               ((lambda (#{tmp\ 3585}#)
                  (if (if #{tmp\ 3585}#
                        (apply (lambda (#{_\ 3589}#
                                        #{mod\ 3590}#
                                        #{exp\ 3591}#)
                                 (and-map #{id?\ 382}# #{mod\ 3590}#))
                               #{tmp\ 3585}#)
                        #f)
                    (apply (lambda (#{_\ 3596}# #{mod\ 3597}# #{exp\ 3598}#)
                             (let ((#{mod\ 3600}#
                                     (syntax->datum
                                       (cons '#(syntax-object
                                                private
                                                ((top)
                                                 #(ribcage
                                                   #(_ mod exp)
                                                   #((top) (top) (top))
                                                   #("i3593" "i3594" "i3595"))
                                                 #(ribcage
                                                   (remodulate)
                                                   ((top))
                                                   ("i3560"))
                                                 #(ribcage
                                                   #(e r w)
                                                   #((top) (top) (top))
                                                   #("i3557" "i3558" "i3559"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     chi-lambda-case
                                                     lambda*-formals
                                                     chi-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     chi-void
                                                     eval-local-transformer
                                                     chi-local-syntax
                                                     chi-body
                                                     chi-macro
                                                     chi-application
                                                     chi-expr
                                                     chi
                                                     chi-top
                                                     syntax-type
                                                     chi-when-list
                                                     chi-install-global
                                                     chi-top-sequence
                                                     chi-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     maybe-name-value!
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     set-lambda-meta!
                                                     lambda-meta
                                                     lambda?
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i496"
                                                    "i494"
                                                    "i492"
                                                    "i490"
                                                    "i488"
                                                    "i486"
                                                    "i484"
                                                    "i482"
                                                    "i480"
                                                    "i478"
                                                    "i476"
                                                    "i474"
                                                    "i472"
                                                    "i470"
                                                    "i468"
                                                    "i466"
                                                    "i464"
                                                    "i462"
                                                    "i460"
                                                    "i458"
                                                    "i456"
                                                    "i454"
                                                    "i452"
                                                    "i450"
                                                    "i448"
                                                    "i446"
                                                    "i444"
                                                    "i442"
                                                    "i440"
                                                    "i438"
                                                    "i436"
                                                    "i434"
                                                    "i432"
                                                    "i430"
                                                    "i428"
                                                    "i426"
                                                    "i425"
                                                    "i424"
                                                    "i422"
                                                    "i421"
                                                    "i420"
                                                    "i419"
                                                    "i418"
                                                    "i416"
                                                    "i414"
                                                    "i412"
                                                    "i410"
                                                    "i408"
                                                    "i406"
                                                    "i404"
                                                    "i402"
                                                    "i399"
                                                    "i397"
                                                    "i396"
                                                    "i395"
                                                    "i394"
                                                    "i393"
                                                    "i392"
                                                    "i390"
                                                    "i388"
                                                    "i386"
                                                    "i384"
                                                    "i383"
                                                    "i381"
                                                    "i379"
                                                    "i377"
                                                    "i375"
                                                    "i373"
                                                    "i371"
                                                    "i369"
                                                    "i368"
                                                    "i366"
                                                    "i364"
                                                    "i363"
                                                    "i362"
                                                    "i360"
                                                    "i359"
                                                    "i357"
                                                    "i355"
                                                    "i353"
                                                    "i351"
                                                    "i349"
                                                    "i347"
                                                    "i345"
                                                    "i343"
                                                    "i341"
                                                    "i339"
                                                    "i337"
                                                    "i335"
                                                    "i333"
                                                    "i331"
                                                    "i329"
                                                    "i327"
                                                    "i325"
                                                    "i323"
                                                    "i321"
                                                    "i319"
                                                    "i317"
                                                    "i315"
                                                    "i313"
                                                    "i311"
                                                    "i309"
                                                    "i307"
                                                    "i305"
                                                    "i303"
                                                    "i301"
                                                    "i299"
                                                    "i297"
                                                    "i295"
                                                    "i294"
                                                    "i292"
                                                    "i290"
                                                    "i288"
                                                    "i286"
                                                    "i284"
                                                    "i282"
                                                    "i280"
                                                    "i278"
                                                    "i276"
                                                    "i273"
                                                    "i271"
                                                    "i269"
                                                    "i267"
                                                    "i265"
                                                    "i263"
                                                    "i261"
                                                    "i259"
                                                    "i257"
                                                    "i255"
                                                    "i253"
                                                    "i251"
                                                    "i249"
                                                    "i247"
                                                    "i245"
                                                    "i243"
                                                    "i241"
                                                    "i239"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-accessors
                                                     define-expansion-constructors
                                                     and-map*)
                                                   ((top) (top) (top) (top))
                                                   ("i33" "i32" "i31" "i29")))
                                                (hygiene guile))
                                             #{mod\ 3597}#))))
                               (values
                                 (#{remodulate\ 3561}#
                                   #{exp\ 3598}#
                                   #{mod\ 3600}#)
                                 #{r\ 3555}#
                                 #{w\ 3556}#
                                 (#{source-annotation\ 361}# #{exp\ 3598}#)
                                 #{mod\ 3600}#)))
                           #{tmp\ 3585}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 3584}#)))
                ($sc-dispatch
                  #{tmp\ 3584}#
                  '(any each-any any))))
             #{e\ 3554}#))))
      (#{global-extend\ 378}#
        'core
        'if
        (lambda (#{e\ 3602}#
                 #{r\ 3603}#
                 #{w\ 3604}#
                 #{s\ 3605}#
                 #{mod\ 3606}#)
          ((lambda (#{tmp\ 3612}#)
             ((lambda (#{tmp\ 3613}#)
                (if #{tmp\ 3613}#
                  (apply (lambda (#{_\ 3617}# #{test\ 3618}# #{then\ 3619}#)
                           (#{build-conditional\ 306}#
                             #{s\ 3605}#
                             (#{chi\ 467}#
                               #{test\ 3618}#
                               #{r\ 3603}#
                               #{w\ 3604}#
                               #{mod\ 3606}#)
                             (#{chi\ 467}#
                               #{then\ 3619}#
                               #{r\ 3603}#
                               #{w\ 3604}#
                               #{mod\ 3606}#)
                             (#{build-void\ 302}# #f)))
                         #{tmp\ 3613}#)
                  ((lambda (#{tmp\ 3621}#)
                     (if #{tmp\ 3621}#
                       (apply (lambda (#{_\ 3626}#
                                       #{test\ 3627}#
                                       #{then\ 3628}#
                                       #{else\ 3629}#)
                                (#{build-conditional\ 306}#
                                  #{s\ 3605}#
                                  (#{chi\ 467}#
                                    #{test\ 3627}#
                                    #{r\ 3603}#
                                    #{w\ 3604}#
                                    #{mod\ 3606}#)
                                  (#{chi\ 467}#
                                    #{then\ 3628}#
                                    #{r\ 3603}#
                                    #{w\ 3604}#
                                    #{mod\ 3606}#)
                                  (#{chi\ 467}#
                                    #{else\ 3629}#
                                    #{r\ 3603}#
                                    #{w\ 3604}#
                                    #{mod\ 3606}#)))
                              #{tmp\ 3621}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 3612}#)))
                   ($sc-dispatch
                     #{tmp\ 3612}#
                     '(any any any any)))))
              ($sc-dispatch
                #{tmp\ 3612}#
                '(any any any))))
           #{e\ 3602}#)))
      (#{global-extend\ 378}#
        'core
        'with-fluids
        (lambda (#{e\ 3630}#
                 #{r\ 3631}#
                 #{w\ 3632}#
                 #{s\ 3633}#
                 #{mod\ 3634}#)
          ((lambda (#{tmp\ 3640}#)
             ((lambda (#{tmp\ 3641}#)
                (if #{tmp\ 3641}#
                  (apply (lambda (#{_\ 3647}#
                                  #{fluid\ 3648}#
                                  #{val\ 3649}#
                                  #{b\ 3650}#
                                  #{b*\ 3651}#)
                           (#{build-dynlet\ 308}#
                             #{s\ 3633}#
                             (map (lambda (#{x\ 3652}#)
                                    (#{chi\ 467}#
                                      #{x\ 3652}#
                                      #{r\ 3631}#
                                      #{w\ 3632}#
                                      #{mod\ 3634}#))
                                  #{fluid\ 3648}#)
                             (map (lambda (#{x\ 3655}#)
                                    (#{chi\ 467}#
                                      #{x\ 3655}#
                                      #{r\ 3631}#
                                      #{w\ 3632}#
                                      #{mod\ 3634}#))
                                  #{val\ 3649}#)
                             (#{chi-body\ 475}#
                               (cons #{b\ 3650}# #{b*\ 3651}#)
                               (#{source-wrap\ 453}#
                                 #{e\ 3630}#
                                 #{w\ 3632}#
                                 #{s\ 3633}#
                                 #{mod\ 3634}#)
                               #{r\ 3631}#
                               #{w\ 3632}#
                               #{mod\ 3634}#)))
                         #{tmp\ 3641}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 3640}#)))
              ($sc-dispatch
                #{tmp\ 3640}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3630}#)))
      (#{global-extend\ 378}#
        'begin
        'begin
        '())
      (#{global-extend\ 378}#
        'define
        'define
        '())
      (#{global-extend\ 378}#
        'define-syntax
        'define-syntax
        '())
      (#{global-extend\ 378}#
        'eval-when
        'eval-when
        '())
      (#{global-extend\ 378}#
        'core
        'syntax-case
        (letrec*
          ((#{gen-syntax-case\ 3666}#
             (lambda (#{x\ 3667}#
                      #{keys\ 3668}#
                      #{clauses\ 3669}#
                      #{r\ 3670}#
                      #{mod\ 3671}#)
               (if (null? #{clauses\ 3669}#)
                 (#{build-application\ 304}#
                   #f
                   (#{build-primref\ 330}#
                     #f
                     'syntax-violation)
                   (list (#{build-data\ 332}# #f #f)
                         (#{build-data\ 332}#
                           #f
                           "source expression failed to match any pattern")
                         #{x\ 3667}#))
                 ((lambda (#{tmp\ 3681}#)
                    ((lambda (#{tmp\ 3682}#)
                       (if #{tmp\ 3682}#
                         (apply (lambda (#{pat\ 3685}# #{exp\ 3686}#)
                                  (if (if (#{id?\ 382}# #{pat\ 3685}#)
                                        (and-map
                                          (lambda (#{x\ 3689}#)
                                            (not (#{free-id=?\ 441}#
                                                   #{pat\ 3685}#
                                                   #{x\ 3689}#)))
                                          (cons '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage
                                                      #(pat exp)
                                                      #((top) (top))
                                                      #("i3683" "i3684"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x keys clauses r mod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3672"
                                                        "i3673"
                                                        "i3674"
                                                        "i3675"
                                                        "i3676"))
                                                    #(ribcage
                                                      (gen-syntax-case
                                                        gen-clause
                                                        build-dispatch-call
                                                        convert-pattern)
                                                      ((top) (top) (top) (top))
                                                      ("i3665"
                                                       "i3663"
                                                       "i3661"
                                                       "i3659"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i496"
                                                       "i494"
                                                       "i492"
                                                       "i490"
                                                       "i488"
                                                       "i486"
                                                       "i484"
                                                       "i482"
                                                       "i480"
                                                       "i478"
                                                       "i476"
                                                       "i474"
                                                       "i472"
                                                       "i470"
                                                       "i468"
                                                       "i466"
                                                       "i464"
                                                       "i462"
                                                       "i460"
                                                       "i458"
                                                       "i456"
                                                       "i454"
                                                       "i452"
                                                       "i450"
                                                       "i448"
                                                       "i446"
                                                       "i444"
                                                       "i442"
                                                       "i440"
                                                       "i438"
                                                       "i436"
                                                       "i434"
                                                       "i432"
                                                       "i430"
                                                       "i428"
                                                       "i426"
                                                       "i425"
                                                       "i424"
                                                       "i422"
                                                       "i421"
                                                       "i420"
                                                       "i419"
                                                       "i418"
                                                       "i416"
                                                       "i414"
                                                       "i412"
                                                       "i410"
                                                       "i408"
                                                       "i406"
                                                       "i404"
                                                       "i402"
                                                       "i399"
                                                       "i397"
                                                       "i396"
                                                       "i395"
                                                       "i394"
                                                       "i393"
                                                       "i392"
                                                       "i390"
                                                       "i388"
                                                       "i386"
                                                       "i384"
                                                       "i383"
                                                       "i381"
                                                       "i379"
                                                       "i377"
                                                       "i375"
                                                       "i373"
                                                       "i371"
                                                       "i369"
                                                       "i368"
                                                       "i366"
                                                       "i364"
                                                       "i363"
                                                       "i362"
                                                       "i360"
                                                       "i359"
                                                       "i357"
                                                       "i355"
                                                       "i353"
                                                       "i351"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i329"
                                                       "i327"
                                                       "i325"
                                                       "i323"
                                                       "i321"
                                                       "i319"
                                                       "i317"
                                                       "i315"
                                                       "i313"
                                                       "i311"
                                                       "i309"
                                                       "i307"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i294"
                                                       "i292"
                                                       "i290"
                                                       "i288"
                                                       "i286"
                                                       "i284"
                                                       "i282"
                                                       "i280"
                                                       "i278"
                                                       "i276"
                                                       "i273"
                                                       "i271"
                                                       "i269"
                                                       "i267"
                                                       "i265"
                                                       "i263"
                                                       "i261"
                                                       "i259"
                                                       "i257"
                                                       "i255"
                                                       "i253"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i243"
                                                       "i241"
                                                       "i239"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top) (top))
                                                      ("i33"
                                                       "i32"
                                                       "i31"
                                                       "i29")))
                                                   (hygiene guile))
                                                #{keys\ 3668}#))
                                        #f)
                                    (let ((#{labels\ 3693}#
                                            (list (#{gen-label\ 398}#)))
                                          (#{var\ 3694}#
                                            (#{gen-var\ 495}# #{pat\ 3685}#)))
                                      (#{build-application\ 304}#
                                        #f
                                        (#{build-simple-lambda\ 324}#
                                          #f
                                          (list (syntax->datum #{pat\ 3685}#))
                                          #f
                                          (list #{var\ 3694}#)
                                          '()
                                          (#{chi\ 467}#
                                            #{exp\ 3686}#
                                            (#{extend-env\ 370}#
                                              #{labels\ 3693}#
                                              (list (cons 'syntax
                                                          (cons #{var\ 3694}#
                                                                0)))
                                              #{r\ 3670}#)
                                            (#{make-binding-wrap\ 429}#
                                              (list #{pat\ 3685}#)
                                              #{labels\ 3693}#
                                              '(()))
                                            #{mod\ 3671}#))
                                        (list #{x\ 3667}#)))
                                    (#{gen-clause\ 3664}#
                                      #{x\ 3667}#
                                      #{keys\ 3668}#
                                      (cdr #{clauses\ 3669}#)
                                      #{r\ 3670}#
                                      #{pat\ 3685}#
                                      #t
                                      #{exp\ 3686}#
                                      #{mod\ 3671}#)))
                                #{tmp\ 3682}#)
                         ((lambda (#{tmp\ 3700}#)
                            (if #{tmp\ 3700}#
                              (apply (lambda (#{pat\ 3704}#
                                              #{fender\ 3705}#
                                              #{exp\ 3706}#)
                                       (#{gen-clause\ 3664}#
                                         #{x\ 3667}#
                                         #{keys\ 3668}#
                                         (cdr #{clauses\ 3669}#)
                                         #{r\ 3670}#
                                         #{pat\ 3704}#
                                         #{fender\ 3705}#
                                         #{exp\ 3706}#
                                         #{mod\ 3671}#))
                                     #{tmp\ 3700}#)
                              ((lambda (#{_\ 3708}#)
                                 (syntax-violation
                                   'syntax-case
                                   "invalid clause"
                                   (car #{clauses\ 3669}#)))
                               #{tmp\ 3681}#)))
                          ($sc-dispatch
                            #{tmp\ 3681}#
                            '(any any any)))))
                     ($sc-dispatch #{tmp\ 3681}# (quote (any any)))))
                  (car #{clauses\ 3669}#)))))
           (#{gen-clause\ 3664}#
             (lambda (#{x\ 3709}#
                      #{keys\ 3710}#
                      #{clauses\ 3711}#
                      #{r\ 3712}#
                      #{pat\ 3713}#
                      #{fender\ 3714}#
                      #{exp\ 3715}#
                      #{mod\ 3716}#)
               (call-with-values
                 (lambda ()
                   (#{convert-pattern\ 3660}#
                     #{pat\ 3713}#
                     #{keys\ 3710}#))
                 (lambda (#{p\ 3725}# #{pvars\ 3726}#)
                   (if (not (#{distinct-bound-ids?\ 447}#
                              (map car #{pvars\ 3726}#)))
                     (syntax-violation
                       'syntax-case
                       "duplicate pattern variable"
                       #{pat\ 3713}#)
                     (if (not (and-map
                                (lambda (#{x\ 3733}#)
                                  (not (#{ellipsis?\ 483}# (car #{x\ 3733}#))))
                                #{pvars\ 3726}#))
                       (syntax-violation
                         'syntax-case
                         "misplaced ellipsis"
                         #{pat\ 3713}#)
                       (let ((#{y\ 3737}# (#{gen-var\ 495}# (quote tmp))))
                         (#{build-application\ 304}#
                           #f
                           (#{build-simple-lambda\ 324}#
                             #f
                             (list (quote tmp))
                             #f
                             (list #{y\ 3737}#)
                             '()
                             (let ((#{y\ 3741}#
                                     (#{build-lexical-reference\ 310}#
                                       'value
                                       #f
                                       'tmp
                                       #{y\ 3737}#)))
                               (#{build-conditional\ 306}#
                                 #f
                                 ((lambda (#{tmp\ 3744}#)
                                    ((lambda (#{tmp\ 3745}#)
                                       (if #{tmp\ 3745}#
                                         (apply (lambda () #{y\ 3741}#)
                                                #{tmp\ 3745}#)
                                         ((lambda (#{_\ 3747}#)
                                            (#{build-conditional\ 306}#
                                              #f
                                              #{y\ 3741}#
                                              (#{build-dispatch-call\ 3662}#
                                                #{pvars\ 3726}#
                                                #{fender\ 3714}#
                                                #{y\ 3741}#
                                                #{r\ 3712}#
                                                #{mod\ 3716}#)
                                              (#{build-data\ 332}# #f #f)))
                                          #{tmp\ 3744}#)))
                                     ($sc-dispatch
                                       #{tmp\ 3744}#
                                       '#(atom #t))))
                                  #{fender\ 3714}#)
                                 (#{build-dispatch-call\ 3662}#
                                   #{pvars\ 3726}#
                                   #{exp\ 3715}#
                                   #{y\ 3741}#
                                   #{r\ 3712}#
                                   #{mod\ 3716}#)
                                 (#{gen-syntax-case\ 3666}#
                                   #{x\ 3709}#
                                   #{keys\ 3710}#
                                   #{clauses\ 3711}#
                                   #{r\ 3712}#
                                   #{mod\ 3716}#))))
                           (list (if (eq? #{p\ 3725}# (quote any))
                                   (#{build-application\ 304}#
                                     #f
                                     (#{build-primref\ 330}# #f (quote list))
                                     (list #{x\ 3709}#))
                                   (#{build-application\ 304}#
                                     #f
                                     (#{build-primref\ 330}#
                                       #f
                                       '$sc-dispatch)
                                     (list #{x\ 3709}#
                                           (#{build-data\ 332}#
                                             #f
                                             #{p\ 3725}#)))))))))))))
           (#{build-dispatch-call\ 3662}#
             (lambda (#{pvars\ 3755}#
                      #{exp\ 3756}#
                      #{y\ 3757}#
                      #{r\ 3758}#
                      #{mod\ 3759}#)
               (let ((#{ids\ 3767}# (map car #{pvars\ 3755}#))
                     (#{levels\ 3768}# (map cdr #{pvars\ 3755}#)))
                 (let ((#{labels\ 3771}#
                         (#{gen-labels\ 400}# #{ids\ 3767}#))
                       (#{new-vars\ 3772}#
                         (map #{gen-var\ 495}# #{ids\ 3767}#)))
                   (#{build-application\ 304}#
                     #f
                     (#{build-primref\ 330}# #f (quote apply))
                     (list (#{build-simple-lambda\ 324}#
                             #f
                             (map syntax->datum #{ids\ 3767}#)
                             #f
                             #{new-vars\ 3772}#
                             '()
                             (#{chi\ 467}#
                               #{exp\ 3756}#
                               (#{extend-env\ 370}#
                                 #{labels\ 3771}#
                                 (map (lambda (#{var\ 3776}# #{level\ 3777}#)
                                        (cons 'syntax
                                              (cons #{var\ 3776}#
                                                    #{level\ 3777}#)))
                                      #{new-vars\ 3772}#
                                      (map cdr #{pvars\ 3755}#))
                                 #{r\ 3758}#)
                               (#{make-binding-wrap\ 429}#
                                 #{ids\ 3767}#
                                 #{labels\ 3771}#
                                 '(()))
                               #{mod\ 3759}#))
                           #{y\ 3757}#))))))
           (#{convert-pattern\ 3660}#
             (lambda (#{pattern\ 3783}# #{keys\ 3784}#)
               (letrec*
                 ((#{cvt\ 3790}#
                    (lambda (#{p\ 3791}# #{n\ 3792}# #{ids\ 3793}#)
                      (if (#{id?\ 382}# #{p\ 3791}#)
                        (if (#{bound-id-member?\ 449}#
                              #{p\ 3791}#
                              #{keys\ 3784}#)
                          (values
                            (vector (quote free-id) #{p\ 3791}#)
                            #{ids\ 3793}#)
                          (values
                            'any
                            (cons (cons #{p\ 3791}# #{n\ 3792}#)
                                  #{ids\ 3793}#)))
                        ((lambda (#{tmp\ 3797}#)
                           ((lambda (#{tmp\ 3798}#)
                              (if (if #{tmp\ 3798}#
                                    (apply (lambda (#{x\ 3801}# #{dots\ 3802}#)
                                             (#{ellipsis?\ 483}#
                                               #{dots\ 3802}#))
                                           #{tmp\ 3798}#)
                                    #f)
                                (apply (lambda (#{x\ 3805}# #{dots\ 3806}#)
                                         (call-with-values
                                           (lambda ()
                                             (#{cvt\ 3790}#
                                               #{x\ 3805}#
                                               (#{fx+\ 283}# #{n\ 3792}# 1)
                                               #{ids\ 3793}#))
                                           (lambda (#{p\ 3807}# #{ids\ 3808}#)
                                             (values
                                               (if (eq? #{p\ 3807}#
                                                        'any)
                                                 'each-any
                                                 (vector
                                                   'each
                                                   #{p\ 3807}#))
                                               #{ids\ 3808}#))))
                                       #{tmp\ 3798}#)
                                ((lambda (#{tmp\ 3811}#)
                                   (if (if #{tmp\ 3811}#
                                         (apply (lambda (#{x\ 3815}#
                                                         #{dots\ 3816}#
                                                         #{ys\ 3817}#)
                                                  (#{ellipsis?\ 483}#
                                                    #{dots\ 3816}#))
                                                #{tmp\ 3811}#)
                                         #f)
                                     (apply (lambda (#{x\ 3821}#
                                                     #{dots\ 3822}#
                                                     #{ys\ 3823}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt*\ 3788}#
                                                    #{ys\ 3823}#
                                                    #{n\ 3792}#
                                                    #{ids\ 3793}#))
                                                (lambda (#{ys\ 3825}#
                                                         #{ids\ 3826}#)
                                                  (call-with-values
                                                    (lambda ()
                                                      (#{cvt\ 3790}#
                                                        #{x\ 3821}#
                                                        (+ #{n\ 3792}# 1)
                                                        #{ids\ 3826}#))
                                                    (lambda (#{x\ 3829}#
                                                             #{ids\ 3830}#)
                                                      (values
                                                        (list->vector
                                                          (cons 'each+
                                                                (cons #{x\ 3829}#
                                                                      (cons (reverse
                                                                              #{ys\ 3825}#)
                                                                            '(())))))
                                                        #{ids\ 3830}#))))))
                                            #{tmp\ 3811}#)
                                     ((lambda (#{tmp\ 3834}#)
                                        (if #{tmp\ 3834}#
                                          (apply (lambda (#{x\ 3837}#
                                                          #{y\ 3838}#)
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{cvt\ 3790}#
                                                         #{y\ 3838}#
                                                         #{n\ 3792}#
                                                         #{ids\ 3793}#))
                                                     (lambda (#{y\ 3839}#
                                                              #{ids\ 3840}#)
                                                       (call-with-values
                                                         (lambda ()
                                                           (#{cvt\ 3790}#
                                                             #{x\ 3837}#
                                                             #{n\ 3792}#
                                                             #{ids\ 3840}#))
                                                         (lambda (#{x\ 3843}#
                                                                  #{ids\ 3844}#)
                                                           (values
                                                             (cons #{x\ 3843}#
                                                                   #{y\ 3839}#)
                                                             #{ids\ 3844}#))))))
                                                 #{tmp\ 3834}#)
                                          ((lambda (#{tmp\ 3847}#)
                                             (if #{tmp\ 3847}#
                                               (apply (lambda ()
                                                        (values
                                                          '()
                                                          #{ids\ 3793}#))
                                                      #{tmp\ 3847}#)
                                               ((lambda (#{tmp\ 3848}#)
                                                  (if #{tmp\ 3848}#
                                                    (apply (lambda (#{x\ 3850}#)
                                                             (call-with-values
                                                               (lambda ()
                                                                 (#{cvt\ 3790}#
                                                                   #{x\ 3850}#
                                                                   #{n\ 3792}#
                                                                   #{ids\ 3793}#))
                                                               (lambda (#{p\ 3852}#
                                                                        #{ids\ 3853}#)
                                                                 (values
                                                                   (vector
                                                                     'vector
                                                                     #{p\ 3852}#)
                                                                   #{ids\ 3853}#))))
                                                           #{tmp\ 3848}#)
                                                    ((lambda (#{x\ 3857}#)
                                                       (values
                                                         (vector
                                                           'atom
                                                           (#{strip\ 493}#
                                                             #{p\ 3791}#
                                                             '(())))
                                                         #{ids\ 3793}#))
                                                     #{tmp\ 3797}#)))
                                                ($sc-dispatch
                                                  #{tmp\ 3797}#
                                                  '#(vector each-any)))))
                                           ($sc-dispatch
                                             #{tmp\ 3797}#
                                             '()))))
                                      ($sc-dispatch
                                        #{tmp\ 3797}#
                                        '(any . any)))))
                                 ($sc-dispatch
                                   #{tmp\ 3797}#
                                   '(any any . each-any)))))
                            ($sc-dispatch #{tmp\ 3797}# (quote (any any)))))
                         #{p\ 3791}#))))
                  (#{cvt*\ 3788}#
                    (lambda (#{p*\ 3859}# #{n\ 3860}# #{ids\ 3861}#)
                      (if (null? #{p*\ 3859}#)
                        (values (quote ()) #{ids\ 3861}#)
                        (call-with-values
                          (lambda ()
                            (#{cvt*\ 3788}#
                              (cdr #{p*\ 3859}#)
                              #{n\ 3860}#
                              #{ids\ 3861}#))
                          (lambda (#{y\ 3865}# #{ids\ 3866}#)
                            (call-with-values
                              (lambda ()
                                (#{cvt\ 3790}#
                                  (car #{p*\ 3859}#)
                                  #{n\ 3860}#
                                  #{ids\ 3866}#))
                              (lambda (#{x\ 3869}# #{ids\ 3870}#)
                                (values
                                  (cons #{x\ 3869}# #{y\ 3865}#)
                                  #{ids\ 3870}#)))))))))
                 (#{cvt\ 3790}# #{pattern\ 3783}# 0 (quote ()))))))
          (lambda (#{e\ 3873}#
                   #{r\ 3874}#
                   #{w\ 3875}#
                   #{s\ 3876}#
                   #{mod\ 3877}#)
            (let ((#{e\ 3884}#
                    (#{source-wrap\ 453}#
                      #{e\ 3873}#
                      #{w\ 3875}#
                      #{s\ 3876}#
                      #{mod\ 3877}#)))
              ((lambda (#{tmp\ 3885}#)
                 ((lambda (#{tmp\ 3886}#)
                    (if #{tmp\ 3886}#
                      (apply (lambda (#{_\ 3891}#
                                      #{val\ 3892}#
                                      #{key\ 3893}#
                                      #{m\ 3894}#)
                               (if (and-map
                                     (lambda (#{x\ 3895}#)
                                       (if (#{id?\ 382}# #{x\ 3895}#)
                                         (not (#{ellipsis?\ 483}# #{x\ 3895}#))
                                         #f))
                                     #{key\ 3893}#)
                                 (let ((#{x\ 3901}#
                                         (#{gen-var\ 495}# (quote tmp))))
                                   (#{build-application\ 304}#
                                     #{s\ 3876}#
                                     (#{build-simple-lambda\ 324}#
                                       #f
                                       (list (quote tmp))
                                       #f
                                       (list #{x\ 3901}#)
                                       '()
                                       (#{gen-syntax-case\ 3666}#
                                         (#{build-lexical-reference\ 310}#
                                           'value
                                           #f
                                           'tmp
                                           #{x\ 3901}#)
                                         #{key\ 3893}#
                                         #{m\ 3894}#
                                         #{r\ 3874}#
                                         #{mod\ 3877}#))
                                     (list (#{chi\ 467}#
                                             #{val\ 3892}#
                                             #{r\ 3874}#
                                             '(())
                                             #{mod\ 3877}#))))
                                 (syntax-violation
                                   'syntax-case
                                   "invalid literals list"
                                   #{e\ 3884}#)))
                             #{tmp\ 3886}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 3885}#)))
                  ($sc-dispatch
                    #{tmp\ 3885}#
                    '(any any each-any . each-any))))
               #{e\ 3884}#)))))
      (set! macroexpand
        (lambda*
          (#{x\ 3907}#
            #:optional
            (#{m\ 3909}# (quote e))
            (#{esew\ 3911}# (quote (eval))))
          (#{chi-top\ 465}#
            #{x\ 3907}#
            '()
            '((top))
            #{m\ 3909}#
            #{esew\ 3911}#
            (cons 'hygiene
                  (module-name (current-module))))))
      (set! identifier?
        (lambda (#{x\ 3915}#)
          (#{nonsymbol-id?\ 380}# #{x\ 3915}#)))
      (set! datum->syntax
        (lambda (#{id\ 3917}# #{datum\ 3918}#)
          (#{make-syntax-object\ 344}#
            #{datum\ 3918}#
            (#{syntax-object-wrap\ 350}# #{id\ 3917}#)
            (#{syntax-object-module\ 352}# #{id\ 3917}#))))
      (set! syntax->datum
        (lambda (#{x\ 3921}#)
          (#{strip\ 493}# #{x\ 3921}# (quote (())))))
      (set! syntax-source
        (lambda (#{x\ 3924}#)
          (#{source-annotation\ 361}# #{x\ 3924}#)))
      (set! generate-temporaries
        (lambda (#{ls\ 3926}#)
          (begin
            (let ((#{x\ 3930}# #{ls\ 3926}#))
              (if (not (list? #{x\ 3930}#))
                (syntax-violation
                  'generate-temporaries
                  "invalid argument"
                  #{x\ 3930}#)))
            (map (lambda (#{x\ 3931}#)
                   (#{wrap\ 451}# (gensym) (quote ((top))) #f))
                 #{ls\ 3926}#))))
      (set! free-identifier=?
        (lambda (#{x\ 3935}# #{y\ 3936}#)
          (begin
            (let ((#{x\ 3941}# #{x\ 3935}#))
              (if (not (#{nonsymbol-id?\ 380}# #{x\ 3941}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 3941}#)))
            (let ((#{x\ 3944}# #{y\ 3936}#))
              (if (not (#{nonsymbol-id?\ 380}# #{x\ 3944}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 3944}#)))
            (#{free-id=?\ 441}# #{x\ 3935}# #{y\ 3936}#))))
      (set! bound-identifier=?
        (lambda (#{x\ 3945}# #{y\ 3946}#)
          (begin
            (let ((#{x\ 3951}# #{x\ 3945}#))
              (if (not (#{nonsymbol-id?\ 380}# #{x\ 3951}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 3951}#)))
            (let ((#{x\ 3954}# #{y\ 3946}#))
              (if (not (#{nonsymbol-id?\ 380}# #{x\ 3954}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 3954}#)))
            (#{bound-id=?\ 443}# #{x\ 3945}# #{y\ 3946}#))))
      (set! syntax-violation
        (lambda (#{who\ 3955}#
                 #{message\ 3956}#
                 #{form\ 3957}#
                 .
                 #{subform\ 3958}#)
          (begin
            (let ((#{x\ 3965}# #{who\ 3955}#))
              (if (not ((lambda (#{x\ 3966}#)
                          (let ((#{t\ 3970}# (not #{x\ 3966}#)))
                            (if #{t\ 3970}#
                              #{t\ 3970}#
                              (let ((#{t\ 3973}# (string? #{x\ 3966}#)))
                                (if #{t\ 3973}#
                                  #{t\ 3973}#
                                  (symbol? #{x\ 3966}#))))))
                        #{x\ 3965}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 3965}#)))
            (let ((#{x\ 3977}# #{message\ 3956}#))
              (if (not (string? #{x\ 3977}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 3977}#)))
            (scm-error
              'syntax-error
              'macroexpand
              (string-append
                (if #{who\ 3955}# "~a: " "")
                "~a "
                (if (null? #{subform\ 3958}#)
                  "in ~a"
                  "in subform `~s' of `~s'"))
              (let ((#{tail\ 3979}#
                      (cons #{message\ 3956}#
                            (map (lambda (#{x\ 3980}#)
                                   (#{strip\ 493}# #{x\ 3980}# (quote (()))))
                                 (append
                                   #{subform\ 3958}#
                                   (list #{form\ 3957}#))))))
                (if #{who\ 3955}#
                  (cons #{who\ 3955}# #{tail\ 3979}#)
                  #{tail\ 3979}#))
              #f))))
      (letrec*
        ((#{match\ 3996}#
           (lambda (#{e\ 3997}#
                    #{p\ 3998}#
                    #{w\ 3999}#
                    #{r\ 4000}#
                    #{mod\ 4001}#)
             (if (not #{r\ 4000}#)
               #f
               (if (eq? #{p\ 3998}# (quote any))
                 (cons (#{wrap\ 451}#
                         #{e\ 3997}#
                         #{w\ 3999}#
                         #{mod\ 4001}#)
                       #{r\ 4000}#)
                 (if (#{syntax-object?\ 346}# #{e\ 3997}#)
                   (#{match*\ 3994}#
                     (#{syntax-object-expression\ 348}# #{e\ 3997}#)
                     #{p\ 3998}#
                     (#{join-wraps\ 433}#
                       #{w\ 3999}#
                       (#{syntax-object-wrap\ 350}# #{e\ 3997}#))
                     #{r\ 4000}#
                     (#{syntax-object-module\ 352}# #{e\ 3997}#))
                   (#{match*\ 3994}#
                     #{e\ 3997}#
                     #{p\ 3998}#
                     #{w\ 3999}#
                     #{r\ 4000}#
                     #{mod\ 4001}#))))))
         (#{match*\ 3994}#
           (lambda (#{e\ 4014}#
                    #{p\ 4015}#
                    #{w\ 4016}#
                    #{r\ 4017}#
                    #{mod\ 4018}#)
             (if (null? #{p\ 4015}#)
               (if (null? #{e\ 4014}#) #{r\ 4017}# #f)
               (if (pair? #{p\ 4015}#)
                 (if (pair? #{e\ 4014}#)
                   (#{match\ 3996}#
                     (car #{e\ 4014}#)
                     (car #{p\ 4015}#)
                     #{w\ 4016}#
                     (#{match\ 3996}#
                       (cdr #{e\ 4014}#)
                       (cdr #{p\ 4015}#)
                       #{w\ 4016}#
                       #{r\ 4017}#
                       #{mod\ 4018}#)
                     #{mod\ 4018}#)
                   #f)
                 (if (eq? #{p\ 4015}# (quote each-any))
                   (let ((#{l\ 4035}#
                           (#{match-each-any\ 3988}#
                             #{e\ 4014}#
                             #{w\ 4016}#
                             #{mod\ 4018}#)))
                     (if #{l\ 4035}#
                       (cons #{l\ 4035}# #{r\ 4017}#)
                       #f))
                   (let ((#{atom-key\ 4041}# (vector-ref #{p\ 4015}# 0)))
                     (if (memv #{atom-key\ 4041}# (quote (each)))
                       (if (null? #{e\ 4014}#)
                         (#{match-empty\ 3990}#
                           (vector-ref #{p\ 4015}# 1)
                           #{r\ 4017}#)
                         (let ((#{l\ 4044}#
                                 (#{match-each\ 3984}#
                                   #{e\ 4014}#
                                   (vector-ref #{p\ 4015}# 1)
                                   #{w\ 4016}#
                                   #{mod\ 4018}#)))
                           (if #{l\ 4044}#
                             (letrec ((#{collect\ 4049}#
                                        (lambda (#{l\ 4050}#)
                                          (if (null? (car #{l\ 4050}#))
                                            #{r\ 4017}#
                                            (cons (map car #{l\ 4050}#)
                                                  (#{collect\ 4049}#
                                                    (map cdr #{l\ 4050}#)))))))
                               (#{collect\ 4049}# #{l\ 4044}#))
                             #f)))
                       (if (memv #{atom-key\ 4041}# (quote (each+)))
                         (call-with-values
                           (lambda ()
                             (#{match-each+\ 3986}#
                               #{e\ 4014}#
                               (vector-ref #{p\ 4015}# 1)
                               (vector-ref #{p\ 4015}# 2)
                               (vector-ref #{p\ 4015}# 3)
                               #{w\ 4016}#
                               #{r\ 4017}#
                               #{mod\ 4018}#))
                           (lambda (#{xr*\ 4052}# #{y-pat\ 4053}# #{r\ 4054}#)
                             (if #{r\ 4054}#
                               (if (null? #{y-pat\ 4053}#)
                                 (if (null? #{xr*\ 4052}#)
                                   (#{match-empty\ 3990}#
                                     (vector-ref #{p\ 4015}# 1)
                                     #{r\ 4054}#)
                                   (#{combine\ 3992}#
                                     #{xr*\ 4052}#
                                     #{r\ 4054}#))
                                 #f)
                               #f)))
                         (if (memv #{atom-key\ 4041}# (quote (free-id)))
                           (if (#{id?\ 382}# #{e\ 4014}#)
                             (if (#{free-id=?\ 441}#
                                   (#{wrap\ 451}#
                                     #{e\ 4014}#
                                     #{w\ 4016}#
                                     #{mod\ 4018}#)
                                   (vector-ref #{p\ 4015}# 1))
                               #{r\ 4017}#
                               #f)
                             #f)
                           (if (memv #{atom-key\ 4041}# (quote (atom)))
                             (if (equal?
                                   (vector-ref #{p\ 4015}# 1)
                                   (#{strip\ 493}# #{e\ 4014}# #{w\ 4016}#))
                               #{r\ 4017}#
                               #f)
                             (if (memv #{atom-key\ 4041}# (quote (vector)))
                               (if (vector? #{e\ 4014}#)
                                 (#{match\ 3996}#
                                   (vector->list #{e\ 4014}#)
                                   (vector-ref #{p\ 4015}# 1)
                                   #{w\ 4016}#
                                   #{r\ 4017}#
                                   #{mod\ 4018}#)
                                 #f))))))))))))
         (#{combine\ 3992}#
           (lambda (#{r*\ 4071}# #{r\ 4072}#)
             (if (null? (car #{r*\ 4071}#))
               #{r\ 4072}#
               (cons (map car #{r*\ 4071}#)
                     (#{combine\ 3992}#
                       (map cdr #{r*\ 4071}#)
                       #{r\ 4072}#)))))
         (#{match-empty\ 3990}#
           (lambda (#{p\ 4075}# #{r\ 4076}#)
             (if (null? #{p\ 4075}#)
               #{r\ 4076}#
               (if (eq? #{p\ 4075}# (quote any))
                 (cons (quote ()) #{r\ 4076}#)
                 (if (pair? #{p\ 4075}#)
                   (#{match-empty\ 3990}#
                     (car #{p\ 4075}#)
                     (#{match-empty\ 3990}#
                       (cdr #{p\ 4075}#)
                       #{r\ 4076}#))
                   (if (eq? #{p\ 4075}# (quote each-any))
                     (cons (quote ()) #{r\ 4076}#)
                     (let ((#{atom-key\ 4090}# (vector-ref #{p\ 4075}# 0)))
                       (if (memv #{atom-key\ 4090}# (quote (each)))
                         (#{match-empty\ 3990}#
                           (vector-ref #{p\ 4075}# 1)
                           #{r\ 4076}#)
                         (if (memv #{atom-key\ 4090}# (quote (each+)))
                           (#{match-empty\ 3990}#
                             (vector-ref #{p\ 4075}# 1)
                             (#{match-empty\ 3990}#
                               (reverse (vector-ref #{p\ 4075}# 2))
                               (#{match-empty\ 3990}#
                                 (vector-ref #{p\ 4075}# 3)
                                 #{r\ 4076}#)))
                           (if (memv #{atom-key\ 4090}# (quote (free-id atom)))
                             #{r\ 4076}#
                             (if (memv #{atom-key\ 4090}# (quote (vector)))
                               (#{match-empty\ 3990}#
                                 (vector-ref #{p\ 4075}# 1)
                                 #{r\ 4076}#))))))))))))
         (#{match-each-any\ 3988}#
           (lambda (#{e\ 4095}# #{w\ 4096}# #{mod\ 4097}#)
             (if (pair? #{e\ 4095}#)
               (let ((#{l\ 4104}#
                       (#{match-each-any\ 3988}#
                         (cdr #{e\ 4095}#)
                         #{w\ 4096}#
                         #{mod\ 4097}#)))
                 (if #{l\ 4104}#
                   (cons (#{wrap\ 451}#
                           (car #{e\ 4095}#)
                           #{w\ 4096}#
                           #{mod\ 4097}#)
                         #{l\ 4104}#)
                   #f))
               (if (null? #{e\ 4095}#)
                 '()
                 (if (#{syntax-object?\ 346}# #{e\ 4095}#)
                   (#{match-each-any\ 3988}#
                     (#{syntax-object-expression\ 348}# #{e\ 4095}#)
                     (#{join-wraps\ 433}#
                       #{w\ 4096}#
                       (#{syntax-object-wrap\ 350}# #{e\ 4095}#))
                     #{mod\ 4097}#)
                   #f)))))
         (#{match-each+\ 3986}#
           (lambda (#{e\ 4112}#
                    #{x-pat\ 4113}#
                    #{y-pat\ 4114}#
                    #{z-pat\ 4115}#
                    #{w\ 4116}#
                    #{r\ 4117}#
                    #{mod\ 4118}#)
             (letrec ((#{f\ 4129}#
                        (lambda (#{e\ 4130}# #{w\ 4131}#)
                          (if (pair? #{e\ 4130}#)
                            (call-with-values
                              (lambda ()
                                (#{f\ 4129}# (cdr #{e\ 4130}#) #{w\ 4131}#))
                              (lambda (#{xr*\ 4134}#
                                       #{y-pat\ 4135}#
                                       #{r\ 4136}#)
                                (if #{r\ 4136}#
                                  (if (null? #{y-pat\ 4135}#)
                                    (let ((#{xr\ 4141}#
                                            (#{match\ 3996}#
                                              (car #{e\ 4130}#)
                                              #{x-pat\ 4113}#
                                              #{w\ 4131}#
                                              '()
                                              #{mod\ 4118}#)))
                                      (if #{xr\ 4141}#
                                        (values
                                          (cons #{xr\ 4141}# #{xr*\ 4134}#)
                                          #{y-pat\ 4135}#
                                          #{r\ 4136}#)
                                        (values #f #f #f)))
                                    (values
                                      '()
                                      (cdr #{y-pat\ 4135}#)
                                      (#{match\ 3996}#
                                        (car #{e\ 4130}#)
                                        (car #{y-pat\ 4135}#)
                                        #{w\ 4131}#
                                        #{r\ 4136}#
                                        #{mod\ 4118}#)))
                                  (values #f #f #f))))
                            (if (#{syntax-object?\ 346}# #{e\ 4130}#)
                              (#{f\ 4129}#
                                (#{syntax-object-expression\ 348}# #{e\ 4130}#)
                                (#{join-wraps\ 433}# #{w\ 4131}# #{e\ 4130}#))
                              (values
                                '()
                                #{y-pat\ 4114}#
                                (#{match\ 3996}#
                                  #{e\ 4130}#
                                  #{z-pat\ 4115}#
                                  #{w\ 4131}#
                                  #{r\ 4117}#
                                  #{mod\ 4118}#)))))))
               (#{f\ 4129}# #{e\ 4112}# #{w\ 4116}#))))
         (#{match-each\ 3984}#
           (lambda (#{e\ 4145}#
                    #{p\ 4146}#
                    #{w\ 4147}#
                    #{mod\ 4148}#)
             (if (pair? #{e\ 4145}#)
               (let ((#{first\ 4156}#
                       (#{match\ 3996}#
                         (car #{e\ 4145}#)
                         #{p\ 4146}#
                         #{w\ 4147}#
                         '()
                         #{mod\ 4148}#)))
                 (if #{first\ 4156}#
                   (let ((#{rest\ 4160}#
                           (#{match-each\ 3984}#
                             (cdr #{e\ 4145}#)
                             #{p\ 4146}#
                             #{w\ 4147}#
                             #{mod\ 4148}#)))
                     (if #{rest\ 4160}#
                       (cons #{first\ 4156}# #{rest\ 4160}#)
                       #f))
                   #f))
               (if (null? #{e\ 4145}#)
                 '()
                 (if (#{syntax-object?\ 346}# #{e\ 4145}#)
                   (#{match-each\ 3984}#
                     (#{syntax-object-expression\ 348}# #{e\ 4145}#)
                     #{p\ 4146}#
                     (#{join-wraps\ 433}#
                       #{w\ 4147}#
                       (#{syntax-object-wrap\ 350}# #{e\ 4145}#))
                     (#{syntax-object-module\ 352}# #{e\ 4145}#))
                   #f))))))
        (set! $sc-dispatch
          (lambda (#{e\ 4168}# #{p\ 4169}#)
            (if (eq? #{p\ 4169}# (quote any))
              (list #{e\ 4168}#)
              (if (#{syntax-object?\ 346}# #{e\ 4168}#)
                (#{match*\ 3994}#
                  (#{syntax-object-expression\ 348}# #{e\ 4168}#)
                  #{p\ 4169}#
                  (#{syntax-object-wrap\ 350}# #{e\ 4168}#)
                  '()
                  (#{syntax-object-module\ 352}# #{e\ 4168}#))
                (#{match*\ 3994}#
                  #{e\ 4168}#
                  #{p\ 4169}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x\ 4178}#)
      ((lambda (#{tmp\ 4180}#)
         ((lambda (#{tmp\ 4181}#)
            (if #{tmp\ 4181}#
              (apply (lambda (#{_\ 4185}# #{e1\ 4186}# #{e2\ 4187}#)
                       (cons '#(syntax-object
                                begin
                                ((top)
                                 #(ribcage
                                   #(_ e1 e2)
                                   #((top) (top) (top))
                                   #("i4182" "i4183" "i4184"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4179")))
                                (hygiene guile))
                             (cons #{e1\ 4186}# #{e2\ 4187}#)))
                     #{tmp\ 4181}#)
              ((lambda (#{tmp\ 4189}#)
                 (if #{tmp\ 4189}#
                   (apply (lambda (#{_\ 4195}#
                                   #{out\ 4196}#
                                   #{in\ 4197}#
                                   #{e1\ 4198}#
                                   #{e2\ 4199}#)
                            (list '#(syntax-object
                                     syntax-case
                                     ((top)
                                      #(ribcage
                                        #(_ out in e1 e2)
                                        #((top) (top) (top) (top) (top))
                                        #("i4190"
                                          "i4191"
                                          "i4192"
                                          "i4193"
                                          "i4194"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4179")))
                                     (hygiene guile))
                                  #{in\ 4197}#
                                  '()
                                  (list #{out\ 4196}#
                                        (cons '#(syntax-object
                                                 begin
                                                 ((top)
                                                  #(ribcage
                                                    #(_ out in e1 e2)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i4190"
                                                      "i4191"
                                                      "i4192"
                                                      "i4193"
                                                      "i4194"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i4179")))
                                                 (hygiene guile))
                                              (cons #{e1\ 4198}#
                                                    #{e2\ 4199}#)))))
                          #{tmp\ 4189}#)
                   ((lambda (#{tmp\ 4201}#)
                      (if #{tmp\ 4201}#
                        (apply (lambda (#{_\ 4207}#
                                        #{out\ 4208}#
                                        #{in\ 4209}#
                                        #{e1\ 4210}#
                                        #{e2\ 4211}#)
                                 (list '#(syntax-object
                                          syntax-case
                                          ((top)
                                           #(ribcage
                                             #(_ out in e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i4202"
                                               "i4203"
                                               "i4204"
                                               "i4205"
                                               "i4206"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i4179")))
                                          (hygiene guile))
                                       (cons '#(syntax-object
                                                list
                                                ((top)
                                                 #(ribcage
                                                   #(_ out in e1 e2)
                                                   #((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                   #("i4202"
                                                     "i4203"
                                                     "i4204"
                                                     "i4205"
                                                     "i4206"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i4179")))
                                                (hygiene guile))
                                             #{in\ 4209}#)
                                       '()
                                       (list #{out\ 4208}#
                                             (cons '#(syntax-object
                                                      begin
                                                      ((top)
                                                       #(ribcage
                                                         #(_ out in e1 e2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4202"
                                                           "i4203"
                                                           "i4204"
                                                           "i4205"
                                                           "i4206"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4179")))
                                                      (hygiene guile))
                                                   (cons #{e1\ 4210}#
                                                         #{e2\ 4211}#)))))
                               #{tmp\ 4201}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp\ 4180}#)))
                    ($sc-dispatch
                      #{tmp\ 4180}#
                      '(any #(each (any any)) any . each-any)))))
               ($sc-dispatch
                 #{tmp\ 4180}#
                 '(any ((any any)) any . each-any)))))
          ($sc-dispatch
            #{tmp\ 4180}#
            '(any () any . each-any))))
       #{x\ 4178}#))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x\ 4215}#)
      ((lambda (#{tmp\ 4217}#)
         ((lambda (#{tmp\ 4218}#)
            (if #{tmp\ 4218}#
              (apply (lambda (#{_\ 4224}#
                              #{k\ 4225}#
                              #{keyword\ 4226}#
                              #{pattern\ 4227}#
                              #{template\ 4228}#)
                       (list '#(syntax-object
                                lambda
                                ((top)
                                 #(ribcage
                                   #(_ k keyword pattern template)
                                   #((top) (top) (top) (top) (top))
                                   #("i4219" "i4220" "i4221" "i4222" "i4223"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4216")))
                                (hygiene guile))
                             '(#(syntax-object
                                 x
                                 ((top)
                                  #(ribcage
                                    #(_ k keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i4219" "i4220" "i4221" "i4222" "i4223"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4216")))
                                 (hygiene guile)))
                             (vector
                               '(#(syntax-object
                                   macro-type
                                   ((top)
                                    #(ribcage
                                      #(_ k keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i4219"
                                        "i4220"
                                        "i4221"
                                        "i4222"
                                        "i4223"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4216")))
                                   (hygiene guile))
                                 .
                                 #(syntax-object
                                   syntax-rules
                                   ((top)
                                    #(ribcage
                                      #(_ k keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i4219"
                                        "i4220"
                                        "i4221"
                                        "i4222"
                                        "i4223"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4216")))
                                   (hygiene guile)))
                               (cons '#(syntax-object
                                        patterns
                                        ((top)
                                         #(ribcage
                                           #(_ k keyword pattern template)
                                           #((top) (top) (top) (top) (top))
                                           #("i4219"
                                             "i4220"
                                             "i4221"
                                             "i4222"
                                             "i4223"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i4216")))
                                        (hygiene guile))
                                     #{pattern\ 4227}#))
                             (cons '#(syntax-object
                                      syntax-case
                                      ((top)
                                       #(ribcage
                                         #(_ k keyword pattern template)
                                         #((top) (top) (top) (top) (top))
                                         #("i4219"
                                           "i4220"
                                           "i4221"
                                           "i4222"
                                           "i4223"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4216")))
                                      (hygiene guile))
                                   (cons '#(syntax-object
                                            x
                                            ((top)
                                             #(ribcage
                                               #(_ k keyword pattern template)
                                               #((top) (top) (top) (top) (top))
                                               #("i4219"
                                                 "i4220"
                                                 "i4221"
                                                 "i4222"
                                                 "i4223"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4216")))
                                            (hygiene guile))
                                         (cons #{k\ 4225}#
                                               (map (lambda (#{tmp\ 4232}#
                                                             #{tmp\ 4231}#)
                                                      (list (cons '#(syntax-object
                                                                     dummy
                                                                     ((top)
                                                                      #(ribcage
                                                                        #(_
                                                                          k
                                                                          keyword
                                                                          pattern
                                                                          template)
                                                                        #((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                        #("i4219"
                                                                          "i4220"
                                                                          "i4221"
                                                                          "i4222"
                                                                          "i4223"))
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        #(x)
                                                                        #((top))
                                                                        #("i4216")))
                                                                     (hygiene
                                                                       guile))
                                                                  #{tmp\ 4231}#)
                                                            (list '#(syntax-object
                                                                     syntax
                                                                     ((top)
                                                                      #(ribcage
                                                                        #(_
                                                                          k
                                                                          keyword
                                                                          pattern
                                                                          template)
                                                                        #((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                        #("i4219"
                                                                          "i4220"
                                                                          "i4221"
                                                                          "i4222"
                                                                          "i4223"))
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        #(x)
                                                                        #((top))
                                                                        #("i4216")))
                                                                     (hygiene
                                                                       guile))
                                                                  #{tmp\ 4232}#)))
                                                    #{template\ 4228}#
                                                    #{pattern\ 4227}#))))))
                     #{tmp\ 4218}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4217}#)))
          ($sc-dispatch
            #{tmp\ 4217}#
            '(any each-any . #(each ((any . any) any))))))
       #{x\ 4215}#))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x\ 4233}#)
      ((lambda (#{tmp\ 4235}#)
         ((lambda (#{tmp\ 4236}#)
            (if (if #{tmp\ 4236}#
                  (apply (lambda (#{let*\ 4242}#
                                  #{x\ 4243}#
                                  #{v\ 4244}#
                                  #{e1\ 4245}#
                                  #{e2\ 4246}#)
                           (and-map identifier? #{x\ 4243}#))
                         #{tmp\ 4236}#)
                  #f)
              (apply (lambda (#{let*\ 4253}#
                              #{x\ 4254}#
                              #{v\ 4255}#
                              #{e1\ 4256}#
                              #{e2\ 4257}#)
                       (letrec ((#{f\ 4260}#
                                  (lambda (#{bindings\ 4261}#)
                                    (if (null? #{bindings\ 4261}#)
                                      (cons '#(syntax-object
                                               let
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f bindings)
                                                  #((top) (top))
                                                  #("i4258" "i4259"))
                                                #(ribcage
                                                  #(let* x v e1 e2)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i4248"
                                                    "i4249"
                                                    "i4250"
                                                    "i4251"
                                                    "i4252"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i4234")))
                                               (hygiene guile))
                                            (cons '()
                                                  (cons #{e1\ 4256}#
                                                        #{e2\ 4257}#)))
                                      ((lambda (#{tmp\ 4266}#)
                                         ((lambda (#{tmp\ 4267}#)
                                            (if #{tmp\ 4267}#
                                              (apply (lambda (#{body\ 4270}#
                                                              #{binding\ 4271}#)
                                                       (list '#(syntax-object
                                                                let
                                                                ((top)
                                                                 #(ribcage
                                                                   #(body
                                                                     binding)
                                                                   #((top)
                                                                     (top))
                                                                   #("i4268"
                                                                     "i4269"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     bindings)
                                                                   #((top)
                                                                     (top))
                                                                   #("i4258"
                                                                     "i4259"))
                                                                 #(ribcage
                                                                   #(let*
                                                                     x
                                                                     v
                                                                     e1
                                                                     e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i4248"
                                                                     "i4249"
                                                                     "i4250"
                                                                     "i4251"
                                                                     "i4252"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i4234")))
                                                                (hygiene
                                                                  guile))
                                                             (list #{binding\ 4271}#)
                                                             #{body\ 4270}#))
                                                     #{tmp\ 4267}#)
                                              (syntax-violation
                                                #f
                                                "source expression failed to match any pattern"
                                                #{tmp\ 4266}#)))
                                          ($sc-dispatch
                                            #{tmp\ 4266}#
                                            '(any any))))
                                       (list (#{f\ 4260}#
                                               (cdr #{bindings\ 4261}#))
                                             (car #{bindings\ 4261}#)))))))
                         (#{f\ 4260}# (map list #{x\ 4254}# #{v\ 4255}#))))
                     #{tmp\ 4236}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4235}#)))
          ($sc-dispatch
            #{tmp\ 4235}#
            '(any #(each (any any)) any . each-any))))
       #{x\ 4233}#))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x\ 4272}#)
      ((lambda (#{tmp\ 4274}#)
         ((lambda (#{tmp\ 4275}#)
            (if #{tmp\ 4275}#
              (apply (lambda (#{_\ 4283}#
                              #{var\ 4284}#
                              #{init\ 4285}#
                              #{step\ 4286}#
                              #{e0\ 4287}#
                              #{e1\ 4288}#
                              #{c\ 4289}#)
                       ((lambda (#{tmp\ 4291}#)
                          ((lambda (#{tmp\ 4292}#)
                             (if #{tmp\ 4292}#
                               (apply (lambda (#{step\ 4294}#)
                                        ((lambda (#{tmp\ 4295}#)
                                           ((lambda (#{tmp\ 4296}#)
                                              (if #{tmp\ 4296}#
                                                (apply (lambda ()
                                                         (list '#(syntax-object
                                                                  let
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(step)
                                                                     #((top))
                                                                     #("i4293"))
                                                                   #(ribcage
                                                                     #(_
                                                                       var
                                                                       init
                                                                       step
                                                                       e0
                                                                       e1
                                                                       c)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4276"
                                                                       "i4277"
                                                                       "i4278"
                                                                       "i4279"
                                                                       "i4280"
                                                                       "i4281"
                                                                       "i4282"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(orig-x)
                                                                     #((top))
                                                                     #("i4273")))
                                                                  (hygiene
                                                                    guile))
                                                               '#(syntax-object
                                                                  doloop
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(step)
                                                                     #((top))
                                                                     #("i4293"))
                                                                   #(ribcage
                                                                     #(_
                                                                       var
                                                                       init
                                                                       step
                                                                       e0
                                                                       e1
                                                                       c)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4276"
                                                                       "i4277"
                                                                       "i4278"
                                                                       "i4279"
                                                                       "i4280"
                                                                       "i4281"
                                                                       "i4282"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(orig-x)
                                                                     #((top))
                                                                     #("i4273")))
                                                                  (hygiene
                                                                    guile))
                                                               (map list
                                                                    #{var\ 4284}#
                                                                    #{init\ 4285}#)
                                                               (list '#(syntax-object
                                                                        if
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i4293"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i4276"
                                                                             "i4277"
                                                                             "i4278"
                                                                             "i4279"
                                                                             "i4280"
                                                                             "i4281"
                                                                             "i4282"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i4273")))
                                                                        (hygiene
                                                                          guile))
                                                                     (list '#(syntax-object
                                                                              not
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(step)
                                                                                 #((top))
                                                                                 #("i4293"))
                                                                               #(ribcage
                                                                                 #(_
                                                                                   var
                                                                                   init
                                                                                   step
                                                                                   e0
                                                                                   e1
                                                                                   c)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i4276"
                                                                                   "i4277"
                                                                                   "i4278"
                                                                                   "i4279"
                                                                                   "i4280"
                                                                                   "i4281"
                                                                                   "i4282"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(orig-x)
                                                                                 #((top))
                                                                                 #("i4273")))
                                                                              (hygiene
                                                                                guile))
                                                                           #{e0\ 4287}#)
                                                                     (cons '#(syntax-object
                                                                              begin
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(step)
                                                                                 #((top))
                                                                                 #("i4293"))
                                                                               #(ribcage
                                                                                 #(_
                                                                                   var
                                                                                   init
                                                                                   step
                                                                                   e0
                                                                                   e1
                                                                                   c)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i4276"
                                                                                   "i4277"
                                                                                   "i4278"
                                                                                   "i4279"
                                                                                   "i4280"
                                                                                   "i4281"
                                                                                   "i4282"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(orig-x)
                                                                                 #((top))
                                                                                 #("i4273")))
                                                                              (hygiene
                                                                                guile))
                                                                           (append
                                                                             #{c\ 4289}#
                                                                             (list (cons '#(syntax-object
                                                                                            doloop
                                                                                            ((top)
                                                                                             #(ribcage
                                                                                               #(step)
                                                                                               #((top))
                                                                                               #("i4293"))
                                                                                             #(ribcage
                                                                                               #(_
                                                                                                 var
                                                                                                 init
                                                                                                 step
                                                                                                 e0
                                                                                                 e1
                                                                                                 c)
                                                                                               #((top)
                                                                                                 (top)
                                                                                                 (top)
                                                                                                 (top)
                                                                                                 (top)
                                                                                                 (top)
                                                                                                 (top))
                                                                                               #("i4276"
                                                                                                 "i4277"
                                                                                                 "i4278"
                                                                                                 "i4279"
                                                                                                 "i4280"
                                                                                                 "i4281"
                                                                                                 "i4282"))
                                                                                             #(ribcage
                                                                                               ()
                                                                                               ()
                                                                                               ())
                                                                                             #(ribcage
                                                                                               #(orig-x)
                                                                                               #((top))
                                                                                               #("i4273")))
                                                                                            (hygiene
                                                                                              guile))
                                                                                         #{step\ 4294}#)))))))
                                                       #{tmp\ 4296}#)
                                                ((lambda (#{tmp\ 4301}#)
                                                   (if #{tmp\ 4301}#
                                                     (apply (lambda (#{e1\ 4304}#
                                                                     #{e2\ 4305}#)
                                                              (list '#(syntax-object
                                                                       let
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4302"
                                                                            "i4303"))
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i4293"))
                                                                        #(ribcage
                                                                          #(_
                                                                            var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4276"
                                                                            "i4277"
                                                                            "i4278"
                                                                            "i4279"
                                                                            "i4280"
                                                                            "i4281"
                                                                            "i4282"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i4273")))
                                                                       (hygiene
                                                                         guile))
                                                                    '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4302"
                                                                            "i4303"))
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i4293"))
                                                                        #(ribcage
                                                                          #(_
                                                                            var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4276"
                                                                            "i4277"
                                                                            "i4278"
                                                                            "i4279"
                                                                            "i4280"
                                                                            "i4281"
                                                                            "i4282"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i4273")))
                                                                       (hygiene
                                                                         guile))
                                                                    (map list
                                                                         #{var\ 4284}#
                                                                         #{init\ 4285}#)
                                                                    (list '#(syntax-object
                                                                             if
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4302"
                                                                                  "i4303"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i4293"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4276"
                                                                                  "i4277"
                                                                                  "i4278"
                                                                                  "i4279"
                                                                                  "i4280"
                                                                                  "i4281"
                                                                                  "i4282"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i4273")))
                                                                             (hygiene
                                                                               guile))
                                                                          #{e0\ 4287}#
                                                                          (cons '#(syntax-object
                                                                                   begin
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4302"
                                                                                        "i4303"))
                                                                                    #(ribcage
                                                                                      #(step)
                                                                                      #((top))
                                                                                      #("i4293"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        var
                                                                                        init
                                                                                        step
                                                                                        e0
                                                                                        e1
                                                                                        c)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4276"
                                                                                        "i4277"
                                                                                        "i4278"
                                                                                        "i4279"
                                                                                        "i4280"
                                                                                        "i4281"
                                                                                        "i4282"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(orig-x)
                                                                                      #((top))
                                                                                      #("i4273")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{e1\ 4304}#
                                                                                      #{e2\ 4305}#))
                                                                          (cons '#(syntax-object
                                                                                   begin
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4302"
                                                                                        "i4303"))
                                                                                    #(ribcage
                                                                                      #(step)
                                                                                      #((top))
                                                                                      #("i4293"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        var
                                                                                        init
                                                                                        step
                                                                                        e0
                                                                                        e1
                                                                                        c)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4276"
                                                                                        "i4277"
                                                                                        "i4278"
                                                                                        "i4279"
                                                                                        "i4280"
                                                                                        "i4281"
                                                                                        "i4282"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(orig-x)
                                                                                      #((top))
                                                                                      #("i4273")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (append
                                                                                  #{c\ 4289}#
                                                                                  (list (cons '#(syntax-object
                                                                                                 doloop
                                                                                                 ((top)
                                                                                                  #(ribcage
                                                                                                    #(e1
                                                                                                      e2)
                                                                                                    #((top)
                                                                                                      (top))
                                                                                                    #("i4302"
                                                                                                      "i4303"))
                                                                                                  #(ribcage
                                                                                                    #(step)
                                                                                                    #((top))
                                                                                                    #("i4293"))
                                                                                                  #(ribcage
                                                                                                    #(_
                                                                                                      var
                                                                                                      init
                                                                                                      step
                                                                                                      e0
                                                                                                      e1
                                                                                                      c)
                                                                                                    #((top)
                                                                                                      (top)
                                                                                                      (top)
                                                                                                      (top)
                                                                                                      (top)
                                                                                                      (top)
                                                                                                      (top))
                                                                                                    #("i4276"
                                                                                                      "i4277"
                                                                                                      "i4278"
                                                                                                      "i4279"
                                                                                                      "i4280"
                                                                                                      "i4281"
                                                                                                      "i4282"))
                                                                                                  #(ribcage
                                                                                                    ()
                                                                                                    ()
                                                                                                    ())
                                                                                                  #(ribcage
                                                                                                    #(orig-x)
                                                                                                    #((top))
                                                                                                    #("i4273")))
                                                                                                 (hygiene
                                                                                                   guile))
                                                                                              #{step\ 4294}#)))))))
                                                            #{tmp\ 4301}#)
                                                     (syntax-violation
                                                       #f
                                                       "source expression failed to match any pattern"
                                                       #{tmp\ 4295}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 4295}#
                                                   '(any . each-any)))))
                                            ($sc-dispatch
                                              #{tmp\ 4295}#
                                              '())))
                                         #{e1\ 4288}#))
                                      #{tmp\ 4292}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4291}#)))
                           ($sc-dispatch #{tmp\ 4291}# (quote each-any))))
                        (map (lambda (#{v\ 4312}# #{s\ 4313}#)
                               ((lambda (#{tmp\ 4316}#)
                                  ((lambda (#{tmp\ 4317}#)
                                     (if #{tmp\ 4317}#
                                       (apply (lambda () #{v\ 4312}#)
                                              #{tmp\ 4317}#)
                                       ((lambda (#{tmp\ 4318}#)
                                          (if #{tmp\ 4318}#
                                            (apply (lambda (#{e\ 4320}#)
                                                     #{e\ 4320}#)
                                                   #{tmp\ 4318}#)
                                            ((lambda (#{_\ 4322}#)
                                               (syntax-violation
                                                 'do
                                                 "bad step expression"
                                                 #{orig-x\ 4272}#
                                                 #{s\ 4313}#))
                                             #{tmp\ 4316}#)))
                                        ($sc-dispatch
                                          #{tmp\ 4316}#
                                          '(any)))))
                                   ($sc-dispatch #{tmp\ 4316}# (quote ()))))
                                #{s\ 4313}#))
                             #{var\ 4284}#
                             #{step\ 4286}#)))
                     #{tmp\ 4275}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4274}#)))
          ($sc-dispatch
            #{tmp\ 4274}#
            '(any #(each (any any . any))
                  (any . each-any)
                  .
                  each-any))))
       #{orig-x\ 4272}#))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec ((#{quasicons\ 4329}#
               (lambda (#{x\ 4333}# #{y\ 4334}#)
                 ((lambda (#{tmp\ 4338}#)
                    ((lambda (#{tmp\ 4339}#)
                       (if #{tmp\ 4339}#
                         (apply (lambda (#{x\ 4342}# #{y\ 4343}#)
                                  ((lambda (#{tmp\ 4344}#)
                                     ((lambda (#{tmp\ 4345}#)
                                        (if #{tmp\ 4345}#
                                          (apply (lambda (#{dy\ 4347}#)
                                                   ((lambda (#{tmp\ 4348}#)
                                                      ((lambda (#{tmp\ 4349}#)
                                                         (if #{tmp\ 4349}#
                                                           (apply (lambda (#{dx\ 4351}#)
                                                                    (list '#(syntax-object
                                                                             quote
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(dx)
                                                                                #((top))
                                                                                #("i4350"))
                                                                              #(ribcage
                                                                                #(dy)
                                                                                #((top))
                                                                                #("i4346"))
                                                                              #(ribcage
                                                                                #(x
                                                                                  y)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4340"
                                                                                  "i4341"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x
                                                                                  y)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4335"
                                                                                  "i4336"))
                                                                              #(ribcage
                                                                                #(quasicons
                                                                                  quasiappend
                                                                                  quasivector
                                                                                  quasi)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4325"
                                                                                  "i4326"
                                                                                  "i4327"
                                                                                  "i4328")))
                                                                             (hygiene
                                                                               guile))
                                                                          (cons #{dx\ 4351}#
                                                                                #{dy\ 4347}#)))
                                                                  #{tmp\ 4349}#)
                                                           ((lambda (#{_\ 4353}#)
                                                              (if (null? #{dy\ 4347}#)
                                                                (list '#(syntax-object
                                                                         list
                                                                         ((top)
                                                                          #(ribcage
                                                                            #(_)
                                                                            #((top))
                                                                            #("i4352"))
                                                                          #(ribcage
                                                                            #(dy)
                                                                            #((top))
                                                                            #("i4346"))
                                                                          #(ribcage
                                                                            #(x
                                                                              y)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4340"
                                                                              "i4341"))
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            #(x
                                                                              y)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4335"
                                                                              "i4336"))
                                                                          #(ribcage
                                                                            #(quasicons
                                                                              quasiappend
                                                                              quasivector
                                                                              quasi)
                                                                            #((top)
                                                                              (top)
                                                                              (top)
                                                                              (top))
                                                                            #("i4325"
                                                                              "i4326"
                                                                              "i4327"
                                                                              "i4328")))
                                                                         (hygiene
                                                                           guile))
                                                                      #{x\ 4342}#)
                                                                (list '#(syntax-object
                                                                         cons
                                                                         ((top)
                                                                          #(ribcage
                                                                            #(_)
                                                                            #((top))
                                                                            #("i4352"))
                                                                          #(ribcage
                                                                            #(dy)
                                                                            #((top))
                                                                            #("i4346"))
                                                                          #(ribcage
                                                                            #(x
                                                                              y)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4340"
                                                                              "i4341"))
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            #(x
                                                                              y)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4335"
                                                                              "i4336"))
                                                                          #(ribcage
                                                                            #(quasicons
                                                                              quasiappend
                                                                              quasivector
                                                                              quasi)
                                                                            #((top)
                                                                              (top)
                                                                              (top)
                                                                              (top))
                                                                            #("i4325"
                                                                              "i4326"
                                                                              "i4327"
                                                                              "i4328")))
                                                                         (hygiene
                                                                           guile))
                                                                      #{x\ 4342}#
                                                                      #{y\ 4343}#)))
                                                            #{tmp\ 4348}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 4348}#
                                                         '(#(free-id
                                                             #(syntax-object
                                                               quote
                                                               ((top)
                                                                #(ribcage
                                                                  #(dy)
                                                                  #((top))
                                                                  #("i4346"))
                                                                #(ribcage
                                                                  #(x y)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4340"
                                                                    "i4341"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x y)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4335"
                                                                    "i4336"))
                                                                #(ribcage
                                                                  #(quasicons
                                                                    quasiappend
                                                                    quasivector
                                                                    quasi)
                                                                  #((top)
                                                                    (top)
                                                                    (top)
                                                                    (top))
                                                                  #("i4325"
                                                                    "i4326"
                                                                    "i4327"
                                                                    "i4328")))
                                                               (hygiene
                                                                 guile)))
                                                           any))))
                                                    #{x\ 4342}#))
                                                 #{tmp\ 4345}#)
                                          ((lambda (#{tmp\ 4354}#)
                                             (if #{tmp\ 4354}#
                                               (apply (lambda (#{stuff\ 4356}#)
                                                        (cons '#(syntax-object
                                                                 list
                                                                 ((top)
                                                                  #(ribcage
                                                                    #(stuff)
                                                                    #((top))
                                                                    #("i4355"))
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4340"
                                                                      "i4341"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4335"
                                                                      "i4336"))
                                                                  #(ribcage
                                                                    #(quasicons
                                                                      quasiappend
                                                                      quasivector
                                                                      quasi)
                                                                    #((top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                    #("i4325"
                                                                      "i4326"
                                                                      "i4327"
                                                                      "i4328")))
                                                                 (hygiene
                                                                   guile))
                                                              (cons #{x\ 4342}#
                                                                    #{stuff\ 4356}#)))
                                                      #{tmp\ 4354}#)
                                               ((lambda (#{else\ 4358}#)
                                                  (list '#(syntax-object
                                                           cons
                                                           ((top)
                                                            #(ribcage
                                                              #(else)
                                                              #((top))
                                                              #("i4357"))
                                                            #(ribcage
                                                              #(x y)
                                                              #((top) (top))
                                                              #("i4340"
                                                                "i4341"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(x y)
                                                              #((top) (top))
                                                              #("i4335"
                                                                "i4336"))
                                                            #(ribcage
                                                              #(quasicons
                                                                quasiappend
                                                                quasivector
                                                                quasi)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("i4325"
                                                                "i4326"
                                                                "i4327"
                                                                "i4328")))
                                                           (hygiene guile))
                                                        #{x\ 4342}#
                                                        #{y\ 4343}#))
                                                #{tmp\ 4344}#)))
                                           ($sc-dispatch
                                             #{tmp\ 4344}#
                                             '(#(free-id
                                                 #(syntax-object
                                                   list
                                                   ((top)
                                                    #(ribcage
                                                      #(x y)
                                                      #((top) (top))
                                                      #("i4340" "i4341"))
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x y)
                                                      #((top) (top))
                                                      #("i4335" "i4336"))
                                                    #(ribcage
                                                      #(quasicons
                                                        quasiappend
                                                        quasivector
                                                        quasi)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i4325"
                                                        "i4326"
                                                        "i4327"
                                                        "i4328")))
                                                   (hygiene guile)))
                                               .
                                               any)))))
                                      ($sc-dispatch
                                        #{tmp\ 4344}#
                                        '(#(free-id
                                            #(syntax-object
                                              quote
                                              ((top)
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4340" "i4341"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4335" "i4336"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i4325"
                                                   "i4326"
                                                   "i4327"
                                                   "i4328")))
                                              (hygiene guile)))
                                          any))))
                                   #{y\ 4343}#))
                                #{tmp\ 4339}#)
                         (syntax-violation
                           #f
                           "source expression failed to match any pattern"
                           #{tmp\ 4338}#)))
                     ($sc-dispatch #{tmp\ 4338}# (quote (any any)))))
                  (list #{x\ 4333}# #{y\ 4334}#))))
             (#{quasiappend\ 4330}#
               (lambda (#{x\ 4359}# #{y\ 4360}#)
                 ((lambda (#{tmp\ 4364}#)
                    ((lambda (#{tmp\ 4365}#)
                       (if #{tmp\ 4365}#
                         (apply (lambda (#{x\ 4368}# #{y\ 4369}#)
                                  ((lambda (#{tmp\ 4370}#)
                                     ((lambda (#{tmp\ 4371}#)
                                        (if #{tmp\ 4371}#
                                          (apply (lambda () #{x\ 4368}#)
                                                 #{tmp\ 4371}#)
                                          ((lambda (#{_\ 4373}#)
                                             (list '#(syntax-object
                                                      append
                                                      ((top)
                                                       #(ribcage
                                                         #(_)
                                                         #((top))
                                                         #("i4372"))
                                                       #(ribcage
                                                         #(x y)
                                                         #((top) (top))
                                                         #("i4366" "i4367"))
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x y)
                                                         #((top) (top))
                                                         #("i4361" "i4362"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4325"
                                                           "i4326"
                                                           "i4327"
                                                           "i4328")))
                                                      (hygiene guile))
                                                   #{x\ 4368}#
                                                   #{y\ 4369}#))
                                           #{tmp\ 4370}#)))
                                      ($sc-dispatch
                                        #{tmp\ 4370}#
                                        '(#(free-id
                                            #(syntax-object
                                              quote
                                              ((top)
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4366" "i4367"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4361" "i4362"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i4325"
                                                   "i4326"
                                                   "i4327"
                                                   "i4328")))
                                              (hygiene guile)))
                                          ()))))
                                   #{y\ 4369}#))
                                #{tmp\ 4365}#)
                         (syntax-violation
                           #f
                           "source expression failed to match any pattern"
                           #{tmp\ 4364}#)))
                     ($sc-dispatch #{tmp\ 4364}# (quote (any any)))))
                  (list #{x\ 4359}# #{y\ 4360}#))))
             (#{quasivector\ 4331}#
               (lambda (#{x\ 4374}#)
                 ((lambda (#{tmp\ 4377}#)
                    ((lambda (#{x\ 4379}#)
                       ((lambda (#{tmp\ 4380}#)
                          ((lambda (#{tmp\ 4381}#)
                             (if #{tmp\ 4381}#
                               (apply (lambda (#{x\ 4383}#)
                                        (list '#(syntax-object
                                                 quote
                                                 ((top)
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i4382"))
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i4378"))
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i4375"))
                                                  #(ribcage
                                                    #(quasicons
                                                      quasiappend
                                                      quasivector
                                                      quasi)
                                                    #((top) (top) (top) (top))
                                                    #("i4325"
                                                      "i4326"
                                                      "i4327"
                                                      "i4328")))
                                                 (hygiene guile))
                                              (list->vector #{x\ 4383}#)))
                                      #{tmp\ 4381}#)
                               ((lambda (#{tmp\ 4385}#)
                                  (if #{tmp\ 4385}#
                                    (apply (lambda (#{x\ 4387}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4386"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4378"))
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4375"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4325"
                                                           "i4326"
                                                           "i4327"
                                                           "i4328")))
                                                      (hygiene guile))
                                                   #{x\ 4387}#))
                                           #{tmp\ 4385}#)
                                    ((lambda (#{_\ 4390}#)
                                       (list '#(syntax-object
                                                list->vector
                                                ((top)
                                                 #(ribcage
                                                   #(_)
                                                   #((top))
                                                   #("i4389"))
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i4378"))
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i4375"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i4325"
                                                     "i4326"
                                                     "i4327"
                                                     "i4328")))
                                                (hygiene guile))
                                             #{x\ 4379}#))
                                     #{tmp\ 4380}#)))
                                ($sc-dispatch
                                  #{tmp\ 4380}#
                                  '(#(free-id
                                      #(syntax-object
                                        list
                                        ((top)
                                         #(ribcage #(x) #((top)) #("i4378"))
                                         #(ribcage () () ())
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i4375"))
                                         #(ribcage
                                           #(quasicons
                                             quasiappend
                                             quasivector
                                             quasi)
                                           #((top) (top) (top) (top))
                                           #("i4325" "i4326" "i4327" "i4328")))
                                        (hygiene guile)))
                                    .
                                    each-any)))))
                           ($sc-dispatch
                             #{tmp\ 4380}#
                             '(#(free-id
                                 #(syntax-object
                                   quote
                                   ((top)
                                    #(ribcage #(x) #((top)) #("i4378"))
                                    #(ribcage () () ())
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4375"))
                                    #(ribcage
                                      #(quasicons
                                        quasiappend
                                        quasivector
                                        quasi)
                                      #((top) (top) (top) (top))
                                      #("i4325" "i4326" "i4327" "i4328")))
                                   (hygiene guile)))
                               each-any))))
                        #{x\ 4379}#))
                     #{tmp\ 4377}#))
                  #{x\ 4374}#)))
             (#{quasi\ 4332}#
               (lambda (#{p\ 4391}# #{lev\ 4392}#)
                 ((lambda (#{tmp\ 4395}#)
                    ((lambda (#{tmp\ 4396}#)
                       (if #{tmp\ 4396}#
                         (apply (lambda (#{p\ 4398}#)
                                  (if (= #{lev\ 4392}# 0)
                                    #{p\ 4398}#
                                    (#{quasicons\ 4329}#
                                      '(#(syntax-object
                                          quote
                                          ((top)
                                           #(ribcage #(p) #((top)) #("i4397"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p lev)
                                             #((top) (top))
                                             #("i4393" "i4394"))
                                           #(ribcage
                                             #(quasicons
                                               quasiappend
                                               quasivector
                                               quasi)
                                             #((top) (top) (top) (top))
                                             #("i4325"
                                               "i4326"
                                               "i4327"
                                               "i4328")))
                                          (hygiene guile))
                                        #(syntax-object
                                          unquote
                                          ((top)
                                           #(ribcage #(p) #((top)) #("i4397"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p lev)
                                             #((top) (top))
                                             #("i4393" "i4394"))
                                           #(ribcage
                                             #(quasicons
                                               quasiappend
                                               quasivector
                                               quasi)
                                             #((top) (top) (top) (top))
                                             #("i4325"
                                               "i4326"
                                               "i4327"
                                               "i4328")))
                                          (hygiene guile)))
                                      (#{quasi\ 4332}#
                                        (list #{p\ 4398}#)
                                        (- #{lev\ 4392}# 1)))))
                                #{tmp\ 4396}#)
                         ((lambda (#{tmp\ 4399}#)
                            (if (if #{tmp\ 4399}#
                                  (apply (lambda (#{args\ 4401}#)
                                           (= #{lev\ 4392}# 0))
                                         #{tmp\ 4399}#)
                                  #f)
                              (apply (lambda (#{args\ 4403}#)
                                       (syntax-violation
                                         'unquote
                                         "unquote takes exactly one argument"
                                         #{p\ 4391}#
                                         (cons '#(syntax-object
                                                  unquote
                                                  ((top)
                                                   #(ribcage
                                                     #(args)
                                                     #((top))
                                                     #("i4402"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(p lev)
                                                     #((top) (top))
                                                     #("i4393" "i4394"))
                                                   #(ribcage
                                                     #(quasicons
                                                       quasiappend
                                                       quasivector
                                                       quasi)
                                                     #((top) (top) (top) (top))
                                                     #("i4325"
                                                       "i4326"
                                                       "i4327"
                                                       "i4328")))
                                                  (hygiene guile))
                                               #{args\ 4403}#)))
                                     #{tmp\ 4399}#)
                              ((lambda (#{tmp\ 4404}#)
                                 (if #{tmp\ 4404}#
                                   (apply (lambda (#{p\ 4407}# #{q\ 4408}#)
                                            (if (= #{lev\ 4392}# 0)
                                              (#{quasiappend\ 4330}#
                                                #{p\ 4407}#
                                                (#{quasi\ 4332}#
                                                  #{q\ 4408}#
                                                  #{lev\ 4392}#))
                                              (#{quasicons\ 4329}#
                                                (#{quasicons\ 4329}#
                                                  '(#(syntax-object
                                                      quote
                                                      ((top)
                                                       #(ribcage
                                                         #(p q)
                                                         #((top) (top))
                                                         #("i4405" "i4406"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(p lev)
                                                         #((top) (top))
                                                         #("i4393" "i4394"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4325"
                                                           "i4326"
                                                           "i4327"
                                                           "i4328")))
                                                      (hygiene guile))
                                                    #(syntax-object
                                                      unquote-splicing
                                                      ((top)
                                                       #(ribcage
                                                         #(p q)
                                                         #((top) (top))
                                                         #("i4405" "i4406"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(p lev)
                                                         #((top) (top))
                                                         #("i4393" "i4394"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4325"
                                                           "i4326"
                                                           "i4327"
                                                           "i4328")))
                                                      (hygiene guile)))
                                                  (#{quasi\ 4332}#
                                                    (list #{p\ 4407}#)
                                                    (- #{lev\ 4392}# 1)))
                                                (#{quasi\ 4332}#
                                                  #{q\ 4408}#
                                                  #{lev\ 4392}#))))
                                          #{tmp\ 4404}#)
                                   ((lambda (#{tmp\ 4409}#)
                                      (if (if #{tmp\ 4409}#
                                            (apply (lambda (#{args\ 4412}#
                                                            #{q\ 4413}#)
                                                     (= #{lev\ 4392}# 0))
                                                   #{tmp\ 4409}#)
                                            #f)
                                        (apply (lambda (#{args\ 4416}#
                                                        #{q\ 4417}#)
                                                 (syntax-violation
                                                   'unquote-splicing
                                                   "unquote-splicing takes exactly one argument"
                                                   #{p\ 4391}#
                                                   (cons '#(syntax-object
                                                            unquote-splicing
                                                            ((top)
                                                             #(ribcage
                                                               #(args q)
                                                               #((top) (top))
                                                               #("i4414"
                                                                 "i4415"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4393"
                                                                 "i4394"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4325"
                                                                 "i4326"
                                                                 "i4327"
                                                                 "i4328")))
                                                            (hygiene guile))
                                                         #{args\ 4416}#)))
                                               #{tmp\ 4409}#)
                                        ((lambda (#{tmp\ 4418}#)
                                           (if #{tmp\ 4418}#
                                             (apply (lambda (#{p\ 4420}#)
                                                      (#{quasicons\ 4329}#
                                                        '(#(syntax-object
                                                            quote
                                                            ((top)
                                                             #(ribcage
                                                               #(p)
                                                               #((top))
                                                               #("i4419"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4393"
                                                                 "i4394"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4325"
                                                                 "i4326"
                                                                 "i4327"
                                                                 "i4328")))
                                                            (hygiene guile))
                                                          #(syntax-object
                                                            quasiquote
                                                            ((top)
                                                             #(ribcage
                                                               #(p)
                                                               #((top))
                                                               #("i4419"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4393"
                                                                 "i4394"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4325"
                                                                 "i4326"
                                                                 "i4327"
                                                                 "i4328")))
                                                            (hygiene guile)))
                                                        (#{quasi\ 4332}#
                                                          (list #{p\ 4420}#)
                                                          (+ #{lev\ 4392}#
                                                             1))))
                                                    #{tmp\ 4418}#)
                                             ((lambda (#{tmp\ 4421}#)
                                                (if #{tmp\ 4421}#
                                                  (apply (lambda (#{p\ 4424}#
                                                                  #{q\ 4425}#)
                                                           (#{quasicons\ 4329}#
                                                             (#{quasi\ 4332}#
                                                               #{p\ 4424}#
                                                               #{lev\ 4392}#)
                                                             (#{quasi\ 4332}#
                                                               #{q\ 4425}#
                                                               #{lev\ 4392}#)))
                                                         #{tmp\ 4421}#)
                                                  ((lambda (#{tmp\ 4426}#)
                                                     (if #{tmp\ 4426}#
                                                       (apply (lambda (#{x\ 4428}#)
                                                                (#{quasivector\ 4331}#
                                                                  (#{quasi\ 4332}#
                                                                    #{x\ 4428}#
                                                                    #{lev\ 4392}#)))
                                                              #{tmp\ 4426}#)
                                                       ((lambda (#{p\ 4431}#)
                                                          (list '#(syntax-object
                                                                   quote
                                                                   ((top)
                                                                    #(ribcage
                                                                      #(p)
                                                                      #((top))
                                                                      #("i4430"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(p lev)
                                                                      #((top)
                                                                        (top))
                                                                      #("i4393"
                                                                        "i4394"))
                                                                    #(ribcage
                                                                      #(quasicons
                                                                        quasiappend
                                                                        quasivector
                                                                        quasi)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i4325"
                                                                        "i4326"
                                                                        "i4327"
                                                                        "i4328")))
                                                                   (hygiene
                                                                     guile))
                                                                #{p\ 4431}#))
                                                        #{tmp\ 4395}#)))
                                                   ($sc-dispatch
                                                     #{tmp\ 4395}#
                                                     '#(vector each-any)))))
                                              ($sc-dispatch
                                                #{tmp\ 4395}#
                                                '(any . any)))))
                                         ($sc-dispatch
                                           #{tmp\ 4395}#
                                           '(#(free-id
                                               #(syntax-object
                                                 quasiquote
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i4393" "i4394"))
                                                  #(ribcage
                                                    #(quasicons
                                                      quasiappend
                                                      quasivector
                                                      quasi)
                                                    #((top) (top) (top) (top))
                                                    #("i4325"
                                                      "i4326"
                                                      "i4327"
                                                      "i4328")))
                                                 (hygiene guile)))
                                             any)))))
                                    ($sc-dispatch
                                      #{tmp\ 4395}#
                                      '((#(free-id
                                           #(syntax-object
                                             unquote-splicing
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i4393" "i4394"))
                                              #(ribcage
                                                #(quasicons
                                                  quasiappend
                                                  quasivector
                                                  quasi)
                                                #((top) (top) (top) (top))
                                                #("i4325"
                                                  "i4326"
                                                  "i4327"
                                                  "i4328")))
                                             (hygiene guile)))
                                         .
                                         any)
                                        .
                                        any)))))
                               ($sc-dispatch
                                 #{tmp\ 4395}#
                                 '((#(free-id
                                      #(syntax-object
                                        unquote-splicing
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p lev)
                                           #((top) (top))
                                           #("i4393" "i4394"))
                                         #(ribcage
                                           #(quasicons
                                             quasiappend
                                             quasivector
                                             quasi)
                                           #((top) (top) (top) (top))
                                           #("i4325" "i4326" "i4327" "i4328")))
                                        (hygiene guile)))
                                    any)
                                   .
                                   any)))))
                          ($sc-dispatch
                            #{tmp\ 4395}#
                            '(#(free-id
                                #(syntax-object
                                  unquote
                                  ((top)
                                   #(ribcage () () ())
                                   #(ribcage
                                     #(p lev)
                                     #((top) (top))
                                     #("i4393" "i4394"))
                                   #(ribcage
                                     #(quasicons quasiappend quasivector quasi)
                                     #((top) (top) (top) (top))
                                     #("i4325" "i4326" "i4327" "i4328")))
                                  (hygiene guile)))
                              .
                              any)))))
                     ($sc-dispatch
                       #{tmp\ 4395}#
                       '(#(free-id
                           #(syntax-object
                             unquote
                             ((top)
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i4393" "i4394"))
                              #(ribcage
                                #(quasicons quasiappend quasivector quasi)
                                #((top) (top) (top) (top))
                                #("i4325" "i4326" "i4327" "i4328")))
                             (hygiene guile)))
                         any))))
                  #{p\ 4391}#))))
      (lambda (#{x\ 4432}#)
        ((lambda (#{tmp\ 4434}#)
           ((lambda (#{tmp\ 4435}#)
              (if #{tmp\ 4435}#
                (apply (lambda (#{_\ 4438}# #{e\ 4439}#)
                         (#{quasi\ 4332}# #{e\ 4439}# 0))
                       #{tmp\ 4435}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4434}#)))
            ($sc-dispatch #{tmp\ 4434}# (quote (any any)))))
         #{x\ 4432}#)))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x\ 4440}#)
      (letrec*
        ((#{read-file\ 4443}#
           (lambda (#{fn\ 4444}# #{k\ 4445}#)
             (let ((#{p\ 4449}# (open-input-file #{fn\ 4444}#)))
               (letrec ((#{f\ 4453}#
                          (lambda (#{x\ 4454}# #{result\ 4455}#)
                            (if (eof-object? #{x\ 4454}#)
                              (begin
                                (close-input-port #{p\ 4449}#)
                                (reverse #{result\ 4455}#))
                              (#{f\ 4453}#
                                (read #{p\ 4449}#)
                                (cons (datum->syntax #{k\ 4445}# #{x\ 4454}#)
                                      #{result\ 4455}#))))))
                 (#{f\ 4453}# (read #{p\ 4449}#) (quote ())))))))
        ((lambda (#{tmp\ 4456}#)
           ((lambda (#{tmp\ 4457}#)
              (if #{tmp\ 4457}#
                (apply (lambda (#{k\ 4460}# #{filename\ 4461}#)
                         (let ((#{fn\ 4463}#
                                 (syntax->datum #{filename\ 4461}#)))
                           ((lambda (#{tmp\ 4465}#)
                              ((lambda (#{tmp\ 4466}#)
                                 (if #{tmp\ 4466}#
                                   (apply (lambda (#{exp\ 4468}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage
                                                        #(exp)
                                                        #((top))
                                                        #("i4467"))
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(fn)
                                                        #((top))
                                                        #("i4462"))
                                                      #(ribcage
                                                        #(k filename)
                                                        #((top) (top))
                                                        #("i4458" "i4459"))
                                                      #(ribcage
                                                        (read-file)
                                                        ((top))
                                                        ("i4442"))
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4441")))
                                                     (hygiene guile))
                                                  #{exp\ 4468}#))
                                          #{tmp\ 4466}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{tmp\ 4465}#)))
                               ($sc-dispatch #{tmp\ 4465}# (quote each-any))))
                            (#{read-file\ 4443}#
                              #{fn\ 4463}#
                              #{filename\ 4461}#))))
                       #{tmp\ 4457}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4456}#)))
            ($sc-dispatch #{tmp\ 4456}# (quote (any any)))))
         #{x\ 4440}#)))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x\ 4470}#)
      ((lambda (#{tmp\ 4472}#)
         ((lambda (#{tmp\ 4473}#)
            (if #{tmp\ 4473}#
              (apply (lambda (#{k\ 4476}# #{filename\ 4477}#)
                       (let ((#{fn\ 4479}# (syntax->datum #{filename\ 4477}#)))
                         ((lambda (#{tmp\ 4481}#)
                            ((lambda (#{fn\ 4483}#)
                               (list '#(syntax-object
                                        include
                                        ((top)
                                         #(ribcage #(fn) #((top)) #("i4482"))
                                         #(ribcage () () ())
                                         #(ribcage () () ())
                                         #(ribcage #(fn) #((top)) #("i4478"))
                                         #(ribcage
                                           #(k filename)
                                           #((top) (top))
                                           #("i4474" "i4475"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i4471")))
                                        (hygiene guile))
                                     #{fn\ 4483}#))
                             #{tmp\ 4481}#))
                          (datum->syntax
                            #{filename\ 4477}#
                            (let ((#{t\ 4486}#
                                    (%search-load-path #{fn\ 4479}#)))
                              (if #{t\ 4486}#
                                #{t\ 4486}#
                                (syntax-violation
                                  'include-from-path
                                  "file not found in path"
                                  #{x\ 4470}#
                                  #{filename\ 4477}#)))))))
                     #{tmp\ 4473}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4472}#)))
          ($sc-dispatch #{tmp\ 4472}# (quote (any any)))))
       #{x\ 4470}#))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x\ 4488}#)
      ((lambda (#{tmp\ 4490}#)
         ((lambda (#{tmp\ 4491}#)
            (if #{tmp\ 4491}#
              (apply (lambda (#{_\ 4494}# #{e\ 4495}#)
                       (syntax-violation
                         'unquote
                         "expression not valid outside of quasiquote"
                         #{x\ 4488}#))
                     #{tmp\ 4491}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4490}#)))
          ($sc-dispatch #{tmp\ 4490}# (quote (any any)))))
       #{x\ 4488}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x\ 4496}#)
      ((lambda (#{tmp\ 4498}#)
         ((lambda (#{tmp\ 4499}#)
            (if #{tmp\ 4499}#
              (apply (lambda (#{_\ 4502}# #{e\ 4503}#)
                       (syntax-violation
                         'unquote-splicing
                         "expression not valid outside of quasiquote"
                         #{x\ 4496}#))
                     #{tmp\ 4499}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4498}#)))
          ($sc-dispatch #{tmp\ 4498}# (quote (any any)))))
       #{x\ 4496}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x\ 4504}#)
      ((lambda (#{tmp\ 4506}#)
         ((lambda (#{tmp\ 4507}#)
            (if #{tmp\ 4507}#
              (apply (lambda (#{_\ 4512}#
                              #{e\ 4513}#
                              #{m1\ 4514}#
                              #{m2\ 4515}#)
                       ((lambda (#{tmp\ 4517}#)
                          ((lambda (#{body\ 4519}#)
                             (list '#(syntax-object
                                      let
                                      ((top)
                                       #(ribcage #(body) #((top)) #("i4518"))
                                       #(ribcage
                                         #(_ e m1 m2)
                                         #((top) (top) (top) (top))
                                         #("i4508" "i4509" "i4510" "i4511"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4505")))
                                      (hygiene guile))
                                   (list (list '#(syntax-object
                                                  t
                                                  ((top)
                                                   #(ribcage
                                                     #(body)
                                                     #((top))
                                                     #("i4518"))
                                                   #(ribcage
                                                     #(_ e m1 m2)
                                                     #((top) (top) (top) (top))
                                                     #("i4508"
                                                       "i4509"
                                                       "i4510"
                                                       "i4511"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4505")))
                                                  (hygiene guile))
                                               #{e\ 4513}#))
                                   #{body\ 4519}#))
                           #{tmp\ 4517}#))
                        (letrec ((#{f\ 4523}#
                                   (lambda (#{clause\ 4524}# #{clauses\ 4525}#)
                                     (if (null? #{clauses\ 4525}#)
                                       ((lambda (#{tmp\ 4527}#)
                                          ((lambda (#{tmp\ 4528}#)
                                             (if #{tmp\ 4528}#
                                               (apply (lambda (#{e1\ 4531}#
                                                               #{e2\ 4532}#)
                                                        (cons '#(syntax-object
                                                                 begin
                                                                 ((top)
                                                                  #(ribcage
                                                                    #(e1 e2)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4529"
                                                                      "i4530"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f
                                                                      clause
                                                                      clauses)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i4520"
                                                                      "i4521"
                                                                      "i4522"))
                                                                  #(ribcage
                                                                    #(_
                                                                      e
                                                                      m1
                                                                      m2)
                                                                    #((top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                    #("i4508"
                                                                      "i4509"
                                                                      "i4510"
                                                                      "i4511"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i4505")))
                                                                 (hygiene
                                                                   guile))
                                                              (cons #{e1\ 4531}#
                                                                    #{e2\ 4532}#)))
                                                      #{tmp\ 4528}#)
                                               ((lambda (#{tmp\ 4534}#)
                                                  (if #{tmp\ 4534}#
                                                    (apply (lambda (#{k\ 4538}#
                                                                    #{e1\ 4539}#
                                                                    #{e2\ 4540}#)
                                                             (list '#(syntax-object
                                                                      if
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(k
                                                                           e1
                                                                           e2)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i4535"
                                                                           "i4536"
                                                                           "i4537"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           clause
                                                                           clauses)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i4520"
                                                                           "i4521"
                                                                           "i4522"))
                                                                       #(ribcage
                                                                         #(_
                                                                           e
                                                                           m1
                                                                           m2)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i4508"
                                                                           "i4509"
                                                                           "i4510"
                                                                           "i4511"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i4505")))
                                                                      (hygiene
                                                                        guile))
                                                                   (list '#(syntax-object
                                                                            memv
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4535"
                                                                                 "i4536"
                                                                                 "i4537"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4520"
                                                                                 "i4521"
                                                                                 "i4522"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4508"
                                                                                 "i4509"
                                                                                 "i4510"
                                                                                 "i4511"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i4505")))
                                                                            (hygiene
                                                                              guile))
                                                                         '#(syntax-object
                                                                            t
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4535"
                                                                                 "i4536"
                                                                                 "i4537"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4520"
                                                                                 "i4521"
                                                                                 "i4522"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4508"
                                                                                 "i4509"
                                                                                 "i4510"
                                                                                 "i4511"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i4505")))
                                                                            (hygiene
                                                                              guile))
                                                                         (list '#(syntax-object
                                                                                  quote
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4535"
                                                                                       "i4536"
                                                                                       "i4537"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4520"
                                                                                       "i4521"
                                                                                       "i4522"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4508"
                                                                                       "i4509"
                                                                                       "i4510"
                                                                                       "i4511"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4505")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               #{k\ 4538}#))
                                                                   (cons '#(syntax-object
                                                                            begin
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4535"
                                                                                 "i4536"
                                                                                 "i4537"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4520"
                                                                                 "i4521"
                                                                                 "i4522"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4508"
                                                                                 "i4509"
                                                                                 "i4510"
                                                                                 "i4511"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i4505")))
                                                                            (hygiene
                                                                              guile))
                                                                         (cons #{e1\ 4539}#
                                                                               #{e2\ 4540}#))))
                                                           #{tmp\ 4534}#)
                                                    ((lambda (#{_\ 4544}#)
                                                       (syntax-violation
                                                         'case
                                                         "bad clause"
                                                         #{x\ 4504}#
                                                         #{clause\ 4524}#))
                                                     #{tmp\ 4527}#)))
                                                ($sc-dispatch
                                                  #{tmp\ 4527}#
                                                  '(each-any
                                                     any
                                                     .
                                                     each-any)))))
                                           ($sc-dispatch
                                             #{tmp\ 4527}#
                                             '(#(free-id
                                                 #(syntax-object
                                                   else
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f clause clauses)
                                                      #((top) (top) (top))
                                                      #("i4520"
                                                        "i4521"
                                                        "i4522"))
                                                    #(ribcage
                                                      #(_ e m1 m2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i4508"
                                                        "i4509"
                                                        "i4510"
                                                        "i4511"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4505")))
                                                   (hygiene guile)))
                                               any
                                               .
                                               each-any))))
                                        #{clause\ 4524}#)
                                       ((lambda (#{tmp\ 4546}#)
                                          ((lambda (#{rest\ 4548}#)
                                             ((lambda (#{tmp\ 4549}#)
                                                ((lambda (#{tmp\ 4550}#)
                                                   (if #{tmp\ 4550}#
                                                     (apply (lambda (#{k\ 4554}#
                                                                     #{e1\ 4555}#
                                                                     #{e2\ 4556}#)
                                                              (list '#(syntax-object
                                                                       if
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(k
                                                                            e1
                                                                            e2)
                                                                          #((top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4551"
                                                                            "i4552"
                                                                            "i4553"))
                                                                        #(ribcage
                                                                          #(rest)
                                                                          #((top))
                                                                          #("i4547"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(f
                                                                            clause
                                                                            clauses)
                                                                          #((top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4520"
                                                                            "i4521"
                                                                            "i4522"))
                                                                        #(ribcage
                                                                          #(_
                                                                            e
                                                                            m1
                                                                            m2)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4508"
                                                                            "i4509"
                                                                            "i4510"
                                                                            "i4511"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x)
                                                                          #((top))
                                                                          #("i4505")))
                                                                       (hygiene
                                                                         guile))
                                                                    (list '#(syntax-object
                                                                             memv
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4551"
                                                                                  "i4552"
                                                                                  "i4553"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i4547"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4520"
                                                                                  "i4521"
                                                                                  "i4522"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4508"
                                                                                  "i4509"
                                                                                  "i4510"
                                                                                  "i4511"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i4505")))
                                                                             (hygiene
                                                                               guile))
                                                                          '#(syntax-object
                                                                             t
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4551"
                                                                                  "i4552"
                                                                                  "i4553"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i4547"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4520"
                                                                                  "i4521"
                                                                                  "i4522"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4508"
                                                                                  "i4509"
                                                                                  "i4510"
                                                                                  "i4511"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i4505")))
                                                                             (hygiene
                                                                               guile))
                                                                          (list '#(syntax-object
                                                                                   quote
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4551"
                                                                                        "i4552"
                                                                                        "i4553"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4547"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4520"
                                                                                        "i4521"
                                                                                        "i4522"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4508"
                                                                                        "i4509"
                                                                                        "i4510"
                                                                                        "i4511"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4505")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                #{k\ 4554}#))
                                                                    (cons '#(syntax-object
                                                                             begin
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4551"
                                                                                  "i4552"
                                                                                  "i4553"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i4547"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4520"
                                                                                  "i4521"
                                                                                  "i4522"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4508"
                                                                                  "i4509"
                                                                                  "i4510"
                                                                                  "i4511"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i4505")))
                                                                             (hygiene
                                                                               guile))
                                                                          (cons #{e1\ 4555}#
                                                                                #{e2\ 4556}#))
                                                                    #{rest\ 4548}#))
                                                            #{tmp\ 4550}#)
                                                     ((lambda (#{_\ 4560}#)
                                                        (syntax-violation
                                                          'case
                                                          "bad clause"
                                                          #{x\ 4504}#
                                                          #{clause\ 4524}#))
                                                      #{tmp\ 4549}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 4549}#
                                                   '(each-any
                                                      any
                                                      .
                                                      each-any))))
                                              #{clause\ 4524}#))
                                           #{tmp\ 4546}#))
                                        (#{f\ 4523}#
                                          (car #{clauses\ 4525}#)
                                          (cdr #{clauses\ 4525}#)))))))
                          (#{f\ 4523}# #{m1\ 4514}# #{m2\ 4515}#))))
                     #{tmp\ 4507}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4506}#)))
          ($sc-dispatch
            #{tmp\ 4506}#
            '(any any any . each-any))))
       #{x\ 4504}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x\ 4561}#)
      ((lambda (#{tmp\ 4563}#)
         ((lambda (#{tmp\ 4564}#)
            (if #{tmp\ 4564}#
              (apply (lambda (#{_\ 4567}# #{e\ 4568}#)
                       (list '#(syntax-object
                                lambda
                                ((top)
                                 #(ribcage
                                   #(_ e)
                                   #((top) (top))
                                   #("i4565" "i4566"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4562")))
                                (hygiene guile))
                             '(#(syntax-object
                                 x
                                 ((top)
                                  #(ribcage
                                    #(_ e)
                                    #((top) (top))
                                    #("i4565" "i4566"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4562")))
                                 (hygiene guile)))
                             '#((#(syntax-object
                                   macro-type
                                   ((top)
                                    #(ribcage
                                      #(_ e)
                                      #((top) (top))
                                      #("i4565" "i4566"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4562")))
                                   (hygiene guile))
                                 .
                                 #(syntax-object
                                   identifier-syntax
                                   ((top)
                                    #(ribcage
                                      #(_ e)
                                      #((top) (top))
                                      #("i4565" "i4566"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4562")))
                                   (hygiene guile))))
                             (list '#(syntax-object
                                      syntax-case
                                      ((top)
                                       #(ribcage
                                         #(_ e)
                                         #((top) (top))
                                         #("i4565" "i4566"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4562")))
                                      (hygiene guile))
                                   '#(syntax-object
                                      x
                                      ((top)
                                       #(ribcage
                                         #(_ e)
                                         #((top) (top))
                                         #("i4565" "i4566"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4562")))
                                      (hygiene guile))
                                   '()
                                   (list '#(syntax-object
                                            id
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i4565" "i4566"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4562")))
                                            (hygiene guile))
                                         '(#(syntax-object
                                             identifier?
                                             ((top)
                                              #(ribcage
                                                #(_ e)
                                                #((top) (top))
                                                #("i4565" "i4566"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i4562")))
                                             (hygiene guile))
                                           (#(syntax-object
                                              syntax
                                              ((top)
                                               #(ribcage
                                                 #(_ e)
                                                 #((top) (top))
                                                 #("i4565" "i4566"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4562")))
                                              (hygiene guile))
                                            #(syntax-object
                                              id
                                              ((top)
                                               #(ribcage
                                                 #(_ e)
                                                 #((top) (top))
                                                 #("i4565" "i4566"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4562")))
                                              (hygiene guile))))
                                         (list '#(syntax-object
                                                  syntax
                                                  ((top)
                                                   #(ribcage
                                                     #(_ e)
                                                     #((top) (top))
                                                     #("i4565" "i4566"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4562")))
                                                  (hygiene guile))
                                               #{e\ 4568}#))
                                   (list (cons #{_\ 4567}#
                                               '(#(syntax-object
                                                   x
                                                   ((top)
                                                    #(ribcage
                                                      #(_ e)
                                                      #((top) (top))
                                                      #("i4565" "i4566"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4562")))
                                                   (hygiene guile))
                                                 #(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage
                                                      #(_ e)
                                                      #((top) (top))
                                                      #("i4565" "i4566"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4562")))
                                                   (hygiene guile))))
                                         (list '#(syntax-object
                                                  syntax
                                                  ((top)
                                                   #(ribcage
                                                     #(_ e)
                                                     #((top) (top))
                                                     #("i4565" "i4566"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4562")))
                                                  (hygiene guile))
                                               (cons #{e\ 4568}#
                                                     '(#(syntax-object
                                                         x
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i4565" "i4566"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4562")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i4565" "i4566"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4562")))
                                                         (hygiene
                                                           guile)))))))))
                     #{tmp\ 4564}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4563}#)))
          ($sc-dispatch #{tmp\ 4563}# (quote (any any)))))
       #{x\ 4561}#))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x\ 4569}#)
      ((lambda (#{tmp\ 4571}#)
         ((lambda (#{tmp\ 4572}#)
            (if #{tmp\ 4572}#
              (apply (lambda (#{_\ 4578}#
                              #{id\ 4579}#
                              #{args\ 4580}#
                              #{b0\ 4581}#
                              #{b1\ 4582}#)
                       (list '#(syntax-object
                                define
                                ((top)
                                 #(ribcage
                                   #(_ id args b0 b1)
                                   #((top) (top) (top) (top) (top))
                                   #("i4573" "i4574" "i4575" "i4576" "i4577"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4570")))
                                (hygiene guile))
                             #{id\ 4579}#
                             (cons '#(syntax-object
                                      lambda*
                                      ((top)
                                       #(ribcage
                                         #(_ id args b0 b1)
                                         #((top) (top) (top) (top) (top))
                                         #("i4573"
                                           "i4574"
                                           "i4575"
                                           "i4576"
                                           "i4577"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4570")))
                                      (hygiene guile))
                                   (cons #{args\ 4580}#
                                         (cons #{b0\ 4581}# #{b1\ 4582}#)))))
                     #{tmp\ 4572}#)
              ((lambda (#{tmp\ 4584}#)
                 (if (if #{tmp\ 4584}#
                       (apply (lambda (#{_\ 4588}# #{id\ 4589}# #{val\ 4590}#)
                                (identifier?
                                  '#(syntax-object
                                     x
                                     ((top)
                                      #(ribcage
                                        #(_ id val)
                                        #((top) (top) (top))
                                        #("i4585" "i4586" "i4587"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4570")))
                                     (hygiene guile))))
                              #{tmp\ 4584}#)
                       #f)
                   (apply (lambda (#{_\ 4594}# #{id\ 4595}# #{val\ 4596}#)
                            (list '#(syntax-object
                                     define
                                     ((top)
                                      #(ribcage
                                        #(_ id val)
                                        #((top) (top) (top))
                                        #("i4591" "i4592" "i4593"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4570")))
                                     (hygiene guile))
                                  #{id\ 4595}#
                                  #{val\ 4596}#))
                          #{tmp\ 4584}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{tmp\ 4571}#)))
               ($sc-dispatch
                 #{tmp\ 4571}#
                 '(any any any)))))
          ($sc-dispatch
            #{tmp\ 4571}#
            '(any (any . any) any . each-any))))
       #{x\ 4569}#))))

