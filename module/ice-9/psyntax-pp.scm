(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{top-level-eval-hook 6249}#
     (lambda (#{x 29378}# #{mod 29379}#)
       (primitive-eval #{x 29378}#)))
   (#{maybe-name-value! 6254}#
     (lambda (#{name 18120}# #{val 18121}#)
       (if (if (struct? #{val 18121}#)
             (eq? (struct-vtable #{val 18121}#)
                  (vector-ref %expanded-vtables 13))
             #f)
         (let ((#{meta 18128}# (struct-ref #{val 18121}# 1)))
           (if (not (assq 'name #{meta 18128}#))
             (let ((#{v 18133}#
                     (cons (cons 'name #{name 18120}#) #{meta 18128}#)))
               (struct-set! #{val 18121}# 1 #{v 18133}#)))))))
   (#{build-application 6256}#
     (lambda (#{source 17845}#
              #{fun-exp 17846}#
              #{arg-exps 17847}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 11)
         #{source 17845}#
         #{fun-exp 17846}#
         #{arg-exps 17847}#)))
   (#{build-conditional 6257}#
     (lambda (#{source 17853}#
              #{test-exp 17854}#
              #{then-exp 17855}#
              #{else-exp 17856}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 10)
         #{source 17853}#
         #{test-exp 17854}#
         #{then-exp 17855}#
         #{else-exp 17856}#)))
   (#{build-dynlet 6258}#
     (lambda (#{source 17863}#
              #{fluids 17864}#
              #{vals 17865}#
              #{body 17866}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 17)
         #{source 17863}#
         #{fluids 17864}#
         #{vals 17865}#
         #{body 17866}#)))
   (#{build-lexical-reference 6259}#
     (lambda (#{type 29380}#
              #{source 29381}#
              #{name 29382}#
              #{var 29383}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 3)
         #{source 29381}#
         #{name 29382}#
         #{var 29383}#)))
   (#{build-lexical-assignment 6260}#
     (lambda (#{source 17873}#
              #{name 17874}#
              #{var 17875}#
              #{exp 17876}#)
       (begin
         (if (if (struct? #{exp 17876}#)
               (eq? (struct-vtable #{exp 17876}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 17892}# (struct-ref #{exp 17876}# 1)))
             (if (not (assq 'name #{meta 17892}#))
               (let ((#{v 17899}#
                       (cons (cons 'name #{name 17874}#) #{meta 17892}#)))
                 (struct-set! #{exp 17876}# 1 #{v 17899}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 4)
           #{source 17873}#
           #{name 17874}#
           #{var 17875}#
           #{exp 17876}#))))
   (#{analyze-variable 6261}#
     (lambda (#{mod 29389}#
              #{var 29390}#
              #{modref-cont 29391}#
              #{bare-cont 29392}#)
       (if (not #{mod 29389}#)
         (#{bare-cont 29392}# #{var 29390}#)
         (let ((#{kind 29393}# (car #{mod 29389}#))
               (#{mod 29394}# (cdr #{mod 29389}#)))
           (if (eqv? #{kind 29393}# 'public)
             (#{modref-cont 29391}#
               #{mod 29394}#
               #{var 29390}#
               #t)
             (if (eqv? #{kind 29393}# 'private)
               (if (not (equal?
                          #{mod 29394}#
                          (module-name (current-module))))
                 (#{modref-cont 29391}#
                   #{mod 29394}#
                   #{var 29390}#
                   #f)
                 (#{bare-cont 29392}# #{var 29390}#))
               (if (eqv? #{kind 29393}# 'bare)
                 (#{bare-cont 29392}# #{var 29390}#)
                 (if (eqv? #{kind 29393}# 'hygiene)
                   (if (if (not (equal?
                                  #{mod 29394}#
                                  (module-name (current-module))))
                         (module-variable
                           (resolve-module #{mod 29394}#)
                           #{var 29390}#)
                         #f)
                     (#{modref-cont 29391}#
                       #{mod 29394}#
                       #{var 29390}#
                       #f)
                     (#{bare-cont 29392}# #{var 29390}#))
                   (syntax-violation
                     #f
                     "bad module kind"
                     #{var 29390}#
                     #{mod 29394}#)))))))))
   (#{build-global-reference 6262}#
     (lambda (#{source 29409}# #{var 29410}# #{mod 29411}#)
       (#{analyze-variable 6261}#
         #{mod 29411}#
         #{var 29410}#
         (lambda (#{mod 29414}# #{var 29415}# #{public? 29416}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 5)
             #{source 29409}#
             #{mod 29414}#
             #{var 29415}#
             #{public? 29416}#))
         (lambda (#{var 29424}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 7)
             #{source 29409}#
             #{var 29424}#)))))
   (#{build-global-assignment 6263}#
     (lambda (#{source 17908}#
              #{var 17909}#
              #{exp 17910}#
              #{mod 17911}#)
       (begin
         (if (if (struct? #{exp 17910}#)
               (eq? (struct-vtable #{exp 17910}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 17927}# (struct-ref #{exp 17910}# 1)))
             (if (not (assq 'name #{meta 17927}#))
               (let ((#{v 17934}#
                       (cons (cons 'name #{var 17909}#) #{meta 17927}#)))
                 (struct-set! #{exp 17910}# 1 #{v 17934}#)))))
         (#{analyze-variable 6261}#
           #{mod 17911}#
           #{var 17909}#
           (lambda (#{mod 17939}# #{var 17940}# #{public? 17941}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{source 17908}#
               #{mod 17939}#
               #{var 17940}#
               #{public? 17941}#
               #{exp 17910}#))
           (lambda (#{var 17949}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{source 17908}#
               #{var 17949}#
               #{exp 17910}#))))))
   (#{build-global-definition 6264}#
     (lambda (#{source 29430}# #{var 29431}# #{exp 29432}#)
       (begin
         (if (if (struct? #{exp 29432}#)
               (eq? (struct-vtable #{exp 29432}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 29448}# (struct-ref #{exp 29432}# 1)))
             (if (not (assq 'name #{meta 29448}#))
               (let ((#{v 29455}#
                       (cons (cons 'name #{var 29431}#) #{meta 29448}#)))
                 (struct-set! #{exp 29432}# 1 #{v 29455}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 9)
           #{source 29430}#
           #{var 29431}#
           #{exp 29432}#))))
   (#{build-simple-lambda 6265}#
     (lambda (#{src 17955}#
              #{req 17956}#
              #{rest 17957}#
              #{vars 17958}#
              #{meta 17959}#
              #{exp 17960}#)
       (let ((#{body 17966}#
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 14)
                 #{src 17955}#
                 #{req 17956}#
                 #f
                 #{rest 17957}#
                 #f
                 '()
                 #{vars 17958}#
                 #{exp 17960}#
                 #f)))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 13)
           #{src 17955}#
           #{meta 17959}#
           #{body 17966}#))))
   (#{build-sequence 6270}#
     (lambda (#{src 29463}# #{exps 29464}#)
       (if (null? (cdr #{exps 29464}#))
         (car #{exps 29464}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 12)
           #{src 29463}#
           #{exps 29464}#))))
   (#{build-let 6271}#
     (lambda (#{src 17978}#
              #{ids 17979}#
              #{vars 17980}#
              #{val-exps 17981}#
              #{body-exp 17982}#)
       (begin
         (for-each
           #{maybe-name-value! 6254}#
           #{ids 17979}#
           #{val-exps 17981}#)
         (if (null? #{vars 17980}#)
           #{body-exp 17982}#
           (make-struct/no-tail
             (vector-ref %expanded-vtables 15)
             #{src 17978}#
             #{ids 17979}#
             #{vars 17980}#
             #{val-exps 17981}#
             #{body-exp 17982}#)))))
   (#{build-named-let 6272}#
     (lambda (#{src 18006}#
              #{ids 18007}#
              #{vars 18008}#
              #{val-exps 18009}#
              #{body-exp 18010}#)
       (let ((#{f 18011}# (car #{vars 18008}#))
             (#{f-name 18012}# (car #{ids 18007}#))
             (#{vars 18013}# (cdr #{vars 18008}#))
             (#{ids 18014}# (cdr #{ids 18007}#)))
         (let ((#{proc 18015}#
                 (let ((#{body 18035}#
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 14)
                           #{src 18006}#
                           #{ids 18014}#
                           #f
                           #f
                           #f
                           '()
                           #{vars 18013}#
                           #{body-exp 18010}#
                           #f)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 13)
                     #{src 18006}#
                     '()
                     #{body 18035}#))))
           (begin
             (if (if (struct? #{proc 18015}#)
                   (eq? (struct-vtable #{proc 18015}#)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((#{meta 18059}# (struct-ref #{proc 18015}# 1)))
                 (if (not (assq 'name #{meta 18059}#))
                   (let ((#{v 18066}#
                           (cons (cons 'name #{f-name 18012}#)
                                 #{meta 18059}#)))
                     (struct-set! #{proc 18015}# 1 #{v 18066}#)))))
             (for-each
               #{maybe-name-value! 6254}#
               #{ids 18014}#
               #{val-exps 18009}#)
             (let ((#{names 18090}# (list #{f-name 18012}#))
                   (#{gensyms 18091}# (list #{f 18011}#))
                   (#{vals 18092}# (list #{proc 18015}#))
                   (#{body 18093}#
                     (let ((#{fun-exp 18097}#
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 3)
                               #{src 18006}#
                               #{f-name 18012}#
                               #{f 18011}#)))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 11)
                         #{src 18006}#
                         #{fun-exp 18097}#
                         #{val-exps 18009}#))))
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 16)
                 #{src 18006}#
                 #f
                 #{names 18090}#
                 #{gensyms 18091}#
                 #{vals 18092}#
                 #{body 18093}#)))))))
   (#{build-letrec 6273}#
     (lambda (#{src 18113}#
              #{in-order? 18114}#
              #{ids 18115}#
              #{vars 18116}#
              #{val-exps 18117}#
              #{body-exp 18118}#)
       (if (null? #{vars 18116}#)
         #{body-exp 18118}#
         (begin
           (for-each
             #{maybe-name-value! 6254}#
             #{ids 18115}#
             #{val-exps 18117}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 16)
             #{src 18113}#
             #{in-order? 18114}#
             #{ids 18115}#
             #{vars 18116}#
             #{val-exps 18117}#
             #{body-exp 18118}#)))))
   (#{source-annotation 6282}#
     (lambda (#{x 18144}#)
       (if (if (vector? #{x 18144}#)
             (if (= (vector-length #{x 18144}#) 4)
               (eq? (vector-ref #{x 18144}# 0) 'syntax-object)
               #f)
             #f)
         (#{source-annotation 6282}#
           (vector-ref #{x 18144}# 1))
         (if (pair? #{x 18144}#)
           (let ((#{props 18159}# (source-properties #{x 18144}#)))
             (if (pair? #{props 18159}#) #{props 18159}# #f))
           #f))))
   (#{extend-env 6283}#
     (lambda (#{labels 18161}# #{bindings 18162}# #{r 18163}#)
       (if (null? #{labels 18161}#)
         #{r 18163}#
         (#{extend-env 6283}#
           (cdr #{labels 18161}#)
           (cdr #{bindings 18162}#)
           (cons (cons (car #{labels 18161}#)
                       (car #{bindings 18162}#))
                 #{r 18163}#)))))
   (#{extend-var-env 6284}#
     (lambda (#{labels 18164}# #{vars 18165}# #{r 18166}#)
       (if (null? #{labels 18164}#)
         #{r 18166}#
         (#{extend-var-env 6284}#
           (cdr #{labels 18164}#)
           (cdr #{vars 18165}#)
           (cons (cons (car #{labels 18164}#)
                       (cons 'lexical (car #{vars 18165}#)))
                 #{r 18166}#)))))
   (#{macros-only-env 6285}#
     (lambda (#{r 18167}#)
       (if (null? #{r 18167}#)
         '()
         (let ((#{a 18168}# (car #{r 18167}#)))
           (if (eq? (car (cdr #{a 18168}#)) 'macro)
             (cons #{a 18168}#
                   (#{macros-only-env 6285}# (cdr #{r 18167}#)))
             (#{macros-only-env 6285}# (cdr #{r 18167}#)))))))
   (#{global-extend 6287}#
     (lambda (#{type 18170}# #{sym 18171}# #{val 18172}#)
       (module-define!
         (current-module)
         #{sym 18171}#
         (make-syntax-transformer
           #{sym 18171}#
           #{type 18170}#
           #{val 18172}#))))
   (#{id? 6289}#
     (lambda (#{x 12346}#)
       (if (symbol? #{x 12346}#)
         #t
         (if (if (vector? #{x 12346}#)
               (if (= (vector-length #{x 12346}#) 4)
                 (eq? (vector-ref #{x 12346}# 0) 'syntax-object)
                 #f)
               #f)
           (symbol? (vector-ref #{x 12346}# 1))
           #f))))
   (#{gen-labels 6292}#
     (lambda (#{ls 18182}#)
       (if (null? #{ls 18182}#)
         '()
         (cons (symbol->string (gensym "i"))
               (#{gen-labels 6292}# (cdr #{ls 18182}#))))))
   (#{make-binding-wrap 6303}#
     (lambda (#{ids 18186}# #{labels 18187}# #{w 18188}#)
       (if (null? #{ids 18186}#)
         #{w 18188}#
         (cons (car #{w 18188}#)
               (cons (let ((#{labelvec 18189}#
                             (list->vector #{labels 18187}#)))
                       (let ((#{n 18190}# (vector-length #{labelvec 18189}#)))
                         (let ((#{symnamevec 18191}# (make-vector #{n 18190}#))
                               (#{marksvec 18192}# (make-vector #{n 18190}#)))
                           (begin
                             (letrec*
                               ((#{f 18193}#
                                  (lambda (#{ids 18196}# #{i 18197}#)
                                    (if (not (null? #{ids 18196}#))
                                      (call-with-values
                                        (lambda ()
                                          (let ((#{x 18200}#
                                                  (car #{ids 18196}#)))
                                            (if (if (vector? #{x 18200}#)
                                                  (if (= (vector-length
                                                           #{x 18200}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{x 18200}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (values
                                                (vector-ref #{x 18200}# 1)
                                                (let ((#{m1 18216}#
                                                        (car #{w 18188}#))
                                                      (#{m2 18217}#
                                                        (car (vector-ref
                                                               #{x 18200}#
                                                               2))))
                                                  (if (null? #{m2 18217}#)
                                                    #{m1 18216}#
                                                    (append
                                                      #{m1 18216}#
                                                      #{m2 18217}#))))
                                              (values
                                                #{x 18200}#
                                                (car #{w 18188}#)))))
                                        (lambda (#{symname 18237}#
                                                 #{marks 18238}#)
                                          (begin
                                            (vector-set!
                                              #{symnamevec 18191}#
                                              #{i 18197}#
                                              #{symname 18237}#)
                                            (vector-set!
                                              #{marksvec 18192}#
                                              #{i 18197}#
                                              #{marks 18238}#)
                                            (#{f 18193}#
                                              (cdr #{ids 18196}#)
                                              (#{1+}# #{i 18197}#)))))))))
                               (#{f 18193}# #{ids 18186}# 0))
                             (vector
                               'ribcage
                               #{symnamevec 18191}#
                               #{marksvec 18192}#
                               #{labelvec 18189}#)))))
                     (cdr #{w 18188}#))))))
   (#{join-wraps 6305}#
     (lambda (#{w1 18247}# #{w2 18248}#)
       (let ((#{m1 18249}# (car #{w1 18247}#))
             (#{s1 18250}# (cdr #{w1 18247}#)))
         (if (null? #{m1 18249}#)
           (if (null? #{s1 18250}#)
             #{w2 18248}#
             (cons (car #{w2 18248}#)
                   (let ((#{m2 18257}# (cdr #{w2 18248}#)))
                     (if (null? #{m2 18257}#)
                       #{s1 18250}#
                       (append #{s1 18250}# #{m2 18257}#)))))
           (cons (let ((#{m2 18266}# (car #{w2 18248}#)))
                   (if (null? #{m2 18266}#)
                     #{m1 18249}#
                     (append #{m1 18249}# #{m2 18266}#)))
                 (let ((#{m2 18275}# (cdr #{w2 18248}#)))
                   (if (null? #{m2 18275}#)
                     #{s1 18250}#
                     (append #{s1 18250}# #{m2 18275}#))))))))
   (#{same-marks? 6307}#
     (lambda (#{x 18280}# #{y 18281}#)
       (if (eq? #{x 18280}# #{y 18281}#)
         (eq? #{x 18280}# #{y 18281}#)
         (if (not (null? #{x 18280}#))
           (if (not (null? #{y 18281}#))
             (if (eq? (car #{x 18280}#) (car #{y 18281}#))
               (#{same-marks? 6307}#
                 (cdr #{x 18280}#)
                 (cdr #{y 18281}#))
               #f)
             #f)
           #f))))
   (#{id-var-name 6308}#
     (lambda (#{id 18289}# #{w 18290}#)
       (letrec*
         ((#{search 18291}#
            (lambda (#{sym 18352}# #{subst 18353}# #{marks 18354}#)
              (if (null? #{subst 18353}#)
                (values #f #{marks 18354}#)
                (let ((#{fst 18355}# (car #{subst 18353}#)))
                  (if (eq? #{fst 18355}# 'shift)
                    (#{search 18291}#
                      #{sym 18352}#
                      (cdr #{subst 18353}#)
                      (cdr #{marks 18354}#))
                    (let ((#{symnames 18357}# (vector-ref #{fst 18355}# 1)))
                      (if (vector? #{symnames 18357}#)
                        (let ((#{n 18369}# (vector-length #{symnames 18357}#)))
                          (letrec*
                            ((#{f 18370}#
                               (lambda (#{i 18372}#)
                                 (if (= #{i 18372}# #{n 18369}#)
                                   (#{search 18291}#
                                     #{sym 18352}#
                                     (cdr #{subst 18353}#)
                                     #{marks 18354}#)
                                   (if (if (eq? (vector-ref
                                                  #{symnames 18357}#
                                                  #{i 18372}#)
                                                #{sym 18352}#)
                                         (#{same-marks? 6307}#
                                           #{marks 18354}#
                                           (vector-ref
                                             (vector-ref #{fst 18355}# 2)
                                             #{i 18372}#))
                                         #f)
                                     (values
                                       (vector-ref
                                         (vector-ref #{fst 18355}# 3)
                                         #{i 18372}#)
                                       #{marks 18354}#)
                                     (#{f 18370}# (#{1+}# #{i 18372}#)))))))
                            (#{f 18370}# 0)))
                        (letrec*
                          ((#{f 18405}#
                             (lambda (#{symnames 18407}# #{i 18408}#)
                               (if (null? #{symnames 18407}#)
                                 (#{search 18291}#
                                   #{sym 18352}#
                                   (cdr #{subst 18353}#)
                                   #{marks 18354}#)
                                 (if (if (eq? (car #{symnames 18407}#)
                                              #{sym 18352}#)
                                       (#{same-marks? 6307}#
                                         #{marks 18354}#
                                         (list-ref
                                           (vector-ref #{fst 18355}# 2)
                                           #{i 18408}#))
                                       #f)
                                   (values
                                     (list-ref
                                       (vector-ref #{fst 18355}# 3)
                                       #{i 18408}#)
                                     #{marks 18354}#)
                                   (#{f 18405}#
                                     (cdr #{symnames 18407}#)
                                     (#{1+}# #{i 18408}#)))))))
                          (#{f 18405}# #{symnames 18357}# 0))))))))))
         (if (symbol? #{id 18289}#)
           (let ((#{t 18294}#
                   (#{search 18291}#
                     #{id 18289}#
                     (cdr #{w 18290}#)
                     (car #{w 18290}#))))
             (if #{t 18294}# #{t 18294}# #{id 18289}#))
           (if (if (vector? #{id 18289}#)
                 (if (= (vector-length #{id 18289}#) 4)
                   (eq? (vector-ref #{id 18289}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{id 18309}# (vector-ref #{id 18289}# 1))
                   (#{w1 18310}# (vector-ref #{id 18289}# 2)))
               (let ((#{marks 18311}#
                       (let ((#{m1 18321}# (car #{w 18290}#))
                             (#{m2 18322}# (car #{w1 18310}#)))
                         (if (null? #{m2 18322}#)
                           #{m1 18321}#
                           (append #{m1 18321}# #{m2 18322}#)))))
                 (call-with-values
                   (lambda ()
                     (#{search 18291}#
                       #{id 18309}#
                       (cdr #{w 18290}#)
                       #{marks 18311}#))
                   (lambda (#{new-id 18338}# #{marks 18339}#)
                     (if #{new-id 18338}#
                       #{new-id 18338}#
                       (let ((#{t 18347}#
                               (#{search 18291}#
                                 #{id 18309}#
                                 (cdr #{w1 18310}#)
                                 #{marks 18339}#)))
                         (if #{t 18347}# #{t 18347}# #{id 18309}#)))))))
             (syntax-violation
               'id-var-name
               "invalid id"
               #{id 18289}#))))))
   (#{valid-bound-ids? 6311}#
     (lambda (#{ids 18430}#)
       (if (letrec*
             ((#{all-ids? 18431}#
                (lambda (#{ids 18593}#)
                  (if (null? #{ids 18593}#)
                    (null? #{ids 18593}#)
                    (if (let ((#{x 18604}# (car #{ids 18593}#)))
                          (if (symbol? #{x 18604}#)
                            #t
                            (if (if (vector? #{x 18604}#)
                                  (if (= (vector-length #{x 18604}#) 4)
                                    (eq? (vector-ref #{x 18604}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{x 18604}# 1))
                              #f)))
                      (#{all-ids? 18431}# (cdr #{ids 18593}#))
                      #f)))))
             (#{all-ids? 18431}# #{ids 18430}#))
         (#{distinct-bound-ids? 6312}# #{ids 18430}#)
         #f)))
   (#{distinct-bound-ids? 6312}#
     (lambda (#{ids 18732}#)
       (letrec*
         ((#{distinct? 18733}#
            (lambda (#{ids 18845}#)
              (if (null? #{ids 18845}#)
                (null? #{ids 18845}#)
                (if (not (#{bound-id-member? 6313}#
                           (car #{ids 18845}#)
                           (cdr #{ids 18845}#)))
                  (#{distinct? 18733}# (cdr #{ids 18845}#))
                  #f)))))
         (#{distinct? 18733}# #{ids 18732}#))))
   (#{bound-id-member? 6313}#
     (lambda (#{x 19055}# #{list 19056}#)
       (if (not (null? #{list 19056}#))
         (let ((#{t 19057}#
                 (let ((#{j 19138}# (car #{list 19056}#)))
                   (if (if (if (vector? #{x 19055}#)
                             (if (= (vector-length #{x 19055}#) 4)
                               (eq? (vector-ref #{x 19055}# 0) 'syntax-object)
                               #f)
                             #f)
                         (if (vector? #{j 19138}#)
                           (if (= (vector-length #{j 19138}#) 4)
                             (eq? (vector-ref #{j 19138}# 0) 'syntax-object)
                             #f)
                           #f)
                         #f)
                     (if (eq? (vector-ref #{x 19055}# 1)
                              (vector-ref #{j 19138}# 1))
                       (#{same-marks? 6307}#
                         (car (vector-ref #{x 19055}# 2))
                         (car (vector-ref #{j 19138}# 2)))
                       #f)
                     (eq? #{x 19055}# #{j 19138}#)))))
           (if #{t 19057}#
             #{t 19057}#
             (#{bound-id-member? 6313}#
               #{x 19055}#
               (cdr #{list 19056}#))))
         #f)))
   (#{wrap 6314}#
     (lambda (#{x 19182}# #{w 19183}# #{defmod 19184}#)
       (if (if (null? (car #{w 19183}#))
             (null? (cdr #{w 19183}#))
             #f)
         #{x 19182}#
         (if (if (vector? #{x 19182}#)
               (if (= (vector-length #{x 19182}#) 4)
                 (eq? (vector-ref #{x 19182}# 0) 'syntax-object)
                 #f)
               #f)
           (let ((#{expression 19198}# (vector-ref #{x 19182}# 1))
                 (#{wrap 19199}#
                   (#{join-wraps 6305}#
                     #{w 19183}#
                     (vector-ref #{x 19182}# 2)))
                 (#{module 19200}# (vector-ref #{x 19182}# 3)))
             (vector
               'syntax-object
               #{expression 19198}#
               #{wrap 19199}#
               #{module 19200}#))
           (if (null? #{x 19182}#)
             #{x 19182}#
             (vector
               'syntax-object
               #{x 19182}#
               #{w 19183}#
               #{defmod 19184}#))))))
   (#{source-wrap 6315}#
     (lambda (#{x 19217}#
              #{w 19218}#
              #{s 19219}#
              #{defmod 19220}#)
       (#{wrap 6314}#
         (begin
           (if (if (pair? #{x 19217}#) #{s 19219}# #f)
             (set-source-properties! #{x 19217}# #{s 19219}#))
           #{x 19217}#)
         #{w 19218}#
         #{defmod 19220}#)))
   (#{expand-sequence 6316}#
     (lambda (#{body 29469}#
              #{r 29470}#
              #{w 29471}#
              #{s 29472}#
              #{mod 29473}#)
       (#{build-sequence 6270}#
         #{s 29472}#
         (letrec*
           ((#{dobody 29553}#
              (lambda (#{body 29903}#
                       #{r 29904}#
                       #{w 29905}#
                       #{mod 29906}#)
                (if (null? #{body 29903}#)
                  '()
                  (let ((#{first 29907}#
                          (let ((#{e 29911}# (car #{body 29903}#)))
                            (call-with-values
                              (lambda ()
                                (#{syntax-type 6320}#
                                  #{e 29911}#
                                  #{r 29904}#
                                  #{w 29905}#
                                  (#{source-annotation 6282}# #{e 29911}#)
                                  #f
                                  #{mod 29906}#
                                  #f))
                              (lambda (#{type 29918}#
                                       #{value 29919}#
                                       #{e 29920}#
                                       #{w 29921}#
                                       #{s 29922}#
                                       #{mod 29923}#)
                                (#{expand-expr 6322}#
                                  #{type 29918}#
                                  #{value 29919}#
                                  #{e 29920}#
                                  #{r 29904}#
                                  #{w 29921}#
                                  #{s 29922}#
                                  #{mod 29923}#))))))
                    (cons #{first 29907}#
                          (#{dobody 29553}#
                            (cdr #{body 29903}#)
                            #{r 29904}#
                            #{w 29905}#
                            #{mod 29906}#)))))))
           (#{dobody 29553}#
             #{body 29469}#
             #{r 29470}#
             #{w 29471}#
             #{mod 29473}#)))))
   (#{expand-top-sequence 6317}#
     (lambda (#{body 19238}#
              #{r 19239}#
              #{w 19240}#
              #{s 19241}#
              #{m 19242}#
              #{esew 19243}#
              #{mod 19244}#)
       (letrec*
         ((#{scan 19245}#
            (lambda (#{body 19376}#
                     #{r 19377}#
                     #{w 19378}#
                     #{s 19379}#
                     #{m 19380}#
                     #{esew 19381}#
                     #{mod 19382}#
                     #{exps 19383}#)
              (if (null? #{body 19376}#)
                #{exps 19383}#
                (call-with-values
                  (lambda ()
                    (call-with-values
                      (lambda ()
                        (let ((#{e 19384}# (car #{body 19376}#)))
                          (#{syntax-type 6320}#
                            #{e 19384}#
                            #{r 19377}#
                            #{w 19378}#
                            (let ((#{t 19388}#
                                    (#{source-annotation 6282}# #{e 19384}#)))
                              (if #{t 19388}# #{t 19388}# #{s 19379}#))
                            #f
                            #{mod 19382}#
                            #f)))
                      (lambda (#{type 19623}#
                               #{value 19624}#
                               #{e 19625}#
                               #{w 19626}#
                               #{s 19627}#
                               #{mod 19628}#)
                        (if (eqv? #{type 19623}# 'begin-form)
                          (let ((#{tmp 19633}#
                                  ($sc-dispatch #{e 19625}# '(_))))
                            (if #{tmp 19633}#
                              (@apply (lambda () #{exps 19383}#) #{tmp 19633}#)
                              (let ((#{tmp 19637}#
                                      ($sc-dispatch
                                        #{e 19625}#
                                        '(_ any . each-any))))
                                (if #{tmp 19637}#
                                  (@apply
                                    (lambda (#{e1 19641}# #{e2 19642}#)
                                      (#{scan 19245}#
                                        (cons #{e1 19641}# #{e2 19642}#)
                                        #{r 19377}#
                                        #{w 19626}#
                                        #{s 19627}#
                                        #{m 19380}#
                                        #{esew 19381}#
                                        #{mod 19628}#
                                        #{exps 19383}#))
                                    #{tmp 19637}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 19625}#)))))
                          (if (eqv? #{type 19623}# 'local-syntax-form)
                            (#{expand-local-syntax 6326}#
                              #{value 19624}#
                              #{e 19625}#
                              #{r 19377}#
                              #{w 19626}#
                              #{s 19627}#
                              #{mod 19628}#
                              (lambda (#{body 19657}#
                                       #{r 19658}#
                                       #{w 19659}#
                                       #{s 19660}#
                                       #{mod 19661}#)
                                (#{scan 19245}#
                                  #{body 19657}#
                                  #{r 19658}#
                                  #{w 19659}#
                                  #{s 19660}#
                                  #{m 19380}#
                                  #{esew 19381}#
                                  #{mod 19661}#
                                  #{exps 19383}#)))
                            (if (eqv? #{type 19623}# 'eval-when-form)
                              (let ((#{tmp 19666}#
                                      ($sc-dispatch
                                        #{e 19625}#
                                        '(_ each-any any . each-any))))
                                (if #{tmp 19666}#
                                  (@apply
                                    (lambda (#{x 19670}#
                                             #{e1 19671}#
                                             #{e2 19672}#)
                                      (let ((#{when-list 19673}#
                                              (#{parse-when-list 6319}#
                                                #{e 19625}#
                                                #{x 19670}#))
                                            (#{body 19674}#
                                              (cons #{e1 19671}#
                                                    #{e2 19672}#)))
                                        (if (eq? #{m 19380}# 'e)
                                          (if (memq 'eval #{when-list 19673}#)
                                            (#{scan 19245}#
                                              #{body 19674}#
                                              #{r 19377}#
                                              #{w 19626}#
                                              #{s 19627}#
                                              (if (memq 'expand
                                                        #{when-list 19673}#)
                                                'c&e
                                                'e)
                                              '(eval)
                                              #{mod 19628}#
                                              #{exps 19383}#)
                                            (begin
                                              (if (memq 'expand
                                                        #{when-list 19673}#)
                                                (let ((#{x 19751}#
                                                        (#{expand-top-sequence 6317}#
                                                          #{body 19674}#
                                                          #{r 19377}#
                                                          #{w 19626}#
                                                          #{s 19627}#
                                                          'e
                                                          '(eval)
                                                          #{mod 19628}#)))
                                                  (primitive-eval
                                                    #{x 19751}#)))
                                              (values #{exps 19383}#)))
                                          (if (memq 'load #{when-list 19673}#)
                                            (if (let ((#{t 19777}#
                                                        (memq 'compile
                                                              #{when-list 19673}#)))
                                                  (if #{t 19777}#
                                                    #{t 19777}#
                                                    (let ((#{t 19826}#
                                                            (memq 'expand
                                                                  #{when-list 19673}#)))
                                                      (if #{t 19826}#
                                                        #{t 19826}#
                                                        (if (eq? #{m 19380}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 19673}#)
                                                          #f)))))
                                              (#{scan 19245}#
                                                #{body 19674}#
                                                #{r 19377}#
                                                #{w 19626}#
                                                #{s 19627}#
                                                'c&e
                                                '(compile load)
                                                #{mod 19628}#
                                                #{exps 19383}#)
                                              (if (if (eq? #{m 19380}# 'c)
                                                    #t
                                                    (eq? #{m 19380}# 'c&e))
                                                (#{scan 19245}#
                                                  #{body 19674}#
                                                  #{r 19377}#
                                                  #{w 19626}#
                                                  #{s 19627}#
                                                  'c
                                                  '(load)
                                                  #{mod 19628}#
                                                  #{exps 19383}#)
                                                (values #{exps 19383}#)))
                                            (if (let ((#{t 19955}#
                                                        (memq 'compile
                                                              #{when-list 19673}#)))
                                                  (if #{t 19955}#
                                                    #{t 19955}#
                                                    (let ((#{t 20004}#
                                                            (memq 'expand
                                                                  #{when-list 19673}#)))
                                                      (if #{t 20004}#
                                                        #{t 20004}#
                                                        (if (eq? #{m 19380}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 19673}#)
                                                          #f)))))
                                              (begin
                                                (let ((#{x 20128}#
                                                        (#{expand-top-sequence 6317}#
                                                          #{body 19674}#
                                                          #{r 19377}#
                                                          #{w 19626}#
                                                          #{s 19627}#
                                                          'e
                                                          '(eval)
                                                          #{mod 19628}#)))
                                                  (primitive-eval #{x 20128}#))
                                                (values #{exps 19383}#))
                                              (values #{exps 19383}#))))))
                                    #{tmp 19666}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 19625}#)))
                              (if (eqv? #{type 19623}# 'define-syntax-form)
                                (let ((#{n 20169}#
                                        (#{id-var-name 6308}#
                                          #{value 19624}#
                                          #{w 19626}#))
                                      (#{r 20170}#
                                        (#{macros-only-env 6285}#
                                          #{r 19377}#)))
                                  (if (eqv? #{m 19380}# 'c)
                                    (if (memq 'compile #{esew 19381}#)
                                      (let ((#{e 20174}#
                                              (#{expand-install-global 6318}#
                                                #{n 20169}#
                                                (#{expand 6321}#
                                                  #{e 19625}#
                                                  #{r 20170}#
                                                  #{w 19626}#
                                                  #{mod 19628}#))))
                                        (begin
                                          (#{top-level-eval-hook 6249}#
                                            #{e 20174}#
                                            #{mod 19628}#)
                                          (if (memq 'load #{esew 19381}#)
                                            (values
                                              (cons #{e 20174}#
                                                    #{exps 19383}#))
                                            (values #{exps 19383}#))))
                                      (if (memq 'load #{esew 19381}#)
                                        (values
                                          (cons (#{expand-install-global 6318}#
                                                  #{n 20169}#
                                                  (#{expand 6321}#
                                                    #{e 19625}#
                                                    #{r 20170}#
                                                    #{w 19626}#
                                                    #{mod 19628}#))
                                                #{exps 19383}#))
                                        (values #{exps 19383}#)))
                                    (if (eqv? #{m 19380}# 'c&e)
                                      (let ((#{e 20621}#
                                              (#{expand-install-global 6318}#
                                                #{n 20169}#
                                                (#{expand 6321}#
                                                  #{e 19625}#
                                                  #{r 20170}#
                                                  #{w 19626}#
                                                  #{mod 19628}#))))
                                        (begin
                                          (#{top-level-eval-hook 6249}#
                                            #{e 20621}#
                                            #{mod 19628}#)
                                          (values
                                            (cons #{e 20621}#
                                                  #{exps 19383}#))))
                                      (begin
                                        (if (memq 'eval #{esew 19381}#)
                                          (#{top-level-eval-hook 6249}#
                                            (#{expand-install-global 6318}#
                                              #{n 20169}#
                                              (#{expand 6321}#
                                                #{e 19625}#
                                                #{r 20170}#
                                                #{w 19626}#
                                                #{mod 19628}#))
                                            #{mod 19628}#))
                                        (values #{exps 19383}#)))))
                                (if (eqv? #{type 19623}# 'define-form)
                                  (let ((#{n 21256}#
                                          (#{id-var-name 6308}#
                                            #{value 19624}#
                                            #{w 19626}#)))
                                    (let ((#{type 21257}#
                                            (car (let ((#{t 22001}#
                                                         (assq #{n 21256}#
                                                               #{r 19377}#)))
                                                   (if #{t 22001}#
                                                     (cdr #{t 22001}#)
                                                     (if (symbol? #{n 21256}#)
                                                       (let ((#{t 22006}#
                                                               (begin
                                                                 (if (if (not #{mod 19628}#)
                                                                       (current-module)
                                                                       #f)
                                                                   (warn "module system is booted, we should have a module"
                                                                         #{n 21256}#))
                                                                 (let ((#{v 22043}#
                                                                         (module-variable
                                                                           (if #{mod 19628}#
                                                                             (resolve-module
                                                                               (cdr #{mod 19628}#))
                                                                             (current-module))
                                                                           #{n 21256}#)))
                                                                   (if #{v 22043}#
                                                                     (if (variable-bound?
                                                                           #{v 22043}#)
                                                                       (let ((#{val 22052}#
                                                                               (variable-ref
                                                                                 #{v 22043}#)))
                                                                         (if (macro?
                                                                               #{val 22052}#)
                                                                           (if (macro-type
                                                                                 #{val 22052}#)
                                                                             (cons (macro-type
                                                                                     #{val 22052}#)
                                                                                   (macro-binding
                                                                                     #{val 22052}#))
                                                                             #f)
                                                                           #f))
                                                                       #f)
                                                                     #f)))))
                                                         (if #{t 22006}#
                                                           #{t 22006}#
                                                           '(global)))
                                                       '(displaced-lexical)))))))
                                      (if (let ((#{t 21291}# #{type 21257}#))
                                            (if (eqv? #{t 21291}# 'global)
                                              #t
                                              (if (eqv? #{t 21291}# 'core)
                                                #t
                                                (if (eqv? #{t 21291}# 'macro)
                                                  #t
                                                  (eqv? #{t 21291}#
                                                        'module-ref)))))
                                        (begin
                                          (if (if (if (eq? #{m 19380}# 'c)
                                                    #t
                                                    (eq? #{m 19380}# 'c&e))
                                                (if (not (module-local-variable
                                                           (current-module)
                                                           #{n 21256}#))
                                                  (current-module)
                                                  #f)
                                                #f)
                                            (let ((#{old 21455}#
                                                    (module-variable
                                                      (current-module)
                                                      #{n 21256}#)))
                                              (if (if (variable? #{old 21455}#)
                                                    (variable-bound?
                                                      #{old 21455}#)
                                                    #f)
                                                (module-define!
                                                  (current-module)
                                                  #{n 21256}#
                                                  (variable-ref #{old 21455}#))
                                                (module-add!
                                                  (current-module)
                                                  #{n 21256}#
                                                  (make-undefined-variable)))))
                                          (values
                                            (cons (if (eq? #{m 19380}# 'c&e)
                                                    (let ((#{x 21457}#
                                                            (#{build-global-definition 6264}#
                                                              #{s 19627}#
                                                              #{n 21256}#
                                                              (#{expand 6321}#
                                                                #{e 19625}#
                                                                #{r 19377}#
                                                                #{w 19626}#
                                                                #{mod 19628}#))))
                                                      (begin
                                                        (#{top-level-eval-hook 6249}#
                                                          #{x 21457}#
                                                          #{mod 19628}#)
                                                        #{x 21457}#))
                                                    (lambda ()
                                                      (#{build-global-definition 6264}#
                                                        #{s 19627}#
                                                        #{n 21256}#
                                                        (#{expand 6321}#
                                                          #{e 19625}#
                                                          #{r 19377}#
                                                          #{w 19626}#
                                                          #{mod 19628}#))))
                                                  #{exps 19383}#)))
                                        (if (let ((#{t 21928}# #{type 21257}#))
                                              (eqv? #{t 21928}#
                                                    'displaced-lexical))
                                          (syntax-violation
                                            #f
                                            "identifier out of context"
                                            #{e 19625}#
                                            (#{wrap 6314}#
                                              #{value 19624}#
                                              #{w 19626}#
                                              #{mod 19628}#))
                                          (syntax-violation
                                            #f
                                            "cannot define keyword at top level"
                                            #{e 19625}#
                                            (#{wrap 6314}#
                                              #{value 19624}#
                                              #{w 19626}#
                                              #{mod 19628}#))))))
                                  (values
                                    (cons (if (eq? #{m 19380}# 'c&e)
                                            (let ((#{x 22063}#
                                                    (#{expand-expr 6322}#
                                                      #{type 19623}#
                                                      #{value 19624}#
                                                      #{e 19625}#
                                                      #{r 19377}#
                                                      #{w 19626}#
                                                      #{s 19627}#
                                                      #{mod 19628}#)))
                                              (begin
                                                (primitive-eval #{x 22063}#)
                                                #{x 22063}#))
                                            (lambda ()
                                              (#{expand-expr 6322}#
                                                #{type 19623}#
                                                #{value 19624}#
                                                #{e 19625}#
                                                #{r 19377}#
                                                #{w 19626}#
                                                #{s 19627}#
                                                #{mod 19628}#)))
                                          #{exps 19383}#))))))))))
                  (lambda (#{exps 22072}#)
                    (#{scan 19245}#
                      (cdr #{body 19376}#)
                      #{r 19377}#
                      #{w 19378}#
                      #{s 19379}#
                      #{m 19380}#
                      #{esew 19381}#
                      #{mod 19382}#
                      #{exps 22072}#)))))))
         (call-with-values
           (lambda ()
             (#{scan 19245}#
               #{body 19238}#
               #{r 19239}#
               #{w 19240}#
               #{s 19241}#
               #{m 19242}#
               #{esew 19243}#
               #{mod 19244}#
               '()))
           (lambda (#{exps 19248}#)
             (if (null? #{exps 19248}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 0)
                 #{s 19241}#)
               (#{build-sequence 6270}#
                 #{s 19241}#
                 (letrec*
                   ((#{lp 19288}#
                      (lambda (#{in 19372}# #{out 19373}#)
                        (if (null? #{in 19372}#)
                          #{out 19373}#
                          (let ((#{e 19374}# (car #{in 19372}#)))
                            (#{lp 19288}#
                              (cdr #{in 19372}#)
                              (cons (if (procedure? #{e 19374}#)
                                      (#{e 19374}#)
                                      #{e 19374}#)
                                    #{out 19373}#)))))))
                   (#{lp 19288}# #{exps 19248}# '())))))))))
   (#{expand-install-global 6318}#
     (lambda (#{name 22073}# #{e 22074}#)
       (let ((#{exp 22080}#
               (let ((#{fun-exp 22090}#
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'make-syntax-transformer)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'make-syntax-transformer
                           #f)))
                     (#{arg-exps 22091}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #{name 22073}#)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               'macro)
                             #{e 22074}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 11)
                   #f
                   #{fun-exp 22090}#
                   #{arg-exps 22091}#))))
         (begin
           (if (if (struct? #{exp 22080}#)
                 (eq? (struct-vtable #{exp 22080}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta 22132}# (struct-ref #{exp 22080}# 1)))
               (if (not (assq 'name #{meta 22132}#))
                 (let ((#{v 22139}#
                         (cons (cons 'name #{name 22073}#) #{meta 22132}#)))
                   (struct-set! #{exp 22080}# 1 #{v 22139}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #f
             #{name 22073}#
             #{exp 22080}#)))))
   (#{parse-when-list 6319}#
     (lambda (#{e 22150}# #{when-list 22151}#)
       (let ((#{result 22152}#
               (#{strip 6334}# #{when-list 22151}# '(()))))
         (letrec*
           ((#{lp 22153}#
              (lambda (#{l 22207}#)
                (if (null? #{l 22207}#)
                  #{result 22152}#
                  (if (let ((#{t 22209}# (car #{l 22207}#)))
                        (if (eq? #{t 22209}# 'compile)
                          #t
                          (if (eq? #{t 22209}# 'load)
                            #t
                            (if (eq? #{t 22209}# 'eval)
                              #t
                              (eq? #{t 22209}# 'expand)))))
                    (#{lp 22153}# (cdr #{l 22207}#))
                    (syntax-violation
                      'eval-when
                      "invalid situation"
                      #{e 22150}#
                      (car #{l 22207}#)))))))
           (#{lp 22153}# #{result 22152}#)))))
   (#{syntax-type 6320}#
     (lambda (#{e 22211}#
              #{r 22212}#
              #{w 22213}#
              #{s 22214}#
              #{rib 22215}#
              #{mod 22216}#
              #{for-car? 22217}#)
       (if (symbol? #{e 22211}#)
         (let ((#{n 22218}#
                 (#{id-var-name 6308}# #{e 22211}# #{w 22213}#)))
           (let ((#{b 22219}#
                   (let ((#{t 22794}# (assq #{n 22218}# #{r 22212}#)))
                     (if #{t 22794}#
                       (cdr #{t 22794}#)
                       (if (symbol? #{n 22218}#)
                         (let ((#{t 22799}#
                                 (begin
                                   (if (if (not #{mod 22216}#)
                                         (current-module)
                                         #f)
                                     (warn "module system is booted, we should have a module"
                                           #{n 22218}#))
                                   (let ((#{v 22836}#
                                           (module-variable
                                             (if #{mod 22216}#
                                               (resolve-module
                                                 (cdr #{mod 22216}#))
                                               (current-module))
                                             #{n 22218}#)))
                                     (if #{v 22836}#
                                       (if (variable-bound? #{v 22836}#)
                                         (let ((#{val 22845}#
                                                 (variable-ref #{v 22836}#)))
                                           (if (macro? #{val 22845}#)
                                             (if (macro-type #{val 22845}#)
                                               (cons (macro-type #{val 22845}#)
                                                     (macro-binding
                                                       #{val 22845}#))
                                               #f)
                                             #f))
                                         #f)
                                       #f)))))
                           (if #{t 22799}# #{t 22799}# '(global)))
                         '(displaced-lexical))))))
             (let ((#{type 22220}# (car #{b 22219}#)))
               (if (let ((#{t 22254}# #{type 22220}#))
                     (eqv? #{t 22254}# 'lexical))
                 (values
                   #{type 22220}#
                   (cdr #{b 22219}#)
                   #{e 22211}#
                   #{w 22213}#
                   #{s 22214}#
                   #{mod 22216}#)
                 (if (let ((#{t 22411}# #{type 22220}#))
                       (eqv? #{t 22411}# 'global))
                   (values
                     #{type 22220}#
                     #{n 22218}#
                     #{e 22211}#
                     #{w 22213}#
                     #{s 22214}#
                     #{mod 22216}#)
                   (if (let ((#{t 22537}# #{type 22220}#))
                         (eqv? #{t 22537}# 'macro))
                     (if #{for-car? 22217}#
                       (values
                         #{type 22220}#
                         (cdr #{b 22219}#)
                         #{e 22211}#
                         #{w 22213}#
                         #{s 22214}#
                         #{mod 22216}#)
                       (#{syntax-type 6320}#
                         (#{expand-macro 6324}#
                           (cdr #{b 22219}#)
                           #{e 22211}#
                           #{r 22212}#
                           #{w 22213}#
                           #{s 22214}#
                           #{rib 22215}#
                           #{mod 22216}#)
                         #{r 22212}#
                         '(())
                         #{s 22214}#
                         #{rib 22215}#
                         #{mod 22216}#
                         #f))
                     (values
                       #{type 22220}#
                       (cdr #{b 22219}#)
                       #{e 22211}#
                       #{w 22213}#
                       #{s 22214}#
                       #{mod 22216}#)))))))
         (if (pair? #{e 22211}#)
           (let ((#{first 22856}# (car #{e 22211}#)))
             (call-with-values
               (lambda ()
                 (#{syntax-type 6320}#
                   #{first 22856}#
                   #{r 22212}#
                   #{w 22213}#
                   #{s 22214}#
                   #{rib 22215}#
                   #{mod 22216}#
                   #t))
               (lambda (#{ftype 22858}#
                        #{fval 22859}#
                        #{fe 22860}#
                        #{fw 22861}#
                        #{fs 22862}#
                        #{fmod 22863}#)
                 (if (eqv? #{ftype 22858}# 'lexical)
                   (values
                     'lexical-call
                     #{fval 22859}#
                     #{e 22211}#
                     #{w 22213}#
                     #{s 22214}#
                     #{mod 22216}#)
                   (if (eqv? #{ftype 22858}# 'global)
                     (values
                       'global-call
                       (vector
                         'syntax-object
                         #{fval 22859}#
                         #{w 22213}#
                         #{fmod 22863}#)
                       #{e 22211}#
                       #{w 22213}#
                       #{s 22214}#
                       #{mod 22216}#)
                     (if (eqv? #{ftype 22858}# 'macro)
                       (#{syntax-type 6320}#
                         (#{expand-macro 6324}#
                           #{fval 22859}#
                           #{e 22211}#
                           #{r 22212}#
                           #{w 22213}#
                           #{s 22214}#
                           #{rib 22215}#
                           #{mod 22216}#)
                         #{r 22212}#
                         '(())
                         #{s 22214}#
                         #{rib 22215}#
                         #{mod 22216}#
                         #{for-car? 22217}#)
                       (if (eqv? #{ftype 22858}# 'module-ref)
                         (call-with-values
                           (lambda ()
                             (#{fval 22859}#
                               #{e 22211}#
                               #{r 22212}#
                               #{w 22213}#))
                           (lambda (#{e 22884}#
                                    #{r 22885}#
                                    #{w 22886}#
                                    #{s 22887}#
                                    #{mod 22888}#)
                             (#{syntax-type 6320}#
                               #{e 22884}#
                               #{r 22885}#
                               #{w 22886}#
                               #{s 22887}#
                               #{rib 22215}#
                               #{mod 22888}#
                               #{for-car? 22217}#)))
                         (if (eqv? #{ftype 22858}# 'core)
                           (values
                             'core-form
                             #{fval 22859}#
                             #{e 22211}#
                             #{w 22213}#
                             #{s 22214}#
                             #{mod 22216}#)
                           (if (eqv? #{ftype 22858}# 'local-syntax)
                             (values
                               'local-syntax-form
                               #{fval 22859}#
                               #{e 22211}#
                               #{w 22213}#
                               #{s 22214}#
                               #{mod 22216}#)
                             (if (eqv? #{ftype 22858}# 'begin)
                               (values
                                 'begin-form
                                 #f
                                 #{e 22211}#
                                 #{w 22213}#
                                 #{s 22214}#
                                 #{mod 22216}#)
                               (if (eqv? #{ftype 22858}# 'eval-when)
                                 (values
                                   'eval-when-form
                                   #f
                                   #{e 22211}#
                                   #{w 22213}#
                                   #{s 22214}#
                                   #{mod 22216}#)
                                 (if (eqv? #{ftype 22858}# 'define)
                                   (let ((#{tmp 22905}#
                                           ($sc-dispatch
                                             #{e 22211}#
                                             '(_ any any))))
                                     (if (if #{tmp 22905}#
                                           (@apply
                                             (lambda (#{name 22909}#
                                                      #{val 22910}#)
                                               (if (symbol? #{name 22909}#)
                                                 #t
                                                 (if (if (vector?
                                                           #{name 22909}#)
                                                       (if (= (vector-length
                                                                #{name 22909}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{name 22909}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (symbol?
                                                     (vector-ref
                                                       #{name 22909}#
                                                       1))
                                                   #f)))
                                             #{tmp 22905}#)
                                           #f)
                                       (@apply
                                         (lambda (#{name 22937}# #{val 22938}#)
                                           (values
                                             'define-form
                                             #{name 22937}#
                                             #{val 22938}#
                                             #{w 22213}#
                                             #{s 22214}#
                                             #{mod 22216}#))
                                         #{tmp 22905}#)
                                       (let ((#{tmp 22939}#
                                               ($sc-dispatch
                                                 #{e 22211}#
                                                 '(_ (any . any)
                                                     any
                                                     .
                                                     each-any))))
                                         (if (if #{tmp 22939}#
                                               (@apply
                                                 (lambda (#{name 22943}#
                                                          #{args 22944}#
                                                          #{e1 22945}#
                                                          #{e2 22946}#)
                                                   (if (if (symbol?
                                                             #{name 22943}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 22943}#)
                                                               (if (= (vector-length
                                                                        #{name 22943}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 22943}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 22943}#
                                                               1))
                                                           #f))
                                                     (#{valid-bound-ids? 6311}#
                                                       (letrec*
                                                         ((#{lvl 23095}#
                                                            (lambda (#{vars 23097}#
                                                                     #{ls 23098}#
                                                                     #{w 23099}#)
                                                              (if (pair? #{vars 23097}#)
                                                                (#{lvl 23095}#
                                                                  (cdr #{vars 23097}#)
                                                                  (cons (#{wrap 6314}#
                                                                          (car #{vars 23097}#)
                                                                          #{w 23099}#
                                                                          #f)
                                                                        #{ls 23098}#)
                                                                  #{w 23099}#)
                                                                (if (if (symbol?
                                                                          #{vars 23097}#)
                                                                      #t
                                                                      (if (if (vector?
                                                                                #{vars 23097}#)
                                                                            (if (= (vector-length
                                                                                     #{vars 23097}#)
                                                                                   4)
                                                                              (eq? (vector-ref
                                                                                     #{vars 23097}#
                                                                                     0)
                                                                                   'syntax-object)
                                                                              #f)
                                                                            #f)
                                                                        (symbol?
                                                                          (vector-ref
                                                                            #{vars 23097}#
                                                                            1))
                                                                        #f))
                                                                  (cons (#{wrap 6314}#
                                                                          #{vars 23097}#
                                                                          #{w 23099}#
                                                                          #f)
                                                                        #{ls 23098}#)
                                                                  (if (null? #{vars 23097}#)
                                                                    #{ls 23098}#
                                                                    (if (if (vector?
                                                                              #{vars 23097}#)
                                                                          (if (= (vector-length
                                                                                   #{vars 23097}#)
                                                                                 4)
                                                                            (eq? (vector-ref
                                                                                   #{vars 23097}#
                                                                                   0)
                                                                                 'syntax-object)
                                                                            #f)
                                                                          #f)
                                                                      (#{lvl 23095}#
                                                                        (vector-ref
                                                                          #{vars 23097}#
                                                                          1)
                                                                        #{ls 23098}#
                                                                        (#{join-wraps 6305}#
                                                                          #{w 23099}#
                                                                          (vector-ref
                                                                            #{vars 23097}#
                                                                            2)))
                                                                      (cons #{vars 23097}#
                                                                            #{ls 23098}#))))))))
                                                         (#{lvl 23095}#
                                                           #{args 22944}#
                                                           '()
                                                           '(()))))
                                                     #f))
                                                 #{tmp 22939}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 23143}#
                                                      #{args 23144}#
                                                      #{e1 23145}#
                                                      #{e2 23146}#)
                                               (values
                                                 'define-form
                                                 (#{wrap 6314}#
                                                   #{name 23143}#
                                                   #{w 22213}#
                                                   #{mod 22216}#)
                                                 (let ((#{e 23152}#
                                                         (cons '#(syntax-object
                                                                  lambda
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(name
                                                                       args
                                                                       e1
                                                                       e2)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i3830"
                                                                       "i3831"
                                                                       "i3832"
                                                                       "i3833"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(ftype
                                                                       fval
                                                                       fe
                                                                       fw
                                                                       fs
                                                                       fmod)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i3783"
                                                                       "i3784"
                                                                       "i3785"
                                                                       "i3786"
                                                                       "i3787"
                                                                       "i3788"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(first)
                                                                     #((top))
                                                                     #("i3775"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(e
                                                                       r
                                                                       w
                                                                       s
                                                                       rib
                                                                       mod
                                                                       for-car?)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i3747"
                                                                       "i3748"
                                                                       "i3749"
                                                                       "i3750"
                                                                       "i3751"
                                                                       "i3752"
                                                                       "i3753"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       expand-lambda-case
                                                                       lambda*-formals
                                                                       expand-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       expand-void
                                                                       eval-local-transformer
                                                                       expand-local-syntax
                                                                       expand-body
                                                                       expand-macro
                                                                       expand-application
                                                                       expand-expr
                                                                       expand
                                                                       syntax-type
                                                                       parse-when-list
                                                                       expand-install-global
                                                                       expand-top-sequence
                                                                       expand-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-application
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-sequence
                                                                       make-application
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i2454"
                                                                      "i2452"
                                                                      "i2450"
                                                                      "i2448"
                                                                      "i2446"
                                                                      "i2444"
                                                                      "i2442"
                                                                      "i2440"
                                                                      "i2438"
                                                                      "i2436"
                                                                      "i2434"
                                                                      "i2432"
                                                                      "i2430"
                                                                      "i2428"
                                                                      "i2426"
                                                                      "i2424"
                                                                      "i2422"
                                                                      "i2420"
                                                                      "i2418"
                                                                      "i2416"
                                                                      "i2414"
                                                                      "i2412"
                                                                      "i2410"
                                                                      "i2408"
                                                                      "i2406"
                                                                      "i2404"
                                                                      "i2402"
                                                                      "i2400"
                                                                      "i2398"
                                                                      "i2396"
                                                                      "i2394"
                                                                      "i2392"
                                                                      "i2390"
                                                                      "i2388"
                                                                      "i2386"
                                                                      "i2385"
                                                                      "i2383"
                                                                      "i2380"
                                                                      "i2379"
                                                                      "i2378"
                                                                      "i2376"
                                                                      "i2375"
                                                                      "i2373"
                                                                      "i2371"
                                                                      "i2369"
                                                                      "i2367"
                                                                      "i2365"
                                                                      "i2363"
                                                                      "i2361"
                                                                      "i2359"
                                                                      "i2356"
                                                                      "i2354"
                                                                      "i2353"
                                                                      "i2351"
                                                                      "i2349"
                                                                      "i2347"
                                                                      "i2345"
                                                                      "i2344"
                                                                      "i2343"
                                                                      "i2342"
                                                                      "i2340"
                                                                      "i2339"
                                                                      "i2336"
                                                                      "i2334"
                                                                      "i2332"
                                                                      "i2330"
                                                                      "i2328"
                                                                      "i2326"
                                                                      "i2324"
                                                                      "i2323"
                                                                      "i2322"
                                                                      "i2320"
                                                                      "i2318"
                                                                      "i2317"
                                                                      "i2314"
                                                                      "i2313"
                                                                      "i2311"
                                                                      "i2309"
                                                                      "i2307"
                                                                      "i2305"
                                                                      "i2303"
                                                                      "i2301"
                                                                      "i2299"
                                                                      "i2297"
                                                                      "i2295"
                                                                      "i2292"
                                                                      "i2290"
                                                                      "i2288"
                                                                      "i2286"
                                                                      "i2284"
                                                                      "i2282"
                                                                      "i2280"
                                                                      "i2278"
                                                                      "i2276"
                                                                      "i2274"
                                                                      "i2272"
                                                                      "i2270"
                                                                      "i2268"
                                                                      "i2266"
                                                                      "i2264"
                                                                      "i2262"
                                                                      "i2260"
                                                                      "i2258"
                                                                      "i2256"
                                                                      "i2254"
                                                                      "i2252"
                                                                      "i2250"
                                                                      "i2248"
                                                                      "i2247"
                                                                      "i2244"
                                                                      "i2242"
                                                                      "i2241"
                                                                      "i2240"
                                                                      "i2239"
                                                                      "i2238"
                                                                      "i2236"
                                                                      "i2234"
                                                                      "i2232"
                                                                      "i2229"
                                                                      "i2227"
                                                                      "i2225"
                                                                      "i2223"
                                                                      "i2221"
                                                                      "i2219"
                                                                      "i2217"
                                                                      "i2215"
                                                                      "i2213"
                                                                      "i2211"
                                                                      "i2209"
                                                                      "i2207"
                                                                      "i2205"
                                                                      "i2203"
                                                                      "i2201"
                                                                      "i2199"
                                                                      "i2197"
                                                                      "i2195"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i2033"
                                                                      "i2032"
                                                                      "i2031")))
                                                                  (hygiene
                                                                    guile))
                                                               (#{wrap 6314}#
                                                                 (cons #{args 23144}#
                                                                       (cons #{e1 23145}#
                                                                             #{e2 23146}#))
                                                                 #{w 22213}#
                                                                 #{mod 22216}#))))
                                                   (begin
                                                     (if (if (pair? #{e 23152}#)
                                                           #{s 22214}#
                                                           #f)
                                                       (set-source-properties!
                                                         #{e 23152}#
                                                         #{s 22214}#))
                                                     #{e 23152}#))
                                                 '(())
                                                 #{s 22214}#
                                                 #{mod 22216}#))
                                             #{tmp 22939}#)
                                           (let ((#{tmp 23159}#
                                                   ($sc-dispatch
                                                     #{e 22211}#
                                                     '(_ any))))
                                             (if (if #{tmp 23159}#
                                                   (@apply
                                                     (lambda (#{name 23163}#)
                                                       (if (symbol?
                                                             #{name 23163}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 23163}#)
                                                               (if (= (vector-length
                                                                        #{name 23163}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 23163}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 23163}#
                                                               1))
                                                           #f)))
                                                     #{tmp 23159}#)
                                                   #f)
                                               (@apply
                                                 (lambda (#{name 23190}#)
                                                   (values
                                                     'define-form
                                                     (#{wrap 6314}#
                                                       #{name 23190}#
                                                       #{w 22213}#
                                                       #{mod 22216}#)
                                                     '(#(syntax-object
                                                         if
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i3843"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i3783"
                                                              "i3784"
                                                              "i3785"
                                                              "i3786"
                                                              "i3787"
                                                              "i3788"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i3775"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i3747"
                                                              "i3748"
                                                              "i3749"
                                                              "i3750"
                                                              "i3751"
                                                              "i3752"
                                                              "i3753"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i2454"
                                                             "i2452"
                                                             "i2450"
                                                             "i2448"
                                                             "i2446"
                                                             "i2444"
                                                             "i2442"
                                                             "i2440"
                                                             "i2438"
                                                             "i2436"
                                                             "i2434"
                                                             "i2432"
                                                             "i2430"
                                                             "i2428"
                                                             "i2426"
                                                             "i2424"
                                                             "i2422"
                                                             "i2420"
                                                             "i2418"
                                                             "i2416"
                                                             "i2414"
                                                             "i2412"
                                                             "i2410"
                                                             "i2408"
                                                             "i2406"
                                                             "i2404"
                                                             "i2402"
                                                             "i2400"
                                                             "i2398"
                                                             "i2396"
                                                             "i2394"
                                                             "i2392"
                                                             "i2390"
                                                             "i2388"
                                                             "i2386"
                                                             "i2385"
                                                             "i2383"
                                                             "i2380"
                                                             "i2379"
                                                             "i2378"
                                                             "i2376"
                                                             "i2375"
                                                             "i2373"
                                                             "i2371"
                                                             "i2369"
                                                             "i2367"
                                                             "i2365"
                                                             "i2363"
                                                             "i2361"
                                                             "i2359"
                                                             "i2356"
                                                             "i2354"
                                                             "i2353"
                                                             "i2351"
                                                             "i2349"
                                                             "i2347"
                                                             "i2345"
                                                             "i2344"
                                                             "i2343"
                                                             "i2342"
                                                             "i2340"
                                                             "i2339"
                                                             "i2336"
                                                             "i2334"
                                                             "i2332"
                                                             "i2330"
                                                             "i2328"
                                                             "i2326"
                                                             "i2324"
                                                             "i2323"
                                                             "i2322"
                                                             "i2320"
                                                             "i2318"
                                                             "i2317"
                                                             "i2314"
                                                             "i2313"
                                                             "i2311"
                                                             "i2309"
                                                             "i2307"
                                                             "i2305"
                                                             "i2303"
                                                             "i2301"
                                                             "i2299"
                                                             "i2297"
                                                             "i2295"
                                                             "i2292"
                                                             "i2290"
                                                             "i2288"
                                                             "i2286"
                                                             "i2284"
                                                             "i2282"
                                                             "i2280"
                                                             "i2278"
                                                             "i2276"
                                                             "i2274"
                                                             "i2272"
                                                             "i2270"
                                                             "i2268"
                                                             "i2266"
                                                             "i2264"
                                                             "i2262"
                                                             "i2260"
                                                             "i2258"
                                                             "i2256"
                                                             "i2254"
                                                             "i2252"
                                                             "i2250"
                                                             "i2248"
                                                             "i2247"
                                                             "i2244"
                                                             "i2242"
                                                             "i2241"
                                                             "i2240"
                                                             "i2239"
                                                             "i2238"
                                                             "i2236"
                                                             "i2234"
                                                             "i2232"
                                                             "i2229"
                                                             "i2227"
                                                             "i2225"
                                                             "i2223"
                                                             "i2221"
                                                             "i2219"
                                                             "i2217"
                                                             "i2215"
                                                             "i2213"
                                                             "i2211"
                                                             "i2209"
                                                             "i2207"
                                                             "i2205"
                                                             "i2203"
                                                             "i2201"
                                                             "i2199"
                                                             "i2197"
                                                             "i2195"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i2033"
                                                             "i2032"
                                                             "i2031")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i3843"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i3783"
                                                              "i3784"
                                                              "i3785"
                                                              "i3786"
                                                              "i3787"
                                                              "i3788"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i3775"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i3747"
                                                              "i3748"
                                                              "i3749"
                                                              "i3750"
                                                              "i3751"
                                                              "i3752"
                                                              "i3753"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i2454"
                                                             "i2452"
                                                             "i2450"
                                                             "i2448"
                                                             "i2446"
                                                             "i2444"
                                                             "i2442"
                                                             "i2440"
                                                             "i2438"
                                                             "i2436"
                                                             "i2434"
                                                             "i2432"
                                                             "i2430"
                                                             "i2428"
                                                             "i2426"
                                                             "i2424"
                                                             "i2422"
                                                             "i2420"
                                                             "i2418"
                                                             "i2416"
                                                             "i2414"
                                                             "i2412"
                                                             "i2410"
                                                             "i2408"
                                                             "i2406"
                                                             "i2404"
                                                             "i2402"
                                                             "i2400"
                                                             "i2398"
                                                             "i2396"
                                                             "i2394"
                                                             "i2392"
                                                             "i2390"
                                                             "i2388"
                                                             "i2386"
                                                             "i2385"
                                                             "i2383"
                                                             "i2380"
                                                             "i2379"
                                                             "i2378"
                                                             "i2376"
                                                             "i2375"
                                                             "i2373"
                                                             "i2371"
                                                             "i2369"
                                                             "i2367"
                                                             "i2365"
                                                             "i2363"
                                                             "i2361"
                                                             "i2359"
                                                             "i2356"
                                                             "i2354"
                                                             "i2353"
                                                             "i2351"
                                                             "i2349"
                                                             "i2347"
                                                             "i2345"
                                                             "i2344"
                                                             "i2343"
                                                             "i2342"
                                                             "i2340"
                                                             "i2339"
                                                             "i2336"
                                                             "i2334"
                                                             "i2332"
                                                             "i2330"
                                                             "i2328"
                                                             "i2326"
                                                             "i2324"
                                                             "i2323"
                                                             "i2322"
                                                             "i2320"
                                                             "i2318"
                                                             "i2317"
                                                             "i2314"
                                                             "i2313"
                                                             "i2311"
                                                             "i2309"
                                                             "i2307"
                                                             "i2305"
                                                             "i2303"
                                                             "i2301"
                                                             "i2299"
                                                             "i2297"
                                                             "i2295"
                                                             "i2292"
                                                             "i2290"
                                                             "i2288"
                                                             "i2286"
                                                             "i2284"
                                                             "i2282"
                                                             "i2280"
                                                             "i2278"
                                                             "i2276"
                                                             "i2274"
                                                             "i2272"
                                                             "i2270"
                                                             "i2268"
                                                             "i2266"
                                                             "i2264"
                                                             "i2262"
                                                             "i2260"
                                                             "i2258"
                                                             "i2256"
                                                             "i2254"
                                                             "i2252"
                                                             "i2250"
                                                             "i2248"
                                                             "i2247"
                                                             "i2244"
                                                             "i2242"
                                                             "i2241"
                                                             "i2240"
                                                             "i2239"
                                                             "i2238"
                                                             "i2236"
                                                             "i2234"
                                                             "i2232"
                                                             "i2229"
                                                             "i2227"
                                                             "i2225"
                                                             "i2223"
                                                             "i2221"
                                                             "i2219"
                                                             "i2217"
                                                             "i2215"
                                                             "i2213"
                                                             "i2211"
                                                             "i2209"
                                                             "i2207"
                                                             "i2205"
                                                             "i2203"
                                                             "i2201"
                                                             "i2199"
                                                             "i2197"
                                                             "i2195"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i2033"
                                                             "i2032"
                                                             "i2031")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i3843"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i3783"
                                                              "i3784"
                                                              "i3785"
                                                              "i3786"
                                                              "i3787"
                                                              "i3788"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i3775"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i3747"
                                                              "i3748"
                                                              "i3749"
                                                              "i3750"
                                                              "i3751"
                                                              "i3752"
                                                              "i3753"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i2454"
                                                             "i2452"
                                                             "i2450"
                                                             "i2448"
                                                             "i2446"
                                                             "i2444"
                                                             "i2442"
                                                             "i2440"
                                                             "i2438"
                                                             "i2436"
                                                             "i2434"
                                                             "i2432"
                                                             "i2430"
                                                             "i2428"
                                                             "i2426"
                                                             "i2424"
                                                             "i2422"
                                                             "i2420"
                                                             "i2418"
                                                             "i2416"
                                                             "i2414"
                                                             "i2412"
                                                             "i2410"
                                                             "i2408"
                                                             "i2406"
                                                             "i2404"
                                                             "i2402"
                                                             "i2400"
                                                             "i2398"
                                                             "i2396"
                                                             "i2394"
                                                             "i2392"
                                                             "i2390"
                                                             "i2388"
                                                             "i2386"
                                                             "i2385"
                                                             "i2383"
                                                             "i2380"
                                                             "i2379"
                                                             "i2378"
                                                             "i2376"
                                                             "i2375"
                                                             "i2373"
                                                             "i2371"
                                                             "i2369"
                                                             "i2367"
                                                             "i2365"
                                                             "i2363"
                                                             "i2361"
                                                             "i2359"
                                                             "i2356"
                                                             "i2354"
                                                             "i2353"
                                                             "i2351"
                                                             "i2349"
                                                             "i2347"
                                                             "i2345"
                                                             "i2344"
                                                             "i2343"
                                                             "i2342"
                                                             "i2340"
                                                             "i2339"
                                                             "i2336"
                                                             "i2334"
                                                             "i2332"
                                                             "i2330"
                                                             "i2328"
                                                             "i2326"
                                                             "i2324"
                                                             "i2323"
                                                             "i2322"
                                                             "i2320"
                                                             "i2318"
                                                             "i2317"
                                                             "i2314"
                                                             "i2313"
                                                             "i2311"
                                                             "i2309"
                                                             "i2307"
                                                             "i2305"
                                                             "i2303"
                                                             "i2301"
                                                             "i2299"
                                                             "i2297"
                                                             "i2295"
                                                             "i2292"
                                                             "i2290"
                                                             "i2288"
                                                             "i2286"
                                                             "i2284"
                                                             "i2282"
                                                             "i2280"
                                                             "i2278"
                                                             "i2276"
                                                             "i2274"
                                                             "i2272"
                                                             "i2270"
                                                             "i2268"
                                                             "i2266"
                                                             "i2264"
                                                             "i2262"
                                                             "i2260"
                                                             "i2258"
                                                             "i2256"
                                                             "i2254"
                                                             "i2252"
                                                             "i2250"
                                                             "i2248"
                                                             "i2247"
                                                             "i2244"
                                                             "i2242"
                                                             "i2241"
                                                             "i2240"
                                                             "i2239"
                                                             "i2238"
                                                             "i2236"
                                                             "i2234"
                                                             "i2232"
                                                             "i2229"
                                                             "i2227"
                                                             "i2225"
                                                             "i2223"
                                                             "i2221"
                                                             "i2219"
                                                             "i2217"
                                                             "i2215"
                                                             "i2213"
                                                             "i2211"
                                                             "i2209"
                                                             "i2207"
                                                             "i2205"
                                                             "i2203"
                                                             "i2201"
                                                             "i2199"
                                                             "i2197"
                                                             "i2195"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i2033"
                                                             "i2032"
                                                             "i2031")))
                                                         (hygiene guile)))
                                                     '(())
                                                     #{s 22214}#
                                                     #{mod 22216}#))
                                                 #{tmp 23159}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{e 22211}#)))))))
                                   (if (eqv? #{ftype 22858}# 'define-syntax)
                                     (let ((#{tmp 23209}#
                                             ($sc-dispatch
                                               #{e 22211}#
                                               '(_ any any))))
                                       (if (if #{tmp 23209}#
                                             (@apply
                                               (lambda (#{name 23213}#
                                                        #{val 23214}#)
                                                 (if (symbol? #{name 23213}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name 23213}#)
                                                         (if (= (vector-length
                                                                  #{name 23213}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 23213}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name 23213}#
                                                         1))
                                                     #f)))
                                               #{tmp 23209}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 23241}#
                                                    #{val 23242}#)
                                             (values
                                               'define-syntax-form
                                               #{name 23241}#
                                               #{val 23242}#
                                               #{w 22213}#
                                               #{s 22214}#
                                               #{mod 22216}#))
                                           #{tmp 23209}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{e 22211}#)))
                                     (values
                                       'call
                                       #f
                                       #{e 22211}#
                                       #{w 22213}#
                                       #{s 22214}#
                                       #{mod 22216}#))))))))))))))
           (if (if (vector? #{e 22211}#)
                 (if (= (vector-length #{e 22211}#) 4)
                   (eq? (vector-ref #{e 22211}# 0) 'syntax-object)
                   #f)
                 #f)
             (#{syntax-type 6320}#
               (vector-ref #{e 22211}# 1)
               #{r 22212}#
               (#{join-wraps 6305}#
                 #{w 22213}#
                 (vector-ref #{e 22211}# 2))
               (let ((#{t 23269}#
                       (#{source-annotation 6282}# #{e 22211}#)))
                 (if #{t 23269}# #{t 23269}# #{s 22214}#))
               #{rib 22215}#
               (let ((#{t 23504}# (vector-ref #{e 22211}# 3)))
                 (if #{t 23504}# #{t 23504}# #{mod 22216}#))
               #{for-car? 22217}#)
             (if (self-evaluating? #{e 22211}#)
               (values
                 'constant
                 #f
                 #{e 22211}#
                 #{w 22213}#
                 #{s 22214}#
                 #{mod 22216}#)
               (values
                 'other
                 #f
                 #{e 22211}#
                 #{w 22213}#
                 #{s 22214}#
                 #{mod 22216}#)))))))
   (#{expand 6321}#
     (lambda (#{e 23513}#
              #{r 23514}#
              #{w 23515}#
              #{mod 23516}#)
       (call-with-values
         (lambda ()
           (#{syntax-type 6320}#
             #{e 23513}#
             #{r 23514}#
             #{w 23515}#
             (#{source-annotation 6282}# #{e 23513}#)
             #f
             #{mod 23516}#
             #f))
         (lambda (#{type 23671}#
                  #{value 23672}#
                  #{e 23673}#
                  #{w 23674}#
                  #{s 23675}#
                  #{mod 23676}#)
           (#{expand-expr 6322}#
             #{type 23671}#
             #{value 23672}#
             #{e 23673}#
             #{r 23514}#
             #{w 23674}#
             #{s 23675}#
             #{mod 23676}#)))))
   (#{expand-expr 6322}#
     (lambda (#{type 23679}#
              #{value 23680}#
              #{e 23681}#
              #{r 23682}#
              #{w 23683}#
              #{s 23684}#
              #{mod 23685}#)
       (if (eqv? #{type 23679}# 'lexical)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{s 23684}#
           #{e 23681}#
           #{value 23680}#)
         (if (if (eqv? #{type 23679}# 'core)
               #t
               (eqv? #{type 23679}# 'core-form))
           (#{value 23680}#
             #{e 23681}#
             #{r 23682}#
             #{w 23683}#
             #{s 23684}#
             #{mod 23685}#)
           (if (eqv? #{type 23679}# 'module-ref)
             (call-with-values
               (lambda ()
                 (#{value 23680}#
                   #{e 23681}#
                   #{r 23682}#
                   #{w 23683}#))
               (lambda (#{e 23711}#
                        #{r 23712}#
                        #{w 23713}#
                        #{s 23714}#
                        #{mod 23715}#)
                 (#{expand 6321}#
                   #{e 23711}#
                   #{r 23712}#
                   #{w 23713}#
                   #{mod 23715}#)))
             (if (eqv? #{type 23679}# 'lexical-call)
               (#{expand-application 6323}#
                 (let ((#{id 23790}# (car #{e 23681}#)))
                   (#{build-lexical-reference 6259}#
                     'fun
                     (#{source-annotation 6282}# #{id 23790}#)
                     (if (if (vector? #{id 23790}#)
                           (if (= (vector-length #{id 23790}#) 4)
                             (eq? (vector-ref #{id 23790}# 0) 'syntax-object)
                             #f)
                           #f)
                       (syntax->datum #{id 23790}#)
                       #{id 23790}#)
                     #{value 23680}#))
                 #{e 23681}#
                 #{r 23682}#
                 #{w 23683}#
                 #{s 23684}#
                 #{mod 23685}#)
               (if (eqv? #{type 23679}# 'global-call)
                 (#{expand-application 6323}#
                   (#{build-global-reference 6262}#
                     (#{source-annotation 6282}# (car #{e 23681}#))
                     (if (if (vector? #{value 23680}#)
                           (if (= (vector-length #{value 23680}#) 4)
                             (eq? (vector-ref #{value 23680}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 23680}# 1)
                       #{value 23680}#)
                     (if (if (vector? #{value 23680}#)
                           (if (= (vector-length #{value 23680}#) 4)
                             (eq? (vector-ref #{value 23680}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 23680}# 3)
                       #{mod 23685}#))
                   #{e 23681}#
                   #{r 23682}#
                   #{w 23683}#
                   #{s 23684}#
                   #{mod 23685}#)
                 (if (eqv? #{type 23679}# 'constant)
                   (let ((#{exp 24127}#
                           (#{strip 6334}#
                             (#{wrap 6314}#
                               (begin
                                 (if (if (pair? #{e 23681}#) #{s 23684}# #f)
                                   (set-source-properties!
                                     #{e 23681}#
                                     #{s 23684}#))
                                 #{e 23681}#)
                               #{w 23683}#
                               #{mod 23685}#)
                             '(()))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 1)
                       #{s 23684}#
                       #{exp 24127}#))
                   (if (eqv? #{type 23679}# 'global)
                     (#{analyze-variable 6261}#
                       #{mod 23685}#
                       #{value 23680}#
                       (lambda (#{mod 24163}# #{var 24164}# #{public? 24165}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #{s 23684}#
                           #{mod 24163}#
                           #{var 24164}#
                           #{public? 24165}#))
                       (lambda (#{var 24174}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #{s 23684}#
                           #{var 24174}#)))
                     (if (eqv? #{type 23679}# 'call)
                       (#{expand-application 6323}#
                         (#{expand 6321}#
                           (car #{e 23681}#)
                           #{r 23682}#
                           #{w 23683}#
                           #{mod 23685}#)
                         #{e 23681}#
                         #{r 23682}#
                         #{w 23683}#
                         #{s 23684}#
                         #{mod 23685}#)
                       (if (eqv? #{type 23679}# 'begin-form)
                         (let ((#{tmp 24249}#
                                 ($sc-dispatch
                                   #{e 23681}#
                                   '(_ any . each-any))))
                           (if #{tmp 24249}#
                             (@apply
                               (lambda (#{e1 24253}# #{e2 24254}#)
                                 (#{expand-sequence 6316}#
                                   (cons #{e1 24253}# #{e2 24254}#)
                                   #{r 23682}#
                                   #{w 23683}#
                                   #{s 23684}#
                                   #{mod 23685}#))
                               #{tmp 24249}#)
                             (let ((#{tmp 24341}#
                                     ($sc-dispatch #{e 23681}# '(_))))
                               (if #{tmp 24341}#
                                 (@apply
                                   (lambda ()
                                     (if (include-deprecated-features)
                                       (begin
                                         (issue-deprecation-warning
                                           "Sequences of zero expressions are deprecated.  Use *unspecified*.")
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 0)
                                           #f))
                                       (syntax-violation
                                         #f
                                         "sequence of zero expressions"
                                         (#{wrap 6314}#
                                           (begin
                                             (if (if (pair? #{e 23681}#)
                                                   #{s 23684}#
                                                   #f)
                                               (set-source-properties!
                                                 #{e 23681}#
                                                 #{s 23684}#))
                                             #{e 23681}#)
                                           #{w 23683}#
                                           #{mod 23685}#))))
                                   #{tmp 24341}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 23681}#)))))
                         (if (eqv? #{type 23679}# 'local-syntax-form)
                           (#{expand-local-syntax 6326}#
                             #{value 23680}#
                             #{e 23681}#
                             #{r 23682}#
                             #{w 23683}#
                             #{s 23684}#
                             #{mod 23685}#
                             #{expand-sequence 6316}#)
                           (if (eqv? #{type 23679}# 'eval-when-form)
                             (let ((#{tmp 24452}#
                                     ($sc-dispatch
                                       #{e 23681}#
                                       '(_ each-any any . each-any))))
                               (if #{tmp 24452}#
                                 (@apply
                                   (lambda (#{x 24456}#
                                            #{e1 24457}#
                                            #{e2 24458}#)
                                     (let ((#{when-list 24459}#
                                             (#{parse-when-list 6319}#
                                               #{e 23681}#
                                               #{x 24456}#)))
                                       (if (memq 'eval #{when-list 24459}#)
                                         (#{expand-sequence 6316}#
                                           (cons #{e1 24457}# #{e2 24458}#)
                                           #{r 23682}#
                                           #{w 23683}#
                                           #{s 23684}#
                                           #{mod 23685}#)
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 0)
                                           #f))))
                                   #{tmp 24452}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 23681}#)))
                             (if (if (eqv? #{type 23679}# 'define-form)
                                   #t
                                   (eqv? #{type 23679}# 'define-syntax-form))
                               (syntax-violation
                                 #f
                                 "definition in expression context"
                                 #{e 23681}#
                                 (#{wrap 6314}#
                                   #{value 23680}#
                                   #{w 23683}#
                                   #{mod 23685}#))
                               (if (eqv? #{type 23679}# 'syntax)
                                 (syntax-violation
                                   #f
                                   "reference to pattern variable outside syntax form"
                                   (#{wrap 6314}#
                                     (begin
                                       (if (if (pair? #{e 23681}#)
                                             #{s 23684}#
                                             #f)
                                         (set-source-properties!
                                           #{e 23681}#
                                           #{s 23684}#))
                                       #{e 23681}#)
                                     #{w 23683}#
                                     #{mod 23685}#))
                                 (if (eqv? #{type 23679}# 'displaced-lexical)
                                   (syntax-violation
                                     #f
                                     "reference to identifier outside its scope"
                                     (#{wrap 6314}#
                                       (begin
                                         (if (if (pair? #{e 23681}#)
                                               #{s 23684}#
                                               #f)
                                           (set-source-properties!
                                             #{e 23681}#
                                             #{s 23684}#))
                                         #{e 23681}#)
                                       #{w 23683}#
                                       #{mod 23685}#))
                                   (syntax-violation
                                     #f
                                     "unexpected syntax"
                                     (#{wrap 6314}#
                                       (begin
                                         (if (if (pair? #{e 23681}#)
                                               #{s 23684}#
                                               #f)
                                           (set-source-properties!
                                             #{e 23681}#
                                             #{s 23684}#))
                                         #{e 23681}#)
                                       #{w 23683}#
                                       #{mod 23685}#))))))))))))))))))
   (#{expand-application 6323}#
     (lambda (#{x 24696}#
              #{e 24697}#
              #{r 24698}#
              #{w 24699}#
              #{s 24700}#
              #{mod 24701}#)
       (let ((#{tmp 24703}#
               ($sc-dispatch #{e 24697}# '(any . each-any))))
         (if #{tmp 24703}#
           (@apply
             (lambda (#{e0 24707}# #{e1 24708}#)
               (#{build-application 6256}#
                 #{s 24700}#
                 #{x 24696}#
                 (map (lambda (#{e 24788}#)
                        (#{expand 6321}#
                          #{e 24788}#
                          #{r 24698}#
                          #{w 24699}#
                          #{mod 24701}#))
                      #{e1 24708}#)))
             #{tmp 24703}#)
           (syntax-violation
             #f
             "source expression failed to match any pattern"
             #{e 24697}#)))))
   (#{expand-macro 6324}#
     (lambda (#{p 24864}#
              #{e 24865}#
              #{r 24866}#
              #{w 24867}#
              #{s 24868}#
              #{rib 24869}#
              #{mod 24870}#)
       (letrec*
         ((#{rebuild-macro-output 24871}#
            (lambda (#{x 24902}# #{m 24903}#)
              (if (pair? #{x 24902}#)
                (let ((#{e 24907}#
                        (cons (#{rebuild-macro-output 24871}#
                                (car #{x 24902}#)
                                #{m 24903}#)
                              (#{rebuild-macro-output 24871}#
                                (cdr #{x 24902}#)
                                #{m 24903}#))))
                  (begin
                    (if (if (pair? #{e 24907}#) #{s 24868}# #f)
                      (set-source-properties! #{e 24907}# #{s 24868}#))
                    #{e 24907}#))
                (if (if (vector? #{x 24902}#)
                      (if (= (vector-length #{x 24902}#) 4)
                        (eq? (vector-ref #{x 24902}# 0) 'syntax-object)
                        #f)
                      #f)
                  (let ((#{w 24923}# (vector-ref #{x 24902}# 2)))
                    (let ((#{ms 24924}# (car #{w 24923}#))
                          (#{s 24925}# (cdr #{w 24923}#)))
                      (if (if (pair? #{ms 24924}#)
                            (eq? (car #{ms 24924}#) #f)
                            #f)
                        (let ((#{expression 24933}# (vector-ref #{x 24902}# 1))
                              (#{wrap 24934}#
                                (cons (cdr #{ms 24924}#)
                                      (if #{rib 24869}#
                                        (cons #{rib 24869}# (cdr #{s 24925}#))
                                        (cdr #{s 24925}#))))
                              (#{module 24935}# (vector-ref #{x 24902}# 3)))
                          (vector
                            'syntax-object
                            #{expression 24933}#
                            #{wrap 24934}#
                            #{module 24935}#))
                        (let ((#{expression 24945}#
                                (let ((#{e 24950}# (vector-ref #{x 24902}# 1)))
                                  (begin
                                    (if (if (pair? #{e 24950}#) #{s 24925}# #f)
                                      (set-source-properties!
                                        #{e 24950}#
                                        #{s 24925}#))
                                    #{e 24950}#)))
                              (#{wrap 24946}#
                                (cons (cons #{m 24903}# #{ms 24924}#)
                                      (if #{rib 24869}#
                                        (cons #{rib 24869}#
                                              (cons 'shift #{s 24925}#))
                                        (cons 'shift #{s 24925}#))))
                              (#{module 24947}# (vector-ref #{x 24902}# 3)))
                          (vector
                            'syntax-object
                            #{expression 24945}#
                            #{wrap 24946}#
                            #{module 24947}#)))))
                  (if (vector? #{x 24902}#)
                    (let ((#{n 24962}# (vector-length #{x 24902}#)))
                      (let ((#{v 24963}#
                              (let ((#{e 24971}# (make-vector #{n 24962}#)))
                                (begin
                                  (if (if (pair? #{e 24971}#) #{x 24902}# #f)
                                    (set-source-properties!
                                      #{e 24971}#
                                      #{x 24902}#))
                                  #{e 24971}#))))
                        (letrec*
                          ((#{loop 24964}#
                             (lambda (#{i 25016}#)
                               (if (= #{i 25016}# #{n 24962}#)
                                 #{v 24963}#
                                 (begin
                                   (vector-set!
                                     #{v 24963}#
                                     #{i 25016}#
                                     (#{rebuild-macro-output 24871}#
                                       (vector-ref #{x 24902}# #{i 25016}#)
                                       #{m 24903}#))
                                   (#{loop 24964}# (#{1+}# #{i 25016}#)))))))
                          (#{loop 24964}# 0))))
                    (if (symbol? #{x 24902}#)
                      (syntax-violation
                        #f
                        "encountered raw symbol in macro output"
                        (let ((#{s 25022}# (cdr #{w 24867}#)))
                          (#{wrap 6314}#
                            (begin
                              (if (if (pair? #{e 24865}#) #{s 25022}# #f)
                                (set-source-properties!
                                  #{e 24865}#
                                  #{s 25022}#))
                              #{e 24865}#)
                            #{w 24867}#
                            #{mod 24870}#))
                        #{x 24902}#)
                      (begin
                        (if (if (pair? #{x 24902}#) #{s 24868}# #f)
                          (set-source-properties! #{x 24902}# #{s 24868}#))
                        #{x 24902}#))))))))
         (#{rebuild-macro-output 24871}#
           (#{p 24864}#
             (let ((#{w 24878}#
                     (cons (cons #f (car #{w 24867}#))
                           (cons 'shift (cdr #{w 24867}#)))))
               (#{wrap 6314}#
                 (begin
                   (if (if (pair? #{e 24865}#) #{s 24868}# #f)
                     (set-source-properties! #{e 24865}# #{s 24868}#))
                   #{e 24865}#)
                 #{w 24878}#
                 #{mod 24870}#)))
           (gensym "m")))))
   (#{expand-body 6325}#
     (lambda (#{body 25054}#
              #{outer-form 25055}#
              #{r 25056}#
              #{w 25057}#
              #{mod 25058}#)
       (let ((#{r 25059}#
               (cons '("placeholder" placeholder) #{r 25056}#)))
         (let ((#{ribcage 25060}# (vector 'ribcage '() '() '())))
           (let ((#{w 25061}#
                   (cons (car #{w 25057}#)
                         (cons #{ribcage 25060}# (cdr #{w 25057}#)))))
             (letrec*
               ((#{parse 25062}#
                  (lambda (#{body 25075}#
                           #{ids 25076}#
                           #{labels 25077}#
                           #{var-ids 25078}#
                           #{vars 25079}#
                           #{vals 25080}#
                           #{bindings 25081}#)
                    (if (null? #{body 25075}#)
                      (syntax-violation
                        #f
                        "no expressions in body"
                        #{outer-form 25055}#)
                      (let ((#{e 25082}# (cdr (car #{body 25075}#)))
                            (#{er 25083}# (car (car #{body 25075}#))))
                        (call-with-values
                          (lambda ()
                            (#{syntax-type 6320}#
                              #{e 25082}#
                              #{er 25083}#
                              '(())
                              (#{source-annotation 6282}# #{er 25083}#)
                              #{ribcage 25060}#
                              #{mod 25058}#
                              #f))
                          (lambda (#{type 25240}#
                                   #{value 25241}#
                                   #{e 25242}#
                                   #{w 25243}#
                                   #{s 25244}#
                                   #{mod 25245}#)
                            (if (eqv? #{type 25240}# 'define-form)
                              (let ((#{id 25249}#
                                      (#{wrap 6314}#
                                        #{value 25241}#
                                        #{w 25243}#
                                        #{mod 25245}#))
                                    (#{label 25250}#
                                      (symbol->string (gensym "i"))))
                                (let ((#{var 25251}#
                                        (let ((#{id 25311}#
                                                (if (if (vector? #{id 25249}#)
                                                      (if (= (vector-length
                                                               #{id 25249}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{id 25249}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref #{id 25249}# 1)
                                                  #{id 25249}#)))
                                          (gensym
                                            (string-append
                                              (symbol->string #{id 25311}#)
                                              " ")))))
                                  (begin
                                    (let ((#{update 25301}#
                                            (cons (vector-ref #{id 25249}# 1)
                                                  (vector-ref
                                                    #{ribcage 25060}#
                                                    1))))
                                      (vector-set!
                                        #{ribcage 25060}#
                                        1
                                        #{update 25301}#))
                                    (let ((#{update 25303}#
                                            (cons (car (vector-ref
                                                         #{id 25249}#
                                                         2))
                                                  (vector-ref
                                                    #{ribcage 25060}#
                                                    2))))
                                      (vector-set!
                                        #{ribcage 25060}#
                                        2
                                        #{update 25303}#))
                                    (let ((#{update 25305}#
                                            (cons #{label 25250}#
                                                  (vector-ref
                                                    #{ribcage 25060}#
                                                    3))))
                                      (vector-set!
                                        #{ribcage 25060}#
                                        3
                                        #{update 25305}#))
                                    (#{parse 25062}#
                                      (cdr #{body 25075}#)
                                      (cons #{id 25249}# #{ids 25076}#)
                                      (cons #{label 25250}# #{labels 25077}#)
                                      (cons #{id 25249}# #{var-ids 25078}#)
                                      (cons #{var 25251}# #{vars 25079}#)
                                      (cons (cons #{er 25083}#
                                                  (#{wrap 6314}#
                                                    #{e 25242}#
                                                    #{w 25243}#
                                                    #{mod 25245}#))
                                            #{vals 25080}#)
                                      (cons (cons 'lexical #{var 25251}#)
                                            #{bindings 25081}#)))))
                              (if (eqv? #{type 25240}# 'define-syntax-form)
                                (let ((#{id 25339}#
                                        (#{wrap 6314}#
                                          #{value 25241}#
                                          #{w 25243}#
                                          #{mod 25245}#))
                                      (#{label 25340}#
                                        (symbol->string (gensym "i"))))
                                  (begin
                                    (let ((#{update 25390}#
                                            (cons (vector-ref #{id 25339}# 1)
                                                  (vector-ref
                                                    #{ribcage 25060}#
                                                    1))))
                                      (vector-set!
                                        #{ribcage 25060}#
                                        1
                                        #{update 25390}#))
                                    (let ((#{update 25392}#
                                            (cons (car (vector-ref
                                                         #{id 25339}#
                                                         2))
                                                  (vector-ref
                                                    #{ribcage 25060}#
                                                    2))))
                                      (vector-set!
                                        #{ribcage 25060}#
                                        2
                                        #{update 25392}#))
                                    (let ((#{update 25394}#
                                            (cons #{label 25340}#
                                                  (vector-ref
                                                    #{ribcage 25060}#
                                                    3))))
                                      (vector-set!
                                        #{ribcage 25060}#
                                        3
                                        #{update 25394}#))
                                    (#{parse 25062}#
                                      (cdr #{body 25075}#)
                                      (cons #{id 25339}# #{ids 25076}#)
                                      (cons #{label 25340}# #{labels 25077}#)
                                      #{var-ids 25078}#
                                      #{vars 25079}#
                                      #{vals 25080}#
                                      (cons (cons 'macro
                                                  (cons #{er 25083}#
                                                        (#{wrap 6314}#
                                                          #{e 25242}#
                                                          #{w 25243}#
                                                          #{mod 25245}#)))
                                            #{bindings 25081}#))))
                                (if (eqv? #{type 25240}# 'begin-form)
                                  (let ((#{tmp 25402}#
                                          ($sc-dispatch
                                            #{e 25242}#
                                            '(_ . each-any))))
                                    (if #{tmp 25402}#
                                      (@apply
                                        (lambda (#{e1 25406}#)
                                          (#{parse 25062}#
                                            (letrec*
                                              ((#{f 25407}#
                                                 (lambda (#{forms 25470}#)
                                                   (if (null? #{forms 25470}#)
                                                     (cdr #{body 25075}#)
                                                     (cons (cons #{er 25083}#
                                                                 (#{wrap 6314}#
                                                                   (car #{forms 25470}#)
                                                                   #{w 25243}#
                                                                   #{mod 25245}#))
                                                           (#{f 25407}#
                                                             (cdr #{forms 25470}#)))))))
                                              (#{f 25407}# #{e1 25406}#))
                                            #{ids 25076}#
                                            #{labels 25077}#
                                            #{var-ids 25078}#
                                            #{vars 25079}#
                                            #{vals 25080}#
                                            #{bindings 25081}#))
                                        #{tmp 25402}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 25242}#)))
                                  (if (eqv? #{type 25240}# 'local-syntax-form)
                                    (#{expand-local-syntax 6326}#
                                      #{value 25241}#
                                      #{e 25242}#
                                      #{er 25083}#
                                      #{w 25243}#
                                      #{s 25244}#
                                      #{mod 25245}#
                                      (lambda (#{forms 25484}#
                                               #{er 25485}#
                                               #{w 25486}#
                                               #{s 25487}#
                                               #{mod 25488}#)
                                        (#{parse 25062}#
                                          (letrec*
                                            ((#{f 25489}#
                                               (lambda (#{forms 25552}#)
                                                 (if (null? #{forms 25552}#)
                                                   (cdr #{body 25075}#)
                                                   (cons (cons #{er 25485}#
                                                               (#{wrap 6314}#
                                                                 (car #{forms 25552}#)
                                                                 #{w 25486}#
                                                                 #{mod 25488}#))
                                                         (#{f 25489}#
                                                           (cdr #{forms 25552}#)))))))
                                            (#{f 25489}# #{forms 25484}#))
                                          #{ids 25076}#
                                          #{labels 25077}#
                                          #{var-ids 25078}#
                                          #{vars 25079}#
                                          #{vals 25080}#
                                          #{bindings 25081}#)))
                                    (if (null? #{ids 25076}#)
                                      (#{build-sequence 6270}#
                                        #f
                                        (map (lambda (#{x 25617}#)
                                               (let ((#{e 25621}#
                                                       (cdr #{x 25617}#))
                                                     (#{r 25622}#
                                                       (car #{x 25617}#)))
                                                 (call-with-values
                                                   (lambda ()
                                                     (#{syntax-type 6320}#
                                                       #{e 25621}#
                                                       #{r 25622}#
                                                       '(())
                                                       (#{source-annotation 6282}#
                                                         #{e 25621}#)
                                                       #f
                                                       #{mod 25245}#
                                                       #f))
                                                   (lambda (#{type 25626}#
                                                            #{value 25627}#
                                                            #{e 25628}#
                                                            #{w 25629}#
                                                            #{s 25630}#
                                                            #{mod 25631}#)
                                                     (#{expand-expr 6322}#
                                                       #{type 25626}#
                                                       #{value 25627}#
                                                       #{e 25628}#
                                                       #{r 25622}#
                                                       #{w 25629}#
                                                       #{s 25630}#
                                                       #{mod 25631}#)))))
                                             (cons (cons #{er 25083}#
                                                         (#{wrap 6314}#
                                                           (begin
                                                             (if (if (pair? #{e 25242}#)
                                                                   #{s 25244}#
                                                                   #f)
                                                               (set-source-properties!
                                                                 #{e 25242}#
                                                                 #{s 25244}#))
                                                             #{e 25242}#)
                                                           #{w 25243}#
                                                           #{mod 25245}#))
                                                   (cdr #{body 25075}#))))
                                      (begin
                                        (if (not (#{valid-bound-ids? 6311}#
                                                   #{ids 25076}#))
                                          (syntax-violation
                                            #f
                                            "invalid or duplicate identifier in definition"
                                            #{outer-form 25055}#))
                                        (letrec*
                                          ((#{loop 25732}#
                                             (lambda (#{bs 25735}#
                                                      #{er-cache 25736}#
                                                      #{r-cache 25737}#)
                                               (if (not (null? #{bs 25735}#))
                                                 (let ((#{b 25738}#
                                                         (car #{bs 25735}#)))
                                                   (if (eq? (car #{b 25738}#)
                                                            'macro)
                                                     (let ((#{er 25740}#
                                                             (car (cdr #{b 25738}#))))
                                                       (let ((#{r-cache 25741}#
                                                               (if (eq? #{er 25740}#
                                                                        #{er-cache 25736}#)
                                                                 #{r-cache 25737}#
                                                                 (#{macros-only-env 6285}#
                                                                   #{er 25740}#))))
                                                         (begin
                                                           (set-cdr!
                                                             #{b 25738}#
                                                             (#{eval-local-transformer 6327}#
                                                               (#{expand 6321}#
                                                                 (cdr (cdr #{b 25738}#))
                                                                 #{r-cache 25741}#
                                                                 '(())
                                                                 #{mod 25245}#)
                                                               #{mod 25245}#))
                                                           (#{loop 25732}#
                                                             (cdr #{bs 25735}#)
                                                             #{er 25740}#
                                                             #{r-cache 25741}#))))
                                                     (#{loop 25732}#
                                                       (cdr #{bs 25735}#)
                                                       #{er-cache 25736}#
                                                       #{r-cache 25737}#)))))))
                                          (#{loop 25732}#
                                            #{bindings 25081}#
                                            #f
                                            #f))
                                        (set-cdr!
                                          #{r 25059}#
                                          (#{extend-env 6283}#
                                            #{labels 25077}#
                                            #{bindings 25081}#
                                            (cdr #{r 25059}#)))
                                        (#{build-letrec 6273}#
                                          #f
                                          #t
                                          (reverse
                                            (map syntax->datum
                                                 #{var-ids 25078}#))
                                          (reverse #{vars 25079}#)
                                          (map (lambda (#{x 26084}#)
                                                 (let ((#{e 26088}#
                                                         (cdr #{x 26084}#))
                                                       (#{r 26089}#
                                                         (car #{x 26084}#)))
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{syntax-type 6320}#
                                                         #{e 26088}#
                                                         #{r 26089}#
                                                         '(())
                                                         (#{source-annotation 6282}#
                                                           #{e 26088}#)
                                                         #f
                                                         #{mod 25245}#
                                                         #f))
                                                     (lambda (#{type 26093}#
                                                              #{value 26094}#
                                                              #{e 26095}#
                                                              #{w 26096}#
                                                              #{s 26097}#
                                                              #{mod 26098}#)
                                                       (#{expand-expr 6322}#
                                                         #{type 26093}#
                                                         #{value 26094}#
                                                         #{e 26095}#
                                                         #{r 26089}#
                                                         #{w 26096}#
                                                         #{s 26097}#
                                                         #{mod 26098}#)))))
                                               (reverse #{vals 25080}#))
                                          (let ((#{exps 26104}#
                                                  (map (lambda (#{x 26105}#)
                                                         (let ((#{e 26108}#
                                                                 (cdr #{x 26105}#))
                                                               (#{r 26109}#
                                                                 (car #{x 26105}#)))
                                                           (call-with-values
                                                             (lambda ()
                                                               (#{syntax-type 6320}#
                                                                 #{e 26108}#
                                                                 #{r 26109}#
                                                                 '(())
                                                                 (#{source-annotation 6282}#
                                                                   #{e 26108}#)
                                                                 #f
                                                                 #{mod 25245}#
                                                                 #f))
                                                             (lambda (#{type 26113}#
                                                                      #{value 26114}#
                                                                      #{e 26115}#
                                                                      #{w 26116}#
                                                                      #{s 26117}#
                                                                      #{mod 26118}#)
                                                               (#{expand-expr 6322}#
                                                                 #{type 26113}#
                                                                 #{value 26114}#
                                                                 #{e 26115}#
                                                                 #{r 26109}#
                                                                 #{w 26116}#
                                                                 #{s 26117}#
                                                                 #{mod 26118}#)))))
                                                       (cons (cons #{er 25083}#
                                                                   (#{wrap 6314}#
                                                                     (begin
                                                                       (if (if (pair? #{e 25242}#)
                                                                             #{s 25244}#
                                                                             #f)
                                                                         (set-source-properties!
                                                                           #{e 25242}#
                                                                           #{s 25244}#))
                                                                       #{e 25242}#)
                                                                     #{w 25243}#
                                                                     #{mod 25245}#))
                                                             (cdr #{body 25075}#)))))
                                            (if (null? (cdr #{exps 26104}#))
                                              (car #{exps 26104}#)
                                              (make-struct/no-tail
                                                (vector-ref
                                                  %expanded-vtables
                                                  12)
                                                #f
                                                #{exps 26104}#)))))))))))))))))
               (#{parse 25062}#
                 (map (lambda (#{x 25065}#)
                        (cons #{r 25059}#
                              (#{wrap 6314}#
                                #{x 25065}#
                                #{w 25061}#
                                #{mod 25058}#)))
                      #{body 25054}#)
                 '()
                 '()
                 '()
                 '()
                 '()
                 '())))))))
   (#{expand-local-syntax 6326}#
     (lambda (#{rec? 26144}#
              #{e 26145}#
              #{r 26146}#
              #{w 26147}#
              #{s 26148}#
              #{mod 26149}#
              #{k 26150}#)
       (let ((#{tmp 26152}#
               ($sc-dispatch
                 #{e 26145}#
                 '(_ #(each (any any)) any . each-any))))
         (if #{tmp 26152}#
           (@apply
             (lambda (#{id 26156}#
                      #{val 26157}#
                      #{e1 26158}#
                      #{e2 26159}#)
               (if (not (#{valid-bound-ids? 6311}# #{id 26156}#))
                 (syntax-violation
                   #f
                   "duplicate bound keyword"
                   #{e 26145}#)
                 (let ((#{labels 26249}#
                         (#{gen-labels 6292}# #{id 26156}#)))
                   (let ((#{new-w 26250}#
                           (#{make-binding-wrap 6303}#
                             #{id 26156}#
                             #{labels 26249}#
                             #{w 26147}#)))
                     (#{k 26150}#
                       (cons #{e1 26158}# #{e2 26159}#)
                       (#{extend-env 6283}#
                         #{labels 26249}#
                         (let ((#{trans-r 26288}#
                                 (#{macros-only-env 6285}# #{r 26146}#)))
                           (begin
                             (if #{rec? 26144}# #{new-w 26250}# #{w 26147}#)
                             (map (lambda (#{x 26289}#)
                                    (cons 'macro
                                          (#{eval-local-transformer 6327}#
                                            (#{expand 6321}#
                                              #{x 26289}#
                                              #{trans-r 26288}#
                                              (values
                                                (if #{rec? 26144}#
                                                  #{new-w 26250}#
                                                  #{w 26147}#))
                                              #{mod 26149}#)
                                            #{mod 26149}#)))
                                  #{val 26157}#)))
                         #{r 26146}#)
                       #{new-w 26250}#
                       #{s 26148}#
                       #{mod 26149}#)))))
             #{tmp 26152}#)
           (syntax-violation
             #f
             "bad local syntax definition"
             (#{wrap 6314}#
               (begin
                 (if (if (pair? #{e 26145}#) #{s 26148}# #f)
                   (set-source-properties! #{e 26145}# #{s 26148}#))
                 #{e 26145}#)
               #{w 26147}#
               #{mod 26149}#))))))
   (#{eval-local-transformer 6327}#
     (lambda (#{expanded 26585}# #{mod 26586}#)
       (let ((#{p 26587}# (primitive-eval #{expanded 26585}#)))
         (if (procedure? #{p 26587}#)
           #{p 26587}#
           (syntax-violation
             #f
             "nonprocedure transformer"
             #{p 26587}#)))))
   (#{ellipsis? 6329}#
     (lambda (#{x 7130}#)
       (if (if (if (vector? #{x 7130}#)
                 (if (= (vector-length #{x 7130}#) 4)
                   (eq? (vector-ref #{x 7130}# 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref #{x 7130}# 1))
             #f)
         (if (eq? (if (if (vector? #{x 7130}#)
                        (if (= (vector-length #{x 7130}#) 4)
                          (eq? (vector-ref #{x 7130}# 0) 'syntax-object)
                          #f)
                        #f)
                    (vector-ref #{x 7130}# 1)
                    #{x 7130}#)
                  (if (if (= (vector-length
                               '#(syntax-object
                                  ...
                                  ((top)
                                   #(ribcage () () ())
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i4206"))
                                   #(ribcage
                                     (lambda-var-list
                                       gen-var
                                       strip
                                       expand-lambda-case
                                       lambda*-formals
                                       expand-simple-lambda
                                       lambda-formals
                                       ellipsis?
                                       expand-void
                                       eval-local-transformer
                                       expand-local-syntax
                                       expand-body
                                       expand-macro
                                       expand-application
                                       expand-expr
                                       expand
                                       syntax-type
                                       parse-when-list
                                       expand-install-global
                                       expand-top-sequence
                                       expand-sequence
                                       source-wrap
                                       wrap
                                       bound-id-member?
                                       distinct-bound-ids?
                                       valid-bound-ids?
                                       bound-id=?
                                       free-id=?
                                       id-var-name
                                       same-marks?
                                       join-marks
                                       join-wraps
                                       smart-append
                                       make-binding-wrap
                                       extend-ribcage!
                                       make-empty-ribcage
                                       new-mark
                                       anti-mark
                                       the-anti-mark
                                       top-marked?
                                       top-wrap
                                       empty-wrap
                                       set-ribcage-labels!
                                       set-ribcage-marks!
                                       set-ribcage-symnames!
                                       ribcage-labels
                                       ribcage-marks
                                       ribcage-symnames
                                       ribcage?
                                       make-ribcage
                                       gen-labels
                                       gen-label
                                       make-rename
                                       rename-marks
                                       rename-new
                                       rename-old
                                       subst-rename?
                                       wrap-subst
                                       wrap-marks
                                       make-wrap
                                       id-sym-name&marks
                                       id-sym-name
                                       id?
                                       nonsymbol-id?
                                       global-extend
                                       lookup
                                       macros-only-env
                                       extend-var-env
                                       extend-env
                                       null-env
                                       binding-value
                                       binding-type
                                       make-binding
                                       arg-check
                                       source-annotation
                                       no-source
                                       set-syntax-object-module!
                                       set-syntax-object-wrap!
                                       set-syntax-object-expression!
                                       syntax-object-module
                                       syntax-object-wrap
                                       syntax-object-expression
                                       syntax-object?
                                       make-syntax-object
                                       build-lexical-var
                                       build-letrec
                                       build-named-let
                                       build-let
                                       build-sequence
                                       build-data
                                       build-primref
                                       build-lambda-case
                                       build-case-lambda
                                       build-simple-lambda
                                       build-global-definition
                                       build-global-assignment
                                       build-global-reference
                                       analyze-variable
                                       build-lexical-assignment
                                       build-lexical-reference
                                       build-dynlet
                                       build-conditional
                                       build-application
                                       build-void
                                       maybe-name-value!
                                       decorate-source
                                       get-global-definition-hook
                                       put-global-definition-hook
                                       gensym-hook
                                       local-eval-hook
                                       top-level-eval-hook
                                       fx<
                                       fx=
                                       fx-
                                       fx+
                                       set-lambda-meta!
                                       lambda-meta
                                       lambda?
                                       make-dynlet
                                       make-letrec
                                       make-let
                                       make-lambda-case
                                       make-lambda
                                       make-sequence
                                       make-application
                                       make-conditional
                                       make-toplevel-define
                                       make-toplevel-set
                                       make-toplevel-ref
                                       make-module-set
                                       make-module-ref
                                       make-lexical-set
                                       make-lexical-ref
                                       make-primitive-ref
                                       make-const
                                       make-void)
                                     ((top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top))
                                     ("i2454"
                                      "i2452"
                                      "i2450"
                                      "i2448"
                                      "i2446"
                                      "i2444"
                                      "i2442"
                                      "i2440"
                                      "i2438"
                                      "i2436"
                                      "i2434"
                                      "i2432"
                                      "i2430"
                                      "i2428"
                                      "i2426"
                                      "i2424"
                                      "i2422"
                                      "i2420"
                                      "i2418"
                                      "i2416"
                                      "i2414"
                                      "i2412"
                                      "i2410"
                                      "i2408"
                                      "i2406"
                                      "i2404"
                                      "i2402"
                                      "i2400"
                                      "i2398"
                                      "i2396"
                                      "i2394"
                                      "i2392"
                                      "i2390"
                                      "i2388"
                                      "i2386"
                                      "i2385"
                                      "i2383"
                                      "i2380"
                                      "i2379"
                                      "i2378"
                                      "i2376"
                                      "i2375"
                                      "i2373"
                                      "i2371"
                                      "i2369"
                                      "i2367"
                                      "i2365"
                                      "i2363"
                                      "i2361"
                                      "i2359"
                                      "i2356"
                                      "i2354"
                                      "i2353"
                                      "i2351"
                                      "i2349"
                                      "i2347"
                                      "i2345"
                                      "i2344"
                                      "i2343"
                                      "i2342"
                                      "i2340"
                                      "i2339"
                                      "i2336"
                                      "i2334"
                                      "i2332"
                                      "i2330"
                                      "i2328"
                                      "i2326"
                                      "i2324"
                                      "i2323"
                                      "i2322"
                                      "i2320"
                                      "i2318"
                                      "i2317"
                                      "i2314"
                                      "i2313"
                                      "i2311"
                                      "i2309"
                                      "i2307"
                                      "i2305"
                                      "i2303"
                                      "i2301"
                                      "i2299"
                                      "i2297"
                                      "i2295"
                                      "i2292"
                                      "i2290"
                                      "i2288"
                                      "i2286"
                                      "i2284"
                                      "i2282"
                                      "i2280"
                                      "i2278"
                                      "i2276"
                                      "i2274"
                                      "i2272"
                                      "i2270"
                                      "i2268"
                                      "i2266"
                                      "i2264"
                                      "i2262"
                                      "i2260"
                                      "i2258"
                                      "i2256"
                                      "i2254"
                                      "i2252"
                                      "i2250"
                                      "i2248"
                                      "i2247"
                                      "i2244"
                                      "i2242"
                                      "i2241"
                                      "i2240"
                                      "i2239"
                                      "i2238"
                                      "i2236"
                                      "i2234"
                                      "i2232"
                                      "i2229"
                                      "i2227"
                                      "i2225"
                                      "i2223"
                                      "i2221"
                                      "i2219"
                                      "i2217"
                                      "i2215"
                                      "i2213"
                                      "i2211"
                                      "i2209"
                                      "i2207"
                                      "i2205"
                                      "i2203"
                                      "i2201"
                                      "i2199"
                                      "i2197"
                                      "i2195"))
                                   #(ribcage
                                     (define-structure
                                       define-expansion-accessors
                                       define-expansion-constructors)
                                     ((top) (top) (top))
                                     ("i2033" "i2032" "i2031")))
                                  (hygiene guile)))
                             4)
                        #t
                        #f)
                    '...
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i4206"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            expand-lambda-case
                            lambda*-formals
                            expand-simple-lambda
                            lambda-formals
                            ellipsis?
                            expand-void
                            eval-local-transformer
                            expand-local-syntax
                            expand-body
                            expand-macro
                            expand-application
                            expand-expr
                            expand
                            syntax-type
                            parse-when-list
                            expand-install-global
                            expand-top-sequence
                            expand-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            gensym-hook
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("i2454"
                           "i2452"
                           "i2450"
                           "i2448"
                           "i2446"
                           "i2444"
                           "i2442"
                           "i2440"
                           "i2438"
                           "i2436"
                           "i2434"
                           "i2432"
                           "i2430"
                           "i2428"
                           "i2426"
                           "i2424"
                           "i2422"
                           "i2420"
                           "i2418"
                           "i2416"
                           "i2414"
                           "i2412"
                           "i2410"
                           "i2408"
                           "i2406"
                           "i2404"
                           "i2402"
                           "i2400"
                           "i2398"
                           "i2396"
                           "i2394"
                           "i2392"
                           "i2390"
                           "i2388"
                           "i2386"
                           "i2385"
                           "i2383"
                           "i2380"
                           "i2379"
                           "i2378"
                           "i2376"
                           "i2375"
                           "i2373"
                           "i2371"
                           "i2369"
                           "i2367"
                           "i2365"
                           "i2363"
                           "i2361"
                           "i2359"
                           "i2356"
                           "i2354"
                           "i2353"
                           "i2351"
                           "i2349"
                           "i2347"
                           "i2345"
                           "i2344"
                           "i2343"
                           "i2342"
                           "i2340"
                           "i2339"
                           "i2336"
                           "i2334"
                           "i2332"
                           "i2330"
                           "i2328"
                           "i2326"
                           "i2324"
                           "i2323"
                           "i2322"
                           "i2320"
                           "i2318"
                           "i2317"
                           "i2314"
                           "i2313"
                           "i2311"
                           "i2309"
                           "i2307"
                           "i2305"
                           "i2303"
                           "i2301"
                           "i2299"
                           "i2297"
                           "i2295"
                           "i2292"
                           "i2290"
                           "i2288"
                           "i2286"
                           "i2284"
                           "i2282"
                           "i2280"
                           "i2278"
                           "i2276"
                           "i2274"
                           "i2272"
                           "i2270"
                           "i2268"
                           "i2266"
                           "i2264"
                           "i2262"
                           "i2260"
                           "i2258"
                           "i2256"
                           "i2254"
                           "i2252"
                           "i2250"
                           "i2248"
                           "i2247"
                           "i2244"
                           "i2242"
                           "i2241"
                           "i2240"
                           "i2239"
                           "i2238"
                           "i2236"
                           "i2234"
                           "i2232"
                           "i2229"
                           "i2227"
                           "i2225"
                           "i2223"
                           "i2221"
                           "i2219"
                           "i2217"
                           "i2215"
                           "i2213"
                           "i2211"
                           "i2209"
                           "i2207"
                           "i2205"
                           "i2203"
                           "i2201"
                           "i2199"
                           "i2197"
                           "i2195"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("i2033" "i2032" "i2031")))
                       (hygiene guile))))
           (eq? (#{id-var-name 6308}# #{x 7130}# '(()))
                (#{id-var-name 6308}#
                  '#(syntax-object
                     ...
                     ((top)
                      #(ribcage () () ())
                      #(ribcage () () ())
                      #(ribcage #(x) #((top)) #("i4206"))
                      #(ribcage
                        (lambda-var-list
                          gen-var
                          strip
                          expand-lambda-case
                          lambda*-formals
                          expand-simple-lambda
                          lambda-formals
                          ellipsis?
                          expand-void
                          eval-local-transformer
                          expand-local-syntax
                          expand-body
                          expand-macro
                          expand-application
                          expand-expr
                          expand
                          syntax-type
                          parse-when-list
                          expand-install-global
                          expand-top-sequence
                          expand-sequence
                          source-wrap
                          wrap
                          bound-id-member?
                          distinct-bound-ids?
                          valid-bound-ids?
                          bound-id=?
                          free-id=?
                          id-var-name
                          same-marks?
                          join-marks
                          join-wraps
                          smart-append
                          make-binding-wrap
                          extend-ribcage!
                          make-empty-ribcage
                          new-mark
                          anti-mark
                          the-anti-mark
                          top-marked?
                          top-wrap
                          empty-wrap
                          set-ribcage-labels!
                          set-ribcage-marks!
                          set-ribcage-symnames!
                          ribcage-labels
                          ribcage-marks
                          ribcage-symnames
                          ribcage?
                          make-ribcage
                          gen-labels
                          gen-label
                          make-rename
                          rename-marks
                          rename-new
                          rename-old
                          subst-rename?
                          wrap-subst
                          wrap-marks
                          make-wrap
                          id-sym-name&marks
                          id-sym-name
                          id?
                          nonsymbol-id?
                          global-extend
                          lookup
                          macros-only-env
                          extend-var-env
                          extend-env
                          null-env
                          binding-value
                          binding-type
                          make-binding
                          arg-check
                          source-annotation
                          no-source
                          set-syntax-object-module!
                          set-syntax-object-wrap!
                          set-syntax-object-expression!
                          syntax-object-module
                          syntax-object-wrap
                          syntax-object-expression
                          syntax-object?
                          make-syntax-object
                          build-lexical-var
                          build-letrec
                          build-named-let
                          build-let
                          build-sequence
                          build-data
                          build-primref
                          build-lambda-case
                          build-case-lambda
                          build-simple-lambda
                          build-global-definition
                          build-global-assignment
                          build-global-reference
                          analyze-variable
                          build-lexical-assignment
                          build-lexical-reference
                          build-dynlet
                          build-conditional
                          build-application
                          build-void
                          maybe-name-value!
                          decorate-source
                          get-global-definition-hook
                          put-global-definition-hook
                          gensym-hook
                          local-eval-hook
                          top-level-eval-hook
                          fx<
                          fx=
                          fx-
                          fx+
                          set-lambda-meta!
                          lambda-meta
                          lambda?
                          make-dynlet
                          make-letrec
                          make-let
                          make-lambda-case
                          make-lambda
                          make-sequence
                          make-application
                          make-conditional
                          make-toplevel-define
                          make-toplevel-set
                          make-toplevel-ref
                          make-module-set
                          make-module-ref
                          make-lexical-set
                          make-lexical-ref
                          make-primitive-ref
                          make-const
                          make-void)
                        ((top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top))
                        ("i2454"
                         "i2452"
                         "i2450"
                         "i2448"
                         "i2446"
                         "i2444"
                         "i2442"
                         "i2440"
                         "i2438"
                         "i2436"
                         "i2434"
                         "i2432"
                         "i2430"
                         "i2428"
                         "i2426"
                         "i2424"
                         "i2422"
                         "i2420"
                         "i2418"
                         "i2416"
                         "i2414"
                         "i2412"
                         "i2410"
                         "i2408"
                         "i2406"
                         "i2404"
                         "i2402"
                         "i2400"
                         "i2398"
                         "i2396"
                         "i2394"
                         "i2392"
                         "i2390"
                         "i2388"
                         "i2386"
                         "i2385"
                         "i2383"
                         "i2380"
                         "i2379"
                         "i2378"
                         "i2376"
                         "i2375"
                         "i2373"
                         "i2371"
                         "i2369"
                         "i2367"
                         "i2365"
                         "i2363"
                         "i2361"
                         "i2359"
                         "i2356"
                         "i2354"
                         "i2353"
                         "i2351"
                         "i2349"
                         "i2347"
                         "i2345"
                         "i2344"
                         "i2343"
                         "i2342"
                         "i2340"
                         "i2339"
                         "i2336"
                         "i2334"
                         "i2332"
                         "i2330"
                         "i2328"
                         "i2326"
                         "i2324"
                         "i2323"
                         "i2322"
                         "i2320"
                         "i2318"
                         "i2317"
                         "i2314"
                         "i2313"
                         "i2311"
                         "i2309"
                         "i2307"
                         "i2305"
                         "i2303"
                         "i2301"
                         "i2299"
                         "i2297"
                         "i2295"
                         "i2292"
                         "i2290"
                         "i2288"
                         "i2286"
                         "i2284"
                         "i2282"
                         "i2280"
                         "i2278"
                         "i2276"
                         "i2274"
                         "i2272"
                         "i2270"
                         "i2268"
                         "i2266"
                         "i2264"
                         "i2262"
                         "i2260"
                         "i2258"
                         "i2256"
                         "i2254"
                         "i2252"
                         "i2250"
                         "i2248"
                         "i2247"
                         "i2244"
                         "i2242"
                         "i2241"
                         "i2240"
                         "i2239"
                         "i2238"
                         "i2236"
                         "i2234"
                         "i2232"
                         "i2229"
                         "i2227"
                         "i2225"
                         "i2223"
                         "i2221"
                         "i2219"
                         "i2217"
                         "i2215"
                         "i2213"
                         "i2211"
                         "i2209"
                         "i2207"
                         "i2205"
                         "i2203"
                         "i2201"
                         "i2199"
                         "i2197"
                         "i2195"))
                      #(ribcage
                        (define-structure
                          define-expansion-accessors
                          define-expansion-constructors)
                        ((top) (top) (top))
                        ("i2033" "i2032" "i2031")))
                     (hygiene guile))
                  '(())))
           #f)
         #f)))
   (#{lambda-formals 6330}#
     (lambda (#{orig-args 26592}#)
       (letrec*
         ((#{req 26593}#
            (lambda (#{args 26597}# #{rreq 26598}#)
              (let ((#{tmp 26600}# ($sc-dispatch #{args 26597}# '())))
                (if #{tmp 26600}#
                  (@apply
                    (lambda ()
                      (#{check 26594}# (reverse #{rreq 26598}#) #f))
                    #{tmp 26600}#)
                  (let ((#{tmp 26723}#
                          ($sc-dispatch #{args 26597}# '(any . any))))
                    (if (if #{tmp 26723}#
                          (@apply
                            (lambda (#{a 26727}# #{b 26728}#)
                              (if (symbol? #{a 26727}#)
                                #t
                                (if (if (vector? #{a 26727}#)
                                      (if (= (vector-length #{a 26727}#) 4)
                                        (eq? (vector-ref #{a 26727}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 26727}# 1))
                                  #f)))
                            #{tmp 26723}#)
                          #f)
                      (@apply
                        (lambda (#{a 26755}# #{b 26756}#)
                          (#{req 26593}#
                            #{b 26756}#
                            (cons #{a 26755}# #{rreq 26598}#)))
                        #{tmp 26723}#)
                      (let ((#{tmp 26757}# (list #{args 26597}#)))
                        (if (@apply
                              (lambda (#{r 26759}#)
                                (if (symbol? #{r 26759}#)
                                  #t
                                  (if (if (vector? #{r 26759}#)
                                        (if (= (vector-length #{r 26759}#) 4)
                                          (eq? (vector-ref #{r 26759}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{r 26759}# 1))
                                    #f)))
                              #{tmp 26757}#)
                          (@apply
                            (lambda (#{r 26789}#)
                              (#{check 26594}#
                                (reverse #{rreq 26598}#)
                                #{r 26789}#))
                            #{tmp 26757}#)
                          (syntax-violation
                            'lambda
                            "invalid argument list"
                            #{orig-args 26592}#
                            #{args 26597}#)))))))))
          (#{check 26594}#
            (lambda (#{req 26920}# #{rest 26921}#)
              (if (#{distinct-bound-ids? 6312}#
                    (if #{rest 26921}#
                      (cons #{rest 26921}# #{req 26920}#)
                      #{req 26920}#))
                (values #{req 26920}# #f #{rest 26921}# #f)
                (syntax-violation
                  'lambda
                  "duplicate identifier in argument list"
                  #{orig-args 26592}#)))))
         (#{req 26593}# #{orig-args 26592}# '()))))
   (#{expand-simple-lambda 6331}#
     (lambda (#{e 27037}#
              #{r 27038}#
              #{w 27039}#
              #{s 27040}#
              #{mod 27041}#
              #{req 27042}#
              #{rest 27043}#
              #{meta 27044}#
              #{body 27045}#)
       (let ((#{ids 27046}#
               (if #{rest 27043}#
                 (append #{req 27042}# (list #{rest 27043}#))
                 #{req 27042}#)))
         (let ((#{vars 27047}#
                 (map #{gen-var 6335}# #{ids 27046}#)))
           (let ((#{labels 27048}#
                   (#{gen-labels 6292}# #{ids 27046}#)))
             (#{build-simple-lambda 6265}#
               #{s 27040}#
               (map syntax->datum #{req 27042}#)
               (if #{rest 27043}#
                 (syntax->datum #{rest 27043}#)
                 #f)
               #{vars 27047}#
               #{meta 27044}#
               (#{expand-body 6325}#
                 #{body 27045}#
                 (#{wrap 6314}#
                   (begin
                     (if (if (pair? #{e 27037}#) #{s 27040}# #f)
                       (set-source-properties! #{e 27037}# #{s 27040}#))
                     #{e 27037}#)
                   #{w 27039}#
                   #{mod 27041}#)
                 (#{extend-var-env 6284}#
                   #{labels 27048}#
                   #{vars 27047}#
                   #{r 27038}#)
                 (#{make-binding-wrap 6303}#
                   #{ids 27046}#
                   #{labels 27048}#
                   #{w 27039}#)
                 #{mod 27041}#)))))))
   (#{lambda*-formals 6332}#
     (lambda (#{orig-args 27348}#)
       (letrec*
         ((#{req 27349}#
            (lambda (#{args 27356}# #{rreq 27357}#)
              (let ((#{tmp 27359}# ($sc-dispatch #{args 27356}# '())))
                (if #{tmp 27359}#
                  (@apply
                    (lambda ()
                      (#{check 27353}#
                        (reverse #{rreq 27357}#)
                        '()
                        #f
                        '()))
                    #{tmp 27359}#)
                  (let ((#{tmp 27365}#
                          ($sc-dispatch #{args 27356}# '(any . any))))
                    (if (if #{tmp 27365}#
                          (@apply
                            (lambda (#{a 27369}# #{b 27370}#)
                              (if (symbol? #{a 27369}#)
                                #t
                                (if (if (vector? #{a 27369}#)
                                      (if (= (vector-length #{a 27369}#) 4)
                                        (eq? (vector-ref #{a 27369}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 27369}# 1))
                                  #f)))
                            #{tmp 27365}#)
                          #f)
                      (@apply
                        (lambda (#{a 27397}# #{b 27398}#)
                          (#{req 27349}#
                            #{b 27398}#
                            (cons #{a 27397}# #{rreq 27357}#)))
                        #{tmp 27365}#)
                      (let ((#{tmp 27399}#
                              ($sc-dispatch #{args 27356}# '(any . any))))
                        (if (if #{tmp 27399}#
                              (@apply
                                (lambda (#{a 27403}# #{b 27404}#)
                                  (eq? (syntax->datum #{a 27403}#) #:optional))
                                #{tmp 27399}#)
                              #f)
                          (@apply
                            (lambda (#{a 27405}# #{b 27406}#)
                              (#{opt 27350}#
                                #{b 27406}#
                                (reverse #{rreq 27357}#)
                                '()))
                            #{tmp 27399}#)
                          (let ((#{tmp 27409}#
                                  ($sc-dispatch #{args 27356}# '(any . any))))
                            (if (if #{tmp 27409}#
                                  (@apply
                                    (lambda (#{a 27413}# #{b 27414}#)
                                      (eq? (syntax->datum #{a 27413}#) #:key))
                                    #{tmp 27409}#)
                                  #f)
                              (@apply
                                (lambda (#{a 27415}# #{b 27416}#)
                                  (#{key 27351}#
                                    #{b 27416}#
                                    (reverse #{rreq 27357}#)
                                    '()
                                    '()))
                                #{tmp 27409}#)
                              (let ((#{tmp 27419}#
                                      ($sc-dispatch
                                        #{args 27356}#
                                        '(any any))))
                                (if (if #{tmp 27419}#
                                      (@apply
                                        (lambda (#{a 27423}# #{b 27424}#)
                                          (eq? (syntax->datum #{a 27423}#)
                                               #:rest))
                                        #{tmp 27419}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 27425}# #{b 27426}#)
                                      (#{rest 27352}#
                                        #{b 27426}#
                                        (reverse #{rreq 27357}#)
                                        '()
                                        '()))
                                    #{tmp 27419}#)
                                  (let ((#{tmp 27429}# (list #{args 27356}#)))
                                    (if (@apply
                                          (lambda (#{r 27431}#)
                                            (if (symbol? #{r 27431}#)
                                              #t
                                              (if (if (vector? #{r 27431}#)
                                                    (if (= (vector-length
                                                             #{r 27431}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 27431}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 27431}# 1))
                                                #f)))
                                          #{tmp 27429}#)
                                      (@apply
                                        (lambda (#{r 27461}#)
                                          (#{rest 27352}#
                                            #{r 27461}#
                                            (reverse #{rreq 27357}#)
                                            '()
                                            '()))
                                        #{tmp 27429}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid argument list"
                                        #{orig-args 27348}#
                                        #{args 27356}#)))))))))))))))
          (#{opt 27350}#
            (lambda (#{args 27480}# #{req 27481}# #{ropt 27482}#)
              (let ((#{tmp 27484}# ($sc-dispatch #{args 27480}# '())))
                (if #{tmp 27484}#
                  (@apply
                    (lambda ()
                      (#{check 27353}#
                        #{req 27481}#
                        (reverse #{ropt 27482}#)
                        #f
                        '()))
                    #{tmp 27484}#)
                  (let ((#{tmp 27490}#
                          ($sc-dispatch #{args 27480}# '(any . any))))
                    (if (if #{tmp 27490}#
                          (@apply
                            (lambda (#{a 27494}# #{b 27495}#)
                              (if (symbol? #{a 27494}#)
                                #t
                                (if (if (vector? #{a 27494}#)
                                      (if (= (vector-length #{a 27494}#) 4)
                                        (eq? (vector-ref #{a 27494}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 27494}# 1))
                                  #f)))
                            #{tmp 27490}#)
                          #f)
                      (@apply
                        (lambda (#{a 27522}# #{b 27523}#)
                          (#{opt 27350}#
                            #{b 27523}#
                            #{req 27481}#
                            (cons (cons #{a 27522}#
                                        '(#(syntax-object
                                            #f
                                            ((top)
                                             #(ribcage
                                               #(a b)
                                               #((top) (top))
                                               #("i4345" "i4346"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(args req ropt)
                                               #((top) (top) (top))
                                               #("i4335" "i4336" "i4337"))
                                             #(ribcage
                                               (check rest key opt req)
                                               ((top) (top) (top) (top) (top))
                                               ("i4281"
                                                "i4279"
                                                "i4277"
                                                "i4275"
                                                "i4273"))
                                             #(ribcage
                                               #(orig-args)
                                               #((top))
                                               #("i4272"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i2454"
                                                "i2452"
                                                "i2450"
                                                "i2448"
                                                "i2446"
                                                "i2444"
                                                "i2442"
                                                "i2440"
                                                "i2438"
                                                "i2436"
                                                "i2434"
                                                "i2432"
                                                "i2430"
                                                "i2428"
                                                "i2426"
                                                "i2424"
                                                "i2422"
                                                "i2420"
                                                "i2418"
                                                "i2416"
                                                "i2414"
                                                "i2412"
                                                "i2410"
                                                "i2408"
                                                "i2406"
                                                "i2404"
                                                "i2402"
                                                "i2400"
                                                "i2398"
                                                "i2396"
                                                "i2394"
                                                "i2392"
                                                "i2390"
                                                "i2388"
                                                "i2386"
                                                "i2385"
                                                "i2383"
                                                "i2380"
                                                "i2379"
                                                "i2378"
                                                "i2376"
                                                "i2375"
                                                "i2373"
                                                "i2371"
                                                "i2369"
                                                "i2367"
                                                "i2365"
                                                "i2363"
                                                "i2361"
                                                "i2359"
                                                "i2356"
                                                "i2354"
                                                "i2353"
                                                "i2351"
                                                "i2349"
                                                "i2347"
                                                "i2345"
                                                "i2344"
                                                "i2343"
                                                "i2342"
                                                "i2340"
                                                "i2339"
                                                "i2336"
                                                "i2334"
                                                "i2332"
                                                "i2330"
                                                "i2328"
                                                "i2326"
                                                "i2324"
                                                "i2323"
                                                "i2322"
                                                "i2320"
                                                "i2318"
                                                "i2317"
                                                "i2314"
                                                "i2313"
                                                "i2311"
                                                "i2309"
                                                "i2307"
                                                "i2305"
                                                "i2303"
                                                "i2301"
                                                "i2299"
                                                "i2297"
                                                "i2295"
                                                "i2292"
                                                "i2290"
                                                "i2288"
                                                "i2286"
                                                "i2284"
                                                "i2282"
                                                "i2280"
                                                "i2278"
                                                "i2276"
                                                "i2274"
                                                "i2272"
                                                "i2270"
                                                "i2268"
                                                "i2266"
                                                "i2264"
                                                "i2262"
                                                "i2260"
                                                "i2258"
                                                "i2256"
                                                "i2254"
                                                "i2252"
                                                "i2250"
                                                "i2248"
                                                "i2247"
                                                "i2244"
                                                "i2242"
                                                "i2241"
                                                "i2240"
                                                "i2239"
                                                "i2238"
                                                "i2236"
                                                "i2234"
                                                "i2232"
                                                "i2229"
                                                "i2227"
                                                "i2225"
                                                "i2223"
                                                "i2221"
                                                "i2219"
                                                "i2217"
                                                "i2215"
                                                "i2213"
                                                "i2211"
                                                "i2209"
                                                "i2207"
                                                "i2205"
                                                "i2203"
                                                "i2201"
                                                "i2199"
                                                "i2197"
                                                "i2195"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i2033" "i2032" "i2031")))
                                            (hygiene guile))))
                                  #{ropt 27482}#)))
                        #{tmp 27490}#)
                      (let ((#{tmp 27524}#
                              ($sc-dispatch
                                #{args 27480}#
                                '((any any) . any))))
                        (if (if #{tmp 27524}#
                              (@apply
                                (lambda (#{a 27528}#
                                         #{init 27529}#
                                         #{b 27530}#)
                                  (if (symbol? #{a 27528}#)
                                    #t
                                    (if (if (vector? #{a 27528}#)
                                          (if (= (vector-length #{a 27528}#) 4)
                                            (eq? (vector-ref #{a 27528}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 27528}# 1))
                                      #f)))
                                #{tmp 27524}#)
                              #f)
                          (@apply
                            (lambda (#{a 27557}# #{init 27558}# #{b 27559}#)
                              (#{opt 27350}#
                                #{b 27559}#
                                #{req 27481}#
                                (cons (list #{a 27557}# #{init 27558}#)
                                      #{ropt 27482}#)))
                            #{tmp 27524}#)
                          (let ((#{tmp 27560}#
                                  ($sc-dispatch #{args 27480}# '(any . any))))
                            (if (if #{tmp 27560}#
                                  (@apply
                                    (lambda (#{a 27564}# #{b 27565}#)
                                      (eq? (syntax->datum #{a 27564}#) #:key))
                                    #{tmp 27560}#)
                                  #f)
                              (@apply
                                (lambda (#{a 27566}# #{b 27567}#)
                                  (#{key 27351}#
                                    #{b 27567}#
                                    #{req 27481}#
                                    (reverse #{ropt 27482}#)
                                    '()))
                                #{tmp 27560}#)
                              (let ((#{tmp 27570}#
                                      ($sc-dispatch
                                        #{args 27480}#
                                        '(any any))))
                                (if (if #{tmp 27570}#
                                      (@apply
                                        (lambda (#{a 27574}# #{b 27575}#)
                                          (eq? (syntax->datum #{a 27574}#)
                                               #:rest))
                                        #{tmp 27570}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 27576}# #{b 27577}#)
                                      (#{rest 27352}#
                                        #{b 27577}#
                                        #{req 27481}#
                                        (reverse #{ropt 27482}#)
                                        '()))
                                    #{tmp 27570}#)
                                  (let ((#{tmp 27580}# (list #{args 27480}#)))
                                    (if (@apply
                                          (lambda (#{r 27582}#)
                                            (if (symbol? #{r 27582}#)
                                              #t
                                              (if (if (vector? #{r 27582}#)
                                                    (if (= (vector-length
                                                             #{r 27582}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 27582}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 27582}# 1))
                                                #f)))
                                          #{tmp 27580}#)
                                      (@apply
                                        (lambda (#{r 27612}#)
                                          (#{rest 27352}#
                                            #{r 27612}#
                                            #{req 27481}#
                                            (reverse #{ropt 27482}#)
                                            '()))
                                        #{tmp 27580}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid optional argument list"
                                        #{orig-args 27348}#
                                        #{args 27480}#)))))))))))))))
          (#{key 27351}#
            (lambda (#{args 27631}#
                     #{req 27632}#
                     #{opt 27633}#
                     #{rkey 27634}#)
              (let ((#{tmp 27636}# ($sc-dispatch #{args 27631}# '())))
                (if #{tmp 27636}#
                  (@apply
                    (lambda ()
                      (#{check 27353}#
                        #{req 27632}#
                        #{opt 27633}#
                        #f
                        (cons #f (reverse #{rkey 27634}#))))
                    #{tmp 27636}#)
                  (let ((#{tmp 27642}#
                          ($sc-dispatch #{args 27631}# '(any . any))))
                    (if (if #{tmp 27642}#
                          (@apply
                            (lambda (#{a 27646}# #{b 27647}#)
                              (if (symbol? #{a 27646}#)
                                #t
                                (if (if (vector? #{a 27646}#)
                                      (if (= (vector-length #{a 27646}#) 4)
                                        (eq? (vector-ref #{a 27646}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 27646}# 1))
                                  #f)))
                            #{tmp 27642}#)
                          #f)
                      (@apply
                        (lambda (#{a 27674}# #{b 27675}#)
                          (let ((#{tmp 27676}#
                                  (symbol->keyword
                                    (syntax->datum #{a 27674}#))))
                            (#{key 27351}#
                              #{b 27675}#
                              #{req 27632}#
                              #{opt 27633}#
                              (cons (cons #{tmp 27676}#
                                          (cons #{a 27674}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(k)
                                                       #((top))
                                                       #("i4408"))
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i4402" "i4403"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req opt rkey)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i4391"
                                                         "i4392"
                                                         "i4393"
                                                         "i4394"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i4281"
                                                        "i4279"
                                                        "i4277"
                                                        "i4275"
                                                        "i4273"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i4272"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2454"
                                                        "i2452"
                                                        "i2450"
                                                        "i2448"
                                                        "i2446"
                                                        "i2444"
                                                        "i2442"
                                                        "i2440"
                                                        "i2438"
                                                        "i2436"
                                                        "i2434"
                                                        "i2432"
                                                        "i2430"
                                                        "i2428"
                                                        "i2426"
                                                        "i2424"
                                                        "i2422"
                                                        "i2420"
                                                        "i2418"
                                                        "i2416"
                                                        "i2414"
                                                        "i2412"
                                                        "i2410"
                                                        "i2408"
                                                        "i2406"
                                                        "i2404"
                                                        "i2402"
                                                        "i2400"
                                                        "i2398"
                                                        "i2396"
                                                        "i2394"
                                                        "i2392"
                                                        "i2390"
                                                        "i2388"
                                                        "i2386"
                                                        "i2385"
                                                        "i2383"
                                                        "i2380"
                                                        "i2379"
                                                        "i2378"
                                                        "i2376"
                                                        "i2375"
                                                        "i2373"
                                                        "i2371"
                                                        "i2369"
                                                        "i2367"
                                                        "i2365"
                                                        "i2363"
                                                        "i2361"
                                                        "i2359"
                                                        "i2356"
                                                        "i2354"
                                                        "i2353"
                                                        "i2351"
                                                        "i2349"
                                                        "i2347"
                                                        "i2345"
                                                        "i2344"
                                                        "i2343"
                                                        "i2342"
                                                        "i2340"
                                                        "i2339"
                                                        "i2336"
                                                        "i2334"
                                                        "i2332"
                                                        "i2330"
                                                        "i2328"
                                                        "i2326"
                                                        "i2324"
                                                        "i2323"
                                                        "i2322"
                                                        "i2320"
                                                        "i2318"
                                                        "i2317"
                                                        "i2314"
                                                        "i2313"
                                                        "i2311"
                                                        "i2309"
                                                        "i2307"
                                                        "i2305"
                                                        "i2303"
                                                        "i2301"
                                                        "i2299"
                                                        "i2297"
                                                        "i2295"
                                                        "i2292"
                                                        "i2290"
                                                        "i2288"
                                                        "i2286"
                                                        "i2284"
                                                        "i2282"
                                                        "i2280"
                                                        "i2278"
                                                        "i2276"
                                                        "i2274"
                                                        "i2272"
                                                        "i2270"
                                                        "i2268"
                                                        "i2266"
                                                        "i2264"
                                                        "i2262"
                                                        "i2260"
                                                        "i2258"
                                                        "i2256"
                                                        "i2254"
                                                        "i2252"
                                                        "i2250"
                                                        "i2248"
                                                        "i2247"
                                                        "i2244"
                                                        "i2242"
                                                        "i2241"
                                                        "i2240"
                                                        "i2239"
                                                        "i2238"
                                                        "i2236"
                                                        "i2234"
                                                        "i2232"
                                                        "i2229"
                                                        "i2227"
                                                        "i2225"
                                                        "i2223"
                                                        "i2221"
                                                        "i2219"
                                                        "i2217"
                                                        "i2215"
                                                        "i2213"
                                                        "i2211"
                                                        "i2209"
                                                        "i2207"
                                                        "i2205"
                                                        "i2203"
                                                        "i2201"
                                                        "i2199"
                                                        "i2197"
                                                        "i2195"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i2033"
                                                        "i2032"
                                                        "i2031")))
                                                    (hygiene guile)))))
                                    #{rkey 27634}#))))
                        #{tmp 27642}#)
                      (let ((#{tmp 27679}#
                              ($sc-dispatch
                                #{args 27631}#
                                '((any any) . any))))
                        (if (if #{tmp 27679}#
                              (@apply
                                (lambda (#{a 27683}#
                                         #{init 27684}#
                                         #{b 27685}#)
                                  (if (symbol? #{a 27683}#)
                                    #t
                                    (if (if (vector? #{a 27683}#)
                                          (if (= (vector-length #{a 27683}#) 4)
                                            (eq? (vector-ref #{a 27683}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 27683}# 1))
                                      #f)))
                                #{tmp 27679}#)
                              #f)
                          (@apply
                            (lambda (#{a 27712}# #{init 27713}# #{b 27714}#)
                              (let ((#{tmp 27715}#
                                      (symbol->keyword
                                        (syntax->datum #{a 27712}#))))
                                (#{key 27351}#
                                  #{b 27714}#
                                  #{req 27632}#
                                  #{opt 27633}#
                                  (cons (list #{tmp 27715}#
                                              #{a 27712}#
                                              #{init 27713}#)
                                        #{rkey 27634}#))))
                            #{tmp 27679}#)
                          (let ((#{tmp 27718}#
                                  ($sc-dispatch
                                    #{args 27631}#
                                    '((any any any) . any))))
                            (if (if #{tmp 27718}#
                                  (@apply
                                    (lambda (#{a 27722}#
                                             #{init 27723}#
                                             #{k 27724}#
                                             #{b 27725}#)
                                      (if (if (symbol? #{a 27722}#)
                                            #t
                                            (if (if (vector? #{a 27722}#)
                                                  (if (= (vector-length
                                                           #{a 27722}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{a 27722}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{a 27722}# 1))
                                              #f))
                                        (keyword? (syntax->datum #{k 27724}#))
                                        #f))
                                    #{tmp 27718}#)
                                  #f)
                              (@apply
                                (lambda (#{a 27752}#
                                         #{init 27753}#
                                         #{k 27754}#
                                         #{b 27755}#)
                                  (#{key 27351}#
                                    #{b 27755}#
                                    #{req 27632}#
                                    #{opt 27633}#
                                    (cons (list #{k 27754}#
                                                #{a 27752}#
                                                #{init 27753}#)
                                          #{rkey 27634}#)))
                                #{tmp 27718}#)
                              (let ((#{tmp 27756}#
                                      ($sc-dispatch #{args 27631}# '(any))))
                                (if (if #{tmp 27756}#
                                      (@apply
                                        (lambda (#{aok 27760}#)
                                          (eq? (syntax->datum #{aok 27760}#)
                                               #:allow-other-keys))
                                        #{tmp 27756}#)
                                      #f)
                                  (@apply
                                    (lambda (#{aok 27761}#)
                                      (#{check 27353}#
                                        #{req 27632}#
                                        #{opt 27633}#
                                        #f
                                        (cons #t (reverse #{rkey 27634}#))))
                                    #{tmp 27756}#)
                                  (let ((#{tmp 27764}#
                                          ($sc-dispatch
                                            #{args 27631}#
                                            '(any any any))))
                                    (if (if #{tmp 27764}#
                                          (@apply
                                            (lambda (#{aok 27768}#
                                                     #{a 27769}#
                                                     #{b 27770}#)
                                              (if (eq? (syntax->datum
                                                         #{aok 27768}#)
                                                       #:allow-other-keys)
                                                (eq? (syntax->datum
                                                       #{a 27769}#)
                                                     #:rest)
                                                #f))
                                            #{tmp 27764}#)
                                          #f)
                                      (@apply
                                        (lambda (#{aok 27771}#
                                                 #{a 27772}#
                                                 #{b 27773}#)
                                          (#{rest 27352}#
                                            #{b 27773}#
                                            #{req 27632}#
                                            #{opt 27633}#
                                            (cons #t
                                                  (reverse #{rkey 27634}#))))
                                        #{tmp 27764}#)
                                      (let ((#{tmp 27776}#
                                              ($sc-dispatch
                                                #{args 27631}#
                                                '(any . any))))
                                        (if (if #{tmp 27776}#
                                              (@apply
                                                (lambda (#{aok 27780}#
                                                         #{r 27781}#)
                                                  (if (eq? (syntax->datum
                                                             #{aok 27780}#)
                                                           #:allow-other-keys)
                                                    (if (symbol? #{r 27781}#)
                                                      #t
                                                      (if (if (vector?
                                                                #{r 27781}#)
                                                            (if (= (vector-length
                                                                     #{r 27781}#)
                                                                   4)
                                                              (eq? (vector-ref
                                                                     #{r 27781}#
                                                                     0)
                                                                   'syntax-object)
                                                              #f)
                                                            #f)
                                                        (symbol?
                                                          (vector-ref
                                                            #{r 27781}#
                                                            1))
                                                        #f))
                                                    #f))
                                                #{tmp 27776}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok 27808}# #{r 27809}#)
                                              (#{rest 27352}#
                                                #{r 27809}#
                                                #{req 27632}#
                                                #{opt 27633}#
                                                (cons #t
                                                      (reverse
                                                        #{rkey 27634}#))))
                                            #{tmp 27776}#)
                                          (let ((#{tmp 27812}#
                                                  ($sc-dispatch
                                                    #{args 27631}#
                                                    '(any any))))
                                            (if (if #{tmp 27812}#
                                                  (@apply
                                                    (lambda (#{a 27816}#
                                                             #{b 27817}#)
                                                      (eq? (syntax->datum
                                                             #{a 27816}#)
                                                           #:rest))
                                                    #{tmp 27812}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{a 27818}#
                                                         #{b 27819}#)
                                                  (#{rest 27352}#
                                                    #{b 27819}#
                                                    #{req 27632}#
                                                    #{opt 27633}#
                                                    (cons #f
                                                          (reverse
                                                            #{rkey 27634}#))))
                                                #{tmp 27812}#)
                                              (let ((#{tmp 27822}#
                                                      (list #{args 27631}#)))
                                                (if (@apply
                                                      (lambda (#{r 27824}#)
                                                        (if (symbol?
                                                              #{r 27824}#)
                                                          #t
                                                          (if (if (vector?
                                                                    #{r 27824}#)
                                                                (if (= (vector-length
                                                                         #{r 27824}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{r 27824}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (symbol?
                                                              (vector-ref
                                                                #{r 27824}#
                                                                1))
                                                            #f)))
                                                      #{tmp 27822}#)
                                                  (@apply
                                                    (lambda (#{r 27854}#)
                                                      (#{rest 27352}#
                                                        #{r 27854}#
                                                        #{req 27632}#
                                                        #{opt 27633}#
                                                        (cons #f
                                                              (reverse
                                                                #{rkey 27634}#))))
                                                    #{tmp 27822}#)
                                                  (syntax-violation
                                                    'lambda*
                                                    "invalid keyword argument list"
                                                    #{orig-args 27348}#
                                                    #{args 27631}#)))))))))))))))))))))
          (#{rest 27352}#
            (lambda (#{args 27882}#
                     #{req 27883}#
                     #{opt 27884}#
                     #{kw 27885}#)
              (let ((#{tmp 27887}# (list #{args 27882}#)))
                (if (@apply
                      (lambda (#{r 27889}#)
                        (if (symbol? #{r 27889}#)
                          #t
                          (if (if (vector? #{r 27889}#)
                                (if (= (vector-length #{r 27889}#) 4)
                                  (eq? (vector-ref #{r 27889}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{r 27889}# 1))
                            #f)))
                      #{tmp 27887}#)
                  (@apply
                    (lambda (#{r 27919}#)
                      (#{check 27353}#
                        #{req 27883}#
                        #{opt 27884}#
                        #{r 27919}#
                        #{kw 27885}#))
                    #{tmp 27887}#)
                  (syntax-violation
                    'lambda*
                    "invalid rest argument"
                    #{orig-args 27348}#
                    #{args 27882}#)))))
          (#{check 27353}#
            (lambda (#{req 27923}#
                     #{opt 27924}#
                     #{rest 27925}#
                     #{kw 27926}#)
              (if (#{distinct-bound-ids? 6312}#
                    (append
                      #{req 27923}#
                      (map car #{opt 27924}#)
                      (if #{rest 27925}# (list #{rest 27925}#) '())
                      (if (pair? #{kw 27926}#)
                        (map cadr (cdr #{kw 27926}#))
                        '())))
                (values
                  #{req 27923}#
                  #{opt 27924}#
                  #{rest 27925}#
                  #{kw 27926}#)
                (syntax-violation
                  'lambda*
                  "duplicate identifier in argument list"
                  #{orig-args 27348}#)))))
         (#{req 27349}# #{orig-args 27348}# '()))))
   (#{expand-lambda-case 6333}#
     (lambda (#{e 28042}#
              #{r 28043}#
              #{w 28044}#
              #{s 28045}#
              #{mod 28046}#
              #{get-formals 28047}#
              #{clauses 28048}#)
       (letrec*
         ((#{parse-req 28049}#
            (lambda (#{req 28182}#
                     #{opt 28183}#
                     #{rest 28184}#
                     #{kw 28185}#
                     #{body 28186}#)
              (let ((#{vars 28187}#
                      (map #{gen-var 6335}# #{req 28182}#))
                    (#{labels 28188}#
                      (#{gen-labels 6292}# #{req 28182}#)))
                (let ((#{r* 28189}#
                        (#{extend-var-env 6284}#
                          #{labels 28188}#
                          #{vars 28187}#
                          #{r 28043}#))
                      (#{w* 28190}#
                        (#{make-binding-wrap 6303}#
                          #{req 28182}#
                          #{labels 28188}#
                          #{w 28044}#)))
                  (#{parse-opt 28050}#
                    (map syntax->datum #{req 28182}#)
                    #{opt 28183}#
                    #{rest 28184}#
                    #{kw 28185}#
                    #{body 28186}#
                    (reverse #{vars 28187}#)
                    #{r* 28189}#
                    #{w* 28190}#
                    '()
                    '())))))
          (#{parse-opt 28050}#
            (lambda (#{req 28404}#
                     #{opt 28405}#
                     #{rest 28406}#
                     #{kw 28407}#
                     #{body 28408}#
                     #{vars 28409}#
                     #{r* 28410}#
                     #{w* 28411}#
                     #{out 28412}#
                     #{inits 28413}#)
              (if (pair? #{opt 28405}#)
                (let ((#{tmp 28414}# (car #{opt 28405}#)))
                  (let ((#{tmp 28415}#
                          ($sc-dispatch #{tmp 28414}# '(any any))))
                    (if #{tmp 28415}#
                      (@apply
                        (lambda (#{id 28417}# #{i 28418}#)
                          (let ((#{v 28419}#
                                  (let ((#{id 28427}#
                                          (if (if (vector? #{id 28417}#)
                                                (if (= (vector-length
                                                         #{id 28417}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 28417}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 28417}# 1)
                                            #{id 28417}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 28427}#)
                                        " ")))))
                            (let ((#{l 28420}#
                                    (#{gen-labels 6292}# (list #{v 28419}#))))
                              (let ((#{r** 28421}#
                                      (#{extend-var-env 6284}#
                                        #{l 28420}#
                                        (list #{v 28419}#)
                                        #{r* 28410}#)))
                                (let ((#{w** 28422}#
                                        (#{make-binding-wrap 6303}#
                                          (list #{id 28417}#)
                                          #{l 28420}#
                                          #{w* 28411}#)))
                                  (#{parse-opt 28050}#
                                    #{req 28404}#
                                    (cdr #{opt 28405}#)
                                    #{rest 28406}#
                                    #{kw 28407}#
                                    #{body 28408}#
                                    (cons #{v 28419}# #{vars 28409}#)
                                    #{r** 28421}#
                                    #{w** 28422}#
                                    (cons (syntax->datum #{id 28417}#)
                                          #{out 28412}#)
                                    (cons (#{expand 6321}#
                                            #{i 28418}#
                                            #{r* 28410}#
                                            #{w* 28411}#
                                            #{mod 28046}#)
                                          #{inits 28413}#)))))))
                        #{tmp 28415}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 28414}#))))
                (if #{rest 28406}#
                  (let ((#{v 28692}#
                          (let ((#{id 28702}#
                                  (if (if (vector? #{rest 28406}#)
                                        (if (= (vector-length #{rest 28406}#)
                                               4)
                                          (eq? (vector-ref #{rest 28406}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{rest 28406}# 1)
                                    #{rest 28406}#)))
                            (gensym
                              (string-append
                                (symbol->string #{id 28702}#)
                                " ")))))
                    (let ((#{l 28693}#
                            (#{gen-labels 6292}# (list #{v 28692}#))))
                      (let ((#{r* 28694}#
                              (#{extend-var-env 6284}#
                                #{l 28693}#
                                (list #{v 28692}#)
                                #{r* 28410}#)))
                        (let ((#{w* 28695}#
                                (#{make-binding-wrap 6303}#
                                  (list #{rest 28406}#)
                                  #{l 28693}#
                                  #{w* 28411}#)))
                          (#{parse-kw 28051}#
                            #{req 28404}#
                            (if (pair? #{out 28412}#)
                              (reverse #{out 28412}#)
                              #f)
                            (syntax->datum #{rest 28406}#)
                            (if (pair? #{kw 28407}#)
                              (cdr #{kw 28407}#)
                              #{kw 28407}#)
                            #{body 28408}#
                            (cons #{v 28692}# #{vars 28409}#)
                            #{r* 28694}#
                            #{w* 28695}#
                            (if (pair? #{kw 28407}#) (car #{kw 28407}#) #f)
                            '()
                            #{inits 28413}#)))))
                  (#{parse-kw 28051}#
                    #{req 28404}#
                    (if (pair? #{out 28412}#)
                      (reverse #{out 28412}#)
                      #f)
                    #f
                    (if (pair? #{kw 28407}#)
                      (cdr #{kw 28407}#)
                      #{kw 28407}#)
                    #{body 28408}#
                    #{vars 28409}#
                    #{r* 28410}#
                    #{w* 28411}#
                    (if (pair? #{kw 28407}#) (car #{kw 28407}#) #f)
                    '()
                    #{inits 28413}#)))))
          (#{parse-kw 28051}#
            (lambda (#{req 28900}#
                     #{opt 28901}#
                     #{rest 28902}#
                     #{kw 28903}#
                     #{body 28904}#
                     #{vars 28905}#
                     #{r* 28906}#
                     #{w* 28907}#
                     #{aok 28908}#
                     #{out 28909}#
                     #{inits 28910}#)
              (if (pair? #{kw 28903}#)
                (let ((#{tmp 28911}# (car #{kw 28903}#)))
                  (let ((#{tmp 28912}#
                          ($sc-dispatch #{tmp 28911}# '(any any any))))
                    (if #{tmp 28912}#
                      (@apply
                        (lambda (#{k 28914}# #{id 28915}# #{i 28916}#)
                          (let ((#{v 28917}#
                                  (let ((#{id 28925}#
                                          (if (if (vector? #{id 28915}#)
                                                (if (= (vector-length
                                                         #{id 28915}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 28915}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 28915}# 1)
                                            #{id 28915}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 28925}#)
                                        " ")))))
                            (let ((#{l 28918}#
                                    (#{gen-labels 6292}# (list #{v 28917}#))))
                              (let ((#{r** 28919}#
                                      (#{extend-var-env 6284}#
                                        #{l 28918}#
                                        (list #{v 28917}#)
                                        #{r* 28906}#)))
                                (let ((#{w** 28920}#
                                        (#{make-binding-wrap 6303}#
                                          (list #{id 28915}#)
                                          #{l 28918}#
                                          #{w* 28907}#)))
                                  (#{parse-kw 28051}#
                                    #{req 28900}#
                                    #{opt 28901}#
                                    #{rest 28902}#
                                    (cdr #{kw 28903}#)
                                    #{body 28904}#
                                    (cons #{v 28917}# #{vars 28905}#)
                                    #{r** 28919}#
                                    #{w** 28920}#
                                    #{aok 28908}#
                                    (cons (list (syntax->datum #{k 28914}#)
                                                (syntax->datum #{id 28915}#)
                                                #{v 28917}#)
                                          #{out 28909}#)
                                    (cons (#{expand 6321}#
                                            #{i 28916}#
                                            #{r* 28906}#
                                            #{w* 28907}#
                                            #{mod 28046}#)
                                          #{inits 28910}#)))))))
                        #{tmp 28912}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 28911}#))))
                (#{parse-body 28052}#
                  #{req 28900}#
                  #{opt 28901}#
                  #{rest 28902}#
                  (if (if #{aok 28908}#
                        #{aok 28908}#
                        (pair? #{out 28909}#))
                    (cons #{aok 28908}# (reverse #{out 28909}#))
                    #f)
                  #{body 28904}#
                  (reverse #{vars 28905}#)
                  #{r* 28906}#
                  #{w* 28907}#
                  (reverse #{inits 28910}#)
                  '()))))
          (#{parse-body 28052}#
            (lambda (#{req 29199}#
                     #{opt 29200}#
                     #{rest 29201}#
                     #{kw 29202}#
                     #{body 29203}#
                     #{vars 29204}#
                     #{r* 29205}#
                     #{w* 29206}#
                     #{inits 29207}#
                     #{meta 29208}#)
              (let ((#{tmp 29210}#
                      ($sc-dispatch
                        #{body 29203}#
                        '(any any . each-any))))
                (if (if #{tmp 29210}#
                      (@apply
                        (lambda (#{docstring 29214}# #{e1 29215}# #{e2 29216}#)
                          (string? (syntax->datum #{docstring 29214}#)))
                        #{tmp 29210}#)
                      #f)
                  (@apply
                    (lambda (#{docstring 29217}# #{e1 29218}# #{e2 29219}#)
                      (#{parse-body 28052}#
                        #{req 29199}#
                        #{opt 29200}#
                        #{rest 29201}#
                        #{kw 29202}#
                        (cons #{e1 29218}# #{e2 29219}#)
                        #{vars 29204}#
                        #{r* 29205}#
                        #{w* 29206}#
                        #{inits 29207}#
                        (append
                          #{meta 29208}#
                          (list (cons 'documentation
                                      (syntax->datum #{docstring 29217}#))))))
                    #{tmp 29210}#)
                  (let ((#{tmp 29220}#
                          ($sc-dispatch
                            #{body 29203}#
                            '(#(vector #(each (any . any))) any . each-any))))
                    (if #{tmp 29220}#
                      (@apply
                        (lambda (#{k 29224}#
                                 #{v 29225}#
                                 #{e1 29226}#
                                 #{e2 29227}#)
                          (#{parse-body 28052}#
                            #{req 29199}#
                            #{opt 29200}#
                            #{rest 29201}#
                            #{kw 29202}#
                            (cons #{e1 29226}# #{e2 29227}#)
                            #{vars 29204}#
                            #{r* 29205}#
                            #{w* 29206}#
                            #{inits 29207}#
                            (append
                              #{meta 29208}#
                              (syntax->datum
                                (map cons #{k 29224}# #{v 29225}#)))))
                        #{tmp 29220}#)
                      (let ((#{tmp 29228}#
                              ($sc-dispatch #{body 29203}# '(any . each-any))))
                        (if #{tmp 29228}#
                          (@apply
                            (lambda (#{e1 29232}# #{e2 29233}#)
                              (values
                                #{meta 29208}#
                                #{req 29199}#
                                #{opt 29200}#
                                #{rest 29201}#
                                #{kw 29202}#
                                #{inits 29207}#
                                #{vars 29204}#
                                (#{expand-body 6325}#
                                  (cons #{e1 29232}# #{e2 29233}#)
                                  (#{wrap 6314}#
                                    (begin
                                      (if (if (pair? #{e 28042}#)
                                            #{s 28045}#
                                            #f)
                                        (set-source-properties!
                                          #{e 28042}#
                                          #{s 28045}#))
                                      #{e 28042}#)
                                    #{w 28044}#
                                    #{mod 28046}#)
                                  #{r* 29205}#
                                  #{w* 29206}#
                                  #{mod 28046}#)))
                            #{tmp 29228}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{body 29203}#))))))))))
         (let ((#{tmp 28054}#
                 ($sc-dispatch #{clauses 28048}# '())))
           (if #{tmp 28054}#
             (@apply
               (lambda () (values '() #f))
               #{tmp 28054}#)
             (let ((#{tmp 28058}#
                     ($sc-dispatch
                       #{clauses 28048}#
                       '((any any . each-any)
                         .
                         #(each (any any . each-any))))))
               (if #{tmp 28058}#
                 (@apply
                   (lambda (#{args 28062}#
                            #{e1 28063}#
                            #{e2 28064}#
                            #{args* 28065}#
                            #{e1* 28066}#
                            #{e2* 28067}#)
                     (call-with-values
                       (lambda ()
                         (#{get-formals 28047}# #{args 28062}#))
                       (lambda (#{req 28068}#
                                #{opt 28069}#
                                #{rest 28070}#
                                #{kw 28071}#)
                         (call-with-values
                           (lambda ()
                             (#{parse-req 28049}#
                               #{req 28068}#
                               #{opt 28069}#
                               #{rest 28070}#
                               #{kw 28071}#
                               (cons #{e1 28063}# #{e2 28064}#)))
                           (lambda (#{meta 28138}#
                                    #{req 28139}#
                                    #{opt 28140}#
                                    #{rest 28141}#
                                    #{kw 28142}#
                                    #{inits 28143}#
                                    #{vars 28144}#
                                    #{body 28145}#)
                             (call-with-values
                               (lambda ()
                                 (#{expand-lambda-case 6333}#
                                   #{e 28042}#
                                   #{r 28043}#
                                   #{w 28044}#
                                   #{s 28045}#
                                   #{mod 28046}#
                                   #{get-formals 28047}#
                                   (map (lambda (#{tmp 4751 28146}#
                                                 #{tmp 4750 28147}#
                                                 #{tmp 4749 28148}#)
                                          (cons #{tmp 4749 28148}#
                                                (cons #{tmp 4750 28147}#
                                                      #{tmp 4751 28146}#)))
                                        #{e2* 28067}#
                                        #{e1* 28066}#
                                        #{args* 28065}#)))
                               (lambda (#{meta* 28149}# #{else* 28150}#)
                                 (values
                                   (append #{meta 28138}# #{meta* 28149}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #{s 28045}#
                                     #{req 28139}#
                                     #{opt 28140}#
                                     #{rest 28141}#
                                     #{kw 28142}#
                                     #{inits 28143}#
                                     #{vars 28144}#
                                     #{body 28145}#
                                     #{else* 28150}#)))))))))
                   #{tmp 28058}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{clauses 28048}#))))))))
   (#{strip 6334}#
     (lambda (#{x 29270}# #{w 29271}#)
       (if (memq 'top (car #{w 29271}#))
         #{x 29270}#
         (letrec*
           ((#{f 29272}#
              (lambda (#{x 29275}#)
                (if (if (vector? #{x 29275}#)
                      (if (= (vector-length #{x 29275}#) 4)
                        (eq? (vector-ref #{x 29275}# 0) 'syntax-object)
                        #f)
                      #f)
                  (#{strip 6334}#
                    (vector-ref #{x 29275}# 1)
                    (vector-ref #{x 29275}# 2))
                  (if (pair? #{x 29275}#)
                    (let ((#{a 29294}# (#{f 29272}# (car #{x 29275}#)))
                          (#{d 29295}# (#{f 29272}# (cdr #{x 29275}#))))
                      (if (if (eq? #{a 29294}# (car #{x 29275}#))
                            (eq? #{d 29295}# (cdr #{x 29275}#))
                            #f)
                        #{x 29275}#
                        (cons #{a 29294}# #{d 29295}#)))
                    (if (vector? #{x 29275}#)
                      (let ((#{old 29298}# (vector->list #{x 29275}#)))
                        (let ((#{new 29299}# (map #{f 29272}# #{old 29298}#)))
                          (letrec*
                            ((#{lp 29300}#
                               (lambda (#{l1 29376}# #{l2 29377}#)
                                 (if (null? #{l1 29376}#)
                                   #{x 29275}#
                                   (if (eq? (car #{l1 29376}#)
                                            (car #{l2 29377}#))
                                     (#{lp 29300}#
                                       (cdr #{l1 29376}#)
                                       (cdr #{l2 29377}#))
                                     (list->vector #{new 29299}#))))))
                            (#{lp 29300}# #{old 29298}# #{new 29299}#))))
                      #{x 29275}#))))))
           (#{f 29272}# #{x 29270}#)))))
   (#{gen-var 6335}#
     (lambda (#{id 28194}#)
       (let ((#{id 28195}#
               (if (if (vector? #{id 28194}#)
                     (if (= (vector-length #{id 28194}#) 4)
                       (eq? (vector-ref #{id 28194}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{id 28194}# 1)
                 #{id 28194}#)))
         (gensym
           (string-append (symbol->string #{id 28195}#) " "))))))
  (begin
    (module-define!
      (current-module)
      'letrec-syntax
      (make-syntax-transformer
        'letrec-syntax
        'local-syntax
        #t))
    (module-define!
      (current-module)
      'let-syntax
      (make-syntax-transformer
        'let-syntax
        'local-syntax
        #f))
    (#{global-extend 6287}#
      'core
      'fluid-let-syntax
      (lambda (#{e 6456}#
               #{r 6457}#
               #{w 6458}#
               #{s 6459}#
               #{mod 6460}#)
        (let ((#{tmp 6462}#
                ($sc-dispatch
                  #{e 6456}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 6462}#
                (@apply
                  (lambda (#{var 6466}#
                           #{val 6467}#
                           #{e1 6468}#
                           #{e2 6469}#)
                    (#{valid-bound-ids? 6311}# #{var 6466}#))
                  #{tmp 6462}#)
                #f)
            (@apply
              (lambda (#{var 6547}#
                       #{val 6548}#
                       #{e1 6549}#
                       #{e2 6550}#)
                (let ((#{names 6551}#
                        (map (lambda (#{x 6741}#)
                               (#{id-var-name 6308}# #{x 6741}# #{w 6458}#))
                             #{var 6547}#)))
                  (begin
                    (for-each
                      (lambda (#{id 6552}# #{n 6553}#)
                        (let ((#{atom-key 6554}#
                                (car (let ((#{t 6678}#
                                             (assq #{n 6553}# #{r 6457}#)))
                                       (if #{t 6678}#
                                         (cdr #{t 6678}#)
                                         (if (symbol? #{n 6553}#)
                                           (let ((#{t 6683}#
                                                   (begin
                                                     (if (if (not #{mod 6460}#)
                                                           (current-module)
                                                           #f)
                                                       (warn "module system is booted, we should have a module"
                                                             #{n 6553}#))
                                                     (let ((#{v 6720}#
                                                             (module-variable
                                                               (if #{mod 6460}#
                                                                 (resolve-module
                                                                   (cdr #{mod 6460}#))
                                                                 (current-module))
                                                               #{n 6553}#)))
                                                       (if #{v 6720}#
                                                         (if (variable-bound?
                                                               #{v 6720}#)
                                                           (let ((#{val 6729}#
                                                                   (variable-ref
                                                                     #{v 6720}#)))
                                                             (if (macro?
                                                                   #{val 6729}#)
                                                               (if (macro-type
                                                                     #{val 6729}#)
                                                                 (cons (macro-type
                                                                         #{val 6729}#)
                                                                       (macro-binding
                                                                         #{val 6729}#))
                                                                 #f)
                                                               #f))
                                                           #f)
                                                         #f)))))
                                             (if #{t 6683}#
                                               #{t 6683}#
                                               '(global)))
                                           '(displaced-lexical)))))))
                          (if (let ((#{t 6587}# #{atom-key 6554}#))
                                (eqv? #{t 6587}# 'displaced-lexical))
                            (syntax-violation
                              'fluid-let-syntax
                              "identifier out of context"
                              #{e 6456}#
                              (#{wrap 6314}#
                                (begin
                                  (if (if (pair? #{id 6552}#) #{s 6459}# #f)
                                    (set-source-properties!
                                      #{id 6552}#
                                      #{s 6459}#))
                                  #{id 6552}#)
                                #{w 6458}#
                                #{mod 6460}#)))))
                      #{var 6547}#
                      #{names 6551}#)
                    (#{expand-body 6325}#
                      (cons #{e1 6549}# #{e2 6550}#)
                      (#{wrap 6314}#
                        (begin
                          (if (if (pair? #{e 6456}#) #{s 6459}# #f)
                            (set-source-properties! #{e 6456}# #{s 6459}#))
                          #{e 6456}#)
                        #{w 6458}#
                        #{mod 6460}#)
                      (#{extend-env 6283}#
                        #{names 6551}#
                        (let ((#{trans-r 6827}#
                                (#{macros-only-env 6285}# #{r 6457}#)))
                          (map (lambda (#{x 6828}#)
                                 (cons 'macro
                                       (#{eval-local-transformer 6327}#
                                         (#{expand 6321}#
                                           #{x 6828}#
                                           #{trans-r 6827}#
                                           #{w 6458}#
                                           #{mod 6460}#)
                                         #{mod 6460}#)))
                               #{val 6548}#))
                        #{r 6457}#)
                      #{w 6458}#
                      #{mod 6460}#))))
              #{tmp 6462}#)
            (syntax-violation
              'fluid-let-syntax
              "bad syntax"
              (#{wrap 6314}#
                (begin
                  (if (if (pair? #{e 6456}#) #{s 6459}# #f)
                    (set-source-properties! #{e 6456}# #{s 6459}#))
                  #{e 6456}#)
                #{w 6458}#
                #{mod 6460}#))))))
    (module-define!
      (current-module)
      'quote
      (make-syntax-transformer
        'quote
        'core
        (lambda (#{e 7037}#
                 #{r 7038}#
                 #{w 7039}#
                 #{s 7040}#
                 #{mod 7041}#)
          (let ((#{tmp 7043}# ($sc-dispatch #{e 7037}# '(_ any))))
            (if #{tmp 7043}#
              (@apply
                (lambda (#{e 7046}#)
                  (let ((#{exp 7050}#
                          (#{strip 6334}# #{e 7046}# #{w 7039}#)))
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 1)
                      #{s 7040}#
                      #{exp 7050}#)))
                #{tmp 7043}#)
              (syntax-violation
                'quote
                "bad syntax"
                (#{wrap 6314}#
                  (begin
                    (if (if (pair? #{e 7037}#) #{s 7040}# #f)
                      (set-source-properties! #{e 7037}# #{s 7040}#))
                    #{e 7037}#)
                  #{w 7039}#
                  #{mod 7041}#)))))))
    (#{global-extend 6287}#
      'core
      'syntax
      (letrec*
        ((#{gen-syntax 7277}#
           (lambda (#{src 7379}#
                    #{e 7380}#
                    #{r 7381}#
                    #{maps 7382}#
                    #{ellipsis? 7383}#
                    #{mod 7384}#)
             (if (if (symbol? #{e 7380}#)
                   #t
                   (if (if (vector? #{e 7380}#)
                         (if (= (vector-length #{e 7380}#) 4)
                           (eq? (vector-ref #{e 7380}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{e 7380}# 1))
                     #f))
               (let ((#{label 7411}#
                       (#{id-var-name 6308}# #{e 7380}# '(()))))
                 (let ((#{b 7412}#
                         (let ((#{t 7549}# (assq #{label 7411}# #{r 7381}#)))
                           (if #{t 7549}#
                             (cdr #{t 7549}#)
                             (if (symbol? #{label 7411}#)
                               (let ((#{t 7554}#
                                       (begin
                                         (if (if (not #{mod 7384}#)
                                               (current-module)
                                               #f)
                                           (warn "module system is booted, we should have a module"
                                                 #{label 7411}#))
                                         (let ((#{v 7591}#
                                                 (module-variable
                                                   (if #{mod 7384}#
                                                     (resolve-module
                                                       (cdr #{mod 7384}#))
                                                     (current-module))
                                                   #{label 7411}#)))
                                           (if #{v 7591}#
                                             (if (variable-bound? #{v 7591}#)
                                               (let ((#{val 7600}#
                                                       (variable-ref
                                                         #{v 7591}#)))
                                                 (if (macro? #{val 7600}#)
                                                   (if (macro-type
                                                         #{val 7600}#)
                                                     (cons (macro-type
                                                             #{val 7600}#)
                                                           (macro-binding
                                                             #{val 7600}#))
                                                     #f)
                                                   #f))
                                               #f)
                                             #f)))))
                                 (if #{t 7554}# #{t 7554}# '(global)))
                               '(displaced-lexical))))))
                   (if (eq? (car #{b 7412}#) 'syntax)
                     (call-with-values
                       (lambda ()
                         (let ((#{var.lev 7445}# (cdr #{b 7412}#)))
                           (#{gen-ref 7278}#
                             #{src 7379}#
                             (car #{var.lev 7445}#)
                             (cdr #{var.lev 7445}#)
                             #{maps 7382}#)))
                       (lambda (#{var 7541}# #{maps 7542}#)
                         (values (list 'ref #{var 7541}#) #{maps 7542}#)))
                     (if (#{ellipsis? 7383}# #{e 7380}#)
                       (syntax-violation
                         'syntax
                         "misplaced ellipsis"
                         #{src 7379}#)
                       (values (list 'quote #{e 7380}#) #{maps 7382}#)))))
               (let ((#{tmp 7612}#
                       ($sc-dispatch #{e 7380}# '(any any))))
                 (if (if #{tmp 7612}#
                       (@apply
                         (lambda (#{dots 7616}# #{e 7617}#)
                           (#{ellipsis? 7383}# #{dots 7616}#))
                         #{tmp 7612}#)
                       #f)
                   (@apply
                     (lambda (#{dots 7618}# #{e 7619}#)
                       (#{gen-syntax 7277}#
                         #{src 7379}#
                         #{e 7619}#
                         #{r 7381}#
                         #{maps 7382}#
                         (lambda (#{x 7620}#) #f)
                         #{mod 7384}#))
                     #{tmp 7612}#)
                   (let ((#{tmp 7621}#
                           ($sc-dispatch #{e 7380}# '(any any . any))))
                     (if (if #{tmp 7621}#
                           (@apply
                             (lambda (#{x 7625}# #{dots 7626}# #{y 7627}#)
                               (#{ellipsis? 7383}# #{dots 7626}#))
                             #{tmp 7621}#)
                           #f)
                       (@apply
                         (lambda (#{x 7628}# #{dots 7629}# #{y 7630}#)
                           (letrec*
                             ((#{f 7631}#
                                (lambda (#{y 7639}# #{k 7640}#)
                                  (let ((#{tmp 7642}#
                                          ($sc-dispatch
                                            #{y 7639}#
                                            '(any . any))))
                                    (if (if #{tmp 7642}#
                                          (@apply
                                            (lambda (#{dots 7646}# #{y 7647}#)
                                              (#{ellipsis? 7383}#
                                                #{dots 7646}#))
                                            #{tmp 7642}#)
                                          #f)
                                      (@apply
                                        (lambda (#{dots 7648}# #{y 7649}#)
                                          (#{f 7631}#
                                            #{y 7649}#
                                            (lambda (#{maps 7650}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{k 7640}#
                                                    (cons '() #{maps 7650}#)))
                                                (lambda (#{x 7651}#
                                                         #{maps 7652}#)
                                                  (if (null? (car #{maps 7652}#))
                                                    (syntax-violation
                                                      'syntax
                                                      "extra ellipsis"
                                                      #{src 7379}#)
                                                    (values
                                                      (let ((#{map-env 7656}#
                                                              (car #{maps 7652}#)))
                                                        (list 'apply
                                                              '(primitive
                                                                 append)
                                                              (#{gen-map 7280}#
                                                                #{x 7651}#
                                                                #{map-env 7656}#)))
                                                      (cdr #{maps 7652}#))))))))
                                        #{tmp 7642}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{gen-syntax 7277}#
                                            #{src 7379}#
                                            #{y 7639}#
                                            #{r 7381}#
                                            #{maps 7382}#
                                            #{ellipsis? 7383}#
                                            #{mod 7384}#))
                                        (lambda (#{y 7659}# #{maps 7660}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{k 7640}# #{maps 7660}#))
                                            (lambda (#{x 7661}# #{maps 7662}#)
                                              (values
                                                (if (equal? #{y 7659}# ''())
                                                  #{x 7661}#
                                                  (list 'append
                                                        #{x 7661}#
                                                        #{y 7659}#))
                                                #{maps 7662}#))))))))))
                             (#{f 7631}#
                               #{y 7630}#
                               (lambda (#{maps 7634}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 7277}#
                                       #{src 7379}#
                                       #{x 7628}#
                                       #{r 7381}#
                                       (cons '() #{maps 7634}#)
                                       #{ellipsis? 7383}#
                                       #{mod 7384}#))
                                   (lambda (#{x 7635}# #{maps 7636}#)
                                     (if (null? (car #{maps 7636}#))
                                       (syntax-violation
                                         'syntax
                                         "extra ellipsis"
                                         #{src 7379}#)
                                       (values
                                         (#{gen-map 7280}#
                                           #{x 7635}#
                                           (car #{maps 7636}#))
                                         (cdr #{maps 7636}#)))))))))
                         #{tmp 7621}#)
                       (let ((#{tmp 7678}#
                               ($sc-dispatch #{e 7380}# '(any . any))))
                         (if #{tmp 7678}#
                           (@apply
                             (lambda (#{x 7682}# #{y 7683}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax 7277}#
                                     #{src 7379}#
                                     #{x 7682}#
                                     #{r 7381}#
                                     #{maps 7382}#
                                     #{ellipsis? 7383}#
                                     #{mod 7384}#))
                                 (lambda (#{x 7684}# #{maps 7685}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 7277}#
                                         #{src 7379}#
                                         #{y 7683}#
                                         #{r 7381}#
                                         #{maps 7685}#
                                         #{ellipsis? 7383}#
                                         #{mod 7384}#))
                                     (lambda (#{y 7686}# #{maps 7687}#)
                                       (values
                                         (let ((#{atom-key 7692}#
                                                 (car #{y 7686}#)))
                                           (if (eqv? #{atom-key 7692}# 'quote)
                                             (if (eq? (car #{x 7684}#) 'quote)
                                               (list 'quote
                                                     (cons (car (cdr #{x 7684}#))
                                                           (car (cdr #{y 7686}#))))
                                               (if (eq? (car (cdr #{y 7686}#))
                                                        '())
                                                 (list 'list #{x 7684}#)
                                                 (list 'cons
                                                       #{x 7684}#
                                                       #{y 7686}#)))
                                             (if (eqv? #{atom-key 7692}# 'list)
                                               (cons 'list
                                                     (cons #{x 7684}#
                                                           (cdr #{y 7686}#)))
                                               (list 'cons
                                                     #{x 7684}#
                                                     #{y 7686}#))))
                                         #{maps 7687}#))))))
                             #{tmp 7678}#)
                           (let ((#{tmp 7721}#
                                   ($sc-dispatch
                                     #{e 7380}#
                                     '#(vector (any . each-any)))))
                             (if #{tmp 7721}#
                               (@apply
                                 (lambda (#{e1 7725}# #{e2 7726}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 7277}#
                                         #{src 7379}#
                                         (cons #{e1 7725}# #{e2 7726}#)
                                         #{r 7381}#
                                         #{maps 7382}#
                                         #{ellipsis? 7383}#
                                         #{mod 7384}#))
                                     (lambda (#{e 7727}# #{maps 7728}#)
                                       (values
                                         (if (eq? (car #{e 7727}#) 'list)
                                           (cons 'vector (cdr #{e 7727}#))
                                           (if (eq? (car #{e 7727}#) 'quote)
                                             (list 'quote
                                                   (list->vector
                                                     (car (cdr #{e 7727}#))))
                                             (list 'list->vector #{e 7727}#)))
                                         #{maps 7728}#))))
                                 #{tmp 7721}#)
                               (values
                                 (list 'quote #{e 7380}#)
                                 #{maps 7382}#))))))))))))
         (#{gen-ref 7278}#
           (lambda (#{src 7755}#
                    #{var 7756}#
                    #{level 7757}#
                    #{maps 7758}#)
             (if (= #{level 7757}# 0)
               (values #{var 7756}# #{maps 7758}#)
               (if (null? #{maps 7758}#)
                 (syntax-violation
                   'syntax
                   "missing ellipsis"
                   #{src 7755}#)
                 (call-with-values
                   (lambda ()
                     (#{gen-ref 7278}#
                       #{src 7755}#
                       #{var 7756}#
                       (#{1-}# #{level 7757}#)
                       (cdr #{maps 7758}#)))
                   (lambda (#{outer-var 7759}# #{outer-maps 7760}#)
                     (let ((#{b 7761}#
                             (assq #{outer-var 7759}# (car #{maps 7758}#))))
                       (if #{b 7761}#
                         (values (cdr #{b 7761}#) #{maps 7758}#)
                         (let ((#{inner-var 7763}#
                                 (gensym
                                   (string-append (symbol->string 'tmp) " "))))
                           (values
                             #{inner-var 7763}#
                             (cons (cons (cons #{outer-var 7759}#
                                               #{inner-var 7763}#)
                                         (car #{maps 7758}#))
                                   #{outer-maps 7760}#)))))))))))
         (#{gen-map 7280}#
           (lambda (#{e 7777}# #{map-env 7778}#)
             (let ((#{formals 7779}# (map cdr #{map-env 7778}#))
                   (#{actuals 7780}#
                     (map (lambda (#{x 7782}#)
                            (list 'ref (car #{x 7782}#)))
                          #{map-env 7778}#)))
               (if (eq? (car #{e 7777}#) 'ref)
                 (car #{actuals 7780}#)
                 (if (and-map
                       (lambda (#{x 7783}#)
                         (if (eq? (car #{x 7783}#) 'ref)
                           (memq (car (cdr #{x 7783}#)) #{formals 7779}#)
                           #f))
                       (cdr #{e 7777}#))
                   (cons 'map
                         (cons (list 'primitive (car #{e 7777}#))
                               (map (let ((#{r 7785}#
                                            (map cons
                                                 #{formals 7779}#
                                                 #{actuals 7780}#)))
                                      (lambda (#{x 7786}#)
                                        (cdr (assq (car (cdr #{x 7786}#))
                                                   #{r 7785}#))))
                                    (cdr #{e 7777}#))))
                   (cons 'map
                         (cons (list 'lambda #{formals 7779}# #{e 7777}#)
                               #{actuals 7780}#)))))))
         (#{regen 7284}#
           (lambda (#{x 7788}#)
             (let ((#{atom-key 7789}# (car #{x 7788}#)))
               (if (eqv? #{atom-key 7789}# 'ref)
                 (let ((#{name 7799}# (car (cdr #{x 7788}#)))
                       (#{var 7800}# (car (cdr #{x 7788}#))))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 3)
                     #f
                     #{name 7799}#
                     #{var 7800}#))
                 (if (eqv? #{atom-key 7789}# 'primitive)
                   (let ((#{name 7812}# (car (cdr #{x 7788}#))))
                     (if (equal? (module-name (current-module)) '(guile))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 7)
                         #f
                         #{name 7812}#)
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 5)
                         #f
                         '(guile)
                         #{name 7812}#
                         #f)))
                   (if (eqv? #{atom-key 7789}# 'quote)
                     (let ((#{exp 7830}# (car (cdr #{x 7788}#))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #f
                         #{exp 7830}#))
                     (if (eqv? #{atom-key 7789}# 'lambda)
                       (if (list? (car (cdr #{x 7788}#)))
                         (let ((#{req 7841}# (car (cdr #{x 7788}#)))
                               (#{vars 7843}# (car (cdr #{x 7788}#)))
                               (#{exp 7845}#
                                 (#{regen 7284}#
                                   (car (cdr (cdr #{x 7788}#))))))
                           (let ((#{body 7850}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     #{req 7841}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 7843}#
                                     #{exp 7845}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 13)
                               #f
                               '()
                               #{body 7850}#)))
                         (error "how did we get here" #{x 7788}#))
                       (let ((#{fun-exp 7866}#
                               (let ((#{name 7875}# (car #{x 7788}#)))
                                 (if (equal?
                                       (module-name (current-module))
                                       '(guile))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 7)
                                     #f
                                     #{name 7875}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 5)
                                     #f
                                     '(guile)
                                     #{name 7875}#
                                     #f))))
                             (#{arg-exps 7867}#
                               (map #{regen 7284}# (cdr #{x 7788}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #f
                           #{fun-exp 7866}#
                           #{arg-exps 7867}#))))))))))
        (lambda (#{e 7285}#
                 #{r 7286}#
                 #{w 7287}#
                 #{s 7288}#
                 #{mod 7289}#)
          (let ((#{e 7290}#
                  (#{wrap 6314}#
                    (begin
                      (if (if (pair? #{e 7285}#) #{s 7288}# #f)
                        (set-source-properties! #{e 7285}# #{s 7288}#))
                      #{e 7285}#)
                    #{w 7287}#
                    #{mod 7289}#)))
            (let ((#{tmp 7292}# ($sc-dispatch #{e 7290}# '(_ any))))
              (if #{tmp 7292}#
                (@apply
                  (lambda (#{x 7317}#)
                    (call-with-values
                      (lambda ()
                        (#{gen-syntax 7277}#
                          #{e 7290}#
                          #{x 7317}#
                          #{r 7286}#
                          '()
                          #{ellipsis? 6329}#
                          #{mod 7289}#))
                      (lambda (#{e 7371}# #{maps 7372}#)
                        (#{regen 7284}# #{e 7371}#))))
                  #{tmp 7292}#)
                (syntax-violation
                  'syntax
                  "bad `syntax' form"
                  #{e 7290}#)))))))
    (#{global-extend 6287}#
      'core
      'lambda
      (lambda (#{e 8068}#
               #{r 8069}#
               #{w 8070}#
               #{s 8071}#
               #{mod 8072}#)
        (let ((#{tmp 8074}#
                ($sc-dispatch #{e 8068}# '(_ any any . each-any))))
          (if #{tmp 8074}#
            (@apply
              (lambda (#{args 8078}# #{e1 8079}# #{e2 8080}#)
                (call-with-values
                  (lambda ()
                    (#{lambda-formals 6330}# #{args 8078}#))
                  (lambda (#{req 8083}#
                           #{opt 8084}#
                           #{rest 8085}#
                           #{kw 8086}#)
                    (letrec*
                      ((#{lp 8087}#
                         (lambda (#{body 8090}# #{meta 8091}#)
                           (let ((#{tmp 8093}#
                                   ($sc-dispatch
                                     #{body 8090}#
                                     '(any any . each-any))))
                             (if (if #{tmp 8093}#
                                   (@apply
                                     (lambda (#{docstring 8097}#
                                              #{e1 8098}#
                                              #{e2 8099}#)
                                       (string?
                                         (syntax->datum #{docstring 8097}#)))
                                     #{tmp 8093}#)
                                   #f)
                               (@apply
                                 (lambda (#{docstring 8100}#
                                          #{e1 8101}#
                                          #{e2 8102}#)
                                   (#{lp 8087}#
                                     (cons #{e1 8101}# #{e2 8102}#)
                                     (append
                                       #{meta 8091}#
                                       (list (cons 'documentation
                                                   (syntax->datum
                                                     #{docstring 8100}#))))))
                                 #{tmp 8093}#)
                               (let ((#{tmp 8103}#
                                       ($sc-dispatch
                                         #{body 8090}#
                                         '(#(vector #(each (any . any)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 8103}#
                                   (@apply
                                     (lambda (#{k 8107}#
                                              #{v 8108}#
                                              #{e1 8109}#
                                              #{e2 8110}#)
                                       (#{lp 8087}#
                                         (cons #{e1 8109}# #{e2 8110}#)
                                         (append
                                           #{meta 8091}#
                                           (syntax->datum
                                             (map cons
                                                  #{k 8107}#
                                                  #{v 8108}#)))))
                                     #{tmp 8103}#)
                                   (#{expand-simple-lambda 6331}#
                                     #{e 8068}#
                                     #{r 8069}#
                                     #{w 8070}#
                                     #{s 8071}#
                                     #{mod 8072}#
                                     #{req 8083}#
                                     #{rest 8085}#
                                     #{meta 8091}#
                                     #{body 8090}#))))))))
                      (#{lp 8087}# (cons #{e1 8079}# #{e2 8080}#) '())))))
              #{tmp 8074}#)
            (syntax-violation
              'lambda
              "bad lambda"
              #{e 8068}#)))))
    (#{global-extend 6287}#
      'core
      'lambda*
      (lambda (#{e 8401}#
               #{r 8402}#
               #{w 8403}#
               #{s 8404}#
               #{mod 8405}#)
        (let ((#{tmp 8407}#
                ($sc-dispatch #{e 8401}# '(_ any any . each-any))))
          (if #{tmp 8407}#
            (@apply
              (lambda (#{args 8411}# #{e1 8412}# #{e2 8413}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 6333}#
                      #{e 8401}#
                      #{r 8402}#
                      #{w 8403}#
                      #{s 8404}#
                      #{mod 8405}#
                      #{lambda*-formals 6332}#
                      (list (cons #{args 8411}#
                                  (cons #{e1 8412}# #{e2 8413}#)))))
                  (lambda (#{meta 8416}# #{lcase 8417}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 8404}#
                      #{meta 8416}#
                      #{lcase 8417}#))))
              #{tmp 8407}#)
            (syntax-violation
              'lambda
              "bad lambda*"
              #{e 8401}#)))))
    (#{global-extend 6287}#
      'core
      'case-lambda
      (lambda (#{e 8587}#
               #{r 8588}#
               #{w 8589}#
               #{s 8590}#
               #{mod 8591}#)
        (let ((#{tmp 8593}#
                ($sc-dispatch
                  #{e 8587}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 8593}#
            (@apply
              (lambda (#{args 8597}#
                       #{e1 8598}#
                       #{e2 8599}#
                       #{args* 8600}#
                       #{e1* 8601}#
                       #{e2* 8602}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 6333}#
                      #{e 8587}#
                      #{r 8588}#
                      #{w 8589}#
                      #{s 8590}#
                      #{mod 8591}#
                      #{lambda-formals 6330}#
                      (cons (cons #{args 8597}#
                                  (cons #{e1 8598}# #{e2 8599}#))
                            (map (lambda (#{tmp 5250 8605}#
                                          #{tmp 5249 8606}#
                                          #{tmp 5248 8607}#)
                                   (cons #{tmp 5248 8607}#
                                         (cons #{tmp 5249 8606}#
                                               #{tmp 5250 8605}#)))
                                 #{e2* 8602}#
                                 #{e1* 8601}#
                                 #{args* 8600}#))))
                  (lambda (#{meta 8608}# #{lcase 8609}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 8590}#
                      #{meta 8608}#
                      #{lcase 8609}#))))
              #{tmp 8593}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda"
              #{e 8587}#)))))
    (#{global-extend 6287}#
      'core
      'case-lambda*
      (lambda (#{e 8771}#
               #{r 8772}#
               #{w 8773}#
               #{s 8774}#
               #{mod 8775}#)
        (let ((#{tmp 8777}#
                ($sc-dispatch
                  #{e 8771}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 8777}#
            (@apply
              (lambda (#{args 8781}#
                       #{e1 8782}#
                       #{e2 8783}#
                       #{args* 8784}#
                       #{e1* 8785}#
                       #{e2* 8786}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 6333}#
                      #{e 8771}#
                      #{r 8772}#
                      #{w 8773}#
                      #{s 8774}#
                      #{mod 8775}#
                      #{lambda*-formals 6332}#
                      (cons (cons #{args 8781}#
                                  (cons #{e1 8782}# #{e2 8783}#))
                            (map (lambda (#{tmp 5285 8789}#
                                          #{tmp 5284 8790}#
                                          #{tmp 5283 8791}#)
                                   (cons #{tmp 5283 8791}#
                                         (cons #{tmp 5284 8790}#
                                               #{tmp 5285 8789}#)))
                                 #{e2* 8786}#
                                 #{e1* 8785}#
                                 #{args* 8784}#))))
                  (lambda (#{meta 8792}# #{lcase 8793}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 8774}#
                      #{meta 8792}#
                      #{lcase 8793}#))))
              #{tmp 8777}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda*"
              #{e 8771}#)))))
    (#{global-extend 6287}#
      'core
      'let
      (letrec*
        ((#{expand-let 8984}#
           (lambda (#{e 9133}#
                    #{r 9134}#
                    #{w 9135}#
                    #{s 9136}#
                    #{mod 9137}#
                    #{constructor 9138}#
                    #{ids 9139}#
                    #{vals 9140}#
                    #{exps 9141}#)
             (if (not (#{valid-bound-ids? 6311}# #{ids 9139}#))
               (syntax-violation
                 'let
                 "duplicate bound variable"
                 #{e 9133}#)
               (let ((#{labels 9219}#
                       (#{gen-labels 6292}# #{ids 9139}#))
                     (#{new-vars 9220}#
                       (map #{gen-var 6335}# #{ids 9139}#)))
                 (let ((#{nw 9221}#
                         (#{make-binding-wrap 6303}#
                           #{ids 9139}#
                           #{labels 9219}#
                           #{w 9135}#))
                       (#{nr 9222}#
                         (#{extend-var-env 6284}#
                           #{labels 9219}#
                           #{new-vars 9220}#
                           #{r 9134}#)))
                   (#{constructor 9138}#
                     #{s 9136}#
                     (map syntax->datum #{ids 9139}#)
                     #{new-vars 9220}#
                     (map (lambda (#{x 9239}#)
                            (#{expand 6321}#
                              #{x 9239}#
                              #{r 9134}#
                              #{w 9135}#
                              #{mod 9137}#))
                          #{vals 9140}#)
                     (#{expand-body 6325}#
                       #{exps 9141}#
                       (#{source-wrap 6315}#
                         #{e 9133}#
                         #{nw 9221}#
                         #{s 9136}#
                         #{mod 9137}#)
                       #{nr 9222}#
                       #{nw 9221}#
                       #{mod 9137}#))))))))
        (lambda (#{e 8985}#
                 #{r 8986}#
                 #{w 8987}#
                 #{s 8988}#
                 #{mod 8989}#)
          (let ((#{tmp 8991}#
                  ($sc-dispatch
                    #{e 8985}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 8991}#
                  (@apply
                    (lambda (#{id 8995}#
                             #{val 8996}#
                             #{e1 8997}#
                             #{e2 8998}#)
                      (and-map #{id? 6289}# #{id 8995}#))
                    #{tmp 8991}#)
                  #f)
              (@apply
                (lambda (#{id 9014}#
                         #{val 9015}#
                         #{e1 9016}#
                         #{e2 9017}#)
                  (#{expand-let 8984}#
                    #{e 8985}#
                    #{r 8986}#
                    #{w 8987}#
                    #{s 8988}#
                    #{mod 8989}#
                    #{build-let 6271}#
                    #{id 9014}#
                    #{val 9015}#
                    (cons #{e1 9016}# #{e2 9017}#)))
                #{tmp 8991}#)
              (let ((#{tmp 9047}#
                      ($sc-dispatch
                        #{e 8985}#
                        '(_ any #(each (any any)) any . each-any))))
                (if (if #{tmp 9047}#
                      (@apply
                        (lambda (#{f 9051}#
                                 #{id 9052}#
                                 #{val 9053}#
                                 #{e1 9054}#
                                 #{e2 9055}#)
                          (if (if (symbol? #{f 9051}#)
                                #t
                                (if (if (vector? #{f 9051}#)
                                      (if (= (vector-length #{f 9051}#) 4)
                                        (eq? (vector-ref #{f 9051}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{f 9051}# 1))
                                  #f))
                            (and-map #{id? 6289}# #{id 9052}#)
                            #f))
                        #{tmp 9047}#)
                      #f)
                  (@apply
                    (lambda (#{f 9097}#
                             #{id 9098}#
                             #{val 9099}#
                             #{e1 9100}#
                             #{e2 9101}#)
                      (#{expand-let 8984}#
                        #{e 8985}#
                        #{r 8986}#
                        #{w 8987}#
                        #{s 8988}#
                        #{mod 8989}#
                        #{build-named-let 6272}#
                        (cons #{f 9097}# #{id 9098}#)
                        #{val 9099}#
                        (cons #{e1 9100}# #{e2 9101}#)))
                    #{tmp 9047}#)
                  (syntax-violation
                    'let
                    "bad let"
                    (#{wrap 6314}#
                      (begin
                        (if (if (pair? #{e 8985}#) #{s 8988}# #f)
                          (set-source-properties! #{e 8985}# #{s 8988}#))
                        #{e 8985}#)
                      #{w 8987}#
                      #{mod 8989}#)))))))))
    (#{global-extend 6287}#
      'core
      'letrec
      (lambda (#{e 9681}#
               #{r 9682}#
               #{w 9683}#
               #{s 9684}#
               #{mod 9685}#)
        (let ((#{tmp 9687}#
                ($sc-dispatch
                  #{e 9681}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 9687}#
                (@apply
                  (lambda (#{id 9691}#
                           #{val 9692}#
                           #{e1 9693}#
                           #{e2 9694}#)
                    (and-map #{id? 6289}# #{id 9691}#))
                  #{tmp 9687}#)
                #f)
            (@apply
              (lambda (#{id 9710}#
                       #{val 9711}#
                       #{e1 9712}#
                       #{e2 9713}#)
                (if (not (#{valid-bound-ids? 6311}# #{id 9710}#))
                  (syntax-violation
                    'letrec
                    "duplicate bound variable"
                    #{e 9681}#)
                  (let ((#{labels 9803}#
                          (#{gen-labels 6292}# #{id 9710}#))
                        (#{new-vars 9804}#
                          (map #{gen-var 6335}# #{id 9710}#)))
                    (let ((#{w 9805}#
                            (#{make-binding-wrap 6303}#
                              #{id 9710}#
                              #{labels 9803}#
                              #{w 9683}#))
                          (#{r 9806}#
                            (#{extend-var-env 6284}#
                              #{labels 9803}#
                              #{new-vars 9804}#
                              #{r 9682}#)))
                      (#{build-letrec 6273}#
                        #{s 9684}#
                        #f
                        (map syntax->datum #{id 9710}#)
                        #{new-vars 9804}#
                        (map (lambda (#{x 9893}#)
                               (#{expand 6321}#
                                 #{x 9893}#
                                 #{r 9806}#
                                 #{w 9805}#
                                 #{mod 9685}#))
                             #{val 9711}#)
                        (#{expand-body 6325}#
                          (cons #{e1 9712}# #{e2 9713}#)
                          (#{wrap 6314}#
                            (begin
                              (if (if (pair? #{e 9681}#) #{s 9684}# #f)
                                (set-source-properties! #{e 9681}# #{s 9684}#))
                              #{e 9681}#)
                            #{w 9805}#
                            #{mod 9685}#)
                          #{r 9806}#
                          #{w 9805}#
                          #{mod 9685}#))))))
              #{tmp 9687}#)
            (syntax-violation
              'letrec
              "bad letrec"
              (#{wrap 6314}#
                (begin
                  (if (if (pair? #{e 9681}#) #{s 9684}# #f)
                    (set-source-properties! #{e 9681}# #{s 9684}#))
                  #{e 9681}#)
                #{w 9683}#
                #{mod 9685}#))))))
    (#{global-extend 6287}#
      'core
      'letrec*
      (lambda (#{e 10310}#
               #{r 10311}#
               #{w 10312}#
               #{s 10313}#
               #{mod 10314}#)
        (let ((#{tmp 10316}#
                ($sc-dispatch
                  #{e 10310}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 10316}#
                (@apply
                  (lambda (#{id 10320}#
                           #{val 10321}#
                           #{e1 10322}#
                           #{e2 10323}#)
                    (and-map #{id? 6289}# #{id 10320}#))
                  #{tmp 10316}#)
                #f)
            (@apply
              (lambda (#{id 10339}#
                       #{val 10340}#
                       #{e1 10341}#
                       #{e2 10342}#)
                (if (not (#{valid-bound-ids? 6311}# #{id 10339}#))
                  (syntax-violation
                    'letrec*
                    "duplicate bound variable"
                    #{e 10310}#)
                  (let ((#{labels 10432}#
                          (#{gen-labels 6292}# #{id 10339}#))
                        (#{new-vars 10433}#
                          (map #{gen-var 6335}# #{id 10339}#)))
                    (let ((#{w 10434}#
                            (#{make-binding-wrap 6303}#
                              #{id 10339}#
                              #{labels 10432}#
                              #{w 10312}#))
                          (#{r 10435}#
                            (#{extend-var-env 6284}#
                              #{labels 10432}#
                              #{new-vars 10433}#
                              #{r 10311}#)))
                      (#{build-letrec 6273}#
                        #{s 10313}#
                        #t
                        (map syntax->datum #{id 10339}#)
                        #{new-vars 10433}#
                        (map (lambda (#{x 10522}#)
                               (#{expand 6321}#
                                 #{x 10522}#
                                 #{r 10435}#
                                 #{w 10434}#
                                 #{mod 10314}#))
                             #{val 10340}#)
                        (#{expand-body 6325}#
                          (cons #{e1 10341}# #{e2 10342}#)
                          (#{wrap 6314}#
                            (begin
                              (if (if (pair? #{e 10310}#) #{s 10313}# #f)
                                (set-source-properties!
                                  #{e 10310}#
                                  #{s 10313}#))
                              #{e 10310}#)
                            #{w 10434}#
                            #{mod 10314}#)
                          #{r 10435}#
                          #{w 10434}#
                          #{mod 10314}#))))))
              #{tmp 10316}#)
            (syntax-violation
              'letrec*
              "bad letrec*"
              (#{wrap 6314}#
                (begin
                  (if (if (pair? #{e 10310}#) #{s 10313}# #f)
                    (set-source-properties! #{e 10310}# #{s 10313}#))
                  #{e 10310}#)
                #{w 10312}#
                #{mod 10314}#))))))
    (#{global-extend 6287}#
      'core
      'set!
      (lambda (#{e 10981}#
               #{r 10982}#
               #{w 10983}#
               #{s 10984}#
               #{mod 10985}#)
        (let ((#{tmp 10987}#
                ($sc-dispatch #{e 10981}# '(_ any any))))
          (if (if #{tmp 10987}#
                (@apply
                  (lambda (#{id 10991}# #{val 10992}#)
                    (if (symbol? #{id 10991}#)
                      #t
                      (if (if (vector? #{id 10991}#)
                            (if (= (vector-length #{id 10991}#) 4)
                              (eq? (vector-ref #{id 10991}# 0) 'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{id 10991}# 1))
                        #f)))
                  #{tmp 10987}#)
                #f)
            (@apply
              (lambda (#{id 11019}# #{val 11020}#)
                (let ((#{n 11021}#
                        (#{id-var-name 6308}# #{id 11019}# #{w 10983}#))
                      (#{id-mod 11022}#
                        (if (if (vector? #{id 11019}#)
                              (if (= (vector-length #{id 11019}#) 4)
                                (eq? (vector-ref #{id 11019}# 0)
                                     'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{id 11019}# 3)
                          #{mod 10985}#)))
                  (let ((#{b 11023}#
                          (let ((#{t 11685}# (assq #{n 11021}# #{r 10982}#)))
                            (if #{t 11685}#
                              (cdr #{t 11685}#)
                              (if (symbol? #{n 11021}#)
                                (let ((#{t 11690}#
                                        (begin
                                          (if (if (not #{id-mod 11022}#)
                                                (current-module)
                                                #f)
                                            (warn "module system is booted, we should have a module"
                                                  #{n 11021}#))
                                          (let ((#{v 11727}#
                                                  (module-variable
                                                    (if #{id-mod 11022}#
                                                      (resolve-module
                                                        (cdr #{id-mod 11022}#))
                                                      (current-module))
                                                    #{n 11021}#)))
                                            (if #{v 11727}#
                                              (if (variable-bound? #{v 11727}#)
                                                (let ((#{val 11736}#
                                                        (variable-ref
                                                          #{v 11727}#)))
                                                  (if (macro? #{val 11736}#)
                                                    (if (macro-type
                                                          #{val 11736}#)
                                                      (cons (macro-type
                                                              #{val 11736}#)
                                                            (macro-binding
                                                              #{val 11736}#))
                                                      #f)
                                                    #f))
                                                #f)
                                              #f)))))
                                  (if #{t 11690}# #{t 11690}# '(global)))
                                '(displaced-lexical))))))
                    (let ((#{atom-key 11024}# (car #{b 11023}#)))
                      (if (let ((#{t 11056}# #{atom-key 11024}#))
                            (eqv? #{t 11056}# 'lexical))
                        (#{build-lexical-assignment 6260}#
                          #{s 10984}#
                          (syntax->datum #{id 11019}#)
                          (cdr #{b 11023}#)
                          (#{expand 6321}#
                            #{val 11020}#
                            #{r 10982}#
                            #{w 10983}#
                            #{mod 10985}#))
                        (if (let ((#{t 11331}# #{atom-key 11024}#))
                              (eqv? #{t 11331}# 'global))
                          (#{build-global-assignment 6263}#
                            #{s 10984}#
                            #{n 11021}#
                            (#{expand 6321}#
                              #{val 11020}#
                              #{r 10982}#
                              #{w 10983}#
                              #{mod 10985}#)
                            #{id-mod 11022}#)
                          (if (let ((#{t 11576}# #{atom-key 11024}#))
                                (eqv? #{t 11576}# 'macro))
                            (let ((#{p 11639}# (cdr #{b 11023}#)))
                              (if (procedure-property
                                    #{p 11639}#
                                    'variable-transformer)
                                (#{expand 6321}#
                                  (#{expand-macro 6324}#
                                    #{p 11639}#
                                    #{e 10981}#
                                    #{r 10982}#
                                    #{w 10983}#
                                    #{s 10984}#
                                    #f
                                    #{mod 10985}#)
                                  #{r 10982}#
                                  '(())
                                  #{mod 10985}#)
                                (syntax-violation
                                  'set!
                                  "not a variable transformer"
                                  (#{wrap 6314}#
                                    #{e 10981}#
                                    #{w 10983}#
                                    #{mod 10985}#)
                                  (#{wrap 6314}#
                                    #{id 11019}#
                                    #{w 10983}#
                                    #{id-mod 11022}#))))
                            (if (eqv? #{atom-key 11024}# 'displaced-lexical)
                              (syntax-violation
                                'set!
                                "identifier out of context"
                                (#{wrap 6314}#
                                  #{id 11019}#
                                  #{w 10983}#
                                  #{mod 10985}#))
                              (syntax-violation
                                'set!
                                "bad set!"
                                (#{wrap 6314}#
                                  (begin
                                    (if (if (pair? #{e 10981}#) #{s 10984}# #f)
                                      (set-source-properties!
                                        #{e 10981}#
                                        #{s 10984}#))
                                    #{e 10981}#)
                                  #{w 10983}#
                                  #{mod 10985}#))))))))))
              #{tmp 10987}#)
            (let ((#{tmp 11832}#
                    ($sc-dispatch
                      #{e 10981}#
                      '(_ (any . each-any) any))))
              (if #{tmp 11832}#
                (@apply
                  (lambda (#{head 11836}# #{tail 11837}# #{val 11838}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 6320}#
                          #{head 11836}#
                          #{r 10982}#
                          '(())
                          #f
                          #f
                          #{mod 10985}#
                          #t))
                      (lambda (#{type 11841}#
                               #{value 11842}#
                               #{ee 11843}#
                               #{ww 11844}#
                               #{ss 11845}#
                               #{modmod 11846}#)
                        (if (eqv? #{type 11841}# 'module-ref)
                          (let ((#{val 11850}#
                                  (#{expand 6321}#
                                    #{val 11838}#
                                    #{r 10982}#
                                    #{w 10983}#
                                    #{mod 10985}#)))
                            (call-with-values
                              (lambda ()
                                (#{value 11842}#
                                  (cons #{head 11836}# #{tail 11837}#)
                                  #{r 10982}#
                                  #{w 10983}#))
                              (lambda (#{e 11851}#
                                       #{r 11852}#
                                       #{w 11853}#
                                       #{s* 11854}#
                                       #{mod 11855}#)
                                (let ((#{tmp 11857}# (list #{e 11851}#)))
                                  (if (@apply
                                        (lambda (#{e 11859}#)
                                          (if (symbol? #{e 11859}#)
                                            #t
                                            (if (if (vector? #{e 11859}#)
                                                  (if (= (vector-length
                                                           #{e 11859}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{e 11859}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{e 11859}# 1))
                                              #f)))
                                        #{tmp 11857}#)
                                    (@apply
                                      (lambda (#{e 11889}#)
                                        (#{build-global-assignment 6263}#
                                          #{s 10984}#
                                          (syntax->datum #{e 11889}#)
                                          #{val 11850}#
                                          #{mod 11855}#))
                                      #{tmp 11857}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 11851}#))))))
                          (#{build-application 6256}#
                            #{s 10984}#
                            (let ((#{e 12114}#
                                    (list '#(syntax-object
                                             setter
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(type value ee ww ss modmod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i5531"
                                                  "i5532"
                                                  "i5533"
                                                  "i5534"
                                                  "i5535"
                                                  "i5536"))
                                              #(ribcage
                                                #(head tail val)
                                                #((top) (top) (top))
                                                #("i5517" "i5518" "i5519"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(e r w s mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i5481"
                                                  "i5482"
                                                  "i5483"
                                                  "i5484"
                                                  "i5485"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i2454"
                                                 "i2452"
                                                 "i2450"
                                                 "i2448"
                                                 "i2446"
                                                 "i2444"
                                                 "i2442"
                                                 "i2440"
                                                 "i2438"
                                                 "i2436"
                                                 "i2434"
                                                 "i2432"
                                                 "i2430"
                                                 "i2428"
                                                 "i2426"
                                                 "i2424"
                                                 "i2422"
                                                 "i2420"
                                                 "i2418"
                                                 "i2416"
                                                 "i2414"
                                                 "i2412"
                                                 "i2410"
                                                 "i2408"
                                                 "i2406"
                                                 "i2404"
                                                 "i2402"
                                                 "i2400"
                                                 "i2398"
                                                 "i2396"
                                                 "i2394"
                                                 "i2392"
                                                 "i2390"
                                                 "i2388"
                                                 "i2386"
                                                 "i2385"
                                                 "i2383"
                                                 "i2380"
                                                 "i2379"
                                                 "i2378"
                                                 "i2376"
                                                 "i2375"
                                                 "i2373"
                                                 "i2371"
                                                 "i2369"
                                                 "i2367"
                                                 "i2365"
                                                 "i2363"
                                                 "i2361"
                                                 "i2359"
                                                 "i2356"
                                                 "i2354"
                                                 "i2353"
                                                 "i2351"
                                                 "i2349"
                                                 "i2347"
                                                 "i2345"
                                                 "i2344"
                                                 "i2343"
                                                 "i2342"
                                                 "i2340"
                                                 "i2339"
                                                 "i2336"
                                                 "i2334"
                                                 "i2332"
                                                 "i2330"
                                                 "i2328"
                                                 "i2326"
                                                 "i2324"
                                                 "i2323"
                                                 "i2322"
                                                 "i2320"
                                                 "i2318"
                                                 "i2317"
                                                 "i2314"
                                                 "i2313"
                                                 "i2311"
                                                 "i2309"
                                                 "i2307"
                                                 "i2305"
                                                 "i2303"
                                                 "i2301"
                                                 "i2299"
                                                 "i2297"
                                                 "i2295"
                                                 "i2292"
                                                 "i2290"
                                                 "i2288"
                                                 "i2286"
                                                 "i2284"
                                                 "i2282"
                                                 "i2280"
                                                 "i2278"
                                                 "i2276"
                                                 "i2274"
                                                 "i2272"
                                                 "i2270"
                                                 "i2268"
                                                 "i2266"
                                                 "i2264"
                                                 "i2262"
                                                 "i2260"
                                                 "i2258"
                                                 "i2256"
                                                 "i2254"
                                                 "i2252"
                                                 "i2250"
                                                 "i2248"
                                                 "i2247"
                                                 "i2244"
                                                 "i2242"
                                                 "i2241"
                                                 "i2240"
                                                 "i2239"
                                                 "i2238"
                                                 "i2236"
                                                 "i2234"
                                                 "i2232"
                                                 "i2229"
                                                 "i2227"
                                                 "i2225"
                                                 "i2223"
                                                 "i2221"
                                                 "i2219"
                                                 "i2217"
                                                 "i2215"
                                                 "i2213"
                                                 "i2211"
                                                 "i2209"
                                                 "i2207"
                                                 "i2205"
                                                 "i2203"
                                                 "i2201"
                                                 "i2199"
                                                 "i2197"
                                                 "i2195"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i2033" "i2032" "i2031")))
                                             (hygiene guile))
                                          #{head 11836}#)))
                              (call-with-values
                                (lambda ()
                                  (#{syntax-type 6320}#
                                    #{e 12114}#
                                    #{r 10982}#
                                    #{w 10983}#
                                    (#{source-annotation 6282}# #{e 12114}#)
                                    #f
                                    #{mod 10985}#
                                    #f))
                                (lambda (#{type 12121}#
                                         #{value 12122}#
                                         #{e 12123}#
                                         #{w 12124}#
                                         #{s 12125}#
                                         #{mod 12126}#)
                                  (#{expand-expr 6322}#
                                    #{type 12121}#
                                    #{value 12122}#
                                    #{e 12123}#
                                    #{r 10982}#
                                    #{w 12124}#
                                    #{s 12125}#
                                    #{mod 12126}#))))
                            (map (lambda (#{e 12130}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{syntax-type 6320}#
                                         #{e 12130}#
                                         #{r 10982}#
                                         #{w 10983}#
                                         (#{source-annotation 6282}#
                                           #{e 12130}#)
                                         #f
                                         #{mod 10985}#
                                         #f))
                                     (lambda (#{type 12145}#
                                              #{value 12146}#
                                              #{e 12147}#
                                              #{w 12148}#
                                              #{s 12149}#
                                              #{mod 12150}#)
                                       (#{expand-expr 6322}#
                                         #{type 12145}#
                                         #{value 12146}#
                                         #{e 12147}#
                                         #{r 10982}#
                                         #{w 12148}#
                                         #{s 12149}#
                                         #{mod 12150}#))))
                                 (append
                                   #{tail 11837}#
                                   (list #{val 11838}#))))))))
                  #{tmp 11832}#)
                (syntax-violation
                  'set!
                  "bad set!"
                  (#{wrap 6314}#
                    (begin
                      (if (if (pair? #{e 10981}#) #{s 10984}# #f)
                        (set-source-properties! #{e 10981}# #{s 10984}#))
                      #{e 10981}#)
                    #{w 10983}#
                    #{mod 10985}#))))))))
    (module-define!
      (current-module)
      '@
      (make-syntax-transformer
        '@
        'module-ref
        (lambda (#{e 12193}# #{r 12194}# #{w 12195}#)
          (let ((#{tmp 12197}#
                  ($sc-dispatch #{e 12193}# '(_ each-any any))))
            (if (if #{tmp 12197}#
                  (@apply
                    (lambda (#{mod 12200}# #{id 12201}#)
                      (if (and-map #{id? 6289}# #{mod 12200}#)
                        (if (symbol? #{id 12201}#)
                          #t
                          (if (if (vector? #{id 12201}#)
                                (if (= (vector-length #{id 12201}#) 4)
                                  (eq? (vector-ref #{id 12201}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{id 12201}# 1))
                            #f))
                        #f))
                    #{tmp 12197}#)
                  #f)
              (@apply
                (lambda (#{mod 12241}# #{id 12242}#)
                  (values
                    (syntax->datum #{id 12242}#)
                    #{r 12194}#
                    #{w 12195}#
                    #f
                    (syntax->datum
                      (cons '#(syntax-object
                               public
                               ((top)
                                #(ribcage
                                  #(mod id)
                                  #((top) (top))
                                  #("i5578" "i5579"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(e r w)
                                  #((top) (top) (top))
                                  #("i5566" "i5567" "i5568"))
                                #(ribcage
                                  (lambda-var-list
                                    gen-var
                                    strip
                                    expand-lambda-case
                                    lambda*-formals
                                    expand-simple-lambda
                                    lambda-formals
                                    ellipsis?
                                    expand-void
                                    eval-local-transformer
                                    expand-local-syntax
                                    expand-body
                                    expand-macro
                                    expand-application
                                    expand-expr
                                    expand
                                    syntax-type
                                    parse-when-list
                                    expand-install-global
                                    expand-top-sequence
                                    expand-sequence
                                    source-wrap
                                    wrap
                                    bound-id-member?
                                    distinct-bound-ids?
                                    valid-bound-ids?
                                    bound-id=?
                                    free-id=?
                                    id-var-name
                                    same-marks?
                                    join-marks
                                    join-wraps
                                    smart-append
                                    make-binding-wrap
                                    extend-ribcage!
                                    make-empty-ribcage
                                    new-mark
                                    anti-mark
                                    the-anti-mark
                                    top-marked?
                                    top-wrap
                                    empty-wrap
                                    set-ribcage-labels!
                                    set-ribcage-marks!
                                    set-ribcage-symnames!
                                    ribcage-labels
                                    ribcage-marks
                                    ribcage-symnames
                                    ribcage?
                                    make-ribcage
                                    gen-labels
                                    gen-label
                                    make-rename
                                    rename-marks
                                    rename-new
                                    rename-old
                                    subst-rename?
                                    wrap-subst
                                    wrap-marks
                                    make-wrap
                                    id-sym-name&marks
                                    id-sym-name
                                    id?
                                    nonsymbol-id?
                                    global-extend
                                    lookup
                                    macros-only-env
                                    extend-var-env
                                    extend-env
                                    null-env
                                    binding-value
                                    binding-type
                                    make-binding
                                    arg-check
                                    source-annotation
                                    no-source
                                    set-syntax-object-module!
                                    set-syntax-object-wrap!
                                    set-syntax-object-expression!
                                    syntax-object-module
                                    syntax-object-wrap
                                    syntax-object-expression
                                    syntax-object?
                                    make-syntax-object
                                    build-lexical-var
                                    build-letrec
                                    build-named-let
                                    build-let
                                    build-sequence
                                    build-data
                                    build-primref
                                    build-lambda-case
                                    build-case-lambda
                                    build-simple-lambda
                                    build-global-definition
                                    build-global-assignment
                                    build-global-reference
                                    analyze-variable
                                    build-lexical-assignment
                                    build-lexical-reference
                                    build-dynlet
                                    build-conditional
                                    build-application
                                    build-void
                                    maybe-name-value!
                                    decorate-source
                                    get-global-definition-hook
                                    put-global-definition-hook
                                    gensym-hook
                                    local-eval-hook
                                    top-level-eval-hook
                                    fx<
                                    fx=
                                    fx-
                                    fx+
                                    set-lambda-meta!
                                    lambda-meta
                                    lambda?
                                    make-dynlet
                                    make-letrec
                                    make-let
                                    make-lambda-case
                                    make-lambda
                                    make-sequence
                                    make-application
                                    make-conditional
                                    make-toplevel-define
                                    make-toplevel-set
                                    make-toplevel-ref
                                    make-module-set
                                    make-module-ref
                                    make-lexical-set
                                    make-lexical-ref
                                    make-primitive-ref
                                    make-const
                                    make-void)
                                  ((top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top))
                                  ("i2454"
                                   "i2452"
                                   "i2450"
                                   "i2448"
                                   "i2446"
                                   "i2444"
                                   "i2442"
                                   "i2440"
                                   "i2438"
                                   "i2436"
                                   "i2434"
                                   "i2432"
                                   "i2430"
                                   "i2428"
                                   "i2426"
                                   "i2424"
                                   "i2422"
                                   "i2420"
                                   "i2418"
                                   "i2416"
                                   "i2414"
                                   "i2412"
                                   "i2410"
                                   "i2408"
                                   "i2406"
                                   "i2404"
                                   "i2402"
                                   "i2400"
                                   "i2398"
                                   "i2396"
                                   "i2394"
                                   "i2392"
                                   "i2390"
                                   "i2388"
                                   "i2386"
                                   "i2385"
                                   "i2383"
                                   "i2380"
                                   "i2379"
                                   "i2378"
                                   "i2376"
                                   "i2375"
                                   "i2373"
                                   "i2371"
                                   "i2369"
                                   "i2367"
                                   "i2365"
                                   "i2363"
                                   "i2361"
                                   "i2359"
                                   "i2356"
                                   "i2354"
                                   "i2353"
                                   "i2351"
                                   "i2349"
                                   "i2347"
                                   "i2345"
                                   "i2344"
                                   "i2343"
                                   "i2342"
                                   "i2340"
                                   "i2339"
                                   "i2336"
                                   "i2334"
                                   "i2332"
                                   "i2330"
                                   "i2328"
                                   "i2326"
                                   "i2324"
                                   "i2323"
                                   "i2322"
                                   "i2320"
                                   "i2318"
                                   "i2317"
                                   "i2314"
                                   "i2313"
                                   "i2311"
                                   "i2309"
                                   "i2307"
                                   "i2305"
                                   "i2303"
                                   "i2301"
                                   "i2299"
                                   "i2297"
                                   "i2295"
                                   "i2292"
                                   "i2290"
                                   "i2288"
                                   "i2286"
                                   "i2284"
                                   "i2282"
                                   "i2280"
                                   "i2278"
                                   "i2276"
                                   "i2274"
                                   "i2272"
                                   "i2270"
                                   "i2268"
                                   "i2266"
                                   "i2264"
                                   "i2262"
                                   "i2260"
                                   "i2258"
                                   "i2256"
                                   "i2254"
                                   "i2252"
                                   "i2250"
                                   "i2248"
                                   "i2247"
                                   "i2244"
                                   "i2242"
                                   "i2241"
                                   "i2240"
                                   "i2239"
                                   "i2238"
                                   "i2236"
                                   "i2234"
                                   "i2232"
                                   "i2229"
                                   "i2227"
                                   "i2225"
                                   "i2223"
                                   "i2221"
                                   "i2219"
                                   "i2217"
                                   "i2215"
                                   "i2213"
                                   "i2211"
                                   "i2209"
                                   "i2207"
                                   "i2205"
                                   "i2203"
                                   "i2201"
                                   "i2199"
                                   "i2197"
                                   "i2195"))
                                #(ribcage
                                  (define-structure
                                    define-expansion-accessors
                                    define-expansion-constructors)
                                  ((top) (top) (top))
                                  ("i2033" "i2032" "i2031")))
                               (hygiene guile))
                            #{mod 12241}#))))
                #{tmp 12197}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 12193}#))))))
    (#{global-extend 6287}#
      'module-ref
      '@@
      (lambda (#{e 12334}# #{r 12335}# #{w 12336}#)
        (letrec*
          ((#{remodulate 12337}#
             (lambda (#{x 12372}# #{mod 12373}#)
               (if (pair? #{x 12372}#)
                 (cons (#{remodulate 12337}#
                         (car #{x 12372}#)
                         #{mod 12373}#)
                       (#{remodulate 12337}#
                         (cdr #{x 12372}#)
                         #{mod 12373}#))
                 (if (if (vector? #{x 12372}#)
                       (if (= (vector-length #{x 12372}#) 4)
                         (eq? (vector-ref #{x 12372}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 12387}#
                           (#{remodulate 12337}#
                             (vector-ref #{x 12372}# 1)
                             #{mod 12373}#))
                         (#{wrap 12388}# (vector-ref #{x 12372}# 2)))
                     (vector
                       'syntax-object
                       #{expression 12387}#
                       #{wrap 12388}#
                       #{mod 12373}#))
                   (if (vector? #{x 12372}#)
                     (let ((#{n 12396}# (vector-length #{x 12372}#)))
                       (let ((#{v 12397}# (make-vector #{n 12396}#)))
                         (letrec*
                           ((#{loop 12398}#
                              (lambda (#{i 12445}#)
                                (if (= #{i 12445}# #{n 12396}#)
                                  #{v 12397}#
                                  (begin
                                    (vector-set!
                                      #{v 12397}#
                                      #{i 12445}#
                                      (#{remodulate 12337}#
                                        (vector-ref #{x 12372}# #{i 12445}#)
                                        #{mod 12373}#))
                                    (#{loop 12398}# (#{1+}# #{i 12445}#)))))))
                           (#{loop 12398}# 0))))
                     #{x 12372}#))))))
          (let ((#{tmp 12339}#
                  ($sc-dispatch #{e 12334}# '(_ each-any any))))
            (if (if #{tmp 12339}#
                  (@apply
                    (lambda (#{mod 12343}# #{exp 12344}#)
                      (and-map #{id? 6289}# #{mod 12343}#))
                    #{tmp 12339}#)
                  #f)
              (@apply
                (lambda (#{mod 12360}# #{exp 12361}#)
                  (let ((#{mod 12362}#
                          (syntax->datum
                            (cons '#(syntax-object
                                     private
                                     ((top)
                                      #(ribcage
                                        #(mod exp)
                                        #((top) (top))
                                        #("i5622" "i5623"))
                                      #(ribcage (remodulate) ((top)) ("i5589"))
                                      #(ribcage
                                        #(e r w)
                                        #((top) (top) (top))
                                        #("i5586" "i5587" "i5588"))
                                      #(ribcage
                                        (lambda-var-list
                                          gen-var
                                          strip
                                          expand-lambda-case
                                          lambda*-formals
                                          expand-simple-lambda
                                          lambda-formals
                                          ellipsis?
                                          expand-void
                                          eval-local-transformer
                                          expand-local-syntax
                                          expand-body
                                          expand-macro
                                          expand-application
                                          expand-expr
                                          expand
                                          syntax-type
                                          parse-when-list
                                          expand-install-global
                                          expand-top-sequence
                                          expand-sequence
                                          source-wrap
                                          wrap
                                          bound-id-member?
                                          distinct-bound-ids?
                                          valid-bound-ids?
                                          bound-id=?
                                          free-id=?
                                          id-var-name
                                          same-marks?
                                          join-marks
                                          join-wraps
                                          smart-append
                                          make-binding-wrap
                                          extend-ribcage!
                                          make-empty-ribcage
                                          new-mark
                                          anti-mark
                                          the-anti-mark
                                          top-marked?
                                          top-wrap
                                          empty-wrap
                                          set-ribcage-labels!
                                          set-ribcage-marks!
                                          set-ribcage-symnames!
                                          ribcage-labels
                                          ribcage-marks
                                          ribcage-symnames
                                          ribcage?
                                          make-ribcage
                                          gen-labels
                                          gen-label
                                          make-rename
                                          rename-marks
                                          rename-new
                                          rename-old
                                          subst-rename?
                                          wrap-subst
                                          wrap-marks
                                          make-wrap
                                          id-sym-name&marks
                                          id-sym-name
                                          id?
                                          nonsymbol-id?
                                          global-extend
                                          lookup
                                          macros-only-env
                                          extend-var-env
                                          extend-env
                                          null-env
                                          binding-value
                                          binding-type
                                          make-binding
                                          arg-check
                                          source-annotation
                                          no-source
                                          set-syntax-object-module!
                                          set-syntax-object-wrap!
                                          set-syntax-object-expression!
                                          syntax-object-module
                                          syntax-object-wrap
                                          syntax-object-expression
                                          syntax-object?
                                          make-syntax-object
                                          build-lexical-var
                                          build-letrec
                                          build-named-let
                                          build-let
                                          build-sequence
                                          build-data
                                          build-primref
                                          build-lambda-case
                                          build-case-lambda
                                          build-simple-lambda
                                          build-global-definition
                                          build-global-assignment
                                          build-global-reference
                                          analyze-variable
                                          build-lexical-assignment
                                          build-lexical-reference
                                          build-dynlet
                                          build-conditional
                                          build-application
                                          build-void
                                          maybe-name-value!
                                          decorate-source
                                          get-global-definition-hook
                                          put-global-definition-hook
                                          gensym-hook
                                          local-eval-hook
                                          top-level-eval-hook
                                          fx<
                                          fx=
                                          fx-
                                          fx+
                                          set-lambda-meta!
                                          lambda-meta
                                          lambda?
                                          make-dynlet
                                          make-letrec
                                          make-let
                                          make-lambda-case
                                          make-lambda
                                          make-sequence
                                          make-application
                                          make-conditional
                                          make-toplevel-define
                                          make-toplevel-set
                                          make-toplevel-ref
                                          make-module-set
                                          make-module-ref
                                          make-lexical-set
                                          make-lexical-ref
                                          make-primitive-ref
                                          make-const
                                          make-void)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i2454"
                                         "i2452"
                                         "i2450"
                                         "i2448"
                                         "i2446"
                                         "i2444"
                                         "i2442"
                                         "i2440"
                                         "i2438"
                                         "i2436"
                                         "i2434"
                                         "i2432"
                                         "i2430"
                                         "i2428"
                                         "i2426"
                                         "i2424"
                                         "i2422"
                                         "i2420"
                                         "i2418"
                                         "i2416"
                                         "i2414"
                                         "i2412"
                                         "i2410"
                                         "i2408"
                                         "i2406"
                                         "i2404"
                                         "i2402"
                                         "i2400"
                                         "i2398"
                                         "i2396"
                                         "i2394"
                                         "i2392"
                                         "i2390"
                                         "i2388"
                                         "i2386"
                                         "i2385"
                                         "i2383"
                                         "i2380"
                                         "i2379"
                                         "i2378"
                                         "i2376"
                                         "i2375"
                                         "i2373"
                                         "i2371"
                                         "i2369"
                                         "i2367"
                                         "i2365"
                                         "i2363"
                                         "i2361"
                                         "i2359"
                                         "i2356"
                                         "i2354"
                                         "i2353"
                                         "i2351"
                                         "i2349"
                                         "i2347"
                                         "i2345"
                                         "i2344"
                                         "i2343"
                                         "i2342"
                                         "i2340"
                                         "i2339"
                                         "i2336"
                                         "i2334"
                                         "i2332"
                                         "i2330"
                                         "i2328"
                                         "i2326"
                                         "i2324"
                                         "i2323"
                                         "i2322"
                                         "i2320"
                                         "i2318"
                                         "i2317"
                                         "i2314"
                                         "i2313"
                                         "i2311"
                                         "i2309"
                                         "i2307"
                                         "i2305"
                                         "i2303"
                                         "i2301"
                                         "i2299"
                                         "i2297"
                                         "i2295"
                                         "i2292"
                                         "i2290"
                                         "i2288"
                                         "i2286"
                                         "i2284"
                                         "i2282"
                                         "i2280"
                                         "i2278"
                                         "i2276"
                                         "i2274"
                                         "i2272"
                                         "i2270"
                                         "i2268"
                                         "i2266"
                                         "i2264"
                                         "i2262"
                                         "i2260"
                                         "i2258"
                                         "i2256"
                                         "i2254"
                                         "i2252"
                                         "i2250"
                                         "i2248"
                                         "i2247"
                                         "i2244"
                                         "i2242"
                                         "i2241"
                                         "i2240"
                                         "i2239"
                                         "i2238"
                                         "i2236"
                                         "i2234"
                                         "i2232"
                                         "i2229"
                                         "i2227"
                                         "i2225"
                                         "i2223"
                                         "i2221"
                                         "i2219"
                                         "i2217"
                                         "i2215"
                                         "i2213"
                                         "i2211"
                                         "i2209"
                                         "i2207"
                                         "i2205"
                                         "i2203"
                                         "i2201"
                                         "i2199"
                                         "i2197"
                                         "i2195"))
                                      #(ribcage
                                        (define-structure
                                          define-expansion-accessors
                                          define-expansion-constructors)
                                        ((top) (top) (top))
                                        ("i2033" "i2032" "i2031")))
                                     (hygiene guile))
                                  #{mod 12360}#))))
                    (values
                      (#{remodulate 12337}#
                        #{exp 12361}#
                        #{mod 12362}#)
                      #{r 12335}#
                      #{w 12336}#
                      (#{source-annotation 6282}# #{exp 12361}#)
                      #{mod 12362}#)))
                #{tmp 12339}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 12334}#))))))
    (#{global-extend 6287}#
      'core
      'if
      (lambda (#{e 12546}#
               #{r 12547}#
               #{w 12548}#
               #{s 12549}#
               #{mod 12550}#)
        (let ((#{tmp 12552}#
                ($sc-dispatch #{e 12546}# '(_ any any))))
          (if #{tmp 12552}#
            (@apply
              (lambda (#{test 12556}# #{then 12557}#)
                (#{build-conditional 6257}#
                  #{s 12549}#
                  (#{expand 6321}#
                    #{test 12556}#
                    #{r 12547}#
                    #{w 12548}#
                    #{mod 12550}#)
                  (#{expand 6321}#
                    #{then 12557}#
                    #{r 12547}#
                    #{w 12548}#
                    #{mod 12550}#)
                  (make-struct/no-tail
                    (vector-ref %expanded-vtables 0)
                    #f)))
              #{tmp 12552}#)
            (let ((#{tmp 12782}#
                    ($sc-dispatch #{e 12546}# '(_ any any any))))
              (if #{tmp 12782}#
                (@apply
                  (lambda (#{test 12786}# #{then 12787}# #{else 12788}#)
                    (#{build-conditional 6257}#
                      #{s 12549}#
                      (#{expand 6321}#
                        #{test 12786}#
                        #{r 12547}#
                        #{w 12548}#
                        #{mod 12550}#)
                      (#{expand 6321}#
                        #{then 12787}#
                        #{r 12547}#
                        #{w 12548}#
                        #{mod 12550}#)
                      (#{expand 6321}#
                        #{else 12788}#
                        #{r 12547}#
                        #{w 12548}#
                        #{mod 12550}#)))
                  #{tmp 12782}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 12546}#)))))))
    (#{global-extend 6287}#
      'core
      'with-fluids
      (lambda (#{e 13187}#
               #{r 13188}#
               #{w 13189}#
               #{s 13190}#
               #{mod 13191}#)
        (let ((#{tmp 13193}#
                ($sc-dispatch
                  #{e 13187}#
                  '(_ #(each (any any)) any . each-any))))
          (if #{tmp 13193}#
            (@apply
              (lambda (#{fluid 13197}#
                       #{val 13198}#
                       #{b 13199}#
                       #{b* 13200}#)
                (#{build-dynlet 6258}#
                  #{s 13190}#
                  (map (lambda (#{x 13281}#)
                         (#{expand 6321}#
                           #{x 13281}#
                           #{r 13188}#
                           #{w 13189}#
                           #{mod 13191}#))
                       #{fluid 13197}#)
                  (map (lambda (#{x 13351}#)
                         (#{expand 6321}#
                           #{x 13351}#
                           #{r 13188}#
                           #{w 13189}#
                           #{mod 13191}#))
                       #{val 13198}#)
                  (#{expand-body 6325}#
                    (cons #{b 13199}# #{b* 13200}#)
                    (#{wrap 6314}#
                      (begin
                        (if (if (pair? #{e 13187}#) #{s 13190}# #f)
                          (set-source-properties! #{e 13187}# #{s 13190}#))
                        #{e 13187}#)
                      #{w 13189}#
                      #{mod 13191}#)
                    #{r 13188}#
                    #{w 13189}#
                    #{mod 13191}#)))
              #{tmp 13193}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{e 13187}#)))))
    (module-define!
      (current-module)
      'begin
      (make-syntax-transformer 'begin 'begin '()))
    (module-define!
      (current-module)
      'define
      (make-syntax-transformer 'define 'define '()))
    (module-define!
      (current-module)
      'define-syntax
      (make-syntax-transformer
        'define-syntax
        'define-syntax
        '()))
    (module-define!
      (current-module)
      'eval-when
      (make-syntax-transformer
        'eval-when
        'eval-when
        '()))
    (#{global-extend 6287}#
      'core
      'syntax-case
      (letrec*
        ((#{convert-pattern 13709}#
           (lambda (#{pattern 15306}# #{keys 15307}#)
             (letrec*
               ((#{cvt* 15308}#
                  (lambda (#{p* 15932}# #{n 15933}# #{ids 15934}#)
                    (if (not (pair? #{p* 15932}#))
                      (#{cvt 15310}#
                        #{p* 15932}#
                        #{n 15933}#
                        #{ids 15934}#)
                      (call-with-values
                        (lambda ()
                          (#{cvt* 15308}#
                            (cdr #{p* 15932}#)
                            #{n 15933}#
                            #{ids 15934}#))
                        (lambda (#{y 15937}# #{ids 15938}#)
                          (call-with-values
                            (lambda ()
                              (#{cvt 15310}#
                                (car #{p* 15932}#)
                                #{n 15933}#
                                #{ids 15938}#))
                            (lambda (#{x 15941}# #{ids 15942}#)
                              (values
                                (cons #{x 15941}# #{y 15937}#)
                                #{ids 15942}#))))))))
                (#{v-reverse 15309}#
                  (lambda (#{x 15943}#)
                    (letrec*
                      ((#{loop 15944}#
                         (lambda (#{r 16024}# #{x 16025}#)
                           (if (not (pair? #{x 16025}#))
                             (values #{r 16024}# #{x 16025}#)
                             (#{loop 15944}#
                               (cons (car #{x 16025}#) #{r 16024}#)
                               (cdr #{x 16025}#))))))
                      (#{loop 15944}# '() #{x 15943}#))))
                (#{cvt 15310}#
                  (lambda (#{p 15313}# #{n 15314}# #{ids 15315}#)
                    (if (if (symbol? #{p 15313}#)
                          #t
                          (if (if (vector? #{p 15313}#)
                                (if (= (vector-length #{p 15313}#) 4)
                                  (eq? (vector-ref #{p 15313}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{p 15313}# 1))
                            #f))
                      (if (#{bound-id-member? 6313}#
                            #{p 15313}#
                            #{keys 15307}#)
                        (values
                          (vector 'free-id #{p 15313}#)
                          #{ids 15315}#)
                        (if (if (eq? (if (if (vector? #{p 15313}#)
                                           (if (= (vector-length #{p 15313}#)
                                                  4)
                                             (eq? (vector-ref #{p 15313}# 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (vector-ref #{p 15313}# 1)
                                       #{p 15313}#)
                                     (if (if (= (vector-length
                                                  '#(syntax-object
                                                     _
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(p n ids)
                                                        #((top) (top) (top))
                                                        #("i5723"
                                                          "i5724"
                                                          "i5725"))
                                                      #(ribcage
                                                        (cvt v-reverse cvt*)
                                                        ((top) (top) (top))
                                                        ("i5696"
                                                         "i5694"
                                                         "i5692"))
                                                      #(ribcage
                                                        #(pattern keys)
                                                        #((top) (top))
                                                        #("i5690" "i5691"))
                                                      #(ribcage
                                                        (gen-syntax-case
                                                          gen-clause
                                                          build-dispatch-call
                                                          convert-pattern)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i5686"
                                                         "i5684"
                                                         "i5682"
                                                         "i5680"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i2454"
                                                         "i2452"
                                                         "i2450"
                                                         "i2448"
                                                         "i2446"
                                                         "i2444"
                                                         "i2442"
                                                         "i2440"
                                                         "i2438"
                                                         "i2436"
                                                         "i2434"
                                                         "i2432"
                                                         "i2430"
                                                         "i2428"
                                                         "i2426"
                                                         "i2424"
                                                         "i2422"
                                                         "i2420"
                                                         "i2418"
                                                         "i2416"
                                                         "i2414"
                                                         "i2412"
                                                         "i2410"
                                                         "i2408"
                                                         "i2406"
                                                         "i2404"
                                                         "i2402"
                                                         "i2400"
                                                         "i2398"
                                                         "i2396"
                                                         "i2394"
                                                         "i2392"
                                                         "i2390"
                                                         "i2388"
                                                         "i2386"
                                                         "i2385"
                                                         "i2383"
                                                         "i2380"
                                                         "i2379"
                                                         "i2378"
                                                         "i2376"
                                                         "i2375"
                                                         "i2373"
                                                         "i2371"
                                                         "i2369"
                                                         "i2367"
                                                         "i2365"
                                                         "i2363"
                                                         "i2361"
                                                         "i2359"
                                                         "i2356"
                                                         "i2354"
                                                         "i2353"
                                                         "i2351"
                                                         "i2349"
                                                         "i2347"
                                                         "i2345"
                                                         "i2344"
                                                         "i2343"
                                                         "i2342"
                                                         "i2340"
                                                         "i2339"
                                                         "i2336"
                                                         "i2334"
                                                         "i2332"
                                                         "i2330"
                                                         "i2328"
                                                         "i2326"
                                                         "i2324"
                                                         "i2323"
                                                         "i2322"
                                                         "i2320"
                                                         "i2318"
                                                         "i2317"
                                                         "i2314"
                                                         "i2313"
                                                         "i2311"
                                                         "i2309"
                                                         "i2307"
                                                         "i2305"
                                                         "i2303"
                                                         "i2301"
                                                         "i2299"
                                                         "i2297"
                                                         "i2295"
                                                         "i2292"
                                                         "i2290"
                                                         "i2288"
                                                         "i2286"
                                                         "i2284"
                                                         "i2282"
                                                         "i2280"
                                                         "i2278"
                                                         "i2276"
                                                         "i2274"
                                                         "i2272"
                                                         "i2270"
                                                         "i2268"
                                                         "i2266"
                                                         "i2264"
                                                         "i2262"
                                                         "i2260"
                                                         "i2258"
                                                         "i2256"
                                                         "i2254"
                                                         "i2252"
                                                         "i2250"
                                                         "i2248"
                                                         "i2247"
                                                         "i2244"
                                                         "i2242"
                                                         "i2241"
                                                         "i2240"
                                                         "i2239"
                                                         "i2238"
                                                         "i2236"
                                                         "i2234"
                                                         "i2232"
                                                         "i2229"
                                                         "i2227"
                                                         "i2225"
                                                         "i2223"
                                                         "i2221"
                                                         "i2219"
                                                         "i2217"
                                                         "i2215"
                                                         "i2213"
                                                         "i2211"
                                                         "i2209"
                                                         "i2207"
                                                         "i2205"
                                                         "i2203"
                                                         "i2201"
                                                         "i2199"
                                                         "i2197"
                                                         "i2195"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("i2033"
                                                         "i2032"
                                                         "i2031")))
                                                     (hygiene guile)))
                                                4)
                                           #t
                                           #f)
                                       '_
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("i5723" "i5724" "i5725"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("i5696" "i5694" "i5692"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("i5690" "i5691"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i5686" "i5684" "i5682" "i5680"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i2454"
                                              "i2452"
                                              "i2450"
                                              "i2448"
                                              "i2446"
                                              "i2444"
                                              "i2442"
                                              "i2440"
                                              "i2438"
                                              "i2436"
                                              "i2434"
                                              "i2432"
                                              "i2430"
                                              "i2428"
                                              "i2426"
                                              "i2424"
                                              "i2422"
                                              "i2420"
                                              "i2418"
                                              "i2416"
                                              "i2414"
                                              "i2412"
                                              "i2410"
                                              "i2408"
                                              "i2406"
                                              "i2404"
                                              "i2402"
                                              "i2400"
                                              "i2398"
                                              "i2396"
                                              "i2394"
                                              "i2392"
                                              "i2390"
                                              "i2388"
                                              "i2386"
                                              "i2385"
                                              "i2383"
                                              "i2380"
                                              "i2379"
                                              "i2378"
                                              "i2376"
                                              "i2375"
                                              "i2373"
                                              "i2371"
                                              "i2369"
                                              "i2367"
                                              "i2365"
                                              "i2363"
                                              "i2361"
                                              "i2359"
                                              "i2356"
                                              "i2354"
                                              "i2353"
                                              "i2351"
                                              "i2349"
                                              "i2347"
                                              "i2345"
                                              "i2344"
                                              "i2343"
                                              "i2342"
                                              "i2340"
                                              "i2339"
                                              "i2336"
                                              "i2334"
                                              "i2332"
                                              "i2330"
                                              "i2328"
                                              "i2326"
                                              "i2324"
                                              "i2323"
                                              "i2322"
                                              "i2320"
                                              "i2318"
                                              "i2317"
                                              "i2314"
                                              "i2313"
                                              "i2311"
                                              "i2309"
                                              "i2307"
                                              "i2305"
                                              "i2303"
                                              "i2301"
                                              "i2299"
                                              "i2297"
                                              "i2295"
                                              "i2292"
                                              "i2290"
                                              "i2288"
                                              "i2286"
                                              "i2284"
                                              "i2282"
                                              "i2280"
                                              "i2278"
                                              "i2276"
                                              "i2274"
                                              "i2272"
                                              "i2270"
                                              "i2268"
                                              "i2266"
                                              "i2264"
                                              "i2262"
                                              "i2260"
                                              "i2258"
                                              "i2256"
                                              "i2254"
                                              "i2252"
                                              "i2250"
                                              "i2248"
                                              "i2247"
                                              "i2244"
                                              "i2242"
                                              "i2241"
                                              "i2240"
                                              "i2239"
                                              "i2238"
                                              "i2236"
                                              "i2234"
                                              "i2232"
                                              "i2229"
                                              "i2227"
                                              "i2225"
                                              "i2223"
                                              "i2221"
                                              "i2219"
                                              "i2217"
                                              "i2215"
                                              "i2213"
                                              "i2211"
                                              "i2209"
                                              "i2207"
                                              "i2205"
                                              "i2203"
                                              "i2201"
                                              "i2199"
                                              "i2197"
                                              "i2195"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i2033" "i2032" "i2031")))
                                          (hygiene guile))))
                              (eq? (#{id-var-name 6308}# #{p 15313}# '(()))
                                   (#{id-var-name 6308}#
                                     '#(syntax-object
                                        _
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p n ids)
                                           #((top) (top) (top))
                                           #("i5723" "i5724" "i5725"))
                                         #(ribcage
                                           (cvt v-reverse cvt*)
                                           ((top) (top) (top))
                                           ("i5696" "i5694" "i5692"))
                                         #(ribcage
                                           #(pattern keys)
                                           #((top) (top))
                                           #("i5690" "i5691"))
                                         #(ribcage
                                           (gen-syntax-case
                                             gen-clause
                                             build-dispatch-call
                                             convert-pattern)
                                           ((top) (top) (top) (top))
                                           ("i5686" "i5684" "i5682" "i5680"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             expand-lambda-case
                                             lambda*-formals
                                             expand-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             expand-void
                                             eval-local-transformer
                                             expand-local-syntax
                                             expand-body
                                             expand-macro
                                             expand-application
                                             expand-expr
                                             expand
                                             syntax-type
                                             parse-when-list
                                             expand-install-global
                                             expand-top-sequence
                                             expand-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             maybe-name-value!
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             set-lambda-meta!
                                             lambda-meta
                                             lambda?
                                             make-dynlet
                                             make-letrec
                                             make-let
                                             make-lambda-case
                                             make-lambda
                                             make-sequence
                                             make-application
                                             make-conditional
                                             make-toplevel-define
                                             make-toplevel-set
                                             make-toplevel-ref
                                             make-module-set
                                             make-module-ref
                                             make-lexical-set
                                             make-lexical-ref
                                             make-primitive-ref
                                             make-const
                                             make-void)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i2454"
                                            "i2452"
                                            "i2450"
                                            "i2448"
                                            "i2446"
                                            "i2444"
                                            "i2442"
                                            "i2440"
                                            "i2438"
                                            "i2436"
                                            "i2434"
                                            "i2432"
                                            "i2430"
                                            "i2428"
                                            "i2426"
                                            "i2424"
                                            "i2422"
                                            "i2420"
                                            "i2418"
                                            "i2416"
                                            "i2414"
                                            "i2412"
                                            "i2410"
                                            "i2408"
                                            "i2406"
                                            "i2404"
                                            "i2402"
                                            "i2400"
                                            "i2398"
                                            "i2396"
                                            "i2394"
                                            "i2392"
                                            "i2390"
                                            "i2388"
                                            "i2386"
                                            "i2385"
                                            "i2383"
                                            "i2380"
                                            "i2379"
                                            "i2378"
                                            "i2376"
                                            "i2375"
                                            "i2373"
                                            "i2371"
                                            "i2369"
                                            "i2367"
                                            "i2365"
                                            "i2363"
                                            "i2361"
                                            "i2359"
                                            "i2356"
                                            "i2354"
                                            "i2353"
                                            "i2351"
                                            "i2349"
                                            "i2347"
                                            "i2345"
                                            "i2344"
                                            "i2343"
                                            "i2342"
                                            "i2340"
                                            "i2339"
                                            "i2336"
                                            "i2334"
                                            "i2332"
                                            "i2330"
                                            "i2328"
                                            "i2326"
                                            "i2324"
                                            "i2323"
                                            "i2322"
                                            "i2320"
                                            "i2318"
                                            "i2317"
                                            "i2314"
                                            "i2313"
                                            "i2311"
                                            "i2309"
                                            "i2307"
                                            "i2305"
                                            "i2303"
                                            "i2301"
                                            "i2299"
                                            "i2297"
                                            "i2295"
                                            "i2292"
                                            "i2290"
                                            "i2288"
                                            "i2286"
                                            "i2284"
                                            "i2282"
                                            "i2280"
                                            "i2278"
                                            "i2276"
                                            "i2274"
                                            "i2272"
                                            "i2270"
                                            "i2268"
                                            "i2266"
                                            "i2264"
                                            "i2262"
                                            "i2260"
                                            "i2258"
                                            "i2256"
                                            "i2254"
                                            "i2252"
                                            "i2250"
                                            "i2248"
                                            "i2247"
                                            "i2244"
                                            "i2242"
                                            "i2241"
                                            "i2240"
                                            "i2239"
                                            "i2238"
                                            "i2236"
                                            "i2234"
                                            "i2232"
                                            "i2229"
                                            "i2227"
                                            "i2225"
                                            "i2223"
                                            "i2221"
                                            "i2219"
                                            "i2217"
                                            "i2215"
                                            "i2213"
                                            "i2211"
                                            "i2209"
                                            "i2207"
                                            "i2205"
                                            "i2203"
                                            "i2201"
                                            "i2199"
                                            "i2197"
                                            "i2195"))
                                         #(ribcage
                                           (define-structure
                                             define-expansion-accessors
                                             define-expansion-constructors)
                                           ((top) (top) (top))
                                           ("i2033" "i2032" "i2031")))
                                        (hygiene guile))
                                     '(())))
                              #f)
                          (values '_ #{ids 15315}#)
                          (values
                            'any
                            (cons (cons #{p 15313}# #{n 15314}#)
                                  #{ids 15315}#))))
                      (let ((#{tmp 15635}#
                              ($sc-dispatch #{p 15313}# '(any any))))
                        (if (if #{tmp 15635}#
                              (@apply
                                (lambda (#{x 15639}# #{dots 15640}#)
                                  (if (if (if (vector? #{dots 15640}#)
                                            (if (= (vector-length
                                                     #{dots 15640}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{dots 15640}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{dots 15640}# 1))
                                        #f)
                                    (if (eq? (if (if (vector? #{dots 15640}#)
                                                   (if (= (vector-length
                                                            #{dots 15640}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{dots 15640}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{dots 15640}# 1)
                                               #{dots 15640}#)
                                             (if (if (= (vector-length
                                                          '#(syntax-object
                                                             ...
                                                             ((top)
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(x)
                                                                #((top))
                                                                #("i4206"))
                                                              #(ribcage
                                                                (lambda-var-list
                                                                  gen-var
                                                                  strip
                                                                  expand-lambda-case
                                                                  lambda*-formals
                                                                  expand-simple-lambda
                                                                  lambda-formals
                                                                  ellipsis?
                                                                  expand-void
                                                                  eval-local-transformer
                                                                  expand-local-syntax
                                                                  expand-body
                                                                  expand-macro
                                                                  expand-application
                                                                  expand-expr
                                                                  expand
                                                                  syntax-type
                                                                  parse-when-list
                                                                  expand-install-global
                                                                  expand-top-sequence
                                                                  expand-sequence
                                                                  source-wrap
                                                                  wrap
                                                                  bound-id-member?
                                                                  distinct-bound-ids?
                                                                  valid-bound-ids?
                                                                  bound-id=?
                                                                  free-id=?
                                                                  id-var-name
                                                                  same-marks?
                                                                  join-marks
                                                                  join-wraps
                                                                  smart-append
                                                                  make-binding-wrap
                                                                  extend-ribcage!
                                                                  make-empty-ribcage
                                                                  new-mark
                                                                  anti-mark
                                                                  the-anti-mark
                                                                  top-marked?
                                                                  top-wrap
                                                                  empty-wrap
                                                                  set-ribcage-labels!
                                                                  set-ribcage-marks!
                                                                  set-ribcage-symnames!
                                                                  ribcage-labels
                                                                  ribcage-marks
                                                                  ribcage-symnames
                                                                  ribcage?
                                                                  make-ribcage
                                                                  gen-labels
                                                                  gen-label
                                                                  make-rename
                                                                  rename-marks
                                                                  rename-new
                                                                  rename-old
                                                                  subst-rename?
                                                                  wrap-subst
                                                                  wrap-marks
                                                                  make-wrap
                                                                  id-sym-name&marks
                                                                  id-sym-name
                                                                  id?
                                                                  nonsymbol-id?
                                                                  global-extend
                                                                  lookup
                                                                  macros-only-env
                                                                  extend-var-env
                                                                  extend-env
                                                                  null-env
                                                                  binding-value
                                                                  binding-type
                                                                  make-binding
                                                                  arg-check
                                                                  source-annotation
                                                                  no-source
                                                                  set-syntax-object-module!
                                                                  set-syntax-object-wrap!
                                                                  set-syntax-object-expression!
                                                                  syntax-object-module
                                                                  syntax-object-wrap
                                                                  syntax-object-expression
                                                                  syntax-object?
                                                                  make-syntax-object
                                                                  build-lexical-var
                                                                  build-letrec
                                                                  build-named-let
                                                                  build-let
                                                                  build-sequence
                                                                  build-data
                                                                  build-primref
                                                                  build-lambda-case
                                                                  build-case-lambda
                                                                  build-simple-lambda
                                                                  build-global-definition
                                                                  build-global-assignment
                                                                  build-global-reference
                                                                  analyze-variable
                                                                  build-lexical-assignment
                                                                  build-lexical-reference
                                                                  build-dynlet
                                                                  build-conditional
                                                                  build-application
                                                                  build-void
                                                                  maybe-name-value!
                                                                  decorate-source
                                                                  get-global-definition-hook
                                                                  put-global-definition-hook
                                                                  gensym-hook
                                                                  local-eval-hook
                                                                  top-level-eval-hook
                                                                  fx<
                                                                  fx=
                                                                  fx-
                                                                  fx+
                                                                  set-lambda-meta!
                                                                  lambda-meta
                                                                  lambda?
                                                                  make-dynlet
                                                                  make-letrec
                                                                  make-let
                                                                  make-lambda-case
                                                                  make-lambda
                                                                  make-sequence
                                                                  make-application
                                                                  make-conditional
                                                                  make-toplevel-define
                                                                  make-toplevel-set
                                                                  make-toplevel-ref
                                                                  make-module-set
                                                                  make-module-ref
                                                                  make-lexical-set
                                                                  make-lexical-ref
                                                                  make-primitive-ref
                                                                  make-const
                                                                  make-void)
                                                                ((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                                ("i2454"
                                                                 "i2452"
                                                                 "i2450"
                                                                 "i2448"
                                                                 "i2446"
                                                                 "i2444"
                                                                 "i2442"
                                                                 "i2440"
                                                                 "i2438"
                                                                 "i2436"
                                                                 "i2434"
                                                                 "i2432"
                                                                 "i2430"
                                                                 "i2428"
                                                                 "i2426"
                                                                 "i2424"
                                                                 "i2422"
                                                                 "i2420"
                                                                 "i2418"
                                                                 "i2416"
                                                                 "i2414"
                                                                 "i2412"
                                                                 "i2410"
                                                                 "i2408"
                                                                 "i2406"
                                                                 "i2404"
                                                                 "i2402"
                                                                 "i2400"
                                                                 "i2398"
                                                                 "i2396"
                                                                 "i2394"
                                                                 "i2392"
                                                                 "i2390"
                                                                 "i2388"
                                                                 "i2386"
                                                                 "i2385"
                                                                 "i2383"
                                                                 "i2380"
                                                                 "i2379"
                                                                 "i2378"
                                                                 "i2376"
                                                                 "i2375"
                                                                 "i2373"
                                                                 "i2371"
                                                                 "i2369"
                                                                 "i2367"
                                                                 "i2365"
                                                                 "i2363"
                                                                 "i2361"
                                                                 "i2359"
                                                                 "i2356"
                                                                 "i2354"
                                                                 "i2353"
                                                                 "i2351"
                                                                 "i2349"
                                                                 "i2347"
                                                                 "i2345"
                                                                 "i2344"
                                                                 "i2343"
                                                                 "i2342"
                                                                 "i2340"
                                                                 "i2339"
                                                                 "i2336"
                                                                 "i2334"
                                                                 "i2332"
                                                                 "i2330"
                                                                 "i2328"
                                                                 "i2326"
                                                                 "i2324"
                                                                 "i2323"
                                                                 "i2322"
                                                                 "i2320"
                                                                 "i2318"
                                                                 "i2317"
                                                                 "i2314"
                                                                 "i2313"
                                                                 "i2311"
                                                                 "i2309"
                                                                 "i2307"
                                                                 "i2305"
                                                                 "i2303"
                                                                 "i2301"
                                                                 "i2299"
                                                                 "i2297"
                                                                 "i2295"
                                                                 "i2292"
                                                                 "i2290"
                                                                 "i2288"
                                                                 "i2286"
                                                                 "i2284"
                                                                 "i2282"
                                                                 "i2280"
                                                                 "i2278"
                                                                 "i2276"
                                                                 "i2274"
                                                                 "i2272"
                                                                 "i2270"
                                                                 "i2268"
                                                                 "i2266"
                                                                 "i2264"
                                                                 "i2262"
                                                                 "i2260"
                                                                 "i2258"
                                                                 "i2256"
                                                                 "i2254"
                                                                 "i2252"
                                                                 "i2250"
                                                                 "i2248"
                                                                 "i2247"
                                                                 "i2244"
                                                                 "i2242"
                                                                 "i2241"
                                                                 "i2240"
                                                                 "i2239"
                                                                 "i2238"
                                                                 "i2236"
                                                                 "i2234"
                                                                 "i2232"
                                                                 "i2229"
                                                                 "i2227"
                                                                 "i2225"
                                                                 "i2223"
                                                                 "i2221"
                                                                 "i2219"
                                                                 "i2217"
                                                                 "i2215"
                                                                 "i2213"
                                                                 "i2211"
                                                                 "i2209"
                                                                 "i2207"
                                                                 "i2205"
                                                                 "i2203"
                                                                 "i2201"
                                                                 "i2199"
                                                                 "i2197"
                                                                 "i2195"))
                                                              #(ribcage
                                                                (define-structure
                                                                  define-expansion-accessors
                                                                  define-expansion-constructors)
                                                                ((top)
                                                                 (top)
                                                                 (top))
                                                                ("i2033"
                                                                 "i2032"
                                                                 "i2031")))
                                                             (hygiene guile)))
                                                        4)
                                                   #t
                                                   #f)
                                               '...
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4206"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       expand-lambda-case
                                                       lambda*-formals
                                                       expand-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       expand-void
                                                       eval-local-transformer
                                                       expand-local-syntax
                                                       expand-body
                                                       expand-macro
                                                       expand-application
                                                       expand-expr
                                                       expand
                                                       syntax-type
                                                       parse-when-list
                                                       expand-install-global
                                                       expand-top-sequence
                                                       expand-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i2454"
                                                      "i2452"
                                                      "i2450"
                                                      "i2448"
                                                      "i2446"
                                                      "i2444"
                                                      "i2442"
                                                      "i2440"
                                                      "i2438"
                                                      "i2436"
                                                      "i2434"
                                                      "i2432"
                                                      "i2430"
                                                      "i2428"
                                                      "i2426"
                                                      "i2424"
                                                      "i2422"
                                                      "i2420"
                                                      "i2418"
                                                      "i2416"
                                                      "i2414"
                                                      "i2412"
                                                      "i2410"
                                                      "i2408"
                                                      "i2406"
                                                      "i2404"
                                                      "i2402"
                                                      "i2400"
                                                      "i2398"
                                                      "i2396"
                                                      "i2394"
                                                      "i2392"
                                                      "i2390"
                                                      "i2388"
                                                      "i2386"
                                                      "i2385"
                                                      "i2383"
                                                      "i2380"
                                                      "i2379"
                                                      "i2378"
                                                      "i2376"
                                                      "i2375"
                                                      "i2373"
                                                      "i2371"
                                                      "i2369"
                                                      "i2367"
                                                      "i2365"
                                                      "i2363"
                                                      "i2361"
                                                      "i2359"
                                                      "i2356"
                                                      "i2354"
                                                      "i2353"
                                                      "i2351"
                                                      "i2349"
                                                      "i2347"
                                                      "i2345"
                                                      "i2344"
                                                      "i2343"
                                                      "i2342"
                                                      "i2340"
                                                      "i2339"
                                                      "i2336"
                                                      "i2334"
                                                      "i2332"
                                                      "i2330"
                                                      "i2328"
                                                      "i2326"
                                                      "i2324"
                                                      "i2323"
                                                      "i2322"
                                                      "i2320"
                                                      "i2318"
                                                      "i2317"
                                                      "i2314"
                                                      "i2313"
                                                      "i2311"
                                                      "i2309"
                                                      "i2307"
                                                      "i2305"
                                                      "i2303"
                                                      "i2301"
                                                      "i2299"
                                                      "i2297"
                                                      "i2295"
                                                      "i2292"
                                                      "i2290"
                                                      "i2288"
                                                      "i2286"
                                                      "i2284"
                                                      "i2282"
                                                      "i2280"
                                                      "i2278"
                                                      "i2276"
                                                      "i2274"
                                                      "i2272"
                                                      "i2270"
                                                      "i2268"
                                                      "i2266"
                                                      "i2264"
                                                      "i2262"
                                                      "i2260"
                                                      "i2258"
                                                      "i2256"
                                                      "i2254"
                                                      "i2252"
                                                      "i2250"
                                                      "i2248"
                                                      "i2247"
                                                      "i2244"
                                                      "i2242"
                                                      "i2241"
                                                      "i2240"
                                                      "i2239"
                                                      "i2238"
                                                      "i2236"
                                                      "i2234"
                                                      "i2232"
                                                      "i2229"
                                                      "i2227"
                                                      "i2225"
                                                      "i2223"
                                                      "i2221"
                                                      "i2219"
                                                      "i2217"
                                                      "i2215"
                                                      "i2213"
                                                      "i2211"
                                                      "i2209"
                                                      "i2207"
                                                      "i2205"
                                                      "i2203"
                                                      "i2201"
                                                      "i2199"
                                                      "i2197"
                                                      "i2195"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("i2033"
                                                      "i2032"
                                                      "i2031")))
                                                  (hygiene guile))))
                                      (eq? (#{id-var-name 6308}#
                                             #{dots 15640}#
                                             '(()))
                                           (#{id-var-name 6308}#
                                             '#(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i4206"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     expand-lambda-case
                                                     lambda*-formals
                                                     expand-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     expand-void
                                                     eval-local-transformer
                                                     expand-local-syntax
                                                     expand-body
                                                     expand-macro
                                                     expand-application
                                                     expand-expr
                                                     expand
                                                     syntax-type
                                                     parse-when-list
                                                     expand-install-global
                                                     expand-top-sequence
                                                     expand-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     maybe-name-value!
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     set-lambda-meta!
                                                     lambda-meta
                                                     lambda?
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i2454"
                                                    "i2452"
                                                    "i2450"
                                                    "i2448"
                                                    "i2446"
                                                    "i2444"
                                                    "i2442"
                                                    "i2440"
                                                    "i2438"
                                                    "i2436"
                                                    "i2434"
                                                    "i2432"
                                                    "i2430"
                                                    "i2428"
                                                    "i2426"
                                                    "i2424"
                                                    "i2422"
                                                    "i2420"
                                                    "i2418"
                                                    "i2416"
                                                    "i2414"
                                                    "i2412"
                                                    "i2410"
                                                    "i2408"
                                                    "i2406"
                                                    "i2404"
                                                    "i2402"
                                                    "i2400"
                                                    "i2398"
                                                    "i2396"
                                                    "i2394"
                                                    "i2392"
                                                    "i2390"
                                                    "i2388"
                                                    "i2386"
                                                    "i2385"
                                                    "i2383"
                                                    "i2380"
                                                    "i2379"
                                                    "i2378"
                                                    "i2376"
                                                    "i2375"
                                                    "i2373"
                                                    "i2371"
                                                    "i2369"
                                                    "i2367"
                                                    "i2365"
                                                    "i2363"
                                                    "i2361"
                                                    "i2359"
                                                    "i2356"
                                                    "i2354"
                                                    "i2353"
                                                    "i2351"
                                                    "i2349"
                                                    "i2347"
                                                    "i2345"
                                                    "i2344"
                                                    "i2343"
                                                    "i2342"
                                                    "i2340"
                                                    "i2339"
                                                    "i2336"
                                                    "i2334"
                                                    "i2332"
                                                    "i2330"
                                                    "i2328"
                                                    "i2326"
                                                    "i2324"
                                                    "i2323"
                                                    "i2322"
                                                    "i2320"
                                                    "i2318"
                                                    "i2317"
                                                    "i2314"
                                                    "i2313"
                                                    "i2311"
                                                    "i2309"
                                                    "i2307"
                                                    "i2305"
                                                    "i2303"
                                                    "i2301"
                                                    "i2299"
                                                    "i2297"
                                                    "i2295"
                                                    "i2292"
                                                    "i2290"
                                                    "i2288"
                                                    "i2286"
                                                    "i2284"
                                                    "i2282"
                                                    "i2280"
                                                    "i2278"
                                                    "i2276"
                                                    "i2274"
                                                    "i2272"
                                                    "i2270"
                                                    "i2268"
                                                    "i2266"
                                                    "i2264"
                                                    "i2262"
                                                    "i2260"
                                                    "i2258"
                                                    "i2256"
                                                    "i2254"
                                                    "i2252"
                                                    "i2250"
                                                    "i2248"
                                                    "i2247"
                                                    "i2244"
                                                    "i2242"
                                                    "i2241"
                                                    "i2240"
                                                    "i2239"
                                                    "i2238"
                                                    "i2236"
                                                    "i2234"
                                                    "i2232"
                                                    "i2229"
                                                    "i2227"
                                                    "i2225"
                                                    "i2223"
                                                    "i2221"
                                                    "i2219"
                                                    "i2217"
                                                    "i2215"
                                                    "i2213"
                                                    "i2211"
                                                    "i2209"
                                                    "i2207"
                                                    "i2205"
                                                    "i2203"
                                                    "i2201"
                                                    "i2199"
                                                    "i2197"
                                                    "i2195"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-accessors
                                                     define-expansion-constructors)
                                                   ((top) (top) (top))
                                                   ("i2033" "i2032" "i2031")))
                                                (hygiene guile))
                                             '(())))
                                      #f)
                                    #f))
                                #{tmp 15635}#)
                              #f)
                          (@apply
                            (lambda (#{x 15740}# #{dots 15741}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt 15310}#
                                    #{x 15740}#
                                    (#{1+}# #{n 15314}#)
                                    #{ids 15315}#))
                                (lambda (#{p 15742}# #{ids 15743}#)
                                  (values
                                    (if (eq? #{p 15742}# 'any)
                                      'each-any
                                      (vector 'each #{p 15742}#))
                                    #{ids 15743}#))))
                            #{tmp 15635}#)
                          (let ((#{tmp 15744}#
                                  ($sc-dispatch #{p 15313}# '(any any . any))))
                            (if (if #{tmp 15744}#
                                  (@apply
                                    (lambda (#{x 15748}#
                                             #{dots 15749}#
                                             #{ys 15750}#)
                                      (if (if (if (vector? #{dots 15749}#)
                                                (if (= (vector-length
                                                         #{dots 15749}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{dots 15749}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (symbol?
                                              (vector-ref #{dots 15749}# 1))
                                            #f)
                                        (if (eq? (if (if (vector?
                                                           #{dots 15749}#)
                                                       (if (= (vector-length
                                                                #{dots 15749}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{dots 15749}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref
                                                     #{dots 15749}#
                                                     1)
                                                   #{dots 15749}#)
                                                 (if (if (= (vector-length
                                                              '#(syntax-object
                                                                 ...
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i4206"))
                                                                  #(ribcage
                                                                    (lambda-var-list
                                                                      gen-var
                                                                      strip
                                                                      expand-lambda-case
                                                                      lambda*-formals
                                                                      expand-simple-lambda
                                                                      lambda-formals
                                                                      ellipsis?
                                                                      expand-void
                                                                      eval-local-transformer
                                                                      expand-local-syntax
                                                                      expand-body
                                                                      expand-macro
                                                                      expand-application
                                                                      expand-expr
                                                                      expand
                                                                      syntax-type
                                                                      parse-when-list
                                                                      expand-install-global
                                                                      expand-top-sequence
                                                                      expand-sequence
                                                                      source-wrap
                                                                      wrap
                                                                      bound-id-member?
                                                                      distinct-bound-ids?
                                                                      valid-bound-ids?
                                                                      bound-id=?
                                                                      free-id=?
                                                                      id-var-name
                                                                      same-marks?
                                                                      join-marks
                                                                      join-wraps
                                                                      smart-append
                                                                      make-binding-wrap
                                                                      extend-ribcage!
                                                                      make-empty-ribcage
                                                                      new-mark
                                                                      anti-mark
                                                                      the-anti-mark
                                                                      top-marked?
                                                                      top-wrap
                                                                      empty-wrap
                                                                      set-ribcage-labels!
                                                                      set-ribcage-marks!
                                                                      set-ribcage-symnames!
                                                                      ribcage-labels
                                                                      ribcage-marks
                                                                      ribcage-symnames
                                                                      ribcage?
                                                                      make-ribcage
                                                                      gen-labels
                                                                      gen-label
                                                                      make-rename
                                                                      rename-marks
                                                                      rename-new
                                                                      rename-old
                                                                      subst-rename?
                                                                      wrap-subst
                                                                      wrap-marks
                                                                      make-wrap
                                                                      id-sym-name&marks
                                                                      id-sym-name
                                                                      id?
                                                                      nonsymbol-id?
                                                                      global-extend
                                                                      lookup
                                                                      macros-only-env
                                                                      extend-var-env
                                                                      extend-env
                                                                      null-env
                                                                      binding-value
                                                                      binding-type
                                                                      make-binding
                                                                      arg-check
                                                                      source-annotation
                                                                      no-source
                                                                      set-syntax-object-module!
                                                                      set-syntax-object-wrap!
                                                                      set-syntax-object-expression!
                                                                      syntax-object-module
                                                                      syntax-object-wrap
                                                                      syntax-object-expression
                                                                      syntax-object?
                                                                      make-syntax-object
                                                                      build-lexical-var
                                                                      build-letrec
                                                                      build-named-let
                                                                      build-let
                                                                      build-sequence
                                                                      build-data
                                                                      build-primref
                                                                      build-lambda-case
                                                                      build-case-lambda
                                                                      build-simple-lambda
                                                                      build-global-definition
                                                                      build-global-assignment
                                                                      build-global-reference
                                                                      analyze-variable
                                                                      build-lexical-assignment
                                                                      build-lexical-reference
                                                                      build-dynlet
                                                                      build-conditional
                                                                      build-application
                                                                      build-void
                                                                      maybe-name-value!
                                                                      decorate-source
                                                                      get-global-definition-hook
                                                                      put-global-definition-hook
                                                                      gensym-hook
                                                                      local-eval-hook
                                                                      top-level-eval-hook
                                                                      fx<
                                                                      fx=
                                                                      fx-
                                                                      fx+
                                                                      set-lambda-meta!
                                                                      lambda-meta
                                                                      lambda?
                                                                      make-dynlet
                                                                      make-letrec
                                                                      make-let
                                                                      make-lambda-case
                                                                      make-lambda
                                                                      make-sequence
                                                                      make-application
                                                                      make-conditional
                                                                      make-toplevel-define
                                                                      make-toplevel-set
                                                                      make-toplevel-ref
                                                                      make-module-set
                                                                      make-module-ref
                                                                      make-lexical-set
                                                                      make-lexical-ref
                                                                      make-primitive-ref
                                                                      make-const
                                                                      make-void)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i2454"
                                                                     "i2452"
                                                                     "i2450"
                                                                     "i2448"
                                                                     "i2446"
                                                                     "i2444"
                                                                     "i2442"
                                                                     "i2440"
                                                                     "i2438"
                                                                     "i2436"
                                                                     "i2434"
                                                                     "i2432"
                                                                     "i2430"
                                                                     "i2428"
                                                                     "i2426"
                                                                     "i2424"
                                                                     "i2422"
                                                                     "i2420"
                                                                     "i2418"
                                                                     "i2416"
                                                                     "i2414"
                                                                     "i2412"
                                                                     "i2410"
                                                                     "i2408"
                                                                     "i2406"
                                                                     "i2404"
                                                                     "i2402"
                                                                     "i2400"
                                                                     "i2398"
                                                                     "i2396"
                                                                     "i2394"
                                                                     "i2392"
                                                                     "i2390"
                                                                     "i2388"
                                                                     "i2386"
                                                                     "i2385"
                                                                     "i2383"
                                                                     "i2380"
                                                                     "i2379"
                                                                     "i2378"
                                                                     "i2376"
                                                                     "i2375"
                                                                     "i2373"
                                                                     "i2371"
                                                                     "i2369"
                                                                     "i2367"
                                                                     "i2365"
                                                                     "i2363"
                                                                     "i2361"
                                                                     "i2359"
                                                                     "i2356"
                                                                     "i2354"
                                                                     "i2353"
                                                                     "i2351"
                                                                     "i2349"
                                                                     "i2347"
                                                                     "i2345"
                                                                     "i2344"
                                                                     "i2343"
                                                                     "i2342"
                                                                     "i2340"
                                                                     "i2339"
                                                                     "i2336"
                                                                     "i2334"
                                                                     "i2332"
                                                                     "i2330"
                                                                     "i2328"
                                                                     "i2326"
                                                                     "i2324"
                                                                     "i2323"
                                                                     "i2322"
                                                                     "i2320"
                                                                     "i2318"
                                                                     "i2317"
                                                                     "i2314"
                                                                     "i2313"
                                                                     "i2311"
                                                                     "i2309"
                                                                     "i2307"
                                                                     "i2305"
                                                                     "i2303"
                                                                     "i2301"
                                                                     "i2299"
                                                                     "i2297"
                                                                     "i2295"
                                                                     "i2292"
                                                                     "i2290"
                                                                     "i2288"
                                                                     "i2286"
                                                                     "i2284"
                                                                     "i2282"
                                                                     "i2280"
                                                                     "i2278"
                                                                     "i2276"
                                                                     "i2274"
                                                                     "i2272"
                                                                     "i2270"
                                                                     "i2268"
                                                                     "i2266"
                                                                     "i2264"
                                                                     "i2262"
                                                                     "i2260"
                                                                     "i2258"
                                                                     "i2256"
                                                                     "i2254"
                                                                     "i2252"
                                                                     "i2250"
                                                                     "i2248"
                                                                     "i2247"
                                                                     "i2244"
                                                                     "i2242"
                                                                     "i2241"
                                                                     "i2240"
                                                                     "i2239"
                                                                     "i2238"
                                                                     "i2236"
                                                                     "i2234"
                                                                     "i2232"
                                                                     "i2229"
                                                                     "i2227"
                                                                     "i2225"
                                                                     "i2223"
                                                                     "i2221"
                                                                     "i2219"
                                                                     "i2217"
                                                                     "i2215"
                                                                     "i2213"
                                                                     "i2211"
                                                                     "i2209"
                                                                     "i2207"
                                                                     "i2205"
                                                                     "i2203"
                                                                     "i2201"
                                                                     "i2199"
                                                                     "i2197"
                                                                     "i2195"))
                                                                  #(ribcage
                                                                    (define-structure
                                                                      define-expansion-accessors
                                                                      define-expansion-constructors)
                                                                    ((top)
                                                                     (top)
                                                                     (top))
                                                                    ("i2033"
                                                                     "i2032"
                                                                     "i2031")))
                                                                 (hygiene
                                                                   guile)))
                                                            4)
                                                       #t
                                                       #f)
                                                   '...
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4206"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i2454"
                                                          "i2452"
                                                          "i2450"
                                                          "i2448"
                                                          "i2446"
                                                          "i2444"
                                                          "i2442"
                                                          "i2440"
                                                          "i2438"
                                                          "i2436"
                                                          "i2434"
                                                          "i2432"
                                                          "i2430"
                                                          "i2428"
                                                          "i2426"
                                                          "i2424"
                                                          "i2422"
                                                          "i2420"
                                                          "i2418"
                                                          "i2416"
                                                          "i2414"
                                                          "i2412"
                                                          "i2410"
                                                          "i2408"
                                                          "i2406"
                                                          "i2404"
                                                          "i2402"
                                                          "i2400"
                                                          "i2398"
                                                          "i2396"
                                                          "i2394"
                                                          "i2392"
                                                          "i2390"
                                                          "i2388"
                                                          "i2386"
                                                          "i2385"
                                                          "i2383"
                                                          "i2380"
                                                          "i2379"
                                                          "i2378"
                                                          "i2376"
                                                          "i2375"
                                                          "i2373"
                                                          "i2371"
                                                          "i2369"
                                                          "i2367"
                                                          "i2365"
                                                          "i2363"
                                                          "i2361"
                                                          "i2359"
                                                          "i2356"
                                                          "i2354"
                                                          "i2353"
                                                          "i2351"
                                                          "i2349"
                                                          "i2347"
                                                          "i2345"
                                                          "i2344"
                                                          "i2343"
                                                          "i2342"
                                                          "i2340"
                                                          "i2339"
                                                          "i2336"
                                                          "i2334"
                                                          "i2332"
                                                          "i2330"
                                                          "i2328"
                                                          "i2326"
                                                          "i2324"
                                                          "i2323"
                                                          "i2322"
                                                          "i2320"
                                                          "i2318"
                                                          "i2317"
                                                          "i2314"
                                                          "i2313"
                                                          "i2311"
                                                          "i2309"
                                                          "i2307"
                                                          "i2305"
                                                          "i2303"
                                                          "i2301"
                                                          "i2299"
                                                          "i2297"
                                                          "i2295"
                                                          "i2292"
                                                          "i2290"
                                                          "i2288"
                                                          "i2286"
                                                          "i2284"
                                                          "i2282"
                                                          "i2280"
                                                          "i2278"
                                                          "i2276"
                                                          "i2274"
                                                          "i2272"
                                                          "i2270"
                                                          "i2268"
                                                          "i2266"
                                                          "i2264"
                                                          "i2262"
                                                          "i2260"
                                                          "i2258"
                                                          "i2256"
                                                          "i2254"
                                                          "i2252"
                                                          "i2250"
                                                          "i2248"
                                                          "i2247"
                                                          "i2244"
                                                          "i2242"
                                                          "i2241"
                                                          "i2240"
                                                          "i2239"
                                                          "i2238"
                                                          "i2236"
                                                          "i2234"
                                                          "i2232"
                                                          "i2229"
                                                          "i2227"
                                                          "i2225"
                                                          "i2223"
                                                          "i2221"
                                                          "i2219"
                                                          "i2217"
                                                          "i2215"
                                                          "i2213"
                                                          "i2211"
                                                          "i2209"
                                                          "i2207"
                                                          "i2205"
                                                          "i2203"
                                                          "i2201"
                                                          "i2199"
                                                          "i2197"
                                                          "i2195"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("i2033"
                                                          "i2032"
                                                          "i2031")))
                                                      (hygiene guile))))
                                          (eq? (#{id-var-name 6308}#
                                                 #{dots 15749}#
                                                 '(()))
                                               (#{id-var-name 6308}#
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4206"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2454"
                                                        "i2452"
                                                        "i2450"
                                                        "i2448"
                                                        "i2446"
                                                        "i2444"
                                                        "i2442"
                                                        "i2440"
                                                        "i2438"
                                                        "i2436"
                                                        "i2434"
                                                        "i2432"
                                                        "i2430"
                                                        "i2428"
                                                        "i2426"
                                                        "i2424"
                                                        "i2422"
                                                        "i2420"
                                                        "i2418"
                                                        "i2416"
                                                        "i2414"
                                                        "i2412"
                                                        "i2410"
                                                        "i2408"
                                                        "i2406"
                                                        "i2404"
                                                        "i2402"
                                                        "i2400"
                                                        "i2398"
                                                        "i2396"
                                                        "i2394"
                                                        "i2392"
                                                        "i2390"
                                                        "i2388"
                                                        "i2386"
                                                        "i2385"
                                                        "i2383"
                                                        "i2380"
                                                        "i2379"
                                                        "i2378"
                                                        "i2376"
                                                        "i2375"
                                                        "i2373"
                                                        "i2371"
                                                        "i2369"
                                                        "i2367"
                                                        "i2365"
                                                        "i2363"
                                                        "i2361"
                                                        "i2359"
                                                        "i2356"
                                                        "i2354"
                                                        "i2353"
                                                        "i2351"
                                                        "i2349"
                                                        "i2347"
                                                        "i2345"
                                                        "i2344"
                                                        "i2343"
                                                        "i2342"
                                                        "i2340"
                                                        "i2339"
                                                        "i2336"
                                                        "i2334"
                                                        "i2332"
                                                        "i2330"
                                                        "i2328"
                                                        "i2326"
                                                        "i2324"
                                                        "i2323"
                                                        "i2322"
                                                        "i2320"
                                                        "i2318"
                                                        "i2317"
                                                        "i2314"
                                                        "i2313"
                                                        "i2311"
                                                        "i2309"
                                                        "i2307"
                                                        "i2305"
                                                        "i2303"
                                                        "i2301"
                                                        "i2299"
                                                        "i2297"
                                                        "i2295"
                                                        "i2292"
                                                        "i2290"
                                                        "i2288"
                                                        "i2286"
                                                        "i2284"
                                                        "i2282"
                                                        "i2280"
                                                        "i2278"
                                                        "i2276"
                                                        "i2274"
                                                        "i2272"
                                                        "i2270"
                                                        "i2268"
                                                        "i2266"
                                                        "i2264"
                                                        "i2262"
                                                        "i2260"
                                                        "i2258"
                                                        "i2256"
                                                        "i2254"
                                                        "i2252"
                                                        "i2250"
                                                        "i2248"
                                                        "i2247"
                                                        "i2244"
                                                        "i2242"
                                                        "i2241"
                                                        "i2240"
                                                        "i2239"
                                                        "i2238"
                                                        "i2236"
                                                        "i2234"
                                                        "i2232"
                                                        "i2229"
                                                        "i2227"
                                                        "i2225"
                                                        "i2223"
                                                        "i2221"
                                                        "i2219"
                                                        "i2217"
                                                        "i2215"
                                                        "i2213"
                                                        "i2211"
                                                        "i2209"
                                                        "i2207"
                                                        "i2205"
                                                        "i2203"
                                                        "i2201"
                                                        "i2199"
                                                        "i2197"
                                                        "i2195"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i2033"
                                                        "i2032"
                                                        "i2031")))
                                                    (hygiene guile))
                                                 '(())))
                                          #f)
                                        #f))
                                    #{tmp 15744}#)
                                  #f)
                              (@apply
                                (lambda (#{x 15850}#
                                         #{dots 15851}#
                                         #{ys 15852}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt* 15308}#
                                        #{ys 15852}#
                                        #{n 15314}#
                                        #{ids 15315}#))
                                    (lambda (#{ys 15855}# #{ids 15856}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 15310}#
                                            #{x 15850}#
                                            (#{1+}# #{n 15314}#)
                                            #{ids 15856}#))
                                        (lambda (#{x 15857}# #{ids 15858}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{v-reverse 15309}#
                                                #{ys 15855}#))
                                            (lambda (#{ys 15891}# #{e 15892}#)
                                              (values
                                                (vector
                                                  'each+
                                                  #{x 15857}#
                                                  #{ys 15891}#
                                                  #{e 15892}#)
                                                #{ids 15858}#))))))))
                                #{tmp 15744}#)
                              (let ((#{tmp 15893}#
                                      ($sc-dispatch #{p 15313}# '(any . any))))
                                (if #{tmp 15893}#
                                  (@apply
                                    (lambda (#{x 15897}# #{y 15898}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 15310}#
                                            #{y 15898}#
                                            #{n 15314}#
                                            #{ids 15315}#))
                                        (lambda (#{y 15899}# #{ids 15900}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 15310}#
                                                #{x 15897}#
                                                #{n 15314}#
                                                #{ids 15900}#))
                                            (lambda (#{x 15901}# #{ids 15902}#)
                                              (values
                                                (cons #{x 15901}# #{y 15899}#)
                                                #{ids 15902}#))))))
                                    #{tmp 15893}#)
                                  (let ((#{tmp 15903}#
                                          ($sc-dispatch #{p 15313}# '())))
                                    (if #{tmp 15903}#
                                      (@apply
                                        (lambda () (values '() #{ids 15315}#))
                                        #{tmp 15903}#)
                                      (let ((#{tmp 15907}#
                                              ($sc-dispatch
                                                #{p 15313}#
                                                '#(vector each-any))))
                                        (if #{tmp 15907}#
                                          (@apply
                                            (lambda (#{x 15911}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt 15310}#
                                                    #{x 15911}#
                                                    #{n 15314}#
                                                    #{ids 15315}#))
                                                (lambda (#{p 15912}#
                                                         #{ids 15913}#)
                                                  (values
                                                    (vector
                                                      'vector
                                                      #{p 15912}#)
                                                    #{ids 15913}#))))
                                            #{tmp 15907}#)
                                          (values
                                            (vector
                                              'atom
                                              (#{strip 6334}#
                                                #{p 15313}#
                                                '(())))
                                            #{ids 15315}#)))))))))))))))
               (#{cvt 15310}# #{pattern 15306}# 0 '()))))
         (#{build-dispatch-call 13710}#
           (lambda (#{pvars 16026}#
                    #{exp 16027}#
                    #{y 16028}#
                    #{r 16029}#
                    #{mod 16030}#)
             (let ((#{ids 16031}# (map car #{pvars 16026}#)))
               (begin
                 (map cdr #{pvars 16026}#)
                 (let ((#{labels 16033}#
                         (#{gen-labels 6292}# #{ids 16031}#))
                       (#{new-vars 16034}#
                         (map #{gen-var 6335}# #{ids 16031}#)))
                   (#{build-application 6256}#
                     #f
                     (if (equal? (module-name (current-module)) '(guile))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 7)
                         #f
                         'apply)
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 5)
                         #f
                         '(guile)
                         'apply
                         #f))
                     (list (#{build-simple-lambda 6265}#
                             #f
                             (map syntax->datum #{ids 16031}#)
                             #f
                             #{new-vars 16034}#
                             '()
                             (#{expand 6321}#
                               #{exp 16027}#
                               (#{extend-env 6283}#
                                 #{labels 16033}#
                                 (map (lambda (#{var 16359}# #{level 16360}#)
                                        (cons 'syntax
                                              (cons #{var 16359}#
                                                    #{level 16360}#)))
                                      #{new-vars 16034}#
                                      (map cdr #{pvars 16026}#))
                                 #{r 16029}#)
                               (#{make-binding-wrap 6303}#
                                 #{ids 16031}#
                                 #{labels 16033}#
                                 '(()))
                               #{mod 16030}#))
                           #{y 16028}#)))))))
         (#{gen-clause 13711}#
           (lambda (#{x 14678}#
                    #{keys 14679}#
                    #{clauses 14680}#
                    #{r 14681}#
                    #{pat 14682}#
                    #{fender 14683}#
                    #{exp 14684}#
                    #{mod 14685}#)
             (call-with-values
               (lambda ()
                 (#{convert-pattern 13709}#
                   #{pat 14682}#
                   #{keys 14679}#))
               (lambda (#{p 14840}# #{pvars 14841}#)
                 (if (not (#{distinct-bound-ids? 6312}#
                            (map car #{pvars 14841}#)))
                   (syntax-violation
                     'syntax-case
                     "duplicate pattern variable"
                     #{pat 14682}#)
                   (if (not (and-map
                              (lambda (#{x 14957}#)
                                (not (let ((#{x 14961}# (car #{x 14957}#)))
                                       (if (if (if (vector? #{x 14961}#)
                                                 (if (= (vector-length
                                                          #{x 14961}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 14961}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (symbol?
                                               (vector-ref #{x 14961}# 1))
                                             #f)
                                         (if (eq? (if (if (vector? #{x 14961}#)
                                                        (if (= (vector-length
                                                                 #{x 14961}#)
                                                               4)
                                                          (eq? (vector-ref
                                                                 #{x 14961}#
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref #{x 14961}# 1)
                                                    #{x 14961}#)
                                                  (if (if (= (vector-length
                                                               '#(syntax-object
                                                                  ...
                                                                  ((top)
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(x)
                                                                     #((top))
                                                                     #("i4206"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       expand-lambda-case
                                                                       lambda*-formals
                                                                       expand-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       expand-void
                                                                       eval-local-transformer
                                                                       expand-local-syntax
                                                                       expand-body
                                                                       expand-macro
                                                                       expand-application
                                                                       expand-expr
                                                                       expand
                                                                       syntax-type
                                                                       parse-when-list
                                                                       expand-install-global
                                                                       expand-top-sequence
                                                                       expand-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-application
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-sequence
                                                                       make-application
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i2454"
                                                                      "i2452"
                                                                      "i2450"
                                                                      "i2448"
                                                                      "i2446"
                                                                      "i2444"
                                                                      "i2442"
                                                                      "i2440"
                                                                      "i2438"
                                                                      "i2436"
                                                                      "i2434"
                                                                      "i2432"
                                                                      "i2430"
                                                                      "i2428"
                                                                      "i2426"
                                                                      "i2424"
                                                                      "i2422"
                                                                      "i2420"
                                                                      "i2418"
                                                                      "i2416"
                                                                      "i2414"
                                                                      "i2412"
                                                                      "i2410"
                                                                      "i2408"
                                                                      "i2406"
                                                                      "i2404"
                                                                      "i2402"
                                                                      "i2400"
                                                                      "i2398"
                                                                      "i2396"
                                                                      "i2394"
                                                                      "i2392"
                                                                      "i2390"
                                                                      "i2388"
                                                                      "i2386"
                                                                      "i2385"
                                                                      "i2383"
                                                                      "i2380"
                                                                      "i2379"
                                                                      "i2378"
                                                                      "i2376"
                                                                      "i2375"
                                                                      "i2373"
                                                                      "i2371"
                                                                      "i2369"
                                                                      "i2367"
                                                                      "i2365"
                                                                      "i2363"
                                                                      "i2361"
                                                                      "i2359"
                                                                      "i2356"
                                                                      "i2354"
                                                                      "i2353"
                                                                      "i2351"
                                                                      "i2349"
                                                                      "i2347"
                                                                      "i2345"
                                                                      "i2344"
                                                                      "i2343"
                                                                      "i2342"
                                                                      "i2340"
                                                                      "i2339"
                                                                      "i2336"
                                                                      "i2334"
                                                                      "i2332"
                                                                      "i2330"
                                                                      "i2328"
                                                                      "i2326"
                                                                      "i2324"
                                                                      "i2323"
                                                                      "i2322"
                                                                      "i2320"
                                                                      "i2318"
                                                                      "i2317"
                                                                      "i2314"
                                                                      "i2313"
                                                                      "i2311"
                                                                      "i2309"
                                                                      "i2307"
                                                                      "i2305"
                                                                      "i2303"
                                                                      "i2301"
                                                                      "i2299"
                                                                      "i2297"
                                                                      "i2295"
                                                                      "i2292"
                                                                      "i2290"
                                                                      "i2288"
                                                                      "i2286"
                                                                      "i2284"
                                                                      "i2282"
                                                                      "i2280"
                                                                      "i2278"
                                                                      "i2276"
                                                                      "i2274"
                                                                      "i2272"
                                                                      "i2270"
                                                                      "i2268"
                                                                      "i2266"
                                                                      "i2264"
                                                                      "i2262"
                                                                      "i2260"
                                                                      "i2258"
                                                                      "i2256"
                                                                      "i2254"
                                                                      "i2252"
                                                                      "i2250"
                                                                      "i2248"
                                                                      "i2247"
                                                                      "i2244"
                                                                      "i2242"
                                                                      "i2241"
                                                                      "i2240"
                                                                      "i2239"
                                                                      "i2238"
                                                                      "i2236"
                                                                      "i2234"
                                                                      "i2232"
                                                                      "i2229"
                                                                      "i2227"
                                                                      "i2225"
                                                                      "i2223"
                                                                      "i2221"
                                                                      "i2219"
                                                                      "i2217"
                                                                      "i2215"
                                                                      "i2213"
                                                                      "i2211"
                                                                      "i2209"
                                                                      "i2207"
                                                                      "i2205"
                                                                      "i2203"
                                                                      "i2201"
                                                                      "i2199"
                                                                      "i2197"
                                                                      "i2195"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i2033"
                                                                      "i2032"
                                                                      "i2031")))
                                                                  (hygiene
                                                                    guile)))
                                                             4)
                                                        #t
                                                        #f)
                                                    '...
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4206"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i2454"
                                                           "i2452"
                                                           "i2450"
                                                           "i2448"
                                                           "i2446"
                                                           "i2444"
                                                           "i2442"
                                                           "i2440"
                                                           "i2438"
                                                           "i2436"
                                                           "i2434"
                                                           "i2432"
                                                           "i2430"
                                                           "i2428"
                                                           "i2426"
                                                           "i2424"
                                                           "i2422"
                                                           "i2420"
                                                           "i2418"
                                                           "i2416"
                                                           "i2414"
                                                           "i2412"
                                                           "i2410"
                                                           "i2408"
                                                           "i2406"
                                                           "i2404"
                                                           "i2402"
                                                           "i2400"
                                                           "i2398"
                                                           "i2396"
                                                           "i2394"
                                                           "i2392"
                                                           "i2390"
                                                           "i2388"
                                                           "i2386"
                                                           "i2385"
                                                           "i2383"
                                                           "i2380"
                                                           "i2379"
                                                           "i2378"
                                                           "i2376"
                                                           "i2375"
                                                           "i2373"
                                                           "i2371"
                                                           "i2369"
                                                           "i2367"
                                                           "i2365"
                                                           "i2363"
                                                           "i2361"
                                                           "i2359"
                                                           "i2356"
                                                           "i2354"
                                                           "i2353"
                                                           "i2351"
                                                           "i2349"
                                                           "i2347"
                                                           "i2345"
                                                           "i2344"
                                                           "i2343"
                                                           "i2342"
                                                           "i2340"
                                                           "i2339"
                                                           "i2336"
                                                           "i2334"
                                                           "i2332"
                                                           "i2330"
                                                           "i2328"
                                                           "i2326"
                                                           "i2324"
                                                           "i2323"
                                                           "i2322"
                                                           "i2320"
                                                           "i2318"
                                                           "i2317"
                                                           "i2314"
                                                           "i2313"
                                                           "i2311"
                                                           "i2309"
                                                           "i2307"
                                                           "i2305"
                                                           "i2303"
                                                           "i2301"
                                                           "i2299"
                                                           "i2297"
                                                           "i2295"
                                                           "i2292"
                                                           "i2290"
                                                           "i2288"
                                                           "i2286"
                                                           "i2284"
                                                           "i2282"
                                                           "i2280"
                                                           "i2278"
                                                           "i2276"
                                                           "i2274"
                                                           "i2272"
                                                           "i2270"
                                                           "i2268"
                                                           "i2266"
                                                           "i2264"
                                                           "i2262"
                                                           "i2260"
                                                           "i2258"
                                                           "i2256"
                                                           "i2254"
                                                           "i2252"
                                                           "i2250"
                                                           "i2248"
                                                           "i2247"
                                                           "i2244"
                                                           "i2242"
                                                           "i2241"
                                                           "i2240"
                                                           "i2239"
                                                           "i2238"
                                                           "i2236"
                                                           "i2234"
                                                           "i2232"
                                                           "i2229"
                                                           "i2227"
                                                           "i2225"
                                                           "i2223"
                                                           "i2221"
                                                           "i2219"
                                                           "i2217"
                                                           "i2215"
                                                           "i2213"
                                                           "i2211"
                                                           "i2209"
                                                           "i2207"
                                                           "i2205"
                                                           "i2203"
                                                           "i2201"
                                                           "i2199"
                                                           "i2197"
                                                           "i2195"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("i2033"
                                                           "i2032"
                                                           "i2031")))
                                                       (hygiene guile))))
                                           (eq? (#{id-var-name 6308}#
                                                  #{x 14961}#
                                                  '(()))
                                                (#{id-var-name 6308}#
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4206"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i2454"
                                                         "i2452"
                                                         "i2450"
                                                         "i2448"
                                                         "i2446"
                                                         "i2444"
                                                         "i2442"
                                                         "i2440"
                                                         "i2438"
                                                         "i2436"
                                                         "i2434"
                                                         "i2432"
                                                         "i2430"
                                                         "i2428"
                                                         "i2426"
                                                         "i2424"
                                                         "i2422"
                                                         "i2420"
                                                         "i2418"
                                                         "i2416"
                                                         "i2414"
                                                         "i2412"
                                                         "i2410"
                                                         "i2408"
                                                         "i2406"
                                                         "i2404"
                                                         "i2402"
                                                         "i2400"
                                                         "i2398"
                                                         "i2396"
                                                         "i2394"
                                                         "i2392"
                                                         "i2390"
                                                         "i2388"
                                                         "i2386"
                                                         "i2385"
                                                         "i2383"
                                                         "i2380"
                                                         "i2379"
                                                         "i2378"
                                                         "i2376"
                                                         "i2375"
                                                         "i2373"
                                                         "i2371"
                                                         "i2369"
                                                         "i2367"
                                                         "i2365"
                                                         "i2363"
                                                         "i2361"
                                                         "i2359"
                                                         "i2356"
                                                         "i2354"
                                                         "i2353"
                                                         "i2351"
                                                         "i2349"
                                                         "i2347"
                                                         "i2345"
                                                         "i2344"
                                                         "i2343"
                                                         "i2342"
                                                         "i2340"
                                                         "i2339"
                                                         "i2336"
                                                         "i2334"
                                                         "i2332"
                                                         "i2330"
                                                         "i2328"
                                                         "i2326"
                                                         "i2324"
                                                         "i2323"
                                                         "i2322"
                                                         "i2320"
                                                         "i2318"
                                                         "i2317"
                                                         "i2314"
                                                         "i2313"
                                                         "i2311"
                                                         "i2309"
                                                         "i2307"
                                                         "i2305"
                                                         "i2303"
                                                         "i2301"
                                                         "i2299"
                                                         "i2297"
                                                         "i2295"
                                                         "i2292"
                                                         "i2290"
                                                         "i2288"
                                                         "i2286"
                                                         "i2284"
                                                         "i2282"
                                                         "i2280"
                                                         "i2278"
                                                         "i2276"
                                                         "i2274"
                                                         "i2272"
                                                         "i2270"
                                                         "i2268"
                                                         "i2266"
                                                         "i2264"
                                                         "i2262"
                                                         "i2260"
                                                         "i2258"
                                                         "i2256"
                                                         "i2254"
                                                         "i2252"
                                                         "i2250"
                                                         "i2248"
                                                         "i2247"
                                                         "i2244"
                                                         "i2242"
                                                         "i2241"
                                                         "i2240"
                                                         "i2239"
                                                         "i2238"
                                                         "i2236"
                                                         "i2234"
                                                         "i2232"
                                                         "i2229"
                                                         "i2227"
                                                         "i2225"
                                                         "i2223"
                                                         "i2221"
                                                         "i2219"
                                                         "i2217"
                                                         "i2215"
                                                         "i2213"
                                                         "i2211"
                                                         "i2209"
                                                         "i2207"
                                                         "i2205"
                                                         "i2203"
                                                         "i2201"
                                                         "i2199"
                                                         "i2197"
                                                         "i2195"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("i2033"
                                                         "i2032"
                                                         "i2031")))
                                                     (hygiene guile))
                                                  '(())))
                                           #f)
                                         #f))))
                              #{pvars 14841}#))
                     (syntax-violation
                       'syntax-case
                       "misplaced ellipsis"
                       #{pat 14682}#)
                     (let ((#{y 15037}#
                             (gensym
                               (string-append (symbol->string 'tmp) " "))))
                       (#{build-application 6256}#
                         #f
                         (let ((#{req 15180}# (list 'tmp))
                               (#{vars 15182}# (list #{y 15037}#))
                               (#{exp 15184}#
                                 (let ((#{y 15201}#
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 3)
                                           #f
                                           'tmp
                                           #{y 15037}#)))
                                   (let ((#{test-exp 15205}#
                                           (let ((#{tmp 15214}#
                                                   ($sc-dispatch
                                                     #{fender 14683}#
                                                     '#(atom #t))))
                                             (if #{tmp 15214}#
                                               (@apply
                                                 (lambda () #{y 15201}#)
                                                 #{tmp 15214}#)
                                               (let ((#{then-exp 15232}#
                                                       (#{build-dispatch-call 13710}#
                                                         #{pvars 14841}#
                                                         #{fender 14683}#
                                                         #{y 15201}#
                                                         #{r 14681}#
                                                         #{mod 14685}#))
                                                     (#{else-exp 15233}#
                                                       (make-struct/no-tail
                                                         (vector-ref
                                                           %expanded-vtables
                                                           1)
                                                         #f
                                                         #f)))
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     10)
                                                   #f
                                                   #{y 15201}#
                                                   #{then-exp 15232}#
                                                   #{else-exp 15233}#)))))
                                         (#{then-exp 15206}#
                                           (#{build-dispatch-call 13710}#
                                             #{pvars 14841}#
                                             #{exp 14684}#
                                             #{y 15201}#
                                             #{r 14681}#
                                             #{mod 14685}#))
                                         (#{else-exp 15207}#
                                           (#{gen-syntax-case 13712}#
                                             #{x 14678}#
                                             #{keys 14679}#
                                             #{clauses 14680}#
                                             #{r 14681}#
                                             #{mod 14685}#)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 10)
                                       #f
                                       #{test-exp 15205}#
                                       #{then-exp 15206}#
                                       #{else-exp 15207}#)))))
                           (let ((#{body 15189}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     #{req 15180}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 15182}#
                                     #{exp 15184}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 13)
                               #f
                               '()
                               #{body 15189}#)))
                         (list (if (eq? #{p 14840}# 'any)
                                 (let ((#{fun-exp 15255}#
                                         (if (equal?
                                               (module-name (current-module))
                                               '(guile))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 7)
                                             #f
                                             'list)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 5)
                                             #f
                                             '(guile)
                                             'list
                                             #f)))
                                       (#{arg-exps 15256}# (list #{x 14678}#)))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 11)
                                     #f
                                     #{fun-exp 15255}#
                                     #{arg-exps 15256}#))
                                 (let ((#{fun-exp 15279}#
                                         (if (equal?
                                               (module-name (current-module))
                                               '(guile))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 7)
                                             #f
                                             '$sc-dispatch)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 5)
                                             #f
                                             '(guile)
                                             '$sc-dispatch
                                             #f)))
                                       (#{arg-exps 15280}#
                                         (list #{x 14678}#
                                               (make-struct/no-tail
                                                 (vector-ref
                                                   %expanded-vtables
                                                   1)
                                                 #f
                                                 #{p 14840}#))))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 11)
                                     #f
                                     #{fun-exp 15279}#
                                     #{arg-exps 15280}#))))))))))))
         (#{gen-syntax-case 13712}#
           (lambda (#{x 14111}#
                    #{keys 14112}#
                    #{clauses 14113}#
                    #{r 14114}#
                    #{mod 14115}#)
             (if (null? #{clauses 14113}#)
               (let ((#{fun-exp 14120}#
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'syntax-violation)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'syntax-violation
                           #f)))
                     (#{arg-exps 14121}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #f)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               "source expression failed to match any pattern")
                             #{x 14111}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 11)
                   #f
                   #{fun-exp 14120}#
                   #{arg-exps 14121}#))
               (let ((#{tmp 14154}# (car #{clauses 14113}#)))
                 (let ((#{tmp 14155}#
                         ($sc-dispatch #{tmp 14154}# '(any any))))
                   (if #{tmp 14155}#
                     (@apply
                       (lambda (#{pat 14157}# #{exp 14158}#)
                         (if (if (if (symbol? #{pat 14157}#)
                                   #t
                                   (if (if (vector? #{pat 14157}#)
                                         (if (= (vector-length #{pat 14157}#)
                                                4)
                                           (eq? (vector-ref #{pat 14157}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (symbol? (vector-ref #{pat 14157}# 1))
                                     #f))
                               (and-map
                                 (lambda (#{x 14185}#)
                                   (not (if (eq? (if (if (vector?
                                                           #{pat 14157}#)
                                                       (if (= (vector-length
                                                                #{pat 14157}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{pat 14157}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref #{pat 14157}# 1)
                                                   #{pat 14157}#)
                                                 (if (if (vector? #{x 14185}#)
                                                       (if (= (vector-length
                                                                #{x 14185}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{x 14185}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref #{x 14185}# 1)
                                                   #{x 14185}#))
                                          (eq? (#{id-var-name 6308}#
                                                 #{pat 14157}#
                                                 '(()))
                                               (#{id-var-name 6308}#
                                                 #{x 14185}#
                                                 '(())))
                                          #f)))
                                 (cons '#(syntax-object
                                          ...
                                          ((top)
                                           #(ribcage
                                             #(pat exp)
                                             #((top) (top))
                                             #("i5887" "i5888"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x keys clauses r mod)
                                             #((top) (top) (top) (top) (top))
                                             #("i5876"
                                               "i5877"
                                               "i5878"
                                               "i5879"
                                               "i5880"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i5686" "i5684" "i5682" "i5680"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i2454"
                                              "i2452"
                                              "i2450"
                                              "i2448"
                                              "i2446"
                                              "i2444"
                                              "i2442"
                                              "i2440"
                                              "i2438"
                                              "i2436"
                                              "i2434"
                                              "i2432"
                                              "i2430"
                                              "i2428"
                                              "i2426"
                                              "i2424"
                                              "i2422"
                                              "i2420"
                                              "i2418"
                                              "i2416"
                                              "i2414"
                                              "i2412"
                                              "i2410"
                                              "i2408"
                                              "i2406"
                                              "i2404"
                                              "i2402"
                                              "i2400"
                                              "i2398"
                                              "i2396"
                                              "i2394"
                                              "i2392"
                                              "i2390"
                                              "i2388"
                                              "i2386"
                                              "i2385"
                                              "i2383"
                                              "i2380"
                                              "i2379"
                                              "i2378"
                                              "i2376"
                                              "i2375"
                                              "i2373"
                                              "i2371"
                                              "i2369"
                                              "i2367"
                                              "i2365"
                                              "i2363"
                                              "i2361"
                                              "i2359"
                                              "i2356"
                                              "i2354"
                                              "i2353"
                                              "i2351"
                                              "i2349"
                                              "i2347"
                                              "i2345"
                                              "i2344"
                                              "i2343"
                                              "i2342"
                                              "i2340"
                                              "i2339"
                                              "i2336"
                                              "i2334"
                                              "i2332"
                                              "i2330"
                                              "i2328"
                                              "i2326"
                                              "i2324"
                                              "i2323"
                                              "i2322"
                                              "i2320"
                                              "i2318"
                                              "i2317"
                                              "i2314"
                                              "i2313"
                                              "i2311"
                                              "i2309"
                                              "i2307"
                                              "i2305"
                                              "i2303"
                                              "i2301"
                                              "i2299"
                                              "i2297"
                                              "i2295"
                                              "i2292"
                                              "i2290"
                                              "i2288"
                                              "i2286"
                                              "i2284"
                                              "i2282"
                                              "i2280"
                                              "i2278"
                                              "i2276"
                                              "i2274"
                                              "i2272"
                                              "i2270"
                                              "i2268"
                                              "i2266"
                                              "i2264"
                                              "i2262"
                                              "i2260"
                                              "i2258"
                                              "i2256"
                                              "i2254"
                                              "i2252"
                                              "i2250"
                                              "i2248"
                                              "i2247"
                                              "i2244"
                                              "i2242"
                                              "i2241"
                                              "i2240"
                                              "i2239"
                                              "i2238"
                                              "i2236"
                                              "i2234"
                                              "i2232"
                                              "i2229"
                                              "i2227"
                                              "i2225"
                                              "i2223"
                                              "i2221"
                                              "i2219"
                                              "i2217"
                                              "i2215"
                                              "i2213"
                                              "i2211"
                                              "i2209"
                                              "i2207"
                                              "i2205"
                                              "i2203"
                                              "i2201"
                                              "i2199"
                                              "i2197"
                                              "i2195"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i2033" "i2032" "i2031")))
                                          (hygiene guile))
                                       #{keys 14112}#))
                               #f)
                           (if (if (eq? (if (if (= (vector-length
                                                     '#(syntax-object
                                                        pad
                                                        ((top)
                                                         #(ribcage
                                                           #(pat exp)
                                                           #((top) (top))
                                                           #("i5887" "i5888"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x
                                                             keys
                                                             clauses
                                                             r
                                                             mod)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i5876"
                                                             "i5877"
                                                             "i5878"
                                                             "i5879"
                                                             "i5880"))
                                                         #(ribcage
                                                           (gen-syntax-case
                                                             gen-clause
                                                             build-dispatch-call
                                                             convert-pattern)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i5686"
                                                            "i5684"
                                                            "i5682"
                                                            "i5680"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i2454"
                                                            "i2452"
                                                            "i2450"
                                                            "i2448"
                                                            "i2446"
                                                            "i2444"
                                                            "i2442"
                                                            "i2440"
                                                            "i2438"
                                                            "i2436"
                                                            "i2434"
                                                            "i2432"
                                                            "i2430"
                                                            "i2428"
                                                            "i2426"
                                                            "i2424"
                                                            "i2422"
                                                            "i2420"
                                                            "i2418"
                                                            "i2416"
                                                            "i2414"
                                                            "i2412"
                                                            "i2410"
                                                            "i2408"
                                                            "i2406"
                                                            "i2404"
                                                            "i2402"
                                                            "i2400"
                                                            "i2398"
                                                            "i2396"
                                                            "i2394"
                                                            "i2392"
                                                            "i2390"
                                                            "i2388"
                                                            "i2386"
                                                            "i2385"
                                                            "i2383"
                                                            "i2380"
                                                            "i2379"
                                                            "i2378"
                                                            "i2376"
                                                            "i2375"
                                                            "i2373"
                                                            "i2371"
                                                            "i2369"
                                                            "i2367"
                                                            "i2365"
                                                            "i2363"
                                                            "i2361"
                                                            "i2359"
                                                            "i2356"
                                                            "i2354"
                                                            "i2353"
                                                            "i2351"
                                                            "i2349"
                                                            "i2347"
                                                            "i2345"
                                                            "i2344"
                                                            "i2343"
                                                            "i2342"
                                                            "i2340"
                                                            "i2339"
                                                            "i2336"
                                                            "i2334"
                                                            "i2332"
                                                            "i2330"
                                                            "i2328"
                                                            "i2326"
                                                            "i2324"
                                                            "i2323"
                                                            "i2322"
                                                            "i2320"
                                                            "i2318"
                                                            "i2317"
                                                            "i2314"
                                                            "i2313"
                                                            "i2311"
                                                            "i2309"
                                                            "i2307"
                                                            "i2305"
                                                            "i2303"
                                                            "i2301"
                                                            "i2299"
                                                            "i2297"
                                                            "i2295"
                                                            "i2292"
                                                            "i2290"
                                                            "i2288"
                                                            "i2286"
                                                            "i2284"
                                                            "i2282"
                                                            "i2280"
                                                            "i2278"
                                                            "i2276"
                                                            "i2274"
                                                            "i2272"
                                                            "i2270"
                                                            "i2268"
                                                            "i2266"
                                                            "i2264"
                                                            "i2262"
                                                            "i2260"
                                                            "i2258"
                                                            "i2256"
                                                            "i2254"
                                                            "i2252"
                                                            "i2250"
                                                            "i2248"
                                                            "i2247"
                                                            "i2244"
                                                            "i2242"
                                                            "i2241"
                                                            "i2240"
                                                            "i2239"
                                                            "i2238"
                                                            "i2236"
                                                            "i2234"
                                                            "i2232"
                                                            "i2229"
                                                            "i2227"
                                                            "i2225"
                                                            "i2223"
                                                            "i2221"
                                                            "i2219"
                                                            "i2217"
                                                            "i2215"
                                                            "i2213"
                                                            "i2211"
                                                            "i2209"
                                                            "i2207"
                                                            "i2205"
                                                            "i2203"
                                                            "i2201"
                                                            "i2199"
                                                            "i2197"
                                                            "i2195"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("i2033"
                                                            "i2032"
                                                            "i2031")))
                                                        (hygiene guile)))
                                                   4)
                                              #t
                                              #f)
                                          'pad
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("i5887" "i5888"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i5876"
                                                  "i5877"
                                                  "i5878"
                                                  "i5879"
                                                  "i5880"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("i5686"
                                                 "i5684"
                                                 "i5682"
                                                 "i5680"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i2454"
                                                 "i2452"
                                                 "i2450"
                                                 "i2448"
                                                 "i2446"
                                                 "i2444"
                                                 "i2442"
                                                 "i2440"
                                                 "i2438"
                                                 "i2436"
                                                 "i2434"
                                                 "i2432"
                                                 "i2430"
                                                 "i2428"
                                                 "i2426"
                                                 "i2424"
                                                 "i2422"
                                                 "i2420"
                                                 "i2418"
                                                 "i2416"
                                                 "i2414"
                                                 "i2412"
                                                 "i2410"
                                                 "i2408"
                                                 "i2406"
                                                 "i2404"
                                                 "i2402"
                                                 "i2400"
                                                 "i2398"
                                                 "i2396"
                                                 "i2394"
                                                 "i2392"
                                                 "i2390"
                                                 "i2388"
                                                 "i2386"
                                                 "i2385"
                                                 "i2383"
                                                 "i2380"
                                                 "i2379"
                                                 "i2378"
                                                 "i2376"
                                                 "i2375"
                                                 "i2373"
                                                 "i2371"
                                                 "i2369"
                                                 "i2367"
                                                 "i2365"
                                                 "i2363"
                                                 "i2361"
                                                 "i2359"
                                                 "i2356"
                                                 "i2354"
                                                 "i2353"
                                                 "i2351"
                                                 "i2349"
                                                 "i2347"
                                                 "i2345"
                                                 "i2344"
                                                 "i2343"
                                                 "i2342"
                                                 "i2340"
                                                 "i2339"
                                                 "i2336"
                                                 "i2334"
                                                 "i2332"
                                                 "i2330"
                                                 "i2328"
                                                 "i2326"
                                                 "i2324"
                                                 "i2323"
                                                 "i2322"
                                                 "i2320"
                                                 "i2318"
                                                 "i2317"
                                                 "i2314"
                                                 "i2313"
                                                 "i2311"
                                                 "i2309"
                                                 "i2307"
                                                 "i2305"
                                                 "i2303"
                                                 "i2301"
                                                 "i2299"
                                                 "i2297"
                                                 "i2295"
                                                 "i2292"
                                                 "i2290"
                                                 "i2288"
                                                 "i2286"
                                                 "i2284"
                                                 "i2282"
                                                 "i2280"
                                                 "i2278"
                                                 "i2276"
                                                 "i2274"
                                                 "i2272"
                                                 "i2270"
                                                 "i2268"
                                                 "i2266"
                                                 "i2264"
                                                 "i2262"
                                                 "i2260"
                                                 "i2258"
                                                 "i2256"
                                                 "i2254"
                                                 "i2252"
                                                 "i2250"
                                                 "i2248"
                                                 "i2247"
                                                 "i2244"
                                                 "i2242"
                                                 "i2241"
                                                 "i2240"
                                                 "i2239"
                                                 "i2238"
                                                 "i2236"
                                                 "i2234"
                                                 "i2232"
                                                 "i2229"
                                                 "i2227"
                                                 "i2225"
                                                 "i2223"
                                                 "i2221"
                                                 "i2219"
                                                 "i2217"
                                                 "i2215"
                                                 "i2213"
                                                 "i2211"
                                                 "i2209"
                                                 "i2207"
                                                 "i2205"
                                                 "i2203"
                                                 "i2201"
                                                 "i2199"
                                                 "i2197"
                                                 "i2195"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i2033" "i2032" "i2031")))
                                             (hygiene guile)))
                                        (if (if (= (vector-length
                                                     '#(syntax-object
                                                        _
                                                        ((top)
                                                         #(ribcage
                                                           #(pat exp)
                                                           #((top) (top))
                                                           #("i5887" "i5888"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x
                                                             keys
                                                             clauses
                                                             r
                                                             mod)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i5876"
                                                             "i5877"
                                                             "i5878"
                                                             "i5879"
                                                             "i5880"))
                                                         #(ribcage
                                                           (gen-syntax-case
                                                             gen-clause
                                                             build-dispatch-call
                                                             convert-pattern)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i5686"
                                                            "i5684"
                                                            "i5682"
                                                            "i5680"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i2454"
                                                            "i2452"
                                                            "i2450"
                                                            "i2448"
                                                            "i2446"
                                                            "i2444"
                                                            "i2442"
                                                            "i2440"
                                                            "i2438"
                                                            "i2436"
                                                            "i2434"
                                                            "i2432"
                                                            "i2430"
                                                            "i2428"
                                                            "i2426"
                                                            "i2424"
                                                            "i2422"
                                                            "i2420"
                                                            "i2418"
                                                            "i2416"
                                                            "i2414"
                                                            "i2412"
                                                            "i2410"
                                                            "i2408"
                                                            "i2406"
                                                            "i2404"
                                                            "i2402"
                                                            "i2400"
                                                            "i2398"
                                                            "i2396"
                                                            "i2394"
                                                            "i2392"
                                                            "i2390"
                                                            "i2388"
                                                            "i2386"
                                                            "i2385"
                                                            "i2383"
                                                            "i2380"
                                                            "i2379"
                                                            "i2378"
                                                            "i2376"
                                                            "i2375"
                                                            "i2373"
                                                            "i2371"
                                                            "i2369"
                                                            "i2367"
                                                            "i2365"
                                                            "i2363"
                                                            "i2361"
                                                            "i2359"
                                                            "i2356"
                                                            "i2354"
                                                            "i2353"
                                                            "i2351"
                                                            "i2349"
                                                            "i2347"
                                                            "i2345"
                                                            "i2344"
                                                            "i2343"
                                                            "i2342"
                                                            "i2340"
                                                            "i2339"
                                                            "i2336"
                                                            "i2334"
                                                            "i2332"
                                                            "i2330"
                                                            "i2328"
                                                            "i2326"
                                                            "i2324"
                                                            "i2323"
                                                            "i2322"
                                                            "i2320"
                                                            "i2318"
                                                            "i2317"
                                                            "i2314"
                                                            "i2313"
                                                            "i2311"
                                                            "i2309"
                                                            "i2307"
                                                            "i2305"
                                                            "i2303"
                                                            "i2301"
                                                            "i2299"
                                                            "i2297"
                                                            "i2295"
                                                            "i2292"
                                                            "i2290"
                                                            "i2288"
                                                            "i2286"
                                                            "i2284"
                                                            "i2282"
                                                            "i2280"
                                                            "i2278"
                                                            "i2276"
                                                            "i2274"
                                                            "i2272"
                                                            "i2270"
                                                            "i2268"
                                                            "i2266"
                                                            "i2264"
                                                            "i2262"
                                                            "i2260"
                                                            "i2258"
                                                            "i2256"
                                                            "i2254"
                                                            "i2252"
                                                            "i2250"
                                                            "i2248"
                                                            "i2247"
                                                            "i2244"
                                                            "i2242"
                                                            "i2241"
                                                            "i2240"
                                                            "i2239"
                                                            "i2238"
                                                            "i2236"
                                                            "i2234"
                                                            "i2232"
                                                            "i2229"
                                                            "i2227"
                                                            "i2225"
                                                            "i2223"
                                                            "i2221"
                                                            "i2219"
                                                            "i2217"
                                                            "i2215"
                                                            "i2213"
                                                            "i2211"
                                                            "i2209"
                                                            "i2207"
                                                            "i2205"
                                                            "i2203"
                                                            "i2201"
                                                            "i2199"
                                                            "i2197"
                                                            "i2195"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("i2033"
                                                            "i2032"
                                                            "i2031")))
                                                        (hygiene guile)))
                                                   4)
                                              #t
                                              #f)
                                          '_
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("i5887" "i5888"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i5876"
                                                  "i5877"
                                                  "i5878"
                                                  "i5879"
                                                  "i5880"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("i5686"
                                                 "i5684"
                                                 "i5682"
                                                 "i5680"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i2454"
                                                 "i2452"
                                                 "i2450"
                                                 "i2448"
                                                 "i2446"
                                                 "i2444"
                                                 "i2442"
                                                 "i2440"
                                                 "i2438"
                                                 "i2436"
                                                 "i2434"
                                                 "i2432"
                                                 "i2430"
                                                 "i2428"
                                                 "i2426"
                                                 "i2424"
                                                 "i2422"
                                                 "i2420"
                                                 "i2418"
                                                 "i2416"
                                                 "i2414"
                                                 "i2412"
                                                 "i2410"
                                                 "i2408"
                                                 "i2406"
                                                 "i2404"
                                                 "i2402"
                                                 "i2400"
                                                 "i2398"
                                                 "i2396"
                                                 "i2394"
                                                 "i2392"
                                                 "i2390"
                                                 "i2388"
                                                 "i2386"
                                                 "i2385"
                                                 "i2383"
                                                 "i2380"
                                                 "i2379"
                                                 "i2378"
                                                 "i2376"
                                                 "i2375"
                                                 "i2373"
                                                 "i2371"
                                                 "i2369"
                                                 "i2367"
                                                 "i2365"
                                                 "i2363"
                                                 "i2361"
                                                 "i2359"
                                                 "i2356"
                                                 "i2354"
                                                 "i2353"
                                                 "i2351"
                                                 "i2349"
                                                 "i2347"
                                                 "i2345"
                                                 "i2344"
                                                 "i2343"
                                                 "i2342"
                                                 "i2340"
                                                 "i2339"
                                                 "i2336"
                                                 "i2334"
                                                 "i2332"
                                                 "i2330"
                                                 "i2328"
                                                 "i2326"
                                                 "i2324"
                                                 "i2323"
                                                 "i2322"
                                                 "i2320"
                                                 "i2318"
                                                 "i2317"
                                                 "i2314"
                                                 "i2313"
                                                 "i2311"
                                                 "i2309"
                                                 "i2307"
                                                 "i2305"
                                                 "i2303"
                                                 "i2301"
                                                 "i2299"
                                                 "i2297"
                                                 "i2295"
                                                 "i2292"
                                                 "i2290"
                                                 "i2288"
                                                 "i2286"
                                                 "i2284"
                                                 "i2282"
                                                 "i2280"
                                                 "i2278"
                                                 "i2276"
                                                 "i2274"
                                                 "i2272"
                                                 "i2270"
                                                 "i2268"
                                                 "i2266"
                                                 "i2264"
                                                 "i2262"
                                                 "i2260"
                                                 "i2258"
                                                 "i2256"
                                                 "i2254"
                                                 "i2252"
                                                 "i2250"
                                                 "i2248"
                                                 "i2247"
                                                 "i2244"
                                                 "i2242"
                                                 "i2241"
                                                 "i2240"
                                                 "i2239"
                                                 "i2238"
                                                 "i2236"
                                                 "i2234"
                                                 "i2232"
                                                 "i2229"
                                                 "i2227"
                                                 "i2225"
                                                 "i2223"
                                                 "i2221"
                                                 "i2219"
                                                 "i2217"
                                                 "i2215"
                                                 "i2213"
                                                 "i2211"
                                                 "i2209"
                                                 "i2207"
                                                 "i2205"
                                                 "i2203"
                                                 "i2201"
                                                 "i2199"
                                                 "i2197"
                                                 "i2195"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i2033" "i2032" "i2031")))
                                             (hygiene guile))))
                                 (eq? (#{id-var-name 6308}#
                                        '#(syntax-object
                                           pad
                                           ((top)
                                            #(ribcage
                                              #(pat exp)
                                              #((top) (top))
                                              #("i5887" "i5888"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x keys clauses r mod)
                                              #((top) (top) (top) (top) (top))
                                              #("i5876"
                                                "i5877"
                                                "i5878"
                                                "i5879"
                                                "i5880"))
                                            #(ribcage
                                              (gen-syntax-case
                                                gen-clause
                                                build-dispatch-call
                                                convert-pattern)
                                              ((top) (top) (top) (top))
                                              ("i5686"
                                               "i5684"
                                               "i5682"
                                               "i5680"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                expand-lambda-case
                                                lambda*-formals
                                                expand-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                expand-void
                                                eval-local-transformer
                                                expand-local-syntax
                                                expand-body
                                                expand-macro
                                                expand-application
                                                expand-expr
                                                expand
                                                syntax-type
                                                parse-when-list
                                                expand-install-global
                                                expand-top-sequence
                                                expand-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i2454"
                                               "i2452"
                                               "i2450"
                                               "i2448"
                                               "i2446"
                                               "i2444"
                                               "i2442"
                                               "i2440"
                                               "i2438"
                                               "i2436"
                                               "i2434"
                                               "i2432"
                                               "i2430"
                                               "i2428"
                                               "i2426"
                                               "i2424"
                                               "i2422"
                                               "i2420"
                                               "i2418"
                                               "i2416"
                                               "i2414"
                                               "i2412"
                                               "i2410"
                                               "i2408"
                                               "i2406"
                                               "i2404"
                                               "i2402"
                                               "i2400"
                                               "i2398"
                                               "i2396"
                                               "i2394"
                                               "i2392"
                                               "i2390"
                                               "i2388"
                                               "i2386"
                                               "i2385"
                                               "i2383"
                                               "i2380"
                                               "i2379"
                                               "i2378"
                                               "i2376"
                                               "i2375"
                                               "i2373"
                                               "i2371"
                                               "i2369"
                                               "i2367"
                                               "i2365"
                                               "i2363"
                                               "i2361"
                                               "i2359"
                                               "i2356"
                                               "i2354"
                                               "i2353"
                                               "i2351"
                                               "i2349"
                                               "i2347"
                                               "i2345"
                                               "i2344"
                                               "i2343"
                                               "i2342"
                                               "i2340"
                                               "i2339"
                                               "i2336"
                                               "i2334"
                                               "i2332"
                                               "i2330"
                                               "i2328"
                                               "i2326"
                                               "i2324"
                                               "i2323"
                                               "i2322"
                                               "i2320"
                                               "i2318"
                                               "i2317"
                                               "i2314"
                                               "i2313"
                                               "i2311"
                                               "i2309"
                                               "i2307"
                                               "i2305"
                                               "i2303"
                                               "i2301"
                                               "i2299"
                                               "i2297"
                                               "i2295"
                                               "i2292"
                                               "i2290"
                                               "i2288"
                                               "i2286"
                                               "i2284"
                                               "i2282"
                                               "i2280"
                                               "i2278"
                                               "i2276"
                                               "i2274"
                                               "i2272"
                                               "i2270"
                                               "i2268"
                                               "i2266"
                                               "i2264"
                                               "i2262"
                                               "i2260"
                                               "i2258"
                                               "i2256"
                                               "i2254"
                                               "i2252"
                                               "i2250"
                                               "i2248"
                                               "i2247"
                                               "i2244"
                                               "i2242"
                                               "i2241"
                                               "i2240"
                                               "i2239"
                                               "i2238"
                                               "i2236"
                                               "i2234"
                                               "i2232"
                                               "i2229"
                                               "i2227"
                                               "i2225"
                                               "i2223"
                                               "i2221"
                                               "i2219"
                                               "i2217"
                                               "i2215"
                                               "i2213"
                                               "i2211"
                                               "i2209"
                                               "i2207"
                                               "i2205"
                                               "i2203"
                                               "i2201"
                                               "i2199"
                                               "i2197"
                                               "i2195"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("i2033" "i2032" "i2031")))
                                           (hygiene guile))
                                        '(()))
                                      (#{id-var-name 6308}#
                                        '#(syntax-object
                                           _
                                           ((top)
                                            #(ribcage
                                              #(pat exp)
                                              #((top) (top))
                                              #("i5887" "i5888"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x keys clauses r mod)
                                              #((top) (top) (top) (top) (top))
                                              #("i5876"
                                                "i5877"
                                                "i5878"
                                                "i5879"
                                                "i5880"))
                                            #(ribcage
                                              (gen-syntax-case
                                                gen-clause
                                                build-dispatch-call
                                                convert-pattern)
                                              ((top) (top) (top) (top))
                                              ("i5686"
                                               "i5684"
                                               "i5682"
                                               "i5680"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                expand-lambda-case
                                                lambda*-formals
                                                expand-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                expand-void
                                                eval-local-transformer
                                                expand-local-syntax
                                                expand-body
                                                expand-macro
                                                expand-application
                                                expand-expr
                                                expand
                                                syntax-type
                                                parse-when-list
                                                expand-install-global
                                                expand-top-sequence
                                                expand-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i2454"
                                               "i2452"
                                               "i2450"
                                               "i2448"
                                               "i2446"
                                               "i2444"
                                               "i2442"
                                               "i2440"
                                               "i2438"
                                               "i2436"
                                               "i2434"
                                               "i2432"
                                               "i2430"
                                               "i2428"
                                               "i2426"
                                               "i2424"
                                               "i2422"
                                               "i2420"
                                               "i2418"
                                               "i2416"
                                               "i2414"
                                               "i2412"
                                               "i2410"
                                               "i2408"
                                               "i2406"
                                               "i2404"
                                               "i2402"
                                               "i2400"
                                               "i2398"
                                               "i2396"
                                               "i2394"
                                               "i2392"
                                               "i2390"
                                               "i2388"
                                               "i2386"
                                               "i2385"
                                               "i2383"
                                               "i2380"
                                               "i2379"
                                               "i2378"
                                               "i2376"
                                               "i2375"
                                               "i2373"
                                               "i2371"
                                               "i2369"
                                               "i2367"
                                               "i2365"
                                               "i2363"
                                               "i2361"
                                               "i2359"
                                               "i2356"
                                               "i2354"
                                               "i2353"
                                               "i2351"
                                               "i2349"
                                               "i2347"
                                               "i2345"
                                               "i2344"
                                               "i2343"
                                               "i2342"
                                               "i2340"
                                               "i2339"
                                               "i2336"
                                               "i2334"
                                               "i2332"
                                               "i2330"
                                               "i2328"
                                               "i2326"
                                               "i2324"
                                               "i2323"
                                               "i2322"
                                               "i2320"
                                               "i2318"
                                               "i2317"
                                               "i2314"
                                               "i2313"
                                               "i2311"
                                               "i2309"
                                               "i2307"
                                               "i2305"
                                               "i2303"
                                               "i2301"
                                               "i2299"
                                               "i2297"
                                               "i2295"
                                               "i2292"
                                               "i2290"
                                               "i2288"
                                               "i2286"
                                               "i2284"
                                               "i2282"
                                               "i2280"
                                               "i2278"
                                               "i2276"
                                               "i2274"
                                               "i2272"
                                               "i2270"
                                               "i2268"
                                               "i2266"
                                               "i2264"
                                               "i2262"
                                               "i2260"
                                               "i2258"
                                               "i2256"
                                               "i2254"
                                               "i2252"
                                               "i2250"
                                               "i2248"
                                               "i2247"
                                               "i2244"
                                               "i2242"
                                               "i2241"
                                               "i2240"
                                               "i2239"
                                               "i2238"
                                               "i2236"
                                               "i2234"
                                               "i2232"
                                               "i2229"
                                               "i2227"
                                               "i2225"
                                               "i2223"
                                               "i2221"
                                               "i2219"
                                               "i2217"
                                               "i2215"
                                               "i2213"
                                               "i2211"
                                               "i2209"
                                               "i2207"
                                               "i2205"
                                               "i2203"
                                               "i2201"
                                               "i2199"
                                               "i2197"
                                               "i2195"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("i2033" "i2032" "i2031")))
                                           (hygiene guile))
                                        '(())))
                                 #f)
                             (#{expand 6321}#
                               #{exp 14158}#
                               #{r 14114}#
                               '(())
                               #{mod 14115}#)
                             (let ((#{labels 14361}#
                                     (list (symbol->string (gensym "i"))))
                                   (#{var 14362}#
                                     (let ((#{id 14400}#
                                             (if (if (vector? #{pat 14157}#)
                                                   (if (= (vector-length
                                                            #{pat 14157}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{pat 14157}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{pat 14157}# 1)
                                               #{pat 14157}#)))
                                       (gensym
                                         (string-append
                                           (symbol->string #{id 14400}#)
                                           " ")))))
                               (#{build-application 6256}#
                                 #f
                                 (#{build-simple-lambda 6265}#
                                   #f
                                   (list (syntax->datum #{pat 14157}#))
                                   #f
                                   (list #{var 14362}#)
                                   '()
                                   (#{expand 6321}#
                                     #{exp 14158}#
                                     (#{extend-env 6283}#
                                       #{labels 14361}#
                                       (list (cons 'syntax
                                                   (cons #{var 14362}# 0)))
                                       #{r 14114}#)
                                     (#{make-binding-wrap 6303}#
                                       (list #{pat 14157}#)
                                       #{labels 14361}#
                                       '(()))
                                     #{mod 14115}#))
                                 (list #{x 14111}#))))
                           (#{gen-clause 13711}#
                             #{x 14111}#
                             #{keys 14112}#
                             (cdr #{clauses 14113}#)
                             #{r 14114}#
                             #{pat 14157}#
                             #t
                             #{exp 14158}#
                             #{mod 14115}#)))
                       #{tmp 14155}#)
                     (let ((#{tmp 14670}#
                             ($sc-dispatch #{tmp 14154}# '(any any any))))
                       (if #{tmp 14670}#
                         (@apply
                           (lambda (#{pat 14672}#
                                    #{fender 14673}#
                                    #{exp 14674}#)
                             (#{gen-clause 13711}#
                               #{x 14111}#
                               #{keys 14112}#
                               (cdr #{clauses 14113}#)
                               #{r 14114}#
                               #{pat 14672}#
                               #{fender 14673}#
                               #{exp 14674}#
                               #{mod 14115}#))
                           #{tmp 14670}#)
                         (syntax-violation
                           'syntax-case
                           "invalid clause"
                           (car #{clauses 14113}#)))))))))))
        (lambda (#{e 13713}#
                 #{r 13714}#
                 #{w 13715}#
                 #{s 13716}#
                 #{mod 13717}#)
          (let ((#{e 13718}#
                  (#{wrap 6314}#
                    (begin
                      (if (if (pair? #{e 13713}#) #{s 13716}# #f)
                        (set-source-properties! #{e 13713}# #{s 13716}#))
                      #{e 13713}#)
                    #{w 13715}#
                    #{mod 13717}#)))
            (let ((#{tmp 13720}#
                    ($sc-dispatch
                      #{e 13718}#
                      '(_ any each-any . each-any))))
              (if #{tmp 13720}#
                (@apply
                  (lambda (#{val 13745}# #{key 13746}# #{m 13747}#)
                    (if (and-map
                          (lambda (#{x 13748}#)
                            (if (if (symbol? #{x 13748}#)
                                  #t
                                  (if (if (vector? #{x 13748}#)
                                        (if (= (vector-length #{x 13748}#) 4)
                                          (eq? (vector-ref #{x 13748}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{x 13748}# 1))
                                    #f))
                              (not (if (if (if (vector? #{x 13748}#)
                                             (if (= (vector-length #{x 13748}#)
                                                    4)
                                               (eq? (vector-ref #{x 13748}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (symbol? (vector-ref #{x 13748}# 1))
                                         #f)
                                     (if (eq? (if (if (vector? #{x 13748}#)
                                                    (if (= (vector-length
                                                             #{x 13748}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{x 13748}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (vector-ref #{x 13748}# 1)
                                                #{x 13748}#)
                                              (if (if (= (vector-length
                                                           '#(syntax-object
                                                              ...
                                                              ((top)
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4206"))
                                                               #(ribcage
                                                                 (lambda-var-list
                                                                   gen-var
                                                                   strip
                                                                   expand-lambda-case
                                                                   lambda*-formals
                                                                   expand-simple-lambda
                                                                   lambda-formals
                                                                   ellipsis?
                                                                   expand-void
                                                                   eval-local-transformer
                                                                   expand-local-syntax
                                                                   expand-body
                                                                   expand-macro
                                                                   expand-application
                                                                   expand-expr
                                                                   expand
                                                                   syntax-type
                                                                   parse-when-list
                                                                   expand-install-global
                                                                   expand-top-sequence
                                                                   expand-sequence
                                                                   source-wrap
                                                                   wrap
                                                                   bound-id-member?
                                                                   distinct-bound-ids?
                                                                   valid-bound-ids?
                                                                   bound-id=?
                                                                   free-id=?
                                                                   id-var-name
                                                                   same-marks?
                                                                   join-marks
                                                                   join-wraps
                                                                   smart-append
                                                                   make-binding-wrap
                                                                   extend-ribcage!
                                                                   make-empty-ribcage
                                                                   new-mark
                                                                   anti-mark
                                                                   the-anti-mark
                                                                   top-marked?
                                                                   top-wrap
                                                                   empty-wrap
                                                                   set-ribcage-labels!
                                                                   set-ribcage-marks!
                                                                   set-ribcage-symnames!
                                                                   ribcage-labels
                                                                   ribcage-marks
                                                                   ribcage-symnames
                                                                   ribcage?
                                                                   make-ribcage
                                                                   gen-labels
                                                                   gen-label
                                                                   make-rename
                                                                   rename-marks
                                                                   rename-new
                                                                   rename-old
                                                                   subst-rename?
                                                                   wrap-subst
                                                                   wrap-marks
                                                                   make-wrap
                                                                   id-sym-name&marks
                                                                   id-sym-name
                                                                   id?
                                                                   nonsymbol-id?
                                                                   global-extend
                                                                   lookup
                                                                   macros-only-env
                                                                   extend-var-env
                                                                   extend-env
                                                                   null-env
                                                                   binding-value
                                                                   binding-type
                                                                   make-binding
                                                                   arg-check
                                                                   source-annotation
                                                                   no-source
                                                                   set-syntax-object-module!
                                                                   set-syntax-object-wrap!
                                                                   set-syntax-object-expression!
                                                                   syntax-object-module
                                                                   syntax-object-wrap
                                                                   syntax-object-expression
                                                                   syntax-object?
                                                                   make-syntax-object
                                                                   build-lexical-var
                                                                   build-letrec
                                                                   build-named-let
                                                                   build-let
                                                                   build-sequence
                                                                   build-data
                                                                   build-primref
                                                                   build-lambda-case
                                                                   build-case-lambda
                                                                   build-simple-lambda
                                                                   build-global-definition
                                                                   build-global-assignment
                                                                   build-global-reference
                                                                   analyze-variable
                                                                   build-lexical-assignment
                                                                   build-lexical-reference
                                                                   build-dynlet
                                                                   build-conditional
                                                                   build-application
                                                                   build-void
                                                                   maybe-name-value!
                                                                   decorate-source
                                                                   get-global-definition-hook
                                                                   put-global-definition-hook
                                                                   gensym-hook
                                                                   local-eval-hook
                                                                   top-level-eval-hook
                                                                   fx<
                                                                   fx=
                                                                   fx-
                                                                   fx+
                                                                   set-lambda-meta!
                                                                   lambda-meta
                                                                   lambda?
                                                                   make-dynlet
                                                                   make-letrec
                                                                   make-let
                                                                   make-lambda-case
                                                                   make-lambda
                                                                   make-sequence
                                                                   make-application
                                                                   make-conditional
                                                                   make-toplevel-define
                                                                   make-toplevel-set
                                                                   make-toplevel-ref
                                                                   make-module-set
                                                                   make-module-ref
                                                                   make-lexical-set
                                                                   make-lexical-ref
                                                                   make-primitive-ref
                                                                   make-const
                                                                   make-void)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i2454"
                                                                  "i2452"
                                                                  "i2450"
                                                                  "i2448"
                                                                  "i2446"
                                                                  "i2444"
                                                                  "i2442"
                                                                  "i2440"
                                                                  "i2438"
                                                                  "i2436"
                                                                  "i2434"
                                                                  "i2432"
                                                                  "i2430"
                                                                  "i2428"
                                                                  "i2426"
                                                                  "i2424"
                                                                  "i2422"
                                                                  "i2420"
                                                                  "i2418"
                                                                  "i2416"
                                                                  "i2414"
                                                                  "i2412"
                                                                  "i2410"
                                                                  "i2408"
                                                                  "i2406"
                                                                  "i2404"
                                                                  "i2402"
                                                                  "i2400"
                                                                  "i2398"
                                                                  "i2396"
                                                                  "i2394"
                                                                  "i2392"
                                                                  "i2390"
                                                                  "i2388"
                                                                  "i2386"
                                                                  "i2385"
                                                                  "i2383"
                                                                  "i2380"
                                                                  "i2379"
                                                                  "i2378"
                                                                  "i2376"
                                                                  "i2375"
                                                                  "i2373"
                                                                  "i2371"
                                                                  "i2369"
                                                                  "i2367"
                                                                  "i2365"
                                                                  "i2363"
                                                                  "i2361"
                                                                  "i2359"
                                                                  "i2356"
                                                                  "i2354"
                                                                  "i2353"
                                                                  "i2351"
                                                                  "i2349"
                                                                  "i2347"
                                                                  "i2345"
                                                                  "i2344"
                                                                  "i2343"
                                                                  "i2342"
                                                                  "i2340"
                                                                  "i2339"
                                                                  "i2336"
                                                                  "i2334"
                                                                  "i2332"
                                                                  "i2330"
                                                                  "i2328"
                                                                  "i2326"
                                                                  "i2324"
                                                                  "i2323"
                                                                  "i2322"
                                                                  "i2320"
                                                                  "i2318"
                                                                  "i2317"
                                                                  "i2314"
                                                                  "i2313"
                                                                  "i2311"
                                                                  "i2309"
                                                                  "i2307"
                                                                  "i2305"
                                                                  "i2303"
                                                                  "i2301"
                                                                  "i2299"
                                                                  "i2297"
                                                                  "i2295"
                                                                  "i2292"
                                                                  "i2290"
                                                                  "i2288"
                                                                  "i2286"
                                                                  "i2284"
                                                                  "i2282"
                                                                  "i2280"
                                                                  "i2278"
                                                                  "i2276"
                                                                  "i2274"
                                                                  "i2272"
                                                                  "i2270"
                                                                  "i2268"
                                                                  "i2266"
                                                                  "i2264"
                                                                  "i2262"
                                                                  "i2260"
                                                                  "i2258"
                                                                  "i2256"
                                                                  "i2254"
                                                                  "i2252"
                                                                  "i2250"
                                                                  "i2248"
                                                                  "i2247"
                                                                  "i2244"
                                                                  "i2242"
                                                                  "i2241"
                                                                  "i2240"
                                                                  "i2239"
                                                                  "i2238"
                                                                  "i2236"
                                                                  "i2234"
                                                                  "i2232"
                                                                  "i2229"
                                                                  "i2227"
                                                                  "i2225"
                                                                  "i2223"
                                                                  "i2221"
                                                                  "i2219"
                                                                  "i2217"
                                                                  "i2215"
                                                                  "i2213"
                                                                  "i2211"
                                                                  "i2209"
                                                                  "i2207"
                                                                  "i2205"
                                                                  "i2203"
                                                                  "i2201"
                                                                  "i2199"
                                                                  "i2197"
                                                                  "i2195"))
                                                               #(ribcage
                                                                 (define-structure
                                                                   define-expansion-accessors
                                                                   define-expansion-constructors)
                                                                 ((top)
                                                                  (top)
                                                                  (top))
                                                                 ("i2033"
                                                                  "i2032"
                                                                  "i2031")))
                                                              (hygiene guile)))
                                                         4)
                                                    #t
                                                    #f)
                                                '...
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4206"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        expand-lambda-case
                                                        lambda*-formals
                                                        expand-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        expand-void
                                                        eval-local-transformer
                                                        expand-local-syntax
                                                        expand-body
                                                        expand-macro
                                                        expand-application
                                                        expand-expr
                                                        expand
                                                        syntax-type
                                                        parse-when-list
                                                        expand-install-global
                                                        expand-top-sequence
                                                        expand-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i2454"
                                                       "i2452"
                                                       "i2450"
                                                       "i2448"
                                                       "i2446"
                                                       "i2444"
                                                       "i2442"
                                                       "i2440"
                                                       "i2438"
                                                       "i2436"
                                                       "i2434"
                                                       "i2432"
                                                       "i2430"
                                                       "i2428"
                                                       "i2426"
                                                       "i2424"
                                                       "i2422"
                                                       "i2420"
                                                       "i2418"
                                                       "i2416"
                                                       "i2414"
                                                       "i2412"
                                                       "i2410"
                                                       "i2408"
                                                       "i2406"
                                                       "i2404"
                                                       "i2402"
                                                       "i2400"
                                                       "i2398"
                                                       "i2396"
                                                       "i2394"
                                                       "i2392"
                                                       "i2390"
                                                       "i2388"
                                                       "i2386"
                                                       "i2385"
                                                       "i2383"
                                                       "i2380"
                                                       "i2379"
                                                       "i2378"
                                                       "i2376"
                                                       "i2375"
                                                       "i2373"
                                                       "i2371"
                                                       "i2369"
                                                       "i2367"
                                                       "i2365"
                                                       "i2363"
                                                       "i2361"
                                                       "i2359"
                                                       "i2356"
                                                       "i2354"
                                                       "i2353"
                                                       "i2351"
                                                       "i2349"
                                                       "i2347"
                                                       "i2345"
                                                       "i2344"
                                                       "i2343"
                                                       "i2342"
                                                       "i2340"
                                                       "i2339"
                                                       "i2336"
                                                       "i2334"
                                                       "i2332"
                                                       "i2330"
                                                       "i2328"
                                                       "i2326"
                                                       "i2324"
                                                       "i2323"
                                                       "i2322"
                                                       "i2320"
                                                       "i2318"
                                                       "i2317"
                                                       "i2314"
                                                       "i2313"
                                                       "i2311"
                                                       "i2309"
                                                       "i2307"
                                                       "i2305"
                                                       "i2303"
                                                       "i2301"
                                                       "i2299"
                                                       "i2297"
                                                       "i2295"
                                                       "i2292"
                                                       "i2290"
                                                       "i2288"
                                                       "i2286"
                                                       "i2284"
                                                       "i2282"
                                                       "i2280"
                                                       "i2278"
                                                       "i2276"
                                                       "i2274"
                                                       "i2272"
                                                       "i2270"
                                                       "i2268"
                                                       "i2266"
                                                       "i2264"
                                                       "i2262"
                                                       "i2260"
                                                       "i2258"
                                                       "i2256"
                                                       "i2254"
                                                       "i2252"
                                                       "i2250"
                                                       "i2248"
                                                       "i2247"
                                                       "i2244"
                                                       "i2242"
                                                       "i2241"
                                                       "i2240"
                                                       "i2239"
                                                       "i2238"
                                                       "i2236"
                                                       "i2234"
                                                       "i2232"
                                                       "i2229"
                                                       "i2227"
                                                       "i2225"
                                                       "i2223"
                                                       "i2221"
                                                       "i2219"
                                                       "i2217"
                                                       "i2215"
                                                       "i2213"
                                                       "i2211"
                                                       "i2209"
                                                       "i2207"
                                                       "i2205"
                                                       "i2203"
                                                       "i2201"
                                                       "i2199"
                                                       "i2197"
                                                       "i2195"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("i2033"
                                                       "i2032"
                                                       "i2031")))
                                                   (hygiene guile))))
                                       (eq? (#{id-var-name 6308}#
                                              #{x 13748}#
                                              '(()))
                                            (#{id-var-name 6308}#
                                              '#(syntax-object
                                                 ...
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i4206"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      expand-lambda-case
                                                      lambda*-formals
                                                      expand-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      expand-void
                                                      eval-local-transformer
                                                      expand-local-syntax
                                                      expand-body
                                                      expand-macro
                                                      expand-application
                                                      expand-expr
                                                      expand
                                                      syntax-type
                                                      parse-when-list
                                                      expand-install-global
                                                      expand-top-sequence
                                                      expand-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      maybe-name-value!
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i2454"
                                                     "i2452"
                                                     "i2450"
                                                     "i2448"
                                                     "i2446"
                                                     "i2444"
                                                     "i2442"
                                                     "i2440"
                                                     "i2438"
                                                     "i2436"
                                                     "i2434"
                                                     "i2432"
                                                     "i2430"
                                                     "i2428"
                                                     "i2426"
                                                     "i2424"
                                                     "i2422"
                                                     "i2420"
                                                     "i2418"
                                                     "i2416"
                                                     "i2414"
                                                     "i2412"
                                                     "i2410"
                                                     "i2408"
                                                     "i2406"
                                                     "i2404"
                                                     "i2402"
                                                     "i2400"
                                                     "i2398"
                                                     "i2396"
                                                     "i2394"
                                                     "i2392"
                                                     "i2390"
                                                     "i2388"
                                                     "i2386"
                                                     "i2385"
                                                     "i2383"
                                                     "i2380"
                                                     "i2379"
                                                     "i2378"
                                                     "i2376"
                                                     "i2375"
                                                     "i2373"
                                                     "i2371"
                                                     "i2369"
                                                     "i2367"
                                                     "i2365"
                                                     "i2363"
                                                     "i2361"
                                                     "i2359"
                                                     "i2356"
                                                     "i2354"
                                                     "i2353"
                                                     "i2351"
                                                     "i2349"
                                                     "i2347"
                                                     "i2345"
                                                     "i2344"
                                                     "i2343"
                                                     "i2342"
                                                     "i2340"
                                                     "i2339"
                                                     "i2336"
                                                     "i2334"
                                                     "i2332"
                                                     "i2330"
                                                     "i2328"
                                                     "i2326"
                                                     "i2324"
                                                     "i2323"
                                                     "i2322"
                                                     "i2320"
                                                     "i2318"
                                                     "i2317"
                                                     "i2314"
                                                     "i2313"
                                                     "i2311"
                                                     "i2309"
                                                     "i2307"
                                                     "i2305"
                                                     "i2303"
                                                     "i2301"
                                                     "i2299"
                                                     "i2297"
                                                     "i2295"
                                                     "i2292"
                                                     "i2290"
                                                     "i2288"
                                                     "i2286"
                                                     "i2284"
                                                     "i2282"
                                                     "i2280"
                                                     "i2278"
                                                     "i2276"
                                                     "i2274"
                                                     "i2272"
                                                     "i2270"
                                                     "i2268"
                                                     "i2266"
                                                     "i2264"
                                                     "i2262"
                                                     "i2260"
                                                     "i2258"
                                                     "i2256"
                                                     "i2254"
                                                     "i2252"
                                                     "i2250"
                                                     "i2248"
                                                     "i2247"
                                                     "i2244"
                                                     "i2242"
                                                     "i2241"
                                                     "i2240"
                                                     "i2239"
                                                     "i2238"
                                                     "i2236"
                                                     "i2234"
                                                     "i2232"
                                                     "i2229"
                                                     "i2227"
                                                     "i2225"
                                                     "i2223"
                                                     "i2221"
                                                     "i2219"
                                                     "i2217"
                                                     "i2215"
                                                     "i2213"
                                                     "i2211"
                                                     "i2209"
                                                     "i2207"
                                                     "i2205"
                                                     "i2203"
                                                     "i2201"
                                                     "i2199"
                                                     "i2197"
                                                     "i2195"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors)
                                                    ((top) (top) (top))
                                                    ("i2033" "i2032" "i2031")))
                                                 (hygiene guile))
                                              '(())))
                                       #f)
                                     #f))
                              #f))
                          #{key 13746}#)
                      (let ((#{x 13874}#
                              (gensym
                                (string-append (symbol->string 'tmp) " "))))
                        (#{build-application 6256}#
                          #{s 13716}#
                          (let ((#{req 14004}# (list 'tmp))
                                (#{vars 14006}# (list #{x 13874}#))
                                (#{exp 14008}#
                                  (#{gen-syntax-case 13712}#
                                    (make-struct/no-tail
                                      (vector-ref %expanded-vtables 3)
                                      #f
                                      'tmp
                                      #{x 13874}#)
                                    #{key 13746}#
                                    #{m 13747}#
                                    #{r 13714}#
                                    #{mod 13717}#)))
                            (let ((#{body 14013}#
                                    (make-struct/no-tail
                                      (vector-ref %expanded-vtables 14)
                                      #f
                                      #{req 14004}#
                                      #f
                                      #f
                                      #f
                                      '()
                                      #{vars 14006}#
                                      #{exp 14008}#
                                      #f)))
                              (make-struct/no-tail
                                (vector-ref %expanded-vtables 13)
                                #f
                                '()
                                #{body 14013}#)))
                          (list (#{expand 6321}#
                                  #{val 13745}#
                                  #{r 13714}#
                                  '(())
                                  #{mod 13717}#))))
                      (syntax-violation
                        'syntax-case
                        "invalid literals list"
                        #{e 13718}#)))
                  #{tmp 13720}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 13718}#)))))))
    (set! macroexpand
      (lambda*
        (#{x 16451}#
          #:optional
          (#{m 16452}# 'e)
          (#{esew 16453}# '(eval)))
        (#{expand-top-sequence 6317}#
          (list #{x 16451}#)
          '()
          '((top))
          #f
          #{m 16452}#
          #{esew 16453}#
          (cons 'hygiene (module-name (current-module))))))
    (set! identifier?
      (lambda (#{x 16456}#)
        (if (if (vector? #{x 16456}#)
              (if (= (vector-length #{x 16456}#) 4)
                (eq? (vector-ref #{x 16456}# 0) 'syntax-object)
                #f)
              #f)
          (symbol? (vector-ref #{x 16456}# 1))
          #f)))
    (set! datum->syntax
      (lambda (#{id 16481}# #{datum 16482}#)
        (let ((#{wrap 16487}# (vector-ref #{id 16481}# 2))
              (#{module 16488}# (vector-ref #{id 16481}# 3)))
          (vector
            'syntax-object
            #{datum 16482}#
            #{wrap 16487}#
            #{module 16488}#))))
    (set! syntax->datum
      (lambda (#{x 16495}#)
        (#{strip 6334}# #{x 16495}# '(()))))
    (set! syntax-source
      (lambda (#{x 16498}#)
        (#{source-annotation 6282}# #{x 16498}#)))
    (set! generate-temporaries
      (lambda (#{ls 16651}#)
        (begin
          (if (not (list? #{ls 16651}#))
            (syntax-violation
              'generate-temporaries
              "invalid argument"
              #{ls 16651}#))
          (let ((#{mod 16659}#
                  (cons 'hygiene (module-name (current-module)))))
            (map (lambda (#{x 16660}#)
                   (#{wrap 6314}# (gensym) '((top)) #{mod 16659}#))
                 #{ls 16651}#)))))
    (set! free-identifier=?
      (lambda (#{x 16664}# #{y 16665}#)
        (begin
          (if (not (if (if (vector? #{x 16664}#)
                         (if (= (vector-length #{x 16664}#) 4)
                           (eq? (vector-ref #{x 16664}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 16664}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{x 16664}#))
          (if (not (if (if (vector? #{y 16665}#)
                         (if (= (vector-length #{y 16665}#) 4)
                           (eq? (vector-ref #{y 16665}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 16665}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{y 16665}#))
          (if (eq? (if (if (vector? #{x 16664}#)
                         (if (= (vector-length #{x 16664}#) 4)
                           (eq? (vector-ref #{x 16664}# 0) 'syntax-object)
                           #f)
                         #f)
                     (vector-ref #{x 16664}# 1)
                     #{x 16664}#)
                   (if (if (vector? #{y 16665}#)
                         (if (= (vector-length #{y 16665}#) 4)
                           (eq? (vector-ref #{y 16665}# 0) 'syntax-object)
                           #f)
                         #f)
                     (vector-ref #{y 16665}# 1)
                     #{y 16665}#))
            (eq? (#{id-var-name 6308}# #{x 16664}# '(()))
                 (#{id-var-name 6308}# #{y 16665}# '(())))
            #f))))
    (set! bound-identifier=?
      (lambda (#{x 16815}# #{y 16816}#)
        (begin
          (if (not (if (if (vector? #{x 16815}#)
                         (if (= (vector-length #{x 16815}#) 4)
                           (eq? (vector-ref #{x 16815}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 16815}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{x 16815}#))
          (if (not (if (if (vector? #{y 16816}#)
                         (if (= (vector-length #{y 16816}#) 4)
                           (eq? (vector-ref #{y 16816}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 16816}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{y 16816}#))
          (if (if (if (vector? #{x 16815}#)
                    (if (= (vector-length #{x 16815}#) 4)
                      (eq? (vector-ref #{x 16815}# 0) 'syntax-object)
                      #f)
                    #f)
                (if (vector? #{y 16816}#)
                  (if (= (vector-length #{y 16816}#) 4)
                    (eq? (vector-ref #{y 16816}# 0) 'syntax-object)
                    #f)
                  #f)
                #f)
            (if (eq? (vector-ref #{x 16815}# 1)
                     (vector-ref #{y 16816}# 1))
              (#{same-marks? 6307}#
                (car (vector-ref #{x 16815}# 2))
                (car (vector-ref #{y 16816}# 2)))
              #f)
            (eq? #{x 16815}# #{y 16816}#)))))
    (set! syntax-violation
      (lambda*
        (#{who 16949}#
          #{message 16950}#
          #{form 16951}#
          #:optional
          (#{subform 16952}# #f))
        (begin
          (if (not (if (not #{who 16949}#)
                     (not #{who 16949}#)
                     (let ((#{t 16970}# (string? #{who 16949}#)))
                       (if #{t 16970}#
                         #{t 16970}#
                         (symbol? #{who 16949}#)))))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{who 16949}#))
          (if (not (string? #{message 16950}#))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{message 16950}#))
          (throw 'syntax-error
                 #{who 16949}#
                 #{message 16950}#
                 (#{source-annotation 6282}#
                   (if #{form 16951}#
                     #{form 16951}#
                     #{subform 16952}#))
                 (#{strip 6334}# #{form 16951}# '(()))
                 (if #{subform 16952}#
                   (#{strip 6334}# #{subform 16952}# '(()))
                   #f)))))
    (letrec*
      ((#{match-each 17173}#
         (lambda (#{e 17760}#
                  #{p 17761}#
                  #{w 17762}#
                  #{mod 17763}#)
           (if (pair? #{e 17760}#)
             (let ((#{first 17764}#
                     (#{match 17179}#
                       (car #{e 17760}#)
                       #{p 17761}#
                       #{w 17762}#
                       '()
                       #{mod 17763}#)))
               (if #{first 17764}#
                 (let ((#{rest 17767}#
                         (#{match-each 17173}#
                           (cdr #{e 17760}#)
                           #{p 17761}#
                           #{w 17762}#
                           #{mod 17763}#)))
                   (if #{rest 17767}#
                     (cons #{first 17764}# #{rest 17767}#)
                     #f))
                 #f))
             (if (null? #{e 17760}#)
               '()
               (if (if (vector? #{e 17760}#)
                     (if (= (vector-length #{e 17760}#) 4)
                       (eq? (vector-ref #{e 17760}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each 17173}#
                   (vector-ref #{e 17760}# 1)
                   #{p 17761}#
                   (#{join-wraps 6305}#
                     #{w 17762}#
                     (vector-ref #{e 17760}# 2))
                   (vector-ref #{e 17760}# 3))
                 #f)))))
       (#{match-each-any 17175}#
         (lambda (#{e 17795}# #{w 17796}# #{mod 17797}#)
           (if (pair? #{e 17795}#)
             (let ((#{l 17798}#
                     (#{match-each-any 17175}#
                       (cdr #{e 17795}#)
                       #{w 17796}#
                       #{mod 17797}#)))
               (if #{l 17798}#
                 (cons (#{wrap 6314}#
                         (car #{e 17795}#)
                         #{w 17796}#
                         #{mod 17797}#)
                       #{l 17798}#)
                 #f))
             (if (null? #{e 17795}#)
               '()
               (if (if (vector? #{e 17795}#)
                     (if (= (vector-length #{e 17795}#) 4)
                       (eq? (vector-ref #{e 17795}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each-any 17175}#
                   (vector-ref #{e 17795}# 1)
                   (#{join-wraps 6305}#
                     #{w 17796}#
                     (vector-ref #{e 17795}# 2))
                   #{mod 17797}#)
                 #f)))))
       (#{match-empty 17176}#
         (lambda (#{p 17822}# #{r 17823}#)
           (if (null? #{p 17822}#)
             #{r 17823}#
             (if (eq? #{p 17822}# '_)
               #{r 17823}#
               (if (eq? #{p 17822}# 'any)
                 (cons '() #{r 17823}#)
                 (if (pair? #{p 17822}#)
                   (#{match-empty 17176}#
                     (car #{p 17822}#)
                     (#{match-empty 17176}#
                       (cdr #{p 17822}#)
                       #{r 17823}#))
                   (if (eq? #{p 17822}# 'each-any)
                     (cons '() #{r 17823}#)
                     (let ((#{atom-key 17824}# (vector-ref #{p 17822}# 0)))
                       (if (eqv? #{atom-key 17824}# 'each)
                         (#{match-empty 17176}#
                           (vector-ref #{p 17822}# 1)
                           #{r 17823}#)
                         (if (eqv? #{atom-key 17824}# 'each+)
                           (#{match-empty 17176}#
                             (vector-ref #{p 17822}# 1)
                             (#{match-empty 17176}#
                               (reverse (vector-ref #{p 17822}# 2))
                               (#{match-empty 17176}#
                                 (vector-ref #{p 17822}# 3)
                                 #{r 17823}#)))
                           (if (if (eqv? #{atom-key 17824}# 'free-id)
                                 #t
                                 (eqv? #{atom-key 17824}# 'atom))
                             #{r 17823}#
                             (if (eqv? #{atom-key 17824}# 'vector)
                               (#{match-empty 17176}#
                                 (vector-ref #{p 17822}# 1)
                                 #{r 17823}#)))))))))))))
       (#{combine 17177}#
         (lambda (#{r* 17843}# #{r 17844}#)
           (if (null? (car #{r* 17843}#))
             #{r 17844}#
             (cons (map car #{r* 17843}#)
                   (#{combine 17177}#
                     (map cdr #{r* 17843}#)
                     #{r 17844}#)))))
       (#{match* 17178}#
         (lambda (#{e 17208}#
                  #{p 17209}#
                  #{w 17210}#
                  #{r 17211}#
                  #{mod 17212}#)
           (if (null? #{p 17209}#)
             (if (null? #{e 17208}#) #{r 17211}# #f)
             (if (pair? #{p 17209}#)
               (if (pair? #{e 17208}#)
                 (#{match 17179}#
                   (car #{e 17208}#)
                   (car #{p 17209}#)
                   #{w 17210}#
                   (#{match 17179}#
                     (cdr #{e 17208}#)
                     (cdr #{p 17209}#)
                     #{w 17210}#
                     #{r 17211}#
                     #{mod 17212}#)
                   #{mod 17212}#)
                 #f)
               (if (eq? #{p 17209}# 'each-any)
                 (let ((#{l 17217}#
                         (#{match-each-any 17175}#
                           #{e 17208}#
                           #{w 17210}#
                           #{mod 17212}#)))
                   (if #{l 17217}#
                     (cons #{l 17217}# #{r 17211}#)
                     #f))
                 (let ((#{atom-key 17222}# (vector-ref #{p 17209}# 0)))
                   (if (eqv? #{atom-key 17222}# 'each)
                     (if (null? #{e 17208}#)
                       (#{match-empty 17176}#
                         (vector-ref #{p 17209}# 1)
                         #{r 17211}#)
                       (let ((#{l 17229}#
                               (#{match-each 17173}#
                                 #{e 17208}#
                                 (vector-ref #{p 17209}# 1)
                                 #{w 17210}#
                                 #{mod 17212}#)))
                         (if #{l 17229}#
                           (letrec*
                             ((#{collect 17232}#
                                (lambda (#{l 17283}#)
                                  (if (null? (car #{l 17283}#))
                                    #{r 17211}#
                                    (cons (map car #{l 17283}#)
                                          (#{collect 17232}#
                                            (map cdr #{l 17283}#)))))))
                             (#{collect 17232}# #{l 17229}#))
                           #f)))
                     (if (eqv? #{atom-key 17222}# 'each+)
                       (call-with-values
                         (lambda ()
                           (let ((#{x-pat 17292}# (vector-ref #{p 17209}# 1))
                                 (#{y-pat 17293}# (vector-ref #{p 17209}# 2))
                                 (#{z-pat 17294}# (vector-ref #{p 17209}# 3)))
                             (letrec*
                               ((#{f 17298}#
                                  (lambda (#{e 17300}# #{w 17301}#)
                                    (if (pair? #{e 17300}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{f 17298}#
                                            (cdr #{e 17300}#)
                                            #{w 17301}#))
                                        (lambda (#{xr* 17302}#
                                                 #{y-pat 17303}#
                                                 #{r 17304}#)
                                          (if #{r 17304}#
                                            (if (null? #{y-pat 17303}#)
                                              (let ((#{xr 17305}#
                                                      (#{match 17179}#
                                                        (car #{e 17300}#)
                                                        #{x-pat 17292}#
                                                        #{w 17301}#
                                                        '()
                                                        #{mod 17212}#)))
                                                (if #{xr 17305}#
                                                  (values
                                                    (cons #{xr 17305}#
                                                          #{xr* 17302}#)
                                                    #{y-pat 17303}#
                                                    #{r 17304}#)
                                                  (values #f #f #f)))
                                              (values
                                                '()
                                                (cdr #{y-pat 17303}#)
                                                (#{match 17179}#
                                                  (car #{e 17300}#)
                                                  (car #{y-pat 17303}#)
                                                  #{w 17301}#
                                                  #{r 17304}#
                                                  #{mod 17212}#)))
                                            (values #f #f #f))))
                                      (if (if (vector? #{e 17300}#)
                                            (if (= (vector-length #{e 17300}#)
                                                   4)
                                              (eq? (vector-ref #{e 17300}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (#{f 17298}#
                                          (vector-ref #{e 17300}# 1)
                                          (#{join-wraps 6305}#
                                            #{w 17301}#
                                            #{e 17300}#))
                                        (values
                                          '()
                                          #{y-pat 17293}#
                                          (#{match 17179}#
                                            #{e 17300}#
                                            #{z-pat 17294}#
                                            #{w 17301}#
                                            #{r 17211}#
                                            #{mod 17212}#)))))))
                               (#{f 17298}# #{e 17208}# #{w 17210}#))))
                         (lambda (#{xr* 17331}# #{y-pat 17332}# #{r 17333}#)
                           (if #{r 17333}#
                             (if (null? #{y-pat 17332}#)
                               (if (null? #{xr* 17331}#)
                                 (#{match-empty 17176}#
                                   (vector-ref #{p 17209}# 1)
                                   #{r 17333}#)
                                 (#{combine 17177}# #{xr* 17331}# #{r 17333}#))
                               #f)
                             #f)))
                       (if (eqv? #{atom-key 17222}# 'free-id)
                         (if (if (symbol? #{e 17208}#)
                               #t
                               (if (if (vector? #{e 17208}#)
                                     (if (= (vector-length #{e 17208}#) 4)
                                       (eq? (vector-ref #{e 17208}# 0)
                                            'syntax-object)
                                       #f)
                                     #f)
                                 (symbol? (vector-ref #{e 17208}# 1))
                                 #f))
                           (if (let ((#{i 17664}#
                                       (#{wrap 6314}#
                                         #{e 17208}#
                                         #{w 17210}#
                                         #{mod 17212}#))
                                     (#{j 17665}# (vector-ref #{p 17209}# 1)))
                                 (if (eq? (if (if (vector? #{i 17664}#)
                                                (if (= (vector-length
                                                         #{i 17664}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{i 17664}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{i 17664}# 1)
                                            #{i 17664}#)
                                          (if (if (vector? #{j 17665}#)
                                                (if (= (vector-length
                                                         #{j 17665}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{j 17665}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{j 17665}# 1)
                                            #{j 17665}#))
                                   (eq? (#{id-var-name 6308}#
                                          #{i 17664}#
                                          '(()))
                                        (#{id-var-name 6308}#
                                          #{j 17665}#
                                          '(())))
                                   #f))
                             #{r 17211}#
                             #f)
                           #f)
                         (if (eqv? #{atom-key 17222}# 'atom)
                           (if (equal?
                                 (vector-ref #{p 17209}# 1)
                                 (#{strip 6334}# #{e 17208}# #{w 17210}#))
                             #{r 17211}#
                             #f)
                           (if (eqv? #{atom-key 17222}# 'vector)
                             (if (vector? #{e 17208}#)
                               (#{match 17179}#
                                 (vector->list #{e 17208}#)
                                 (vector-ref #{p 17209}# 1)
                                 #{w 17210}#
                                 #{r 17211}#
                                 #{mod 17212}#)
                               #f))))))))))))
       (#{match 17179}#
         (lambda (#{e 17725}#
                  #{p 17726}#
                  #{w 17727}#
                  #{r 17728}#
                  #{mod 17729}#)
           (if (not #{r 17728}#)
             #f
             (if (eq? #{p 17726}# '_)
               #{r 17728}#
               (if (eq? #{p 17726}# 'any)
                 (cons (#{wrap 6314}#
                         #{e 17725}#
                         #{w 17727}#
                         #{mod 17729}#)
                       #{r 17728}#)
                 (if (if (vector? #{e 17725}#)
                       (if (= (vector-length #{e 17725}#) 4)
                         (eq? (vector-ref #{e 17725}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match* 17178}#
                     (vector-ref #{e 17725}# 1)
                     #{p 17726}#
                     (#{join-wraps 6305}#
                       #{w 17727}#
                       (vector-ref #{e 17725}# 2))
                     #{r 17728}#
                     (vector-ref #{e 17725}# 3))
                   (#{match* 17178}#
                     #{e 17725}#
                     #{p 17726}#
                     #{w 17727}#
                     #{r 17728}#
                     #{mod 17729}#))))))))
      (set! $sc-dispatch
        (lambda (#{e 17180}# #{p 17181}#)
          (if (eq? #{p 17181}# 'any)
            (list #{e 17180}#)
            (if (eq? #{p 17181}# '_)
              '()
              (if (if (vector? #{e 17180}#)
                    (if (= (vector-length #{e 17180}#) 4)
                      (eq? (vector-ref #{e 17180}# 0) 'syntax-object)
                      #f)
                    #f)
                (#{match* 17178}#
                  (vector-ref #{e 17180}# 1)
                  #{p 17181}#
                  (vector-ref #{e 17180}# 2)
                  '()
                  (vector-ref #{e 17180}# 3))
                (#{match* 17178}#
                  #{e 17180}#
                  #{p 17181}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 29958}#)
      (let ((#{tmp 29960}#
              ($sc-dispatch #{x 29958}# '(_ () any . each-any))))
        (if #{tmp 29960}#
          (@apply
            (lambda (#{e1 29964}# #{e2 29965}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("i29931" "i29932"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i29928")))
                       (hygiene guile))
                    (cons '() (cons #{e1 29964}# #{e2 29965}#))))
            #{tmp 29960}#)
          (let ((#{tmp 29966}#
                  ($sc-dispatch
                    #{x 29958}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 29966}#
              (@apply
                (lambda (#{out 29970}#
                         #{in 29971}#
                         #{e1 29972}#
                         #{e2 29973}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("i29937" "i29938" "i29939" "i29940"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29928")))
                           (hygiene guile))
                        #{in 29971}#
                        '()
                        (list #{out 29970}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i29937"
                                            "i29938"
                                            "i29939"
                                            "i29940"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i29928")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 29972}# #{e2 29973}#))))))
                #{tmp 29966}#)
              (let ((#{tmp 29974}#
                      ($sc-dispatch
                        #{x 29958}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 29974}#
                  (@apply
                    (lambda (#{out 29978}#
                             #{in 29979}#
                             #{e1 29980}#
                             #{e2 29981}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("i29947" "i29948" "i29949" "i29950"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i29928")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("i29947" "i29948" "i29949" "i29950"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i29928")))
                                     (hygiene guile))
                                  #{in 29979}#)
                            '()
                            (list #{out 29978}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("i29947"
                                                "i29948"
                                                "i29949"
                                                "i29950"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i29928")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 29980}#
                                                    #{e2 29981}#))))))
                    #{tmp 29974}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 29958}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 30035}#)
      (let ((#{tmp 30037}#
              ($sc-dispatch
                #{x 30035}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 30037}#
          (@apply
            (lambda (#{k 30041}#
                     #{keyword 30042}#
                     #{pattern 30043}#
                     #{template 30044}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("i29998" "i29999" "i30000" "i30001"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i29995")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("i29998" "i29999" "i30000" "i30001"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i29995")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i29998" "i29999" "i30000" "i30001"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i29995")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i29998" "i29999" "i30000" "i30001"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i29995")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i29998" "i29999" "i30000" "i30001"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i29995")))
                               (hygiene guile))
                            #{pattern 30043}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("i29998" "i29999" "i30000" "i30001"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i29995")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("i29998" "i29999" "i30000" "i30001"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i29995")))
                                   (hygiene guile))
                                (cons #{k 30041}#
                                      (map (lambda (#{tmp 30009 30045}#
                                                    #{tmp 30008 30046}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i29998"
                                                                 "i29999"
                                                                 "i30000"
                                                                 "i30001"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i29995")))
                                                            (hygiene guile))
                                                         #{tmp 30008 30046}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i29998"
                                                                 "i29999"
                                                                 "i30000"
                                                                 "i30001"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i29995")))
                                                            (hygiene guile))
                                                         #{tmp 30009 30045}#)))
                                           #{template 30044}#
                                           #{pattern 30043}#))))))
            #{tmp 30037}#)
          (let ((#{tmp 30047}#
                  ($sc-dispatch
                    #{x 30035}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 30047}#
                  (@apply
                    (lambda (#{k 30051}#
                             #{docstring 30052}#
                             #{keyword 30053}#
                             #{pattern 30054}#
                             #{template 30055}#)
                      (string? (syntax->datum #{docstring 30052}#)))
                    #{tmp 30047}#)
                  #f)
              (@apply
                (lambda (#{k 30056}#
                         #{docstring 30057}#
                         #{keyword 30058}#
                         #{pattern 30059}#
                         #{template 30060}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("i30021" "i30022" "i30023" "i30024" "i30025"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29995")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("i30021" "i30022" "i30023" "i30024" "i30025"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i29995")))
                            (hygiene guile)))
                        #{docstring 30057}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i30021"
                                   "i30022"
                                   "i30023"
                                   "i30024"
                                   "i30025"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i29995")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i30021"
                                   "i30022"
                                   "i30023"
                                   "i30024"
                                   "i30025"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i29995")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i30021"
                                        "i30022"
                                        "i30023"
                                        "i30024"
                                        "i30025"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i29995")))
                                   (hygiene guile))
                                #{pattern 30059}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i30021"
                                      "i30022"
                                      "i30023"
                                      "i30024"
                                      "i30025"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i29995")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("i30021"
                                            "i30022"
                                            "i30023"
                                            "i30024"
                                            "i30025"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i29995")))
                                       (hygiene guile))
                                    (cons #{k 30056}#
                                          (map (lambda (#{tmp 30034 30061}#
                                                        #{tmp 30033 30062}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i30021"
                                                                     "i30022"
                                                                     "i30023"
                                                                     "i30024"
                                                                     "i30025"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i29995")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 30033 30062}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i30021"
                                                                     "i30022"
                                                                     "i30023"
                                                                     "i30024"
                                                                     "i30025"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i29995")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 30034 30061}#)))
                                               #{template 30060}#
                                               #{pattern 30059}#))))))
                #{tmp 30047}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 30035}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 30099}#)
      (let ((#{tmp 30101}#
              ($sc-dispatch #{x 30099}# '(_ (any . any) any))))
        (if #{tmp 30101}#
          (@apply
            (lambda (#{name 30105}#
                     #{pattern 30106}#
                     #{template 30107}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("i30076" "i30077" "i30078"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i30073")))
                       (hygiene guile))
                    #{name 30105}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("i30076" "i30077" "i30078"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i30073")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("i30076" "i30077" "i30078"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i30073")))
                                         (hygiene guile))
                                      #{pattern 30106}#)
                                #{template 30107}#))))
            #{tmp 30101}#)
          (let ((#{tmp 30108}#
                  ($sc-dispatch
                    #{x 30099}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 30108}#
                  (@apply
                    (lambda (#{name 30112}#
                             #{pattern 30113}#
                             #{docstring 30114}#
                             #{template 30115}#)
                      (string? (syntax->datum #{docstring 30114}#)))
                    #{tmp 30108}#)
                  #f)
              (@apply
                (lambda (#{name 30116}#
                         #{pattern 30117}#
                         #{docstring 30118}#
                         #{template 30119}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("i30091" "i30092" "i30093" "i30094"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i30073")))
                           (hygiene guile))
                        #{name 30116}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("i30091" "i30092" "i30093" "i30094"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i30073")))
                                 (hygiene guile))
                              '()
                              #{docstring 30118}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("i30091"
                                                  "i30092"
                                                  "i30093"
                                                  "i30094"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i30073")))
                                             (hygiene guile))
                                          #{pattern 30117}#)
                                    #{template 30119}#))))
                #{tmp 30108}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 30099}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 30168}#)
      (let ((#{tmp 30170}#
              ($sc-dispatch
                #{x 30168}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 30170}#
              (@apply
                (lambda (#{let* 30174}#
                         #{x 30175}#
                         #{v 30176}#
                         #{e1 30177}#
                         #{e2 30178}#)
                  (and-map identifier? #{x 30175}#))
                #{tmp 30170}#)
              #f)
          (@apply
            (lambda (#{let* 30179}#
                     #{x 30180}#
                     #{v 30181}#
                     #{e1 30182}#
                     #{e2 30183}#)
              (letrec*
                ((#{f 30184}#
                   (lambda (#{bindings 30187}#)
                     (if (null? #{bindings 30187}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("i30154" "i30155"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("i30144"
                                     "i30145"
                                     "i30146"
                                     "i30147"
                                     "i30148"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i30130")))
                                (hygiene guile))
                             (cons '() (cons #{e1 30182}# #{e2 30183}#)))
                       (let ((#{tmp 30188}#
                               (list (#{f 30184}# (cdr #{bindings 30187}#))
                                     (car #{bindings 30187}#))))
                         (let ((#{tmp 30189}#
                                 ($sc-dispatch #{tmp 30188}# '(any any))))
                           (if #{tmp 30189}#
                             (@apply
                               (lambda (#{body 30191}# #{binding 30192}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("i30164" "i30165"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("i30154" "i30155"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i30144"
                                               "i30145"
                                               "i30146"
                                               "i30147"
                                               "i30148"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("i30130")))
                                          (hygiene guile))
                                       (list #{binding 30192}#)
                                       #{body 30191}#))
                               #{tmp 30189}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 30188}#))))))))
                (#{f 30184}# (map list #{x 30180}# #{v 30181}#))))
            #{tmp 30170}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 30168}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 30250}#)
      (let ((#{tmp 30252}#
              ($sc-dispatch
                #{orig-x 30250}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 30252}#
          (@apply
            (lambda (#{var 30256}#
                     #{init 30257}#
                     #{step 30258}#
                     #{e0 30259}#
                     #{e1 30260}#
                     #{c 30261}#)
              (let ((#{tmp 30262}#
                      (map (lambda (#{v 30265}# #{s 30266}#)
                             (let ((#{tmp 30268}#
                                     ($sc-dispatch #{s 30266}# '())))
                               (if #{tmp 30268}#
                                 (@apply (lambda () #{v 30265}#) #{tmp 30268}#)
                                 (let ((#{tmp 30271}#
                                         ($sc-dispatch #{s 30266}# '(any))))
                                   (if #{tmp 30271}#
                                     (@apply
                                       (lambda (#{e 30274}#) #{e 30274}#)
                                       #{tmp 30271}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 30250}#
                                       #{s 30266}#))))))
                           #{var 30256}#
                           #{step 30258}#)))
                (let ((#{tmp 30263}#
                        ($sc-dispatch #{tmp 30262}# 'each-any)))
                  (if #{tmp 30263}#
                    (@apply
                      (lambda (#{step 30280}#)
                        (let ((#{tmp 30282}# ($sc-dispatch #{e1 30260}# '())))
                          (if #{tmp 30282}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i30218"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i30203"
                                              "i30204"
                                              "i30205"
                                              "i30206"
                                              "i30207"
                                              "i30208"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i30200")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i30218"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i30203"
                                              "i30204"
                                              "i30205"
                                              "i30206"
                                              "i30207"
                                              "i30208"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i30200")))
                                         (hygiene guile))
                                      (map list #{var 30256}# #{init 30257}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("i30218"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i30203"
                                                    "i30204"
                                                    "i30205"
                                                    "i30206"
                                                    "i30207"
                                                    "i30208"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("i30200")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i30218"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i30203"
                                                          "i30204"
                                                          "i30205"
                                                          "i30206"
                                                          "i30207"
                                                          "i30208"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i30200")))
                                                     (hygiene guile))
                                                  #{e0 30259}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i30218"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i30203"
                                                          "i30204"
                                                          "i30205"
                                                          "i30206"
                                                          "i30207"
                                                          "i30208"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i30200")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 30261}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("i30218"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i30203"
                                                                        "i30204"
                                                                        "i30205"
                                                                        "i30206"
                                                                        "i30207"
                                                                        "i30208"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("i30200")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 30280}#)))))))
                              #{tmp 30282}#)
                            (let ((#{tmp 30286}#
                                    ($sc-dispatch
                                      #{e1 30260}#
                                      '(any . each-any))))
                              (if #{tmp 30286}#
                                (@apply
                                  (lambda (#{e1 30290}# #{e2 30291}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i30227" "i30228"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i30218"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i30203"
                                                  "i30204"
                                                  "i30205"
                                                  "i30206"
                                                  "i30207"
                                                  "i30208"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i30200")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i30227" "i30228"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i30218"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i30203"
                                                  "i30204"
                                                  "i30205"
                                                  "i30206"
                                                  "i30207"
                                                  "i30208"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i30200")))
                                             (hygiene guile))
                                          (map list
                                               #{var 30256}#
                                               #{init 30257}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("i30227" "i30228"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i30218"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30203"
                                                        "i30204"
                                                        "i30205"
                                                        "i30206"
                                                        "i30207"
                                                        "i30208"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i30200")))
                                                   (hygiene guile))
                                                #{e0 30259}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i30227"
                                                              "i30228"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i30218"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i30203"
                                                              "i30204"
                                                              "i30205"
                                                              "i30206"
                                                              "i30207"
                                                              "i30208"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i30200")))
                                                         (hygiene guile))
                                                      (cons #{e1 30290}#
                                                            #{e2 30291}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i30227"
                                                              "i30228"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i30218"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i30203"
                                                              "i30204"
                                                              "i30205"
                                                              "i30206"
                                                              "i30207"
                                                              "i30208"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i30200")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 30261}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i30227"
                                                                            "i30228"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i30218"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i30203"
                                                                            "i30204"
                                                                            "i30205"
                                                                            "i30206"
                                                                            "i30207"
                                                                            "i30208"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i30200")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 30280}#)))))))
                                  #{tmp 30286}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 30260}#))))))
                      #{tmp 30263}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 30262}#)))))
            #{tmp 30252}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 30250}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 30577}#
         (lambda (#{p 30601}# #{lev 30602}#)
           (let ((#{tmp 30604}#
                   ($sc-dispatch
                     #{p 30601}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i30323" "i30324"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i30319"
                               "i30317"
                               "i30315"
                               "i30313"
                               "i30311"
                               "i30309"
                               "i30307")))
                           (hygiene guile)))
                       any))))
             (if #{tmp 30604}#
               (@apply
                 (lambda (#{p 30608}#)
                   (if (= #{lev 30602}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("i30327"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("i30323" "i30324"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i30319"
                                  "i30317"
                                  "i30315"
                                  "i30313"
                                  "i30311"
                                  "i30309"
                                  "i30307")))
                              (hygiene guile))
                           #{p 30608}#)
                     (#{quasicons 30579}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("i30327"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i30323" "i30324"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i30319"
                               "i30317"
                               "i30315"
                               "i30313"
                               "i30311"
                               "i30309"
                               "i30307")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("i30327"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i30323" "i30324"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i30319"
                               "i30317"
                               "i30315"
                               "i30313"
                               "i30311"
                               "i30309"
                               "i30307")))
                           (hygiene guile)))
                       (#{quasi 30577}#
                         (list #{p 30608}#)
                         (#{1-}# #{lev 30602}#)))))
                 #{tmp 30604}#)
               (let ((#{tmp 30611}#
                       ($sc-dispatch
                         #{p 30601}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i30323" "i30324"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i30319"
                                   "i30317"
                                   "i30315"
                                   "i30313"
                                   "i30311"
                                   "i30309"
                                   "i30307")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 30611}#
                   (@apply
                     (lambda (#{p 30615}#)
                       (#{quasicons 30579}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i30330"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i30323" "i30324"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i30319"
                                 "i30317"
                                 "i30315"
                                 "i30313"
                                 "i30311"
                                 "i30309"
                                 "i30307")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i30330"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i30323" "i30324"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i30319"
                                 "i30317"
                                 "i30315"
                                 "i30313"
                                 "i30311"
                                 "i30309"
                                 "i30307")))
                             (hygiene guile)))
                         (#{quasi 30577}#
                           (list #{p 30615}#)
                           (#{1+}# #{lev 30602}#))))
                     #{tmp 30611}#)
                   (let ((#{tmp 30618}#
                           ($sc-dispatch #{p 30601}# '(any . any))))
                     (if #{tmp 30618}#
                       (@apply
                         (lambda (#{p 30622}# #{q 30623}#)
                           (let ((#{tmp 30625}#
                                   ($sc-dispatch
                                     #{p 30622}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i30333" "i30334"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i30323" "i30324"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i30319"
                                               "i30317"
                                               "i30315"
                                               "i30313"
                                               "i30311"
                                               "i30309"
                                               "i30307")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 30625}#
                               (@apply
                                 (lambda (#{p 30629}#)
                                   (if (= #{lev 30602}# 0)
                                     (#{quasilist* 30581}#
                                       (map (lambda (#{tmp 30341 30665}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i30339"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i30333" "i30334"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i30323" "i30324"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i30319"
                                                           "i30317"
                                                           "i30315"
                                                           "i30313"
                                                           "i30311"
                                                           "i30309"
                                                           "i30307")))
                                                       (hygiene guile))
                                                    #{tmp 30341 30665}#))
                                            #{p 30629}#)
                                       (#{quasi 30577}#
                                         #{q 30623}#
                                         #{lev 30602}#))
                                     (#{quasicons 30579}#
                                       (#{quasicons 30579}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i30339"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i30333" "i30334"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i30323" "i30324"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i30319"
                                                 "i30317"
                                                 "i30315"
                                                 "i30313"
                                                 "i30311"
                                                 "i30309"
                                                 "i30307")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i30339"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i30333" "i30334"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i30323" "i30324"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i30319"
                                                 "i30317"
                                                 "i30315"
                                                 "i30313"
                                                 "i30311"
                                                 "i30309"
                                                 "i30307")))
                                             (hygiene guile)))
                                         (#{quasi 30577}#
                                           #{p 30629}#
                                           (#{1-}# #{lev 30602}#)))
                                       (#{quasi 30577}#
                                         #{q 30623}#
                                         #{lev 30602}#))))
                                 #{tmp 30625}#)
                               (let ((#{tmp 30670}#
                                       ($sc-dispatch
                                         #{p 30622}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i30333" "i30334"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i30323" "i30324"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i30319"
                                                   "i30317"
                                                   "i30315"
                                                   "i30313"
                                                   "i30311"
                                                   "i30309"
                                                   "i30307")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 30670}#
                                   (@apply
                                     (lambda (#{p 30674}#)
                                       (if (= #{lev 30602}# 0)
                                         (#{quasiappend 30580}#
                                           (map (lambda (#{tmp 30346 30677}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i30344"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i30333"
                                                                "i30334"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i30323"
                                                                "i30324"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i30319"
                                                               "i30317"
                                                               "i30315"
                                                               "i30313"
                                                               "i30311"
                                                               "i30309"
                                                               "i30307")))
                                                           (hygiene guile))
                                                        #{tmp 30346 30677}#))
                                                #{p 30674}#)
                                           (#{quasi 30577}#
                                             #{q 30623}#
                                             #{lev 30602}#))
                                         (#{quasicons 30579}#
                                           (#{quasicons 30579}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i30344"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i30333" "i30334"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i30323" "i30324"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i30319"
                                                     "i30317"
                                                     "i30315"
                                                     "i30313"
                                                     "i30311"
                                                     "i30309"
                                                     "i30307")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i30344"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i30333" "i30334"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i30323" "i30324"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i30319"
                                                     "i30317"
                                                     "i30315"
                                                     "i30313"
                                                     "i30311"
                                                     "i30309"
                                                     "i30307")))
                                                 (hygiene guile)))
                                             (#{quasi 30577}#
                                               #{p 30674}#
                                               (#{1-}# #{lev 30602}#)))
                                           (#{quasi 30577}#
                                             #{q 30623}#
                                             #{lev 30602}#))))
                                     #{tmp 30670}#)
                                   (#{quasicons 30579}#
                                     (#{quasi 30577}#
                                       #{p 30622}#
                                       #{lev 30602}#)
                                     (#{quasi 30577}#
                                       #{q 30623}#
                                       #{lev 30602}#)))))))
                         #{tmp 30618}#)
                       (let ((#{tmp 30691}#
                               ($sc-dispatch #{p 30601}# '#(vector each-any))))
                         (if #{tmp 30691}#
                           (@apply
                             (lambda (#{x 30695}#)
                               (let ((#{x 30698}#
                                       (#{vquasi 30578}#
                                         #{x 30695}#
                                         #{lev 30602}#)))
                                 (let ((#{tmp 30700}#
                                         ($sc-dispatch
                                           #{x 30698}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp 30700}#
                                     (@apply
                                       (lambda (#{x 30704}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i30451"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i30448"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i30319"
                                                      "i30317"
                                                      "i30315"
                                                      "i30313"
                                                      "i30311"
                                                      "i30309"
                                                      "i30307")))
                                                  (hygiene guile))
                                               (list->vector #{x 30704}#)))
                                       #{tmp 30700}#)
                                     (letrec*
                                       ((#{f 30706}#
                                          (lambda (#{y 30718}# #{k 30719}#)
                                            (let ((#{tmp 30721}#
                                                    ($sc-dispatch
                                                      #{y 30718}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp 30721}#
                                                (@apply
                                                  (lambda (#{y 30724}#)
                                                    (#{k 30719}#
                                                      (map (lambda (#{tmp 30476 30725}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("i30474"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i30456"
                                                                           "i30457"
                                                                           "i30458"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("i30454"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i30448"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i30319"
                                                                          "i30317"
                                                                          "i30315"
                                                                          "i30313"
                                                                          "i30311"
                                                                          "i30309"
                                                                          "i30307")))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp 30476 30725}#))
                                                           #{y 30724}#)))
                                                  #{tmp 30721}#)
                                                (let ((#{tmp 30726}#
                                                        ($sc-dispatch
                                                          #{y 30718}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp 30726}#
                                                    (@apply
                                                      (lambda (#{y 30729}#)
                                                        (#{k 30719}#
                                                          #{y 30729}#))
                                                      #{tmp 30726}#)
                                                    (let ((#{tmp 30730}#
                                                            ($sc-dispatch
                                                              #{y 30718}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp 30730}#
                                                        (@apply
                                                          (lambda (#{y 30733}#
                                                                   #{z 30734}#)
                                                            (#{f 30706}#
                                                              #{z 30734}#
                                                              (lambda (#{ls 30735}#)
                                                                (#{k 30719}#
                                                                  (append
                                                                    #{y 30733}#
                                                                    #{ls 30735}#)))))
                                                          #{tmp 30730}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g30491}#)
                                                                    #((m30492
                                                                        top))
                                                                    #("i30495"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i30489"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i30456"
                                                                      "i30457"
                                                                      "i30458"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("i30454"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i30448"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i30319"
                                                                     "i30317"
                                                                     "i30315"
                                                                     "i30313"
                                                                     "i30311"
                                                                     "i30309"
                                                                     "i30307")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x 30698}#))))))))))
                                       (#{f 30706}#
                                         #{x 30698}#
                                         (lambda (#{ls 30708}#)
                                           (let ((#{tmp 30710}#
                                                   ($sc-dispatch
                                                     #{ls 30708}#
                                                     'each-any)))
                                             (if #{tmp 30710}#
                                               (@apply
                                                 (lambda (#{ g30464 30713}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g30464}#)
                                                               #((m30465 top))
                                                               #("i30469"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("i30463"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i30454"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i30448"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("i30319"
                                                                "i30317"
                                                                "i30315"
                                                                "i30313"
                                                                "i30311"
                                                                "i30309"
                                                                "i30307")))
                                                            (hygiene guile))
                                                         #{ g30464 30713}#))
                                                 #{tmp 30710}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls 30708}#))))))))))
                             #{tmp 30691}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("i30354"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i30323" "i30324"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i30319"
                                        "i30317"
                                        "i30315"
                                        "i30313"
                                        "i30311"
                                        "i30309"
                                        "i30307")))
                                    (hygiene guile))
                                 #{p 30601}#)))))))))))
       (#{vquasi 30578}#
         (lambda (#{p 30763}# #{lev 30764}#)
           (let ((#{tmp 30766}#
                   ($sc-dispatch #{p 30763}# '(any . any))))
             (if #{tmp 30766}#
               (@apply
                 (lambda (#{p 30770}# #{q 30771}#)
                   (let ((#{tmp 30773}#
                           ($sc-dispatch
                             #{p 30770}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("i30362" "i30363"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i30358" "i30359"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i30319"
                                       "i30317"
                                       "i30315"
                                       "i30313"
                                       "i30311"
                                       "i30309"
                                       "i30307")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 30773}#
                       (@apply
                         (lambda (#{p 30777}#)
                           (if (= #{lev 30764}# 0)
                             (#{quasilist* 30581}#
                               (map (lambda (#{tmp 30370 30813}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("i30368"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i30362" "i30363"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i30358" "i30359"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i30319"
                                                   "i30317"
                                                   "i30315"
                                                   "i30313"
                                                   "i30311"
                                                   "i30309"
                                                   "i30307")))
                                               (hygiene guile))
                                            #{tmp 30370 30813}#))
                                    #{p 30777}#)
                               (#{vquasi 30578}# #{q 30771}# #{lev 30764}#))
                             (#{quasicons 30579}#
                               (#{quasicons 30579}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i30368"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i30362" "i30363"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i30358" "i30359"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i30319"
                                         "i30317"
                                         "i30315"
                                         "i30313"
                                         "i30311"
                                         "i30309"
                                         "i30307")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i30368"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i30362" "i30363"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i30358" "i30359"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i30319"
                                         "i30317"
                                         "i30315"
                                         "i30313"
                                         "i30311"
                                         "i30309"
                                         "i30307")))
                                     (hygiene guile)))
                                 (#{quasi 30577}#
                                   #{p 30777}#
                                   (#{1-}# #{lev 30764}#)))
                               (#{vquasi 30578}# #{q 30771}# #{lev 30764}#))))
                         #{tmp 30773}#)
                       (let ((#{tmp 30820}#
                               ($sc-dispatch
                                 #{p 30770}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i30362" "i30363"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i30358" "i30359"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i30319"
                                           "i30317"
                                           "i30315"
                                           "i30313"
                                           "i30311"
                                           "i30309"
                                           "i30307")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 30820}#
                           (@apply
                             (lambda (#{p 30824}#)
                               (if (= #{lev 30764}# 0)
                                 (#{quasiappend 30580}#
                                   (map (lambda (#{tmp 30375 30827}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i30373"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i30362" "i30363"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i30358" "i30359"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i30319"
                                                       "i30317"
                                                       "i30315"
                                                       "i30313"
                                                       "i30311"
                                                       "i30309"
                                                       "i30307")))
                                                   (hygiene guile))
                                                #{tmp 30375 30827}#))
                                        #{p 30824}#)
                                   (#{vquasi 30578}#
                                     #{q 30771}#
                                     #{lev 30764}#))
                                 (#{quasicons 30579}#
                                   (#{quasicons 30579}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i30373"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i30362" "i30363"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i30358" "i30359"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i30319"
                                             "i30317"
                                             "i30315"
                                             "i30313"
                                             "i30311"
                                             "i30309"
                                             "i30307")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i30373"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i30362" "i30363"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i30358" "i30359"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i30319"
                                             "i30317"
                                             "i30315"
                                             "i30313"
                                             "i30311"
                                             "i30309"
                                             "i30307")))
                                         (hygiene guile)))
                                     (#{quasi 30577}#
                                       #{p 30824}#
                                       (#{1-}# #{lev 30764}#)))
                                   (#{vquasi 30578}#
                                     #{q 30771}#
                                     #{lev 30764}#))))
                             #{tmp 30820}#)
                           (#{quasicons 30579}#
                             (#{quasi 30577}# #{p 30770}# #{lev 30764}#)
                             (#{vquasi 30578}# #{q 30771}# #{lev 30764}#)))))))
                 #{tmp 30766}#)
               (let ((#{tmp 30845}# ($sc-dispatch #{p 30763}# '())))
                 (if #{tmp 30845}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i30358" "i30359"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i30319"
                               "i30317"
                               "i30315"
                               "i30313"
                               "i30311"
                               "i30309"
                               "i30307")))
                           (hygiene guile))
                         ()))
                     #{tmp 30845}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 30763}#)))))))
       (#{quasicons 30579}#
         (lambda (#{x 30858}# #{y 30859}#)
           (let ((#{tmp 30860}# (list #{x 30858}# #{y 30859}#)))
             (let ((#{tmp 30861}#
                     ($sc-dispatch #{tmp 30860}# '(any any))))
               (if #{tmp 30861}#
                 (@apply
                   (lambda (#{x 30863}# #{y 30864}#)
                     (let ((#{tmp 30866}#
                             ($sc-dispatch
                               #{y 30864}#
                               '(#(atom "quote") any))))
                       (if #{tmp 30866}#
                         (@apply
                           (lambda (#{dy 30870}#)
                             (let ((#{tmp 30872}#
                                     ($sc-dispatch
                                       #{x 30863}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 30872}#
                                 (@apply
                                   (lambda (#{dx 30876}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("i30397"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("i30393"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i30387" "i30388"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i30382" "i30383"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i30319"
                                                  "i30317"
                                                  "i30315"
                                                  "i30313"
                                                  "i30311"
                                                  "i30309"
                                                  "i30307")))
                                              (hygiene guile))
                                           (cons #{dx 30876}# #{dy 30870}#)))
                                   #{tmp 30872}#)
                                 (if (null? #{dy 30870}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i30399"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i30393"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i30387" "i30388"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i30382" "i30383"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i30319"
                                                "i30317"
                                                "i30315"
                                                "i30313"
                                                "i30311"
                                                "i30309"
                                                "i30307")))
                                            (hygiene guile))
                                         #{x 30863}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i30399"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i30393"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i30387" "i30388"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i30382" "i30383"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i30319"
                                                "i30317"
                                                "i30315"
                                                "i30313"
                                                "i30311"
                                                "i30309"
                                                "i30307")))
                                            (hygiene guile))
                                         #{x 30863}#
                                         #{y 30864}#)))))
                           #{tmp 30866}#)
                         (let ((#{tmp 30881}#
                                 ($sc-dispatch
                                   #{y 30864}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 30881}#
                             (@apply
                               (lambda (#{stuff 30885}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("i30402"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i30387" "i30388"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i30382" "i30383"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i30319"
                                              "i30317"
                                              "i30315"
                                              "i30313"
                                              "i30311"
                                              "i30309"
                                              "i30307")))
                                          (hygiene guile))
                                       (cons #{x 30863}# #{stuff 30885}#)))
                               #{tmp 30881}#)
                             (let ((#{tmp 30886}#
                                     ($sc-dispatch
                                       #{y 30864}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 30886}#
                                 (@apply
                                   (lambda (#{stuff 30890}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("i30405"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i30387" "i30388"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i30382" "i30383"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i30319"
                                                  "i30317"
                                                  "i30315"
                                                  "i30313"
                                                  "i30311"
                                                  "i30309"
                                                  "i30307")))
                                              (hygiene guile))
                                           (cons #{x 30863}# #{stuff 30890}#)))
                                   #{tmp 30886}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("i30407"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i30387" "i30388"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i30382" "i30383"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i30319"
                                              "i30317"
                                              "i30315"
                                              "i30313"
                                              "i30311"
                                              "i30309"
                                              "i30307")))
                                          (hygiene guile))
                                       #{x 30863}#
                                       #{y 30864}#))))))))
                   #{tmp 30861}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 30860}#))))))
       (#{quasiappend 30580}#
         (lambda (#{x 30901}# #{y 30902}#)
           (let ((#{tmp 30904}#
                   ($sc-dispatch #{y 30902}# '(#(atom "quote") ()))))
             (if #{tmp 30904}#
               (@apply
                 (lambda ()
                   (if (null? #{x 30901}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("i30411" "i30412"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("i30319"
                             "i30317"
                             "i30315"
                             "i30313"
                             "i30311"
                             "i30309"
                             "i30307")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 30901}#))
                       (car #{x 30901}#)
                       (let ((#{tmp 30909}#
                               ($sc-dispatch #{x 30901}# 'each-any)))
                         (if #{tmp 30909}#
                           (@apply
                             (lambda (#{p 30913}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("i30423"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i30411" "i30412"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i30319"
                                            "i30317"
                                            "i30315"
                                            "i30313"
                                            "i30311"
                                            "i30309"
                                            "i30307")))
                                        (hygiene guile))
                                     #{p 30913}#))
                             #{tmp 30909}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 30901}#))))))
                 #{tmp 30904}#)
               (if (null? #{x 30901}#)
                 #{y 30902}#
                 (let ((#{tmp 30921}# (list #{x 30901}# #{y 30902}#)))
                   (let ((#{tmp 30922}#
                           ($sc-dispatch #{tmp 30921}# '(each-any any))))
                     (if #{tmp 30922}#
                       (@apply
                         (lambda (#{p 30924}# #{y 30925}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("i30434" "i30435"))
                                     #(ribcage #(_) #((top)) #("i30426"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("i30411" "i30412"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i30319"
                                        "i30317"
                                        "i30315"
                                        "i30313"
                                        "i30311"
                                        "i30309"
                                        "i30307")))
                                    (hygiene guile))
                                 (append #{p 30924}# (list #{y 30925}#))))
                         #{tmp 30922}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 30921}#)))))))))
       (#{quasilist* 30581}#
         (lambda (#{x 30929}# #{y 30930}#)
           (letrec*
             ((#{f 30931}#
                (lambda (#{x 31020}#)
                  (if (null? #{x 31020}#)
                    #{y 30930}#
                    (#{quasicons 30579}#
                      (car #{x 31020}#)
                      (#{f 30931}# (cdr #{x 31020}#)))))))
             (#{f 30931}# #{x 30929}#))))
       (#{emit 30583}#
         (lambda (#{x 31023}#)
           (let ((#{tmp 31025}#
                   ($sc-dispatch #{x 31023}# '(#(atom "quote") any))))
             (if #{tmp 31025}#
               (@apply
                 (lambda (#{x 31029}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("i30501"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i30498"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i30319"
                                "i30317"
                                "i30315"
                                "i30313"
                                "i30311"
                                "i30309"
                                "i30307")))
                            (hygiene guile))
                         #{x 31029}#))
                 #{tmp 31025}#)
               (let ((#{tmp 31030}#
                       ($sc-dispatch
                         #{x 31023}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 31030}#
                   (@apply
                     (lambda (#{x 31034}#)
                       (let ((#{tmp 31035}# (map #{emit 30583}# #{x 31034}#)))
                         (let ((#{tmp 31036}#
                                 ($sc-dispatch #{tmp 31035}# 'each-any)))
                           (if #{tmp 31036}#
                             (@apply
                               (lambda (#{ g30506 31038}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g30506}#)
                                             #((m30507 top))
                                             #("i30511"))
                                           #(ribcage #(x) #((top)) #("i30504"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i30498"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i30319"
                                              "i30317"
                                              "i30315"
                                              "i30313"
                                              "i30311"
                                              "i30309"
                                              "i30307")))
                                          (hygiene guile))
                                       #{ g30506 31038}#))
                               #{tmp 31036}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 31035}#)))))
                     #{tmp 31030}#)
                   (let ((#{tmp 31039}#
                           ($sc-dispatch
                             #{x 31023}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 31039}#
                       (@apply
                         (lambda (#{x 31043}# #{y 31044}#)
                           (letrec*
                             ((#{f 31045}#
                                (lambda (#{x* 31048}#)
                                  (if (null? #{x* 31048}#)
                                    (#{emit 30583}# #{y 31044}#)
                                    (let ((#{tmp 31049}#
                                            (list (#{emit 30583}#
                                                    (car #{x* 31048}#))
                                                  (#{f 31045}#
                                                    (cdr #{x* 31048}#)))))
                                      (let ((#{tmp 31050}#
                                              ($sc-dispatch
                                                #{tmp 31049}#
                                                '(any any))))
                                        (if #{tmp 31050}#
                                          (@apply
                                            (lambda (#{ g30526 31052}#
                                                     #{ g30525 31053}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g30526}#
                                                            #{ g30525}#)
                                                          #((m30527 top)
                                                            (m30527 top))
                                                          #("i30531" "i30532"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("i30520" "i30521"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("i30516" "i30517"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i30498"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i30319"
                                                           "i30317"
                                                           "i30315"
                                                           "i30313"
                                                           "i30311"
                                                           "i30309"
                                                           "i30307")))
                                                       (hygiene guile))
                                                    #{ g30526 31052}#
                                                    #{ g30525 31053}#))
                                            #{tmp 31050}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 31049}#))))))))
                             (#{f 31045}# #{x 31043}#)))
                         #{tmp 31039}#)
                       (let ((#{tmp 31054}#
                               ($sc-dispatch
                                 #{x 31023}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 31054}#
                           (@apply
                             (lambda (#{x 31058}#)
                               (let ((#{tmp 31059}#
                                       (map #{emit 30583}# #{x 31058}#)))
                                 (let ((#{tmp 31060}#
                                         ($sc-dispatch
                                           #{tmp 31059}#
                                           'each-any)))
                                   (if #{tmp 31060}#
                                     (@apply
                                       (lambda (#{ g30538 31062}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g30538}#)
                                                     #((m30539 top))
                                                     #("i30543"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i30536"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i30498"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i30319"
                                                      "i30317"
                                                      "i30315"
                                                      "i30313"
                                                      "i30311"
                                                      "i30309"
                                                      "i30307")))
                                                  (hygiene guile))
                                               #{ g30538 31062}#))
                                       #{tmp 31060}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 31059}#)))))
                             #{tmp 31054}#)
                           (let ((#{tmp 31063}#
                                   ($sc-dispatch
                                     #{x 31023}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 31063}#
                               (@apply
                                 (lambda (#{x 31067}#)
                                   (let ((#{tmp 31068}#
                                           (map #{emit 30583}# #{x 31067}#)))
                                     (let ((#{tmp 31069}#
                                             ($sc-dispatch
                                               #{tmp 31068}#
                                               'each-any)))
                                       (if #{tmp 31069}#
                                         (@apply
                                           (lambda (#{ g30550 31071}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g30550}#)
                                                         #((m30551 top))
                                                         #("i30555"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i30548"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i30498"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i30319"
                                                          "i30317"
                                                          "i30315"
                                                          "i30313"
                                                          "i30311"
                                                          "i30309"
                                                          "i30307")))
                                                      (hygiene guile))
                                                   #{ g30550 31071}#))
                                           #{tmp 31069}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 31068}#)))))
                                 #{tmp 31063}#)
                               (let ((#{tmp 31072}#
                                       ($sc-dispatch
                                         #{x 31023}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 31072}#
                                   (@apply
                                     (lambda (#{x 31076}#)
                                       (let ((#{tmp 31077}#
                                               (#{emit 30583}# #{x 31076}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g30562}#)
                                                     #((m30563 top))
                                                     #("i30566"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i30560"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i30498"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i30319"
                                                      "i30317"
                                                      "i30315"
                                                      "i30313"
                                                      "i30311"
                                                      "i30309"
                                                      "i30307")))
                                                  (hygiene guile))
                                               #{tmp 31077}#)))
                                     #{tmp 31072}#)
                                   (let ((#{tmp 31080}#
                                           ($sc-dispatch
                                             #{x 31023}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 31080}#
                                       (@apply
                                         (lambda (#{x 31084}#) #{x 31084}#)
                                         #{tmp 31080}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 31023}#))))))))))))))))))
      (lambda (#{x 30584}#)
        (let ((#{tmp 30586}#
                ($sc-dispatch #{x 30584}# '(_ any))))
          (if #{tmp 30586}#
            (@apply
              (lambda (#{e 30590}#)
                (#{emit 30583}# (#{quasi 30577}# #{e 30590}# 0)))
              #{tmp 30586}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 30584}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 31139}#)
      (letrec*
        ((#{read-file 31140}#
           (lambda (#{fn 31249}# #{k 31250}#)
             (let ((#{p 31251}# (open-input-file #{fn 31249}#)))
               (letrec*
                 ((#{f 31252}#
                    (lambda (#{x 31306}# #{result 31307}#)
                      (if (eof-object? #{x 31306}#)
                        (begin
                          (close-input-port #{p 31251}#)
                          (reverse #{result 31307}#))
                        (#{f 31252}#
                          (read #{p 31251}#)
                          (cons (datum->syntax #{k 31250}# #{x 31306}#)
                                #{result 31307}#))))))
                 (#{f 31252}# (read #{p 31251}#) '()))))))
        (let ((#{tmp 31142}#
                ($sc-dispatch #{x 31139}# '(any any))))
          (if #{tmp 31142}#
            (@apply
              (lambda (#{k 31146}# #{filename 31147}#)
                (let ((#{fn 31148}# (syntax->datum #{filename 31147}#)))
                  (let ((#{tmp 31149}#
                          (#{read-file 31140}#
                            #{fn 31148}#
                            #{filename 31147}#)))
                    (let ((#{tmp 31150}#
                            ($sc-dispatch #{tmp 31149}# 'each-any)))
                      (if #{tmp 31150}#
                        (@apply
                          (lambda (#{exp 31168}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("i31136"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("i31131"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("i31127" "i31128"))
                                      #(ribcage (read-file) ((top)) ("i31111"))
                                      #(ribcage #(x) #((top)) #("i31110")))
                                     (hygiene guile))
                                  #{exp 31168}#))
                          #{tmp 31150}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 31149}#))))))
              #{tmp 31142}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 31139}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 31326}#)
      (let ((#{tmp 31328}#
              ($sc-dispatch #{x 31326}# '(any any))))
        (if #{tmp 31328}#
          (@apply
            (lambda (#{k 31332}# #{filename 31333}#)
              (let ((#{fn 31334}# (syntax->datum #{filename 31333}#)))
                (let ((#{tmp 31335}#
                        (datum->syntax
                          #{filename 31333}#
                          (let ((#{t 31338}# (%search-load-path #{fn 31334}#)))
                            (if #{t 31338}#
                              #{t 31338}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 31326}#
                                #{filename 31333}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i31320"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i31316"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("i31312" "i31313"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i31309")))
                           (hygiene guile))
                        #{tmp 31335}#))))
            #{tmp 31328}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 31326}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 31347}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 31347}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 31350}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 31350}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 31406}#)
      (let ((#{tmp 31408}#
              ($sc-dispatch
                #{x 31406}#
                '(_ any any . each-any))))
        (if #{tmp 31408}#
          (@apply
            (lambda (#{e 31412}# #{m1 31413}# #{m2 31414}#)
              (let ((#{tmp 31415}#
                      (letrec*
                        ((#{f 31457}#
                           (lambda (#{clause 31460}# #{clauses 31461}#)
                             (if (null? #{clauses 31461}#)
                               (let ((#{tmp 31463}#
                                       ($sc-dispatch
                                         #{clause 31460}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("i31365"
                                                    "i31366"
                                                    "i31367"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("i31355"
                                                    "i31356"
                                                    "i31357"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i31352")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 31463}#
                                   (@apply
                                     (lambda (#{e1 31467}# #{e2 31468}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("i31374" "i31375"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("i31365"
                                                     "i31366"
                                                     "i31367"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("i31355"
                                                     "i31356"
                                                     "i31357"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i31352")))
                                                (hygiene guile))
                                             (cons #{e1 31467}# #{e2 31468}#)))
                                     #{tmp 31463}#)
                                   (let ((#{tmp 31469}#
                                           ($sc-dispatch
                                             #{clause 31460}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 31469}#
                                       (@apply
                                         (lambda (#{k 31473}#
                                                  #{e1 31474}#
                                                  #{e2 31475}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("i31380"
                                                         "i31381"
                                                         "i31382"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i31365"
                                                         "i31366"
                                                         "i31367"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i31355"
                                                         "i31356"
                                                         "i31357"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i31352")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i31380"
                                                               "i31381"
                                                               "i31382"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i31365"
                                                               "i31366"
                                                               "i31367"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i31355"
                                                               "i31356"
                                                               "i31357"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i31352")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i31380"
                                                               "i31381"
                                                               "i31382"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i31365"
                                                               "i31366"
                                                               "i31367"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i31355"
                                                               "i31356"
                                                               "i31357"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i31352")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i31380"
                                                                     "i31381"
                                                                     "i31382"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i31365"
                                                                     "i31366"
                                                                     "i31367"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i31355"
                                                                     "i31356"
                                                                     "i31357"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i31352")))
                                                                (hygiene
                                                                  guile))
                                                             #{k 31473}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i31380"
                                                               "i31381"
                                                               "i31382"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i31365"
                                                               "i31366"
                                                               "i31367"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i31355"
                                                               "i31356"
                                                               "i31357"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i31352")))
                                                          (hygiene guile))
                                                       (cons #{e1 31474}#
                                                             #{e2 31475}#))))
                                         #{tmp 31469}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 31406}#
                                         #{clause 31460}#)))))
                               (let ((#{tmp 31483}#
                                       (#{f 31457}#
                                         (car #{clauses 31461}#)
                                         (cdr #{clauses 31461}#))))
                                 (let ((#{tmp 31486}#
                                         ($sc-dispatch
                                           #{clause 31460}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 31486}#
                                     (@apply
                                       (lambda (#{k 31490}#
                                                #{e1 31491}#
                                                #{e2 31492}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("i31396"
                                                       "i31397"
                                                       "i31398"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("i31392"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("i31365"
                                                       "i31366"
                                                       "i31367"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("i31355"
                                                       "i31356"
                                                       "i31357"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i31352")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i31396"
                                                             "i31397"
                                                             "i31398"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i31392"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i31365"
                                                             "i31366"
                                                             "i31367"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i31355"
                                                             "i31356"
                                                             "i31357"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i31352")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i31396"
                                                             "i31397"
                                                             "i31398"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i31392"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i31365"
                                                             "i31366"
                                                             "i31367"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i31355"
                                                             "i31356"
                                                             "i31357"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i31352")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i31396"
                                                                   "i31397"
                                                                   "i31398"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i31392"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i31365"
                                                                   "i31366"
                                                                   "i31367"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i31355"
                                                                   "i31356"
                                                                   "i31357"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i31352")))
                                                              (hygiene guile))
                                                           #{k 31490}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i31396"
                                                             "i31397"
                                                             "i31398"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i31392"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i31365"
                                                             "i31366"
                                                             "i31367"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i31355"
                                                             "i31356"
                                                             "i31357"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i31352")))
                                                        (hygiene guile))
                                                     (cons #{e1 31491}#
                                                           #{e2 31492}#))
                                               #{tmp 31483}#))
                                       #{tmp 31486}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 31406}#
                                       #{clause 31460}#))))))))
                        (#{f 31457}# #{m1 31413}# #{m2 31414}#))))
                (let ((#{body 31416}# #{tmp 31415}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("i31363"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("i31355" "i31356" "i31357"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i31352")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("i31363"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("i31355" "i31356" "i31357"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i31352")))
                                       (hygiene guile))
                                    #{e 31412}#))
                        #{body 31416}#))))
            #{tmp 31408}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 31406}#))))))

(define make-variable-transformer
  (lambda (#{proc 31510}#)
    (if (procedure? #{proc 31510}#)
      (letrec*
        ((#{trans 31511}#
           (lambda (#{x 31517}#)
             (#{proc 31510}# #{x 31517}#))))
        (begin
          (set-procedure-property!
            #{trans 31511}#
            'variable-transformer
            #t)
          #{trans 31511}#))
      (error "variable transformer not a procedure"
             #{proc 31510}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 31549}#)
      (let ((#{tmp 31551}#
              ($sc-dispatch #{x 31549}# '(_ any))))
        (if #{tmp 31551}#
          (@apply
            (lambda (#{e 31555}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("i31524"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i31521")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("i31524"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i31521")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("i31524"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i31521")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("i31524"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i31521")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("i31524"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i31521")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("i31524"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i31521")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("i31524"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i31521")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i31524"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i31521")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i31524"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i31521")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i31524"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i31521")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i31524"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i31521")))
                                         (hygiene guile))
                                      #{e 31555}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i31524"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i31521")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i31524"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i31521")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i31524"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i31521")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i31524"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i31521")))
                                         (hygiene guile))
                                      (cons #{e 31555}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i31524"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i31521")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i31524"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i31521")))
                                                (hygiene guile)))))))))
            #{tmp 31551}#)
          (let ((#{tmp 31556}#
                  ($sc-dispatch
                    #{x 31549}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i31521")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 31556}#
                  (@apply
                    (lambda (#{id 31560}#
                             #{exp1 31561}#
                             #{var 31562}#
                             #{val 31563}#
                             #{exp2 31564}#)
                      (if (identifier? #{id 31560}#)
                        (identifier? #{var 31562}#)
                        #f))
                    #{tmp 31556}#)
                  #f)
              (@apply
                (lambda (#{id 31565}#
                         #{exp1 31566}#
                         #{var 31567}#
                         #{val 31568}#
                         #{exp2 31569}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("i31539" "i31540" "i31541" "i31542" "i31543"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i31521")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("i31539"
                                      "i31540"
                                      "i31541"
                                      "i31542"
                                      "i31543"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i31521")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("i31539"
                                       "i31540"
                                       "i31541"
                                       "i31542"
                                       "i31543"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i31521")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i31539"
                                         "i31540"
                                         "i31541"
                                         "i31542"
                                         "i31543"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i31521")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i31539"
                                         "i31540"
                                         "i31541"
                                         "i31542"
                                         "i31543"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i31521")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i31539"
                                            "i31540"
                                            "i31541"
                                            "i31542"
                                            "i31543"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i31521")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i31539"
                                            "i31540"
                                            "i31541"
                                            "i31542"
                                            "i31543"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i31521")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("i31539"
                                             "i31540"
                                             "i31541"
                                             "i31542"
                                             "i31543"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i31521")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i31539"
                                                        "i31540"
                                                        "i31541"
                                                        "i31542"
                                                        "i31543"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i31521")))
                                                   (hygiene guile))
                                                #{var 31567}#
                                                #{val 31568}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i31539"
                                                        "i31540"
                                                        "i31541"
                                                        "i31542"
                                                        "i31543"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i31521")))
                                                   (hygiene guile))
                                                #{exp2 31569}#))
                                    (list (cons #{id 31565}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i31539"
                                                         "i31540"
                                                         "i31541"
                                                         "i31542"
                                                         "i31543"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i31521")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i31539"
                                                         "i31540"
                                                         "i31541"
                                                         "i31542"
                                                         "i31543"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i31521")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i31539"
                                                        "i31540"
                                                        "i31541"
                                                        "i31542"
                                                        "i31543"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i31521")))
                                                   (hygiene guile))
                                                (cons #{exp1 31566}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i31539"
                                                               "i31540"
                                                               "i31541"
                                                               "i31542"
                                                               "i31543"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i31521")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i31539"
                                                               "i31540"
                                                               "i31541"
                                                               "i31542"
                                                               "i31543"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i31521")))
                                                          (hygiene guile))))))
                                    (list #{id 31565}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i31539"
                                                        "i31540"
                                                        "i31541"
                                                        "i31542"
                                                        "i31543"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i31521")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i31539"
                                                              "i31540"
                                                              "i31541"
                                                              "i31542"
                                                              "i31543"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i31521")))
                                                         (hygiene guile))
                                                      #{id 31565}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i31539"
                                                        "i31540"
                                                        "i31541"
                                                        "i31542"
                                                        "i31543"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i31521")))
                                                   (hygiene guile))
                                                #{exp1 31566}#))))))
                #{tmp 31556}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 31549}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 31601}#)
      (let ((#{tmp 31603}#
              ($sc-dispatch
                #{x 31601}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 31603}#
          (@apply
            (lambda (#{id 31607}#
                     #{args 31608}#
                     #{b0 31609}#
                     #{b1 31610}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("i31583" "i31584" "i31585" "i31586"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i31580")))
                       (hygiene guile))
                    #{id 31607}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("i31583" "i31584" "i31585" "i31586"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i31580")))
                             (hygiene guile))
                          (cons #{args 31608}#
                                (cons #{b0 31609}# #{b1 31610}#)))))
            #{tmp 31603}#)
          (let ((#{tmp 31611}#
                  ($sc-dispatch #{x 31601}# '(_ any any))))
            (if (if #{tmp 31611}#
                  (@apply
                    (lambda (#{id 31615}# #{val 31616}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i31593" "i31594"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i31580")))
                           (hygiene guile))))
                    #{tmp 31611}#)
                  #f)
              (@apply
                (lambda (#{id 31617}# #{val 31618}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i31597" "i31598"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i31580")))
                           (hygiene guile))
                        #{id 31617}#
                        #{val 31618}#))
                #{tmp 31611}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 31601}#))))))))

