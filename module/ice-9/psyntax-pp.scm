(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{and-map*\ 36}#
     (lambda (#{f\ 200}# #{first\ 201}# . #{rest\ 202}#)
       (begin
         (let ((#{t\ 208}# (null? #{first\ 201}#)))
           (if #{t\ 208}#
             #{t\ 208}#
             (if (null? #{rest\ 202}#)
               (letrec*
                 ((#{andmap\ 212}#
                    (lambda (#{first\ 213}#)
                      (begin
                        (let ((#{x\ 216}# (car #{first\ 213}#))
                              (#{first\ 217}# (cdr #{first\ 213}#)))
                          (if (null? #{first\ 217}#)
                            (#{f\ 200}# #{x\ 216}#)
                            (if (#{f\ 200}# #{x\ 216}#)
                              (#{andmap\ 212}# #{first\ 217}#)
                              #f)))))))
                 (begin (#{andmap\ 212}# #{first\ 201}#)))
               (letrec*
                 ((#{andmap\ 223}#
                    (lambda (#{first\ 224}# #{rest\ 225}#)
                      (begin
                        (let ((#{x\ 230}# (car #{first\ 224}#))
                              (#{xr\ 231}# (map car #{rest\ 225}#))
                              (#{first\ 232}# (cdr #{first\ 224}#))
                              (#{rest\ 233}# (map cdr #{rest\ 225}#)))
                          (if (null? #{first\ 232}#)
                            (@apply #{f\ 200}# (cons #{x\ 230}# #{xr\ 231}#))
                            (if (@apply
                                  #{f\ 200}#
                                  (cons #{x\ 230}# #{xr\ 231}#))
                              (#{andmap\ 223}# #{first\ 232}# #{rest\ 233}#)
                              #f)))))))
                 (begin
                   (#{andmap\ 223}# #{first\ 201}# #{rest\ 202}#))))))))))
  (begin
    (let ((#{make-primitive-ref\ 242}# (if #f #f))
          (#{fx+\ 281}# (if #f #f))
          (#{fx-\ 283}# (if #f #f))
          (#{fx=\ 285}# (if #f #f))
          (#{fx<\ 287}# (if #f #f))
          (#{set-syntax-object-expression!\ 352}#
            (if #f #f))
          (#{set-syntax-object-wrap!\ 354}# (if #f #f))
          (#{set-syntax-object-module!\ 356}# (if #f #f))
          (#{binding-type\ 363}# (if #f #f))
          (#{binding-value\ 365}# (if #f #f))
          (#{make-wrap\ 385}# (if #f #f))
          (#{wrap-marks\ 387}# (if #f #f))
          (#{wrap-subst\ 389}# (if #f #f))
          (#{ribcage?\ 403}# (if #f #f)))
      (letrec*
        ((#{make-void\ 238}#
           (lambda (#{src\ 700}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 0)
               #{src\ 700}#)))
         (#{make-const\ 240}#
           (lambda (#{src\ 702}# #{exp\ 703}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 1)
               #{src\ 702}#
               #{exp\ 703}#)))
         (#{make-lexical-ref\ 244}#
           (lambda (#{src\ 710}# #{name\ 711}# #{gensym\ 712}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 3)
               #{src\ 710}#
               #{name\ 711}#
               #{gensym\ 712}#)))
         (#{make-lexical-set\ 246}#
           (lambda (#{src\ 716}#
                    #{name\ 717}#
                    #{gensym\ 718}#
                    #{exp\ 719}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 4)
               #{src\ 716}#
               #{name\ 717}#
               #{gensym\ 718}#
               #{exp\ 719}#)))
         (#{make-module-ref\ 248}#
           (lambda (#{src\ 724}#
                    #{mod\ 725}#
                    #{name\ 726}#
                    #{public?\ 727}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 5)
               #{src\ 724}#
               #{mod\ 725}#
               #{name\ 726}#
               #{public?\ 727}#)))
         (#{make-module-set\ 250}#
           (lambda (#{src\ 732}#
                    #{mod\ 733}#
                    #{name\ 734}#
                    #{public?\ 735}#
                    #{exp\ 736}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{src\ 732}#
               #{mod\ 733}#
               #{name\ 734}#
               #{public?\ 735}#
               #{exp\ 736}#)))
         (#{make-toplevel-ref\ 252}#
           (lambda (#{src\ 742}# #{name\ 743}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 7)
               #{src\ 742}#
               #{name\ 743}#)))
         (#{make-toplevel-set\ 254}#
           (lambda (#{src\ 746}# #{name\ 747}# #{exp\ 748}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{src\ 746}#
               #{name\ 747}#
               #{exp\ 748}#)))
         (#{make-toplevel-define\ 256}#
           (lambda (#{src\ 752}# #{name\ 753}# #{exp\ 754}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 9)
               #{src\ 752}#
               #{name\ 753}#
               #{exp\ 754}#)))
         (#{make-conditional\ 258}#
           (lambda (#{src\ 758}#
                    #{test\ 759}#
                    #{consequent\ 760}#
                    #{alternate\ 761}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 10)
               #{src\ 758}#
               #{test\ 759}#
               #{consequent\ 760}#
               #{alternate\ 761}#)))
         (#{make-application\ 260}#
           (lambda (#{src\ 766}# #{proc\ 767}# #{args\ 768}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 11)
               #{src\ 766}#
               #{proc\ 767}#
               #{args\ 768}#)))
         (#{make-sequence\ 262}#
           (lambda (#{src\ 772}# #{exps\ 773}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 12)
               #{src\ 772}#
               #{exps\ 773}#)))
         (#{make-lambda\ 264}#
           (lambda (#{src\ 776}# #{meta\ 777}# #{body\ 778}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 13)
               #{src\ 776}#
               #{meta\ 777}#
               #{body\ 778}#)))
         (#{make-lambda-case\ 266}#
           (lambda (#{src\ 782}#
                    #{req\ 783}#
                    #{opt\ 784}#
                    #{rest\ 785}#
                    #{kw\ 786}#
                    #{inits\ 787}#
                    #{gensyms\ 788}#
                    #{body\ 789}#
                    #{alternate\ 790}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 14)
               #{src\ 782}#
               #{req\ 783}#
               #{opt\ 784}#
               #{rest\ 785}#
               #{kw\ 786}#
               #{inits\ 787}#
               #{gensyms\ 788}#
               #{body\ 789}#
               #{alternate\ 790}#)))
         (#{make-let\ 268}#
           (lambda (#{src\ 800}#
                    #{names\ 801}#
                    #{gensyms\ 802}#
                    #{vals\ 803}#
                    #{body\ 804}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 15)
               #{src\ 800}#
               #{names\ 801}#
               #{gensyms\ 802}#
               #{vals\ 803}#
               #{body\ 804}#)))
         (#{make-letrec\ 270}#
           (lambda (#{src\ 810}#
                    #{in-order?\ 811}#
                    #{names\ 812}#
                    #{gensyms\ 813}#
                    #{vals\ 814}#
                    #{body\ 815}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 16)
               #{src\ 810}#
               #{in-order?\ 811}#
               #{names\ 812}#
               #{gensyms\ 813}#
               #{vals\ 814}#
               #{body\ 815}#)))
         (#{make-dynlet\ 272}#
           (lambda (#{src\ 822}#
                    #{fluids\ 823}#
                    #{vals\ 824}#
                    #{body\ 825}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 17)
               #{src\ 822}#
               #{fluids\ 823}#
               #{vals\ 824}#
               #{body\ 825}#)))
         (#{lambda?\ 275}#
           (lambda (#{x\ 830}#)
             (if (struct? #{x\ 830}#)
               (eq? (struct-vtable #{x\ 830}#)
                    (vector-ref %expanded-vtables 13))
               #f)))
         (#{lambda-meta\ 277}#
           (lambda (#{x\ 834}#) (struct-ref #{x\ 834}# 1)))
         (#{set-lambda-meta!\ 279}#
           (lambda (#{x\ 836}# #{v\ 837}#)
             (struct-set! #{x\ 836}# 1 #{v\ 837}#)))
         (#{top-level-eval-hook\ 289}#
           (lambda (#{x\ 840}# #{mod\ 841}#)
             (primitive-eval #{x\ 840}#)))
         (#{local-eval-hook\ 291}#
           (lambda (#{x\ 844}# #{mod\ 845}#)
             (primitive-eval #{x\ 844}#)))
         (#{put-global-definition-hook\ 294}#
           (lambda (#{symbol\ 848}# #{type\ 849}# #{val\ 850}#)
             (module-define!
               (current-module)
               #{symbol\ 848}#
               (make-syntax-transformer
                 #{symbol\ 848}#
                 #{type\ 849}#
                 #{val\ 850}#))))
         (#{get-global-definition-hook\ 296}#
           (lambda (#{symbol\ 854}# #{module\ 855}#)
             (begin
               (if (if (not #{module\ 855}#) (current-module) #f)
                 (warn "module system is booted, we should have a module"
                       #{symbol\ 854}#))
               (begin
                 (let ((#{v\ 861}# (module-variable
                                     (if #{module\ 855}#
                                       (resolve-module (cdr #{module\ 855}#))
                                       (current-module))
                                     #{symbol\ 854}#)))
                   (if #{v\ 861}#
                     (if (variable-bound? #{v\ 861}#)
                       (begin
                         (let ((#{val\ 866}# (variable-ref #{v\ 861}#)))
                           (if (macro? #{val\ 866}#)
                             (if (macro-type #{val\ 866}#)
                               (cons (macro-type #{val\ 866}#)
                                     (macro-binding #{val\ 866}#))
                               #f)
                             #f)))
                       #f)
                     #f))))))
         (#{decorate-source\ 298}#
           (lambda (#{e\ 870}# #{s\ 871}#)
             (begin
               (if (if (pair? #{e\ 870}#) #{s\ 871}# #f)
                 (set-source-properties! #{e\ 870}# #{s\ 871}#))
               #{e\ 870}#)))
         (#{maybe-name-value!\ 300}#
           (lambda (#{name\ 876}# #{val\ 877}#)
             (if (#{lambda?\ 275}# #{val\ 877}#)
               (begin
                 (let ((#{meta\ 881}#
                         (#{lambda-meta\ 277}# #{val\ 877}#)))
                   (if (not (assq (quote name) #{meta\ 881}#))
                     (#{set-lambda-meta!\ 279}#
                       #{val\ 877}#
                       (cons (cons (quote name) #{name\ 876}#)
                             #{meta\ 881}#))))))))
         (#{build-void\ 302}#
           (lambda (#{source\ 882}#)
             (#{make-void\ 238}# #{source\ 882}#)))
         (#{build-application\ 304}#
           (lambda (#{source\ 884}#
                    #{fun-exp\ 885}#
                    #{arg-exps\ 886}#)
             (#{make-application\ 260}#
               #{source\ 884}#
               #{fun-exp\ 885}#
               #{arg-exps\ 886}#)))
         (#{build-conditional\ 306}#
           (lambda (#{source\ 890}#
                    #{test-exp\ 891}#
                    #{then-exp\ 892}#
                    #{else-exp\ 893}#)
             (#{make-conditional\ 258}#
               #{source\ 890}#
               #{test-exp\ 891}#
               #{then-exp\ 892}#
               #{else-exp\ 893}#)))
         (#{build-dynlet\ 308}#
           (lambda (#{source\ 898}#
                    #{fluids\ 899}#
                    #{vals\ 900}#
                    #{body\ 901}#)
             (#{make-dynlet\ 272}#
               #{source\ 898}#
               #{fluids\ 899}#
               #{vals\ 900}#
               #{body\ 901}#)))
         (#{build-lexical-reference\ 310}#
           (lambda (#{type\ 906}#
                    #{source\ 907}#
                    #{name\ 908}#
                    #{var\ 909}#)
             (#{make-lexical-ref\ 244}#
               #{source\ 907}#
               #{name\ 908}#
               #{var\ 909}#)))
         (#{build-lexical-assignment\ 312}#
           (lambda (#{source\ 914}#
                    #{name\ 915}#
                    #{var\ 916}#
                    #{exp\ 917}#)
             (begin
               (#{maybe-name-value!\ 300}#
                 #{name\ 915}#
                 #{exp\ 917}#)
               (#{make-lexical-set\ 246}#
                 #{source\ 914}#
                 #{name\ 915}#
                 #{var\ 916}#
                 #{exp\ 917}#))))
         (#{analyze-variable\ 314}#
           (lambda (#{mod\ 922}#
                    #{var\ 923}#
                    #{modref-cont\ 924}#
                    #{bare-cont\ 925}#)
             (if (not #{mod\ 922}#)
               (#{bare-cont\ 925}# #{var\ 923}#)
               (begin
                 (let ((#{kind\ 932}# (car #{mod\ 922}#))
                       (#{mod\ 933}# (cdr #{mod\ 922}#)))
                   (if (eqv? #{kind\ 932}# (quote public))
                     (#{modref-cont\ 924}#
                       #{mod\ 933}#
                       #{var\ 923}#
                       #t)
                     (if (eqv? #{kind\ 932}# (quote private))
                       (if (not (equal?
                                  #{mod\ 933}#
                                  (module-name (current-module))))
                         (#{modref-cont\ 924}#
                           #{mod\ 933}#
                           #{var\ 923}#
                           #f)
                         (#{bare-cont\ 925}# #{var\ 923}#))
                       (if (eqv? #{kind\ 932}# (quote bare))
                         (#{bare-cont\ 925}# #{var\ 923}#)
                         (if (eqv? #{kind\ 932}# (quote hygiene))
                           (if (if (not (equal?
                                          #{mod\ 933}#
                                          (module-name (current-module))))
                                 (module-variable
                                   (resolve-module #{mod\ 933}#)
                                   #{var\ 923}#)
                                 #f)
                             (#{modref-cont\ 924}#
                               #{mod\ 933}#
                               #{var\ 923}#
                               #f)
                             (#{bare-cont\ 925}# #{var\ 923}#))
                           (syntax-violation
                             #f
                             "bad module kind"
                             #{var\ 923}#
                             #{mod\ 933}#))))))))))
         (#{build-global-reference\ 316}#
           (lambda (#{source\ 941}# #{var\ 942}# #{mod\ 943}#)
             (#{analyze-variable\ 314}#
               #{mod\ 943}#
               #{var\ 942}#
               (lambda (#{mod\ 947}# #{var\ 948}# #{public?\ 949}#)
                 (#{make-module-ref\ 248}#
                   #{source\ 941}#
                   #{mod\ 947}#
                   #{var\ 948}#
                   #{public?\ 949}#))
               (lambda (#{var\ 953}#)
                 (#{make-toplevel-ref\ 252}#
                   #{source\ 941}#
                   #{var\ 953}#)))))
         (#{build-global-assignment\ 318}#
           (lambda (#{source\ 955}#
                    #{var\ 956}#
                    #{exp\ 957}#
                    #{mod\ 958}#)
             (begin
               (#{maybe-name-value!\ 300}#
                 #{var\ 956}#
                 #{exp\ 957}#)
               (#{analyze-variable\ 314}#
                 #{mod\ 958}#
                 #{var\ 956}#
                 (lambda (#{mod\ 963}# #{var\ 964}# #{public?\ 965}#)
                   (#{make-module-set\ 250}#
                     #{source\ 955}#
                     #{mod\ 963}#
                     #{var\ 964}#
                     #{public?\ 965}#
                     #{exp\ 957}#))
                 (lambda (#{var\ 969}#)
                   (#{make-toplevel-set\ 254}#
                     #{source\ 955}#
                     #{var\ 969}#
                     #{exp\ 957}#))))))
         (#{build-global-definition\ 320}#
           (lambda (#{source\ 971}# #{var\ 972}# #{exp\ 973}#)
             (begin
               (#{maybe-name-value!\ 300}#
                 #{var\ 972}#
                 #{exp\ 973}#)
               (#{make-toplevel-define\ 256}#
                 #{source\ 971}#
                 #{var\ 972}#
                 #{exp\ 973}#))))
         (#{build-simple-lambda\ 322}#
           (lambda (#{src\ 977}#
                    #{req\ 978}#
                    #{rest\ 979}#
                    #{vars\ 980}#
                    #{meta\ 981}#
                    #{exp\ 982}#)
             (#{make-lambda\ 264}#
               #{src\ 977}#
               #{meta\ 981}#
               (#{make-lambda-case\ 266}#
                 #{src\ 977}#
                 #{req\ 978}#
                 #f
                 #{rest\ 979}#
                 #f
                 '()
                 #{vars\ 980}#
                 #{exp\ 982}#
                 #f))))
         (#{build-case-lambda\ 324}#
           (lambda (#{src\ 989}# #{meta\ 990}# #{body\ 991}#)
             (#{make-lambda\ 264}#
               #{src\ 989}#
               #{meta\ 990}#
               #{body\ 991}#)))
         (#{build-lambda-case\ 326}#
           (lambda (#{src\ 995}#
                    #{req\ 996}#
                    #{opt\ 997}#
                    #{rest\ 998}#
                    #{kw\ 999}#
                    #{inits\ 1000}#
                    #{vars\ 1001}#
                    #{body\ 1002}#
                    #{else-case\ 1003}#)
             (#{make-lambda-case\ 266}#
               #{src\ 995}#
               #{req\ 996}#
               #{opt\ 997}#
               #{rest\ 998}#
               #{kw\ 999}#
               #{inits\ 1000}#
               #{vars\ 1001}#
               #{body\ 1002}#
               #{else-case\ 1003}#)))
         (#{build-primref\ 328}#
           (lambda (#{src\ 1013}# #{name\ 1014}#)
             (if (equal?
                   (module-name (current-module))
                   '(guile))
               (#{make-toplevel-ref\ 252}#
                 #{src\ 1013}#
                 #{name\ 1014}#)
               (#{make-module-ref\ 248}#
                 #{src\ 1013}#
                 '(guile)
                 #{name\ 1014}#
                 #f))))
         (#{build-data\ 330}#
           (lambda (#{src\ 1017}# #{exp\ 1018}#)
             (#{make-const\ 240}# #{src\ 1017}# #{exp\ 1018}#)))
         (#{build-sequence\ 332}#
           (lambda (#{src\ 1021}# #{exps\ 1022}#)
             (if (null? (cdr #{exps\ 1022}#))
               (car #{exps\ 1022}#)
               (#{make-sequence\ 262}#
                 #{src\ 1021}#
                 #{exps\ 1022}#))))
         (#{build-let\ 334}#
           (lambda (#{src\ 1025}#
                    #{ids\ 1026}#
                    #{vars\ 1027}#
                    #{val-exps\ 1028}#
                    #{body-exp\ 1029}#)
             (begin
               (for-each
                 #{maybe-name-value!\ 300}#
                 #{ids\ 1026}#
                 #{val-exps\ 1028}#)
               (if (null? #{vars\ 1027}#)
                 #{body-exp\ 1029}#
                 (#{make-let\ 268}#
                   #{src\ 1025}#
                   #{ids\ 1026}#
                   #{vars\ 1027}#
                   #{val-exps\ 1028}#
                   #{body-exp\ 1029}#)))))
         (#{build-named-let\ 336}#
           (lambda (#{src\ 1035}#
                    #{ids\ 1036}#
                    #{vars\ 1037}#
                    #{val-exps\ 1038}#
                    #{body-exp\ 1039}#)
             (begin
               (let ((#{f\ 1049}# (car #{vars\ 1037}#))
                     (#{f-name\ 1050}# (car #{ids\ 1036}#))
                     (#{vars\ 1051}# (cdr #{vars\ 1037}#))
                     (#{ids\ 1052}# (cdr #{ids\ 1036}#)))
                 (begin
                   (let ((#{proc\ 1054}#
                           (#{build-simple-lambda\ 322}#
                             #{src\ 1035}#
                             #{ids\ 1052}#
                             #f
                             #{vars\ 1051}#
                             '()
                             #{body-exp\ 1039}#)))
                     (begin
                       (#{maybe-name-value!\ 300}#
                         #{f-name\ 1050}#
                         #{proc\ 1054}#)
                       (for-each
                         #{maybe-name-value!\ 300}#
                         #{ids\ 1052}#
                         #{val-exps\ 1038}#)
                       (#{make-letrec\ 270}#
                         #{src\ 1035}#
                         #f
                         (list #{f-name\ 1050}#)
                         (list #{f\ 1049}#)
                         (list #{proc\ 1054}#)
                         (#{build-application\ 304}#
                           #{src\ 1035}#
                           (#{build-lexical-reference\ 310}#
                             'fun
                             #{src\ 1035}#
                             #{f-name\ 1050}#
                             #{f\ 1049}#)
                           #{val-exps\ 1038}#)))))))))
         (#{build-letrec\ 338}#
           (lambda (#{src\ 1055}#
                    #{in-order?\ 1056}#
                    #{ids\ 1057}#
                    #{vars\ 1058}#
                    #{val-exps\ 1059}#
                    #{body-exp\ 1060}#)
             (if (null? #{vars\ 1058}#)
               #{body-exp\ 1060}#
               (begin
                 (for-each
                   #{maybe-name-value!\ 300}#
                   #{ids\ 1057}#
                   #{val-exps\ 1059}#)
                 (#{make-letrec\ 270}#
                   #{src\ 1055}#
                   #{in-order?\ 1056}#
                   #{ids\ 1057}#
                   #{vars\ 1058}#
                   #{val-exps\ 1059}#
                   #{body-exp\ 1060}#)))))
         (#{make-syntax-object\ 342}#
           (lambda (#{expression\ 1067}#
                    #{wrap\ 1068}#
                    #{module\ 1069}#)
             (vector
               'syntax-object
               #{expression\ 1067}#
               #{wrap\ 1068}#
               #{module\ 1069}#)))
         (#{syntax-object?\ 344}#
           (lambda (#{x\ 1073}#)
             (if (vector? #{x\ 1073}#)
               (if (= (vector-length #{x\ 1073}#) 4)
                 (eq? (vector-ref #{x\ 1073}# 0)
                      'syntax-object)
                 #f)
               #f)))
         (#{syntax-object-expression\ 346}#
           (lambda (#{x\ 1078}#) (vector-ref #{x\ 1078}# 1)))
         (#{syntax-object-wrap\ 348}#
           (lambda (#{x\ 1080}#) (vector-ref #{x\ 1080}# 2)))
         (#{syntax-object-module\ 350}#
           (lambda (#{x\ 1082}#) (vector-ref #{x\ 1082}# 3)))
         (#{source-annotation\ 359}#
           (lambda (#{x\ 1096}#)
             (if (#{syntax-object?\ 344}# #{x\ 1096}#)
               (#{source-annotation\ 359}#
                 (#{syntax-object-expression\ 346}# #{x\ 1096}#))
               (if (pair? #{x\ 1096}#)
                 (begin
                   (let ((#{props\ 1103}# (source-properties #{x\ 1096}#)))
                     (if (pair? #{props\ 1103}#) #{props\ 1103}# #f)))
                 #f))))
         (#{extend-env\ 368}#
           (lambda (#{labels\ 1105}# #{bindings\ 1106}# #{r\ 1107}#)
             (if (null? #{labels\ 1105}#)
               #{r\ 1107}#
               (#{extend-env\ 368}#
                 (cdr #{labels\ 1105}#)
                 (cdr #{bindings\ 1106}#)
                 (cons (cons (car #{labels\ 1105}#)
                             (car #{bindings\ 1106}#))
                       #{r\ 1107}#)))))
         (#{extend-var-env\ 370}#
           (lambda (#{labels\ 1111}# #{vars\ 1112}# #{r\ 1113}#)
             (if (null? #{labels\ 1111}#)
               #{r\ 1113}#
               (#{extend-var-env\ 370}#
                 (cdr #{labels\ 1111}#)
                 (cdr #{vars\ 1112}#)
                 (cons (cons (car #{labels\ 1111}#)
                             (cons (quote lexical) (car #{vars\ 1112}#)))
                       #{r\ 1113}#)))))
         (#{macros-only-env\ 372}#
           (lambda (#{r\ 1118}#)
             (if (null? #{r\ 1118}#)
               '()
               (begin
                 (let ((#{a\ 1121}# (car #{r\ 1118}#)))
                   (if (eq? (car (cdr #{a\ 1121}#)) (quote macro))
                     (cons #{a\ 1121}#
                           (#{macros-only-env\ 372}# (cdr #{r\ 1118}#)))
                     (#{macros-only-env\ 372}# (cdr #{r\ 1118}#))))))))
         (#{lookup\ 374}#
           (lambda (#{x\ 1122}# #{r\ 1123}# #{mod\ 1124}#)
             (begin
               (let ((#{t\ 1130}# (assq #{x\ 1122}# #{r\ 1123}#)))
                 (if #{t\ 1130}#
                   (cdr #{t\ 1130}#)
                   (if (symbol? #{x\ 1122}#)
                     (begin
                       (let ((#{t\ 1136}#
                               (#{get-global-definition-hook\ 296}#
                                 #{x\ 1122}#
                                 #{mod\ 1124}#)))
                         (if #{t\ 1136}# #{t\ 1136}# (quote (global)))))
                     '(displaced-lexical)))))))
         (#{global-extend\ 376}#
           (lambda (#{type\ 1141}# #{sym\ 1142}# #{val\ 1143}#)
             (#{put-global-definition-hook\ 294}#
               #{sym\ 1142}#
               #{type\ 1141}#
               #{val\ 1143}#)))
         (#{nonsymbol-id?\ 378}#
           (lambda (#{x\ 1147}#)
             (if (#{syntax-object?\ 344}# #{x\ 1147}#)
               (symbol?
                 (#{syntax-object-expression\ 346}# #{x\ 1147}#))
               #f)))
         (#{id?\ 380}#
           (lambda (#{x\ 1151}#)
             (if (symbol? #{x\ 1151}#)
               #t
               (if (#{syntax-object?\ 344}# #{x\ 1151}#)
                 (symbol?
                   (#{syntax-object-expression\ 346}# #{x\ 1151}#))
                 #f))))
         (#{id-sym-name&marks\ 383}#
           (lambda (#{x\ 1158}# #{w\ 1159}#)
             (if (#{syntax-object?\ 344}# #{x\ 1158}#)
               (values
                 (#{syntax-object-expression\ 346}# #{x\ 1158}#)
                 (#{join-marks\ 433}#
                   (#{wrap-marks\ 387}# #{w\ 1159}#)
                   (#{wrap-marks\ 387}#
                     (#{syntax-object-wrap\ 348}# #{x\ 1158}#))))
               (values
                 #{x\ 1158}#
                 (#{wrap-marks\ 387}# #{w\ 1159}#)))))
         (#{gen-label\ 396}#
           (lambda () (symbol->string (gensym "i"))))
         (#{gen-labels\ 398}#
           (lambda (#{ls\ 1162}#)
             (if (null? #{ls\ 1162}#)
               '()
               (cons (#{gen-label\ 396}#)
                     (#{gen-labels\ 398}# (cdr #{ls\ 1162}#))))))
         (#{make-ribcage\ 401}#
           (lambda (#{symnames\ 1164}#
                    #{marks\ 1165}#
                    #{labels\ 1166}#)
             (vector
               'ribcage
               #{symnames\ 1164}#
               #{marks\ 1165}#
               #{labels\ 1166}#)))
         (#{ribcage-symnames\ 405}#
           (lambda (#{x\ 1175}#) (vector-ref #{x\ 1175}# 1)))
         (#{ribcage-marks\ 407}#
           (lambda (#{x\ 1177}#) (vector-ref #{x\ 1177}# 2)))
         (#{ribcage-labels\ 409}#
           (lambda (#{x\ 1179}#) (vector-ref #{x\ 1179}# 3)))
         (#{set-ribcage-symnames!\ 411}#
           (lambda (#{x\ 1181}# #{update\ 1182}#)
             (vector-set! #{x\ 1181}# 1 #{update\ 1182}#)))
         (#{set-ribcage-marks!\ 413}#
           (lambda (#{x\ 1185}# #{update\ 1186}#)
             (vector-set! #{x\ 1185}# 2 #{update\ 1186}#)))
         (#{set-ribcage-labels!\ 415}#
           (lambda (#{x\ 1189}# #{update\ 1190}#)
             (vector-set! #{x\ 1189}# 3 #{update\ 1190}#)))
         (#{anti-mark\ 421}#
           (lambda (#{w\ 1193}#)
             (#{make-wrap\ 385}#
               (cons #f (#{wrap-marks\ 387}# #{w\ 1193}#))
               (cons 'shift
                     (#{wrap-subst\ 389}# #{w\ 1193}#)))))
         (#{extend-ribcage!\ 425}#
           (lambda (#{ribcage\ 1196}# #{id\ 1197}# #{label\ 1198}#)
             (begin
               (#{set-ribcage-symnames!\ 411}#
                 #{ribcage\ 1196}#
                 (cons (#{syntax-object-expression\ 346}# #{id\ 1197}#)
                       (#{ribcage-symnames\ 405}# #{ribcage\ 1196}#)))
               (#{set-ribcage-marks!\ 413}#
                 #{ribcage\ 1196}#
                 (cons (#{wrap-marks\ 387}#
                         (#{syntax-object-wrap\ 348}# #{id\ 1197}#))
                       (#{ribcage-marks\ 407}# #{ribcage\ 1196}#)))
               (#{set-ribcage-labels!\ 415}#
                 #{ribcage\ 1196}#
                 (cons #{label\ 1198}#
                       (#{ribcage-labels\ 409}# #{ribcage\ 1196}#))))))
         (#{make-binding-wrap\ 427}#
           (lambda (#{ids\ 1202}# #{labels\ 1203}# #{w\ 1204}#)
             (if (null? #{ids\ 1202}#)
               #{w\ 1204}#
               (#{make-wrap\ 385}#
                 (#{wrap-marks\ 387}# #{w\ 1204}#)
                 (cons (begin
                         (let ((#{labelvec\ 1209}#
                                 (list->vector #{labels\ 1203}#)))
                           (begin
                             (let ((#{n\ 1211}#
                                     (vector-length #{labelvec\ 1209}#)))
                               (begin
                                 (let ((#{symnamevec\ 1214}#
                                         (make-vector #{n\ 1211}#))
                                       (#{marksvec\ 1215}#
                                         (make-vector #{n\ 1211}#)))
                                   (begin
                                     (letrec*
                                       ((#{f\ 1219}#
                                          (lambda (#{ids\ 1220}# #{i\ 1221}#)
                                            (if (not (null? #{ids\ 1220}#))
                                              (call-with-values
                                                (lambda ()
                                                  (#{id-sym-name&marks\ 383}#
                                                    (car #{ids\ 1220}#)
                                                    #{w\ 1204}#))
                                                (lambda (#{symname\ 1222}#
                                                         #{marks\ 1223}#)
                                                  (begin
                                                    (vector-set!
                                                      #{symnamevec\ 1214}#
                                                      #{i\ 1221}#
                                                      #{symname\ 1222}#)
                                                    (vector-set!
                                                      #{marksvec\ 1215}#
                                                      #{i\ 1221}#
                                                      #{marks\ 1223}#)
                                                    (#{f\ 1219}#
                                                      (cdr #{ids\ 1220}#)
                                                      (#{fx+\ 281}#
                                                        #{i\ 1221}#
                                                        1)))))))))
                                       (begin (#{f\ 1219}# #{ids\ 1202}# 0)))
                                     (#{make-ribcage\ 401}#
                                       #{symnamevec\ 1214}#
                                       #{marksvec\ 1215}#
                                       #{labelvec\ 1209}#))))))))
                       (#{wrap-subst\ 389}# #{w\ 1204}#))))))
         (#{smart-append\ 429}#
           (lambda (#{m1\ 1226}# #{m2\ 1227}#)
             (if (null? #{m2\ 1227}#)
               #{m1\ 1226}#
               (append #{m1\ 1226}# #{m2\ 1227}#))))
         (#{join-wraps\ 431}#
           (lambda (#{w1\ 1230}# #{w2\ 1231}#)
             (begin
               (let ((#{m1\ 1236}# (#{wrap-marks\ 387}# #{w1\ 1230}#))
                     (#{s1\ 1237}# (#{wrap-subst\ 389}# #{w1\ 1230}#)))
                 (if (null? #{m1\ 1236}#)
                   (if (null? #{s1\ 1237}#)
                     #{w2\ 1231}#
                     (#{make-wrap\ 385}#
                       (#{wrap-marks\ 387}# #{w2\ 1231}#)
                       (#{smart-append\ 429}#
                         #{s1\ 1237}#
                         (#{wrap-subst\ 389}# #{w2\ 1231}#))))
                   (#{make-wrap\ 385}#
                     (#{smart-append\ 429}#
                       #{m1\ 1236}#
                       (#{wrap-marks\ 387}# #{w2\ 1231}#))
                     (#{smart-append\ 429}#
                       #{s1\ 1237}#
                       (#{wrap-subst\ 389}# #{w2\ 1231}#))))))))
         (#{join-marks\ 433}#
           (lambda (#{m1\ 1238}# #{m2\ 1239}#)
             (#{smart-append\ 429}# #{m1\ 1238}# #{m2\ 1239}#)))
         (#{same-marks?\ 435}#
           (lambda (#{x\ 1242}# #{y\ 1243}#)
             (begin
               (let ((#{t\ 1248}# (eq? #{x\ 1242}# #{y\ 1243}#)))
                 (if #{t\ 1248}#
                   #{t\ 1248}#
                   (if (not (null? #{x\ 1242}#))
                     (if (not (null? #{y\ 1243}#))
                       (if (eq? (car #{x\ 1242}#) (car #{y\ 1243}#))
                         (#{same-marks?\ 435}#
                           (cdr #{x\ 1242}#)
                           (cdr #{y\ 1243}#))
                         #f)
                       #f)
                     #f))))))
         (#{id-var-name\ 437}#
           (lambda (#{id\ 1254}# #{w\ 1255}#)
             (letrec*
               ((#{search\ 1260}#
                  (lambda (#{sym\ 1276}# #{subst\ 1277}# #{marks\ 1278}#)
                    (if (null? #{subst\ 1277}#)
                      (values #f #{marks\ 1278}#)
                      (begin
                        (let ((#{fst\ 1283}# (car #{subst\ 1277}#)))
                          (if (eq? #{fst\ 1283}# (quote shift))
                            (#{search\ 1260}#
                              #{sym\ 1276}#
                              (cdr #{subst\ 1277}#)
                              (cdr #{marks\ 1278}#))
                            (begin
                              (let ((#{symnames\ 1285}#
                                      (#{ribcage-symnames\ 405}#
                                        #{fst\ 1283}#)))
                                (if (vector? #{symnames\ 1285}#)
                                  (#{search-vector-rib\ 1264}#
                                    #{sym\ 1276}#
                                    #{subst\ 1277}#
                                    #{marks\ 1278}#
                                    #{symnames\ 1285}#
                                    #{fst\ 1283}#)
                                  (#{search-list-rib\ 1262}#
                                    #{sym\ 1276}#
                                    #{subst\ 1277}#
                                    #{marks\ 1278}#
                                    #{symnames\ 1285}#
                                    #{fst\ 1283}#))))))))))
                (#{search-list-rib\ 1262}#
                  (lambda (#{sym\ 1286}#
                           #{subst\ 1287}#
                           #{marks\ 1288}#
                           #{symnames\ 1289}#
                           #{ribcage\ 1290}#)
                    (letrec*
                      ((#{f\ 1299}#
                         (lambda (#{symnames\ 1300}# #{i\ 1301}#)
                           (if (null? #{symnames\ 1300}#)
                             (#{search\ 1260}#
                               #{sym\ 1286}#
                               (cdr #{subst\ 1287}#)
                               #{marks\ 1288}#)
                             (if (if (eq? (car #{symnames\ 1300}#)
                                          #{sym\ 1286}#)
                                   (#{same-marks?\ 435}#
                                     #{marks\ 1288}#
                                     (list-ref
                                       (#{ribcage-marks\ 407}#
                                         #{ribcage\ 1290}#)
                                       #{i\ 1301}#))
                                   #f)
                               (values
                                 (list-ref
                                   (#{ribcage-labels\ 409}# #{ribcage\ 1290}#)
                                   #{i\ 1301}#)
                                 #{marks\ 1288}#)
                               (#{f\ 1299}#
                                 (cdr #{symnames\ 1300}#)
                                 (#{fx+\ 281}# #{i\ 1301}# 1)))))))
                      (begin (#{f\ 1299}# #{symnames\ 1289}# 0)))))
                (#{search-vector-rib\ 1264}#
                  (lambda (#{sym\ 1309}#
                           #{subst\ 1310}#
                           #{marks\ 1311}#
                           #{symnames\ 1312}#
                           #{ribcage\ 1313}#)
                    (begin
                      (let ((#{n\ 1320}# (vector-length #{symnames\ 1312}#)))
                        (letrec*
                          ((#{f\ 1323}#
                             (lambda (#{i\ 1324}#)
                               (if (#{fx=\ 285}# #{i\ 1324}# #{n\ 1320}#)
                                 (#{search\ 1260}#
                                   #{sym\ 1309}#
                                   (cdr #{subst\ 1310}#)
                                   #{marks\ 1311}#)
                                 (if (if (eq? (vector-ref
                                                #{symnames\ 1312}#
                                                #{i\ 1324}#)
                                              #{sym\ 1309}#)
                                       (#{same-marks?\ 435}#
                                         #{marks\ 1311}#
                                         (vector-ref
                                           (#{ribcage-marks\ 407}#
                                             #{ribcage\ 1313}#)
                                           #{i\ 1324}#))
                                       #f)
                                   (values
                                     (vector-ref
                                       (#{ribcage-labels\ 409}#
                                         #{ribcage\ 1313}#)
                                       #{i\ 1324}#)
                                     #{marks\ 1311}#)
                                   (#{f\ 1323}#
                                     (#{fx+\ 281}# #{i\ 1324}# 1)))))))
                          (begin (#{f\ 1323}# 0))))))))
               (begin
                 (if (symbol? #{id\ 1254}#)
                   (begin
                     (let ((#{t\ 1334}#
                             (call-with-values
                               (lambda ()
                                 (#{search\ 1260}#
                                   #{id\ 1254}#
                                   (#{wrap-subst\ 389}# #{w\ 1255}#)
                                   (#{wrap-marks\ 387}# #{w\ 1255}#)))
                               (lambda (#{x\ 1336}# . #{ignore\ 1337}#)
                                 #{x\ 1336}#))))
                       (if #{t\ 1334}# #{t\ 1334}# #{id\ 1254}#)))
                   (if (#{syntax-object?\ 344}# #{id\ 1254}#)
                     (begin
                       (let ((#{id\ 1345}#
                               (#{syntax-object-expression\ 346}#
                                 #{id\ 1254}#))
                             (#{w1\ 1346}#
                               (#{syntax-object-wrap\ 348}# #{id\ 1254}#)))
                         (begin
                           (let ((#{marks\ 1348}#
                                   (#{join-marks\ 433}#
                                     (#{wrap-marks\ 387}# #{w\ 1255}#)
                                     (#{wrap-marks\ 387}# #{w1\ 1346}#))))
                             (call-with-values
                               (lambda ()
                                 (#{search\ 1260}#
                                   #{id\ 1345}#
                                   (#{wrap-subst\ 389}# #{w\ 1255}#)
                                   #{marks\ 1348}#))
                               (lambda (#{new-id\ 1349}# #{marks\ 1350}#)
                                 (begin
                                   (let ((#{t\ 1355}# #{new-id\ 1349}#))
                                     (if #{t\ 1355}#
                                       #{t\ 1355}#
                                       (begin
                                         (let ((#{t\ 1358}#
                                                 (call-with-values
                                                   (lambda ()
                                                     (#{search\ 1260}#
                                                       #{id\ 1345}#
                                                       (#{wrap-subst\ 389}#
                                                         #{w1\ 1346}#)
                                                       #{marks\ 1350}#))
                                                   (lambda (#{x\ 1360}#
                                                            .
                                                            #{ignore\ 1361}#)
                                                     #{x\ 1360}#))))
                                           (if #{t\ 1358}#
                                             #{t\ 1358}#
                                             #{id\ 1345}#))))))))))))
                     (syntax-violation
                       'id-var-name
                       "invalid id"
                       #{id\ 1254}#)))))))
         (#{free-id=?\ 439}#
           (lambda (#{i\ 1366}# #{j\ 1367}#)
             (if (eq? (begin
                        (let ((#{x\ 1373}# #{i\ 1366}#))
                          (if (#{syntax-object?\ 344}# #{x\ 1373}#)
                            (#{syntax-object-expression\ 346}# #{x\ 1373}#)
                            #{x\ 1373}#)))
                      (begin
                        (let ((#{x\ 1376}# #{j\ 1367}#))
                          (if (#{syntax-object?\ 344}# #{x\ 1376}#)
                            (#{syntax-object-expression\ 346}# #{x\ 1376}#)
                            #{x\ 1376}#))))
               (eq? (#{id-var-name\ 437}# #{i\ 1366}# (quote (())))
                    (#{id-var-name\ 437}# #{j\ 1367}# (quote (()))))
               #f)))
         (#{bound-id=?\ 441}#
           (lambda (#{i\ 1380}# #{j\ 1381}#)
             (if (if (#{syntax-object?\ 344}# #{i\ 1380}#)
                   (#{syntax-object?\ 344}# #{j\ 1381}#)
                   #f)
               (if (eq? (#{syntax-object-expression\ 346}# #{i\ 1380}#)
                        (#{syntax-object-expression\ 346}# #{j\ 1381}#))
                 (#{same-marks?\ 435}#
                   (#{wrap-marks\ 387}#
                     (#{syntax-object-wrap\ 348}# #{i\ 1380}#))
                   (#{wrap-marks\ 387}#
                     (#{syntax-object-wrap\ 348}# #{j\ 1381}#)))
                 #f)
               (eq? #{i\ 1380}# #{j\ 1381}#))))
         (#{valid-bound-ids?\ 443}#
           (lambda (#{ids\ 1388}#)
             (if (letrec*
                   ((#{all-ids?\ 1393}#
                      (lambda (#{ids\ 1394}#)
                        (begin
                          (let ((#{t\ 1397}# (null? #{ids\ 1394}#)))
                            (if #{t\ 1397}#
                              #{t\ 1397}#
                              (if (#{id?\ 380}# (car #{ids\ 1394}#))
                                (#{all-ids?\ 1393}# (cdr #{ids\ 1394}#))
                                #f)))))))
                   (begin (#{all-ids?\ 1393}# #{ids\ 1388}#)))
               (#{distinct-bound-ids?\ 445}# #{ids\ 1388}#)
               #f)))
         (#{distinct-bound-ids?\ 445}#
           (lambda (#{ids\ 1402}#)
             (letrec*
               ((#{distinct?\ 1406}#
                  (lambda (#{ids\ 1407}#)
                    (begin
                      (let ((#{t\ 1410}# (null? #{ids\ 1407}#)))
                        (if #{t\ 1410}#
                          #{t\ 1410}#
                          (if (not (#{bound-id-member?\ 447}#
                                     (car #{ids\ 1407}#)
                                     (cdr #{ids\ 1407}#)))
                            (#{distinct?\ 1406}# (cdr #{ids\ 1407}#))
                            #f)))))))
               (begin (#{distinct?\ 1406}# #{ids\ 1402}#)))))
         (#{bound-id-member?\ 447}#
           (lambda (#{x\ 1414}# #{list\ 1415}#)
             (if (not (null? #{list\ 1415}#))
               (begin
                 (let ((#{t\ 1422}#
                         (#{bound-id=?\ 441}#
                           #{x\ 1414}#
                           (car #{list\ 1415}#))))
                   (if #{t\ 1422}#
                     #{t\ 1422}#
                     (#{bound-id-member?\ 447}#
                       #{x\ 1414}#
                       (cdr #{list\ 1415}#)))))
               #f)))
         (#{wrap\ 449}#
           (lambda (#{x\ 1424}# #{w\ 1425}# #{defmod\ 1426}#)
             (if (if (null? (#{wrap-marks\ 387}# #{w\ 1425}#))
                   (null? (#{wrap-subst\ 389}# #{w\ 1425}#))
                   #f)
               #{x\ 1424}#
               (if (#{syntax-object?\ 344}# #{x\ 1424}#)
                 (#{make-syntax-object\ 342}#
                   (#{syntax-object-expression\ 346}# #{x\ 1424}#)
                   (#{join-wraps\ 431}#
                     #{w\ 1425}#
                     (#{syntax-object-wrap\ 348}# #{x\ 1424}#))
                   (#{syntax-object-module\ 350}# #{x\ 1424}#))
                 (if (null? #{x\ 1424}#)
                   #{x\ 1424}#
                   (#{make-syntax-object\ 342}#
                     #{x\ 1424}#
                     #{w\ 1425}#
                     #{defmod\ 1426}#))))))
         (#{source-wrap\ 451}#
           (lambda (#{x\ 1439}#
                    #{w\ 1440}#
                    #{s\ 1441}#
                    #{defmod\ 1442}#)
             (#{wrap\ 449}#
               (#{decorate-source\ 298}#
                 #{x\ 1439}#
                 #{s\ 1441}#)
               #{w\ 1440}#
               #{defmod\ 1442}#)))
         (#{chi-sequence\ 453}#
           (lambda (#{body\ 1447}#
                    #{r\ 1448}#
                    #{w\ 1449}#
                    #{s\ 1450}#
                    #{mod\ 1451}#)
             (#{build-sequence\ 332}#
               #{s\ 1450}#
               (letrec*
                 ((#{dobody\ 1462}#
                    (lambda (#{body\ 1463}#
                             #{r\ 1464}#
                             #{w\ 1465}#
                             #{mod\ 1466}#)
                      (if (null? #{body\ 1463}#)
                        '()
                        (begin
                          (let ((#{first\ 1468}#
                                  (#{chi\ 465}#
                                    (car #{body\ 1463}#)
                                    #{r\ 1464}#
                                    #{w\ 1465}#
                                    #{mod\ 1466}#)))
                            (cons #{first\ 1468}#
                                  (#{dobody\ 1462}#
                                    (cdr #{body\ 1463}#)
                                    #{r\ 1464}#
                                    #{w\ 1465}#
                                    #{mod\ 1466}#))))))))
                 (begin
                   (#{dobody\ 1462}#
                     #{body\ 1447}#
                     #{r\ 1448}#
                     #{w\ 1449}#
                     #{mod\ 1451}#))))))
         (#{chi-top-sequence\ 455}#
           (lambda (#{body\ 1469}#
                    #{r\ 1470}#
                    #{w\ 1471}#
                    #{s\ 1472}#
                    #{m\ 1473}#
                    #{esew\ 1474}#
                    #{mod\ 1475}#)
             (#{build-sequence\ 332}#
               #{s\ 1472}#
               (letrec*
                 ((#{dobody\ 1491}#
                    (lambda (#{body\ 1492}#
                             #{r\ 1493}#
                             #{w\ 1494}#
                             #{m\ 1495}#
                             #{esew\ 1496}#
                             #{mod\ 1497}#
                             #{out\ 1498}#)
                      (if (null? #{body\ 1492}#)
                        (reverse #{out\ 1498}#)
                        (#{dobody\ 1491}#
                          (cdr #{body\ 1492}#)
                          #{r\ 1493}#
                          #{w\ 1494}#
                          #{m\ 1495}#
                          #{esew\ 1496}#
                          #{mod\ 1497}#
                          (cons (#{chi-top\ 463}#
                                  (car #{body\ 1492}#)
                                  #{r\ 1493}#
                                  #{w\ 1494}#
                                  #{m\ 1495}#
                                  #{esew\ 1496}#
                                  #{mod\ 1497}#)
                                #{out\ 1498}#))))))
                 (begin
                   (#{dobody\ 1491}#
                     #{body\ 1469}#
                     #{r\ 1470}#
                     #{w\ 1471}#
                     #{m\ 1473}#
                     #{esew\ 1474}#
                     #{mod\ 1475}#
                     '()))))))
         (#{chi-install-global\ 457}#
           (lambda (#{name\ 1499}# #{e\ 1500}#)
             (#{build-global-definition\ 320}#
               #f
               #{name\ 1499}#
               (#{build-application\ 304}#
                 #f
                 (#{build-primref\ 328}#
                   #f
                   'make-syntax-transformer)
                 (list (#{build-data\ 330}# #f #{name\ 1499}#)
                       (#{build-data\ 330}# #f (quote macro))
                       #{e\ 1500}#)))))
         (#{chi-when-list\ 459}#
           (lambda (#{e\ 1508}# #{when-list\ 1509}# #{w\ 1510}#)
             (letrec*
               ((#{f\ 1517}#
                  (lambda (#{when-list\ 1518}# #{situations\ 1519}#)
                    (if (null? #{when-list\ 1518}#)
                      #{situations\ 1519}#
                      (#{f\ 1517}#
                        (cdr #{when-list\ 1518}#)
                        (cons (begin
                                (let ((#{x\ 1521}# (car #{when-list\ 1518}#)))
                                  (if (#{free-id=?\ 439}#
                                        #{x\ 1521}#
                                        '#(syntax-object
                                           compile
                                           ((top)
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage #(x) #((top)) #("i1520"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(f when-list situations)
                                              #((top) (top) (top))
                                              #("i1514" "i1515" "i1516"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(e when-list w)
                                              #((top) (top) (top))
                                              #("i1511" "i1512" "i1513"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                chi-lambda-case
                                                lambda*-formals
                                                chi-simple-lambda
                                                lambda-formals
                                                underscore?
                                                ellipsis?
                                                chi-void
                                                eval-local-transformer
                                                chi-local-syntax
                                                chi-body
                                                chi-macro
                                                chi-application
                                                chi-expr
                                                chi
                                                chi-top
                                                syntax-type
                                                chi-when-list
                                                chi-install-global
                                                chi-top-sequence
                                                chi-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i496"
                                               "i494"
                                               "i492"
                                               "i490"
                                               "i488"
                                               "i486"
                                               "i484"
                                               "i482"
                                               "i480"
                                               "i478"
                                               "i476"
                                               "i474"
                                               "i472"
                                               "i470"
                                               "i468"
                                               "i466"
                                               "i464"
                                               "i462"
                                               "i460"
                                               "i458"
                                               "i456"
                                               "i454"
                                               "i452"
                                               "i450"
                                               "i448"
                                               "i446"
                                               "i444"
                                               "i442"
                                               "i440"
                                               "i438"
                                               "i436"
                                               "i434"
                                               "i432"
                                               "i430"
                                               "i428"
                                               "i426"
                                               "i424"
                                               "i423"
                                               "i422"
                                               "i420"
                                               "i419"
                                               "i418"
                                               "i417"
                                               "i416"
                                               "i414"
                                               "i412"
                                               "i410"
                                               "i408"
                                               "i406"
                                               "i404"
                                               "i402"
                                               "i400"
                                               "i397"
                                               "i395"
                                               "i394"
                                               "i393"
                                               "i392"
                                               "i391"
                                               "i390"
                                               "i388"
                                               "i386"
                                               "i384"
                                               "i382"
                                               "i381"
                                               "i379"
                                               "i377"
                                               "i375"
                                               "i373"
                                               "i371"
                                               "i369"
                                               "i367"
                                               "i366"
                                               "i364"
                                               "i362"
                                               "i361"
                                               "i360"
                                               "i358"
                                               "i357"
                                               "i355"
                                               "i353"
                                               "i351"
                                               "i349"
                                               "i347"
                                               "i345"
                                               "i343"
                                               "i341"
                                               "i339"
                                               "i337"
                                               "i335"
                                               "i333"
                                               "i331"
                                               "i329"
                                               "i327"
                                               "i325"
                                               "i323"
                                               "i321"
                                               "i319"
                                               "i317"
                                               "i315"
                                               "i313"
                                               "i311"
                                               "i309"
                                               "i307"
                                               "i305"
                                               "i303"
                                               "i301"
                                               "i299"
                                               "i297"
                                               "i295"
                                               "i293"
                                               "i292"
                                               "i290"
                                               "i288"
                                               "i286"
                                               "i284"
                                               "i282"
                                               "i280"
                                               "i278"
                                               "i276"
                                               "i274"
                                               "i271"
                                               "i269"
                                               "i267"
                                               "i265"
                                               "i263"
                                               "i261"
                                               "i259"
                                               "i257"
                                               "i255"
                                               "i253"
                                               "i251"
                                               "i249"
                                               "i247"
                                               "i245"
                                               "i243"
                                               "i241"
                                               "i239"
                                               "i237"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors
                                                and-map*)
                                              ((top) (top) (top) (top))
                                              ("i39" "i38" "i37" "i35")))
                                           (hygiene guile)))
                                    'compile
                                    (if (#{free-id=?\ 439}#
                                          #{x\ 1521}#
                                          '#(syntax-object
                                             load
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i1520"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(f when-list situations)
                                                #((top) (top) (top))
                                                #("i1514" "i1515" "i1516"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(e when-list w)
                                                #((top) (top) (top))
                                                #("i1511" "i1512" "i1513"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  chi-lambda-case
                                                  lambda*-formals
                                                  chi-simple-lambda
                                                  lambda-formals
                                                  underscore?
                                                  ellipsis?
                                                  chi-void
                                                  eval-local-transformer
                                                  chi-local-syntax
                                                  chi-body
                                                  chi-macro
                                                  chi-application
                                                  chi-expr
                                                  chi
                                                  chi-top
                                                  syntax-type
                                                  chi-when-list
                                                  chi-install-global
                                                  chi-top-sequence
                                                  chi-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i496"
                                                 "i494"
                                                 "i492"
                                                 "i490"
                                                 "i488"
                                                 "i486"
                                                 "i484"
                                                 "i482"
                                                 "i480"
                                                 "i478"
                                                 "i476"
                                                 "i474"
                                                 "i472"
                                                 "i470"
                                                 "i468"
                                                 "i466"
                                                 "i464"
                                                 "i462"
                                                 "i460"
                                                 "i458"
                                                 "i456"
                                                 "i454"
                                                 "i452"
                                                 "i450"
                                                 "i448"
                                                 "i446"
                                                 "i444"
                                                 "i442"
                                                 "i440"
                                                 "i438"
                                                 "i436"
                                                 "i434"
                                                 "i432"
                                                 "i430"
                                                 "i428"
                                                 "i426"
                                                 "i424"
                                                 "i423"
                                                 "i422"
                                                 "i420"
                                                 "i419"
                                                 "i418"
                                                 "i417"
                                                 "i416"
                                                 "i414"
                                                 "i412"
                                                 "i410"
                                                 "i408"
                                                 "i406"
                                                 "i404"
                                                 "i402"
                                                 "i400"
                                                 "i397"
                                                 "i395"
                                                 "i394"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i390"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i381"
                                                 "i379"
                                                 "i377"
                                                 "i375"
                                                 "i373"
                                                 "i371"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i361"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i355"
                                                 "i353"
                                                 "i351"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i329"
                                                 "i327"
                                                 "i325"
                                                 "i323"
                                                 "i321"
                                                 "i319"
                                                 "i317"
                                                 "i315"
                                                 "i313"
                                                 "i311"
                                                 "i309"
                                                 "i307"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i292"
                                                 "i290"
                                                 "i288"
                                                 "i286"
                                                 "i284"
                                                 "i282"
                                                 "i280"
                                                 "i278"
                                                 "i276"
                                                 "i274"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i259"
                                                 "i257"
                                                 "i255"
                                                 "i253"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i243"
                                                 "i241"
                                                 "i239"
                                                 "i237"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors
                                                  and-map*)
                                                ((top) (top) (top) (top))
                                                ("i39" "i38" "i37" "i35")))
                                             (hygiene guile)))
                                      'load
                                      (if (#{free-id=?\ 439}#
                                            #{x\ 1521}#
                                            '#(syntax-object
                                               eval
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i1520"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f when-list situations)
                                                  #((top) (top) (top))
                                                  #("i1514" "i1515" "i1516"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(e when-list w)
                                                  #((top) (top) (top))
                                                  #("i1511" "i1512" "i1513"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    chi-lambda-case
                                                    lambda*-formals
                                                    chi-simple-lambda
                                                    lambda-formals
                                                    underscore?
                                                    ellipsis?
                                                    chi-void
                                                    eval-local-transformer
                                                    chi-local-syntax
                                                    chi-body
                                                    chi-macro
                                                    chi-application
                                                    chi-expr
                                                    chi
                                                    chi-top
                                                    syntax-type
                                                    chi-when-list
                                                    chi-install-global
                                                    chi-top-sequence
                                                    chi-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i496"
                                                   "i494"
                                                   "i492"
                                                   "i490"
                                                   "i488"
                                                   "i486"
                                                   "i484"
                                                   "i482"
                                                   "i480"
                                                   "i478"
                                                   "i476"
                                                   "i474"
                                                   "i472"
                                                   "i470"
                                                   "i468"
                                                   "i466"
                                                   "i464"
                                                   "i462"
                                                   "i460"
                                                   "i458"
                                                   "i456"
                                                   "i454"
                                                   "i452"
                                                   "i450"
                                                   "i448"
                                                   "i446"
                                                   "i444"
                                                   "i442"
                                                   "i440"
                                                   "i438"
                                                   "i436"
                                                   "i434"
                                                   "i432"
                                                   "i430"
                                                   "i428"
                                                   "i426"
                                                   "i424"
                                                   "i423"
                                                   "i422"
                                                   "i420"
                                                   "i419"
                                                   "i418"
                                                   "i417"
                                                   "i416"
                                                   "i414"
                                                   "i412"
                                                   "i410"
                                                   "i408"
                                                   "i406"
                                                   "i404"
                                                   "i402"
                                                   "i400"
                                                   "i397"
                                                   "i395"
                                                   "i394"
                                                   "i393"
                                                   "i392"
                                                   "i391"
                                                   "i390"
                                                   "i388"
                                                   "i386"
                                                   "i384"
                                                   "i382"
                                                   "i381"
                                                   "i379"
                                                   "i377"
                                                   "i375"
                                                   "i373"
                                                   "i371"
                                                   "i369"
                                                   "i367"
                                                   "i366"
                                                   "i364"
                                                   "i362"
                                                   "i361"
                                                   "i360"
                                                   "i358"
                                                   "i357"
                                                   "i355"
                                                   "i353"
                                                   "i351"
                                                   "i349"
                                                   "i347"
                                                   "i345"
                                                   "i343"
                                                   "i341"
                                                   "i339"
                                                   "i337"
                                                   "i335"
                                                   "i333"
                                                   "i331"
                                                   "i329"
                                                   "i327"
                                                   "i325"
                                                   "i323"
                                                   "i321"
                                                   "i319"
                                                   "i317"
                                                   "i315"
                                                   "i313"
                                                   "i311"
                                                   "i309"
                                                   "i307"
                                                   "i305"
                                                   "i303"
                                                   "i301"
                                                   "i299"
                                                   "i297"
                                                   "i295"
                                                   "i293"
                                                   "i292"
                                                   "i290"
                                                   "i288"
                                                   "i286"
                                                   "i284"
                                                   "i282"
                                                   "i280"
                                                   "i278"
                                                   "i276"
                                                   "i274"
                                                   "i271"
                                                   "i269"
                                                   "i267"
                                                   "i265"
                                                   "i263"
                                                   "i261"
                                                   "i259"
                                                   "i257"
                                                   "i255"
                                                   "i253"
                                                   "i251"
                                                   "i249"
                                                   "i247"
                                                   "i245"
                                                   "i243"
                                                   "i241"
                                                   "i239"
                                                   "i237"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors
                                                    and-map*)
                                                  ((top) (top) (top) (top))
                                                  ("i39" "i38" "i37" "i35")))
                                               (hygiene guile)))
                                        'eval
                                        (if (#{free-id=?\ 439}#
                                              #{x\ 1521}#
                                              '#(syntax-object
                                                 expand
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i1520"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(f when-list situations)
                                                    #((top) (top) (top))
                                                    #("i1514" "i1515" "i1516"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e when-list w)
                                                    #((top) (top) (top))
                                                    #("i1511" "i1512" "i1513"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      underscore?
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      chi-top
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      maybe-name-value!
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i496"
                                                     "i494"
                                                     "i492"
                                                     "i490"
                                                     "i488"
                                                     "i486"
                                                     "i484"
                                                     "i482"
                                                     "i480"
                                                     "i478"
                                                     "i476"
                                                     "i474"
                                                     "i472"
                                                     "i470"
                                                     "i468"
                                                     "i466"
                                                     "i464"
                                                     "i462"
                                                     "i460"
                                                     "i458"
                                                     "i456"
                                                     "i454"
                                                     "i452"
                                                     "i450"
                                                     "i448"
                                                     "i446"
                                                     "i444"
                                                     "i442"
                                                     "i440"
                                                     "i438"
                                                     "i436"
                                                     "i434"
                                                     "i432"
                                                     "i430"
                                                     "i428"
                                                     "i426"
                                                     "i424"
                                                     "i423"
                                                     "i422"
                                                     "i420"
                                                     "i419"
                                                     "i418"
                                                     "i417"
                                                     "i416"
                                                     "i414"
                                                     "i412"
                                                     "i410"
                                                     "i408"
                                                     "i406"
                                                     "i404"
                                                     "i402"
                                                     "i400"
                                                     "i397"
                                                     "i395"
                                                     "i394"
                                                     "i393"
                                                     "i392"
                                                     "i391"
                                                     "i390"
                                                     "i388"
                                                     "i386"
                                                     "i384"
                                                     "i382"
                                                     "i381"
                                                     "i379"
                                                     "i377"
                                                     "i375"
                                                     "i373"
                                                     "i371"
                                                     "i369"
                                                     "i367"
                                                     "i366"
                                                     "i364"
                                                     "i362"
                                                     "i361"
                                                     "i360"
                                                     "i358"
                                                     "i357"
                                                     "i355"
                                                     "i353"
                                                     "i351"
                                                     "i349"
                                                     "i347"
                                                     "i345"
                                                     "i343"
                                                     "i341"
                                                     "i339"
                                                     "i337"
                                                     "i335"
                                                     "i333"
                                                     "i331"
                                                     "i329"
                                                     "i327"
                                                     "i325"
                                                     "i323"
                                                     "i321"
                                                     "i319"
                                                     "i317"
                                                     "i315"
                                                     "i313"
                                                     "i311"
                                                     "i309"
                                                     "i307"
                                                     "i305"
                                                     "i303"
                                                     "i301"
                                                     "i299"
                                                     "i297"
                                                     "i295"
                                                     "i293"
                                                     "i292"
                                                     "i290"
                                                     "i288"
                                                     "i286"
                                                     "i284"
                                                     "i282"
                                                     "i280"
                                                     "i278"
                                                     "i276"
                                                     "i274"
                                                     "i271"
                                                     "i269"
                                                     "i267"
                                                     "i265"
                                                     "i263"
                                                     "i261"
                                                     "i259"
                                                     "i257"
                                                     "i255"
                                                     "i253"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i245"
                                                     "i243"
                                                     "i241"
                                                     "i239"
                                                     "i237"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors
                                                      and-map*)
                                                    ((top) (top) (top) (top))
                                                    ("i39" "i38" "i37" "i35")))
                                                 (hygiene guile)))
                                          'expand
                                          (syntax-violation
                                            'eval-when
                                            "invalid situation"
                                            #{e\ 1508}#
                                            (#{wrap\ 449}#
                                              #{x\ 1521}#
                                              #{w\ 1510}#
                                              #f))))))))
                              #{situations\ 1519}#))))))
               (begin
                 (#{f\ 1517}# #{when-list\ 1509}# (quote ()))))))
         (#{syntax-type\ 461}#
           (lambda (#{e\ 1531}#
                    #{r\ 1532}#
                    #{w\ 1533}#
                    #{s\ 1534}#
                    #{rib\ 1535}#
                    #{mod\ 1536}#
                    #{for-car?\ 1537}#)
             (if (symbol? #{e\ 1531}#)
               (begin
                 (let ((#{n\ 1549}#
                         (#{id-var-name\ 437}# #{e\ 1531}# #{w\ 1533}#)))
                   (begin
                     (let ((#{b\ 1551}#
                             (#{lookup\ 374}#
                               #{n\ 1549}#
                               #{r\ 1532}#
                               #{mod\ 1536}#)))
                       (begin
                         (let ((#{type\ 1553}#
                                 (#{binding-type\ 363}# #{b\ 1551}#)))
                           (if (eqv? #{type\ 1553}# (quote lexical))
                             (values
                               #{type\ 1553}#
                               (#{binding-value\ 365}# #{b\ 1551}#)
                               #{e\ 1531}#
                               #{w\ 1533}#
                               #{s\ 1534}#
                               #{mod\ 1536}#)
                             (if (eqv? #{type\ 1553}# (quote global))
                               (values
                                 #{type\ 1553}#
                                 #{n\ 1549}#
                                 #{e\ 1531}#
                                 #{w\ 1533}#
                                 #{s\ 1534}#
                                 #{mod\ 1536}#)
                               (if (eqv? #{type\ 1553}# (quote macro))
                                 (if #{for-car?\ 1537}#
                                   (values
                                     #{type\ 1553}#
                                     (#{binding-value\ 365}# #{b\ 1551}#)
                                     #{e\ 1531}#
                                     #{w\ 1533}#
                                     #{s\ 1534}#
                                     #{mod\ 1536}#)
                                   (#{syntax-type\ 461}#
                                     (#{chi-macro\ 471}#
                                       (#{binding-value\ 365}# #{b\ 1551}#)
                                       #{e\ 1531}#
                                       #{r\ 1532}#
                                       #{w\ 1533}#
                                       #{s\ 1534}#
                                       #{rib\ 1535}#
                                       #{mod\ 1536}#)
                                     #{r\ 1532}#
                                     '(())
                                     #{s\ 1534}#
                                     #{rib\ 1535}#
                                     #{mod\ 1536}#
                                     #f))
                                 (values
                                   #{type\ 1553}#
                                   (#{binding-value\ 365}# #{b\ 1551}#)
                                   #{e\ 1531}#
                                   #{w\ 1533}#
                                   #{s\ 1534}#
                                   #{mod\ 1536}#))))))))))
               (if (pair? #{e\ 1531}#)
                 (begin
                   (let ((#{first\ 1562}# (car #{e\ 1531}#)))
                     (call-with-values
                       (lambda ()
                         (#{syntax-type\ 461}#
                           #{first\ 1562}#
                           #{r\ 1532}#
                           #{w\ 1533}#
                           #{s\ 1534}#
                           #{rib\ 1535}#
                           #{mod\ 1536}#
                           #t))
                       (lambda (#{ftype\ 1563}#
                                #{fval\ 1564}#
                                #{fe\ 1565}#
                                #{fw\ 1566}#
                                #{fs\ 1567}#
                                #{fmod\ 1568}#)
                         (if (eqv? #{ftype\ 1563}# (quote lexical))
                           (values
                             'lexical-call
                             #{fval\ 1564}#
                             #{e\ 1531}#
                             #{w\ 1533}#
                             #{s\ 1534}#
                             #{mod\ 1536}#)
                           (if (eqv? #{ftype\ 1563}# (quote global))
                             (values
                               'global-call
                               (#{make-syntax-object\ 342}#
                                 #{fval\ 1564}#
                                 #{w\ 1533}#
                                 #{fmod\ 1568}#)
                               #{e\ 1531}#
                               #{w\ 1533}#
                               #{s\ 1534}#
                               #{mod\ 1536}#)
                             (if (eqv? #{ftype\ 1563}# (quote macro))
                               (#{syntax-type\ 461}#
                                 (#{chi-macro\ 471}#
                                   #{fval\ 1564}#
                                   #{e\ 1531}#
                                   #{r\ 1532}#
                                   #{w\ 1533}#
                                   #{s\ 1534}#
                                   #{rib\ 1535}#
                                   #{mod\ 1536}#)
                                 #{r\ 1532}#
                                 '(())
                                 #{s\ 1534}#
                                 #{rib\ 1535}#
                                 #{mod\ 1536}#
                                 #{for-car?\ 1537}#)
                               (if (eqv? #{ftype\ 1563}# (quote module-ref))
                                 (call-with-values
                                   (lambda ()
                                     (#{fval\ 1564}#
                                       #{e\ 1531}#
                                       #{r\ 1532}#
                                       #{w\ 1533}#))
                                   (lambda (#{e\ 1580}#
                                            #{r\ 1581}#
                                            #{w\ 1582}#
                                            #{s\ 1583}#
                                            #{mod\ 1584}#)
                                     (#{syntax-type\ 461}#
                                       #{e\ 1580}#
                                       #{r\ 1581}#
                                       #{w\ 1582}#
                                       #{s\ 1583}#
                                       #{rib\ 1535}#
                                       #{mod\ 1584}#
                                       #{for-car?\ 1537}#)))
                                 (if (eqv? #{ftype\ 1563}# (quote core))
                                   (values
                                     'core-form
                                     #{fval\ 1564}#
                                     #{e\ 1531}#
                                     #{w\ 1533}#
                                     #{s\ 1534}#
                                     #{mod\ 1536}#)
                                   (if (eqv? #{ftype\ 1563}#
                                             'local-syntax)
                                     (values
                                       'local-syntax-form
                                       #{fval\ 1564}#
                                       #{e\ 1531}#
                                       #{w\ 1533}#
                                       #{s\ 1534}#
                                       #{mod\ 1536}#)
                                     (if (eqv? #{ftype\ 1563}# (quote begin))
                                       (values
                                         'begin-form
                                         #f
                                         #{e\ 1531}#
                                         #{w\ 1533}#
                                         #{s\ 1534}#
                                         #{mod\ 1536}#)
                                       (if (eqv? #{ftype\ 1563}#
                                                 'eval-when)
                                         (values
                                           'eval-when-form
                                           #f
                                           #{e\ 1531}#
                                           #{w\ 1533}#
                                           #{s\ 1534}#
                                           #{mod\ 1536}#)
                                         (if (eqv? #{ftype\ 1563}#
                                                   'define)
                                           (let ((#{tmp\ 1595}# #{e\ 1531}#))
                                             (let ((#{tmp\ 1596}#
                                                     ($sc-dispatch
                                                       #{tmp\ 1595}#
                                                       '(_ any any))))
                                               (if (if #{tmp\ 1596}#
                                                     (@apply
                                                       (lambda (#{name\ 1599}#
                                                                #{val\ 1600}#)
                                                         (#{id?\ 380}#
                                                           #{name\ 1599}#))
                                                       #{tmp\ 1596}#)
                                                     #f)
                                                 (@apply
                                                   (lambda (#{name\ 1603}#
                                                            #{val\ 1604}#)
                                                     (values
                                                       'define-form
                                                       #{name\ 1603}#
                                                       #{val\ 1604}#
                                                       #{w\ 1533}#
                                                       #{s\ 1534}#
                                                       #{mod\ 1536}#))
                                                   #{tmp\ 1596}#)
                                                 (let ((#{tmp\ 1605}#
                                                         ($sc-dispatch
                                                           #{tmp\ 1595}#
                                                           '(_ (any . any)
                                                               any
                                                               .
                                                               each-any))))
                                                   (if (if #{tmp\ 1605}#
                                                         (@apply
                                                           (lambda (#{name\ 1610}#
                                                                    #{args\ 1611}#
                                                                    #{e1\ 1612}#
                                                                    #{e2\ 1613}#)
                                                             (if (#{id?\ 380}#
                                                                   #{name\ 1610}#)
                                                               (#{valid-bound-ids?\ 443}#
                                                                 (#{lambda-var-list\ 497}#
                                                                   #{args\ 1611}#))
                                                               #f))
                                                           #{tmp\ 1605}#)
                                                         #f)
                                                     (@apply
                                                       (lambda (#{name\ 1620}#
                                                                #{args\ 1621}#
                                                                #{e1\ 1622}#
                                                                #{e2\ 1623}#)
                                                         (values
                                                           'define-form
                                                           (#{wrap\ 449}#
                                                             #{name\ 1620}#
                                                             #{w\ 1533}#
                                                             #{mod\ 1536}#)
                                                           (#{decorate-source\ 298}#
                                                             (cons '#(syntax-object
                                                                      lambda
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(name
                                                                           args
                                                                           e1
                                                                           e2)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i1616"
                                                                           "i1617"
                                                                           "i1618"
                                                                           "i1619"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(ftype
                                                                           fval
                                                                           fe
                                                                           fw
                                                                           fs
                                                                           fmod)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i1569"
                                                                           "i1570"
                                                                           "i1571"
                                                                           "i1572"
                                                                           "i1573"
                                                                           "i1574"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(first)
                                                                         #((top))
                                                                         #("i1561"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(e
                                                                           r
                                                                           w
                                                                           s
                                                                           rib
                                                                           mod
                                                                           for-car?)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i1538"
                                                                           "i1539"
                                                                           "i1540"
                                                                           "i1541"
                                                                           "i1542"
                                                                           "i1543"
                                                                           "i1544"))
                                                                       #(ribcage
                                                                         (lambda-var-list
                                                                           gen-var
                                                                           strip
                                                                           chi-lambda-case
                                                                           lambda*-formals
                                                                           chi-simple-lambda
                                                                           lambda-formals
                                                                           underscore?
                                                                           ellipsis?
                                                                           chi-void
                                                                           eval-local-transformer
                                                                           chi-local-syntax
                                                                           chi-body
                                                                           chi-macro
                                                                           chi-application
                                                                           chi-expr
                                                                           chi
                                                                           chi-top
                                                                           syntax-type
                                                                           chi-when-list
                                                                           chi-install-global
                                                                           chi-top-sequence
                                                                           chi-sequence
                                                                           source-wrap
                                                                           wrap
                                                                           bound-id-member?
                                                                           distinct-bound-ids?
                                                                           valid-bound-ids?
                                                                           bound-id=?
                                                                           free-id=?
                                                                           id-var-name
                                                                           same-marks?
                                                                           join-marks
                                                                           join-wraps
                                                                           smart-append
                                                                           make-binding-wrap
                                                                           extend-ribcage!
                                                                           make-empty-ribcage
                                                                           new-mark
                                                                           anti-mark
                                                                           the-anti-mark
                                                                           top-marked?
                                                                           top-wrap
                                                                           empty-wrap
                                                                           set-ribcage-labels!
                                                                           set-ribcage-marks!
                                                                           set-ribcage-symnames!
                                                                           ribcage-labels
                                                                           ribcage-marks
                                                                           ribcage-symnames
                                                                           ribcage?
                                                                           make-ribcage
                                                                           gen-labels
                                                                           gen-label
                                                                           make-rename
                                                                           rename-marks
                                                                           rename-new
                                                                           rename-old
                                                                           subst-rename?
                                                                           wrap-subst
                                                                           wrap-marks
                                                                           make-wrap
                                                                           id-sym-name&marks
                                                                           id-sym-name
                                                                           id?
                                                                           nonsymbol-id?
                                                                           global-extend
                                                                           lookup
                                                                           macros-only-env
                                                                           extend-var-env
                                                                           extend-env
                                                                           null-env
                                                                           binding-value
                                                                           binding-type
                                                                           make-binding
                                                                           arg-check
                                                                           source-annotation
                                                                           no-source
                                                                           set-syntax-object-module!
                                                                           set-syntax-object-wrap!
                                                                           set-syntax-object-expression!
                                                                           syntax-object-module
                                                                           syntax-object-wrap
                                                                           syntax-object-expression
                                                                           syntax-object?
                                                                           make-syntax-object
                                                                           build-lexical-var
                                                                           build-letrec
                                                                           build-named-let
                                                                           build-let
                                                                           build-sequence
                                                                           build-data
                                                                           build-primref
                                                                           build-lambda-case
                                                                           build-case-lambda
                                                                           build-simple-lambda
                                                                           build-global-definition
                                                                           build-global-assignment
                                                                           build-global-reference
                                                                           analyze-variable
                                                                           build-lexical-assignment
                                                                           build-lexical-reference
                                                                           build-dynlet
                                                                           build-conditional
                                                                           build-application
                                                                           build-void
                                                                           maybe-name-value!
                                                                           decorate-source
                                                                           get-global-definition-hook
                                                                           put-global-definition-hook
                                                                           gensym-hook
                                                                           local-eval-hook
                                                                           top-level-eval-hook
                                                                           fx<
                                                                           fx=
                                                                           fx-
                                                                           fx+
                                                                           set-lambda-meta!
                                                                           lambda-meta
                                                                           lambda?
                                                                           make-dynlet
                                                                           make-letrec
                                                                           make-let
                                                                           make-lambda-case
                                                                           make-lambda
                                                                           make-sequence
                                                                           make-application
                                                                           make-conditional
                                                                           make-toplevel-define
                                                                           make-toplevel-set
                                                                           make-toplevel-ref
                                                                           make-module-set
                                                                           make-module-ref
                                                                           make-lexical-set
                                                                           make-lexical-ref
                                                                           make-primitive-ref
                                                                           make-const
                                                                           make-void)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i496"
                                                                          "i494"
                                                                          "i492"
                                                                          "i490"
                                                                          "i488"
                                                                          "i486"
                                                                          "i484"
                                                                          "i482"
                                                                          "i480"
                                                                          "i478"
                                                                          "i476"
                                                                          "i474"
                                                                          "i472"
                                                                          "i470"
                                                                          "i468"
                                                                          "i466"
                                                                          "i464"
                                                                          "i462"
                                                                          "i460"
                                                                          "i458"
                                                                          "i456"
                                                                          "i454"
                                                                          "i452"
                                                                          "i450"
                                                                          "i448"
                                                                          "i446"
                                                                          "i444"
                                                                          "i442"
                                                                          "i440"
                                                                          "i438"
                                                                          "i436"
                                                                          "i434"
                                                                          "i432"
                                                                          "i430"
                                                                          "i428"
                                                                          "i426"
                                                                          "i424"
                                                                          "i423"
                                                                          "i422"
                                                                          "i420"
                                                                          "i419"
                                                                          "i418"
                                                                          "i417"
                                                                          "i416"
                                                                          "i414"
                                                                          "i412"
                                                                          "i410"
                                                                          "i408"
                                                                          "i406"
                                                                          "i404"
                                                                          "i402"
                                                                          "i400"
                                                                          "i397"
                                                                          "i395"
                                                                          "i394"
                                                                          "i393"
                                                                          "i392"
                                                                          "i391"
                                                                          "i390"
                                                                          "i388"
                                                                          "i386"
                                                                          "i384"
                                                                          "i382"
                                                                          "i381"
                                                                          "i379"
                                                                          "i377"
                                                                          "i375"
                                                                          "i373"
                                                                          "i371"
                                                                          "i369"
                                                                          "i367"
                                                                          "i366"
                                                                          "i364"
                                                                          "i362"
                                                                          "i361"
                                                                          "i360"
                                                                          "i358"
                                                                          "i357"
                                                                          "i355"
                                                                          "i353"
                                                                          "i351"
                                                                          "i349"
                                                                          "i347"
                                                                          "i345"
                                                                          "i343"
                                                                          "i341"
                                                                          "i339"
                                                                          "i337"
                                                                          "i335"
                                                                          "i333"
                                                                          "i331"
                                                                          "i329"
                                                                          "i327"
                                                                          "i325"
                                                                          "i323"
                                                                          "i321"
                                                                          "i319"
                                                                          "i317"
                                                                          "i315"
                                                                          "i313"
                                                                          "i311"
                                                                          "i309"
                                                                          "i307"
                                                                          "i305"
                                                                          "i303"
                                                                          "i301"
                                                                          "i299"
                                                                          "i297"
                                                                          "i295"
                                                                          "i293"
                                                                          "i292"
                                                                          "i290"
                                                                          "i288"
                                                                          "i286"
                                                                          "i284"
                                                                          "i282"
                                                                          "i280"
                                                                          "i278"
                                                                          "i276"
                                                                          "i274"
                                                                          "i271"
                                                                          "i269"
                                                                          "i267"
                                                                          "i265"
                                                                          "i263"
                                                                          "i261"
                                                                          "i259"
                                                                          "i257"
                                                                          "i255"
                                                                          "i253"
                                                                          "i251"
                                                                          "i249"
                                                                          "i247"
                                                                          "i245"
                                                                          "i243"
                                                                          "i241"
                                                                          "i239"
                                                                          "i237"))
                                                                       #(ribcage
                                                                         (define-structure
                                                                           define-expansion-accessors
                                                                           define-expansion-constructors
                                                                           and-map*)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i39"
                                                                          "i38"
                                                                          "i37"
                                                                          "i35")))
                                                                      (hygiene
                                                                        guile))
                                                                   (#{wrap\ 449}#
                                                                     (cons #{args\ 1621}#
                                                                           (cons #{e1\ 1622}#
                                                                                 #{e2\ 1623}#))
                                                                     #{w\ 1533}#
                                                                     #{mod\ 1536}#))
                                                             #{s\ 1534}#)
                                                           '(())
                                                           #{s\ 1534}#
                                                           #{mod\ 1536}#))
                                                       #{tmp\ 1605}#)
                                                     (let ((#{tmp\ 1626}#
                                                             ($sc-dispatch
                                                               #{tmp\ 1595}#
                                                               '(_ any))))
                                                       (if (if #{tmp\ 1626}#
                                                             (@apply
                                                               (lambda (#{name\ 1628}#)
                                                                 (#{id?\ 380}#
                                                                   #{name\ 1628}#))
                                                               #{tmp\ 1626}#)
                                                             #f)
                                                         (@apply
                                                           (lambda (#{name\ 1630}#)
                                                             (values
                                                               'define-form
                                                               (#{wrap\ 449}#
                                                                 #{name\ 1630}#
                                                                 #{w\ 1533}#
                                                                 #{mod\ 1536}#)
                                                               '(#(syntax-object
                                                                   if
                                                                   ((top)
                                                                    #(ribcage
                                                                      #(name)
                                                                      #((top))
                                                                      #("i1629"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(ftype
                                                                        fval
                                                                        fe
                                                                        fw
                                                                        fs
                                                                        fmod)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i1569"
                                                                        "i1570"
                                                                        "i1571"
                                                                        "i1572"
                                                                        "i1573"
                                                                        "i1574"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(first)
                                                                      #((top))
                                                                      #("i1561"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(e
                                                                        r
                                                                        w
                                                                        s
                                                                        rib
                                                                        mod
                                                                        for-car?)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i1538"
                                                                        "i1539"
                                                                        "i1540"
                                                                        "i1541"
                                                                        "i1542"
                                                                        "i1543"
                                                                        "i1544"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        chi-lambda-case
                                                                        lambda*-formals
                                                                        chi-simple-lambda
                                                                        lambda-formals
                                                                        underscore?
                                                                        ellipsis?
                                                                        chi-void
                                                                        eval-local-transformer
                                                                        chi-local-syntax
                                                                        chi-body
                                                                        chi-macro
                                                                        chi-application
                                                                        chi-expr
                                                                        chi
                                                                        chi-top
                                                                        syntax-type
                                                                        chi-when-list
                                                                        chi-install-global
                                                                        chi-top-sequence
                                                                        chi-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        gensym-hook
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i496"
                                                                       "i494"
                                                                       "i492"
                                                                       "i490"
                                                                       "i488"
                                                                       "i486"
                                                                       "i484"
                                                                       "i482"
                                                                       "i480"
                                                                       "i478"
                                                                       "i476"
                                                                       "i474"
                                                                       "i472"
                                                                       "i470"
                                                                       "i468"
                                                                       "i466"
                                                                       "i464"
                                                                       "i462"
                                                                       "i460"
                                                                       "i458"
                                                                       "i456"
                                                                       "i454"
                                                                       "i452"
                                                                       "i450"
                                                                       "i448"
                                                                       "i446"
                                                                       "i444"
                                                                       "i442"
                                                                       "i440"
                                                                       "i438"
                                                                       "i436"
                                                                       "i434"
                                                                       "i432"
                                                                       "i430"
                                                                       "i428"
                                                                       "i426"
                                                                       "i424"
                                                                       "i423"
                                                                       "i422"
                                                                       "i420"
                                                                       "i419"
                                                                       "i418"
                                                                       "i417"
                                                                       "i416"
                                                                       "i414"
                                                                       "i412"
                                                                       "i410"
                                                                       "i408"
                                                                       "i406"
                                                                       "i404"
                                                                       "i402"
                                                                       "i400"
                                                                       "i397"
                                                                       "i395"
                                                                       "i394"
                                                                       "i393"
                                                                       "i392"
                                                                       "i391"
                                                                       "i390"
                                                                       "i388"
                                                                       "i386"
                                                                       "i384"
                                                                       "i382"
                                                                       "i381"
                                                                       "i379"
                                                                       "i377"
                                                                       "i375"
                                                                       "i373"
                                                                       "i371"
                                                                       "i369"
                                                                       "i367"
                                                                       "i366"
                                                                       "i364"
                                                                       "i362"
                                                                       "i361"
                                                                       "i360"
                                                                       "i358"
                                                                       "i357"
                                                                       "i355"
                                                                       "i353"
                                                                       "i351"
                                                                       "i349"
                                                                       "i347"
                                                                       "i345"
                                                                       "i343"
                                                                       "i341"
                                                                       "i339"
                                                                       "i337"
                                                                       "i335"
                                                                       "i333"
                                                                       "i331"
                                                                       "i329"
                                                                       "i327"
                                                                       "i325"
                                                                       "i323"
                                                                       "i321"
                                                                       "i319"
                                                                       "i317"
                                                                       "i315"
                                                                       "i313"
                                                                       "i311"
                                                                       "i309"
                                                                       "i307"
                                                                       "i305"
                                                                       "i303"
                                                                       "i301"
                                                                       "i299"
                                                                       "i297"
                                                                       "i295"
                                                                       "i293"
                                                                       "i292"
                                                                       "i290"
                                                                       "i288"
                                                                       "i286"
                                                                       "i284"
                                                                       "i282"
                                                                       "i280"
                                                                       "i278"
                                                                       "i276"
                                                                       "i274"
                                                                       "i271"
                                                                       "i269"
                                                                       "i267"
                                                                       "i265"
                                                                       "i263"
                                                                       "i261"
                                                                       "i259"
                                                                       "i257"
                                                                       "i255"
                                                                       "i253"
                                                                       "i251"
                                                                       "i249"
                                                                       "i247"
                                                                       "i245"
                                                                       "i243"
                                                                       "i241"
                                                                       "i239"
                                                                       "i237"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors
                                                                        and-map*)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i39"
                                                                       "i38"
                                                                       "i37"
                                                                       "i35")))
                                                                   (hygiene
                                                                     guile))
                                                                 #(syntax-object
                                                                   #f
                                                                   ((top)
                                                                    #(ribcage
                                                                      #(name)
                                                                      #((top))
                                                                      #("i1629"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(ftype
                                                                        fval
                                                                        fe
                                                                        fw
                                                                        fs
                                                                        fmod)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i1569"
                                                                        "i1570"
                                                                        "i1571"
                                                                        "i1572"
                                                                        "i1573"
                                                                        "i1574"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(first)
                                                                      #((top))
                                                                      #("i1561"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(e
                                                                        r
                                                                        w
                                                                        s
                                                                        rib
                                                                        mod
                                                                        for-car?)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i1538"
                                                                        "i1539"
                                                                        "i1540"
                                                                        "i1541"
                                                                        "i1542"
                                                                        "i1543"
                                                                        "i1544"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        chi-lambda-case
                                                                        lambda*-formals
                                                                        chi-simple-lambda
                                                                        lambda-formals
                                                                        underscore?
                                                                        ellipsis?
                                                                        chi-void
                                                                        eval-local-transformer
                                                                        chi-local-syntax
                                                                        chi-body
                                                                        chi-macro
                                                                        chi-application
                                                                        chi-expr
                                                                        chi
                                                                        chi-top
                                                                        syntax-type
                                                                        chi-when-list
                                                                        chi-install-global
                                                                        chi-top-sequence
                                                                        chi-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        gensym-hook
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i496"
                                                                       "i494"
                                                                       "i492"
                                                                       "i490"
                                                                       "i488"
                                                                       "i486"
                                                                       "i484"
                                                                       "i482"
                                                                       "i480"
                                                                       "i478"
                                                                       "i476"
                                                                       "i474"
                                                                       "i472"
                                                                       "i470"
                                                                       "i468"
                                                                       "i466"
                                                                       "i464"
                                                                       "i462"
                                                                       "i460"
                                                                       "i458"
                                                                       "i456"
                                                                       "i454"
                                                                       "i452"
                                                                       "i450"
                                                                       "i448"
                                                                       "i446"
                                                                       "i444"
                                                                       "i442"
                                                                       "i440"
                                                                       "i438"
                                                                       "i436"
                                                                       "i434"
                                                                       "i432"
                                                                       "i430"
                                                                       "i428"
                                                                       "i426"
                                                                       "i424"
                                                                       "i423"
                                                                       "i422"
                                                                       "i420"
                                                                       "i419"
                                                                       "i418"
                                                                       "i417"
                                                                       "i416"
                                                                       "i414"
                                                                       "i412"
                                                                       "i410"
                                                                       "i408"
                                                                       "i406"
                                                                       "i404"
                                                                       "i402"
                                                                       "i400"
                                                                       "i397"
                                                                       "i395"
                                                                       "i394"
                                                                       "i393"
                                                                       "i392"
                                                                       "i391"
                                                                       "i390"
                                                                       "i388"
                                                                       "i386"
                                                                       "i384"
                                                                       "i382"
                                                                       "i381"
                                                                       "i379"
                                                                       "i377"
                                                                       "i375"
                                                                       "i373"
                                                                       "i371"
                                                                       "i369"
                                                                       "i367"
                                                                       "i366"
                                                                       "i364"
                                                                       "i362"
                                                                       "i361"
                                                                       "i360"
                                                                       "i358"
                                                                       "i357"
                                                                       "i355"
                                                                       "i353"
                                                                       "i351"
                                                                       "i349"
                                                                       "i347"
                                                                       "i345"
                                                                       "i343"
                                                                       "i341"
                                                                       "i339"
                                                                       "i337"
                                                                       "i335"
                                                                       "i333"
                                                                       "i331"
                                                                       "i329"
                                                                       "i327"
                                                                       "i325"
                                                                       "i323"
                                                                       "i321"
                                                                       "i319"
                                                                       "i317"
                                                                       "i315"
                                                                       "i313"
                                                                       "i311"
                                                                       "i309"
                                                                       "i307"
                                                                       "i305"
                                                                       "i303"
                                                                       "i301"
                                                                       "i299"
                                                                       "i297"
                                                                       "i295"
                                                                       "i293"
                                                                       "i292"
                                                                       "i290"
                                                                       "i288"
                                                                       "i286"
                                                                       "i284"
                                                                       "i282"
                                                                       "i280"
                                                                       "i278"
                                                                       "i276"
                                                                       "i274"
                                                                       "i271"
                                                                       "i269"
                                                                       "i267"
                                                                       "i265"
                                                                       "i263"
                                                                       "i261"
                                                                       "i259"
                                                                       "i257"
                                                                       "i255"
                                                                       "i253"
                                                                       "i251"
                                                                       "i249"
                                                                       "i247"
                                                                       "i245"
                                                                       "i243"
                                                                       "i241"
                                                                       "i239"
                                                                       "i237"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors
                                                                        and-map*)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i39"
                                                                       "i38"
                                                                       "i37"
                                                                       "i35")))
                                                                   (hygiene
                                                                     guile))
                                                                 #(syntax-object
                                                                   #f
                                                                   ((top)
                                                                    #(ribcage
                                                                      #(name)
                                                                      #((top))
                                                                      #("i1629"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(ftype
                                                                        fval
                                                                        fe
                                                                        fw
                                                                        fs
                                                                        fmod)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i1569"
                                                                        "i1570"
                                                                        "i1571"
                                                                        "i1572"
                                                                        "i1573"
                                                                        "i1574"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(first)
                                                                      #((top))
                                                                      #("i1561"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(e
                                                                        r
                                                                        w
                                                                        s
                                                                        rib
                                                                        mod
                                                                        for-car?)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i1538"
                                                                        "i1539"
                                                                        "i1540"
                                                                        "i1541"
                                                                        "i1542"
                                                                        "i1543"
                                                                        "i1544"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        chi-lambda-case
                                                                        lambda*-formals
                                                                        chi-simple-lambda
                                                                        lambda-formals
                                                                        underscore?
                                                                        ellipsis?
                                                                        chi-void
                                                                        eval-local-transformer
                                                                        chi-local-syntax
                                                                        chi-body
                                                                        chi-macro
                                                                        chi-application
                                                                        chi-expr
                                                                        chi
                                                                        chi-top
                                                                        syntax-type
                                                                        chi-when-list
                                                                        chi-install-global
                                                                        chi-top-sequence
                                                                        chi-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        gensym-hook
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i496"
                                                                       "i494"
                                                                       "i492"
                                                                       "i490"
                                                                       "i488"
                                                                       "i486"
                                                                       "i484"
                                                                       "i482"
                                                                       "i480"
                                                                       "i478"
                                                                       "i476"
                                                                       "i474"
                                                                       "i472"
                                                                       "i470"
                                                                       "i468"
                                                                       "i466"
                                                                       "i464"
                                                                       "i462"
                                                                       "i460"
                                                                       "i458"
                                                                       "i456"
                                                                       "i454"
                                                                       "i452"
                                                                       "i450"
                                                                       "i448"
                                                                       "i446"
                                                                       "i444"
                                                                       "i442"
                                                                       "i440"
                                                                       "i438"
                                                                       "i436"
                                                                       "i434"
                                                                       "i432"
                                                                       "i430"
                                                                       "i428"
                                                                       "i426"
                                                                       "i424"
                                                                       "i423"
                                                                       "i422"
                                                                       "i420"
                                                                       "i419"
                                                                       "i418"
                                                                       "i417"
                                                                       "i416"
                                                                       "i414"
                                                                       "i412"
                                                                       "i410"
                                                                       "i408"
                                                                       "i406"
                                                                       "i404"
                                                                       "i402"
                                                                       "i400"
                                                                       "i397"
                                                                       "i395"
                                                                       "i394"
                                                                       "i393"
                                                                       "i392"
                                                                       "i391"
                                                                       "i390"
                                                                       "i388"
                                                                       "i386"
                                                                       "i384"
                                                                       "i382"
                                                                       "i381"
                                                                       "i379"
                                                                       "i377"
                                                                       "i375"
                                                                       "i373"
                                                                       "i371"
                                                                       "i369"
                                                                       "i367"
                                                                       "i366"
                                                                       "i364"
                                                                       "i362"
                                                                       "i361"
                                                                       "i360"
                                                                       "i358"
                                                                       "i357"
                                                                       "i355"
                                                                       "i353"
                                                                       "i351"
                                                                       "i349"
                                                                       "i347"
                                                                       "i345"
                                                                       "i343"
                                                                       "i341"
                                                                       "i339"
                                                                       "i337"
                                                                       "i335"
                                                                       "i333"
                                                                       "i331"
                                                                       "i329"
                                                                       "i327"
                                                                       "i325"
                                                                       "i323"
                                                                       "i321"
                                                                       "i319"
                                                                       "i317"
                                                                       "i315"
                                                                       "i313"
                                                                       "i311"
                                                                       "i309"
                                                                       "i307"
                                                                       "i305"
                                                                       "i303"
                                                                       "i301"
                                                                       "i299"
                                                                       "i297"
                                                                       "i295"
                                                                       "i293"
                                                                       "i292"
                                                                       "i290"
                                                                       "i288"
                                                                       "i286"
                                                                       "i284"
                                                                       "i282"
                                                                       "i280"
                                                                       "i278"
                                                                       "i276"
                                                                       "i274"
                                                                       "i271"
                                                                       "i269"
                                                                       "i267"
                                                                       "i265"
                                                                       "i263"
                                                                       "i261"
                                                                       "i259"
                                                                       "i257"
                                                                       "i255"
                                                                       "i253"
                                                                       "i251"
                                                                       "i249"
                                                                       "i247"
                                                                       "i245"
                                                                       "i243"
                                                                       "i241"
                                                                       "i239"
                                                                       "i237"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors
                                                                        and-map*)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i39"
                                                                       "i38"
                                                                       "i37"
                                                                       "i35")))
                                                                   (hygiene
                                                                     guile)))
                                                               '(())
                                                               #{s\ 1534}#
                                                               #{mod\ 1536}#))
                                                           #{tmp\ 1626}#)
                                                         (syntax-violation
                                                           #f
                                                           "source expression failed to match any pattern"
                                                           #{tmp\ 1595}#))))))))
                                           (if (eqv? #{ftype\ 1563}#
                                                     'define-syntax)
                                             (let ((#{tmp\ 1633}# #{e\ 1531}#))
                                               (let ((#{tmp\ 1634}#
                                                       ($sc-dispatch
                                                         #{tmp\ 1633}#
                                                         '(_ any any))))
                                                 (if (if #{tmp\ 1634}#
                                                       (@apply
                                                         (lambda (#{name\ 1637}#
                                                                  #{val\ 1638}#)
                                                           (#{id?\ 380}#
                                                             #{name\ 1637}#))
                                                         #{tmp\ 1634}#)
                                                       #f)
                                                   (@apply
                                                     (lambda (#{name\ 1641}#
                                                              #{val\ 1642}#)
                                                       (values
                                                         'define-syntax-form
                                                         #{name\ 1641}#
                                                         #{val\ 1642}#
                                                         #{w\ 1533}#
                                                         #{s\ 1534}#
                                                         #{mod\ 1536}#))
                                                     #{tmp\ 1634}#)
                                                   (syntax-violation
                                                     #f
                                                     "source expression failed to match any pattern"
                                                     #{tmp\ 1633}#))))
                                             (values
                                               'call
                                               #f
                                               #{e\ 1531}#
                                               #{w\ 1533}#
                                               #{s\ 1534}#
                                               #{mod\ 1536}#)))))))))))))))
                 (if (#{syntax-object?\ 344}# #{e\ 1531}#)
                   (#{syntax-type\ 461}#
                     (#{syntax-object-expression\ 346}# #{e\ 1531}#)
                     #{r\ 1532}#
                     (#{join-wraps\ 431}#
                       #{w\ 1533}#
                       (#{syntax-object-wrap\ 348}# #{e\ 1531}#))
                     (begin
                       (let ((#{t\ 1648}#
                               (#{source-annotation\ 359}# #{e\ 1531}#)))
                         (if #{t\ 1648}# #{t\ 1648}# #{s\ 1534}#)))
                     #{rib\ 1535}#
                     (begin
                       (let ((#{t\ 1652}#
                               (#{syntax-object-module\ 350}# #{e\ 1531}#)))
                         (if #{t\ 1652}# #{t\ 1652}# #{mod\ 1536}#)))
                     #{for-car?\ 1537}#)
                   (if (self-evaluating? #{e\ 1531}#)
                     (values
                       'constant
                       #f
                       #{e\ 1531}#
                       #{w\ 1533}#
                       #{s\ 1534}#
                       #{mod\ 1536}#)
                     (values
                       'other
                       #f
                       #{e\ 1531}#
                       #{w\ 1533}#
                       #{s\ 1534}#
                       #{mod\ 1536}#)))))))
         (#{chi-top\ 463}#
           (lambda (#{e\ 1657}#
                    #{r\ 1658}#
                    #{w\ 1659}#
                    #{m\ 1660}#
                    #{esew\ 1661}#
                    #{mod\ 1662}#)
             (call-with-values
               (lambda ()
                 (#{syntax-type\ 461}#
                   #{e\ 1657}#
                   #{r\ 1658}#
                   #{w\ 1659}#
                   (#{source-annotation\ 359}# #{e\ 1657}#)
                   #f
                   #{mod\ 1662}#
                   #f))
               (lambda (#{type\ 1683}#
                        #{value\ 1684}#
                        #{e\ 1685}#
                        #{w\ 1686}#
                        #{s\ 1687}#
                        #{mod\ 1688}#)
                 (if (eqv? #{type\ 1683}# (quote begin-form))
                   (let ((#{tmp\ 1696}# #{e\ 1685}#))
                     (let ((#{tmp\ 1697}#
                             ($sc-dispatch #{tmp\ 1696}# (quote (_)))))
                       (if #{tmp\ 1697}#
                         (@apply
                           (lambda () (#{chi-void\ 479}#))
                           #{tmp\ 1697}#)
                         (let ((#{tmp\ 1698}#
                                 ($sc-dispatch
                                   #{tmp\ 1696}#
                                   '(_ any . each-any))))
                           (if #{tmp\ 1698}#
                             (@apply
                               (lambda (#{e1\ 1701}# #{e2\ 1702}#)
                                 (#{chi-top-sequence\ 455}#
                                   (cons #{e1\ 1701}# #{e2\ 1702}#)
                                   #{r\ 1658}#
                                   #{w\ 1686}#
                                   #{s\ 1687}#
                                   #{m\ 1660}#
                                   #{esew\ 1661}#
                                   #{mod\ 1688}#))
                               #{tmp\ 1698}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp\ 1696}#))))))
                   (if (eqv? #{type\ 1683}# (quote local-syntax-form))
                     (#{chi-local-syntax\ 475}#
                       #{value\ 1684}#
                       #{e\ 1685}#
                       #{r\ 1658}#
                       #{w\ 1686}#
                       #{s\ 1687}#
                       #{mod\ 1688}#
                       (lambda (#{body\ 1705}#
                                #{r\ 1706}#
                                #{w\ 1707}#
                                #{s\ 1708}#
                                #{mod\ 1709}#)
                         (#{chi-top-sequence\ 455}#
                           #{body\ 1705}#
                           #{r\ 1706}#
                           #{w\ 1707}#
                           #{s\ 1708}#
                           #{m\ 1660}#
                           #{esew\ 1661}#
                           #{mod\ 1709}#)))
                     (if (eqv? #{type\ 1683}# (quote eval-when-form))
                       (let ((#{tmp\ 1716}# #{e\ 1685}#))
                         (let ((#{tmp\ 1717}#
                                 ($sc-dispatch
                                   #{tmp\ 1716}#
                                   '(_ each-any any . each-any))))
                           (if #{tmp\ 1717}#
                             (@apply
                               (lambda (#{x\ 1721}# #{e1\ 1722}# #{e2\ 1723}#)
                                 (begin
                                   (let ((#{when-list\ 1726}#
                                           (#{chi-when-list\ 459}#
                                             #{e\ 1685}#
                                             #{x\ 1721}#
                                             #{w\ 1686}#))
                                         (#{body\ 1727}#
                                           (cons #{e1\ 1722}# #{e2\ 1723}#)))
                                     (if (eq? #{m\ 1660}# (quote e))
                                       (if (memq 'eval
                                                 #{when-list\ 1726}#)
                                         (#{chi-top-sequence\ 455}#
                                           #{body\ 1727}#
                                           #{r\ 1658}#
                                           #{w\ 1686}#
                                           #{s\ 1687}#
                                           (if (memq 'expand
                                                     #{when-list\ 1726}#)
                                             'c&e
                                             'e)
                                           '(eval)
                                           #{mod\ 1688}#)
                                         (begin
                                           (if (memq 'expand
                                                     #{when-list\ 1726}#)
                                             (#{top-level-eval-hook\ 289}#
                                               (#{chi-top-sequence\ 455}#
                                                 #{body\ 1727}#
                                                 #{r\ 1658}#
                                                 #{w\ 1686}#
                                                 #{s\ 1687}#
                                                 'e
                                                 '(eval)
                                                 #{mod\ 1688}#)
                                               #{mod\ 1688}#))
                                           (#{chi-void\ 479}#)))
                                       (if (memq 'load
                                                 #{when-list\ 1726}#)
                                         (if (begin
                                               (let ((#{t\ 1736}#
                                                       (memq 'compile
                                                             #{when-list\ 1726}#)))
                                                 (if #{t\ 1736}#
                                                   #{t\ 1736}#
                                                   (begin
                                                     (let ((#{t\ 1739}#
                                                             (memq 'expand
                                                                   #{when-list\ 1726}#)))
                                                       (if #{t\ 1739}#
                                                         #{t\ 1739}#
                                                         (if (eq? #{m\ 1660}#
                                                                  'c&e)
                                                           (memq 'eval
                                                                 #{when-list\ 1726}#)
                                                           #f)))))))
                                           (#{chi-top-sequence\ 455}#
                                             #{body\ 1727}#
                                             #{r\ 1658}#
                                             #{w\ 1686}#
                                             #{s\ 1687}#
                                             'c&e
                                             '(compile load)
                                             #{mod\ 1688}#)
                                           (if (if (eq? #{m\ 1660}# (quote c))
                                                 #t
                                                 (eq? #{m\ 1660}# (quote c&e)))
                                             (#{chi-top-sequence\ 455}#
                                               #{body\ 1727}#
                                               #{r\ 1658}#
                                               #{w\ 1686}#
                                               #{s\ 1687}#
                                               'c
                                               '(load)
                                               #{mod\ 1688}#)
                                             (#{chi-void\ 479}#)))
                                         (if (begin
                                               (let ((#{t\ 1747}#
                                                       (memq 'compile
                                                             #{when-list\ 1726}#)))
                                                 (if #{t\ 1747}#
                                                   #{t\ 1747}#
                                                   (begin
                                                     (let ((#{t\ 1750}#
                                                             (memq 'expand
                                                                   #{when-list\ 1726}#)))
                                                       (if #{t\ 1750}#
                                                         #{t\ 1750}#
                                                         (if (eq? #{m\ 1660}#
                                                                  'c&e)
                                                           (memq 'eval
                                                                 #{when-list\ 1726}#)
                                                           #f)))))))
                                           (begin
                                             (#{top-level-eval-hook\ 289}#
                                               (#{chi-top-sequence\ 455}#
                                                 #{body\ 1727}#
                                                 #{r\ 1658}#
                                                 #{w\ 1686}#
                                                 #{s\ 1687}#
                                                 'e
                                                 '(eval)
                                                 #{mod\ 1688}#)
                                               #{mod\ 1688}#)
                                             (#{chi-void\ 479}#))
                                           (#{chi-void\ 479}#)))))))
                               #{tmp\ 1717}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp\ 1716}#))))
                       (if (eqv? #{type\ 1683}# (quote define-syntax-form))
                         (begin
                           (let ((#{n\ 1758}#
                                   (#{id-var-name\ 437}#
                                     #{value\ 1684}#
                                     #{w\ 1686}#))
                                 (#{r\ 1759}#
                                   (#{macros-only-env\ 372}# #{r\ 1658}#)))
                             (if (eqv? #{m\ 1660}# (quote c))
                               (if (memq (quote compile) #{esew\ 1661}#)
                                 (begin
                                   (let ((#{e\ 1762}#
                                           (#{chi-install-global\ 457}#
                                             #{n\ 1758}#
                                             (#{chi\ 465}#
                                               #{e\ 1685}#
                                               #{r\ 1759}#
                                               #{w\ 1686}#
                                               #{mod\ 1688}#))))
                                     (begin
                                       (#{top-level-eval-hook\ 289}#
                                         #{e\ 1762}#
                                         #{mod\ 1688}#)
                                       (if (memq (quote load) #{esew\ 1661}#)
                                         #{e\ 1762}#
                                         (#{chi-void\ 479}#)))))
                                 (if (memq (quote load) #{esew\ 1661}#)
                                   (#{chi-install-global\ 457}#
                                     #{n\ 1758}#
                                     (#{chi\ 465}#
                                       #{e\ 1685}#
                                       #{r\ 1759}#
                                       #{w\ 1686}#
                                       #{mod\ 1688}#))
                                   (#{chi-void\ 479}#)))
                               (if (eqv? #{m\ 1660}# (quote c&e))
                                 (begin
                                   (let ((#{e\ 1765}#
                                           (#{chi-install-global\ 457}#
                                             #{n\ 1758}#
                                             (#{chi\ 465}#
                                               #{e\ 1685}#
                                               #{r\ 1759}#
                                               #{w\ 1686}#
                                               #{mod\ 1688}#))))
                                     (begin
                                       (#{top-level-eval-hook\ 289}#
                                         #{e\ 1765}#
                                         #{mod\ 1688}#)
                                       #{e\ 1765}#)))
                                 (begin
                                   (if (memq (quote eval) #{esew\ 1661}#)
                                     (#{top-level-eval-hook\ 289}#
                                       (#{chi-install-global\ 457}#
                                         #{n\ 1758}#
                                         (#{chi\ 465}#
                                           #{e\ 1685}#
                                           #{r\ 1759}#
                                           #{w\ 1686}#
                                           #{mod\ 1688}#))
                                       #{mod\ 1688}#))
                                   (#{chi-void\ 479}#))))))
                         (if (eqv? #{type\ 1683}# (quote define-form))
                           (begin
                             (let ((#{n\ 1770}#
                                     (#{id-var-name\ 437}#
                                       #{value\ 1684}#
                                       #{w\ 1686}#)))
                               (begin
                                 (let ((#{type\ 1772}#
                                         (#{binding-type\ 363}#
                                           (#{lookup\ 374}#
                                             #{n\ 1770}#
                                             #{r\ 1658}#
                                             #{mod\ 1688}#))))
                                   (if (if (eqv? #{type\ 1772}# (quote global))
                                         #t
                                         (if (eqv? #{type\ 1772}# (quote core))
                                           #t
                                           (if (eqv? #{type\ 1772}#
                                                     'macro)
                                             #t
                                             (eqv? #{type\ 1772}#
                                                   'module-ref))))
                                     (begin
                                       (if (if (if (eq? #{m\ 1660}# (quote c))
                                                 #t
                                                 (eq? #{m\ 1660}# (quote c&e)))
                                             (if (not (module-local-variable
                                                        (current-module)
                                                        #{n\ 1770}#))
                                               (current-module)
                                               #f)
                                             #f)
                                         (begin
                                           (let ((#{old\ 1778}#
                                                   (module-variable
                                                     (current-module)
                                                     #{n\ 1770}#)))
                                             (module-define!
                                               (current-module)
                                               #{n\ 1770}#
                                               (if (variable? #{old\ 1778}#)
                                                 (variable-ref #{old\ 1778}#)
                                                 #f)))))
                                       (begin
                                         (let ((#{x\ 1781}#
                                                 (#{build-global-definition\ 320}#
                                                   #{s\ 1687}#
                                                   #{n\ 1770}#
                                                   (#{chi\ 465}#
                                                     #{e\ 1685}#
                                                     #{r\ 1658}#
                                                     #{w\ 1686}#
                                                     #{mod\ 1688}#))))
                                           (begin
                                             (if (eq? #{m\ 1660}# (quote c&e))
                                               (#{top-level-eval-hook\ 289}#
                                                 #{x\ 1781}#
                                                 #{mod\ 1688}#))
                                             #{x\ 1781}#))))
                                     (if (eqv? #{type\ 1772}#
                                               'displaced-lexical)
                                       (syntax-violation
                                         #f
                                         "identifier out of context"
                                         #{e\ 1685}#
                                         (#{wrap\ 449}#
                                           #{value\ 1684}#
                                           #{w\ 1686}#
                                           #{mod\ 1688}#))
                                       (syntax-violation
                                         #f
                                         "cannot define keyword at top level"
                                         #{e\ 1685}#
                                         (#{wrap\ 449}#
                                           #{value\ 1684}#
                                           #{w\ 1686}#
                                           #{mod\ 1688}#))))))))
                           (begin
                             (let ((#{x\ 1787}#
                                     (#{chi-expr\ 467}#
                                       #{type\ 1683}#
                                       #{value\ 1684}#
                                       #{e\ 1685}#
                                       #{r\ 1658}#
                                       #{w\ 1686}#
                                       #{s\ 1687}#
                                       #{mod\ 1688}#)))
                               (begin
                                 (if (eq? #{m\ 1660}# (quote c&e))
                                   (#{top-level-eval-hook\ 289}#
                                     #{x\ 1787}#
                                     #{mod\ 1688}#))
                                 #{x\ 1787}#))))))))))))
         (#{chi\ 465}#
           (lambda (#{e\ 1788}#
                    #{r\ 1789}#
                    #{w\ 1790}#
                    #{mod\ 1791}#)
             (call-with-values
               (lambda ()
                 (#{syntax-type\ 461}#
                   #{e\ 1788}#
                   #{r\ 1789}#
                   #{w\ 1790}#
                   (#{source-annotation\ 359}# #{e\ 1788}#)
                   #f
                   #{mod\ 1791}#
                   #f))
               (lambda (#{type\ 1796}#
                        #{value\ 1797}#
                        #{e\ 1798}#
                        #{w\ 1799}#
                        #{s\ 1800}#
                        #{mod\ 1801}#)
                 (#{chi-expr\ 467}#
                   #{type\ 1796}#
                   #{value\ 1797}#
                   #{e\ 1798}#
                   #{r\ 1789}#
                   #{w\ 1799}#
                   #{s\ 1800}#
                   #{mod\ 1801}#)))))
         (#{chi-expr\ 467}#
           (lambda (#{type\ 1808}#
                    #{value\ 1809}#
                    #{e\ 1810}#
                    #{r\ 1811}#
                    #{w\ 1812}#
                    #{s\ 1813}#
                    #{mod\ 1814}#)
             (if (eqv? #{type\ 1808}# (quote lexical))
               (#{build-lexical-reference\ 310}#
                 'value
                 #{s\ 1813}#
                 #{e\ 1810}#
                 #{value\ 1809}#)
               (if (if (eqv? #{type\ 1808}# (quote core))
                     #t
                     (eqv? #{type\ 1808}# (quote core-form)))
                 (#{value\ 1809}#
                   #{e\ 1810}#
                   #{r\ 1811}#
                   #{w\ 1812}#
                   #{s\ 1813}#
                   #{mod\ 1814}#)
                 (if (eqv? #{type\ 1808}# (quote module-ref))
                   (call-with-values
                     (lambda ()
                       (#{value\ 1809}#
                         #{e\ 1810}#
                         #{r\ 1811}#
                         #{w\ 1812}#))
                     (lambda (#{e\ 1825}#
                              #{r\ 1826}#
                              #{w\ 1827}#
                              #{s\ 1828}#
                              #{mod\ 1829}#)
                       (#{chi\ 465}#
                         #{e\ 1825}#
                         #{r\ 1826}#
                         #{w\ 1827}#
                         #{mod\ 1829}#)))
                   (if (eqv? #{type\ 1808}# (quote lexical-call))
                     (#{chi-application\ 469}#
                       (begin
                         (let ((#{id\ 1837}# (car #{e\ 1810}#)))
                           (#{build-lexical-reference\ 310}#
                             'fun
                             (#{source-annotation\ 359}# #{id\ 1837}#)
                             (if (#{syntax-object?\ 344}# #{id\ 1837}#)
                               (syntax->datum #{id\ 1837}#)
                               #{id\ 1837}#)
                             #{value\ 1809}#)))
                       #{e\ 1810}#
                       #{r\ 1811}#
                       #{w\ 1812}#
                       #{s\ 1813}#
                       #{mod\ 1814}#)
                     (if (eqv? #{type\ 1808}# (quote global-call))
                       (#{chi-application\ 469}#
                         (#{build-global-reference\ 316}#
                           (#{source-annotation\ 359}# (car #{e\ 1810}#))
                           (if (#{syntax-object?\ 344}# #{value\ 1809}#)
                             (#{syntax-object-expression\ 346}#
                               #{value\ 1809}#)
                             #{value\ 1809}#)
                           (if (#{syntax-object?\ 344}# #{value\ 1809}#)
                             (#{syntax-object-module\ 350}# #{value\ 1809}#)
                             #{mod\ 1814}#))
                         #{e\ 1810}#
                         #{r\ 1811}#
                         #{w\ 1812}#
                         #{s\ 1813}#
                         #{mod\ 1814}#)
                       (if (eqv? #{type\ 1808}# (quote constant))
                         (#{build-data\ 330}#
                           #{s\ 1813}#
                           (#{strip\ 493}#
                             (#{source-wrap\ 451}#
                               #{e\ 1810}#
                               #{w\ 1812}#
                               #{s\ 1813}#
                               #{mod\ 1814}#)
                             '(())))
                         (if (eqv? #{type\ 1808}# (quote global))
                           (#{build-global-reference\ 316}#
                             #{s\ 1813}#
                             #{value\ 1809}#
                             #{mod\ 1814}#)
                           (if (eqv? #{type\ 1808}# (quote call))
                             (#{chi-application\ 469}#
                               (#{chi\ 465}#
                                 (car #{e\ 1810}#)
                                 #{r\ 1811}#
                                 #{w\ 1812}#
                                 #{mod\ 1814}#)
                               #{e\ 1810}#
                               #{r\ 1811}#
                               #{w\ 1812}#
                               #{s\ 1813}#
                               #{mod\ 1814}#)
                             (if (eqv? #{type\ 1808}# (quote begin-form))
                               (let ((#{tmp\ 1844}# #{e\ 1810}#))
                                 (let ((#{tmp\ 1845}#
                                         ($sc-dispatch
                                           #{tmp\ 1844}#
                                           '(_ any . each-any))))
                                   (if #{tmp\ 1845}#
                                     (@apply
                                       (lambda (#{e1\ 1848}# #{e2\ 1849}#)
                                         (#{chi-sequence\ 453}#
                                           (cons #{e1\ 1848}# #{e2\ 1849}#)
                                           #{r\ 1811}#
                                           #{w\ 1812}#
                                           #{s\ 1813}#
                                           #{mod\ 1814}#))
                                       #{tmp\ 1845}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp\ 1844}#))))
                               (if (eqv? #{type\ 1808}#
                                         'local-syntax-form)
                                 (#{chi-local-syntax\ 475}#
                                   #{value\ 1809}#
                                   #{e\ 1810}#
                                   #{r\ 1811}#
                                   #{w\ 1812}#
                                   #{s\ 1813}#
                                   #{mod\ 1814}#
                                   #{chi-sequence\ 453}#)
                                 (if (eqv? #{type\ 1808}#
                                           'eval-when-form)
                                   (let ((#{tmp\ 1853}# #{e\ 1810}#))
                                     (let ((#{tmp\ 1854}#
                                             ($sc-dispatch
                                               #{tmp\ 1853}#
                                               '(_ each-any any . each-any))))
                                       (if #{tmp\ 1854}#
                                         (@apply
                                           (lambda (#{x\ 1858}#
                                                    #{e1\ 1859}#
                                                    #{e2\ 1860}#)
                                             (begin
                                               (let ((#{when-list\ 1862}#
                                                       (#{chi-when-list\ 459}#
                                                         #{e\ 1810}#
                                                         #{x\ 1858}#
                                                         #{w\ 1812}#)))
                                                 (if (memq 'eval
                                                           #{when-list\ 1862}#)
                                                   (#{chi-sequence\ 453}#
                                                     (cons #{e1\ 1859}#
                                                           #{e2\ 1860}#)
                                                     #{r\ 1811}#
                                                     #{w\ 1812}#
                                                     #{s\ 1813}#
                                                     #{mod\ 1814}#)
                                                   (#{chi-void\ 479}#)))))
                                           #{tmp\ 1854}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 1853}#))))
                                   (if (if (eqv? #{type\ 1808}#
                                                 'define-form)
                                         #t
                                         (eqv? #{type\ 1808}#
                                               'define-syntax-form))
                                     (syntax-violation
                                       #f
                                       "definition in expression context"
                                       #{e\ 1810}#
                                       (#{wrap\ 449}#
                                         #{value\ 1809}#
                                         #{w\ 1812}#
                                         #{mod\ 1814}#))
                                     (if (eqv? #{type\ 1808}# (quote syntax))
                                       (syntax-violation
                                         #f
                                         "reference to pattern variable outside syntax form"
                                         (#{source-wrap\ 451}#
                                           #{e\ 1810}#
                                           #{w\ 1812}#
                                           #{s\ 1813}#
                                           #{mod\ 1814}#))
                                       (if (eqv? #{type\ 1808}#
                                                 'displaced-lexical)
                                         (syntax-violation
                                           #f
                                           "reference to identifier outside its scope"
                                           (#{source-wrap\ 451}#
                                             #{e\ 1810}#
                                             #{w\ 1812}#
                                             #{s\ 1813}#
                                             #{mod\ 1814}#))
                                         (syntax-violation
                                           #f
                                           "unexpected syntax"
                                           (#{source-wrap\ 451}#
                                             #{e\ 1810}#
                                             #{w\ 1812}#
                                             #{s\ 1813}#
                                             #{mod\ 1814}#))))))))))))))))))
         (#{chi-application\ 469}#
           (lambda (#{x\ 1869}#
                    #{e\ 1870}#
                    #{r\ 1871}#
                    #{w\ 1872}#
                    #{s\ 1873}#
                    #{mod\ 1874}#)
             (let ((#{tmp\ 1881}# #{e\ 1870}#))
               (let ((#{tmp\ 1882}#
                       ($sc-dispatch
                         #{tmp\ 1881}#
                         '(any . each-any))))
                 (if #{tmp\ 1882}#
                   (@apply
                     (lambda (#{e0\ 1885}# #{e1\ 1886}#)
                       (#{build-application\ 304}#
                         #{s\ 1873}#
                         #{x\ 1869}#
                         (map (lambda (#{e\ 1887}#)
                                (#{chi\ 465}#
                                  #{e\ 1887}#
                                  #{r\ 1871}#
                                  #{w\ 1872}#
                                  #{mod\ 1874}#))
                              #{e1\ 1886}#)))
                     #{tmp\ 1882}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{tmp\ 1881}#))))))
         (#{chi-macro\ 471}#
           (lambda (#{p\ 1890}#
                    #{e\ 1891}#
                    #{r\ 1892}#
                    #{w\ 1893}#
                    #{s\ 1894}#
                    #{rib\ 1895}#
                    #{mod\ 1896}#)
             (letrec*
               ((#{rebuild-macro-output\ 1905}#
                  (lambda (#{x\ 1906}# #{m\ 1907}#)
                    (if (pair? #{x\ 1906}#)
                      (#{decorate-source\ 298}#
                        (cons (#{rebuild-macro-output\ 1905}#
                                (car #{x\ 1906}#)
                                #{m\ 1907}#)
                              (#{rebuild-macro-output\ 1905}#
                                (cdr #{x\ 1906}#)
                                #{m\ 1907}#))
                        #{s\ 1894}#)
                      (if (#{syntax-object?\ 344}# #{x\ 1906}#)
                        (begin
                          (let ((#{w\ 1915}#
                                  (#{syntax-object-wrap\ 348}# #{x\ 1906}#)))
                            (begin
                              (let ((#{ms\ 1918}#
                                      (#{wrap-marks\ 387}# #{w\ 1915}#))
                                    (#{s\ 1919}#
                                      (#{wrap-subst\ 389}# #{w\ 1915}#)))
                                (if (if (pair? #{ms\ 1918}#)
                                      (eq? (car #{ms\ 1918}#) #f)
                                      #f)
                                  (#{make-syntax-object\ 342}#
                                    (#{syntax-object-expression\ 346}#
                                      #{x\ 1906}#)
                                    (#{make-wrap\ 385}#
                                      (cdr #{ms\ 1918}#)
                                      (if #{rib\ 1895}#
                                        (cons #{rib\ 1895}# (cdr #{s\ 1919}#))
                                        (cdr #{s\ 1919}#)))
                                    (#{syntax-object-module\ 350}#
                                      #{x\ 1906}#))
                                  (#{make-syntax-object\ 342}#
                                    (#{decorate-source\ 298}#
                                      (#{syntax-object-expression\ 346}#
                                        #{x\ 1906}#)
                                      #{s\ 1919}#)
                                    (#{make-wrap\ 385}#
                                      (cons #{m\ 1907}# #{ms\ 1918}#)
                                      (if #{rib\ 1895}#
                                        (cons #{rib\ 1895}#
                                              (cons (quote shift) #{s\ 1919}#))
                                        (cons (quote shift) #{s\ 1919}#)))
                                    (#{syntax-object-module\ 350}#
                                      #{x\ 1906}#)))))))
                        (if (vector? #{x\ 1906}#)
                          (begin
                            (let ((#{n\ 1927}# (vector-length #{x\ 1906}#)))
                              (begin
                                (let ((#{v\ 1929}#
                                        (#{decorate-source\ 298}#
                                          (make-vector #{n\ 1927}#)
                                          #{x\ 1906}#)))
                                  (letrec*
                                    ((#{loop\ 1932}#
                                       (lambda (#{i\ 1933}#)
                                         (if (#{fx=\ 285}#
                                               #{i\ 1933}#
                                               #{n\ 1927}#)
                                           (begin (if #f #f) #{v\ 1929}#)
                                           (begin
                                             (vector-set!
                                               #{v\ 1929}#
                                               #{i\ 1933}#
                                               (#{rebuild-macro-output\ 1905}#
                                                 (vector-ref
                                                   #{x\ 1906}#
                                                   #{i\ 1933}#)
                                                 #{m\ 1907}#))
                                             (#{loop\ 1932}#
                                               (#{fx+\ 281}#
                                                 #{i\ 1933}#
                                                 1)))))))
                                    (begin (#{loop\ 1932}# 0)))))))
                          (if (symbol? #{x\ 1906}#)
                            (syntax-violation
                              #f
                              "encountered raw symbol in macro output"
                              (#{source-wrap\ 451}#
                                #{e\ 1891}#
                                #{w\ 1893}#
                                (#{wrap-subst\ 389}# #{w\ 1893}#)
                                #{mod\ 1896}#)
                              #{x\ 1906}#)
                            (#{decorate-source\ 298}#
                              #{x\ 1906}#
                              #{s\ 1894}#))))))))
               (begin
                 (#{rebuild-macro-output\ 1905}#
                   (#{p\ 1890}#
                     (#{source-wrap\ 451}#
                       #{e\ 1891}#
                       (#{anti-mark\ 421}# #{w\ 1893}#)
                       #{s\ 1894}#
                       #{mod\ 1896}#))
                   (gensym "m"))))))
         (#{chi-body\ 473}#
           (lambda (#{body\ 1940}#
                    #{outer-form\ 1941}#
                    #{r\ 1942}#
                    #{w\ 1943}#
                    #{mod\ 1944}#)
             (begin
               (let ((#{r\ 1952}#
                       (cons '("placeholder" placeholder)
                             #{r\ 1942}#)))
                 (begin
                   (let ((#{ribcage\ 1954}#
                           (#{make-ribcage\ 401}#
                             '()
                             '()
                             '())))
                     (begin
                       (let ((#{w\ 1957}#
                               (#{make-wrap\ 385}#
                                 (#{wrap-marks\ 387}# #{w\ 1943}#)
                                 (cons #{ribcage\ 1954}#
                                       (#{wrap-subst\ 389}# #{w\ 1943}#)))))
                         (letrec*
                           ((#{parse\ 1966}#
                              (lambda (#{body\ 1967}#
                                       #{ids\ 1968}#
                                       #{labels\ 1969}#
                                       #{var-ids\ 1970}#
                                       #{vars\ 1971}#
                                       #{vals\ 1972}#
                                       #{bindings\ 1973}#)
                                (if (null? #{body\ 1967}#)
                                  (syntax-violation
                                    #f
                                    "no expressions in body"
                                    #{outer-form\ 1941}#)
                                  (begin
                                    (let ((#{e\ 1978}#
                                            (cdr (car #{body\ 1967}#)))
                                          (#{er\ 1979}#
                                            (car (car #{body\ 1967}#))))
                                      (call-with-values
                                        (lambda ()
                                          (#{syntax-type\ 461}#
                                            #{e\ 1978}#
                                            #{er\ 1979}#
                                            '(())
                                            (#{source-annotation\ 359}#
                                              #{er\ 1979}#)
                                            #{ribcage\ 1954}#
                                            #{mod\ 1944}#
                                            #f))
                                        (lambda (#{type\ 1981}#
                                                 #{value\ 1982}#
                                                 #{e\ 1983}#
                                                 #{w\ 1984}#
                                                 #{s\ 1985}#
                                                 #{mod\ 1986}#)
                                          (if (eqv? #{type\ 1981}#
                                                    'define-form)
                                            (begin
                                              (let ((#{id\ 1996}#
                                                      (#{wrap\ 449}#
                                                        #{value\ 1982}#
                                                        #{w\ 1984}#
                                                        #{mod\ 1986}#))
                                                    (#{label\ 1997}#
                                                      (#{gen-label\ 396}#)))
                                                (begin
                                                  (let ((#{var\ 1999}#
                                                          (#{gen-var\ 495}#
                                                            #{id\ 1996}#)))
                                                    (begin
                                                      (#{extend-ribcage!\ 425}#
                                                        #{ribcage\ 1954}#
                                                        #{id\ 1996}#
                                                        #{label\ 1997}#)
                                                      (#{parse\ 1966}#
                                                        (cdr #{body\ 1967}#)
                                                        (cons #{id\ 1996}#
                                                              #{ids\ 1968}#)
                                                        (cons #{label\ 1997}#
                                                              #{labels\ 1969}#)
                                                        (cons #{id\ 1996}#
                                                              #{var-ids\ 1970}#)
                                                        (cons #{var\ 1999}#
                                                              #{vars\ 1971}#)
                                                        (cons (cons #{er\ 1979}#
                                                                    (#{wrap\ 449}#
                                                                      #{e\ 1983}#
                                                                      #{w\ 1984}#
                                                                      #{mod\ 1986}#))
                                                              #{vals\ 1972}#)
                                                        (cons (cons 'lexical
                                                                    #{var\ 1999}#)
                                                              #{bindings\ 1973}#)))))))
                                            (if (eqv? #{type\ 1981}#
                                                      'define-syntax-form)
                                              (begin
                                                (let ((#{id\ 2004}#
                                                        (#{wrap\ 449}#
                                                          #{value\ 1982}#
                                                          #{w\ 1984}#
                                                          #{mod\ 1986}#))
                                                      (#{label\ 2005}#
                                                        (#{gen-label\ 396}#)))
                                                  (begin
                                                    (#{extend-ribcage!\ 425}#
                                                      #{ribcage\ 1954}#
                                                      #{id\ 2004}#
                                                      #{label\ 2005}#)
                                                    (#{parse\ 1966}#
                                                      (cdr #{body\ 1967}#)
                                                      (cons #{id\ 2004}#
                                                            #{ids\ 1968}#)
                                                      (cons #{label\ 2005}#
                                                            #{labels\ 1969}#)
                                                      #{var-ids\ 1970}#
                                                      #{vars\ 1971}#
                                                      #{vals\ 1972}#
                                                      (cons (cons 'macro
                                                                  (cons #{er\ 1979}#
                                                                        (#{wrap\ 449}#
                                                                          #{e\ 1983}#
                                                                          #{w\ 1984}#
                                                                          #{mod\ 1986}#)))
                                                            #{bindings\ 1973}#)))))
                                              (if (eqv? #{type\ 1981}#
                                                        'begin-form)
                                                (let ((#{tmp\ 2008}#
                                                        #{e\ 1983}#))
                                                  (let ((#{tmp\ 2009}#
                                                          ($sc-dispatch
                                                            #{tmp\ 2008}#
                                                            '(_ . each-any))))
                                                    (if #{tmp\ 2009}#
                                                      (@apply
                                                        (lambda (#{e1\ 2011}#)
                                                          (#{parse\ 1966}#
                                                            (letrec*
                                                              ((#{f\ 2014}#
                                                                 (lambda (#{forms\ 2015}#)
                                                                   (if (null? #{forms\ 2015}#)
                                                                     (cdr #{body\ 1967}#)
                                                                     (cons (cons #{er\ 1979}#
                                                                                 (#{wrap\ 449}#
                                                                                   (car #{forms\ 2015}#)
                                                                                   #{w\ 1984}#
                                                                                   #{mod\ 1986}#))
                                                                           (#{f\ 2014}#
                                                                             (cdr #{forms\ 2015}#)))))))
                                                              (begin
                                                                (#{f\ 2014}#
                                                                  #{e1\ 2011}#)))
                                                            #{ids\ 1968}#
                                                            #{labels\ 1969}#
                                                            #{var-ids\ 1970}#
                                                            #{vars\ 1971}#
                                                            #{vals\ 1972}#
                                                            #{bindings\ 1973}#))
                                                        #{tmp\ 2009}#)
                                                      (syntax-violation
                                                        #f
                                                        "source expression failed to match any pattern"
                                                        #{tmp\ 2008}#))))
                                                (if (eqv? #{type\ 1981}#
                                                          'local-syntax-form)
                                                  (#{chi-local-syntax\ 475}#
                                                    #{value\ 1982}#
                                                    #{e\ 1983}#
                                                    #{er\ 1979}#
                                                    #{w\ 1984}#
                                                    #{s\ 1985}#
                                                    #{mod\ 1986}#
                                                    (lambda (#{forms\ 2018}#
                                                             #{er\ 2019}#
                                                             #{w\ 2020}#
                                                             #{s\ 2021}#
                                                             #{mod\ 2022}#)
                                                      (#{parse\ 1966}#
                                                        (letrec*
                                                          ((#{f\ 2030}#
                                                             (lambda (#{forms\ 2031}#)
                                                               (if (null? #{forms\ 2031}#)
                                                                 (cdr #{body\ 1967}#)
                                                                 (cons (cons #{er\ 2019}#
                                                                             (#{wrap\ 449}#
                                                                               (car #{forms\ 2031}#)
                                                                               #{w\ 2020}#
                                                                               #{mod\ 2022}#))
                                                                       (#{f\ 2030}#
                                                                         (cdr #{forms\ 2031}#)))))))
                                                          (begin
                                                            (#{f\ 2030}#
                                                              #{forms\ 2018}#)))
                                                        #{ids\ 1968}#
                                                        #{labels\ 1969}#
                                                        #{var-ids\ 1970}#
                                                        #{vars\ 1971}#
                                                        #{vals\ 1972}#
                                                        #{bindings\ 1973}#)))
                                                  (if (null? #{ids\ 1968}#)
                                                    (#{build-sequence\ 332}#
                                                      #f
                                                      (map (lambda (#{x\ 2034}#)
                                                             (#{chi\ 465}#
                                                               (cdr #{x\ 2034}#)
                                                               (car #{x\ 2034}#)
                                                               '(())
                                                               #{mod\ 1986}#))
                                                           (cons (cons #{er\ 1979}#
                                                                       (#{source-wrap\ 451}#
                                                                         #{e\ 1983}#
                                                                         #{w\ 1984}#
                                                                         #{s\ 1985}#
                                                                         #{mod\ 1986}#))
                                                                 (cdr #{body\ 1967}#))))
                                                    (begin
                                                      (if (not (#{valid-bound-ids?\ 443}#
                                                                 #{ids\ 1968}#))
                                                        (syntax-violation
                                                          #f
                                                          "invalid or duplicate identifier in definition"
                                                          #{outer-form\ 1941}#))
                                                      (letrec*
                                                        ((#{loop\ 2041}#
                                                           (lambda (#{bs\ 2042}#
                                                                    #{er-cache\ 2043}#
                                                                    #{r-cache\ 2044}#)
                                                             (if (not (null? #{bs\ 2042}#))
                                                               (begin
                                                                 (let ((#{b\ 2047}#
                                                                         (car #{bs\ 2042}#)))
                                                                   (if (eq? (car #{b\ 2047}#)
                                                                            'macro)
                                                                     (begin
                                                                       (let ((#{er\ 2050}#
                                                                               (car (cdr #{b\ 2047}#))))
                                                                         (begin
                                                                           (let ((#{r-cache\ 2052}#
                                                                                   (if (eq? #{er\ 2050}#
                                                                                            #{er-cache\ 2043}#)
                                                                                     #{r-cache\ 2044}#
                                                                                     (#{macros-only-env\ 372}#
                                                                                       #{er\ 2050}#))))
                                                                             (begin
                                                                               (set-cdr!
                                                                                 #{b\ 2047}#
                                                                                 (#{eval-local-transformer\ 477}#
                                                                                   (#{chi\ 465}#
                                                                                     (cdr (cdr #{b\ 2047}#))
                                                                                     #{r-cache\ 2052}#
                                                                                     '(())
                                                                                     #{mod\ 1986}#)
                                                                                   #{mod\ 1986}#))
                                                                               (#{loop\ 2041}#
                                                                                 (cdr #{bs\ 2042}#)
                                                                                 #{er\ 2050}#
                                                                                 #{r-cache\ 2052}#))))))
                                                                     (#{loop\ 2041}#
                                                                       (cdr #{bs\ 2042}#)
                                                                       #{er-cache\ 2043}#
                                                                       #{r-cache\ 2044}#))))))))
                                                        (begin
                                                          (#{loop\ 2041}#
                                                            #{bindings\ 1973}#
                                                            #f
                                                            #f)))
                                                      (set-cdr!
                                                        #{r\ 1952}#
                                                        (#{extend-env\ 368}#
                                                          #{labels\ 1969}#
                                                          #{bindings\ 1973}#
                                                          (cdr #{r\ 1952}#)))
                                                      (#{build-letrec\ 338}#
                                                        #f
                                                        #t
                                                        (reverse
                                                          (map syntax->datum
                                                               #{var-ids\ 1970}#))
                                                        (reverse
                                                          #{vars\ 1971}#)
                                                        (map (lambda (#{x\ 2055}#)
                                                               (#{chi\ 465}#
                                                                 (cdr #{x\ 2055}#)
                                                                 (car #{x\ 2055}#)
                                                                 '(())
                                                                 #{mod\ 1986}#))
                                                             (reverse
                                                               #{vals\ 1972}#))
                                                        (#{build-sequence\ 332}#
                                                          #f
                                                          (map (lambda (#{x\ 2059}#)
                                                                 (#{chi\ 465}#
                                                                   (cdr #{x\ 2059}#)
                                                                   (car #{x\ 2059}#)
                                                                   '(())
                                                                   #{mod\ 1986}#))
                                                               (cons (cons #{er\ 1979}#
                                                                           (#{source-wrap\ 451}#
                                                                             #{e\ 1983}#
                                                                             #{w\ 1984}#
                                                                             #{s\ 1985}#
                                                                             #{mod\ 1986}#))
                                                                     (cdr #{body\ 1967}#)))))))))))))))))))
                           (begin
                             (#{parse\ 1966}#
                               (map (lambda (#{x\ 1974}#)
                                      (cons #{r\ 1952}#
                                            (#{wrap\ 449}#
                                              #{x\ 1974}#
                                              #{w\ 1957}#
                                              #{mod\ 1944}#)))
                                    #{body\ 1940}#)
                               '()
                               '()
                               '()
                               '()
                               '()
                               '())))))))))))
         (#{chi-local-syntax\ 475}#
           (lambda (#{rec?\ 2062}#
                    #{e\ 2063}#
                    #{r\ 2064}#
                    #{w\ 2065}#
                    #{s\ 2066}#
                    #{mod\ 2067}#
                    #{k\ 2068}#)
             (let ((#{tmp\ 2076}# #{e\ 2063}#))
               (let ((#{tmp\ 2077}#
                       ($sc-dispatch
                         #{tmp\ 2076}#
                         '(_ #(each (any any)) any . each-any))))
                 (if #{tmp\ 2077}#
                   (@apply
                     (lambda (#{id\ 2082}#
                              #{val\ 2083}#
                              #{e1\ 2084}#
                              #{e2\ 2085}#)
                       (begin
                         (let ((#{ids\ 2087}# #{id\ 2082}#))
                           (if (not (#{valid-bound-ids?\ 443}# #{ids\ 2087}#))
                             (syntax-violation
                               #f
                               "duplicate bound keyword"
                               #{e\ 2063}#)
                             (begin
                               (let ((#{labels\ 2090}#
                                       (#{gen-labels\ 398}# #{ids\ 2087}#)))
                                 (begin
                                   (let ((#{new-w\ 2092}#
                                           (#{make-binding-wrap\ 427}#
                                             #{ids\ 2087}#
                                             #{labels\ 2090}#
                                             #{w\ 2065}#)))
                                     (#{k\ 2068}#
                                       (cons #{e1\ 2084}# #{e2\ 2085}#)
                                       (#{extend-env\ 368}#
                                         #{labels\ 2090}#
                                         (begin
                                           (let ((#{w\ 2096}#
                                                   (if #{rec?\ 2062}#
                                                     #{new-w\ 2092}#
                                                     #{w\ 2065}#))
                                                 (#{trans-r\ 2097}#
                                                   (#{macros-only-env\ 372}#
                                                     #{r\ 2064}#)))
                                             (map (lambda (#{x\ 2098}#)
                                                    (cons 'macro
                                                          (#{eval-local-transformer\ 477}#
                                                            (#{chi\ 465}#
                                                              #{x\ 2098}#
                                                              #{trans-r\ 2097}#
                                                              #{w\ 2096}#
                                                              #{mod\ 2067}#)
                                                            #{mod\ 2067}#)))
                                                  #{val\ 2083}#)))
                                         #{r\ 2064}#)
                                       #{new-w\ 2092}#
                                       #{s\ 2066}#
                                       #{mod\ 2067}#)))))))))
                     #{tmp\ 2077}#)
                   (let ((#{_\ 2103}# #{tmp\ 2076}#))
                     (syntax-violation
                       #f
                       "bad local syntax definition"
                       (#{source-wrap\ 451}#
                         #{e\ 2063}#
                         #{w\ 2065}#
                         #{s\ 2066}#
                         #{mod\ 2067}#))))))))
         (#{eval-local-transformer\ 477}#
           (lambda (#{expanded\ 2104}# #{mod\ 2105}#)
             (begin
               (let ((#{p\ 2109}#
                       (#{local-eval-hook\ 291}#
                         #{expanded\ 2104}#
                         #{mod\ 2105}#)))
                 (if (procedure? #{p\ 2109}#)
                   #{p\ 2109}#
                   (syntax-violation
                     #f
                     "nonprocedure transformer"
                     #{p\ 2109}#))))))
         (#{chi-void\ 479}#
           (lambda () (#{build-void\ 302}# #f)))
         (#{ellipsis?\ 481}#
           (lambda (#{x\ 2111}#)
             (if (#{nonsymbol-id?\ 378}# #{x\ 2111}#)
               (#{free-id=?\ 439}#
                 #{x\ 2111}#
                 '#(syntax-object
                    ...
                    ((top)
                     #(ribcage () () ())
                     #(ribcage () () ())
                     #(ribcage #(x) #((top)) #("i2112"))
                     #(ribcage
                       (lambda-var-list
                         gen-var
                         strip
                         chi-lambda-case
                         lambda*-formals
                         chi-simple-lambda
                         lambda-formals
                         underscore?
                         ellipsis?
                         chi-void
                         eval-local-transformer
                         chi-local-syntax
                         chi-body
                         chi-macro
                         chi-application
                         chi-expr
                         chi
                         chi-top
                         syntax-type
                         chi-when-list
                         chi-install-global
                         chi-top-sequence
                         chi-sequence
                         source-wrap
                         wrap
                         bound-id-member?
                         distinct-bound-ids?
                         valid-bound-ids?
                         bound-id=?
                         free-id=?
                         id-var-name
                         same-marks?
                         join-marks
                         join-wraps
                         smart-append
                         make-binding-wrap
                         extend-ribcage!
                         make-empty-ribcage
                         new-mark
                         anti-mark
                         the-anti-mark
                         top-marked?
                         top-wrap
                         empty-wrap
                         set-ribcage-labels!
                         set-ribcage-marks!
                         set-ribcage-symnames!
                         ribcage-labels
                         ribcage-marks
                         ribcage-symnames
                         ribcage?
                         make-ribcage
                         gen-labels
                         gen-label
                         make-rename
                         rename-marks
                         rename-new
                         rename-old
                         subst-rename?
                         wrap-subst
                         wrap-marks
                         make-wrap
                         id-sym-name&marks
                         id-sym-name
                         id?
                         nonsymbol-id?
                         global-extend
                         lookup
                         macros-only-env
                         extend-var-env
                         extend-env
                         null-env
                         binding-value
                         binding-type
                         make-binding
                         arg-check
                         source-annotation
                         no-source
                         set-syntax-object-module!
                         set-syntax-object-wrap!
                         set-syntax-object-expression!
                         syntax-object-module
                         syntax-object-wrap
                         syntax-object-expression
                         syntax-object?
                         make-syntax-object
                         build-lexical-var
                         build-letrec
                         build-named-let
                         build-let
                         build-sequence
                         build-data
                         build-primref
                         build-lambda-case
                         build-case-lambda
                         build-simple-lambda
                         build-global-definition
                         build-global-assignment
                         build-global-reference
                         analyze-variable
                         build-lexical-assignment
                         build-lexical-reference
                         build-dynlet
                         build-conditional
                         build-application
                         build-void
                         maybe-name-value!
                         decorate-source
                         get-global-definition-hook
                         put-global-definition-hook
                         gensym-hook
                         local-eval-hook
                         top-level-eval-hook
                         fx<
                         fx=
                         fx-
                         fx+
                         set-lambda-meta!
                         lambda-meta
                         lambda?
                         make-dynlet
                         make-letrec
                         make-let
                         make-lambda-case
                         make-lambda
                         make-sequence
                         make-application
                         make-conditional
                         make-toplevel-define
                         make-toplevel-set
                         make-toplevel-ref
                         make-module-set
                         make-module-ref
                         make-lexical-set
                         make-lexical-ref
                         make-primitive-ref
                         make-const
                         make-void)
                       ((top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top))
                       ("i496"
                        "i494"
                        "i492"
                        "i490"
                        "i488"
                        "i486"
                        "i484"
                        "i482"
                        "i480"
                        "i478"
                        "i476"
                        "i474"
                        "i472"
                        "i470"
                        "i468"
                        "i466"
                        "i464"
                        "i462"
                        "i460"
                        "i458"
                        "i456"
                        "i454"
                        "i452"
                        "i450"
                        "i448"
                        "i446"
                        "i444"
                        "i442"
                        "i440"
                        "i438"
                        "i436"
                        "i434"
                        "i432"
                        "i430"
                        "i428"
                        "i426"
                        "i424"
                        "i423"
                        "i422"
                        "i420"
                        "i419"
                        "i418"
                        "i417"
                        "i416"
                        "i414"
                        "i412"
                        "i410"
                        "i408"
                        "i406"
                        "i404"
                        "i402"
                        "i400"
                        "i397"
                        "i395"
                        "i394"
                        "i393"
                        "i392"
                        "i391"
                        "i390"
                        "i388"
                        "i386"
                        "i384"
                        "i382"
                        "i381"
                        "i379"
                        "i377"
                        "i375"
                        "i373"
                        "i371"
                        "i369"
                        "i367"
                        "i366"
                        "i364"
                        "i362"
                        "i361"
                        "i360"
                        "i358"
                        "i357"
                        "i355"
                        "i353"
                        "i351"
                        "i349"
                        "i347"
                        "i345"
                        "i343"
                        "i341"
                        "i339"
                        "i337"
                        "i335"
                        "i333"
                        "i331"
                        "i329"
                        "i327"
                        "i325"
                        "i323"
                        "i321"
                        "i319"
                        "i317"
                        "i315"
                        "i313"
                        "i311"
                        "i309"
                        "i307"
                        "i305"
                        "i303"
                        "i301"
                        "i299"
                        "i297"
                        "i295"
                        "i293"
                        "i292"
                        "i290"
                        "i288"
                        "i286"
                        "i284"
                        "i282"
                        "i280"
                        "i278"
                        "i276"
                        "i274"
                        "i271"
                        "i269"
                        "i267"
                        "i265"
                        "i263"
                        "i261"
                        "i259"
                        "i257"
                        "i255"
                        "i253"
                        "i251"
                        "i249"
                        "i247"
                        "i245"
                        "i243"
                        "i241"
                        "i239"
                        "i237"))
                     #(ribcage
                       (define-structure
                         define-expansion-accessors
                         define-expansion-constructors
                         and-map*)
                       ((top) (top) (top) (top))
                       ("i39" "i38" "i37" "i35")))
                    (hygiene guile)))
               #f)))
         (#{underscore?\ 483}#
           (lambda (#{x\ 2115}#)
             (if (#{nonsymbol-id?\ 378}# #{x\ 2115}#)
               (#{free-id=?\ 439}#
                 #{x\ 2115}#
                 '#(syntax-object
                    _
                    ((top)
                     #(ribcage () () ())
                     #(ribcage () () ())
                     #(ribcage #(x) #((top)) #("i2116"))
                     #(ribcage
                       (lambda-var-list
                         gen-var
                         strip
                         chi-lambda-case
                         lambda*-formals
                         chi-simple-lambda
                         lambda-formals
                         underscore?
                         ellipsis?
                         chi-void
                         eval-local-transformer
                         chi-local-syntax
                         chi-body
                         chi-macro
                         chi-application
                         chi-expr
                         chi
                         chi-top
                         syntax-type
                         chi-when-list
                         chi-install-global
                         chi-top-sequence
                         chi-sequence
                         source-wrap
                         wrap
                         bound-id-member?
                         distinct-bound-ids?
                         valid-bound-ids?
                         bound-id=?
                         free-id=?
                         id-var-name
                         same-marks?
                         join-marks
                         join-wraps
                         smart-append
                         make-binding-wrap
                         extend-ribcage!
                         make-empty-ribcage
                         new-mark
                         anti-mark
                         the-anti-mark
                         top-marked?
                         top-wrap
                         empty-wrap
                         set-ribcage-labels!
                         set-ribcage-marks!
                         set-ribcage-symnames!
                         ribcage-labels
                         ribcage-marks
                         ribcage-symnames
                         ribcage?
                         make-ribcage
                         gen-labels
                         gen-label
                         make-rename
                         rename-marks
                         rename-new
                         rename-old
                         subst-rename?
                         wrap-subst
                         wrap-marks
                         make-wrap
                         id-sym-name&marks
                         id-sym-name
                         id?
                         nonsymbol-id?
                         global-extend
                         lookup
                         macros-only-env
                         extend-var-env
                         extend-env
                         null-env
                         binding-value
                         binding-type
                         make-binding
                         arg-check
                         source-annotation
                         no-source
                         set-syntax-object-module!
                         set-syntax-object-wrap!
                         set-syntax-object-expression!
                         syntax-object-module
                         syntax-object-wrap
                         syntax-object-expression
                         syntax-object?
                         make-syntax-object
                         build-lexical-var
                         build-letrec
                         build-named-let
                         build-let
                         build-sequence
                         build-data
                         build-primref
                         build-lambda-case
                         build-case-lambda
                         build-simple-lambda
                         build-global-definition
                         build-global-assignment
                         build-global-reference
                         analyze-variable
                         build-lexical-assignment
                         build-lexical-reference
                         build-dynlet
                         build-conditional
                         build-application
                         build-void
                         maybe-name-value!
                         decorate-source
                         get-global-definition-hook
                         put-global-definition-hook
                         gensym-hook
                         local-eval-hook
                         top-level-eval-hook
                         fx<
                         fx=
                         fx-
                         fx+
                         set-lambda-meta!
                         lambda-meta
                         lambda?
                         make-dynlet
                         make-letrec
                         make-let
                         make-lambda-case
                         make-lambda
                         make-sequence
                         make-application
                         make-conditional
                         make-toplevel-define
                         make-toplevel-set
                         make-toplevel-ref
                         make-module-set
                         make-module-ref
                         make-lexical-set
                         make-lexical-ref
                         make-primitive-ref
                         make-const
                         make-void)
                       ((top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top))
                       ("i496"
                        "i494"
                        "i492"
                        "i490"
                        "i488"
                        "i486"
                        "i484"
                        "i482"
                        "i480"
                        "i478"
                        "i476"
                        "i474"
                        "i472"
                        "i470"
                        "i468"
                        "i466"
                        "i464"
                        "i462"
                        "i460"
                        "i458"
                        "i456"
                        "i454"
                        "i452"
                        "i450"
                        "i448"
                        "i446"
                        "i444"
                        "i442"
                        "i440"
                        "i438"
                        "i436"
                        "i434"
                        "i432"
                        "i430"
                        "i428"
                        "i426"
                        "i424"
                        "i423"
                        "i422"
                        "i420"
                        "i419"
                        "i418"
                        "i417"
                        "i416"
                        "i414"
                        "i412"
                        "i410"
                        "i408"
                        "i406"
                        "i404"
                        "i402"
                        "i400"
                        "i397"
                        "i395"
                        "i394"
                        "i393"
                        "i392"
                        "i391"
                        "i390"
                        "i388"
                        "i386"
                        "i384"
                        "i382"
                        "i381"
                        "i379"
                        "i377"
                        "i375"
                        "i373"
                        "i371"
                        "i369"
                        "i367"
                        "i366"
                        "i364"
                        "i362"
                        "i361"
                        "i360"
                        "i358"
                        "i357"
                        "i355"
                        "i353"
                        "i351"
                        "i349"
                        "i347"
                        "i345"
                        "i343"
                        "i341"
                        "i339"
                        "i337"
                        "i335"
                        "i333"
                        "i331"
                        "i329"
                        "i327"
                        "i325"
                        "i323"
                        "i321"
                        "i319"
                        "i317"
                        "i315"
                        "i313"
                        "i311"
                        "i309"
                        "i307"
                        "i305"
                        "i303"
                        "i301"
                        "i299"
                        "i297"
                        "i295"
                        "i293"
                        "i292"
                        "i290"
                        "i288"
                        "i286"
                        "i284"
                        "i282"
                        "i280"
                        "i278"
                        "i276"
                        "i274"
                        "i271"
                        "i269"
                        "i267"
                        "i265"
                        "i263"
                        "i261"
                        "i259"
                        "i257"
                        "i255"
                        "i253"
                        "i251"
                        "i249"
                        "i247"
                        "i245"
                        "i243"
                        "i241"
                        "i239"
                        "i237"))
                     #(ribcage
                       (define-structure
                         define-expansion-accessors
                         define-expansion-constructors
                         and-map*)
                       ((top) (top) (top) (top))
                       ("i39" "i38" "i37" "i35")))
                    (hygiene guile)))
               #f)))
         (#{lambda-formals\ 485}#
           (lambda (#{orig-args\ 2119}#)
             (letrec*
               ((#{req\ 2122}#
                  (lambda (#{args\ 2125}# #{rreq\ 2126}#)
                    (let ((#{tmp\ 2129}# #{args\ 2125}#))
                      (let ((#{tmp\ 2130}#
                              ($sc-dispatch #{tmp\ 2129}# (quote ()))))
                        (if #{tmp\ 2130}#
                          (@apply
                            (lambda ()
                              (#{check\ 2124}# (reverse #{rreq\ 2126}#) #f))
                            #{tmp\ 2130}#)
                          (let ((#{tmp\ 2131}#
                                  ($sc-dispatch
                                    #{tmp\ 2129}#
                                    '(any . any))))
                            (if (if #{tmp\ 2131}#
                                  (@apply
                                    (lambda (#{a\ 2134}# #{b\ 2135}#)
                                      (#{id?\ 380}# #{a\ 2134}#))
                                    #{tmp\ 2131}#)
                                  #f)
                              (@apply
                                (lambda (#{a\ 2138}# #{b\ 2139}#)
                                  (#{req\ 2122}#
                                    #{b\ 2139}#
                                    (cons #{a\ 2138}# #{rreq\ 2126}#)))
                                #{tmp\ 2131}#)
                              (let ((#{tmp\ 2140}# (list #{tmp\ 2129}#)))
                                (if (if #{tmp\ 2140}#
                                      (@apply
                                        (lambda (#{r\ 2142}#)
                                          (#{id?\ 380}# #{r\ 2142}#))
                                        #{tmp\ 2140}#)
                                      #f)
                                  (@apply
                                    (lambda (#{r\ 2144}#)
                                      (#{check\ 2124}#
                                        (reverse #{rreq\ 2126}#)
                                        #{r\ 2144}#))
                                    #{tmp\ 2140}#)
                                  (let ((#{else\ 2146}# #{tmp\ 2129}#))
                                    (syntax-violation
                                      'lambda
                                      "invalid argument list"
                                      #{orig-args\ 2119}#
                                      #{args\ 2125}#)))))))))))
                (#{check\ 2124}#
                  (lambda (#{req\ 2147}# #{rest\ 2148}#)
                    (if (#{distinct-bound-ids?\ 445}#
                          (if #{rest\ 2148}#
                            (cons #{rest\ 2148}# #{req\ 2147}#)
                            #{req\ 2147}#))
                      (values #{req\ 2147}# #f #{rest\ 2148}# #f)
                      (syntax-violation
                        'lambda
                        "duplicate identifier in argument list"
                        #{orig-args\ 2119}#)))))
               (begin
                 (#{req\ 2122}# #{orig-args\ 2119}# (quote ()))))))
         (#{chi-simple-lambda\ 487}#
           (lambda (#{e\ 2154}#
                    #{r\ 2155}#
                    #{w\ 2156}#
                    #{s\ 2157}#
                    #{mod\ 2158}#
                    #{req\ 2159}#
                    #{rest\ 2160}#
                    #{meta\ 2161}#
                    #{body\ 2162}#)
             (begin
               (let ((#{ids\ 2174}#
                       (if #{rest\ 2160}#
                         (append #{req\ 2159}# (list #{rest\ 2160}#))
                         #{req\ 2159}#)))
                 (begin
                   (let ((#{vars\ 2176}#
                           (map #{gen-var\ 495}# #{ids\ 2174}#)))
                     (begin
                       (let ((#{labels\ 2178}#
                               (#{gen-labels\ 398}# #{ids\ 2174}#)))
                         (#{build-simple-lambda\ 322}#
                           #{s\ 2157}#
                           (map syntax->datum #{req\ 2159}#)
                           (if #{rest\ 2160}#
                             (syntax->datum #{rest\ 2160}#)
                             #f)
                           #{vars\ 2176}#
                           #{meta\ 2161}#
                           (#{chi-body\ 473}#
                             #{body\ 2162}#
                             (#{source-wrap\ 451}#
                               #{e\ 2154}#
                               #{w\ 2156}#
                               #{s\ 2157}#
                               #{mod\ 2158}#)
                             (#{extend-var-env\ 370}#
                               #{labels\ 2178}#
                               #{vars\ 2176}#
                               #{r\ 2155}#)
                             (#{make-binding-wrap\ 427}#
                               #{ids\ 2174}#
                               #{labels\ 2178}#
                               #{w\ 2156}#)
                             #{mod\ 2158}#))))))))))
         (#{lambda*-formals\ 489}#
           (lambda (#{orig-args\ 2181}#)
             (letrec*
               ((#{req\ 2184}#
                  (lambda (#{args\ 2193}# #{rreq\ 2194}#)
                    (let ((#{tmp\ 2197}# #{args\ 2193}#))
                      (let ((#{tmp\ 2198}#
                              ($sc-dispatch #{tmp\ 2197}# (quote ()))))
                        (if #{tmp\ 2198}#
                          (@apply
                            (lambda ()
                              (#{check\ 2192}#
                                (reverse #{rreq\ 2194}#)
                                '()
                                #f
                                '()))
                            #{tmp\ 2198}#)
                          (let ((#{tmp\ 2199}#
                                  ($sc-dispatch
                                    #{tmp\ 2197}#
                                    '(any . any))))
                            (if (if #{tmp\ 2199}#
                                  (@apply
                                    (lambda (#{a\ 2202}# #{b\ 2203}#)
                                      (#{id?\ 380}# #{a\ 2202}#))
                                    #{tmp\ 2199}#)
                                  #f)
                              (@apply
                                (lambda (#{a\ 2206}# #{b\ 2207}#)
                                  (#{req\ 2184}#
                                    #{b\ 2207}#
                                    (cons #{a\ 2206}# #{rreq\ 2194}#)))
                                #{tmp\ 2199}#)
                              (let ((#{tmp\ 2208}#
                                      ($sc-dispatch
                                        #{tmp\ 2197}#
                                        '(any . any))))
                                (if (if #{tmp\ 2208}#
                                      (@apply
                                        (lambda (#{a\ 2211}# #{b\ 2212}#)
                                          (eq? (syntax->datum #{a\ 2211}#)
                                               #:optional))
                                        #{tmp\ 2208}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a\ 2215}# #{b\ 2216}#)
                                      (#{opt\ 2186}#
                                        #{b\ 2216}#
                                        (reverse #{rreq\ 2194}#)
                                        '()))
                                    #{tmp\ 2208}#)
                                  (let ((#{tmp\ 2217}#
                                          ($sc-dispatch
                                            #{tmp\ 2197}#
                                            '(any . any))))
                                    (if (if #{tmp\ 2217}#
                                          (@apply
                                            (lambda (#{a\ 2220}# #{b\ 2221}#)
                                              (eq? (syntax->datum #{a\ 2220}#)
                                                   #:key))
                                            #{tmp\ 2217}#)
                                          #f)
                                      (@apply
                                        (lambda (#{a\ 2224}# #{b\ 2225}#)
                                          (#{key\ 2188}#
                                            #{b\ 2225}#
                                            (reverse #{rreq\ 2194}#)
                                            '()
                                            '()))
                                        #{tmp\ 2217}#)
                                      (let ((#{tmp\ 2226}#
                                              ($sc-dispatch
                                                #{tmp\ 2197}#
                                                '(any any))))
                                        (if (if #{tmp\ 2226}#
                                              (@apply
                                                (lambda (#{a\ 2229}#
                                                         #{b\ 2230}#)
                                                  (eq? (syntax->datum
                                                         #{a\ 2229}#)
                                                       #:rest))
                                                #{tmp\ 2226}#)
                                              #f)
                                          (@apply
                                            (lambda (#{a\ 2233}# #{b\ 2234}#)
                                              (#{rest\ 2190}#
                                                #{b\ 2234}#
                                                (reverse #{rreq\ 2194}#)
                                                '()
                                                '()))
                                            #{tmp\ 2226}#)
                                          (let ((#{tmp\ 2235}#
                                                  (list #{tmp\ 2197}#)))
                                            (if (if #{tmp\ 2235}#
                                                  (@apply
                                                    (lambda (#{r\ 2237}#)
                                                      (#{id?\ 380}#
                                                        #{r\ 2237}#))
                                                    #{tmp\ 2235}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{r\ 2239}#)
                                                  (#{rest\ 2190}#
                                                    #{r\ 2239}#
                                                    (reverse #{rreq\ 2194}#)
                                                    '()
                                                    '()))
                                                #{tmp\ 2235}#)
                                              (let ((#{else\ 2241}#
                                                      #{tmp\ 2197}#))
                                                (syntax-violation
                                                  'lambda*
                                                  "invalid argument list"
                                                  #{orig-args\ 2181}#
                                                  #{args\ 2193}#)))))))))))))))))
                (#{opt\ 2186}#
                  (lambda (#{args\ 2242}# #{req\ 2243}# #{ropt\ 2244}#)
                    (let ((#{tmp\ 2248}# #{args\ 2242}#))
                      (let ((#{tmp\ 2249}#
                              ($sc-dispatch #{tmp\ 2248}# (quote ()))))
                        (if #{tmp\ 2249}#
                          (@apply
                            (lambda ()
                              (#{check\ 2192}#
                                #{req\ 2243}#
                                (reverse #{ropt\ 2244}#)
                                #f
                                '()))
                            #{tmp\ 2249}#)
                          (let ((#{tmp\ 2250}#
                                  ($sc-dispatch
                                    #{tmp\ 2248}#
                                    '(any . any))))
                            (if (if #{tmp\ 2250}#
                                  (@apply
                                    (lambda (#{a\ 2253}# #{b\ 2254}#)
                                      (#{id?\ 380}# #{a\ 2253}#))
                                    #{tmp\ 2250}#)
                                  #f)
                              (@apply
                                (lambda (#{a\ 2257}# #{b\ 2258}#)
                                  (#{opt\ 2186}#
                                    #{b\ 2258}#
                                    #{req\ 2243}#
                                    (cons (cons #{a\ 2257}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i2255" "i2256"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req ropt)
                                                       #((top) (top) (top))
                                                       #("i2245"
                                                         "i2246"
                                                         "i2247"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2191"
                                                        "i2189"
                                                        "i2187"
                                                        "i2185"
                                                        "i2183"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i2182"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         chi-lambda-case
                                                         lambda*-formals
                                                         chi-simple-lambda
                                                         lambda-formals
                                                         underscore?
                                                         ellipsis?
                                                         chi-void
                                                         eval-local-transformer
                                                         chi-local-syntax
                                                         chi-body
                                                         chi-macro
                                                         chi-application
                                                         chi-expr
                                                         chi
                                                         chi-top
                                                         syntax-type
                                                         chi-when-list
                                                         chi-install-global
                                                         chi-top-sequence
                                                         chi-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i496"
                                                        "i494"
                                                        "i492"
                                                        "i490"
                                                        "i488"
                                                        "i486"
                                                        "i484"
                                                        "i482"
                                                        "i480"
                                                        "i478"
                                                        "i476"
                                                        "i474"
                                                        "i472"
                                                        "i470"
                                                        "i468"
                                                        "i466"
                                                        "i464"
                                                        "i462"
                                                        "i460"
                                                        "i458"
                                                        "i456"
                                                        "i454"
                                                        "i452"
                                                        "i450"
                                                        "i448"
                                                        "i446"
                                                        "i444"
                                                        "i442"
                                                        "i440"
                                                        "i438"
                                                        "i436"
                                                        "i434"
                                                        "i432"
                                                        "i430"
                                                        "i428"
                                                        "i426"
                                                        "i424"
                                                        "i423"
                                                        "i422"
                                                        "i420"
                                                        "i419"
                                                        "i418"
                                                        "i417"
                                                        "i416"
                                                        "i414"
                                                        "i412"
                                                        "i410"
                                                        "i408"
                                                        "i406"
                                                        "i404"
                                                        "i402"
                                                        "i400"
                                                        "i397"
                                                        "i395"
                                                        "i394"
                                                        "i393"
                                                        "i392"
                                                        "i391"
                                                        "i390"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i381"
                                                        "i379"
                                                        "i377"
                                                        "i375"
                                                        "i373"
                                                        "i371"
                                                        "i369"
                                                        "i367"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i361"
                                                        "i360"
                                                        "i358"
                                                        "i357"
                                                        "i355"
                                                        "i353"
                                                        "i351"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i339"
                                                        "i337"
                                                        "i335"
                                                        "i333"
                                                        "i331"
                                                        "i329"
                                                        "i327"
                                                        "i325"
                                                        "i323"
                                                        "i321"
                                                        "i319"
                                                        "i317"
                                                        "i315"
                                                        "i313"
                                                        "i311"
                                                        "i309"
                                                        "i307"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i292"
                                                        "i290"
                                                        "i288"
                                                        "i286"
                                                        "i284"
                                                        "i282"
                                                        "i280"
                                                        "i278"
                                                        "i276"
                                                        "i274"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i261"
                                                        "i259"
                                                        "i257"
                                                        "i255"
                                                        "i253"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i245"
                                                        "i243"
                                                        "i241"
                                                        "i239"
                                                        "i237"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors
                                                         and-map*)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i39"
                                                        "i38"
                                                        "i37"
                                                        "i35")))
                                                    (hygiene guile))))
                                          #{ropt\ 2244}#)))
                                #{tmp\ 2250}#)
                              (let ((#{tmp\ 2259}#
                                      ($sc-dispatch
                                        #{tmp\ 2248}#
                                        '((any any) . any))))
                                (if (if #{tmp\ 2259}#
                                      (@apply
                                        (lambda (#{a\ 2263}#
                                                 #{init\ 2264}#
                                                 #{b\ 2265}#)
                                          (#{id?\ 380}# #{a\ 2263}#))
                                        #{tmp\ 2259}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a\ 2269}#
                                             #{init\ 2270}#
                                             #{b\ 2271}#)
                                      (#{opt\ 2186}#
                                        #{b\ 2271}#
                                        #{req\ 2243}#
                                        (cons (list #{a\ 2269}# #{init\ 2270}#)
                                              #{ropt\ 2244}#)))
                                    #{tmp\ 2259}#)
                                  (let ((#{tmp\ 2272}#
                                          ($sc-dispatch
                                            #{tmp\ 2248}#
                                            '(any . any))))
                                    (if (if #{tmp\ 2272}#
                                          (@apply
                                            (lambda (#{a\ 2275}# #{b\ 2276}#)
                                              (eq? (syntax->datum #{a\ 2275}#)
                                                   #:key))
                                            #{tmp\ 2272}#)
                                          #f)
                                      (@apply
                                        (lambda (#{a\ 2279}# #{b\ 2280}#)
                                          (#{key\ 2188}#
                                            #{b\ 2280}#
                                            #{req\ 2243}#
                                            (reverse #{ropt\ 2244}#)
                                            '()))
                                        #{tmp\ 2272}#)
                                      (let ((#{tmp\ 2281}#
                                              ($sc-dispatch
                                                #{tmp\ 2248}#
                                                '(any any))))
                                        (if (if #{tmp\ 2281}#
                                              (@apply
                                                (lambda (#{a\ 2284}#
                                                         #{b\ 2285}#)
                                                  (eq? (syntax->datum
                                                         #{a\ 2284}#)
                                                       #:rest))
                                                #{tmp\ 2281}#)
                                              #f)
                                          (@apply
                                            (lambda (#{a\ 2288}# #{b\ 2289}#)
                                              (#{rest\ 2190}#
                                                #{b\ 2289}#
                                                #{req\ 2243}#
                                                (reverse #{ropt\ 2244}#)
                                                '()))
                                            #{tmp\ 2281}#)
                                          (let ((#{tmp\ 2290}#
                                                  (list #{tmp\ 2248}#)))
                                            (if (if #{tmp\ 2290}#
                                                  (@apply
                                                    (lambda (#{r\ 2292}#)
                                                      (#{id?\ 380}#
                                                        #{r\ 2292}#))
                                                    #{tmp\ 2290}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{r\ 2294}#)
                                                  (#{rest\ 2190}#
                                                    #{r\ 2294}#
                                                    #{req\ 2243}#
                                                    (reverse #{ropt\ 2244}#)
                                                    '()))
                                                #{tmp\ 2290}#)
                                              (let ((#{else\ 2296}#
                                                      #{tmp\ 2248}#))
                                                (syntax-violation
                                                  'lambda*
                                                  "invalid optional argument list"
                                                  #{orig-args\ 2181}#
                                                  #{args\ 2242}#)))))))))))))))))
                (#{key\ 2188}#
                  (lambda (#{args\ 2297}#
                           #{req\ 2298}#
                           #{opt\ 2299}#
                           #{rkey\ 2300}#)
                    (let ((#{tmp\ 2305}# #{args\ 2297}#))
                      (let ((#{tmp\ 2306}#
                              ($sc-dispatch #{tmp\ 2305}# (quote ()))))
                        (if #{tmp\ 2306}#
                          (@apply
                            (lambda ()
                              (#{check\ 2192}#
                                #{req\ 2298}#
                                #{opt\ 2299}#
                                #f
                                (cons #f (reverse #{rkey\ 2300}#))))
                            #{tmp\ 2306}#)
                          (let ((#{tmp\ 2307}#
                                  ($sc-dispatch
                                    #{tmp\ 2305}#
                                    '(any . any))))
                            (if (if #{tmp\ 2307}#
                                  (@apply
                                    (lambda (#{a\ 2310}# #{b\ 2311}#)
                                      (#{id?\ 380}# #{a\ 2310}#))
                                    #{tmp\ 2307}#)
                                  #f)
                              (@apply
                                (lambda (#{a\ 2314}# #{b\ 2315}#)
                                  (let ((#{tmp\ 2317}#
                                          (symbol->keyword
                                            (syntax->datum #{a\ 2314}#))))
                                    (let ((#{k\ 2319}# #{tmp\ 2317}#))
                                      (#{key\ 2188}#
                                        #{b\ 2315}#
                                        #{req\ 2298}#
                                        #{opt\ 2299}#
                                        (cons (cons #{k\ 2319}#
                                                    (cons #{a\ 2314}#
                                                          '(#(syntax-object
                                                              #f
                                                              ((top)
                                                               #(ribcage
                                                                 #(k)
                                                                 #((top))
                                                                 #("i2318"))
                                                               #(ribcage
                                                                 #(a b)
                                                                 #((top) (top))
                                                                 #("i2312"
                                                                   "i2313"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(args
                                                                   req
                                                                   opt
                                                                   rkey)
                                                                 #((top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                 #("i2301"
                                                                   "i2302"
                                                                   "i2303"
                                                                   "i2304"))
                                                               #(ribcage
                                                                 (check rest
                                                                        key
                                                                        opt
                                                                        req)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i2191"
                                                                  "i2189"
                                                                  "i2187"
                                                                  "i2185"
                                                                  "i2183"))
                                                               #(ribcage
                                                                 #(orig-args)
                                                                 #((top))
                                                                 #("i2182"))
                                                               #(ribcage
                                                                 (lambda-var-list
                                                                   gen-var
                                                                   strip
                                                                   chi-lambda-case
                                                                   lambda*-formals
                                                                   chi-simple-lambda
                                                                   lambda-formals
                                                                   underscore?
                                                                   ellipsis?
                                                                   chi-void
                                                                   eval-local-transformer
                                                                   chi-local-syntax
                                                                   chi-body
                                                                   chi-macro
                                                                   chi-application
                                                                   chi-expr
                                                                   chi
                                                                   chi-top
                                                                   syntax-type
                                                                   chi-when-list
                                                                   chi-install-global
                                                                   chi-top-sequence
                                                                   chi-sequence
                                                                   source-wrap
                                                                   wrap
                                                                   bound-id-member?
                                                                   distinct-bound-ids?
                                                                   valid-bound-ids?
                                                                   bound-id=?
                                                                   free-id=?
                                                                   id-var-name
                                                                   same-marks?
                                                                   join-marks
                                                                   join-wraps
                                                                   smart-append
                                                                   make-binding-wrap
                                                                   extend-ribcage!
                                                                   make-empty-ribcage
                                                                   new-mark
                                                                   anti-mark
                                                                   the-anti-mark
                                                                   top-marked?
                                                                   top-wrap
                                                                   empty-wrap
                                                                   set-ribcage-labels!
                                                                   set-ribcage-marks!
                                                                   set-ribcage-symnames!
                                                                   ribcage-labels
                                                                   ribcage-marks
                                                                   ribcage-symnames
                                                                   ribcage?
                                                                   make-ribcage
                                                                   gen-labels
                                                                   gen-label
                                                                   make-rename
                                                                   rename-marks
                                                                   rename-new
                                                                   rename-old
                                                                   subst-rename?
                                                                   wrap-subst
                                                                   wrap-marks
                                                                   make-wrap
                                                                   id-sym-name&marks
                                                                   id-sym-name
                                                                   id?
                                                                   nonsymbol-id?
                                                                   global-extend
                                                                   lookup
                                                                   macros-only-env
                                                                   extend-var-env
                                                                   extend-env
                                                                   null-env
                                                                   binding-value
                                                                   binding-type
                                                                   make-binding
                                                                   arg-check
                                                                   source-annotation
                                                                   no-source
                                                                   set-syntax-object-module!
                                                                   set-syntax-object-wrap!
                                                                   set-syntax-object-expression!
                                                                   syntax-object-module
                                                                   syntax-object-wrap
                                                                   syntax-object-expression
                                                                   syntax-object?
                                                                   make-syntax-object
                                                                   build-lexical-var
                                                                   build-letrec
                                                                   build-named-let
                                                                   build-let
                                                                   build-sequence
                                                                   build-data
                                                                   build-primref
                                                                   build-lambda-case
                                                                   build-case-lambda
                                                                   build-simple-lambda
                                                                   build-global-definition
                                                                   build-global-assignment
                                                                   build-global-reference
                                                                   analyze-variable
                                                                   build-lexical-assignment
                                                                   build-lexical-reference
                                                                   build-dynlet
                                                                   build-conditional
                                                                   build-application
                                                                   build-void
                                                                   maybe-name-value!
                                                                   decorate-source
                                                                   get-global-definition-hook
                                                                   put-global-definition-hook
                                                                   gensym-hook
                                                                   local-eval-hook
                                                                   top-level-eval-hook
                                                                   fx<
                                                                   fx=
                                                                   fx-
                                                                   fx+
                                                                   set-lambda-meta!
                                                                   lambda-meta
                                                                   lambda?
                                                                   make-dynlet
                                                                   make-letrec
                                                                   make-let
                                                                   make-lambda-case
                                                                   make-lambda
                                                                   make-sequence
                                                                   make-application
                                                                   make-conditional
                                                                   make-toplevel-define
                                                                   make-toplevel-set
                                                                   make-toplevel-ref
                                                                   make-module-set
                                                                   make-module-ref
                                                                   make-lexical-set
                                                                   make-lexical-ref
                                                                   make-primitive-ref
                                                                   make-const
                                                                   make-void)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i496"
                                                                  "i494"
                                                                  "i492"
                                                                  "i490"
                                                                  "i488"
                                                                  "i486"
                                                                  "i484"
                                                                  "i482"
                                                                  "i480"
                                                                  "i478"
                                                                  "i476"
                                                                  "i474"
                                                                  "i472"
                                                                  "i470"
                                                                  "i468"
                                                                  "i466"
                                                                  "i464"
                                                                  "i462"
                                                                  "i460"
                                                                  "i458"
                                                                  "i456"
                                                                  "i454"
                                                                  "i452"
                                                                  "i450"
                                                                  "i448"
                                                                  "i446"
                                                                  "i444"
                                                                  "i442"
                                                                  "i440"
                                                                  "i438"
                                                                  "i436"
                                                                  "i434"
                                                                  "i432"
                                                                  "i430"
                                                                  "i428"
                                                                  "i426"
                                                                  "i424"
                                                                  "i423"
                                                                  "i422"
                                                                  "i420"
                                                                  "i419"
                                                                  "i418"
                                                                  "i417"
                                                                  "i416"
                                                                  "i414"
                                                                  "i412"
                                                                  "i410"
                                                                  "i408"
                                                                  "i406"
                                                                  "i404"
                                                                  "i402"
                                                                  "i400"
                                                                  "i397"
                                                                  "i395"
                                                                  "i394"
                                                                  "i393"
                                                                  "i392"
                                                                  "i391"
                                                                  "i390"
                                                                  "i388"
                                                                  "i386"
                                                                  "i384"
                                                                  "i382"
                                                                  "i381"
                                                                  "i379"
                                                                  "i377"
                                                                  "i375"
                                                                  "i373"
                                                                  "i371"
                                                                  "i369"
                                                                  "i367"
                                                                  "i366"
                                                                  "i364"
                                                                  "i362"
                                                                  "i361"
                                                                  "i360"
                                                                  "i358"
                                                                  "i357"
                                                                  "i355"
                                                                  "i353"
                                                                  "i351"
                                                                  "i349"
                                                                  "i347"
                                                                  "i345"
                                                                  "i343"
                                                                  "i341"
                                                                  "i339"
                                                                  "i337"
                                                                  "i335"
                                                                  "i333"
                                                                  "i331"
                                                                  "i329"
                                                                  "i327"
                                                                  "i325"
                                                                  "i323"
                                                                  "i321"
                                                                  "i319"
                                                                  "i317"
                                                                  "i315"
                                                                  "i313"
                                                                  "i311"
                                                                  "i309"
                                                                  "i307"
                                                                  "i305"
                                                                  "i303"
                                                                  "i301"
                                                                  "i299"
                                                                  "i297"
                                                                  "i295"
                                                                  "i293"
                                                                  "i292"
                                                                  "i290"
                                                                  "i288"
                                                                  "i286"
                                                                  "i284"
                                                                  "i282"
                                                                  "i280"
                                                                  "i278"
                                                                  "i276"
                                                                  "i274"
                                                                  "i271"
                                                                  "i269"
                                                                  "i267"
                                                                  "i265"
                                                                  "i263"
                                                                  "i261"
                                                                  "i259"
                                                                  "i257"
                                                                  "i255"
                                                                  "i253"
                                                                  "i251"
                                                                  "i249"
                                                                  "i247"
                                                                  "i245"
                                                                  "i243"
                                                                  "i241"
                                                                  "i239"
                                                                  "i237"))
                                                               #(ribcage
                                                                 (define-structure
                                                                   define-expansion-accessors
                                                                   define-expansion-constructors
                                                                   and-map*)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i39"
                                                                  "i38"
                                                                  "i37"
                                                                  "i35")))
                                                              (hygiene
                                                                guile)))))
                                              #{rkey\ 2300}#)))))
                                #{tmp\ 2307}#)
                              (let ((#{tmp\ 2320}#
                                      ($sc-dispatch
                                        #{tmp\ 2305}#
                                        '((any any) . any))))
                                (if (if #{tmp\ 2320}#
                                      (@apply
                                        (lambda (#{a\ 2324}#
                                                 #{init\ 2325}#
                                                 #{b\ 2326}#)
                                          (#{id?\ 380}# #{a\ 2324}#))
                                        #{tmp\ 2320}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a\ 2330}#
                                             #{init\ 2331}#
                                             #{b\ 2332}#)
                                      (let ((#{tmp\ 2334}#
                                              (symbol->keyword
                                                (syntax->datum #{a\ 2330}#))))
                                        (let ((#{k\ 2336}# #{tmp\ 2334}#))
                                          (#{key\ 2188}#
                                            #{b\ 2332}#
                                            #{req\ 2298}#
                                            #{opt\ 2299}#
                                            (cons (list #{k\ 2336}#
                                                        #{a\ 2330}#
                                                        #{init\ 2331}#)
                                                  #{rkey\ 2300}#)))))
                                    #{tmp\ 2320}#)
                                  (let ((#{tmp\ 2337}#
                                          ($sc-dispatch
                                            #{tmp\ 2305}#
                                            '((any any any) . any))))
                                    (if (if #{tmp\ 2337}#
                                          (@apply
                                            (lambda (#{a\ 2342}#
                                                     #{init\ 2343}#
                                                     #{k\ 2344}#
                                                     #{b\ 2345}#)
                                              (if (#{id?\ 380}# #{a\ 2342}#)
                                                (keyword?
                                                  (syntax->datum #{k\ 2344}#))
                                                #f))
                                            #{tmp\ 2337}#)
                                          #f)
                                      (@apply
                                        (lambda (#{a\ 2352}#
                                                 #{init\ 2353}#
                                                 #{k\ 2354}#
                                                 #{b\ 2355}#)
                                          (#{key\ 2188}#
                                            #{b\ 2355}#
                                            #{req\ 2298}#
                                            #{opt\ 2299}#
                                            (cons (list #{k\ 2354}#
                                                        #{a\ 2352}#
                                                        #{init\ 2353}#)
                                                  #{rkey\ 2300}#)))
                                        #{tmp\ 2337}#)
                                      (let ((#{tmp\ 2356}#
                                              ($sc-dispatch
                                                #{tmp\ 2305}#
                                                '(any))))
                                        (if (if #{tmp\ 2356}#
                                              (@apply
                                                (lambda (#{aok\ 2358}#)
                                                  (eq? (syntax->datum
                                                         #{aok\ 2358}#)
                                                       #:allow-other-keys))
                                                #{tmp\ 2356}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok\ 2360}#)
                                              (#{check\ 2192}#
                                                #{req\ 2298}#
                                                #{opt\ 2299}#
                                                #f
                                                (cons #t
                                                      (reverse
                                                        #{rkey\ 2300}#))))
                                            #{tmp\ 2356}#)
                                          (let ((#{tmp\ 2361}#
                                                  ($sc-dispatch
                                                    #{tmp\ 2305}#
                                                    '(any any any))))
                                            (if (if #{tmp\ 2361}#
                                                  (@apply
                                                    (lambda (#{aok\ 2365}#
                                                             #{a\ 2366}#
                                                             #{b\ 2367}#)
                                                      (if (eq? (syntax->datum
                                                                 #{aok\ 2365}#)
                                                               #:allow-other-keys)
                                                        (eq? (syntax->datum
                                                               #{a\ 2366}#)
                                                             #:rest)
                                                        #f))
                                                    #{tmp\ 2361}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{aok\ 2373}#
                                                         #{a\ 2374}#
                                                         #{b\ 2375}#)
                                                  (#{rest\ 2190}#
                                                    #{b\ 2375}#
                                                    #{req\ 2298}#
                                                    #{opt\ 2299}#
                                                    (cons #t
                                                          (reverse
                                                            #{rkey\ 2300}#))))
                                                #{tmp\ 2361}#)
                                              (let ((#{tmp\ 2376}#
                                                      ($sc-dispatch
                                                        #{tmp\ 2305}#
                                                        '(any . any))))
                                                (if (if #{tmp\ 2376}#
                                                      (@apply
                                                        (lambda (#{aok\ 2379}#
                                                                 #{r\ 2380}#)
                                                          (if (eq? (syntax->datum
                                                                     #{aok\ 2379}#)
                                                                   #:allow-other-keys)
                                                            (#{id?\ 380}#
                                                              #{r\ 2380}#)
                                                            #f))
                                                        #{tmp\ 2376}#)
                                                      #f)
                                                  (@apply
                                                    (lambda (#{aok\ 2385}#
                                                             #{r\ 2386}#)
                                                      (#{rest\ 2190}#
                                                        #{r\ 2386}#
                                                        #{req\ 2298}#
                                                        #{opt\ 2299}#
                                                        (cons #t
                                                              (reverse
                                                                #{rkey\ 2300}#))))
                                                    #{tmp\ 2376}#)
                                                  (let ((#{tmp\ 2387}#
                                                          ($sc-dispatch
                                                            #{tmp\ 2305}#
                                                            '(any any))))
                                                    (if (if #{tmp\ 2387}#
                                                          (@apply
                                                            (lambda (#{a\ 2390}#
                                                                     #{b\ 2391}#)
                                                              (eq? (syntax->datum
                                                                     #{a\ 2390}#)
                                                                   #:rest))
                                                            #{tmp\ 2387}#)
                                                          #f)
                                                      (@apply
                                                        (lambda (#{a\ 2394}#
                                                                 #{b\ 2395}#)
                                                          (#{rest\ 2190}#
                                                            #{b\ 2395}#
                                                            #{req\ 2298}#
                                                            #{opt\ 2299}#
                                                            (cons #f
                                                                  (reverse
                                                                    #{rkey\ 2300}#))))
                                                        #{tmp\ 2387}#)
                                                      (let ((#{tmp\ 2396}#
                                                              (list #{tmp\ 2305}#)))
                                                        (if (if #{tmp\ 2396}#
                                                              (@apply
                                                                (lambda (#{r\ 2398}#)
                                                                  (#{id?\ 380}#
                                                                    #{r\ 2398}#))
                                                                #{tmp\ 2396}#)
                                                              #f)
                                                          (@apply
                                                            (lambda (#{r\ 2400}#)
                                                              (#{rest\ 2190}#
                                                                #{r\ 2400}#
                                                                #{req\ 2298}#
                                                                #{opt\ 2299}#
                                                                (cons #f
                                                                      (reverse
                                                                        #{rkey\ 2300}#))))
                                                            #{tmp\ 2396}#)
                                                          (let ((#{else\ 2402}#
                                                                  #{tmp\ 2305}#))
                                                            (syntax-violation
                                                              'lambda*
                                                              "invalid keyword argument list"
                                                              #{orig-args\ 2181}#
                                                              #{args\ 2297}#)))))))))))))))))))))))
                (#{rest\ 2190}#
                  (lambda (#{args\ 2403}#
                           #{req\ 2404}#
                           #{opt\ 2405}#
                           #{kw\ 2406}#)
                    (let ((#{tmp\ 2411}# #{args\ 2403}#))
                      (let ((#{tmp\ 2412}# (list #{tmp\ 2411}#)))
                        (if (if #{tmp\ 2412}#
                              (@apply
                                (lambda (#{r\ 2414}#)
                                  (#{id?\ 380}# #{r\ 2414}#))
                                #{tmp\ 2412}#)
                              #f)
                          (@apply
                            (lambda (#{r\ 2416}#)
                              (#{check\ 2192}#
                                #{req\ 2404}#
                                #{opt\ 2405}#
                                #{r\ 2416}#
                                #{kw\ 2406}#))
                            #{tmp\ 2412}#)
                          (let ((#{else\ 2418}# #{tmp\ 2411}#))
                            (syntax-violation
                              'lambda*
                              "invalid rest argument"
                              #{orig-args\ 2181}#
                              #{args\ 2403}#)))))))
                (#{check\ 2192}#
                  (lambda (#{req\ 2419}#
                           #{opt\ 2420}#
                           #{rest\ 2421}#
                           #{kw\ 2422}#)
                    (if (#{distinct-bound-ids?\ 445}#
                          (append
                            #{req\ 2419}#
                            (map car #{opt\ 2420}#)
                            (if #{rest\ 2421}#
                              (list #{rest\ 2421}#)
                              '())
                            (if (pair? #{kw\ 2422}#)
                              (map cadr (cdr #{kw\ 2422}#))
                              '())))
                      (values
                        #{req\ 2419}#
                        #{opt\ 2420}#
                        #{rest\ 2421}#
                        #{kw\ 2422}#)
                      (syntax-violation
                        'lambda*
                        "duplicate identifier in argument list"
                        #{orig-args\ 2181}#)))))
               (begin
                 (#{req\ 2184}# #{orig-args\ 2181}# (quote ()))))))
         (#{chi-lambda-case\ 491}#
           (lambda (#{e\ 2430}#
                    #{r\ 2431}#
                    #{w\ 2432}#
                    #{s\ 2433}#
                    #{mod\ 2434}#
                    #{get-formals\ 2435}#
                    #{clauses\ 2436}#)
             (letrec*
               ((#{expand-req\ 2445}#
                  (lambda (#{req\ 2452}#
                           #{opt\ 2453}#
                           #{rest\ 2454}#
                           #{kw\ 2455}#
                           #{body\ 2456}#)
                    (begin
                      (let ((#{vars\ 2464}#
                              (map #{gen-var\ 495}# #{req\ 2452}#))
                            (#{labels\ 2465}#
                              (#{gen-labels\ 398}# #{req\ 2452}#)))
                        (begin
                          (let ((#{r*\ 2468}#
                                  (#{extend-var-env\ 370}#
                                    #{labels\ 2465}#
                                    #{vars\ 2464}#
                                    #{r\ 2431}#))
                                (#{w*\ 2469}#
                                  (#{make-binding-wrap\ 427}#
                                    #{req\ 2452}#
                                    #{labels\ 2465}#
                                    #{w\ 2432}#)))
                            (#{expand-opt\ 2447}#
                              (map syntax->datum #{req\ 2452}#)
                              #{opt\ 2453}#
                              #{rest\ 2454}#
                              #{kw\ 2455}#
                              #{body\ 2456}#
                              (reverse #{vars\ 2464}#)
                              #{r*\ 2468}#
                              #{w*\ 2469}#
                              '()
                              '())))))))
                (#{expand-opt\ 2447}#
                  (lambda (#{req\ 2470}#
                           #{opt\ 2471}#
                           #{rest\ 2472}#
                           #{kw\ 2473}#
                           #{body\ 2474}#
                           #{vars\ 2475}#
                           #{r*\ 2476}#
                           #{w*\ 2477}#
                           #{out\ 2478}#
                           #{inits\ 2479}#)
                    (if (pair? #{opt\ 2471}#)
                      (let ((#{tmp\ 2492}# (car #{opt\ 2471}#)))
                        (let ((#{tmp\ 2493}#
                                ($sc-dispatch
                                  #{tmp\ 2492}#
                                  '(any any))))
                          (if #{tmp\ 2493}#
                            (@apply
                              (lambda (#{id\ 2496}# #{i\ 2497}#)
                                (begin
                                  (let ((#{v\ 2500}#
                                          (#{gen-var\ 495}# #{id\ 2496}#)))
                                    (begin
                                      (let ((#{l\ 2502}#
                                              (#{gen-labels\ 398}#
                                                (list #{v\ 2500}#))))
                                        (begin
                                          (let ((#{r**\ 2504}#
                                                  (#{extend-var-env\ 370}#
                                                    #{l\ 2502}#
                                                    (list #{v\ 2500}#)
                                                    #{r*\ 2476}#)))
                                            (begin
                                              (let ((#{w**\ 2506}#
                                                      (#{make-binding-wrap\ 427}#
                                                        (list #{id\ 2496}#)
                                                        #{l\ 2502}#
                                                        #{w*\ 2477}#)))
                                                (#{expand-opt\ 2447}#
                                                  #{req\ 2470}#
                                                  (cdr #{opt\ 2471}#)
                                                  #{rest\ 2472}#
                                                  #{kw\ 2473}#
                                                  #{body\ 2474}#
                                                  (cons #{v\ 2500}#
                                                        #{vars\ 2475}#)
                                                  #{r**\ 2504}#
                                                  #{w**\ 2506}#
                                                  (cons (syntax->datum
                                                          #{id\ 2496}#)
                                                        #{out\ 2478}#)
                                                  (cons (#{chi\ 465}#
                                                          #{i\ 2497}#
                                                          #{r*\ 2476}#
                                                          #{w*\ 2477}#
                                                          #{mod\ 2434}#)
                                                        #{inits\ 2479}#)))))))))))
                              #{tmp\ 2493}#)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              #{tmp\ 2492}#))))
                      (if #{rest\ 2472}#
                        (begin
                          (let ((#{v\ 2511}#
                                  (#{gen-var\ 495}# #{rest\ 2472}#)))
                            (begin
                              (let ((#{l\ 2513}#
                                      (#{gen-labels\ 398}#
                                        (list #{v\ 2511}#))))
                                (begin
                                  (let ((#{r*\ 2515}#
                                          (#{extend-var-env\ 370}#
                                            #{l\ 2513}#
                                            (list #{v\ 2511}#)
                                            #{r*\ 2476}#)))
                                    (begin
                                      (let ((#{w*\ 2517}#
                                              (#{make-binding-wrap\ 427}#
                                                (list #{rest\ 2472}#)
                                                #{l\ 2513}#
                                                #{w*\ 2477}#)))
                                        (#{expand-kw\ 2449}#
                                          #{req\ 2470}#
                                          (if (pair? #{out\ 2478}#)
                                            (reverse #{out\ 2478}#)
                                            #f)
                                          (syntax->datum #{rest\ 2472}#)
                                          (if (pair? #{kw\ 2473}#)
                                            (cdr #{kw\ 2473}#)
                                            #{kw\ 2473}#)
                                          #{body\ 2474}#
                                          (cons #{v\ 2511}# #{vars\ 2475}#)
                                          #{r*\ 2515}#
                                          #{w*\ 2517}#
                                          (if (pair? #{kw\ 2473}#)
                                            (car #{kw\ 2473}#)
                                            #f)
                                          '()
                                          #{inits\ 2479}#)))))))))
                        (#{expand-kw\ 2449}#
                          #{req\ 2470}#
                          (if (pair? #{out\ 2478}#)
                            (reverse #{out\ 2478}#)
                            #f)
                          #f
                          (if (pair? #{kw\ 2473}#)
                            (cdr #{kw\ 2473}#)
                            #{kw\ 2473}#)
                          #{body\ 2474}#
                          #{vars\ 2475}#
                          #{r*\ 2476}#
                          #{w*\ 2477}#
                          (if (pair? #{kw\ 2473}#) (car #{kw\ 2473}#) #f)
                          '()
                          #{inits\ 2479}#)))))
                (#{expand-kw\ 2449}#
                  (lambda (#{req\ 2519}#
                           #{opt\ 2520}#
                           #{rest\ 2521}#
                           #{kw\ 2522}#
                           #{body\ 2523}#
                           #{vars\ 2524}#
                           #{r*\ 2525}#
                           #{w*\ 2526}#
                           #{aok\ 2527}#
                           #{out\ 2528}#
                           #{inits\ 2529}#)
                    (if (pair? #{kw\ 2522}#)
                      (let ((#{tmp\ 2543}# (car #{kw\ 2522}#)))
                        (let ((#{tmp\ 2544}#
                                ($sc-dispatch
                                  #{tmp\ 2543}#
                                  '(any any any))))
                          (if #{tmp\ 2544}#
                            (@apply
                              (lambda (#{k\ 2548}# #{id\ 2549}# #{i\ 2550}#)
                                (begin
                                  (let ((#{v\ 2553}#
                                          (#{gen-var\ 495}# #{id\ 2549}#)))
                                    (begin
                                      (let ((#{l\ 2555}#
                                              (#{gen-labels\ 398}#
                                                (list #{v\ 2553}#))))
                                        (begin
                                          (let ((#{r**\ 2557}#
                                                  (#{extend-var-env\ 370}#
                                                    #{l\ 2555}#
                                                    (list #{v\ 2553}#)
                                                    #{r*\ 2525}#)))
                                            (begin
                                              (let ((#{w**\ 2559}#
                                                      (#{make-binding-wrap\ 427}#
                                                        (list #{id\ 2549}#)
                                                        #{l\ 2555}#
                                                        #{w*\ 2526}#)))
                                                (#{expand-kw\ 2449}#
                                                  #{req\ 2519}#
                                                  #{opt\ 2520}#
                                                  #{rest\ 2521}#
                                                  (cdr #{kw\ 2522}#)
                                                  #{body\ 2523}#
                                                  (cons #{v\ 2553}#
                                                        #{vars\ 2524}#)
                                                  #{r**\ 2557}#
                                                  #{w**\ 2559}#
                                                  #{aok\ 2527}#
                                                  (cons (list (syntax->datum
                                                                #{k\ 2548}#)
                                                              (syntax->datum
                                                                #{id\ 2549}#)
                                                              #{v\ 2553}#)
                                                        #{out\ 2528}#)
                                                  (cons (#{chi\ 465}#
                                                          #{i\ 2550}#
                                                          #{r*\ 2525}#
                                                          #{w*\ 2526}#
                                                          #{mod\ 2434}#)
                                                        #{inits\ 2529}#)))))))))))
                              #{tmp\ 2544}#)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              #{tmp\ 2543}#))))
                      (#{expand-body\ 2451}#
                        #{req\ 2519}#
                        #{opt\ 2520}#
                        #{rest\ 2521}#
                        (if (begin
                              (let ((#{t\ 2563}# #{aok\ 2527}#))
                                (if #{t\ 2563}#
                                  #{t\ 2563}#
                                  (pair? #{out\ 2528}#))))
                          (cons #{aok\ 2527}# (reverse #{out\ 2528}#))
                          #f)
                        #{body\ 2523}#
                        (reverse #{vars\ 2524}#)
                        #{r*\ 2525}#
                        #{w*\ 2526}#
                        (reverse #{inits\ 2529}#)
                        '()))))
                (#{expand-body\ 2451}#
                  (lambda (#{req\ 2565}#
                           #{opt\ 2566}#
                           #{rest\ 2567}#
                           #{kw\ 2568}#
                           #{body\ 2569}#
                           #{vars\ 2570}#
                           #{r*\ 2571}#
                           #{w*\ 2572}#
                           #{inits\ 2573}#
                           #{meta\ 2574}#)
                    (let ((#{tmp\ 2585}# #{body\ 2569}#))
                      (let ((#{tmp\ 2586}#
                              ($sc-dispatch
                                #{tmp\ 2585}#
                                '(any any . each-any))))
                        (if (if #{tmp\ 2586}#
                              (@apply
                                (lambda (#{docstring\ 2590}#
                                         #{e1\ 2591}#
                                         #{e2\ 2592}#)
                                  (string?
                                    (syntax->datum #{docstring\ 2590}#)))
                                #{tmp\ 2586}#)
                              #f)
                          (@apply
                            (lambda (#{docstring\ 2596}#
                                     #{e1\ 2597}#
                                     #{e2\ 2598}#)
                              (#{expand-body\ 2451}#
                                #{req\ 2565}#
                                #{opt\ 2566}#
                                #{rest\ 2567}#
                                #{kw\ 2568}#
                                (cons #{e1\ 2597}# #{e2\ 2598}#)
                                #{vars\ 2570}#
                                #{r*\ 2571}#
                                #{w*\ 2572}#
                                #{inits\ 2573}#
                                (append
                                  #{meta\ 2574}#
                                  (list (cons 'documentation
                                              (syntax->datum
                                                #{docstring\ 2596}#))))))
                            #{tmp\ 2586}#)
                          (let ((#{tmp\ 2601}#
                                  ($sc-dispatch
                                    #{tmp\ 2585}#
                                    '(#(vector #(each (any . any)))
                                      any
                                      .
                                      each-any))))
                            (if #{tmp\ 2601}#
                              (@apply
                                (lambda (#{k\ 2606}#
                                         #{v\ 2607}#
                                         #{e1\ 2608}#
                                         #{e2\ 2609}#)
                                  (#{expand-body\ 2451}#
                                    #{req\ 2565}#
                                    #{opt\ 2566}#
                                    #{rest\ 2567}#
                                    #{kw\ 2568}#
                                    (cons #{e1\ 2608}# #{e2\ 2609}#)
                                    #{vars\ 2570}#
                                    #{r*\ 2571}#
                                    #{w*\ 2572}#
                                    #{inits\ 2573}#
                                    (append
                                      #{meta\ 2574}#
                                      (syntax->datum
                                        (map cons #{k\ 2606}# #{v\ 2607}#)))))
                                #{tmp\ 2601}#)
                              (let ((#{tmp\ 2613}#
                                      ($sc-dispatch
                                        #{tmp\ 2585}#
                                        '(any . each-any))))
                                (if #{tmp\ 2613}#
                                  (@apply
                                    (lambda (#{e1\ 2616}# #{e2\ 2617}#)
                                      (values
                                        #{meta\ 2574}#
                                        #{req\ 2565}#
                                        #{opt\ 2566}#
                                        #{rest\ 2567}#
                                        #{kw\ 2568}#
                                        #{inits\ 2573}#
                                        #{vars\ 2570}#
                                        (#{chi-body\ 473}#
                                          (cons #{e1\ 2616}# #{e2\ 2617}#)
                                          (#{source-wrap\ 451}#
                                            #{e\ 2430}#
                                            #{w\ 2432}#
                                            #{s\ 2433}#
                                            #{mod\ 2434}#)
                                          #{r*\ 2571}#
                                          #{w*\ 2572}#
                                          #{mod\ 2434}#)))
                                    #{tmp\ 2613}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{tmp\ 2585}#)))))))))))
               (begin
                 (let ((#{tmp\ 2619}# #{clauses\ 2436}#))
                   (let ((#{tmp\ 2620}#
                           ($sc-dispatch #{tmp\ 2619}# (quote ()))))
                     (if #{tmp\ 2620}#
                       (@apply
                         (lambda () (values (quote ()) #f))
                         #{tmp\ 2620}#)
                       (let ((#{tmp\ 2621}#
                               ($sc-dispatch
                                 #{tmp\ 2619}#
                                 '((any any . each-any)
                                   .
                                   #(each (any any . each-any))))))
                         (if #{tmp\ 2621}#
                           (@apply
                             (lambda (#{args\ 2628}#
                                      #{e1\ 2629}#
                                      #{e2\ 2630}#
                                      #{args*\ 2631}#
                                      #{e1*\ 2632}#
                                      #{e2*\ 2633}#)
                               (call-with-values
                                 (lambda ()
                                   (#{get-formals\ 2435}# #{args\ 2628}#))
                                 (lambda (#{req\ 2634}#
                                          #{opt\ 2635}#
                                          #{rest\ 2636}#
                                          #{kw\ 2637}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{expand-req\ 2445}#
                                         #{req\ 2634}#
                                         #{opt\ 2635}#
                                         #{rest\ 2636}#
                                         #{kw\ 2637}#
                                         (cons #{e1\ 2629}# #{e2\ 2630}#)))
                                     (lambda (#{meta\ 2643}#
                                              #{req\ 2644}#
                                              #{opt\ 2645}#
                                              #{rest\ 2646}#
                                              #{kw\ 2647}#
                                              #{inits\ 2648}#
                                              #{vars\ 2649}#
                                              #{body\ 2650}#)
                                       (call-with-values
                                         (lambda ()
                                           (#{chi-lambda-case\ 491}#
                                             #{e\ 2430}#
                                             #{r\ 2431}#
                                             #{w\ 2432}#
                                             #{s\ 2433}#
                                             #{mod\ 2434}#
                                             #{get-formals\ 2435}#
                                             (map (lambda (#{tmp\ 2661}#
                                                           #{tmp\ 2660}#
                                                           #{tmp\ 2659}#)
                                                    (cons #{tmp\ 2659}#
                                                          (cons #{tmp\ 2660}#
                                                                #{tmp\ 2661}#)))
                                                  #{e2*\ 2633}#
                                                  #{e1*\ 2632}#
                                                  #{args*\ 2631}#)))
                                         (lambda (#{meta*\ 2663}#
                                                  #{else*\ 2664}#)
                                           (values
                                             (append
                                               #{meta\ 2643}#
                                               #{meta*\ 2663}#)
                                             (#{build-lambda-case\ 326}#
                                               #{s\ 2433}#
                                               #{req\ 2644}#
                                               #{opt\ 2645}#
                                               #{rest\ 2646}#
                                               #{kw\ 2647}#
                                               #{inits\ 2648}#
                                               #{vars\ 2649}#
                                               #{body\ 2650}#
                                               #{else*\ 2664}#)))))))))
                             #{tmp\ 2621}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{tmp\ 2619}#))))))))))
         (#{strip\ 493}#
           (lambda (#{x\ 2667}# #{w\ 2668}#)
             (if (memq 'top
                       (#{wrap-marks\ 387}# #{w\ 2668}#))
               #{x\ 2667}#
               (letrec*
                 ((#{f\ 2674}#
                    (lambda (#{x\ 2675}#)
                      (if (#{syntax-object?\ 344}# #{x\ 2675}#)
                        (#{strip\ 493}#
                          (#{syntax-object-expression\ 346}# #{x\ 2675}#)
                          (#{syntax-object-wrap\ 348}# #{x\ 2675}#))
                        (if (pair? #{x\ 2675}#)
                          (begin
                            (let ((#{a\ 2682}# (#{f\ 2674}# (car #{x\ 2675}#)))
                                  (#{d\ 2683}#
                                    (#{f\ 2674}# (cdr #{x\ 2675}#))))
                              (if (if (eq? #{a\ 2682}# (car #{x\ 2675}#))
                                    (eq? #{d\ 2683}# (cdr #{x\ 2675}#))
                                    #f)
                                #{x\ 2675}#
                                (cons #{a\ 2682}# #{d\ 2683}#))))
                          (if (vector? #{x\ 2675}#)
                            (begin
                              (let ((#{old\ 2689}# (vector->list #{x\ 2675}#)))
                                (begin
                                  (let ((#{new\ 2691}#
                                          (map #{f\ 2674}# #{old\ 2689}#)))
                                    (if (#{and-map*\ 36}#
                                          eq?
                                          #{old\ 2689}#
                                          #{new\ 2691}#)
                                      #{x\ 2675}#
                                      (list->vector #{new\ 2691}#))))))
                            #{x\ 2675}#))))))
                 (begin (#{f\ 2674}# #{x\ 2667}#))))))
         (#{gen-var\ 495}#
           (lambda (#{id\ 2693}#)
             (begin
               (let ((#{id\ 2696}#
                       (if (#{syntax-object?\ 344}# #{id\ 2693}#)
                         (#{syntax-object-expression\ 346}# #{id\ 2693}#)
                         #{id\ 2693}#)))
                 (gensym
                   (string-append (symbol->string #{id\ 2696}#) " "))))))
         (#{lambda-var-list\ 497}#
           (lambda (#{vars\ 2698}#)
             (letrec*
               ((#{lvl\ 2704}#
                  (lambda (#{vars\ 2705}# #{ls\ 2706}# #{w\ 2707}#)
                    (if (pair? #{vars\ 2705}#)
                      (#{lvl\ 2704}#
                        (cdr #{vars\ 2705}#)
                        (cons (#{wrap\ 449}#
                                (car #{vars\ 2705}#)
                                #{w\ 2707}#
                                #f)
                              #{ls\ 2706}#)
                        #{w\ 2707}#)
                      (if (#{id?\ 380}# #{vars\ 2705}#)
                        (cons (#{wrap\ 449}# #{vars\ 2705}# #{w\ 2707}# #f)
                              #{ls\ 2706}#)
                        (if (null? #{vars\ 2705}#)
                          #{ls\ 2706}#
                          (if (#{syntax-object?\ 344}# #{vars\ 2705}#)
                            (#{lvl\ 2704}#
                              (#{syntax-object-expression\ 346}#
                                #{vars\ 2705}#)
                              #{ls\ 2706}#
                              (#{join-wraps\ 431}#
                                #{w\ 2707}#
                                (#{syntax-object-wrap\ 348}# #{vars\ 2705}#)))
                            (cons #{vars\ 2705}# #{ls\ 2706}#))))))))
               (begin
                 (#{lvl\ 2704}#
                   #{vars\ 2698}#
                   '()
                   '(())))))))
        (begin
          (set! #{make-primitive-ref\ 242}#
            (lambda (#{src\ 706}# #{name\ 707}#)
              (make-struct/no-tail
                (vector-ref %expanded-vtables 2)
                #{src\ 706}#
                #{name\ 707}#)))
          (set! #{fx+\ 281}# +)
          (set! #{fx-\ 283}# -)
          (set! #{fx=\ 285}# =)
          (set! #{fx<\ 287}# <)
          (set! #{set-syntax-object-expression!\ 352}#
            (lambda (#{x\ 1084}# #{update\ 1085}#)
              (vector-set! #{x\ 1084}# 1 #{update\ 1085}#)))
          (set! #{set-syntax-object-wrap!\ 354}#
            (lambda (#{x\ 1088}# #{update\ 1089}#)
              (vector-set! #{x\ 1088}# 2 #{update\ 1089}#)))
          (set! #{set-syntax-object-module!\ 356}#
            (lambda (#{x\ 1092}# #{update\ 1093}#)
              (vector-set! #{x\ 1092}# 3 #{update\ 1093}#)))
          (set! #{binding-type\ 363}# car)
          (set! #{binding-value\ 365}# cdr)
          (set! #{make-wrap\ 385}# cons)
          (set! #{wrap-marks\ 387}# car)
          (set! #{wrap-subst\ 389}# cdr)
          (set! #{ribcage?\ 403}#
            (lambda (#{x\ 1170}#)
              (if (vector? #{x\ 1170}#)
                (if (= (vector-length #{x\ 1170}#) 4)
                  (eq? (vector-ref #{x\ 1170}# 0) (quote ribcage))
                  #f)
                #f)))
          (begin
            (#{global-extend\ 376}#
              'local-syntax
              'letrec-syntax
              #t)
            (#{global-extend\ 376}#
              'local-syntax
              'let-syntax
              #f)
            (#{global-extend\ 376}#
              'core
              'fluid-let-syntax
              (lambda (#{e\ 2718}#
                       #{r\ 2719}#
                       #{w\ 2720}#
                       #{s\ 2721}#
                       #{mod\ 2722}#)
                (let ((#{tmp\ 2728}# #{e\ 2718}#))
                  (let ((#{tmp\ 2729}#
                          ($sc-dispatch
                            #{tmp\ 2728}#
                            '(_ #(each (any any)) any . each-any))))
                    (if (if #{tmp\ 2729}#
                          (@apply
                            (lambda (#{var\ 2734}#
                                     #{val\ 2735}#
                                     #{e1\ 2736}#
                                     #{e2\ 2737}#)
                              (#{valid-bound-ids?\ 443}# #{var\ 2734}#))
                            #{tmp\ 2729}#)
                          #f)
                      (@apply
                        (lambda (#{var\ 2743}#
                                 #{val\ 2744}#
                                 #{e1\ 2745}#
                                 #{e2\ 2746}#)
                          (begin
                            (let ((#{names\ 2748}#
                                    (map (lambda (#{x\ 2749}#)
                                           (#{id-var-name\ 437}#
                                             #{x\ 2749}#
                                             #{w\ 2720}#))
                                         #{var\ 2743}#)))
                              (begin
                                (for-each
                                  (lambda (#{id\ 2752}# #{n\ 2753}#)
                                    (begin
                                      (let ((#{atom-key\ 2758}#
                                              (#{binding-type\ 363}#
                                                (#{lookup\ 374}#
                                                  #{n\ 2753}#
                                                  #{r\ 2719}#
                                                  #{mod\ 2722}#))))
                                        (if (eqv? #{atom-key\ 2758}#
                                                  'displaced-lexical)
                                          (syntax-violation
                                            'fluid-let-syntax
                                            "identifier out of context"
                                            #{e\ 2718}#
                                            (#{source-wrap\ 451}#
                                              #{id\ 2752}#
                                              #{w\ 2720}#
                                              #{s\ 2721}#
                                              #{mod\ 2722}#))))))
                                  #{var\ 2743}#
                                  #{names\ 2748}#)
                                (#{chi-body\ 473}#
                                  (cons #{e1\ 2745}# #{e2\ 2746}#)
                                  (#{source-wrap\ 451}#
                                    #{e\ 2718}#
                                    #{w\ 2720}#
                                    #{s\ 2721}#
                                    #{mod\ 2722}#)
                                  (#{extend-env\ 368}#
                                    #{names\ 2748}#
                                    (begin
                                      (let ((#{trans-r\ 2763}#
                                              (#{macros-only-env\ 372}#
                                                #{r\ 2719}#)))
                                        (map (lambda (#{x\ 2764}#)
                                               (cons 'macro
                                                     (#{eval-local-transformer\ 477}#
                                                       (#{chi\ 465}#
                                                         #{x\ 2764}#
                                                         #{trans-r\ 2763}#
                                                         #{w\ 2720}#
                                                         #{mod\ 2722}#)
                                                       #{mod\ 2722}#)))
                                             #{val\ 2744}#)))
                                    #{r\ 2719}#)
                                  #{w\ 2720}#
                                  #{mod\ 2722}#)))))
                        #{tmp\ 2729}#)
                      (let ((#{_\ 2769}# #{tmp\ 2728}#))
                        (syntax-violation
                          'fluid-let-syntax
                          "bad syntax"
                          (#{source-wrap\ 451}#
                            #{e\ 2718}#
                            #{w\ 2720}#
                            #{s\ 2721}#
                            #{mod\ 2722}#))))))))
            (#{global-extend\ 376}#
              'core
              'quote
              (lambda (#{e\ 2770}#
                       #{r\ 2771}#
                       #{w\ 2772}#
                       #{s\ 2773}#
                       #{mod\ 2774}#)
                (let ((#{tmp\ 2780}# #{e\ 2770}#))
                  (let ((#{tmp\ 2781}#
                          ($sc-dispatch #{tmp\ 2780}# (quote (_ any)))))
                    (if #{tmp\ 2781}#
                      (@apply
                        (lambda (#{e\ 2783}#)
                          (#{build-data\ 330}#
                            #{s\ 2773}#
                            (#{strip\ 493}# #{e\ 2783}# #{w\ 2772}#)))
                        #{tmp\ 2781}#)
                      (let ((#{_\ 2785}# #{tmp\ 2780}#))
                        (syntax-violation
                          'quote
                          "bad syntax"
                          (#{source-wrap\ 451}#
                            #{e\ 2770}#
                            #{w\ 2772}#
                            #{s\ 2773}#
                            #{mod\ 2774}#))))))))
            (#{global-extend\ 376}#
              'core
              'syntax
              (letrec*
                ((#{gen-syntax\ 2787}#
                   (lambda (#{src\ 2802}#
                            #{e\ 2803}#
                            #{r\ 2804}#
                            #{maps\ 2805}#
                            #{ellipsis?\ 2806}#
                            #{mod\ 2807}#)
                     (if (#{id?\ 380}# #{e\ 2803}#)
                       (begin
                         (let ((#{label\ 2815}#
                                 (#{id-var-name\ 437}#
                                   #{e\ 2803}#
                                   '(()))))
                           (begin
                             (let ((#{b\ 2818}#
                                     (#{lookup\ 374}#
                                       #{label\ 2815}#
                                       #{r\ 2804}#
                                       #{mod\ 2807}#)))
                               (if (eq? (#{binding-type\ 363}# #{b\ 2818}#)
                                        'syntax)
                                 (call-with-values
                                   (lambda ()
                                     (begin
                                       (let ((#{var.lev\ 2820}#
                                               (#{binding-value\ 365}#
                                                 #{b\ 2818}#)))
                                         (#{gen-ref\ 2789}#
                                           #{src\ 2802}#
                                           (car #{var.lev\ 2820}#)
                                           (cdr #{var.lev\ 2820}#)
                                           #{maps\ 2805}#))))
                                   (lambda (#{var\ 2821}# #{maps\ 2822}#)
                                     (values
                                       (list (quote ref) #{var\ 2821}#)
                                       #{maps\ 2822}#)))
                                 (if (#{ellipsis?\ 2806}# #{e\ 2803}#)
                                   (syntax-violation
                                     'syntax
                                     "misplaced ellipsis"
                                     #{src\ 2802}#)
                                   (values
                                     (list (quote quote) #{e\ 2803}#)
                                     #{maps\ 2805}#)))))))
                       (let ((#{tmp\ 2827}# #{e\ 2803}#))
                         (let ((#{tmp\ 2828}#
                                 ($sc-dispatch
                                   #{tmp\ 2827}#
                                   '(any any))))
                           (if (if #{tmp\ 2828}#
                                 (@apply
                                   (lambda (#{dots\ 2831}# #{e\ 2832}#)
                                     (#{ellipsis?\ 2806}# #{dots\ 2831}#))
                                   #{tmp\ 2828}#)
                                 #f)
                             (@apply
                               (lambda (#{dots\ 2835}# #{e\ 2836}#)
                                 (#{gen-syntax\ 2787}#
                                   #{src\ 2802}#
                                   #{e\ 2836}#
                                   #{r\ 2804}#
                                   #{maps\ 2805}#
                                   (lambda (#{x\ 2837}#) #f)
                                   #{mod\ 2807}#))
                               #{tmp\ 2828}#)
                             (let ((#{tmp\ 2839}#
                                     ($sc-dispatch
                                       #{tmp\ 2827}#
                                       '(any any . any))))
                               (if (if #{tmp\ 2839}#
                                     (@apply
                                       (lambda (#{x\ 2843}#
                                                #{dots\ 2844}#
                                                #{y\ 2845}#)
                                         (#{ellipsis?\ 2806}# #{dots\ 2844}#))
                                       #{tmp\ 2839}#)
                                     #f)
                                 (@apply
                                   (lambda (#{x\ 2849}#
                                            #{dots\ 2850}#
                                            #{y\ 2851}#)
                                     (letrec*
                                       ((#{f\ 2855}#
                                          (lambda (#{y\ 2856}# #{k\ 2857}#)
                                            (let ((#{tmp\ 2864}# #{y\ 2856}#))
                                              (let ((#{tmp\ 2865}#
                                                      ($sc-dispatch
                                                        #{tmp\ 2864}#
                                                        '(any . any))))
                                                (if (if #{tmp\ 2865}#
                                                      (@apply
                                                        (lambda (#{dots\ 2868}#
                                                                 #{y\ 2869}#)
                                                          (#{ellipsis?\ 2806}#
                                                            #{dots\ 2868}#))
                                                        #{tmp\ 2865}#)
                                                      #f)
                                                  (@apply
                                                    (lambda (#{dots\ 2872}#
                                                             #{y\ 2873}#)
                                                      (#{f\ 2855}#
                                                        #{y\ 2873}#
                                                        (lambda (#{maps\ 2874}#)
                                                          (call-with-values
                                                            (lambda ()
                                                              (#{k\ 2857}#
                                                                (cons '()
                                                                      #{maps\ 2874}#)))
                                                            (lambda (#{x\ 2876}#
                                                                     #{maps\ 2877}#)
                                                              (if (null? (car #{maps\ 2877}#))
                                                                (syntax-violation
                                                                  'syntax
                                                                  "extra ellipsis"
                                                                  #{src\ 2802}#)
                                                                (values
                                                                  (#{gen-mappend\ 2791}#
                                                                    #{x\ 2876}#
                                                                    (car #{maps\ 2877}#))
                                                                  (cdr #{maps\ 2877}#))))))))
                                                    #{tmp\ 2865}#)
                                                  (let ((#{_\ 2881}#
                                                          #{tmp\ 2864}#))
                                                    (call-with-values
                                                      (lambda ()
                                                        (#{gen-syntax\ 2787}#
                                                          #{src\ 2802}#
                                                          #{y\ 2856}#
                                                          #{r\ 2804}#
                                                          #{maps\ 2805}#
                                                          #{ellipsis?\ 2806}#
                                                          #{mod\ 2807}#))
                                                      (lambda (#{y\ 2882}#
                                                               #{maps\ 2883}#)
                                                        (call-with-values
                                                          (lambda ()
                                                            (#{k\ 2857}#
                                                              #{maps\ 2883}#))
                                                          (lambda (#{x\ 2886}#
                                                                   #{maps\ 2887}#)
                                                            (values
                                                              (#{gen-append\ 2797}#
                                                                #{x\ 2886}#
                                                                #{y\ 2882}#)
                                                              #{maps\ 2887}#))))))))))))
                                       (begin
                                         (#{f\ 2855}#
                                           #{y\ 2851}#
                                           (lambda (#{maps\ 2858}#)
                                             (call-with-values
                                               (lambda ()
                                                 (#{gen-syntax\ 2787}#
                                                   #{src\ 2802}#
                                                   #{x\ 2849}#
                                                   #{r\ 2804}#
                                                   (cons '()
                                                         #{maps\ 2858}#)
                                                   #{ellipsis?\ 2806}#
                                                   #{mod\ 2807}#))
                                               (lambda (#{x\ 2860}#
                                                        #{maps\ 2861}#)
                                                 (if (null? (car #{maps\ 2861}#))
                                                   (syntax-violation
                                                     'syntax
                                                     "extra ellipsis"
                                                     #{src\ 2802}#)
                                                   (values
                                                     (#{gen-map\ 2793}#
                                                       #{x\ 2860}#
                                                       (car #{maps\ 2861}#))
                                                     (cdr #{maps\ 2861}#))))))))))
                                   #{tmp\ 2839}#)
                                 (let ((#{tmp\ 2890}#
                                         ($sc-dispatch
                                           #{tmp\ 2827}#
                                           '(any . any))))
                                   (if #{tmp\ 2890}#
                                     (@apply
                                       (lambda (#{x\ 2893}# #{y\ 2894}#)
                                         (call-with-values
                                           (lambda ()
                                             (#{gen-syntax\ 2787}#
                                               #{src\ 2802}#
                                               #{x\ 2893}#
                                               #{r\ 2804}#
                                               #{maps\ 2805}#
                                               #{ellipsis?\ 2806}#
                                               #{mod\ 2807}#))
                                           (lambda (#{x\ 2895}# #{maps\ 2896}#)
                                             (call-with-values
                                               (lambda ()
                                                 (#{gen-syntax\ 2787}#
                                                   #{src\ 2802}#
                                                   #{y\ 2894}#
                                                   #{r\ 2804}#
                                                   #{maps\ 2896}#
                                                   #{ellipsis?\ 2806}#
                                                   #{mod\ 2807}#))
                                               (lambda (#{y\ 2899}#
                                                        #{maps\ 2900}#)
                                                 (values
                                                   (#{gen-cons\ 2795}#
                                                     #{x\ 2895}#
                                                     #{y\ 2899}#)
                                                   #{maps\ 2900}#))))))
                                       #{tmp\ 2890}#)
                                     (let ((#{tmp\ 2903}#
                                             ($sc-dispatch
                                               #{tmp\ 2827}#
                                               '#(vector (any . each-any)))))
                                       (if #{tmp\ 2903}#
                                         (@apply
                                           (lambda (#{e1\ 2906}# #{e2\ 2907}#)
                                             (call-with-values
                                               (lambda ()
                                                 (#{gen-syntax\ 2787}#
                                                   #{src\ 2802}#
                                                   (cons #{e1\ 2906}#
                                                         #{e2\ 2907}#)
                                                   #{r\ 2804}#
                                                   #{maps\ 2805}#
                                                   #{ellipsis?\ 2806}#
                                                   #{mod\ 2807}#))
                                               (lambda (#{e\ 2909}#
                                                        #{maps\ 2910}#)
                                                 (values
                                                   (#{gen-vector\ 2799}#
                                                     #{e\ 2909}#)
                                                   #{maps\ 2910}#))))
                                           #{tmp\ 2903}#)
                                         (let ((#{_\ 2914}# #{tmp\ 2827}#))
                                           (values
                                             (list (quote quote) #{e\ 2803}#)
                                             #{maps\ 2805}#))))))))))))))
                 (#{gen-ref\ 2789}#
                   (lambda (#{src\ 2916}#
                            #{var\ 2917}#
                            #{level\ 2918}#
                            #{maps\ 2919}#)
                     (if (#{fx=\ 285}# #{level\ 2918}# 0)
                       (values #{var\ 2917}# #{maps\ 2919}#)
                       (if (null? #{maps\ 2919}#)
                         (syntax-violation
                           'syntax
                           "missing ellipsis"
                           #{src\ 2916}#)
                         (call-with-values
                           (lambda ()
                             (#{gen-ref\ 2789}#
                               #{src\ 2916}#
                               #{var\ 2917}#
                               (#{fx-\ 283}# #{level\ 2918}# 1)
                               (cdr #{maps\ 2919}#)))
                           (lambda (#{outer-var\ 2924}# #{outer-maps\ 2925}#)
                             (begin
                               (let ((#{b\ 2929}#
                                       (assq #{outer-var\ 2924}#
                                             (car #{maps\ 2919}#))))
                                 (if #{b\ 2929}#
                                   (values (cdr #{b\ 2929}#) #{maps\ 2919}#)
                                   (begin
                                     (let ((#{inner-var\ 2931}#
                                             (#{gen-var\ 495}# (quote tmp))))
                                       (values
                                         #{inner-var\ 2931}#
                                         (cons (cons (cons #{outer-var\ 2924}#
                                                           #{inner-var\ 2931}#)
                                                     (car #{maps\ 2919}#))
                                               #{outer-maps\ 2925}#)))))))))))))
                 (#{gen-mappend\ 2791}#
                   (lambda (#{e\ 2932}# #{map-env\ 2933}#)
                     (list 'apply
                           '(primitive append)
                           (#{gen-map\ 2793}# #{e\ 2932}# #{map-env\ 2933}#))))
                 (#{gen-map\ 2793}#
                   (lambda (#{e\ 2937}# #{map-env\ 2938}#)
                     (begin
                       (let ((#{formals\ 2943}# (map cdr #{map-env\ 2938}#))
                             (#{actuals\ 2944}#
                               (map (lambda (#{x\ 2945}#)
                                      (list (quote ref) (car #{x\ 2945}#)))
                                    #{map-env\ 2938}#)))
                         (if (eq? (car #{e\ 2937}#) (quote ref))
                           (car #{actuals\ 2944}#)
                           (if (and-map
                                 (lambda (#{x\ 2952}#)
                                   (if (eq? (car #{x\ 2952}#) (quote ref))
                                     (memq (car (cdr #{x\ 2952}#))
                                           #{formals\ 2943}#)
                                     #f))
                                 (cdr #{e\ 2937}#))
                             (cons 'map
                                   (cons (list 'primitive
                                               (car #{e\ 2937}#))
                                         (map (begin
                                                (let ((#{r\ 2958}#
                                                        (map cons
                                                             #{formals\ 2943}#
                                                             #{actuals\ 2944}#)))
                                                  (lambda (#{x\ 2959}#)
                                                    (cdr (assq (car (cdr #{x\ 2959}#))
                                                               #{r\ 2958}#)))))
                                              (cdr #{e\ 2937}#))))
                             (cons 'map
                                   (cons (list 'lambda
                                               #{formals\ 2943}#
                                               #{e\ 2937}#)
                                         #{actuals\ 2944}#))))))))
                 (#{gen-cons\ 2795}#
                   (lambda (#{x\ 2963}# #{y\ 2964}#)
                     (begin
                       (let ((#{atom-key\ 2969}# (car #{y\ 2964}#)))
                         (if (eqv? #{atom-key\ 2969}# (quote quote))
                           (if (eq? (car #{x\ 2963}#) (quote quote))
                             (list 'quote
                                   (cons (car (cdr #{x\ 2963}#))
                                         (car (cdr #{y\ 2964}#))))
                             (if (eq? (car (cdr #{y\ 2964}#)) (quote ()))
                               (list (quote list) #{x\ 2963}#)
                               (list (quote cons) #{x\ 2963}# #{y\ 2964}#)))
                           (if (eqv? #{atom-key\ 2969}# (quote list))
                             (cons 'list
                                   (cons #{x\ 2963}# (cdr #{y\ 2964}#)))
                             (list (quote cons) #{x\ 2963}# #{y\ 2964}#)))))))
                 (#{gen-append\ 2797}#
                   (lambda (#{x\ 2978}# #{y\ 2979}#)
                     (if (equal? #{y\ 2979}# (quote (quote ())))
                       #{x\ 2978}#
                       (list (quote append) #{x\ 2978}# #{y\ 2979}#))))
                 (#{gen-vector\ 2799}#
                   (lambda (#{x\ 2983}#)
                     (if (eq? (car #{x\ 2983}#) (quote list))
                       (cons (quote vector) (cdr #{x\ 2983}#))
                       (if (eq? (car #{x\ 2983}#) (quote quote))
                         (list 'quote
                               (list->vector (car (cdr #{x\ 2983}#))))
                         (list (quote list->vector) #{x\ 2983}#)))))
                 (#{regen\ 2801}#
                   (lambda (#{x\ 2993}#)
                     (begin
                       (let ((#{atom-key\ 2997}# (car #{x\ 2993}#)))
                         (if (eqv? #{atom-key\ 2997}# (quote ref))
                           (#{build-lexical-reference\ 310}#
                             'value
                             #f
                             (car (cdr #{x\ 2993}#))
                             (car (cdr #{x\ 2993}#)))
                           (if (eqv? #{atom-key\ 2997}# (quote primitive))
                             (#{build-primref\ 328}#
                               #f
                               (car (cdr #{x\ 2993}#)))
                             (if (eqv? #{atom-key\ 2997}# (quote quote))
                               (#{build-data\ 330}# #f (car (cdr #{x\ 2993}#)))
                               (if (eqv? #{atom-key\ 2997}# (quote lambda))
                                 (if (list? (car (cdr #{x\ 2993}#)))
                                   (#{build-simple-lambda\ 322}#
                                     #f
                                     (car (cdr #{x\ 2993}#))
                                     #f
                                     (car (cdr #{x\ 2993}#))
                                     '()
                                     (#{regen\ 2801}#
                                       (car (cdr (cdr #{x\ 2993}#)))))
                                   (error "how did we get here" #{x\ 2993}#))
                                 (#{build-application\ 304}#
                                   #f
                                   (#{build-primref\ 328}#
                                     #f
                                     (car #{x\ 2993}#))
                                   (map #{regen\ 2801}#
                                        (cdr #{x\ 2993}#))))))))))))
                (begin
                  (lambda (#{e\ 3009}#
                           #{r\ 3010}#
                           #{w\ 3011}#
                           #{s\ 3012}#
                           #{mod\ 3013}#)
                    (begin
                      (let ((#{e\ 3020}#
                              (#{source-wrap\ 451}#
                                #{e\ 3009}#
                                #{w\ 3011}#
                                #{s\ 3012}#
                                #{mod\ 3013}#)))
                        (let ((#{tmp\ 3021}# #{e\ 3020}#))
                          (let ((#{tmp\ 3022}#
                                  ($sc-dispatch
                                    #{tmp\ 3021}#
                                    '(_ any))))
                            (if #{tmp\ 3022}#
                              (@apply
                                (lambda (#{x\ 3024}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{gen-syntax\ 2787}#
                                        #{e\ 3020}#
                                        #{x\ 3024}#
                                        #{r\ 3010}#
                                        '()
                                        #{ellipsis?\ 481}#
                                        #{mod\ 3013}#))
                                    (lambda (#{e\ 3025}# #{maps\ 3026}#)
                                      (#{regen\ 2801}# #{e\ 3025}#))))
                                #{tmp\ 3022}#)
                              (let ((#{_\ 3030}# #{tmp\ 3021}#))
                                (syntax-violation
                                  'syntax
                                  "bad `syntax' form"
                                  #{e\ 3020}#)))))))))))
            (#{global-extend\ 376}#
              'core
              'lambda
              (lambda (#{e\ 3031}#
                       #{r\ 3032}#
                       #{w\ 3033}#
                       #{s\ 3034}#
                       #{mod\ 3035}#)
                (let ((#{tmp\ 3041}# #{e\ 3031}#))
                  (let ((#{tmp\ 3042}#
                          ($sc-dispatch
                            #{tmp\ 3041}#
                            '(_ any any . each-any))))
                    (if #{tmp\ 3042}#
                      (@apply
                        (lambda (#{args\ 3046}# #{e1\ 3047}# #{e2\ 3048}#)
                          (call-with-values
                            (lambda ()
                              (#{lambda-formals\ 485}# #{args\ 3046}#))
                            (lambda (#{req\ 3049}#
                                     #{opt\ 3050}#
                                     #{rest\ 3051}#
                                     #{kw\ 3052}#)
                              (letrec*
                                ((#{lp\ 3060}#
                                   (lambda (#{body\ 3061}# #{meta\ 3062}#)
                                     (let ((#{tmp\ 3064}# #{body\ 3061}#))
                                       (let ((#{tmp\ 3065}#
                                               ($sc-dispatch
                                                 #{tmp\ 3064}#
                                                 '(any any . each-any))))
                                         (if (if #{tmp\ 3065}#
                                               (@apply
                                                 (lambda (#{docstring\ 3069}#
                                                          #{e1\ 3070}#
                                                          #{e2\ 3071}#)
                                                   (string?
                                                     (syntax->datum
                                                       #{docstring\ 3069}#)))
                                                 #{tmp\ 3065}#)
                                               #f)
                                           (@apply
                                             (lambda (#{docstring\ 3075}#
                                                      #{e1\ 3076}#
                                                      #{e2\ 3077}#)
                                               (#{lp\ 3060}#
                                                 (cons #{e1\ 3076}#
                                                       #{e2\ 3077}#)
                                                 (append
                                                   #{meta\ 3062}#
                                                   (list (cons 'documentation
                                                               (syntax->datum
                                                                 #{docstring\ 3075}#))))))
                                             #{tmp\ 3065}#)
                                           (let ((#{tmp\ 3080}#
                                                   ($sc-dispatch
                                                     #{tmp\ 3064}#
                                                     '(#(vector
                                                         #(each (any . any)))
                                                       any
                                                       .
                                                       each-any))))
                                             (if #{tmp\ 3080}#
                                               (@apply
                                                 (lambda (#{k\ 3085}#
                                                          #{v\ 3086}#
                                                          #{e1\ 3087}#
                                                          #{e2\ 3088}#)
                                                   (#{lp\ 3060}#
                                                     (cons #{e1\ 3087}#
                                                           #{e2\ 3088}#)
                                                     (append
                                                       #{meta\ 3062}#
                                                       (syntax->datum
                                                         (map cons
                                                              #{k\ 3085}#
                                                              #{v\ 3086}#)))))
                                                 #{tmp\ 3080}#)
                                               (let ((#{_\ 3093}#
                                                       #{tmp\ 3064}#))
                                                 (#{chi-simple-lambda\ 487}#
                                                   #{e\ 3031}#
                                                   #{r\ 3032}#
                                                   #{w\ 3033}#
                                                   #{s\ 3034}#
                                                   #{mod\ 3035}#
                                                   #{req\ 3049}#
                                                   #{rest\ 3051}#
                                                   #{meta\ 3062}#
                                                   #{body\ 3061}#))))))))))
                                (begin
                                  (#{lp\ 3060}#
                                    (cons #{e1\ 3047}# #{e2\ 3048}#)
                                    '()))))))
                        #{tmp\ 3042}#)
                      (let ((#{_\ 3095}# #{tmp\ 3041}#))
                        (syntax-violation
                          'lambda
                          "bad lambda"
                          #{e\ 3031}#)))))))
            (#{global-extend\ 376}#
              'core
              'lambda*
              (lambda (#{e\ 3096}#
                       #{r\ 3097}#
                       #{w\ 3098}#
                       #{s\ 3099}#
                       #{mod\ 3100}#)
                (let ((#{tmp\ 3106}# #{e\ 3096}#))
                  (let ((#{tmp\ 3107}#
                          ($sc-dispatch
                            #{tmp\ 3106}#
                            '(_ any any . each-any))))
                    (if #{tmp\ 3107}#
                      (@apply
                        (lambda (#{args\ 3111}# #{e1\ 3112}# #{e2\ 3113}#)
                          (call-with-values
                            (lambda ()
                              (#{chi-lambda-case\ 491}#
                                #{e\ 3096}#
                                #{r\ 3097}#
                                #{w\ 3098}#
                                #{s\ 3099}#
                                #{mod\ 3100}#
                                #{lambda*-formals\ 489}#
                                (list (cons #{args\ 3111}#
                                            (cons #{e1\ 3112}#
                                                  #{e2\ 3113}#)))))
                            (lambda (#{meta\ 3115}# #{lcase\ 3116}#)
                              (#{build-case-lambda\ 324}#
                                #{s\ 3099}#
                                #{meta\ 3115}#
                                #{lcase\ 3116}#))))
                        #{tmp\ 3107}#)
                      (let ((#{_\ 3120}# #{tmp\ 3106}#))
                        (syntax-violation
                          'lambda
                          "bad lambda*"
                          #{e\ 3096}#)))))))
            (#{global-extend\ 376}#
              'core
              'case-lambda
              (lambda (#{e\ 3121}#
                       #{r\ 3122}#
                       #{w\ 3123}#
                       #{s\ 3124}#
                       #{mod\ 3125}#)
                (let ((#{tmp\ 3131}# #{e\ 3121}#))
                  (let ((#{tmp\ 3132}#
                          ($sc-dispatch
                            #{tmp\ 3131}#
                            '(_ (any any . each-any)
                                .
                                #(each (any any . each-any))))))
                    (if #{tmp\ 3132}#
                      (@apply
                        (lambda (#{args\ 3139}#
                                 #{e1\ 3140}#
                                 #{e2\ 3141}#
                                 #{args*\ 3142}#
                                 #{e1*\ 3143}#
                                 #{e2*\ 3144}#)
                          (call-with-values
                            (lambda ()
                              (#{chi-lambda-case\ 491}#
                                #{e\ 3121}#
                                #{r\ 3122}#
                                #{w\ 3123}#
                                #{s\ 3124}#
                                #{mod\ 3125}#
                                #{lambda-formals\ 485}#
                                (cons (cons #{args\ 3139}#
                                            (cons #{e1\ 3140}# #{e2\ 3141}#))
                                      (map (lambda (#{tmp\ 3148}#
                                                    #{tmp\ 3147}#
                                                    #{tmp\ 3146}#)
                                             (cons #{tmp\ 3146}#
                                                   (cons #{tmp\ 3147}#
                                                         #{tmp\ 3148}#)))
                                           #{e2*\ 3144}#
                                           #{e1*\ 3143}#
                                           #{args*\ 3142}#))))
                            (lambda (#{meta\ 3150}# #{lcase\ 3151}#)
                              (#{build-case-lambda\ 324}#
                                #{s\ 3124}#
                                #{meta\ 3150}#
                                #{lcase\ 3151}#))))
                        #{tmp\ 3132}#)
                      (let ((#{_\ 3155}# #{tmp\ 3131}#))
                        (syntax-violation
                          'case-lambda
                          "bad case-lambda"
                          #{e\ 3121}#)))))))
            (#{global-extend\ 376}#
              'core
              'case-lambda*
              (lambda (#{e\ 3156}#
                       #{r\ 3157}#
                       #{w\ 3158}#
                       #{s\ 3159}#
                       #{mod\ 3160}#)
                (let ((#{tmp\ 3166}# #{e\ 3156}#))
                  (let ((#{tmp\ 3167}#
                          ($sc-dispatch
                            #{tmp\ 3166}#
                            '(_ (any any . each-any)
                                .
                                #(each (any any . each-any))))))
                    (if #{tmp\ 3167}#
                      (@apply
                        (lambda (#{args\ 3174}#
                                 #{e1\ 3175}#
                                 #{e2\ 3176}#
                                 #{args*\ 3177}#
                                 #{e1*\ 3178}#
                                 #{e2*\ 3179}#)
                          (call-with-values
                            (lambda ()
                              (#{chi-lambda-case\ 491}#
                                #{e\ 3156}#
                                #{r\ 3157}#
                                #{w\ 3158}#
                                #{s\ 3159}#
                                #{mod\ 3160}#
                                #{lambda*-formals\ 489}#
                                (cons (cons #{args\ 3174}#
                                            (cons #{e1\ 3175}# #{e2\ 3176}#))
                                      (map (lambda (#{tmp\ 3183}#
                                                    #{tmp\ 3182}#
                                                    #{tmp\ 3181}#)
                                             (cons #{tmp\ 3181}#
                                                   (cons #{tmp\ 3182}#
                                                         #{tmp\ 3183}#)))
                                           #{e2*\ 3179}#
                                           #{e1*\ 3178}#
                                           #{args*\ 3177}#))))
                            (lambda (#{meta\ 3185}# #{lcase\ 3186}#)
                              (#{build-case-lambda\ 324}#
                                #{s\ 3159}#
                                #{meta\ 3185}#
                                #{lcase\ 3186}#))))
                        #{tmp\ 3167}#)
                      (let ((#{_\ 3190}# #{tmp\ 3166}#))
                        (syntax-violation
                          'case-lambda
                          "bad case-lambda*"
                          #{e\ 3156}#)))))))
            (#{global-extend\ 376}#
              'core
              'let
              (letrec*
                ((#{chi-let\ 3192}#
                   (lambda (#{e\ 3193}#
                            #{r\ 3194}#
                            #{w\ 3195}#
                            #{s\ 3196}#
                            #{mod\ 3197}#
                            #{constructor\ 3198}#
                            #{ids\ 3199}#
                            #{vals\ 3200}#
                            #{exps\ 3201}#)
                     (if (not (#{valid-bound-ids?\ 443}# #{ids\ 3199}#))
                       (syntax-violation
                         'let
                         "duplicate bound variable"
                         #{e\ 3193}#)
                       (begin
                         (let ((#{labels\ 3213}#
                                 (#{gen-labels\ 398}# #{ids\ 3199}#))
                               (#{new-vars\ 3214}#
                                 (map #{gen-var\ 495}# #{ids\ 3199}#)))
                           (begin
                             (let ((#{nw\ 3217}#
                                     (#{make-binding-wrap\ 427}#
                                       #{ids\ 3199}#
                                       #{labels\ 3213}#
                                       #{w\ 3195}#))
                                   (#{nr\ 3218}#
                                     (#{extend-var-env\ 370}#
                                       #{labels\ 3213}#
                                       #{new-vars\ 3214}#
                                       #{r\ 3194}#)))
                               (#{constructor\ 3198}#
                                 #{s\ 3196}#
                                 (map syntax->datum #{ids\ 3199}#)
                                 #{new-vars\ 3214}#
                                 (map (lambda (#{x\ 3219}#)
                                        (#{chi\ 465}#
                                          #{x\ 3219}#
                                          #{r\ 3194}#
                                          #{w\ 3195}#
                                          #{mod\ 3197}#))
                                      #{vals\ 3200}#)
                                 (#{chi-body\ 473}#
                                   #{exps\ 3201}#
                                   (#{source-wrap\ 451}#
                                     #{e\ 3193}#
                                     #{nw\ 3217}#
                                     #{s\ 3196}#
                                     #{mod\ 3197}#)
                                   #{nr\ 3218}#
                                   #{nw\ 3217}#
                                   #{mod\ 3197}#))))))))))
                (begin
                  (lambda (#{e\ 3221}#
                           #{r\ 3222}#
                           #{w\ 3223}#
                           #{s\ 3224}#
                           #{mod\ 3225}#)
                    (let ((#{tmp\ 3231}# #{e\ 3221}#))
                      (let ((#{tmp\ 3232}#
                              ($sc-dispatch
                                #{tmp\ 3231}#
                                '(_ #(each (any any)) any . each-any))))
                        (if (if #{tmp\ 3232}#
                              (@apply
                                (lambda (#{id\ 3237}#
                                         #{val\ 3238}#
                                         #{e1\ 3239}#
                                         #{e2\ 3240}#)
                                  (and-map #{id?\ 380}# #{id\ 3237}#))
                                #{tmp\ 3232}#)
                              #f)
                          (@apply
                            (lambda (#{id\ 3246}#
                                     #{val\ 3247}#
                                     #{e1\ 3248}#
                                     #{e2\ 3249}#)
                              (#{chi-let\ 3192}#
                                #{e\ 3221}#
                                #{r\ 3222}#
                                #{w\ 3223}#
                                #{s\ 3224}#
                                #{mod\ 3225}#
                                #{build-let\ 334}#
                                #{id\ 3246}#
                                #{val\ 3247}#
                                (cons #{e1\ 3248}# #{e2\ 3249}#)))
                            #{tmp\ 3232}#)
                          (let ((#{tmp\ 3253}#
                                  ($sc-dispatch
                                    #{tmp\ 3231}#
                                    '(_ any
                                        #(each (any any))
                                        any
                                        .
                                        each-any))))
                            (if (if #{tmp\ 3253}#
                                  (@apply
                                    (lambda (#{f\ 3259}#
                                             #{id\ 3260}#
                                             #{val\ 3261}#
                                             #{e1\ 3262}#
                                             #{e2\ 3263}#)
                                      (if (#{id?\ 380}# #{f\ 3259}#)
                                        (and-map #{id?\ 380}# #{id\ 3260}#)
                                        #f))
                                    #{tmp\ 3253}#)
                                  #f)
                              (@apply
                                (lambda (#{f\ 3272}#
                                         #{id\ 3273}#
                                         #{val\ 3274}#
                                         #{e1\ 3275}#
                                         #{e2\ 3276}#)
                                  (#{chi-let\ 3192}#
                                    #{e\ 3221}#
                                    #{r\ 3222}#
                                    #{w\ 3223}#
                                    #{s\ 3224}#
                                    #{mod\ 3225}#
                                    #{build-named-let\ 336}#
                                    (cons #{f\ 3272}# #{id\ 3273}#)
                                    #{val\ 3274}#
                                    (cons #{e1\ 3275}# #{e2\ 3276}#)))
                                #{tmp\ 3253}#)
                              (let ((#{_\ 3281}# #{tmp\ 3231}#))
                                (syntax-violation
                                  'let
                                  "bad let"
                                  (#{source-wrap\ 451}#
                                    #{e\ 3221}#
                                    #{w\ 3223}#
                                    #{s\ 3224}#
                                    #{mod\ 3225}#))))))))))))
            (#{global-extend\ 376}#
              'core
              'letrec
              (lambda (#{e\ 3282}#
                       #{r\ 3283}#
                       #{w\ 3284}#
                       #{s\ 3285}#
                       #{mod\ 3286}#)
                (let ((#{tmp\ 3292}# #{e\ 3282}#))
                  (let ((#{tmp\ 3293}#
                          ($sc-dispatch
                            #{tmp\ 3292}#
                            '(_ #(each (any any)) any . each-any))))
                    (if (if #{tmp\ 3293}#
                          (@apply
                            (lambda (#{id\ 3298}#
                                     #{val\ 3299}#
                                     #{e1\ 3300}#
                                     #{e2\ 3301}#)
                              (and-map #{id?\ 380}# #{id\ 3298}#))
                            #{tmp\ 3293}#)
                          #f)
                      (@apply
                        (lambda (#{id\ 3307}#
                                 #{val\ 3308}#
                                 #{e1\ 3309}#
                                 #{e2\ 3310}#)
                          (begin
                            (let ((#{ids\ 3312}# #{id\ 3307}#))
                              (if (not (#{valid-bound-ids?\ 443}#
                                         #{ids\ 3312}#))
                                (syntax-violation
                                  'letrec
                                  "duplicate bound variable"
                                  #{e\ 3282}#)
                                (begin
                                  (let ((#{labels\ 3316}#
                                          (#{gen-labels\ 398}# #{ids\ 3312}#))
                                        (#{new-vars\ 3317}#
                                          (map #{gen-var\ 495}#
                                               #{ids\ 3312}#)))
                                    (begin
                                      (let ((#{w\ 3320}#
                                              (#{make-binding-wrap\ 427}#
                                                #{ids\ 3312}#
                                                #{labels\ 3316}#
                                                #{w\ 3284}#))
                                            (#{r\ 3321}#
                                              (#{extend-var-env\ 370}#
                                                #{labels\ 3316}#
                                                #{new-vars\ 3317}#
                                                #{r\ 3283}#)))
                                        (#{build-letrec\ 338}#
                                          #{s\ 3285}#
                                          #f
                                          (map syntax->datum #{ids\ 3312}#)
                                          #{new-vars\ 3317}#
                                          (map (lambda (#{x\ 3322}#)
                                                 (#{chi\ 465}#
                                                   #{x\ 3322}#
                                                   #{r\ 3321}#
                                                   #{w\ 3320}#
                                                   #{mod\ 3286}#))
                                               #{val\ 3308}#)
                                          (#{chi-body\ 473}#
                                            (cons #{e1\ 3309}# #{e2\ 3310}#)
                                            (#{source-wrap\ 451}#
                                              #{e\ 3282}#
                                              #{w\ 3320}#
                                              #{s\ 3285}#
                                              #{mod\ 3286}#)
                                            #{r\ 3321}#
                                            #{w\ 3320}#
                                            #{mod\ 3286}#))))))))))
                        #{tmp\ 3293}#)
                      (let ((#{_\ 3327}# #{tmp\ 3292}#))
                        (syntax-violation
                          'letrec
                          "bad letrec"
                          (#{source-wrap\ 451}#
                            #{e\ 3282}#
                            #{w\ 3284}#
                            #{s\ 3285}#
                            #{mod\ 3286}#))))))))
            (#{global-extend\ 376}#
              'core
              'letrec*
              (lambda (#{e\ 3328}#
                       #{r\ 3329}#
                       #{w\ 3330}#
                       #{s\ 3331}#
                       #{mod\ 3332}#)
                (let ((#{tmp\ 3338}# #{e\ 3328}#))
                  (let ((#{tmp\ 3339}#
                          ($sc-dispatch
                            #{tmp\ 3338}#
                            '(_ #(each (any any)) any . each-any))))
                    (if (if #{tmp\ 3339}#
                          (@apply
                            (lambda (#{id\ 3344}#
                                     #{val\ 3345}#
                                     #{e1\ 3346}#
                                     #{e2\ 3347}#)
                              (and-map #{id?\ 380}# #{id\ 3344}#))
                            #{tmp\ 3339}#)
                          #f)
                      (@apply
                        (lambda (#{id\ 3353}#
                                 #{val\ 3354}#
                                 #{e1\ 3355}#
                                 #{e2\ 3356}#)
                          (begin
                            (let ((#{ids\ 3358}# #{id\ 3353}#))
                              (if (not (#{valid-bound-ids?\ 443}#
                                         #{ids\ 3358}#))
                                (syntax-violation
                                  'letrec*
                                  "duplicate bound variable"
                                  #{e\ 3328}#)
                                (begin
                                  (let ((#{labels\ 3362}#
                                          (#{gen-labels\ 398}# #{ids\ 3358}#))
                                        (#{new-vars\ 3363}#
                                          (map #{gen-var\ 495}#
                                               #{ids\ 3358}#)))
                                    (begin
                                      (let ((#{w\ 3366}#
                                              (#{make-binding-wrap\ 427}#
                                                #{ids\ 3358}#
                                                #{labels\ 3362}#
                                                #{w\ 3330}#))
                                            (#{r\ 3367}#
                                              (#{extend-var-env\ 370}#
                                                #{labels\ 3362}#
                                                #{new-vars\ 3363}#
                                                #{r\ 3329}#)))
                                        (#{build-letrec\ 338}#
                                          #{s\ 3331}#
                                          #t
                                          (map syntax->datum #{ids\ 3358}#)
                                          #{new-vars\ 3363}#
                                          (map (lambda (#{x\ 3368}#)
                                                 (#{chi\ 465}#
                                                   #{x\ 3368}#
                                                   #{r\ 3367}#
                                                   #{w\ 3366}#
                                                   #{mod\ 3332}#))
                                               #{val\ 3354}#)
                                          (#{chi-body\ 473}#
                                            (cons #{e1\ 3355}# #{e2\ 3356}#)
                                            (#{source-wrap\ 451}#
                                              #{e\ 3328}#
                                              #{w\ 3366}#
                                              #{s\ 3331}#
                                              #{mod\ 3332}#)
                                            #{r\ 3367}#
                                            #{w\ 3366}#
                                            #{mod\ 3332}#))))))))))
                        #{tmp\ 3339}#)
                      (let ((#{_\ 3373}# #{tmp\ 3338}#))
                        (syntax-violation
                          'letrec*
                          "bad letrec*"
                          (#{source-wrap\ 451}#
                            #{e\ 3328}#
                            #{w\ 3330}#
                            #{s\ 3331}#
                            #{mod\ 3332}#))))))))
            (#{global-extend\ 376}#
              'core
              'set!
              (lambda (#{e\ 3374}#
                       #{r\ 3375}#
                       #{w\ 3376}#
                       #{s\ 3377}#
                       #{mod\ 3378}#)
                (let ((#{tmp\ 3384}# #{e\ 3374}#))
                  (let ((#{tmp\ 3385}#
                          ($sc-dispatch #{tmp\ 3384}# (quote (_ any any)))))
                    (if (if #{tmp\ 3385}#
                          (@apply
                            (lambda (#{id\ 3388}# #{val\ 3389}#)
                              (#{id?\ 380}# #{id\ 3388}#))
                            #{tmp\ 3385}#)
                          #f)
                      (@apply
                        (lambda (#{id\ 3392}# #{val\ 3393}#)
                          (begin
                            (let ((#{n\ 3395}#
                                    (#{id-var-name\ 437}#
                                      #{id\ 3392}#
                                      #{w\ 3376}#)))
                              (begin
                                (let ((#{b\ 3397}#
                                        (#{lookup\ 374}#
                                          #{n\ 3395}#
                                          #{r\ 3375}#
                                          #{mod\ 3378}#)))
                                  (begin
                                    (let ((#{atom-key\ 3400}#
                                            (#{binding-type\ 363}#
                                              #{b\ 3397}#)))
                                      (if (eqv? #{atom-key\ 3400}#
                                                'lexical)
                                        (#{build-lexical-assignment\ 312}#
                                          #{s\ 3377}#
                                          (syntax->datum #{id\ 3392}#)
                                          (#{binding-value\ 365}# #{b\ 3397}#)
                                          (#{chi\ 465}#
                                            #{val\ 3393}#
                                            #{r\ 3375}#
                                            #{w\ 3376}#
                                            #{mod\ 3378}#))
                                        (if (eqv? #{atom-key\ 3400}#
                                                  'global)
                                          (#{build-global-assignment\ 318}#
                                            #{s\ 3377}#
                                            #{n\ 3395}#
                                            (#{chi\ 465}#
                                              #{val\ 3393}#
                                              #{r\ 3375}#
                                              #{w\ 3376}#
                                              #{mod\ 3378}#)
                                            #{mod\ 3378}#)
                                          (if (eqv? #{atom-key\ 3400}#
                                                    'macro)
                                            (begin
                                              (let ((#{p\ 3405}#
                                                      (#{binding-value\ 365}#
                                                        #{b\ 3397}#)))
                                                (if (procedure-property
                                                      #{p\ 3405}#
                                                      'variable-transformer)
                                                  (#{chi\ 465}#
                                                    (#{chi-macro\ 471}#
                                                      #{p\ 3405}#
                                                      #{e\ 3374}#
                                                      #{r\ 3375}#
                                                      #{w\ 3376}#
                                                      #{s\ 3377}#
                                                      #f
                                                      #{mod\ 3378}#)
                                                    #{r\ 3375}#
                                                    #{w\ 3376}#
                                                    #{mod\ 3378}#)
                                                  (syntax-violation
                                                    'set!
                                                    "not a variable transformer"
                                                    (#{wrap\ 449}#
                                                      #{e\ 3374}#
                                                      #{w\ 3376}#
                                                      #{mod\ 3378}#)
                                                    (#{wrap\ 449}#
                                                      #{id\ 3392}#
                                                      #{w\ 3376}#
                                                      #{mod\ 3378}#)))))
                                            (if (eqv? #{atom-key\ 3400}#
                                                      'displaced-lexical)
                                              (syntax-violation
                                                'set!
                                                "identifier out of context"
                                                (#{wrap\ 449}#
                                                  #{id\ 3392}#
                                                  #{w\ 3376}#
                                                  #{mod\ 3378}#))
                                              (syntax-violation
                                                'set!
                                                "bad set!"
                                                (#{source-wrap\ 451}#
                                                  #{e\ 3374}#
                                                  #{w\ 3376}#
                                                  #{s\ 3377}#
                                                  #{mod\ 3378}#)))))))))))))
                        #{tmp\ 3385}#)
                      (let ((#{tmp\ 3408}#
                              ($sc-dispatch
                                #{tmp\ 3384}#
                                '(_ (any . each-any) any))))
                        (if #{tmp\ 3408}#
                          (@apply
                            (lambda (#{head\ 3412}#
                                     #{tail\ 3413}#
                                     #{val\ 3414}#)
                              (call-with-values
                                (lambda ()
                                  (#{syntax-type\ 461}#
                                    #{head\ 3412}#
                                    #{r\ 3375}#
                                    '(())
                                    #f
                                    #f
                                    #{mod\ 3378}#
                                    #t))
                                (lambda (#{type\ 3417}#
                                         #{value\ 3418}#
                                         #{ee\ 3419}#
                                         #{ww\ 3420}#
                                         #{ss\ 3421}#
                                         #{modmod\ 3422}#)
                                  (if (eqv? #{type\ 3417}# (quote module-ref))
                                    (begin
                                      (let ((#{val\ 3431}#
                                              (#{chi\ 465}#
                                                #{val\ 3414}#
                                                #{r\ 3375}#
                                                #{w\ 3376}#
                                                #{mod\ 3378}#)))
                                        (call-with-values
                                          (lambda ()
                                            (#{value\ 3418}#
                                              (cons #{head\ 3412}#
                                                    #{tail\ 3413}#)
                                              #{r\ 3375}#
                                              #{w\ 3376}#))
                                          (lambda (#{e\ 3433}#
                                                   #{r\ 3434}#
                                                   #{w\ 3435}#
                                                   #{s*\ 3436}#
                                                   #{mod\ 3437}#)
                                            (let ((#{tmp\ 3443}# #{e\ 3433}#))
                                              (let ((#{tmp\ 3444}#
                                                      (list #{tmp\ 3443}#)))
                                                (if (if #{tmp\ 3444}#
                                                      (@apply
                                                        (lambda (#{e\ 3446}#)
                                                          (#{id?\ 380}#
                                                            #{e\ 3446}#))
                                                        #{tmp\ 3444}#)
                                                      #f)
                                                  (@apply
                                                    (lambda (#{e\ 3448}#)
                                                      (#{build-global-assignment\ 318}#
                                                        #{s\ 3377}#
                                                        (syntax->datum
                                                          #{e\ 3448}#)
                                                        #{val\ 3431}#
                                                        #{mod\ 3437}#))
                                                    #{tmp\ 3444}#)
                                                  (syntax-violation
                                                    #f
                                                    "source expression failed to match any pattern"
                                                    #{tmp\ 3443}#))))))))
                                    (#{build-application\ 304}#
                                      #{s\ 3377}#
                                      (#{chi\ 465}#
                                        (list '#(syntax-object
                                                 setter
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(type
                                                      value
                                                      ee
                                                      ww
                                                      ss
                                                      modmod)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i3423"
                                                      "i3424"
                                                      "i3425"
                                                      "i3426"
                                                      "i3427"
                                                      "i3428"))
                                                  #(ribcage
                                                    #(head tail val)
                                                    #((top) (top) (top))
                                                    #("i3409" "i3410" "i3411"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e r w s mod)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i3379"
                                                      "i3380"
                                                      "i3381"
                                                      "i3382"
                                                      "i3383"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      underscore?
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      chi-top
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      maybe-name-value!
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i496"
                                                     "i494"
                                                     "i492"
                                                     "i490"
                                                     "i488"
                                                     "i486"
                                                     "i484"
                                                     "i482"
                                                     "i480"
                                                     "i478"
                                                     "i476"
                                                     "i474"
                                                     "i472"
                                                     "i470"
                                                     "i468"
                                                     "i466"
                                                     "i464"
                                                     "i462"
                                                     "i460"
                                                     "i458"
                                                     "i456"
                                                     "i454"
                                                     "i452"
                                                     "i450"
                                                     "i448"
                                                     "i446"
                                                     "i444"
                                                     "i442"
                                                     "i440"
                                                     "i438"
                                                     "i436"
                                                     "i434"
                                                     "i432"
                                                     "i430"
                                                     "i428"
                                                     "i426"
                                                     "i424"
                                                     "i423"
                                                     "i422"
                                                     "i420"
                                                     "i419"
                                                     "i418"
                                                     "i417"
                                                     "i416"
                                                     "i414"
                                                     "i412"
                                                     "i410"
                                                     "i408"
                                                     "i406"
                                                     "i404"
                                                     "i402"
                                                     "i400"
                                                     "i397"
                                                     "i395"
                                                     "i394"
                                                     "i393"
                                                     "i392"
                                                     "i391"
                                                     "i390"
                                                     "i388"
                                                     "i386"
                                                     "i384"
                                                     "i382"
                                                     "i381"
                                                     "i379"
                                                     "i377"
                                                     "i375"
                                                     "i373"
                                                     "i371"
                                                     "i369"
                                                     "i367"
                                                     "i366"
                                                     "i364"
                                                     "i362"
                                                     "i361"
                                                     "i360"
                                                     "i358"
                                                     "i357"
                                                     "i355"
                                                     "i353"
                                                     "i351"
                                                     "i349"
                                                     "i347"
                                                     "i345"
                                                     "i343"
                                                     "i341"
                                                     "i339"
                                                     "i337"
                                                     "i335"
                                                     "i333"
                                                     "i331"
                                                     "i329"
                                                     "i327"
                                                     "i325"
                                                     "i323"
                                                     "i321"
                                                     "i319"
                                                     "i317"
                                                     "i315"
                                                     "i313"
                                                     "i311"
                                                     "i309"
                                                     "i307"
                                                     "i305"
                                                     "i303"
                                                     "i301"
                                                     "i299"
                                                     "i297"
                                                     "i295"
                                                     "i293"
                                                     "i292"
                                                     "i290"
                                                     "i288"
                                                     "i286"
                                                     "i284"
                                                     "i282"
                                                     "i280"
                                                     "i278"
                                                     "i276"
                                                     "i274"
                                                     "i271"
                                                     "i269"
                                                     "i267"
                                                     "i265"
                                                     "i263"
                                                     "i261"
                                                     "i259"
                                                     "i257"
                                                     "i255"
                                                     "i253"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i245"
                                                     "i243"
                                                     "i241"
                                                     "i239"
                                                     "i237"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors
                                                      and-map*)
                                                    ((top) (top) (top) (top))
                                                    ("i39" "i38" "i37" "i35")))
                                                 (hygiene guile))
                                              #{head\ 3412}#)
                                        #{r\ 3375}#
                                        #{w\ 3376}#
                                        #{mod\ 3378}#)
                                      (map (lambda (#{e\ 3450}#)
                                             (#{chi\ 465}#
                                               #{e\ 3450}#
                                               #{r\ 3375}#
                                               #{w\ 3376}#
                                               #{mod\ 3378}#))
                                           (append
                                             #{tail\ 3413}#
                                             (list #{val\ 3414}#))))))))
                            #{tmp\ 3408}#)
                          (let ((#{_\ 3454}# #{tmp\ 3384}#))
                            (syntax-violation
                              'set!
                              "bad set!"
                              (#{source-wrap\ 451}#
                                #{e\ 3374}#
                                #{w\ 3376}#
                                #{s\ 3377}#
                                #{mod\ 3378}#))))))))))
            (#{global-extend\ 376}#
              'module-ref
              '@
              (lambda (#{e\ 3455}# #{r\ 3456}# #{w\ 3457}#)
                (let ((#{tmp\ 3461}# #{e\ 3455}#))
                  (let ((#{tmp\ 3462}#
                          ($sc-dispatch
                            #{tmp\ 3461}#
                            '(_ each-any any))))
                    (if (if #{tmp\ 3462}#
                          (@apply
                            (lambda (#{mod\ 3465}# #{id\ 3466}#)
                              (if (and-map #{id?\ 380}# #{mod\ 3465}#)
                                (#{id?\ 380}# #{id\ 3466}#)
                                #f))
                            #{tmp\ 3462}#)
                          #f)
                      (@apply
                        (lambda (#{mod\ 3472}# #{id\ 3473}#)
                          (values
                            (syntax->datum #{id\ 3473}#)
                            #{r\ 3456}#
                            #{w\ 3457}#
                            #f
                            (syntax->datum
                              (cons '#(syntax-object
                                       public
                                       ((top)
                                        #(ribcage
                                          #(mod id)
                                          #((top) (top))
                                          #("i3470" "i3471"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(e r w)
                                          #((top) (top) (top))
                                          #("i3458" "i3459" "i3460"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            chi-lambda-case
                                            lambda*-formals
                                            chi-simple-lambda
                                            lambda-formals
                                            underscore?
                                            ellipsis?
                                            chi-void
                                            eval-local-transformer
                                            chi-local-syntax
                                            chi-body
                                            chi-macro
                                            chi-application
                                            chi-expr
                                            chi
                                            chi-top
                                            syntax-type
                                            chi-when-list
                                            chi-install-global
                                            chi-top-sequence
                                            chi-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i496"
                                           "i494"
                                           "i492"
                                           "i490"
                                           "i488"
                                           "i486"
                                           "i484"
                                           "i482"
                                           "i480"
                                           "i478"
                                           "i476"
                                           "i474"
                                           "i472"
                                           "i470"
                                           "i468"
                                           "i466"
                                           "i464"
                                           "i462"
                                           "i460"
                                           "i458"
                                           "i456"
                                           "i454"
                                           "i452"
                                           "i450"
                                           "i448"
                                           "i446"
                                           "i444"
                                           "i442"
                                           "i440"
                                           "i438"
                                           "i436"
                                           "i434"
                                           "i432"
                                           "i430"
                                           "i428"
                                           "i426"
                                           "i424"
                                           "i423"
                                           "i422"
                                           "i420"
                                           "i419"
                                           "i418"
                                           "i417"
                                           "i416"
                                           "i414"
                                           "i412"
                                           "i410"
                                           "i408"
                                           "i406"
                                           "i404"
                                           "i402"
                                           "i400"
                                           "i397"
                                           "i395"
                                           "i394"
                                           "i393"
                                           "i392"
                                           "i391"
                                           "i390"
                                           "i388"
                                           "i386"
                                           "i384"
                                           "i382"
                                           "i381"
                                           "i379"
                                           "i377"
                                           "i375"
                                           "i373"
                                           "i371"
                                           "i369"
                                           "i367"
                                           "i366"
                                           "i364"
                                           "i362"
                                           "i361"
                                           "i360"
                                           "i358"
                                           "i357"
                                           "i355"
                                           "i353"
                                           "i351"
                                           "i349"
                                           "i347"
                                           "i345"
                                           "i343"
                                           "i341"
                                           "i339"
                                           "i337"
                                           "i335"
                                           "i333"
                                           "i331"
                                           "i329"
                                           "i327"
                                           "i325"
                                           "i323"
                                           "i321"
                                           "i319"
                                           "i317"
                                           "i315"
                                           "i313"
                                           "i311"
                                           "i309"
                                           "i307"
                                           "i305"
                                           "i303"
                                           "i301"
                                           "i299"
                                           "i297"
                                           "i295"
                                           "i293"
                                           "i292"
                                           "i290"
                                           "i288"
                                           "i286"
                                           "i284"
                                           "i282"
                                           "i280"
                                           "i278"
                                           "i276"
                                           "i274"
                                           "i271"
                                           "i269"
                                           "i267"
                                           "i265"
                                           "i263"
                                           "i261"
                                           "i259"
                                           "i257"
                                           "i255"
                                           "i253"
                                           "i251"
                                           "i249"
                                           "i247"
                                           "i245"
                                           "i243"
                                           "i241"
                                           "i239"
                                           "i237"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors
                                            and-map*)
                                          ((top) (top) (top) (top))
                                          ("i39" "i38" "i37" "i35")))
                                       (hygiene guile))
                                    #{mod\ 3472}#))))
                        #{tmp\ 3462}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 3461}#))))))
            (#{global-extend\ 376}#
              'module-ref
              '@@
              (lambda (#{e\ 3475}# #{r\ 3476}# #{w\ 3477}#)
                (letrec*
                  ((#{remodulate\ 3482}#
                     (lambda (#{x\ 3483}# #{mod\ 3484}#)
                       (if (pair? #{x\ 3483}#)
                         (cons (#{remodulate\ 3482}#
                                 (car #{x\ 3483}#)
                                 #{mod\ 3484}#)
                               (#{remodulate\ 3482}#
                                 (cdr #{x\ 3483}#)
                                 #{mod\ 3484}#))
                         (if (#{syntax-object?\ 344}# #{x\ 3483}#)
                           (#{make-syntax-object\ 342}#
                             (#{remodulate\ 3482}#
                               (#{syntax-object-expression\ 346}# #{x\ 3483}#)
                               #{mod\ 3484}#)
                             (#{syntax-object-wrap\ 348}# #{x\ 3483}#)
                             #{mod\ 3484}#)
                           (if (vector? #{x\ 3483}#)
                             (begin
                               (let ((#{n\ 3495}# (vector-length #{x\ 3483}#)))
                                 (begin
                                   (let ((#{v\ 3497}#
                                           (make-vector #{n\ 3495}#)))
                                     (letrec*
                                       ((#{loop\ 3500}#
                                          (lambda (#{i\ 3501}#)
                                            (if (#{fx=\ 285}#
                                                  #{i\ 3501}#
                                                  #{n\ 3495}#)
                                              (begin (if #f #f) #{v\ 3497}#)
                                              (begin
                                                (vector-set!
                                                  #{v\ 3497}#
                                                  #{i\ 3501}#
                                                  (#{remodulate\ 3482}#
                                                    (vector-ref
                                                      #{x\ 3483}#
                                                      #{i\ 3501}#)
                                                    #{mod\ 3484}#))
                                                (#{loop\ 3500}#
                                                  (#{fx+\ 281}#
                                                    #{i\ 3501}#
                                                    1)))))))
                                       (begin (#{loop\ 3500}# 0)))))))
                             #{x\ 3483}#))))))
                  (begin
                    (let ((#{tmp\ 3505}# #{e\ 3475}#))
                      (let ((#{tmp\ 3506}#
                              ($sc-dispatch
                                #{tmp\ 3505}#
                                '(_ each-any any))))
                        (if (if #{tmp\ 3506}#
                              (@apply
                                (lambda (#{mod\ 3509}# #{exp\ 3510}#)
                                  (and-map #{id?\ 380}# #{mod\ 3509}#))
                                #{tmp\ 3506}#)
                              #f)
                          (@apply
                            (lambda (#{mod\ 3514}# #{exp\ 3515}#)
                              (begin
                                (let ((#{mod\ 3517}#
                                        (syntax->datum
                                          (cons '#(syntax-object
                                                   private
                                                   ((top)
                                                    #(ribcage
                                                      #(mod exp)
                                                      #((top) (top))
                                                      #("i3512" "i3513"))
                                                    #(ribcage
                                                      (remodulate)
                                                      ((top))
                                                      ("i3481"))
                                                    #(ribcage
                                                      #(e r w)
                                                      #((top) (top) (top))
                                                      #("i3478"
                                                        "i3479"
                                                        "i3480"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        underscore?
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i496"
                                                       "i494"
                                                       "i492"
                                                       "i490"
                                                       "i488"
                                                       "i486"
                                                       "i484"
                                                       "i482"
                                                       "i480"
                                                       "i478"
                                                       "i476"
                                                       "i474"
                                                       "i472"
                                                       "i470"
                                                       "i468"
                                                       "i466"
                                                       "i464"
                                                       "i462"
                                                       "i460"
                                                       "i458"
                                                       "i456"
                                                       "i454"
                                                       "i452"
                                                       "i450"
                                                       "i448"
                                                       "i446"
                                                       "i444"
                                                       "i442"
                                                       "i440"
                                                       "i438"
                                                       "i436"
                                                       "i434"
                                                       "i432"
                                                       "i430"
                                                       "i428"
                                                       "i426"
                                                       "i424"
                                                       "i423"
                                                       "i422"
                                                       "i420"
                                                       "i419"
                                                       "i418"
                                                       "i417"
                                                       "i416"
                                                       "i414"
                                                       "i412"
                                                       "i410"
                                                       "i408"
                                                       "i406"
                                                       "i404"
                                                       "i402"
                                                       "i400"
                                                       "i397"
                                                       "i395"
                                                       "i394"
                                                       "i393"
                                                       "i392"
                                                       "i391"
                                                       "i390"
                                                       "i388"
                                                       "i386"
                                                       "i384"
                                                       "i382"
                                                       "i381"
                                                       "i379"
                                                       "i377"
                                                       "i375"
                                                       "i373"
                                                       "i371"
                                                       "i369"
                                                       "i367"
                                                       "i366"
                                                       "i364"
                                                       "i362"
                                                       "i361"
                                                       "i360"
                                                       "i358"
                                                       "i357"
                                                       "i355"
                                                       "i353"
                                                       "i351"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i329"
                                                       "i327"
                                                       "i325"
                                                       "i323"
                                                       "i321"
                                                       "i319"
                                                       "i317"
                                                       "i315"
                                                       "i313"
                                                       "i311"
                                                       "i309"
                                                       "i307"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i293"
                                                       "i292"
                                                       "i290"
                                                       "i288"
                                                       "i286"
                                                       "i284"
                                                       "i282"
                                                       "i280"
                                                       "i278"
                                                       "i276"
                                                       "i274"
                                                       "i271"
                                                       "i269"
                                                       "i267"
                                                       "i265"
                                                       "i263"
                                                       "i261"
                                                       "i259"
                                                       "i257"
                                                       "i255"
                                                       "i253"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i243"
                                                       "i241"
                                                       "i239"
                                                       "i237"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top) (top))
                                                      ("i39"
                                                       "i38"
                                                       "i37"
                                                       "i35")))
                                                   (hygiene guile))
                                                #{mod\ 3514}#))))
                                  (values
                                    (#{remodulate\ 3482}#
                                      #{exp\ 3515}#
                                      #{mod\ 3517}#)
                                    #{r\ 3476}#
                                    #{w\ 3477}#
                                    (#{source-annotation\ 359}# #{exp\ 3515}#)
                                    #{mod\ 3517}#))))
                            #{tmp\ 3506}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{tmp\ 3505}#))))))))
            (#{global-extend\ 376}#
              'core
              'if
              (lambda (#{e\ 3519}#
                       #{r\ 3520}#
                       #{w\ 3521}#
                       #{s\ 3522}#
                       #{mod\ 3523}#)
                (let ((#{tmp\ 3529}# #{e\ 3519}#))
                  (let ((#{tmp\ 3530}#
                          ($sc-dispatch #{tmp\ 3529}# (quote (_ any any)))))
                    (if #{tmp\ 3530}#
                      (@apply
                        (lambda (#{test\ 3533}# #{then\ 3534}#)
                          (#{build-conditional\ 306}#
                            #{s\ 3522}#
                            (#{chi\ 465}#
                              #{test\ 3533}#
                              #{r\ 3520}#
                              #{w\ 3521}#
                              #{mod\ 3523}#)
                            (#{chi\ 465}#
                              #{then\ 3534}#
                              #{r\ 3520}#
                              #{w\ 3521}#
                              #{mod\ 3523}#)
                            (#{build-void\ 302}# #f)))
                        #{tmp\ 3530}#)
                      (let ((#{tmp\ 3536}#
                              ($sc-dispatch
                                #{tmp\ 3529}#
                                '(_ any any any))))
                        (if #{tmp\ 3536}#
                          (@apply
                            (lambda (#{test\ 3540}#
                                     #{then\ 3541}#
                                     #{else\ 3542}#)
                              (#{build-conditional\ 306}#
                                #{s\ 3522}#
                                (#{chi\ 465}#
                                  #{test\ 3540}#
                                  #{r\ 3520}#
                                  #{w\ 3521}#
                                  #{mod\ 3523}#)
                                (#{chi\ 465}#
                                  #{then\ 3541}#
                                  #{r\ 3520}#
                                  #{w\ 3521}#
                                  #{mod\ 3523}#)
                                (#{chi\ 465}#
                                  #{else\ 3542}#
                                  #{r\ 3520}#
                                  #{w\ 3521}#
                                  #{mod\ 3523}#)))
                            #{tmp\ 3536}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{tmp\ 3529}#))))))))
            (#{global-extend\ 376}#
              'core
              'with-fluids
              (lambda (#{e\ 3543}#
                       #{r\ 3544}#
                       #{w\ 3545}#
                       #{s\ 3546}#
                       #{mod\ 3547}#)
                (let ((#{tmp\ 3553}# #{e\ 3543}#))
                  (let ((#{tmp\ 3554}#
                          ($sc-dispatch
                            #{tmp\ 3553}#
                            '(_ #(each (any any)) any . each-any))))
                    (if #{tmp\ 3554}#
                      (@apply
                        (lambda (#{fluid\ 3559}#
                                 #{val\ 3560}#
                                 #{b\ 3561}#
                                 #{b*\ 3562}#)
                          (#{build-dynlet\ 308}#
                            #{s\ 3546}#
                            (map (lambda (#{x\ 3563}#)
                                   (#{chi\ 465}#
                                     #{x\ 3563}#
                                     #{r\ 3544}#
                                     #{w\ 3545}#
                                     #{mod\ 3547}#))
                                 #{fluid\ 3559}#)
                            (map (lambda (#{x\ 3566}#)
                                   (#{chi\ 465}#
                                     #{x\ 3566}#
                                     #{r\ 3544}#
                                     #{w\ 3545}#
                                     #{mod\ 3547}#))
                                 #{val\ 3560}#)
                            (#{chi-body\ 473}#
                              (cons #{b\ 3561}# #{b*\ 3562}#)
                              (#{source-wrap\ 451}#
                                #{e\ 3543}#
                                #{w\ 3545}#
                                #{s\ 3546}#
                                #{mod\ 3547}#)
                              #{r\ 3544}#
                              #{w\ 3545}#
                              #{mod\ 3547}#)))
                        #{tmp\ 3554}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 3553}#))))))
            (#{global-extend\ 376}#
              'begin
              'begin
              '())
            (#{global-extend\ 376}#
              'define
              'define
              '())
            (#{global-extend\ 376}#
              'define-syntax
              'define-syntax
              '())
            (#{global-extend\ 376}#
              'eval-when
              'eval-when
              '())
            (#{global-extend\ 376}#
              'core
              'syntax-case
              (letrec*
                ((#{convert-pattern\ 3571}#
                   (lambda (#{pattern\ 3578}# #{keys\ 3579}#)
                     (letrec*
                       ((#{cvt*\ 3583}#
                          (lambda (#{p*\ 3586}# #{n\ 3587}# #{ids\ 3588}#)
                            (if (null? #{p*\ 3586}#)
                              (values (quote ()) #{ids\ 3588}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt*\ 3583}#
                                    (cdr #{p*\ 3586}#)
                                    #{n\ 3587}#
                                    #{ids\ 3588}#))
                                (lambda (#{y\ 3592}# #{ids\ 3593}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt\ 3585}#
                                        (car #{p*\ 3586}#)
                                        #{n\ 3587}#
                                        #{ids\ 3593}#))
                                    (lambda (#{x\ 3596}# #{ids\ 3597}#)
                                      (values
                                        (cons #{x\ 3596}# #{y\ 3592}#)
                                        #{ids\ 3597}#))))))))
                        (#{cvt\ 3585}#
                          (lambda (#{p\ 3600}# #{n\ 3601}# #{ids\ 3602}#)
                            (if (#{id?\ 380}# #{p\ 3600}#)
                              (if (#{bound-id-member?\ 447}#
                                    #{p\ 3600}#
                                    #{keys\ 3579}#)
                                (values
                                  (vector (quote free-id) #{p\ 3600}#)
                                  #{ids\ 3602}#)
                                (if (#{free-id=?\ 439}#
                                      #{p\ 3600}#
                                      '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p n ids)
                                            #((top) (top) (top))
                                            #("i3603" "i3604" "i3605"))
                                          #(ribcage
                                            (cvt cvt*)
                                            ((top) (top))
                                            ("i3584" "i3582"))
                                          #(ribcage
                                            #(pattern keys)
                                            #((top) (top))
                                            #("i3580" "i3581"))
                                          #(ribcage
                                            (gen-syntax-case
                                              gen-clause
                                              build-dispatch-call
                                              convert-pattern)
                                            ((top) (top) (top) (top))
                                            ("i3576" "i3574" "i3572" "i3570"))
                                          #(ribcage
                                            (lambda-var-list
                                              gen-var
                                              strip
                                              chi-lambda-case
                                              lambda*-formals
                                              chi-simple-lambda
                                              lambda-formals
                                              underscore?
                                              ellipsis?
                                              chi-void
                                              eval-local-transformer
                                              chi-local-syntax
                                              chi-body
                                              chi-macro
                                              chi-application
                                              chi-expr
                                              chi
                                              chi-top
                                              syntax-type
                                              chi-when-list
                                              chi-install-global
                                              chi-top-sequence
                                              chi-sequence
                                              source-wrap
                                              wrap
                                              bound-id-member?
                                              distinct-bound-ids?
                                              valid-bound-ids?
                                              bound-id=?
                                              free-id=?
                                              id-var-name
                                              same-marks?
                                              join-marks
                                              join-wraps
                                              smart-append
                                              make-binding-wrap
                                              extend-ribcage!
                                              make-empty-ribcage
                                              new-mark
                                              anti-mark
                                              the-anti-mark
                                              top-marked?
                                              top-wrap
                                              empty-wrap
                                              set-ribcage-labels!
                                              set-ribcage-marks!
                                              set-ribcage-symnames!
                                              ribcage-labels
                                              ribcage-marks
                                              ribcage-symnames
                                              ribcage?
                                              make-ribcage
                                              gen-labels
                                              gen-label
                                              make-rename
                                              rename-marks
                                              rename-new
                                              rename-old
                                              subst-rename?
                                              wrap-subst
                                              wrap-marks
                                              make-wrap
                                              id-sym-name&marks
                                              id-sym-name
                                              id?
                                              nonsymbol-id?
                                              global-extend
                                              lookup
                                              macros-only-env
                                              extend-var-env
                                              extend-env
                                              null-env
                                              binding-value
                                              binding-type
                                              make-binding
                                              arg-check
                                              source-annotation
                                              no-source
                                              set-syntax-object-module!
                                              set-syntax-object-wrap!
                                              set-syntax-object-expression!
                                              syntax-object-module
                                              syntax-object-wrap
                                              syntax-object-expression
                                              syntax-object?
                                              make-syntax-object
                                              build-lexical-var
                                              build-letrec
                                              build-named-let
                                              build-let
                                              build-sequence
                                              build-data
                                              build-primref
                                              build-lambda-case
                                              build-case-lambda
                                              build-simple-lambda
                                              build-global-definition
                                              build-global-assignment
                                              build-global-reference
                                              analyze-variable
                                              build-lexical-assignment
                                              build-lexical-reference
                                              build-dynlet
                                              build-conditional
                                              build-application
                                              build-void
                                              maybe-name-value!
                                              decorate-source
                                              get-global-definition-hook
                                              put-global-definition-hook
                                              gensym-hook
                                              local-eval-hook
                                              top-level-eval-hook
                                              fx<
                                              fx=
                                              fx-
                                              fx+
                                              set-lambda-meta!
                                              lambda-meta
                                              lambda?
                                              make-dynlet
                                              make-letrec
                                              make-let
                                              make-lambda-case
                                              make-lambda
                                              make-sequence
                                              make-application
                                              make-conditional
                                              make-toplevel-define
                                              make-toplevel-set
                                              make-toplevel-ref
                                              make-module-set
                                              make-module-ref
                                              make-lexical-set
                                              make-lexical-ref
                                              make-primitive-ref
                                              make-const
                                              make-void)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i496"
                                             "i494"
                                             "i492"
                                             "i490"
                                             "i488"
                                             "i486"
                                             "i484"
                                             "i482"
                                             "i480"
                                             "i478"
                                             "i476"
                                             "i474"
                                             "i472"
                                             "i470"
                                             "i468"
                                             "i466"
                                             "i464"
                                             "i462"
                                             "i460"
                                             "i458"
                                             "i456"
                                             "i454"
                                             "i452"
                                             "i450"
                                             "i448"
                                             "i446"
                                             "i444"
                                             "i442"
                                             "i440"
                                             "i438"
                                             "i436"
                                             "i434"
                                             "i432"
                                             "i430"
                                             "i428"
                                             "i426"
                                             "i424"
                                             "i423"
                                             "i422"
                                             "i420"
                                             "i419"
                                             "i418"
                                             "i417"
                                             "i416"
                                             "i414"
                                             "i412"
                                             "i410"
                                             "i408"
                                             "i406"
                                             "i404"
                                             "i402"
                                             "i400"
                                             "i397"
                                             "i395"
                                             "i394"
                                             "i393"
                                             "i392"
                                             "i391"
                                             "i390"
                                             "i388"
                                             "i386"
                                             "i384"
                                             "i382"
                                             "i381"
                                             "i379"
                                             "i377"
                                             "i375"
                                             "i373"
                                             "i371"
                                             "i369"
                                             "i367"
                                             "i366"
                                             "i364"
                                             "i362"
                                             "i361"
                                             "i360"
                                             "i358"
                                             "i357"
                                             "i355"
                                             "i353"
                                             "i351"
                                             "i349"
                                             "i347"
                                             "i345"
                                             "i343"
                                             "i341"
                                             "i339"
                                             "i337"
                                             "i335"
                                             "i333"
                                             "i331"
                                             "i329"
                                             "i327"
                                             "i325"
                                             "i323"
                                             "i321"
                                             "i319"
                                             "i317"
                                             "i315"
                                             "i313"
                                             "i311"
                                             "i309"
                                             "i307"
                                             "i305"
                                             "i303"
                                             "i301"
                                             "i299"
                                             "i297"
                                             "i295"
                                             "i293"
                                             "i292"
                                             "i290"
                                             "i288"
                                             "i286"
                                             "i284"
                                             "i282"
                                             "i280"
                                             "i278"
                                             "i276"
                                             "i274"
                                             "i271"
                                             "i269"
                                             "i267"
                                             "i265"
                                             "i263"
                                             "i261"
                                             "i259"
                                             "i257"
                                             "i255"
                                             "i253"
                                             "i251"
                                             "i249"
                                             "i247"
                                             "i245"
                                             "i243"
                                             "i241"
                                             "i239"
                                             "i237"))
                                          #(ribcage
                                            (define-structure
                                              define-expansion-accessors
                                              define-expansion-constructors
                                              and-map*)
                                            ((top) (top) (top) (top))
                                            ("i39" "i38" "i37" "i35")))
                                         (hygiene guile)))
                                  (values (quote _) #{ids\ 3602}#)
                                  (values
                                    'any
                                    (cons (cons #{p\ 3600}# #{n\ 3601}#)
                                          #{ids\ 3602}#))))
                              (let ((#{tmp\ 3611}# #{p\ 3600}#))
                                (let ((#{tmp\ 3612}#
                                        ($sc-dispatch
                                          #{tmp\ 3611}#
                                          '(any any))))
                                  (if (if #{tmp\ 3612}#
                                        (@apply
                                          (lambda (#{x\ 3615}# #{dots\ 3616}#)
                                            (#{ellipsis?\ 481}#
                                              #{dots\ 3616}#))
                                          #{tmp\ 3612}#)
                                        #f)
                                    (@apply
                                      (lambda (#{x\ 3619}# #{dots\ 3620}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt\ 3585}#
                                              #{x\ 3619}#
                                              (#{fx+\ 281}# #{n\ 3601}# 1)
                                              #{ids\ 3602}#))
                                          (lambda (#{p\ 3621}# #{ids\ 3622}#)
                                            (values
                                              (if (eq? #{p\ 3621}# (quote any))
                                                'each-any
                                                (vector
                                                  'each
                                                  #{p\ 3621}#))
                                              #{ids\ 3622}#))))
                                      #{tmp\ 3612}#)
                                    (let ((#{tmp\ 3625}#
                                            ($sc-dispatch
                                              #{tmp\ 3611}#
                                              '(any any . each-any))))
                                      (if (if #{tmp\ 3625}#
                                            (@apply
                                              (lambda (#{x\ 3629}#
                                                       #{dots\ 3630}#
                                                       #{ys\ 3631}#)
                                                (#{ellipsis?\ 481}#
                                                  #{dots\ 3630}#))
                                              #{tmp\ 3625}#)
                                            #f)
                                        (@apply
                                          (lambda (#{x\ 3635}#
                                                   #{dots\ 3636}#
                                                   #{ys\ 3637}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{cvt*\ 3583}#
                                                  #{ys\ 3637}#
                                                  #{n\ 3601}#
                                                  #{ids\ 3602}#))
                                              (lambda (#{ys\ 3639}#
                                                       #{ids\ 3640}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{cvt\ 3585}#
                                                      #{x\ 3635}#
                                                      (1+ #{n\ 3601}#)
                                                      #{ids\ 3640}#))
                                                  (lambda (#{x\ 3643}#
                                                           #{ids\ 3644}#)
                                                    (values
                                                      (list->vector
                                                        (cons 'each+
                                                              (cons #{x\ 3643}#
                                                                    (cons (reverse
                                                                            #{ys\ 3639}#)
                                                                          '(())))))
                                                      #{ids\ 3644}#))))))
                                          #{tmp\ 3625}#)
                                        (let ((#{tmp\ 3648}#
                                                ($sc-dispatch
                                                  #{tmp\ 3611}#
                                                  '(any . any))))
                                          (if #{tmp\ 3648}#
                                            (@apply
                                              (lambda (#{x\ 3651}# #{y\ 3652}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{cvt\ 3585}#
                                                      #{y\ 3652}#
                                                      #{n\ 3601}#
                                                      #{ids\ 3602}#))
                                                  (lambda (#{y\ 3653}#
                                                           #{ids\ 3654}#)
                                                    (call-with-values
                                                      (lambda ()
                                                        (#{cvt\ 3585}#
                                                          #{x\ 3651}#
                                                          #{n\ 3601}#
                                                          #{ids\ 3654}#))
                                                      (lambda (#{x\ 3657}#
                                                               #{ids\ 3658}#)
                                                        (values
                                                          (cons #{x\ 3657}#
                                                                #{y\ 3653}#)
                                                          #{ids\ 3658}#))))))
                                              #{tmp\ 3648}#)
                                            (let ((#{tmp\ 3661}#
                                                    ($sc-dispatch
                                                      #{tmp\ 3611}#
                                                      '())))
                                              (if #{tmp\ 3661}#
                                                (@apply
                                                  (lambda ()
                                                    (values
                                                      '()
                                                      #{ids\ 3602}#))
                                                  #{tmp\ 3661}#)
                                                (let ((#{tmp\ 3662}#
                                                        ($sc-dispatch
                                                          #{tmp\ 3611}#
                                                          '#(vector
                                                             each-any))))
                                                  (if #{tmp\ 3662}#
                                                    (@apply
                                                      (lambda (#{x\ 3664}#)
                                                        (call-with-values
                                                          (lambda ()
                                                            (#{cvt\ 3585}#
                                                              #{x\ 3664}#
                                                              #{n\ 3601}#
                                                              #{ids\ 3602}#))
                                                          (lambda (#{p\ 3666}#
                                                                   #{ids\ 3667}#)
                                                            (values
                                                              (vector
                                                                'vector
                                                                #{p\ 3666}#)
                                                              #{ids\ 3667}#))))
                                                      #{tmp\ 3662}#)
                                                    (let ((#{x\ 3671}#
                                                            #{tmp\ 3611}#))
                                                      (values
                                                        (vector
                                                          'atom
                                                          (#{strip\ 493}#
                                                            #{p\ 3600}#
                                                            '(())))
                                                        #{ids\ 3602}#)))))))))))))))))
                       (begin
                         (#{cvt\ 3585}# #{pattern\ 3578}# 0 (quote ()))))))
                 (#{build-dispatch-call\ 3573}#
                   (lambda (#{pvars\ 3673}#
                            #{exp\ 3674}#
                            #{y\ 3675}#
                            #{r\ 3676}#
                            #{mod\ 3677}#)
                     (begin
                       (map cdr #{pvars\ 3673}#)
                       (let ((#{ids\ 3685}# (map car #{pvars\ 3673}#)))
                         (begin
                           (let ((#{labels\ 3689}#
                                   (#{gen-labels\ 398}# #{ids\ 3685}#))
                                 (#{new-vars\ 3690}#
                                   (map #{gen-var\ 495}# #{ids\ 3685}#)))
                             (#{build-application\ 304}#
                               #f
                               (#{build-primref\ 328}# #f (quote apply))
                               (list (#{build-simple-lambda\ 322}#
                                       #f
                                       (map syntax->datum #{ids\ 3685}#)
                                       #f
                                       #{new-vars\ 3690}#
                                       '()
                                       (#{chi\ 465}#
                                         #{exp\ 3674}#
                                         (#{extend-env\ 368}#
                                           #{labels\ 3689}#
                                           (map (lambda (#{var\ 3694}#
                                                         #{level\ 3695}#)
                                                  (cons 'syntax
                                                        (cons #{var\ 3694}#
                                                              #{level\ 3695}#)))
                                                #{new-vars\ 3690}#
                                                (map cdr #{pvars\ 3673}#))
                                           #{r\ 3676}#)
                                         (#{make-binding-wrap\ 427}#
                                           #{ids\ 3685}#
                                           #{labels\ 3689}#
                                           '(()))
                                         #{mod\ 3677}#))
                                     #{y\ 3675}#))))))))
                 (#{gen-clause\ 3575}#
                   (lambda (#{x\ 3701}#
                            #{keys\ 3702}#
                            #{clauses\ 3703}#
                            #{r\ 3704}#
                            #{pat\ 3705}#
                            #{fender\ 3706}#
                            #{exp\ 3707}#
                            #{mod\ 3708}#)
                     (call-with-values
                       (lambda ()
                         (#{convert-pattern\ 3571}#
                           #{pat\ 3705}#
                           #{keys\ 3702}#))
                       (lambda (#{p\ 3717}# #{pvars\ 3718}#)
                         (if (not (#{distinct-bound-ids?\ 445}#
                                    (map car #{pvars\ 3718}#)))
                           (syntax-violation
                             'syntax-case
                             "duplicate pattern variable"
                             #{pat\ 3705}#)
                           (if (not (and-map
                                      (lambda (#{x\ 3725}#)
                                        (not (#{ellipsis?\ 481}#
                                               (car #{x\ 3725}#))))
                                      #{pvars\ 3718}#))
                             (syntax-violation
                               'syntax-case
                               "misplaced ellipsis"
                               #{pat\ 3705}#)
                             (begin
                               (let ((#{y\ 3729}#
                                       (#{gen-var\ 495}# (quote tmp))))
                                 (#{build-application\ 304}#
                                   #f
                                   (#{build-simple-lambda\ 322}#
                                     #f
                                     (list (quote tmp))
                                     #f
                                     (list #{y\ 3729}#)
                                     '()
                                     (begin
                                       (let ((#{y\ 3733}#
                                               (#{build-lexical-reference\ 310}#
                                                 'value
                                                 #f
                                                 'tmp
                                                 #{y\ 3729}#)))
                                         (#{build-conditional\ 306}#
                                           #f
                                           (let ((#{tmp\ 3736}#
                                                   #{fender\ 3706}#))
                                             (let ((#{tmp\ 3737}#
                                                     ($sc-dispatch
                                                       #{tmp\ 3736}#
                                                       '#(atom #t))))
                                               (if #{tmp\ 3737}#
                                                 (@apply
                                                   (lambda () #{y\ 3733}#)
                                                   #{tmp\ 3737}#)
                                                 (let ((#{_\ 3739}#
                                                         #{tmp\ 3736}#))
                                                   (#{build-conditional\ 306}#
                                                     #f
                                                     #{y\ 3733}#
                                                     (#{build-dispatch-call\ 3573}#
                                                       #{pvars\ 3718}#
                                                       #{fender\ 3706}#
                                                       #{y\ 3733}#
                                                       #{r\ 3704}#
                                                       #{mod\ 3708}#)
                                                     (#{build-data\ 330}#
                                                       #f
                                                       #f))))))
                                           (#{build-dispatch-call\ 3573}#
                                             #{pvars\ 3718}#
                                             #{exp\ 3707}#
                                             #{y\ 3733}#
                                             #{r\ 3704}#
                                             #{mod\ 3708}#)
                                           (#{gen-syntax-case\ 3577}#
                                             #{x\ 3701}#
                                             #{keys\ 3702}#
                                             #{clauses\ 3703}#
                                             #{r\ 3704}#
                                             #{mod\ 3708}#)))))
                                   (list (if (eq? #{p\ 3717}# (quote any))
                                           (#{build-application\ 304}#
                                             #f
                                             (#{build-primref\ 328}#
                                               #f
                                               'list)
                                             (list #{x\ 3701}#))
                                           (#{build-application\ 304}#
                                             #f
                                             (#{build-primref\ 328}#
                                               #f
                                               '$sc-dispatch)
                                             (list #{x\ 3701}#
                                                   (#{build-data\ 330}#
                                                     #f
                                                     #{p\ 3717}#))))))))))))))
                 (#{gen-syntax-case\ 3577}#
                   (lambda (#{x\ 3747}#
                            #{keys\ 3748}#
                            #{clauses\ 3749}#
                            #{r\ 3750}#
                            #{mod\ 3751}#)
                     (if (null? #{clauses\ 3749}#)
                       (#{build-application\ 304}#
                         #f
                         (#{build-primref\ 328}#
                           #f
                           'syntax-violation)
                         (list (#{build-data\ 330}# #f #f)
                               (#{build-data\ 330}#
                                 #f
                                 "source expression failed to match any pattern")
                               #{x\ 3747}#))
                       (let ((#{tmp\ 3761}# (car #{clauses\ 3749}#)))
                         (let ((#{tmp\ 3762}#
                                 ($sc-dispatch
                                   #{tmp\ 3761}#
                                   '(any any))))
                           (if #{tmp\ 3762}#
                             (@apply
                               (lambda (#{pat\ 3765}# #{exp\ 3766}#)
                                 (if (if (#{id?\ 380}# #{pat\ 3765}#)
                                       (and-map
                                         (lambda (#{x\ 3769}#)
                                           (not (#{free-id=?\ 439}#
                                                  #{pat\ 3765}#
                                                  #{x\ 3769}#)))
                                         (cons '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage
                                                     #(pat exp)
                                                     #((top) (top))
                                                     #("i3763" "i3764"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x keys clauses r mod)
                                                     #((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                     #("i3752"
                                                       "i3753"
                                                       "i3754"
                                                       "i3755"
                                                       "i3756"))
                                                   #(ribcage
                                                     (gen-syntax-case
                                                       gen-clause
                                                       build-dispatch-call
                                                       convert-pattern)
                                                     ((top) (top) (top) (top))
                                                     ("i3576"
                                                      "i3574"
                                                      "i3572"
                                                      "i3570"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       chi-lambda-case
                                                       lambda*-formals
                                                       chi-simple-lambda
                                                       lambda-formals
                                                       underscore?
                                                       ellipsis?
                                                       chi-void
                                                       eval-local-transformer
                                                       chi-local-syntax
                                                       chi-body
                                                       chi-macro
                                                       chi-application
                                                       chi-expr
                                                       chi
                                                       chi-top
                                                       syntax-type
                                                       chi-when-list
                                                       chi-install-global
                                                       chi-top-sequence
                                                       chi-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i496"
                                                      "i494"
                                                      "i492"
                                                      "i490"
                                                      "i488"
                                                      "i486"
                                                      "i484"
                                                      "i482"
                                                      "i480"
                                                      "i478"
                                                      "i476"
                                                      "i474"
                                                      "i472"
                                                      "i470"
                                                      "i468"
                                                      "i466"
                                                      "i464"
                                                      "i462"
                                                      "i460"
                                                      "i458"
                                                      "i456"
                                                      "i454"
                                                      "i452"
                                                      "i450"
                                                      "i448"
                                                      "i446"
                                                      "i444"
                                                      "i442"
                                                      "i440"
                                                      "i438"
                                                      "i436"
                                                      "i434"
                                                      "i432"
                                                      "i430"
                                                      "i428"
                                                      "i426"
                                                      "i424"
                                                      "i423"
                                                      "i422"
                                                      "i420"
                                                      "i419"
                                                      "i418"
                                                      "i417"
                                                      "i416"
                                                      "i414"
                                                      "i412"
                                                      "i410"
                                                      "i408"
                                                      "i406"
                                                      "i404"
                                                      "i402"
                                                      "i400"
                                                      "i397"
                                                      "i395"
                                                      "i394"
                                                      "i393"
                                                      "i392"
                                                      "i391"
                                                      "i390"
                                                      "i388"
                                                      "i386"
                                                      "i384"
                                                      "i382"
                                                      "i381"
                                                      "i379"
                                                      "i377"
                                                      "i375"
                                                      "i373"
                                                      "i371"
                                                      "i369"
                                                      "i367"
                                                      "i366"
                                                      "i364"
                                                      "i362"
                                                      "i361"
                                                      "i360"
                                                      "i358"
                                                      "i357"
                                                      "i355"
                                                      "i353"
                                                      "i351"
                                                      "i349"
                                                      "i347"
                                                      "i345"
                                                      "i343"
                                                      "i341"
                                                      "i339"
                                                      "i337"
                                                      "i335"
                                                      "i333"
                                                      "i331"
                                                      "i329"
                                                      "i327"
                                                      "i325"
                                                      "i323"
                                                      "i321"
                                                      "i319"
                                                      "i317"
                                                      "i315"
                                                      "i313"
                                                      "i311"
                                                      "i309"
                                                      "i307"
                                                      "i305"
                                                      "i303"
                                                      "i301"
                                                      "i299"
                                                      "i297"
                                                      "i295"
                                                      "i293"
                                                      "i292"
                                                      "i290"
                                                      "i288"
                                                      "i286"
                                                      "i284"
                                                      "i282"
                                                      "i280"
                                                      "i278"
                                                      "i276"
                                                      "i274"
                                                      "i271"
                                                      "i269"
                                                      "i267"
                                                      "i265"
                                                      "i263"
                                                      "i261"
                                                      "i259"
                                                      "i257"
                                                      "i255"
                                                      "i253"
                                                      "i251"
                                                      "i249"
                                                      "i247"
                                                      "i245"
                                                      "i243"
                                                      "i241"
                                                      "i239"
                                                      "i237"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors
                                                       and-map*)
                                                     ((top) (top) (top) (top))
                                                     ("i39"
                                                      "i38"
                                                      "i37"
                                                      "i35")))
                                                  (hygiene guile))
                                               #{keys\ 3748}#))
                                       #f)
                                   (if (#{free-id=?\ 439}#
                                         '#(syntax-object
                                            pad
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("i3763" "i3764"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("i3752"
                                                 "i3753"
                                                 "i3754"
                                                 "i3755"
                                                 "i3756"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("i3576"
                                                "i3574"
                                                "i3572"
                                                "i3570"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 underscore?
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-application
                                                 chi-expr
                                                 chi
                                                 chi-top
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i496"
                                                "i494"
                                                "i492"
                                                "i490"
                                                "i488"
                                                "i486"
                                                "i484"
                                                "i482"
                                                "i480"
                                                "i478"
                                                "i476"
                                                "i474"
                                                "i472"
                                                "i470"
                                                "i468"
                                                "i466"
                                                "i464"
                                                "i462"
                                                "i460"
                                                "i458"
                                                "i456"
                                                "i454"
                                                "i452"
                                                "i450"
                                                "i448"
                                                "i446"
                                                "i444"
                                                "i442"
                                                "i440"
                                                "i438"
                                                "i436"
                                                "i434"
                                                "i432"
                                                "i430"
                                                "i428"
                                                "i426"
                                                "i424"
                                                "i423"
                                                "i422"
                                                "i420"
                                                "i419"
                                                "i418"
                                                "i417"
                                                "i416"
                                                "i414"
                                                "i412"
                                                "i410"
                                                "i408"
                                                "i406"
                                                "i404"
                                                "i402"
                                                "i400"
                                                "i397"
                                                "i395"
                                                "i394"
                                                "i393"
                                                "i392"
                                                "i391"
                                                "i390"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i381"
                                                "i379"
                                                "i377"
                                                "i375"
                                                "i373"
                                                "i371"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i361"
                                                "i360"
                                                "i358"
                                                "i357"
                                                "i355"
                                                "i353"
                                                "i351"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i329"
                                                "i327"
                                                "i325"
                                                "i323"
                                                "i321"
                                                "i319"
                                                "i317"
                                                "i315"
                                                "i313"
                                                "i311"
                                                "i309"
                                                "i307"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i292"
                                                "i290"
                                                "i288"
                                                "i286"
                                                "i284"
                                                "i282"
                                                "i280"
                                                "i278"
                                                "i276"
                                                "i274"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i259"
                                                "i257"
                                                "i255"
                                                "i253"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i243"
                                                "i241"
                                                "i239"
                                                "i237"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors
                                                 and-map*)
                                               ((top) (top) (top) (top))
                                               ("i39" "i38" "i37" "i35")))
                                            (hygiene guile))
                                         '#(syntax-object
                                            _
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("i3763" "i3764"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("i3752"
                                                 "i3753"
                                                 "i3754"
                                                 "i3755"
                                                 "i3756"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("i3576"
                                                "i3574"
                                                "i3572"
                                                "i3570"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 underscore?
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-application
                                                 chi-expr
                                                 chi
                                                 chi-top
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i496"
                                                "i494"
                                                "i492"
                                                "i490"
                                                "i488"
                                                "i486"
                                                "i484"
                                                "i482"
                                                "i480"
                                                "i478"
                                                "i476"
                                                "i474"
                                                "i472"
                                                "i470"
                                                "i468"
                                                "i466"
                                                "i464"
                                                "i462"
                                                "i460"
                                                "i458"
                                                "i456"
                                                "i454"
                                                "i452"
                                                "i450"
                                                "i448"
                                                "i446"
                                                "i444"
                                                "i442"
                                                "i440"
                                                "i438"
                                                "i436"
                                                "i434"
                                                "i432"
                                                "i430"
                                                "i428"
                                                "i426"
                                                "i424"
                                                "i423"
                                                "i422"
                                                "i420"
                                                "i419"
                                                "i418"
                                                "i417"
                                                "i416"
                                                "i414"
                                                "i412"
                                                "i410"
                                                "i408"
                                                "i406"
                                                "i404"
                                                "i402"
                                                "i400"
                                                "i397"
                                                "i395"
                                                "i394"
                                                "i393"
                                                "i392"
                                                "i391"
                                                "i390"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i381"
                                                "i379"
                                                "i377"
                                                "i375"
                                                "i373"
                                                "i371"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i361"
                                                "i360"
                                                "i358"
                                                "i357"
                                                "i355"
                                                "i353"
                                                "i351"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i329"
                                                "i327"
                                                "i325"
                                                "i323"
                                                "i321"
                                                "i319"
                                                "i317"
                                                "i315"
                                                "i313"
                                                "i311"
                                                "i309"
                                                "i307"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i292"
                                                "i290"
                                                "i288"
                                                "i286"
                                                "i284"
                                                "i282"
                                                "i280"
                                                "i278"
                                                "i276"
                                                "i274"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i259"
                                                "i257"
                                                "i255"
                                                "i253"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i243"
                                                "i241"
                                                "i239"
                                                "i237"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors
                                                 and-map*)
                                               ((top) (top) (top) (top))
                                               ("i39" "i38" "i37" "i35")))
                                            (hygiene guile)))
                                     (#{chi\ 465}#
                                       #{exp\ 3766}#
                                       #{r\ 3750}#
                                       '(())
                                       #{mod\ 3751}#)
                                     (begin
                                       (let ((#{labels\ 3774}#
                                               (list (#{gen-label\ 396}#)))
                                             (#{var\ 3775}#
                                               (#{gen-var\ 495}#
                                                 #{pat\ 3765}#)))
                                         (#{build-application\ 304}#
                                           #f
                                           (#{build-simple-lambda\ 322}#
                                             #f
                                             (list (syntax->datum
                                                     #{pat\ 3765}#))
                                             #f
                                             (list #{var\ 3775}#)
                                             '()
                                             (#{chi\ 465}#
                                               #{exp\ 3766}#
                                               (#{extend-env\ 368}#
                                                 #{labels\ 3774}#
                                                 (list (cons 'syntax
                                                             (cons #{var\ 3775}#
                                                                   0)))
                                                 #{r\ 3750}#)
                                               (#{make-binding-wrap\ 427}#
                                                 (list #{pat\ 3765}#)
                                                 #{labels\ 3774}#
                                                 '(()))
                                               #{mod\ 3751}#))
                                           (list #{x\ 3747}#)))))
                                   (#{gen-clause\ 3575}#
                                     #{x\ 3747}#
                                     #{keys\ 3748}#
                                     (cdr #{clauses\ 3749}#)
                                     #{r\ 3750}#
                                     #{pat\ 3765}#
                                     #t
                                     #{exp\ 3766}#
                                     #{mod\ 3751}#)))
                               #{tmp\ 3762}#)
                             (let ((#{tmp\ 3781}#
                                     ($sc-dispatch
                                       #{tmp\ 3761}#
                                       '(any any any))))
                               (if #{tmp\ 3781}#
                                 (@apply
                                   (lambda (#{pat\ 3785}#
                                            #{fender\ 3786}#
                                            #{exp\ 3787}#)
                                     (#{gen-clause\ 3575}#
                                       #{x\ 3747}#
                                       #{keys\ 3748}#
                                       (cdr #{clauses\ 3749}#)
                                       #{r\ 3750}#
                                       #{pat\ 3785}#
                                       #{fender\ 3786}#
                                       #{exp\ 3787}#
                                       #{mod\ 3751}#))
                                   #{tmp\ 3781}#)
                                 (let ((#{_\ 3789}# #{tmp\ 3761}#))
                                   (syntax-violation
                                     'syntax-case
                                     "invalid clause"
                                     (car #{clauses\ 3749}#))))))))))))
                (begin
                  (lambda (#{e\ 3790}#
                           #{r\ 3791}#
                           #{w\ 3792}#
                           #{s\ 3793}#
                           #{mod\ 3794}#)
                    (begin
                      (let ((#{e\ 3801}#
                              (#{source-wrap\ 451}#
                                #{e\ 3790}#
                                #{w\ 3792}#
                                #{s\ 3793}#
                                #{mod\ 3794}#)))
                        (let ((#{tmp\ 3802}# #{e\ 3801}#))
                          (let ((#{tmp\ 3803}#
                                  ($sc-dispatch
                                    #{tmp\ 3802}#
                                    '(_ any each-any . each-any))))
                            (if #{tmp\ 3803}#
                              (@apply
                                (lambda (#{val\ 3807}#
                                         #{key\ 3808}#
                                         #{m\ 3809}#)
                                  (if (and-map
                                        (lambda (#{x\ 3810}#)
                                          (if (#{id?\ 380}# #{x\ 3810}#)
                                            (if (not (#{ellipsis?\ 481}#
                                                       #{x\ 3810}#))
                                              (not (#{underscore?\ 483}#
                                                     #{x\ 3810}#))
                                              #f)
                                            #f))
                                        #{key\ 3808}#)
                                    (begin
                                      (let ((#{x\ 3817}#
                                              (#{gen-var\ 495}# (quote tmp))))
                                        (#{build-application\ 304}#
                                          #{s\ 3793}#
                                          (#{build-simple-lambda\ 322}#
                                            #f
                                            (list (quote tmp))
                                            #f
                                            (list #{x\ 3817}#)
                                            '()
                                            (#{gen-syntax-case\ 3577}#
                                              (#{build-lexical-reference\ 310}#
                                                'value
                                                #f
                                                'tmp
                                                #{x\ 3817}#)
                                              #{key\ 3808}#
                                              #{m\ 3809}#
                                              #{r\ 3791}#
                                              #{mod\ 3794}#))
                                          (list (#{chi\ 465}#
                                                  #{val\ 3807}#
                                                  #{r\ 3791}#
                                                  '(())
                                                  #{mod\ 3794}#)))))
                                    (syntax-violation
                                      'syntax-case
                                      "invalid literals list"
                                      #{e\ 3801}#)))
                                #{tmp\ 3803}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 3802}#))))))))))
            (set! macroexpand
              (lambda*
                (#{x\ 3823}#
                  #:optional
                  (#{m\ 3825}# (quote e))
                  (#{esew\ 3827}# (quote (eval))))
                (#{chi-top\ 463}#
                  #{x\ 3823}#
                  '()
                  '((top))
                  #{m\ 3825}#
                  #{esew\ 3827}#
                  (cons 'hygiene
                        (module-name (current-module))))))
            (set! identifier?
              (lambda (#{x\ 3831}#)
                (#{nonsymbol-id?\ 378}# #{x\ 3831}#)))
            (set! datum->syntax
              (lambda (#{id\ 3833}# #{datum\ 3834}#)
                (#{make-syntax-object\ 342}#
                  #{datum\ 3834}#
                  (#{syntax-object-wrap\ 348}# #{id\ 3833}#)
                  (#{syntax-object-module\ 350}# #{id\ 3833}#))))
            (set! syntax->datum
              (lambda (#{x\ 3837}#)
                (#{strip\ 493}# #{x\ 3837}# (quote (())))))
            (set! syntax-source
              (lambda (#{x\ 3840}#)
                (#{source-annotation\ 359}# #{x\ 3840}#)))
            (set! generate-temporaries
              (lambda (#{ls\ 3842}#)
                (begin
                  (begin
                    (let ((#{x\ 3846}# #{ls\ 3842}#))
                      (if (not (list? #{x\ 3846}#))
                        (syntax-violation
                          'generate-temporaries
                          "invalid argument"
                          #{x\ 3846}#))))
                  (map (lambda (#{x\ 3847}#)
                         (#{wrap\ 449}# (gensym) (quote ((top))) #f))
                       #{ls\ 3842}#))))
            (set! free-identifier=?
              (lambda (#{x\ 3851}# #{y\ 3852}#)
                (begin
                  (begin
                    (let ((#{x\ 3857}# #{x\ 3851}#))
                      (if (not (#{nonsymbol-id?\ 378}# #{x\ 3857}#))
                        (syntax-violation
                          'free-identifier=?
                          "invalid argument"
                          #{x\ 3857}#))))
                  (begin
                    (let ((#{x\ 3860}# #{y\ 3852}#))
                      (if (not (#{nonsymbol-id?\ 378}# #{x\ 3860}#))
                        (syntax-violation
                          'free-identifier=?
                          "invalid argument"
                          #{x\ 3860}#))))
                  (#{free-id=?\ 439}# #{x\ 3851}# #{y\ 3852}#))))
            (set! bound-identifier=?
              (lambda (#{x\ 3861}# #{y\ 3862}#)
                (begin
                  (begin
                    (let ((#{x\ 3867}# #{x\ 3861}#))
                      (if (not (#{nonsymbol-id?\ 378}# #{x\ 3867}#))
                        (syntax-violation
                          'bound-identifier=?
                          "invalid argument"
                          #{x\ 3867}#))))
                  (begin
                    (let ((#{x\ 3870}# #{y\ 3862}#))
                      (if (not (#{nonsymbol-id?\ 378}# #{x\ 3870}#))
                        (syntax-violation
                          'bound-identifier=?
                          "invalid argument"
                          #{x\ 3870}#))))
                  (#{bound-id=?\ 441}# #{x\ 3861}# #{y\ 3862}#))))
            (set! syntax-violation
              (lambda (#{who\ 3871}#
                       #{message\ 3872}#
                       #{form\ 3873}#
                       .
                       #{subform\ 3874}#)
                (begin
                  (begin
                    (let ((#{x\ 3881}# #{who\ 3871}#))
                      (if (not (let ((#{x\ 3882}# #{x\ 3881}#))
                                 (begin
                                   (let ((#{t\ 3886}# (not #{x\ 3882}#)))
                                     (if #{t\ 3886}#
                                       #{t\ 3886}#
                                       (begin
                                         (let ((#{t\ 3889}#
                                                 (string? #{x\ 3882}#)))
                                           (if #{t\ 3889}#
                                             #{t\ 3889}#
                                             (symbol? #{x\ 3882}#)))))))))
                        (syntax-violation
                          'syntax-violation
                          "invalid argument"
                          #{x\ 3881}#))))
                  (begin
                    (let ((#{x\ 3893}# #{message\ 3872}#))
                      (if (not (string? #{x\ 3893}#))
                        (syntax-violation
                          'syntax-violation
                          "invalid argument"
                          #{x\ 3893}#))))
                  (scm-error
                    'syntax-error
                    'macroexpand
                    (string-append
                      (if #{who\ 3871}# "~a: " "")
                      "~a "
                      (if (null? #{subform\ 3874}#)
                        "in ~a"
                        "in subform `~s' of `~s'"))
                    (begin
                      (let ((#{tail\ 3895}#
                              (cons #{message\ 3872}#
                                    (map (lambda (#{x\ 3896}#)
                                           (#{strip\ 493}#
                                             #{x\ 3896}#
                                             '(())))
                                         (append
                                           #{subform\ 3874}#
                                           (list #{form\ 3873}#))))))
                        (if #{who\ 3871}#
                          (cons #{who\ 3871}# #{tail\ 3895}#)
                          #{tail\ 3895}#)))
                    #f))))
            (letrec*
              ((#{match-each\ 3900}#
                 (lambda (#{e\ 3913}#
                          #{p\ 3914}#
                          #{w\ 3915}#
                          #{mod\ 3916}#)
                   (if (pair? #{e\ 3913}#)
                     (begin
                       (let ((#{first\ 3924}#
                               (#{match\ 3912}#
                                 (car #{e\ 3913}#)
                                 #{p\ 3914}#
                                 #{w\ 3915}#
                                 '()
                                 #{mod\ 3916}#)))
                         (if #{first\ 3924}#
                           (begin
                             (let ((#{rest\ 3928}#
                                     (#{match-each\ 3900}#
                                       (cdr #{e\ 3913}#)
                                       #{p\ 3914}#
                                       #{w\ 3915}#
                                       #{mod\ 3916}#)))
                               (if #{rest\ 3928}#
                                 (cons #{first\ 3924}# #{rest\ 3928}#)
                                 #f)))
                           #f)))
                     (if (null? #{e\ 3913}#)
                       '()
                       (if (#{syntax-object?\ 344}# #{e\ 3913}#)
                         (#{match-each\ 3900}#
                           (#{syntax-object-expression\ 346}# #{e\ 3913}#)
                           #{p\ 3914}#
                           (#{join-wraps\ 431}#
                             #{w\ 3915}#
                             (#{syntax-object-wrap\ 348}# #{e\ 3913}#))
                           (#{syntax-object-module\ 350}# #{e\ 3913}#))
                         #f)))))
               (#{match-each+\ 3902}#
                 (lambda (#{e\ 3936}#
                          #{x-pat\ 3937}#
                          #{y-pat\ 3938}#
                          #{z-pat\ 3939}#
                          #{w\ 3940}#
                          #{r\ 3941}#
                          #{mod\ 3942}#)
                   (letrec*
                     ((#{f\ 3953}#
                        (lambda (#{e\ 3954}# #{w\ 3955}#)
                          (if (pair? #{e\ 3954}#)
                            (call-with-values
                              (lambda ()
                                (#{f\ 3953}# (cdr #{e\ 3954}#) #{w\ 3955}#))
                              (lambda (#{xr*\ 3958}#
                                       #{y-pat\ 3959}#
                                       #{r\ 3960}#)
                                (if #{r\ 3960}#
                                  (if (null? #{y-pat\ 3959}#)
                                    (begin
                                      (let ((#{xr\ 3965}#
                                              (#{match\ 3912}#
                                                (car #{e\ 3954}#)
                                                #{x-pat\ 3937}#
                                                #{w\ 3955}#
                                                '()
                                                #{mod\ 3942}#)))
                                        (if #{xr\ 3965}#
                                          (values
                                            (cons #{xr\ 3965}# #{xr*\ 3958}#)
                                            #{y-pat\ 3959}#
                                            #{r\ 3960}#)
                                          (values #f #f #f))))
                                    (values
                                      '()
                                      (cdr #{y-pat\ 3959}#)
                                      (#{match\ 3912}#
                                        (car #{e\ 3954}#)
                                        (car #{y-pat\ 3959}#)
                                        #{w\ 3955}#
                                        #{r\ 3960}#
                                        #{mod\ 3942}#)))
                                  (values #f #f #f))))
                            (if (#{syntax-object?\ 344}# #{e\ 3954}#)
                              (#{f\ 3953}#
                                (#{syntax-object-expression\ 346}# #{e\ 3954}#)
                                (#{join-wraps\ 431}# #{w\ 3955}# #{e\ 3954}#))
                              (values
                                '()
                                #{y-pat\ 3938}#
                                (#{match\ 3912}#
                                  #{e\ 3954}#
                                  #{z-pat\ 3939}#
                                  #{w\ 3955}#
                                  #{r\ 3941}#
                                  #{mod\ 3942}#)))))))
                     (begin (#{f\ 3953}# #{e\ 3936}# #{w\ 3940}#)))))
               (#{match-each-any\ 3904}#
                 (lambda (#{e\ 3969}# #{w\ 3970}# #{mod\ 3971}#)
                   (if (pair? #{e\ 3969}#)
                     (begin
                       (let ((#{l\ 3978}#
                               (#{match-each-any\ 3904}#
                                 (cdr #{e\ 3969}#)
                                 #{w\ 3970}#
                                 #{mod\ 3971}#)))
                         (if #{l\ 3978}#
                           (cons (#{wrap\ 449}#
                                   (car #{e\ 3969}#)
                                   #{w\ 3970}#
                                   #{mod\ 3971}#)
                                 #{l\ 3978}#)
                           #f)))
                     (if (null? #{e\ 3969}#)
                       '()
                       (if (#{syntax-object?\ 344}# #{e\ 3969}#)
                         (#{match-each-any\ 3904}#
                           (#{syntax-object-expression\ 346}# #{e\ 3969}#)
                           (#{join-wraps\ 431}#
                             #{w\ 3970}#
                             (#{syntax-object-wrap\ 348}# #{e\ 3969}#))
                           #{mod\ 3971}#)
                         #f)))))
               (#{match-empty\ 3906}#
                 (lambda (#{p\ 3986}# #{r\ 3987}#)
                   (if (null? #{p\ 3986}#)
                     #{r\ 3987}#
                     (if (eq? #{p\ 3986}# (quote _))
                       #{r\ 3987}#
                       (if (eq? #{p\ 3986}# (quote any))
                         (cons (quote ()) #{r\ 3987}#)
                         (if (pair? #{p\ 3986}#)
                           (#{match-empty\ 3906}#
                             (car #{p\ 3986}#)
                             (#{match-empty\ 3906}#
                               (cdr #{p\ 3986}#)
                               #{r\ 3987}#))
                           (if (eq? #{p\ 3986}# (quote each-any))
                             (cons (quote ()) #{r\ 3987}#)
                             (begin
                               (let ((#{atom-key\ 4003}#
                                       (vector-ref #{p\ 3986}# 0)))
                                 (if (eqv? #{atom-key\ 4003}# (quote each))
                                   (#{match-empty\ 3906}#
                                     (vector-ref #{p\ 3986}# 1)
                                     #{r\ 3987}#)
                                   (if (eqv? #{atom-key\ 4003}# (quote each+))
                                     (#{match-empty\ 3906}#
                                       (vector-ref #{p\ 3986}# 1)
                                       (#{match-empty\ 3906}#
                                         (reverse (vector-ref #{p\ 3986}# 2))
                                         (#{match-empty\ 3906}#
                                           (vector-ref #{p\ 3986}# 3)
                                           #{r\ 3987}#)))
                                     (if (if (eqv? #{atom-key\ 4003}#
                                                   'free-id)
                                           #t
                                           (eqv? #{atom-key\ 4003}#
                                                 'atom))
                                       #{r\ 3987}#
                                       (if (eqv? #{atom-key\ 4003}#
                                                 'vector)
                                         (#{match-empty\ 3906}#
                                           (vector-ref #{p\ 3986}# 1)
                                           #{r\ 3987}#))))))))))))))
               (#{combine\ 3908}#
                 (lambda (#{r*\ 4008}# #{r\ 4009}#)
                   (if (null? (car #{r*\ 4008}#))
                     #{r\ 4009}#
                     (cons (map car #{r*\ 4008}#)
                           (#{combine\ 3908}#
                             (map cdr #{r*\ 4008}#)
                             #{r\ 4009}#)))))
               (#{match*\ 3910}#
                 (lambda (#{e\ 4012}#
                          #{p\ 4013}#
                          #{w\ 4014}#
                          #{r\ 4015}#
                          #{mod\ 4016}#)
                   (if (null? #{p\ 4013}#)
                     (if (null? #{e\ 4012}#) #{r\ 4015}# #f)
                     (if (pair? #{p\ 4013}#)
                       (if (pair? #{e\ 4012}#)
                         (#{match\ 3912}#
                           (car #{e\ 4012}#)
                           (car #{p\ 4013}#)
                           #{w\ 4014}#
                           (#{match\ 3912}#
                             (cdr #{e\ 4012}#)
                             (cdr #{p\ 4013}#)
                             #{w\ 4014}#
                             #{r\ 4015}#
                             #{mod\ 4016}#)
                           #{mod\ 4016}#)
                         #f)
                       (if (eq? #{p\ 4013}# (quote each-any))
                         (begin
                           (let ((#{l\ 4033}#
                                   (#{match-each-any\ 3904}#
                                     #{e\ 4012}#
                                     #{w\ 4014}#
                                     #{mod\ 4016}#)))
                             (if #{l\ 4033}#
                               (cons #{l\ 4033}# #{r\ 4015}#)
                               #f)))
                         (begin
                           (let ((#{atom-key\ 4039}#
                                   (vector-ref #{p\ 4013}# 0)))
                             (if (eqv? #{atom-key\ 4039}# (quote each))
                               (if (null? #{e\ 4012}#)
                                 (#{match-empty\ 3906}#
                                   (vector-ref #{p\ 4013}# 1)
                                   #{r\ 4015}#)
                                 (begin
                                   (let ((#{l\ 4042}#
                                           (#{match-each\ 3900}#
                                             #{e\ 4012}#
                                             (vector-ref #{p\ 4013}# 1)
                                             #{w\ 4014}#
                                             #{mod\ 4016}#)))
                                     (if #{l\ 4042}#
                                       (letrec*
                                         ((#{collect\ 4047}#
                                            (lambda (#{l\ 4048}#)
                                              (if (null? (car #{l\ 4048}#))
                                                #{r\ 4015}#
                                                (cons (map car #{l\ 4048}#)
                                                      (#{collect\ 4047}#
                                                        (map cdr
                                                             #{l\ 4048}#)))))))
                                         (begin
                                           (#{collect\ 4047}# #{l\ 4042}#)))
                                       #f))))
                               (if (eqv? #{atom-key\ 4039}# (quote each+))
                                 (call-with-values
                                   (lambda ()
                                     (#{match-each+\ 3902}#
                                       #{e\ 4012}#
                                       (vector-ref #{p\ 4013}# 1)
                                       (vector-ref #{p\ 4013}# 2)
                                       (vector-ref #{p\ 4013}# 3)
                                       #{w\ 4014}#
                                       #{r\ 4015}#
                                       #{mod\ 4016}#))
                                   (lambda (#{xr*\ 4050}#
                                            #{y-pat\ 4051}#
                                            #{r\ 4052}#)
                                     (if #{r\ 4052}#
                                       (if (null? #{y-pat\ 4051}#)
                                         (if (null? #{xr*\ 4050}#)
                                           (#{match-empty\ 3906}#
                                             (vector-ref #{p\ 4013}# 1)
                                             #{r\ 4052}#)
                                           (#{combine\ 3908}#
                                             #{xr*\ 4050}#
                                             #{r\ 4052}#))
                                         #f)
                                       #f)))
                                 (if (eqv? #{atom-key\ 4039}# (quote free-id))
                                   (if (#{id?\ 380}# #{e\ 4012}#)
                                     (if (#{free-id=?\ 439}#
                                           (#{wrap\ 449}#
                                             #{e\ 4012}#
                                             #{w\ 4014}#
                                             #{mod\ 4016}#)
                                           (vector-ref #{p\ 4013}# 1))
                                       #{r\ 4015}#
                                       #f)
                                     #f)
                                   (if (eqv? #{atom-key\ 4039}# (quote atom))
                                     (if (equal?
                                           (vector-ref #{p\ 4013}# 1)
                                           (#{strip\ 493}#
                                             #{e\ 4012}#
                                             #{w\ 4014}#))
                                       #{r\ 4015}#
                                       #f)
                                     (if (eqv? #{atom-key\ 4039}#
                                               'vector)
                                       (if (vector? #{e\ 4012}#)
                                         (#{match\ 3912}#
                                           (vector->list #{e\ 4012}#)
                                           (vector-ref #{p\ 4013}# 1)
                                           #{w\ 4014}#
                                           #{r\ 4015}#
                                           #{mod\ 4016}#)
                                         #f)))))))))))))
               (#{match\ 3912}#
                 (lambda (#{e\ 4069}#
                          #{p\ 4070}#
                          #{w\ 4071}#
                          #{r\ 4072}#
                          #{mod\ 4073}#)
                   (if (not #{r\ 4072}#)
                     #f
                     (if (eq? #{p\ 4070}# (quote _))
                       #{r\ 4072}#
                       (if (eq? #{p\ 4070}# (quote any))
                         (cons (#{wrap\ 449}#
                                 #{e\ 4069}#
                                 #{w\ 4071}#
                                 #{mod\ 4073}#)
                               #{r\ 4072}#)
                         (if (#{syntax-object?\ 344}# #{e\ 4069}#)
                           (#{match*\ 3910}#
                             (#{syntax-object-expression\ 346}# #{e\ 4069}#)
                             #{p\ 4070}#
                             (#{join-wraps\ 431}#
                               #{w\ 4071}#
                               (#{syntax-object-wrap\ 348}# #{e\ 4069}#))
                             #{r\ 4072}#
                             (#{syntax-object-module\ 350}# #{e\ 4069}#))
                           (#{match*\ 3910}#
                             #{e\ 4069}#
                             #{p\ 4070}#
                             #{w\ 4071}#
                             #{r\ 4072}#
                             #{mod\ 4073}#))))))))
              (begin
                (set! $sc-dispatch
                  (lambda (#{e\ 4088}# #{p\ 4089}#)
                    (if (eq? #{p\ 4089}# (quote any))
                      (list #{e\ 4088}#)
                      (if (eq? #{p\ 4089}# (quote _))
                        '()
                        (if (#{syntax-object?\ 344}# #{e\ 4088}#)
                          (#{match*\ 3910}#
                            (#{syntax-object-expression\ 346}# #{e\ 4088}#)
                            #{p\ 4089}#
                            (#{syntax-object-wrap\ 348}# #{e\ 4088}#)
                            '()
                            (#{syntax-object-module\ 350}# #{e\ 4088}#))
                          (#{match*\ 3910}#
                            #{e\ 4088}#
                            #{p\ 4089}#
                            '(())
                            '()
                            #f))))))))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x\ 4100}#)
      (let ((#{tmp\ 4102}# #{x\ 4100}#))
        (let ((#{tmp\ 4103}#
                ($sc-dispatch
                  #{tmp\ 4102}#
                  '(_ () any . each-any))))
          (if #{tmp\ 4103}#
            (@apply
              (lambda (#{e1\ 4106}# #{e2\ 4107}#)
                (cons '#(syntax-object
                         begin
                         ((top)
                          #(ribcage
                            #(e1 e2)
                            #((top) (top))
                            #("i4104" "i4105"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i4101")))
                         (hygiene guile))
                      (cons #{e1\ 4106}# #{e2\ 4107}#)))
              #{tmp\ 4103}#)
            (let ((#{tmp\ 4109}#
                    ($sc-dispatch
                      #{tmp\ 4102}#
                      '(_ ((any any)) any . each-any))))
              (if #{tmp\ 4109}#
                (@apply
                  (lambda (#{out\ 4114}#
                           #{in\ 4115}#
                           #{e1\ 4116}#
                           #{e2\ 4117}#)
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(out in e1 e2)
                                #((top) (top) (top) (top))
                                #("i4110" "i4111" "i4112" "i4113"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4101")))
                             (hygiene guile))
                          #{in\ 4115}#
                          '()
                          (list #{out\ 4114}#
                                (cons '#(syntax-object
                                         begin
                                         ((top)
                                          #(ribcage
                                            #(out in e1 e2)
                                            #((top) (top) (top) (top))
                                            #("i4110" "i4111" "i4112" "i4113"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4101")))
                                         (hygiene guile))
                                      (cons #{e1\ 4116}# #{e2\ 4117}#)))))
                  #{tmp\ 4109}#)
                (let ((#{tmp\ 4119}#
                        ($sc-dispatch
                          #{tmp\ 4102}#
                          '(_ #(each (any any)) any . each-any))))
                  (if #{tmp\ 4119}#
                    (@apply
                      (lambda (#{out\ 4124}#
                               #{in\ 4125}#
                               #{e1\ 4126}#
                               #{e2\ 4127}#)
                        (list '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(out in e1 e2)
                                    #((top) (top) (top) (top))
                                    #("i4120" "i4121" "i4122" "i4123"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4101")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       list
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i4120" "i4121" "i4122" "i4123"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4101")))
                                       (hygiene guile))
                                    #{in\ 4125}#)
                              '()
                              (list #{out\ 4124}#
                                    (cons '#(syntax-object
                                             begin
                                             ((top)
                                              #(ribcage
                                                #(out in e1 e2)
                                                #((top) (top) (top) (top))
                                                #("i4120"
                                                  "i4121"
                                                  "i4122"
                                                  "i4123"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i4101")))
                                             (hygiene guile))
                                          (cons #{e1\ 4126}# #{e2\ 4127}#)))))
                      #{tmp\ 4119}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4102}#)))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x\ 4131}#)
      (let ((#{tmp\ 4133}# #{x\ 4131}#))
        (let ((#{tmp\ 4134}#
                ($sc-dispatch
                  #{tmp\ 4133}#
                  '(_ each-any . #(each ((any . any) any))))))
          (if #{tmp\ 4134}#
            (@apply
              (lambda (#{k\ 4139}#
                       #{keyword\ 4140}#
                       #{pattern\ 4141}#
                       #{template\ 4142}#)
                (list '#(syntax-object
                         lambda
                         ((top)
                          #(ribcage
                            #(k keyword pattern template)
                            #((top) (top) (top) (top))
                            #("i4135" "i4136" "i4137" "i4138"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i4132")))
                         (hygiene guile))
                      '(#(syntax-object
                          x
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i4135" "i4136" "i4137" "i4138"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i4132")))
                          (hygiene guile)))
                      (vector
                        '(#(syntax-object
                            macro-type
                            ((top)
                             #(ribcage
                               #(k keyword pattern template)
                               #((top) (top) (top) (top))
                               #("i4135" "i4136" "i4137" "i4138"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i4132")))
                            (hygiene guile))
                          .
                          #(syntax-object
                            syntax-rules
                            ((top)
                             #(ribcage
                               #(k keyword pattern template)
                               #((top) (top) (top) (top))
                               #("i4135" "i4136" "i4137" "i4138"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i4132")))
                            (hygiene guile)))
                        (cons '#(syntax-object
                                 patterns
                                 ((top)
                                  #(ribcage
                                    #(k keyword pattern template)
                                    #((top) (top) (top) (top))
                                    #("i4135" "i4136" "i4137" "i4138"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4132")))
                                 (hygiene guile))
                              #{pattern\ 4141}#))
                      (cons '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i4135" "i4136" "i4137" "i4138"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i4132")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     x
                                     ((top)
                                      #(ribcage
                                        #(k keyword pattern template)
                                        #((top) (top) (top) (top))
                                        #("i4135" "i4136" "i4137" "i4138"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4132")))
                                     (hygiene guile))
                                  (cons #{k\ 4139}#
                                        (map (lambda (#{tmp\ 4146}#
                                                      #{tmp\ 4145}#)
                                               (list (cons '#(syntax-object
                                                              dummy
                                                              ((top)
                                                               #(ribcage
                                                                 #(k
                                                                   keyword
                                                                   pattern
                                                                   template)
                                                                 #((top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4135"
                                                                   "i4136"
                                                                   "i4137"
                                                                   "i4138"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4132")))
                                                              (hygiene guile))
                                                           #{tmp\ 4145}#)
                                                     (list '#(syntax-object
                                                              syntax
                                                              ((top)
                                                               #(ribcage
                                                                 #(k
                                                                   keyword
                                                                   pattern
                                                                   template)
                                                                 #((top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4135"
                                                                   "i4136"
                                                                   "i4137"
                                                                   "i4138"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4132")))
                                                              (hygiene guile))
                                                           #{tmp\ 4146}#)))
                                             #{template\ 4142}#
                                             #{pattern\ 4141}#))))))
              #{tmp\ 4134}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 4133}#)))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x\ 4147}#)
      (let ((#{tmp\ 4149}# #{x\ 4147}#))
        (let ((#{tmp\ 4150}#
                ($sc-dispatch
                  #{tmp\ 4149}#
                  '(any #(each (any any)) any . each-any))))
          (if (if #{tmp\ 4150}#
                (@apply
                  (lambda (#{let*\ 4156}#
                           #{x\ 4157}#
                           #{v\ 4158}#
                           #{e1\ 4159}#
                           #{e2\ 4160}#)
                    (and-map identifier? #{x\ 4157}#))
                  #{tmp\ 4150}#)
                #f)
            (@apply
              (lambda (#{let*\ 4167}#
                       #{x\ 4168}#
                       #{v\ 4169}#
                       #{e1\ 4170}#
                       #{e2\ 4171}#)
                (letrec*
                  ((#{f\ 4174}#
                     (lambda (#{bindings\ 4175}#)
                       (if (null? #{bindings\ 4175}#)
                         (cons '#(syntax-object
                                  let
                                  ((top)
                                   #(ribcage () () ())
                                   #(ribcage
                                     #(f bindings)
                                     #((top) (top))
                                     #("i4172" "i4173"))
                                   #(ribcage
                                     #(let* x v e1 e2)
                                     #((top) (top) (top) (top) (top))
                                     #("i4162"
                                       "i4163"
                                       "i4164"
                                       "i4165"
                                       "i4166"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i4148")))
                                  (hygiene guile))
                               (cons '()
                                     (cons #{e1\ 4170}# #{e2\ 4171}#)))
                         (let ((#{tmp\ 4180}#
                                 (list (#{f\ 4174}# (cdr #{bindings\ 4175}#))
                                       (car #{bindings\ 4175}#))))
                           (let ((#{tmp\ 4181}#
                                   ($sc-dispatch
                                     #{tmp\ 4180}#
                                     '(any any))))
                             (if #{tmp\ 4181}#
                               (@apply
                                 (lambda (#{body\ 4184}# #{binding\ 4185}#)
                                   (list '#(syntax-object
                                            let
                                            ((top)
                                             #(ribcage
                                               #(body binding)
                                               #((top) (top))
                                               #("i4182" "i4183"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(f bindings)
                                               #((top) (top))
                                               #("i4172" "i4173"))
                                             #(ribcage
                                               #(let* x v e1 e2)
                                               #((top) (top) (top) (top) (top))
                                               #("i4162"
                                                 "i4163"
                                                 "i4164"
                                                 "i4165"
                                                 "i4166"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4148")))
                                            (hygiene guile))
                                         (list #{binding\ 4185}#)
                                         #{body\ 4184}#))
                                 #{tmp\ 4181}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4180}#))))))))
                  (begin
                    (#{f\ 4174}# (map list #{x\ 4168}# #{v\ 4169}#)))))
              #{tmp\ 4150}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 4149}#)))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x\ 4186}#)
      (let ((#{tmp\ 4188}# #{orig-x\ 4186}#))
        (let ((#{tmp\ 4189}#
                ($sc-dispatch
                  #{tmp\ 4188}#
                  '(_ #(each (any any . any))
                      (any . each-any)
                      .
                      each-any))))
          (if #{tmp\ 4189}#
            (@apply
              (lambda (#{var\ 4196}#
                       #{init\ 4197}#
                       #{step\ 4198}#
                       #{e0\ 4199}#
                       #{e1\ 4200}#
                       #{c\ 4201}#)
                (let ((#{tmp\ 4203}#
                        (map (lambda (#{v\ 4224}# #{s\ 4225}#)
                               (let ((#{tmp\ 4228}# #{s\ 4225}#))
                                 (let ((#{tmp\ 4229}#
                                         ($sc-dispatch
                                           #{tmp\ 4228}#
                                           '())))
                                   (if #{tmp\ 4229}#
                                     (@apply
                                       (lambda () #{v\ 4224}#)
                                       #{tmp\ 4229}#)
                                     (let ((#{tmp\ 4230}#
                                             ($sc-dispatch
                                               #{tmp\ 4228}#
                                               '(any))))
                                       (if #{tmp\ 4230}#
                                         (@apply
                                           (lambda (#{e\ 4232}#) #{e\ 4232}#)
                                           #{tmp\ 4230}#)
                                         (let ((#{_\ 4234}# #{tmp\ 4228}#))
                                           (syntax-violation
                                             'do
                                             "bad step expression"
                                             #{orig-x\ 4186}#
                                             #{s\ 4225}#))))))))
                             #{var\ 4196}#
                             #{step\ 4198}#)))
                  (let ((#{tmp\ 4204}#
                          ($sc-dispatch #{tmp\ 4203}# (quote each-any))))
                    (if #{tmp\ 4204}#
                      (@apply
                        (lambda (#{step\ 4206}#)
                          (let ((#{tmp\ 4207}# #{e1\ 4200}#))
                            (let ((#{tmp\ 4208}#
                                    ($sc-dispatch #{tmp\ 4207}# (quote ()))))
                              (if #{tmp\ 4208}#
                                (@apply
                                  (lambda ()
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i4205"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i4190"
                                                  "i4191"
                                                  "i4192"
                                                  "i4193"
                                                  "i4194"
                                                  "i4195"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i4187")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i4205"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i4190"
                                                  "i4191"
                                                  "i4192"
                                                  "i4193"
                                                  "i4194"
                                                  "i4195"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i4187")))
                                             (hygiene guile))
                                          (map list
                                               #{var\ 4196}#
                                               #{init\ 4197}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i4205"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i4190"
                                                        "i4191"
                                                        "i4192"
                                                        "i4193"
                                                        "i4194"
                                                        "i4195"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i4187")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         not
                                                         ((top)
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i4205"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i4190"
                                                              "i4191"
                                                              "i4192"
                                                              "i4193"
                                                              "i4194"
                                                              "i4195"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i4187")))
                                                         (hygiene guile))
                                                      #{e0\ 4199}#)
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i4205"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i4190"
                                                              "i4191"
                                                              "i4192"
                                                              "i4193"
                                                              "i4194"
                                                              "i4195"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i4187")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c\ 4201}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i4205"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4190"
                                                                            "i4191"
                                                                            "i4192"
                                                                            "i4193"
                                                                            "i4194"
                                                                            "i4195"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i4187")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step\ 4206}#)))))))
                                  #{tmp\ 4208}#)
                                (let ((#{tmp\ 4213}#
                                        ($sc-dispatch
                                          #{tmp\ 4207}#
                                          '(any . each-any))))
                                  (if #{tmp\ 4213}#
                                    (@apply
                                      (lambda (#{e1\ 4216}# #{e2\ 4217}#)
                                        (list '#(syntax-object
                                                 let
                                                 ((top)
                                                  #(ribcage
                                                    #(e1 e2)
                                                    #((top) (top))
                                                    #("i4214" "i4215"))
                                                  #(ribcage
                                                    #(step)
                                                    #((top))
                                                    #("i4205"))
                                                  #(ribcage
                                                    #(var init step e0 e1 c)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i4190"
                                                      "i4191"
                                                      "i4192"
                                                      "i4193"
                                                      "i4194"
                                                      "i4195"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(orig-x)
                                                    #((top))
                                                    #("i4187")))
                                                 (hygiene guile))
                                              '#(syntax-object
                                                 doloop
                                                 ((top)
                                                  #(ribcage
                                                    #(e1 e2)
                                                    #((top) (top))
                                                    #("i4214" "i4215"))
                                                  #(ribcage
                                                    #(step)
                                                    #((top))
                                                    #("i4205"))
                                                  #(ribcage
                                                    #(var init step e0 e1 c)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i4190"
                                                      "i4191"
                                                      "i4192"
                                                      "i4193"
                                                      "i4194"
                                                      "i4195"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(orig-x)
                                                    #((top))
                                                    #("i4187")))
                                                 (hygiene guile))
                                              (map list
                                                   #{var\ 4196}#
                                                   #{init\ 4197}#)
                                              (list '#(syntax-object
                                                       if
                                                       ((top)
                                                        #(ribcage
                                                          #(e1 e2)
                                                          #((top) (top))
                                                          #("i4214" "i4215"))
                                                        #(ribcage
                                                          #(step)
                                                          #((top))
                                                          #("i4205"))
                                                        #(ribcage
                                                          #(var
                                                            init
                                                            step
                                                            e0
                                                            e1
                                                            c)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i4190"
                                                            "i4191"
                                                            "i4192"
                                                            "i4193"
                                                            "i4194"
                                                            "i4195"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(orig-x)
                                                          #((top))
                                                          #("i4187")))
                                                       (hygiene guile))
                                                    #{e0\ 4199}#
                                                    (cons '#(syntax-object
                                                             begin
                                                             ((top)
                                                              #(ribcage
                                                                #(e1 e2)
                                                                #((top) (top))
                                                                #("i4214"
                                                                  "i4215"))
                                                              #(ribcage
                                                                #(step)
                                                                #((top))
                                                                #("i4205"))
                                                              #(ribcage
                                                                #(var
                                                                  init
                                                                  step
                                                                  e0
                                                                  e1
                                                                  c)
                                                                #((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                #("i4190"
                                                                  "i4191"
                                                                  "i4192"
                                                                  "i4193"
                                                                  "i4194"
                                                                  "i4195"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(orig-x)
                                                                #((top))
                                                                #("i4187")))
                                                             (hygiene guile))
                                                          (cons #{e1\ 4216}#
                                                                #{e2\ 4217}#))
                                                    (cons '#(syntax-object
                                                             begin
                                                             ((top)
                                                              #(ribcage
                                                                #(e1 e2)
                                                                #((top) (top))
                                                                #("i4214"
                                                                  "i4215"))
                                                              #(ribcage
                                                                #(step)
                                                                #((top))
                                                                #("i4205"))
                                                              #(ribcage
                                                                #(var
                                                                  init
                                                                  step
                                                                  e0
                                                                  e1
                                                                  c)
                                                                #((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                #("i4190"
                                                                  "i4191"
                                                                  "i4192"
                                                                  "i4193"
                                                                  "i4194"
                                                                  "i4195"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(orig-x)
                                                                #((top))
                                                                #("i4187")))
                                                             (hygiene guile))
                                                          (append
                                                            #{c\ 4201}#
                                                            (list (cons '#(syntax-object
                                                                           doloop
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(e1
                                                                                e2)
                                                                              #((top)
                                                                                (top))
                                                                              #("i4214"
                                                                                "i4215"))
                                                                            #(ribcage
                                                                              #(step)
                                                                              #((top))
                                                                              #("i4205"))
                                                                            #(ribcage
                                                                              #(var
                                                                                init
                                                                                step
                                                                                e0
                                                                                e1
                                                                                c)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i4190"
                                                                                "i4191"
                                                                                "i4192"
                                                                                "i4193"
                                                                                "i4194"
                                                                                "i4195"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(orig-x)
                                                                              #((top))
                                                                              #("i4187")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{step\ 4206}#)))))))
                                      #{tmp\ 4213}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{tmp\ 4207}#)))))))
                        #{tmp\ 4204}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 4203}#)))))
              #{tmp\ 4189}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 4188}#)))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasicons\ 4241}#
         (lambda (#{x\ 4245}# #{y\ 4246}#)
           (let ((#{tmp\ 4250}# (list #{x\ 4245}# #{y\ 4246}#)))
             (let ((#{tmp\ 4251}#
                     ($sc-dispatch #{tmp\ 4250}# (quote (any any)))))
               (if #{tmp\ 4251}#
                 (@apply
                   (lambda (#{x\ 4254}# #{y\ 4255}#)
                     (let ((#{tmp\ 4256}# #{y\ 4255}#))
                       (let ((#{tmp\ 4257}#
                               ($sc-dispatch
                                 #{tmp\ 4256}#
                                 '(#(free-id
                                     #(syntax-object
                                       quote
                                       ((top)
                                        #(ribcage
                                          #(x y)
                                          #((top) (top))
                                          #("i4252" "i4253"))
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x y)
                                          #((top) (top))
                                          #("i4247" "i4248"))
                                        #(ribcage
                                          #(quasicons
                                            quasiappend
                                            quasivector
                                            quasi)
                                          #((top) (top) (top) (top))
                                          #("i4237" "i4238" "i4239" "i4240")))
                                       (hygiene guile)))
                                   any))))
                         (if #{tmp\ 4257}#
                           (@apply
                             (lambda (#{dy\ 4259}#)
                               (let ((#{tmp\ 4260}# #{x\ 4254}#))
                                 (let ((#{tmp\ 4261}#
                                         ($sc-dispatch
                                           #{tmp\ 4260}#
                                           '(#(free-id
                                               #(syntax-object
                                                 quote
                                                 ((top)
                                                  #(ribcage
                                                    #(dy)
                                                    #((top))
                                                    #("i4258"))
                                                  #(ribcage
                                                    #(x y)
                                                    #((top) (top))
                                                    #("i4252" "i4253"))
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x y)
                                                    #((top) (top))
                                                    #("i4247" "i4248"))
                                                  #(ribcage
                                                    #(quasicons
                                                      quasiappend
                                                      quasivector
                                                      quasi)
                                                    #((top) (top) (top) (top))
                                                    #("i4237"
                                                      "i4238"
                                                      "i4239"
                                                      "i4240")))
                                                 (hygiene guile)))
                                             any))))
                                   (if #{tmp\ 4261}#
                                     (@apply
                                       (lambda (#{dx\ 4263}#)
                                         (list '#(syntax-object
                                                  quote
                                                  ((top)
                                                   #(ribcage
                                                     #(dx)
                                                     #((top))
                                                     #("i4262"))
                                                   #(ribcage
                                                     #(dy)
                                                     #((top))
                                                     #("i4258"))
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4252" "i4253"))
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4247" "i4248"))
                                                   #(ribcage
                                                     #(quasicons
                                                       quasiappend
                                                       quasivector
                                                       quasi)
                                                     #((top) (top) (top) (top))
                                                     #("i4237"
                                                       "i4238"
                                                       "i4239"
                                                       "i4240")))
                                                  (hygiene guile))
                                               (cons #{dx\ 4263}#
                                                     #{dy\ 4259}#)))
                                       #{tmp\ 4261}#)
                                     (let ((#{_\ 4265}# #{tmp\ 4260}#))
                                       (if (null? #{dy\ 4259}#)
                                         (list '#(syntax-object
                                                  list
                                                  ((top)
                                                   #(ribcage
                                                     #(_)
                                                     #((top))
                                                     #("i4264"))
                                                   #(ribcage
                                                     #(dy)
                                                     #((top))
                                                     #("i4258"))
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4252" "i4253"))
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4247" "i4248"))
                                                   #(ribcage
                                                     #(quasicons
                                                       quasiappend
                                                       quasivector
                                                       quasi)
                                                     #((top) (top) (top) (top))
                                                     #("i4237"
                                                       "i4238"
                                                       "i4239"
                                                       "i4240")))
                                                  (hygiene guile))
                                               #{x\ 4254}#)
                                         (list '#(syntax-object
                                                  cons
                                                  ((top)
                                                   #(ribcage
                                                     #(_)
                                                     #((top))
                                                     #("i4264"))
                                                   #(ribcage
                                                     #(dy)
                                                     #((top))
                                                     #("i4258"))
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4252" "i4253"))
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4247" "i4248"))
                                                   #(ribcage
                                                     #(quasicons
                                                       quasiappend
                                                       quasivector
                                                       quasi)
                                                     #((top) (top) (top) (top))
                                                     #("i4237"
                                                       "i4238"
                                                       "i4239"
                                                       "i4240")))
                                                  (hygiene guile))
                                               #{x\ 4254}#
                                               #{y\ 4255}#)))))))
                             #{tmp\ 4257}#)
                           (let ((#{tmp\ 4266}#
                                   ($sc-dispatch
                                     #{tmp\ 4256}#
                                     '(#(free-id
                                         #(syntax-object
                                           list
                                           ((top)
                                            #(ribcage
                                              #(x y)
                                              #((top) (top))
                                              #("i4252" "i4253"))
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x y)
                                              #((top) (top))
                                              #("i4247" "i4248"))
                                            #(ribcage
                                              #(quasicons
                                                quasiappend
                                                quasivector
                                                quasi)
                                              #((top) (top) (top) (top))
                                              #("i4237"
                                                "i4238"
                                                "i4239"
                                                "i4240")))
                                           (hygiene guile)))
                                       .
                                       any))))
                             (if #{tmp\ 4266}#
                               (@apply
                                 (lambda (#{stuff\ 4268}#)
                                   (cons '#(syntax-object
                                            list
                                            ((top)
                                             #(ribcage
                                               #(stuff)
                                               #((top))
                                               #("i4267"))
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i4252" "i4253"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i4247" "i4248"))
                                             #(ribcage
                                               #(quasicons
                                                 quasiappend
                                                 quasivector
                                                 quasi)
                                               #((top) (top) (top) (top))
                                               #("i4237"
                                                 "i4238"
                                                 "i4239"
                                                 "i4240")))
                                            (hygiene guile))
                                         (cons #{x\ 4254}# #{stuff\ 4268}#)))
                                 #{tmp\ 4266}#)
                               (let ((#{else\ 4270}# #{tmp\ 4256}#))
                                 (list '#(syntax-object
                                          cons
                                          ((top)
                                           #(ribcage
                                             #(else)
                                             #((top))
                                             #("i4269"))
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i4252" "i4253"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i4247" "i4248"))
                                           #(ribcage
                                             #(quasicons
                                               quasiappend
                                               quasivector
                                               quasi)
                                             #((top) (top) (top) (top))
                                             #("i4237"
                                               "i4238"
                                               "i4239"
                                               "i4240")))
                                          (hygiene guile))
                                       #{x\ 4254}#
                                       #{y\ 4255}#))))))))
                   #{tmp\ 4251}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp\ 4250}#))))))
       (#{quasiappend\ 4242}#
         (lambda (#{x\ 4271}# #{y\ 4272}#)
           (let ((#{tmp\ 4276}# (list #{x\ 4271}# #{y\ 4272}#)))
             (let ((#{tmp\ 4277}#
                     ($sc-dispatch #{tmp\ 4276}# (quote (any any)))))
               (if #{tmp\ 4277}#
                 (@apply
                   (lambda (#{x\ 4280}# #{y\ 4281}#)
                     (let ((#{tmp\ 4282}# #{y\ 4281}#))
                       (let ((#{tmp\ 4283}#
                               ($sc-dispatch
                                 #{tmp\ 4282}#
                                 '(#(free-id
                                     #(syntax-object
                                       quote
                                       ((top)
                                        #(ribcage
                                          #(x y)
                                          #((top) (top))
                                          #("i4278" "i4279"))
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x y)
                                          #((top) (top))
                                          #("i4273" "i4274"))
                                        #(ribcage
                                          #(quasicons
                                            quasiappend
                                            quasivector
                                            quasi)
                                          #((top) (top) (top) (top))
                                          #("i4237" "i4238" "i4239" "i4240")))
                                       (hygiene guile)))
                                   ()))))
                         (if #{tmp\ 4283}#
                           (@apply (lambda () #{x\ 4280}#) #{tmp\ 4283}#)
                           (let ((#{_\ 4285}# #{tmp\ 4282}#))
                             (list '#(syntax-object
                                      append
                                      ((top)
                                       #(ribcage #(_) #((top)) #("i4284"))
                                       #(ribcage
                                         #(x y)
                                         #((top) (top))
                                         #("i4278" "i4279"))
                                       #(ribcage () () ())
                                       #(ribcage () () ())
                                       #(ribcage
                                         #(x y)
                                         #((top) (top))
                                         #("i4273" "i4274"))
                                       #(ribcage
                                         #(quasicons
                                           quasiappend
                                           quasivector
                                           quasi)
                                         #((top) (top) (top) (top))
                                         #("i4237" "i4238" "i4239" "i4240")))
                                      (hygiene guile))
                                   #{x\ 4280}#
                                   #{y\ 4281}#))))))
                   #{tmp\ 4277}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp\ 4276}#))))))
       (#{quasivector\ 4243}#
         (lambda (#{x\ 4286}#)
           (let ((#{tmp\ 4289}# #{x\ 4286}#))
             (let ((#{x\ 4291}# #{tmp\ 4289}#))
               (let ((#{tmp\ 4292}# #{x\ 4291}#))
                 (let ((#{tmp\ 4293}#
                         ($sc-dispatch
                           #{tmp\ 4292}#
                           '(#(free-id
                               #(syntax-object
                                 quote
                                 ((top)
                                  #(ribcage #(x) #((top)) #("i4290"))
                                  #(ribcage () () ())
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4287"))
                                  #(ribcage
                                    #(quasicons quasiappend quasivector quasi)
                                    #((top) (top) (top) (top))
                                    #("i4237" "i4238" "i4239" "i4240")))
                                 (hygiene guile)))
                             each-any))))
                   (if #{tmp\ 4293}#
                     (@apply
                       (lambda (#{x\ 4295}#)
                         (list '#(syntax-object
                                  quote
                                  ((top)
                                   #(ribcage #(x) #((top)) #("i4294"))
                                   #(ribcage #(x) #((top)) #("i4290"))
                                   #(ribcage () () ())
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i4287"))
                                   #(ribcage
                                     #(quasicons quasiappend quasivector quasi)
                                     #((top) (top) (top) (top))
                                     #("i4237" "i4238" "i4239" "i4240")))
                                  (hygiene guile))
                               (list->vector #{x\ 4295}#)))
                       #{tmp\ 4293}#)
                     (let ((#{tmp\ 4297}#
                             ($sc-dispatch
                               #{tmp\ 4292}#
                               '(#(free-id
                                   #(syntax-object
                                     list
                                     ((top)
                                      #(ribcage #(x) #((top)) #("i4290"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4287"))
                                      #(ribcage
                                        #(quasicons
                                          quasiappend
                                          quasivector
                                          quasi)
                                        #((top) (top) (top) (top))
                                        #("i4237" "i4238" "i4239" "i4240")))
                                     (hygiene guile)))
                                 .
                                 each-any))))
                       (if #{tmp\ 4297}#
                         (@apply
                           (lambda (#{x\ 4299}#)
                             (cons '#(syntax-object
                                      vector
                                      ((top)
                                       #(ribcage #(x) #((top)) #("i4298"))
                                       #(ribcage #(x) #((top)) #("i4290"))
                                       #(ribcage () () ())
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4287"))
                                       #(ribcage
                                         #(quasicons
                                           quasiappend
                                           quasivector
                                           quasi)
                                         #((top) (top) (top) (top))
                                         #("i4237" "i4238" "i4239" "i4240")))
                                      (hygiene guile))
                                   #{x\ 4299}#))
                           #{tmp\ 4297}#)
                         (let ((#{_\ 4302}# #{tmp\ 4292}#))
                           (list '#(syntax-object
                                    list->vector
                                    ((top)
                                     #(ribcage #(_) #((top)) #("i4301"))
                                     #(ribcage #(x) #((top)) #("i4290"))
                                     #(ribcage () () ())
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i4287"))
                                     #(ribcage
                                       #(quasicons
                                         quasiappend
                                         quasivector
                                         quasi)
                                       #((top) (top) (top) (top))
                                       #("i4237" "i4238" "i4239" "i4240")))
                                    (hygiene guile))
                                 #{x\ 4291}#)))))))))))
       (#{quasi\ 4244}#
         (lambda (#{p\ 4303}# #{lev\ 4304}#)
           (let ((#{tmp\ 4307}# #{p\ 4303}#))
             (let ((#{tmp\ 4308}#
                     ($sc-dispatch
                       #{tmp\ 4307}#
                       '(#(free-id
                           #(syntax-object
                             unquote
                             ((top)
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i4305" "i4306"))
                              #(ribcage
                                #(quasicons quasiappend quasivector quasi)
                                #((top) (top) (top) (top))
                                #("i4237" "i4238" "i4239" "i4240")))
                             (hygiene guile)))
                         any))))
               (if #{tmp\ 4308}#
                 (@apply
                   (lambda (#{p\ 4310}#)
                     (if (= #{lev\ 4304}# 0)
                       #{p\ 4310}#
                       (#{quasicons\ 4241}#
                         '(#(syntax-object
                             quote
                             ((top)
                              #(ribcage #(p) #((top)) #("i4309"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i4305" "i4306"))
                              #(ribcage
                                #(quasicons quasiappend quasivector quasi)
                                #((top) (top) (top) (top))
                                #("i4237" "i4238" "i4239" "i4240")))
                             (hygiene guile))
                           #(syntax-object
                             unquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i4309"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i4305" "i4306"))
                              #(ribcage
                                #(quasicons quasiappend quasivector quasi)
                                #((top) (top) (top) (top))
                                #("i4237" "i4238" "i4239" "i4240")))
                             (hygiene guile)))
                         (#{quasi\ 4244}#
                           (list #{p\ 4310}#)
                           (1- #{lev\ 4304}#)))))
                   #{tmp\ 4308}#)
                 (let ((#{tmp\ 4311}#
                         ($sc-dispatch
                           #{tmp\ 4307}#
                           '(#(free-id
                               #(syntax-object
                                 unquote
                                 ((top)
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(p lev)
                                    #((top) (top))
                                    #("i4305" "i4306"))
                                  #(ribcage
                                    #(quasicons quasiappend quasivector quasi)
                                    #((top) (top) (top) (top))
                                    #("i4237" "i4238" "i4239" "i4240")))
                                 (hygiene guile)))
                             .
                             any))))
                   (if (if #{tmp\ 4311}#
                         (@apply
                           (lambda (#{args\ 4313}#) (= #{lev\ 4304}# 0))
                           #{tmp\ 4311}#)
                         #f)
                     (@apply
                       (lambda (#{args\ 4315}#)
                         (syntax-violation
                           'unquote
                           "unquote takes exactly one argument"
                           #{p\ 4303}#
                           (cons '#(syntax-object
                                    unquote
                                    ((top)
                                     #(ribcage #(args) #((top)) #("i4314"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i4305" "i4306"))
                                     #(ribcage
                                       #(quasicons
                                         quasiappend
                                         quasivector
                                         quasi)
                                       #((top) (top) (top) (top))
                                       #("i4237" "i4238" "i4239" "i4240")))
                                    (hygiene guile))
                                 #{args\ 4315}#)))
                       #{tmp\ 4311}#)
                     (let ((#{tmp\ 4316}#
                             ($sc-dispatch
                               #{tmp\ 4307}#
                               '((#(free-id
                                    #(syntax-object
                                      unquote-splicing
                                      ((top)
                                       #(ribcage () () ())
                                       #(ribcage
                                         #(p lev)
                                         #((top) (top))
                                         #("i4305" "i4306"))
                                       #(ribcage
                                         #(quasicons
                                           quasiappend
                                           quasivector
                                           quasi)
                                         #((top) (top) (top) (top))
                                         #("i4237" "i4238" "i4239" "i4240")))
                                      (hygiene guile)))
                                  any)
                                 .
                                 any))))
                       (if #{tmp\ 4316}#
                         (@apply
                           (lambda (#{p\ 4319}# #{q\ 4320}#)
                             (if (= #{lev\ 4304}# 0)
                               (#{quasiappend\ 4242}#
                                 #{p\ 4319}#
                                 (#{quasi\ 4244}# #{q\ 4320}# #{lev\ 4304}#))
                               (#{quasicons\ 4241}#
                                 (#{quasicons\ 4241}#
                                   '(#(syntax-object
                                       quote
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i4317" "i4318"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i4305" "i4306"))
                                        #(ribcage
                                          #(quasicons
                                            quasiappend
                                            quasivector
                                            quasi)
                                          #((top) (top) (top) (top))
                                          #("i4237" "i4238" "i4239" "i4240")))
                                       (hygiene guile))
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i4317" "i4318"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i4305" "i4306"))
                                        #(ribcage
                                          #(quasicons
                                            quasiappend
                                            quasivector
                                            quasi)
                                          #((top) (top) (top) (top))
                                          #("i4237" "i4238" "i4239" "i4240")))
                                       (hygiene guile)))
                                   (#{quasi\ 4244}#
                                     (list #{p\ 4319}#)
                                     (1- #{lev\ 4304}#)))
                                 (#{quasi\ 4244}# #{q\ 4320}# #{lev\ 4304}#))))
                           #{tmp\ 4316}#)
                         (let ((#{tmp\ 4321}#
                                 ($sc-dispatch
                                   #{tmp\ 4307}#
                                   '((#(free-id
                                        #(syntax-object
                                          unquote-splicing
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p lev)
                                             #((top) (top))
                                             #("i4305" "i4306"))
                                           #(ribcage
                                             #(quasicons
                                               quasiappend
                                               quasivector
                                               quasi)
                                             #((top) (top) (top) (top))
                                             #("i4237"
                                               "i4238"
                                               "i4239"
                                               "i4240")))
                                          (hygiene guile)))
                                      .
                                      any)
                                     .
                                     any))))
                           (if (if #{tmp\ 4321}#
                                 (@apply
                                   (lambda (#{args\ 4324}# #{q\ 4325}#)
                                     (= #{lev\ 4304}# 0))
                                   #{tmp\ 4321}#)
                                 #f)
                             (@apply
                               (lambda (#{args\ 4328}# #{q\ 4329}#)
                                 (syntax-violation
                                   'unquote-splicing
                                   "unquote-splicing takes exactly one argument"
                                   #{p\ 4303}#
                                   (cons '#(syntax-object
                                            unquote-splicing
                                            ((top)
                                             #(ribcage
                                               #(args q)
                                               #((top) (top))
                                               #("i4326" "i4327"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(p lev)
                                               #((top) (top))
                                               #("i4305" "i4306"))
                                             #(ribcage
                                               #(quasicons
                                                 quasiappend
                                                 quasivector
                                                 quasi)
                                               #((top) (top) (top) (top))
                                               #("i4237"
                                                 "i4238"
                                                 "i4239"
                                                 "i4240")))
                                            (hygiene guile))
                                         #{args\ 4328}#)))
                               #{tmp\ 4321}#)
                             (let ((#{tmp\ 4330}#
                                     ($sc-dispatch
                                       #{tmp\ 4307}#
                                       '(#(free-id
                                           #(syntax-object
                                             quasiquote
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i4305" "i4306"))
                                              #(ribcage
                                                #(quasicons
                                                  quasiappend
                                                  quasivector
                                                  quasi)
                                                #((top) (top) (top) (top))
                                                #("i4237"
                                                  "i4238"
                                                  "i4239"
                                                  "i4240")))
                                             (hygiene guile)))
                                         any))))
                               (if #{tmp\ 4330}#
                                 (@apply
                                   (lambda (#{p\ 4332}#)
                                     (#{quasicons\ 4241}#
                                       '(#(syntax-object
                                           quote
                                           ((top)
                                            #(ribcage #(p) #((top)) #("i4331"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i4305" "i4306"))
                                            #(ribcage
                                              #(quasicons
                                                quasiappend
                                                quasivector
                                                quasi)
                                              #((top) (top) (top) (top))
                                              #("i4237"
                                                "i4238"
                                                "i4239"
                                                "i4240")))
                                           (hygiene guile))
                                         #(syntax-object
                                           quasiquote
                                           ((top)
                                            #(ribcage #(p) #((top)) #("i4331"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i4305" "i4306"))
                                            #(ribcage
                                              #(quasicons
                                                quasiappend
                                                quasivector
                                                quasi)
                                              #((top) (top) (top) (top))
                                              #("i4237"
                                                "i4238"
                                                "i4239"
                                                "i4240")))
                                           (hygiene guile)))
                                       (#{quasi\ 4244}#
                                         (list #{p\ 4332}#)
                                         (1+ #{lev\ 4304}#))))
                                   #{tmp\ 4330}#)
                                 (let ((#{tmp\ 4333}#
                                         ($sc-dispatch
                                           #{tmp\ 4307}#
                                           '(any . any))))
                                   (if #{tmp\ 4333}#
                                     (@apply
                                       (lambda (#{p\ 4336}# #{q\ 4337}#)
                                         (#{quasicons\ 4241}#
                                           (#{quasi\ 4244}#
                                             #{p\ 4336}#
                                             #{lev\ 4304}#)
                                           (#{quasi\ 4244}#
                                             #{q\ 4337}#
                                             #{lev\ 4304}#)))
                                       #{tmp\ 4333}#)
                                     (let ((#{tmp\ 4338}#
                                             ($sc-dispatch
                                               #{tmp\ 4307}#
                                               '#(vector each-any))))
                                       (if #{tmp\ 4338}#
                                         (@apply
                                           (lambda (#{x\ 4340}#)
                                             (#{quasivector\ 4243}#
                                               (#{quasi\ 4244}#
                                                 #{x\ 4340}#
                                                 #{lev\ 4304}#)))
                                           #{tmp\ 4338}#)
                                         (let ((#{p\ 4343}# #{tmp\ 4307}#))
                                           (list '#(syntax-object
                                                    quote
                                                    ((top)
                                                     #(ribcage
                                                       #(p)
                                                       #((top))
                                                       #("i4342"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(p lev)
                                                       #((top) (top))
                                                       #("i4305" "i4306"))
                                                     #(ribcage
                                                       #(quasicons
                                                         quasiappend
                                                         quasivector
                                                         quasi)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i4237"
                                                         "i4238"
                                                         "i4239"
                                                         "i4240")))
                                                    (hygiene guile))
                                                 #{p\ 4343}#))))))))))))))))))))
      (begin
        (lambda (#{x\ 4344}#)
          (let ((#{tmp\ 4346}# #{x\ 4344}#))
            (let ((#{tmp\ 4347}#
                    ($sc-dispatch #{tmp\ 4346}# (quote (_ any)))))
              (if #{tmp\ 4347}#
                (@apply
                  (lambda (#{e\ 4349}#)
                    (#{quasi\ 4244}# #{e\ 4349}# 0))
                  #{tmp\ 4347}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4346}#)))))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x\ 4350}#)
      (letrec*
        ((#{read-file\ 4353}#
           (lambda (#{fn\ 4354}# #{k\ 4355}#)
             (begin
               (let ((#{p\ 4359}# (open-input-file #{fn\ 4354}#)))
                 (letrec*
                   ((#{f\ 4363}#
                      (lambda (#{x\ 4364}# #{result\ 4365}#)
                        (if (eof-object? #{x\ 4364}#)
                          (begin
                            (close-input-port #{p\ 4359}#)
                            (reverse #{result\ 4365}#))
                          (#{f\ 4363}#
                            (read #{p\ 4359}#)
                            (cons (datum->syntax #{k\ 4355}# #{x\ 4364}#)
                                  #{result\ 4365}#))))))
                   (begin
                     (#{f\ 4363}# (read #{p\ 4359}#) (quote ())))))))))
        (begin
          (let ((#{tmp\ 4366}# #{x\ 4350}#))
            (let ((#{tmp\ 4367}#
                    ($sc-dispatch #{tmp\ 4366}# (quote (any any)))))
              (if #{tmp\ 4367}#
                (@apply
                  (lambda (#{k\ 4370}# #{filename\ 4371}#)
                    (begin
                      (let ((#{fn\ 4373}# (syntax->datum #{filename\ 4371}#)))
                        (let ((#{tmp\ 4375}#
                                (#{read-file\ 4353}#
                                  #{fn\ 4373}#
                                  #{filename\ 4371}#)))
                          (let ((#{tmp\ 4376}#
                                  ($sc-dispatch
                                    #{tmp\ 4375}#
                                    'each-any)))
                            (if #{tmp\ 4376}#
                              (@apply
                                (lambda (#{exp\ 4378}#)
                                  (cons '#(syntax-object
                                           begin
                                           ((top)
                                            #(ribcage
                                              #(exp)
                                              #((top))
                                              #("i4377"))
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(fn)
                                              #((top))
                                              #("i4372"))
                                            #(ribcage
                                              #(k filename)
                                              #((top) (top))
                                              #("i4368" "i4369"))
                                            #(ribcage
                                              (read-file)
                                              ((top))
                                              ("i4352"))
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4351")))
                                           (hygiene guile))
                                        #{exp\ 4378}#))
                                #{tmp\ 4376}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 4375}#)))))))
                  #{tmp\ 4367}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4366}#)))))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x\ 4380}#)
      (let ((#{tmp\ 4382}# #{x\ 4380}#))
        (let ((#{tmp\ 4383}#
                ($sc-dispatch #{tmp\ 4382}# (quote (any any)))))
          (if #{tmp\ 4383}#
            (@apply
              (lambda (#{k\ 4386}# #{filename\ 4387}#)
                (begin
                  (let ((#{fn\ 4389}# (syntax->datum #{filename\ 4387}#)))
                    (let ((#{tmp\ 4391}#
                            (datum->syntax
                              #{filename\ 4387}#
                              (begin
                                (let ((#{t\ 4396}#
                                        (%search-load-path #{fn\ 4389}#)))
                                  (if #{t\ 4396}#
                                    #{t\ 4396}#
                                    (syntax-violation
                                      'include-from-path
                                      "file not found in path"
                                      #{x\ 4380}#
                                      #{filename\ 4387}#)))))))
                      (let ((#{fn\ 4393}# #{tmp\ 4391}#))
                        (list '#(syntax-object
                                 include
                                 ((top)
                                  #(ribcage #(fn) #((top)) #("i4392"))
                                  #(ribcage () () ())
                                  #(ribcage () () ())
                                  #(ribcage #(fn) #((top)) #("i4388"))
                                  #(ribcage
                                    #(k filename)
                                    #((top) (top))
                                    #("i4384" "i4385"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4381")))
                                 (hygiene guile))
                              #{fn\ 4393}#))))))
              #{tmp\ 4383}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 4382}#)))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x\ 4398}#)
      (let ((#{tmp\ 4400}# #{x\ 4398}#))
        (let ((#{tmp\ 4401}#
                ($sc-dispatch #{tmp\ 4400}# (quote (_ any)))))
          (if #{tmp\ 4401}#
            (@apply
              (lambda (#{e\ 4403}#)
                (syntax-violation
                  'unquote
                  "expression not valid outside of quasiquote"
                  #{x\ 4398}#))
              #{tmp\ 4401}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 4400}#)))))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x\ 4404}#)
      (let ((#{tmp\ 4406}# #{x\ 4404}#))
        (let ((#{tmp\ 4407}#
                ($sc-dispatch #{tmp\ 4406}# (quote (_ any)))))
          (if #{tmp\ 4407}#
            (@apply
              (lambda (#{e\ 4409}#)
                (syntax-violation
                  'unquote-splicing
                  "expression not valid outside of quasiquote"
                  #{x\ 4404}#))
              #{tmp\ 4407}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 4406}#)))))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x\ 4410}#)
      (let ((#{tmp\ 4412}# #{x\ 4410}#))
        (let ((#{tmp\ 4413}#
                ($sc-dispatch
                  #{tmp\ 4412}#
                  '(_ any any . each-any))))
          (if #{tmp\ 4413}#
            (@apply
              (lambda (#{e\ 4417}# #{m1\ 4418}# #{m2\ 4419}#)
                (let ((#{tmp\ 4421}#
                        (letrec*
                          ((#{f\ 4427}#
                             (lambda (#{clause\ 4428}# #{clauses\ 4429}#)
                               (if (null? #{clauses\ 4429}#)
                                 (let ((#{tmp\ 4431}# #{clause\ 4428}#))
                                   (let ((#{tmp\ 4432}#
                                           ($sc-dispatch
                                             #{tmp\ 4431}#
                                             '(#(free-id
                                                 #(syntax-object
                                                   else
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f clause clauses)
                                                      #((top) (top) (top))
                                                      #("i4424"
                                                        "i4425"
                                                        "i4426"))
                                                    #(ribcage
                                                      #(e m1 m2)
                                                      #((top) (top) (top))
                                                      #("i4414"
                                                        "i4415"
                                                        "i4416"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4411")))
                                                   (hygiene guile)))
                                               any
                                               .
                                               each-any))))
                                     (if #{tmp\ 4432}#
                                       (@apply
                                         (lambda (#{e1\ 4435}# #{e2\ 4436}#)
                                           (cons '#(syntax-object
                                                    begin
                                                    ((top)
                                                     #(ribcage
                                                       #(e1 e2)
                                                       #((top) (top))
                                                       #("i4433" "i4434"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i4424"
                                                         "i4425"
                                                         "i4426"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i4414"
                                                         "i4415"
                                                         "i4416"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4411")))
                                                    (hygiene guile))
                                                 (cons #{e1\ 4435}#
                                                       #{e2\ 4436}#)))
                                         #{tmp\ 4432}#)
                                       (let ((#{tmp\ 4438}#
                                               ($sc-dispatch
                                                 #{tmp\ 4431}#
                                                 '(each-any any . each-any))))
                                         (if #{tmp\ 4438}#
                                           (@apply
                                             (lambda (#{k\ 4442}#
                                                      #{e1\ 4443}#
                                                      #{e2\ 4444}#)
                                               (list '#(syntax-object
                                                        if
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i4439"
                                                             "i4440"
                                                             "i4441"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i4424"
                                                             "i4425"
                                                             "i4426"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i4414"
                                                             "i4415"
                                                             "i4416"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4411")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              memv
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4439"
                                                                   "i4440"
                                                                   "i4441"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4424"
                                                                   "i4425"
                                                                   "i4426"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4414"
                                                                   "i4415"
                                                                   "i4416"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4411")))
                                                              (hygiene guile))
                                                           '#(syntax-object
                                                              t
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4439"
                                                                   "i4440"
                                                                   "i4441"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4424"
                                                                   "i4425"
                                                                   "i4426"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4414"
                                                                   "i4415"
                                                                   "i4416"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4411")))
                                                              (hygiene guile))
                                                           (list '#(syntax-object
                                                                    quote
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(k
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4439"
                                                                         "i4440"
                                                                         "i4441"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(f
                                                                         clause
                                                                         clauses)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4424"
                                                                         "i4425"
                                                                         "i4426"))
                                                                     #(ribcage
                                                                       #(e
                                                                         m1
                                                                         m2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4414"
                                                                         "i4415"
                                                                         "i4416"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("i4411")))
                                                                    (hygiene
                                                                      guile))
                                                                 #{k\ 4442}#))
                                                     (cons '#(syntax-object
                                                              begin
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4439"
                                                                   "i4440"
                                                                   "i4441"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4424"
                                                                   "i4425"
                                                                   "i4426"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4414"
                                                                   "i4415"
                                                                   "i4416"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4411")))
                                                              (hygiene guile))
                                                           (cons #{e1\ 4443}#
                                                                 #{e2\ 4444}#))))
                                             #{tmp\ 4438}#)
                                           (let ((#{_\ 4448}# #{tmp\ 4431}#))
                                             (syntax-violation
                                               'case
                                               "bad clause"
                                               #{x\ 4410}#
                                               #{clause\ 4428}#)))))))
                                 (let ((#{tmp\ 4450}#
                                         (#{f\ 4427}#
                                           (car #{clauses\ 4429}#)
                                           (cdr #{clauses\ 4429}#))))
                                   (let ((#{rest\ 4452}# #{tmp\ 4450}#))
                                     (let ((#{tmp\ 4453}# #{clause\ 4428}#))
                                       (let ((#{tmp\ 4454}#
                                               ($sc-dispatch
                                                 #{tmp\ 4453}#
                                                 '(each-any any . each-any))))
                                         (if #{tmp\ 4454}#
                                           (@apply
                                             (lambda (#{k\ 4458}#
                                                      #{e1\ 4459}#
                                                      #{e2\ 4460}#)
                                               (list '#(syntax-object
                                                        if
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i4455"
                                                             "i4456"
                                                             "i4457"))
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i4451"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i4424"
                                                             "i4425"
                                                             "i4426"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i4414"
                                                             "i4415"
                                                             "i4416"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4411")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              memv
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4455"
                                                                   "i4456"
                                                                   "i4457"))
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i4451"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4424"
                                                                   "i4425"
                                                                   "i4426"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4414"
                                                                   "i4415"
                                                                   "i4416"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4411")))
                                                              (hygiene guile))
                                                           '#(syntax-object
                                                              t
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4455"
                                                                   "i4456"
                                                                   "i4457"))
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i4451"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4424"
                                                                   "i4425"
                                                                   "i4426"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4414"
                                                                   "i4415"
                                                                   "i4416"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4411")))
                                                              (hygiene guile))
                                                           (list '#(syntax-object
                                                                    quote
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(k
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4455"
                                                                         "i4456"
                                                                         "i4457"))
                                                                     #(ribcage
                                                                       #(rest)
                                                                       #((top))
                                                                       #("i4451"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(f
                                                                         clause
                                                                         clauses)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4424"
                                                                         "i4425"
                                                                         "i4426"))
                                                                     #(ribcage
                                                                       #(e
                                                                         m1
                                                                         m2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4414"
                                                                         "i4415"
                                                                         "i4416"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("i4411")))
                                                                    (hygiene
                                                                      guile))
                                                                 #{k\ 4458}#))
                                                     (cons '#(syntax-object
                                                              begin
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4455"
                                                                   "i4456"
                                                                   "i4457"))
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i4451"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4424"
                                                                   "i4425"
                                                                   "i4426"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4414"
                                                                   "i4415"
                                                                   "i4416"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4411")))
                                                              (hygiene guile))
                                                           (cons #{e1\ 4459}#
                                                                 #{e2\ 4460}#))
                                                     #{rest\ 4452}#))
                                             #{tmp\ 4454}#)
                                           (let ((#{_\ 4464}# #{tmp\ 4453}#))
                                             (syntax-violation
                                               'case
                                               "bad clause"
                                               #{x\ 4410}#
                                               #{clause\ 4428}#)))))))))))
                          (begin (#{f\ 4427}# #{m1\ 4418}# #{m2\ 4419}#)))))
                  (let ((#{body\ 4423}# #{tmp\ 4421}#))
                    (list '#(syntax-object
                             let
                             ((top)
                              #(ribcage #(body) #((top)) #("i4422"))
                              #(ribcage
                                #(e m1 m2)
                                #((top) (top) (top))
                                #("i4414" "i4415" "i4416"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4411")))
                             (hygiene guile))
                          (list (list '#(syntax-object
                                         t
                                         ((top)
                                          #(ribcage
                                            #(body)
                                            #((top))
                                            #("i4422"))
                                          #(ribcage
                                            #(e m1 m2)
                                            #((top) (top) (top))
                                            #("i4414" "i4415" "i4416"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4411")))
                                         (hygiene guile))
                                      #{e\ 4417}#))
                          #{body\ 4423}#))))
              #{tmp\ 4413}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 4412}#)))))))

(define make-variable-transformer
  (lambda (#{proc\ 4465}#)
    (if (procedure? #{proc\ 4465}#)
      (begin
        (letrec*
          ((#{trans\ 4468}#
             (lambda (#{x\ 4469}#)
               (#{proc\ 4465}# #{x\ 4469}#))))
          (begin
            (set-procedure-property!
              #{trans\ 4468}#
              'variable-transformer
              #t)
            #{trans\ 4468}#)))
      (error "variable transformer not a procedure"
             #{proc\ 4465}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x\ 4471}#)
      (let ((#{tmp\ 4473}# #{x\ 4471}#))
        (let ((#{tmp\ 4474}#
                ($sc-dispatch #{tmp\ 4473}# (quote (_ any)))))
          (if #{tmp\ 4474}#
            (@apply
              (lambda (#{e\ 4476}#)
                (list '#(syntax-object
                         lambda
                         ((top)
                          #(ribcage #(e) #((top)) #("i4475"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i4472")))
                         (hygiene guile))
                      '(#(syntax-object
                          x
                          ((top)
                           #(ribcage #(e) #((top)) #("i4475"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i4472")))
                          (hygiene guile)))
                      '#((#(syntax-object
                            macro-type
                            ((top)
                             #(ribcage #(e) #((top)) #("i4475"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i4472")))
                            (hygiene guile))
                          .
                          #(syntax-object
                            identifier-syntax
                            ((top)
                             #(ribcage #(e) #((top)) #("i4475"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i4472")))
                            (hygiene guile))))
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage #(e) #((top)) #("i4475"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i4472")))
                               (hygiene guile))
                            '#(syntax-object
                               x
                               ((top)
                                #(ribcage #(e) #((top)) #("i4475"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i4472")))
                               (hygiene guile))
                            '()
                            (list '#(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i4475"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4472")))
                                     (hygiene guile))
                                  '(#(syntax-object
                                      identifier?
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i4475"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4472")))
                                      (hygiene guile))
                                    (#(syntax-object
                                       syntax
                                       ((top)
                                        #(ribcage #(e) #((top)) #("i4475"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4472")))
                                       (hygiene guile))
                                     #(syntax-object
                                       id
                                       ((top)
                                        #(ribcage #(e) #((top)) #("i4475"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4472")))
                                       (hygiene guile))))
                                  (list '#(syntax-object
                                           syntax
                                           ((top)
                                            #(ribcage #(e) #((top)) #("i4475"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4472")))
                                           (hygiene guile))
                                        #{e\ 4476}#))
                            (list '(#(syntax-object
                                      _
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i4475"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4472")))
                                      (hygiene guile))
                                    #(syntax-object
                                      x
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i4475"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4472")))
                                      (hygiene guile))
                                    #(syntax-object
                                      ...
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i4475"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4472")))
                                      (hygiene guile)))
                                  (list '#(syntax-object
                                           syntax
                                           ((top)
                                            #(ribcage #(e) #((top)) #("i4475"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4472")))
                                           (hygiene guile))
                                        (cons #{e\ 4476}#
                                              '(#(syntax-object
                                                  x
                                                  ((top)
                                                   #(ribcage
                                                     #(e)
                                                     #((top))
                                                     #("i4475"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4472")))
                                                  (hygiene guile))
                                                #(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage
                                                     #(e)
                                                     #((top))
                                                     #("i4475"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4472")))
                                                  (hygiene guile)))))))))
              #{tmp\ 4474}#)
            (let ((#{tmp\ 4477}#
                    ($sc-dispatch
                      #{tmp\ 4473}#
                      '(_ (any any)
                          ((#(free-id
                              #(syntax-object
                                set!
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4472")))
                                (hygiene guile)))
                            any
                            any)
                           any)))))
              (if (if #{tmp\ 4477}#
                    (@apply
                      (lambda (#{id\ 4483}#
                               #{exp1\ 4484}#
                               #{var\ 4485}#
                               #{val\ 4486}#
                               #{exp2\ 4487}#)
                        (if (identifier? #{id\ 4483}#)
                          (identifier? #{var\ 4485}#)
                          #f))
                      #{tmp\ 4477}#)
                    #f)
                (@apply
                  (lambda (#{id\ 4495}#
                           #{exp1\ 4496}#
                           #{var\ 4497}#
                           #{val\ 4498}#
                           #{exp2\ 4499}#)
                    (list '#(syntax-object
                             make-variable-transformer
                             ((top)
                              #(ribcage
                                #(id exp1 var val exp2)
                                #((top) (top) (top) (top) (top))
                                #("i4490" "i4491" "i4492" "i4493" "i4494"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4472")))
                             (hygiene guile))
                          (list '#(syntax-object
                                   lambda
                                   ((top)
                                    #(ribcage
                                      #(id exp1 var val exp2)
                                      #((top) (top) (top) (top) (top))
                                      #("i4490"
                                        "i4491"
                                        "i4492"
                                        "i4493"
                                        "i4494"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4472")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    x
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i4490"
                                         "i4491"
                                         "i4492"
                                         "i4493"
                                         "i4494"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i4472")))
                                    (hygiene guile)))
                                '#((#(syntax-object
                                      macro-type
                                      ((top)
                                       #(ribcage
                                         #(id exp1 var val exp2)
                                         #((top) (top) (top) (top) (top))
                                         #("i4490"
                                           "i4491"
                                           "i4492"
                                           "i4493"
                                           "i4494"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4472")))
                                      (hygiene guile))
                                    .
                                    #(syntax-object
                                      variable-transformer
                                      ((top)
                                       #(ribcage
                                         #(id exp1 var val exp2)
                                         #((top) (top) (top) (top) (top))
                                         #("i4490"
                                           "i4491"
                                           "i4492"
                                           "i4493"
                                           "i4494"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4472")))
                                      (hygiene guile))))
                                (list '#(syntax-object
                                         syntax-case
                                         ((top)
                                          #(ribcage
                                            #(id exp1 var val exp2)
                                            #((top) (top) (top) (top) (top))
                                            #("i4490"
                                              "i4491"
                                              "i4492"
                                              "i4493"
                                              "i4494"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4472")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         x
                                         ((top)
                                          #(ribcage
                                            #(id exp1 var val exp2)
                                            #((top) (top) (top) (top) (top))
                                            #("i4490"
                                              "i4491"
                                              "i4492"
                                              "i4493"
                                              "i4494"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4472")))
                                         (hygiene guile))
                                      '(#(syntax-object
                                          set!
                                          ((top)
                                           #(ribcage
                                             #(id exp1 var val exp2)
                                             #((top) (top) (top) (top) (top))
                                             #("i4490"
                                               "i4491"
                                               "i4492"
                                               "i4493"
                                               "i4494"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i4472")))
                                          (hygiene guile)))
                                      (list (list '#(syntax-object
                                                     set!
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4490"
                                                          "i4491"
                                                          "i4492"
                                                          "i4493"
                                                          "i4494"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4472")))
                                                     (hygiene guile))
                                                  #{var\ 4497}#
                                                  #{val\ 4498}#)
                                            (list '#(syntax-object
                                                     syntax
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4490"
                                                          "i4491"
                                                          "i4492"
                                                          "i4493"
                                                          "i4494"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4472")))
                                                     (hygiene guile))
                                                  #{exp2\ 4499}#))
                                      (list (cons #{id\ 4495}#
                                                  '(#(syntax-object
                                                      x
                                                      ((top)
                                                       #(ribcage
                                                         #(id
                                                           exp1
                                                           var
                                                           val
                                                           exp2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4490"
                                                           "i4491"
                                                           "i4492"
                                                           "i4493"
                                                           "i4494"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4472")))
                                                      (hygiene guile))
                                                    #(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage
                                                         #(id
                                                           exp1
                                                           var
                                                           val
                                                           exp2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4490"
                                                           "i4491"
                                                           "i4492"
                                                           "i4493"
                                                           "i4494"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4472")))
                                                      (hygiene guile))))
                                            (list '#(syntax-object
                                                     syntax
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4490"
                                                          "i4491"
                                                          "i4492"
                                                          "i4493"
                                                          "i4494"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4472")))
                                                     (hygiene guile))
                                                  (cons #{exp1\ 4496}#
                                                        '(#(syntax-object
                                                            x
                                                            ((top)
                                                             #(ribcage
                                                               #(id
                                                                 exp1
                                                                 var
                                                                 val
                                                                 exp2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4490"
                                                                 "i4491"
                                                                 "i4492"
                                                                 "i4493"
                                                                 "i4494"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4472")))
                                                            (hygiene guile))
                                                          #(syntax-object
                                                            ...
                                                            ((top)
                                                             #(ribcage
                                                               #(id
                                                                 exp1
                                                                 var
                                                                 val
                                                                 exp2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4490"
                                                                 "i4491"
                                                                 "i4492"
                                                                 "i4493"
                                                                 "i4494"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4472")))
                                                            (hygiene
                                                              guile))))))
                                      (list #{id\ 4495}#
                                            (list '#(syntax-object
                                                     identifier?
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4490"
                                                          "i4491"
                                                          "i4492"
                                                          "i4493"
                                                          "i4494"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4472")))
                                                     (hygiene guile))
                                                  (list '#(syntax-object
                                                           syntax
                                                           ((top)
                                                            #(ribcage
                                                              #(id
                                                                exp1
                                                                var
                                                                val
                                                                exp2)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("i4490"
                                                                "i4491"
                                                                "i4492"
                                                                "i4493"
                                                                "i4494"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(x)
                                                              #((top))
                                                              #("i4472")))
                                                           (hygiene guile))
                                                        #{id\ 4495}#))
                                            (list '#(syntax-object
                                                     syntax
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4490"
                                                          "i4491"
                                                          "i4492"
                                                          "i4493"
                                                          "i4494"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4472")))
                                                     (hygiene guile))
                                                  #{exp1\ 4496}#))))))
                  #{tmp\ 4477}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4473}#)))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x\ 4500}#)
      (let ((#{tmp\ 4502}# #{x\ 4500}#))
        (let ((#{tmp\ 4503}#
                ($sc-dispatch
                  #{tmp\ 4502}#
                  '(_ (any . any) any . each-any))))
          (if #{tmp\ 4503}#
            (@apply
              (lambda (#{id\ 4508}#
                       #{args\ 4509}#
                       #{b0\ 4510}#
                       #{b1\ 4511}#)
                (list '#(syntax-object
                         define
                         ((top)
                          #(ribcage
                            #(id args b0 b1)
                            #((top) (top) (top) (top))
                            #("i4504" "i4505" "i4506" "i4507"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i4501")))
                         (hygiene guile))
                      #{id\ 4508}#
                      (cons '#(syntax-object
                               lambda*
                               ((top)
                                #(ribcage
                                  #(id args b0 b1)
                                  #((top) (top) (top) (top))
                                  #("i4504" "i4505" "i4506" "i4507"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i4501")))
                               (hygiene guile))
                            (cons #{args\ 4509}#
                                  (cons #{b0\ 4510}# #{b1\ 4511}#)))))
              #{tmp\ 4503}#)
            (let ((#{tmp\ 4513}#
                    ($sc-dispatch #{tmp\ 4502}# (quote (_ any any)))))
              (if (if #{tmp\ 4513}#
                    (@apply
                      (lambda (#{id\ 4516}# #{val\ 4517}#)
                        (identifier?
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage
                                #(id val)
                                #((top) (top))
                                #("i4514" "i4515"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4501")))
                             (hygiene guile))))
                      #{tmp\ 4513}#)
                    #f)
                (@apply
                  (lambda (#{id\ 4520}# #{val\ 4521}#)
                    (list '#(syntax-object
                             define
                             ((top)
                              #(ribcage
                                #(id val)
                                #((top) (top))
                                #("i4518" "i4519"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4501")))
                             (hygiene guile))
                          #{id\ 4520}#
                          #{val\ 4521}#))
                  #{tmp\ 4513}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4502}#)))))))))

