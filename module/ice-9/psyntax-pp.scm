(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(let ((session-id-4256 (if #f #f))
      (transformer-environment-4317 (if #f #f)))
  (letrec*
    ((top-level-eval-hook-4254
       (lambda (x-27424 mod-27425)
         (primitive-eval x-27424)))
     (get-global-definition-hook-4258
       (lambda (symbol-15687 module-15688)
         (begin
           (if (if (not module-15688) (current-module) #f)
             (warn "module system is booted, we should have a module"
                   symbol-15687))
           (let ((v-15689
                   (module-variable
                     (if module-15688
                       (resolve-module (cdr module-15688))
                       (current-module))
                     symbol-15687)))
             (if v-15689
               (if (variable-bound? v-15689)
                 (let ((val-15691 (variable-ref v-15689)))
                   (if (macro? val-15691)
                     (if (macro-type val-15691)
                       (cons (macro-type val-15691)
                             (macro-binding val-15691))
                       #f)
                     #f))
                 #f)
               #f)))))
     (maybe-name-value!-4260
       (lambda (name-15968 val-15969)
         (if (if (struct? val-15969)
               (eq? (struct-vtable val-15969)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((meta-15976 (struct-ref val-15969 1)))
             (if (not (assq 'name meta-15976))
               (let ((v-15981
                       (cons (cons 'name name-15968) meta-15976)))
                 (struct-set! val-15969 1 v-15981)))))))
     (build-application-4262
       (lambda (source-15693 fun-exp-15694 arg-exps-15695)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 11)
           source-15693
           fun-exp-15694
           arg-exps-15695)))
     (build-conditional-4263
       (lambda (source-15701
                test-exp-15702
                then-exp-15703
                else-exp-15704)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 10)
           source-15701
           test-exp-15702
           then-exp-15703
           else-exp-15704)))
     (build-dynlet-4264
       (lambda (source-15711 fluids-15712 vals-15713 body-15714)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 17)
           source-15711
           fluids-15712
           vals-15713
           body-15714)))
     (build-lexical-reference-4265
       (lambda (type-27426 source-27427 name-27428 var-27429)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           source-27427
           name-27428
           var-27429)))
     (build-lexical-assignment-4266
       (lambda (source-15721 name-15722 var-15723 exp-15724)
         (begin
           (if (if (struct? exp-15724)
                 (eq? (struct-vtable exp-15724)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((meta-15740 (struct-ref exp-15724 1)))
               (if (not (assq 'name meta-15740))
                 (let ((v-15747
                         (cons (cons 'name name-15722) meta-15740)))
                   (struct-set! exp-15724 1 v-15747)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 4)
             source-15721
             name-15722
             var-15723
             exp-15724))))
     (analyze-variable-4267
       (lambda (mod-27435
                var-27436
                modref-cont-27437
                bare-cont-27438)
         (if (not mod-27435)
           (bare-cont-27438 var-27436)
           (let ((kind-27439 (car mod-27435))
                 (mod-27440 (cdr mod-27435)))
             (if (eqv? kind-27439 'public)
               (modref-cont-27437 mod-27440 var-27436 #t)
               (if (eqv? kind-27439 'private)
                 (if (not (equal? mod-27440 (module-name (current-module))))
                   (modref-cont-27437 mod-27440 var-27436 #f)
                   (bare-cont-27438 var-27436))
                 (if (eqv? kind-27439 'bare)
                   (bare-cont-27438 var-27436)
                   (if (eqv? kind-27439 'hygiene)
                     (if (if (not (equal?
                                    mod-27440
                                    (module-name (current-module))))
                           (module-variable
                             (resolve-module mod-27440)
                             var-27436)
                           #f)
                       (modref-cont-27437 mod-27440 var-27436 #f)
                       (bare-cont-27438 var-27436))
                     (syntax-violation
                       #f
                       "bad module kind"
                       var-27436
                       mod-27440)))))))))
     (build-global-reference-4268
       (lambda (source-27467 var-27468 mod-27469)
         (analyze-variable-4267
           mod-27469
           var-27468
           (lambda (mod-27472 var-27473 public?-27474)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 5)
               source-27467
               mod-27472
               var-27473
               public?-27474))
           (lambda (var-27482)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 7)
               source-27467
               var-27482)))))
     (build-global-assignment-4269
       (lambda (source-15756 var-15757 exp-15758 mod-15759)
         (begin
           (if (if (struct? exp-15758)
                 (eq? (struct-vtable exp-15758)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((meta-15775 (struct-ref exp-15758 1)))
               (if (not (assq 'name meta-15775))
                 (let ((v-15782
                         (cons (cons 'name var-15757) meta-15775)))
                   (struct-set! exp-15758 1 v-15782)))))
           (analyze-variable-4267
             mod-15759
             var-15757
             (lambda (mod-15787 var-15788 public?-15789)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 6)
                 source-15756
                 mod-15787
                 var-15788
                 public?-15789
                 exp-15758))
             (lambda (var-15797)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 8)
                 source-15756
                 var-15797
                 exp-15758))))))
     (build-global-definition-4270
       (lambda (source-27488 var-27489 exp-27490)
         (begin
           (if (if (struct? exp-27490)
                 (eq? (struct-vtable exp-27490)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((meta-27506 (struct-ref exp-27490 1)))
               (if (not (assq 'name meta-27506))
                 (let ((v-27513
                         (cons (cons 'name var-27489) meta-27506)))
                   (struct-set! exp-27490 1 v-27513)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             source-27488
             var-27489
             exp-27490))))
     (build-simple-lambda-4271
       (lambda (src-15803
                req-15804
                rest-15805
                vars-15806
                meta-15807
                exp-15808)
         (let ((body-15814
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 14)
                   src-15803
                   req-15804
                   #f
                   rest-15805
                   #f
                   '()
                   vars-15806
                   exp-15808
                   #f)))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             src-15803
             meta-15807
             body-15814))))
     (build-sequence-4276
       (lambda (src-27521 exps-27522)
         (if (null? (cdr exps-27522))
           (car exps-27522)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 12)
             src-27521
             exps-27522))))
     (build-let-4277
       (lambda (src-15826
                ids-15827
                vars-15828
                val-exps-15829
                body-exp-15830)
         (begin
           (for-each
             maybe-name-value!-4260
             ids-15827
             val-exps-15829)
           (if (null? vars-15828)
             body-exp-15830
             (make-struct/no-tail
               (vector-ref %expanded-vtables 15)
               src-15826
               ids-15827
               vars-15828
               val-exps-15829
               body-exp-15830)))))
     (build-named-let-4278
       (lambda (src-15854
                ids-15855
                vars-15856
                val-exps-15857
                body-exp-15858)
         (let ((f-15859 (car vars-15856))
               (f-name-15860 (car ids-15855))
               (vars-15861 (cdr vars-15856))
               (ids-15862 (cdr ids-15855)))
           (let ((proc-15863
                   (let ((body-15883
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 14)
                             src-15854
                             ids-15862
                             #f
                             #f
                             #f
                             '()
                             vars-15861
                             body-exp-15858
                             #f)))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 13)
                       src-15854
                       '()
                       body-15883))))
             (begin
               (if (if (struct? proc-15863)
                     (eq? (struct-vtable proc-15863)
                          (vector-ref %expanded-vtables 13))
                     #f)
                 (let ((meta-15907 (struct-ref proc-15863 1)))
                   (if (not (assq 'name meta-15907))
                     (let ((v-15914
                             (cons (cons 'name f-name-15860) meta-15907)))
                       (struct-set! proc-15863 1 v-15914)))))
               (for-each
                 maybe-name-value!-4260
                 ids-15862
                 val-exps-15857)
               (let ((names-15938 (list f-name-15860))
                     (gensyms-15939 (list f-15859))
                     (vals-15940 (list proc-15863))
                     (body-15941
                       (let ((fun-exp-15945
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 3)
                                 src-15854
                                 f-name-15860
                                 f-15859)))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           src-15854
                           fun-exp-15945
                           val-exps-15857))))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 16)
                   src-15854
                   #f
                   names-15938
                   gensyms-15939
                   vals-15940
                   body-15941)))))))
     (build-letrec-4279
       (lambda (src-15961
                in-order?-15962
                ids-15963
                vars-15964
                val-exps-15965
                body-exp-15966)
         (if (null? vars-15964)
           body-exp-15966
           (begin
             (for-each
               maybe-name-value!-4260
               ids-15963
               val-exps-15965)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 16)
               src-15961
               in-order?-15962
               ids-15963
               vars-15964
               val-exps-15965
               body-exp-15966)))))
     (source-annotation-4288
       (lambda (x-15992)
         (if (if (vector? x-15992)
               (if (= (vector-length x-15992) 4)
                 (eq? (vector-ref x-15992 0) 'syntax-object)
                 #f)
               #f)
           (source-annotation-4288 (vector-ref x-15992 1))
           (let ((props-16007 (source-properties x-15992)))
             (if (pair? props-16007) props-16007 #f)))))
     (extend-env-4289
       (lambda (labels-16009 bindings-16010 r-16011)
         (if (null? labels-16009)
           r-16011
           (extend-env-4289
             (cdr labels-16009)
             (cdr bindings-16010)
             (cons (cons (car labels-16009) (car bindings-16010))
                   r-16011)))))
     (extend-var-env-4290
       (lambda (labels-16012 vars-16013 r-16014)
         (if (null? labels-16012)
           r-16014
           (extend-var-env-4290
             (cdr labels-16012)
             (cdr vars-16013)
             (cons (cons (car labels-16012)
                         (cons 'lexical (car vars-16013)))
                   r-16014)))))
     (macros-only-env-4291
       (lambda (r-16015)
         (if (null? r-16015)
           '()
           (let ((a-16016 (car r-16015)))
             (if (eq? (car (cdr a-16016)) 'macro)
               (cons a-16016
                     (macros-only-env-4291 (cdr r-16015)))
               (macros-only-env-4291 (cdr r-16015)))))))
     (global-extend-4293
       (lambda (type-16018 sym-16019 val-16020)
         (module-define!
           (current-module)
           sym-16019
           (make-syntax-transformer
             sym-16019
             type-16018
             val-16020))))
     (id?-4295
       (lambda (x-9601)
         (if (symbol? x-9601)
           #t
           (if (if (vector? x-9601)
                 (if (= (vector-length x-9601) 4)
                   (eq? (vector-ref x-9601 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref x-9601 1))
             #f))))
     (gen-labels-4298
       (lambda (ls-16030)
         (if (null? ls-16030)
           '()
           (cons (string-append
                   "l-"
                   (session-id-4256)
                   (symbol->string (gensym "-")))
                 (gen-labels-4298 (cdr ls-16030))))))
     (make-binding-wrap-4309
       (lambda (ids-16034 labels-16035 w-16036)
         (if (null? ids-16034)
           w-16036
           (cons (car w-16036)
                 (cons (let ((labelvec-16037 (list->vector labels-16035)))
                         (let ((n-16038 (vector-length labelvec-16037)))
                           (let ((symnamevec-16039 (make-vector n-16038))
                                 (marksvec-16040 (make-vector n-16038)))
                             (begin
                               (letrec*
                                 ((f-16041
                                    (lambda (ids-16044 i-16045)
                                      (if (not (null? ids-16044))
                                        (call-with-values
                                          (lambda ()
                                            (let ((x-16048 (car ids-16044)))
                                              (if (if (vector? x-16048)
                                                    (if (= (vector-length
                                                             x-16048)
                                                           4)
                                                      (eq? (vector-ref
                                                             x-16048
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (values
                                                  (vector-ref x-16048 1)
                                                  (let ((m1-16064
                                                          (car w-16036))
                                                        (m2-16065
                                                          (car (vector-ref
                                                                 x-16048
                                                                 2))))
                                                    (if (null? m2-16065)
                                                      m1-16064
                                                      (append
                                                        m1-16064
                                                        m2-16065))))
                                                (values
                                                  x-16048
                                                  (car w-16036)))))
                                          (lambda (symname-16085 marks-16086)
                                            (begin
                                              (vector-set!
                                                symnamevec-16039
                                                i-16045
                                                symname-16085)
                                              (vector-set!
                                                marksvec-16040
                                                i-16045
                                                marks-16086)
                                              (f-16041
                                                (cdr ids-16044)
                                                (#{1+}# i-16045)))))))))
                                 (f-16041 ids-16034 0))
                               (vector
                                 'ribcage
                                 symnamevec-16039
                                 marksvec-16040
                                 labelvec-16037)))))
                       (cdr w-16036))))))
     (join-wraps-4311
       (lambda (w1-16095 w2-16096)
         (let ((m1-16097 (car w1-16095))
               (s1-16098 (cdr w1-16095)))
           (if (null? m1-16097)
             (if (null? s1-16098)
               w2-16096
               (cons (car w2-16096)
                     (let ((m2-16105 (cdr w2-16096)))
                       (if (null? m2-16105)
                         s1-16098
                         (append s1-16098 m2-16105)))))
             (cons (let ((m2-16114 (car w2-16096)))
                     (if (null? m2-16114)
                       m1-16097
                       (append m1-16097 m2-16114)))
                   (let ((m2-16123 (cdr w2-16096)))
                     (if (null? m2-16123)
                       s1-16098
                       (append s1-16098 m2-16123))))))))
     (same-marks?-4313
       (lambda (x-16128 y-16129)
         (if (eq? x-16128 y-16129)
           (eq? x-16128 y-16129)
           (if (not (null? x-16128))
             (if (not (null? y-16129))
               (if (eq? (car x-16128) (car y-16129))
                 (same-marks?-4313 (cdr x-16128) (cdr y-16129))
                 #f)
               #f)
             #f))))
     (id-var-name-4314
       (lambda (id-16137 w-16138)
         (letrec*
           ((search-16139
              (lambda (sym-16200 subst-16201 marks-16202)
                (if (null? subst-16201)
                  (values #f marks-16202)
                  (let ((fst-16203 (car subst-16201)))
                    (if (eq? fst-16203 'shift)
                      (search-16139
                        sym-16200
                        (cdr subst-16201)
                        (cdr marks-16202))
                      (let ((symnames-16205 (vector-ref fst-16203 1)))
                        (if (vector? symnames-16205)
                          (let ((n-16217 (vector-length symnames-16205)))
                            (letrec*
                              ((f-16218
                                 (lambda (i-16220)
                                   (if (= i-16220 n-16217)
                                     (search-16139
                                       sym-16200
                                       (cdr subst-16201)
                                       marks-16202)
                                     (if (if (eq? (vector-ref
                                                    symnames-16205
                                                    i-16220)
                                                  sym-16200)
                                           (same-marks?-4313
                                             marks-16202
                                             (vector-ref
                                               (vector-ref fst-16203 2)
                                               i-16220))
                                           #f)
                                       (values
                                         (vector-ref
                                           (vector-ref fst-16203 3)
                                           i-16220)
                                         marks-16202)
                                       (f-16218 (#{1+}# i-16220)))))))
                              (f-16218 0)))
                          (letrec*
                            ((f-16253
                               (lambda (symnames-16255 i-16256)
                                 (if (null? symnames-16255)
                                   (search-16139
                                     sym-16200
                                     (cdr subst-16201)
                                     marks-16202)
                                   (if (if (eq? (car symnames-16255) sym-16200)
                                         (same-marks?-4313
                                           marks-16202
                                           (list-ref
                                             (vector-ref fst-16203 2)
                                             i-16256))
                                         #f)
                                     (values
                                       (list-ref
                                         (vector-ref fst-16203 3)
                                         i-16256)
                                       marks-16202)
                                     (f-16253
                                       (cdr symnames-16255)
                                       (#{1+}# i-16256)))))))
                            (f-16253 symnames-16205 0))))))))))
           (if (symbol? id-16137)
             (let ((t-16142
                     (search-16139
                       id-16137
                       (cdr w-16138)
                       (car w-16138))))
               (if t-16142 t-16142 id-16137))
             (if (if (vector? id-16137)
                   (if (= (vector-length id-16137) 4)
                     (eq? (vector-ref id-16137 0) 'syntax-object)
                     #f)
                   #f)
               (let ((id-16157 (vector-ref id-16137 1))
                     (w1-16158 (vector-ref id-16137 2)))
                 (let ((marks-16159
                         (let ((m1-16169 (car w-16138))
                               (m2-16170 (car w1-16158)))
                           (if (null? m2-16170)
                             m1-16169
                             (append m1-16169 m2-16170)))))
                   (call-with-values
                     (lambda ()
                       (search-16139 id-16157 (cdr w-16138) marks-16159))
                     (lambda (new-id-16186 marks-16187)
                       (if new-id-16186
                         new-id-16186
                         (let ((t-16195
                                 (search-16139
                                   id-16157
                                   (cdr w1-16158)
                                   marks-16187)))
                           (if t-16195 t-16195 id-16157)))))))
               (syntax-violation
                 'id-var-name
                 "invalid id"
                 id-16137))))))
     (locally-bound-identifiers-4315
       (lambda (w-16278 mod-16279)
         (letrec*
           ((scan-16280
              (lambda (subst-16285 results-16286)
                (if (null? subst-16285)
                  results-16286
                  (let ((fst-16287 (car subst-16285)))
                    (if (eq? fst-16287 'shift)
                      (scan-16280 (cdr subst-16285) results-16286)
                      (let ((symnames-16289 (vector-ref fst-16287 1))
                            (marks-16290 (vector-ref fst-16287 2)))
                        (if (vector? symnames-16289)
                          (scan-vector-rib-16282
                            subst-16285
                            symnames-16289
                            marks-16290
                            results-16286)
                          (scan-list-rib-16281
                            subst-16285
                            symnames-16289
                            marks-16290
                            results-16286))))))))
            (scan-list-rib-16281
              (lambda (subst-16388
                       symnames-16389
                       marks-16390
                       results-16391)
                (letrec*
                  ((f-16392
                     (lambda (symnames-16492 marks-16493 results-16494)
                       (if (null? symnames-16492)
                         (scan-16280 (cdr subst-16388) results-16494)
                         (f-16392
                           (cdr symnames-16492)
                           (cdr marks-16493)
                           (cons (wrap-4324
                                   (car symnames-16492)
                                   (let ((w-16502
                                           (cons (car marks-16493)
                                                 subst-16388)))
                                     (cons (cons #f (car w-16502))
                                           (cons 'shift (cdr w-16502))))
                                   mod-16279)
                                 results-16494))))))
                  (f-16392
                    symnames-16389
                    marks-16390
                    results-16391))))
            (scan-vector-rib-16282
              (lambda (subst-16503
                       symnames-16504
                       marks-16505
                       results-16506)
                (let ((n-16507 (vector-length symnames-16504)))
                  (letrec*
                    ((f-16508
                       (lambda (i-16591 results-16592)
                         (if (= i-16591 n-16507)
                           (scan-16280 (cdr subst-16503) results-16592)
                           (f-16508
                             (#{1+}# i-16591)
                             (cons (wrap-4324
                                     (vector-ref symnames-16504 i-16591)
                                     (let ((w-16600
                                             (cons (vector-ref
                                                     marks-16505
                                                     i-16591)
                                                   subst-16503)))
                                       (cons (cons #f (car w-16600))
                                             (cons 'shift (cdr w-16600))))
                                     mod-16279)
                                   results-16592))))))
                    (f-16508 0 results-16506))))))
           (scan-16280 (cdr w-16278) '()))))
     (valid-bound-ids?-4321
       (lambda (ids-16601)
         (if (letrec*
               ((all-ids?-16602
                  (lambda (ids-16764)
                    (if (null? ids-16764)
                      (null? ids-16764)
                      (if (let ((x-16775 (car ids-16764)))
                            (if (symbol? x-16775)
                              #t
                              (if (if (vector? x-16775)
                                    (if (= (vector-length x-16775) 4)
                                      (eq? (vector-ref x-16775 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (symbol? (vector-ref x-16775 1))
                                #f)))
                        (all-ids?-16602 (cdr ids-16764))
                        #f)))))
               (all-ids?-16602 ids-16601))
           (distinct-bound-ids?-4322 ids-16601)
           #f)))
     (distinct-bound-ids?-4322
       (lambda (ids-16903)
         (letrec*
           ((distinct?-16904
              (lambda (ids-17016)
                (if (null? ids-17016)
                  (null? ids-17016)
                  (if (not (bound-id-member?-4323
                             (car ids-17016)
                             (cdr ids-17016)))
                    (distinct?-16904 (cdr ids-17016))
                    #f)))))
           (distinct?-16904 ids-16903))))
     (bound-id-member?-4323
       (lambda (x-17226 list-17227)
         (if (not (null? list-17227))
           (let ((t-17228
                   (let ((j-17309 (car list-17227)))
                     (if (if (if (vector? x-17226)
                               (if (= (vector-length x-17226) 4)
                                 (eq? (vector-ref x-17226 0) 'syntax-object)
                                 #f)
                               #f)
                           (if (vector? j-17309)
                             (if (= (vector-length j-17309) 4)
                               (eq? (vector-ref j-17309 0) 'syntax-object)
                               #f)
                             #f)
                           #f)
                       (if (eq? (vector-ref x-17226 1)
                                (vector-ref j-17309 1))
                         (same-marks?-4313
                           (car (vector-ref x-17226 2))
                           (car (vector-ref j-17309 2)))
                         #f)
                       (eq? x-17226 j-17309)))))
             (if t-17228
               t-17228
               (bound-id-member?-4323 x-17226 (cdr list-17227))))
           #f)))
     (wrap-4324
       (lambda (x-17353 w-17354 defmod-17355)
         (if (if (null? (car w-17354))
               (null? (cdr w-17354))
               #f)
           x-17353
           (if (if (vector? x-17353)
                 (if (= (vector-length x-17353) 4)
                   (eq? (vector-ref x-17353 0) 'syntax-object)
                   #f)
                 #f)
             (let ((expression-17369 (vector-ref x-17353 1))
                   (wrap-17370
                     (join-wraps-4311 w-17354 (vector-ref x-17353 2)))
                   (module-17371 (vector-ref x-17353 3)))
               (vector
                 'syntax-object
                 expression-17369
                 wrap-17370
                 module-17371))
             (if (null? x-17353)
               x-17353
               (vector
                 'syntax-object
                 x-17353
                 w-17354
                 defmod-17355))))))
     (source-wrap-4325
       (lambda (x-17388 w-17389 s-17390 defmod-17391)
         (wrap-4324
           (begin
             (if (if s-17390
                   (supports-source-properties? x-17388)
                   #f)
               (set-source-properties! x-17388 s-17390))
             x-17388)
           w-17389
           defmod-17391)))
     (expand-sequence-4326
       (lambda (body-27527 r-27528 w-27529 s-27530 mod-27531)
         (build-sequence-4276
           s-27530
           (letrec*
             ((dobody-27611
                (lambda (body-27951 r-27952 w-27953 mod-27954)
                  (if (null? body-27951)
                    '()
                    (let ((first-27955
                            (let ((e-27959 (car body-27951)))
                              (call-with-values
                                (lambda ()
                                  (syntax-type-4330
                                    e-27959
                                    r-27952
                                    w-27953
                                    (source-annotation-4288 e-27959)
                                    #f
                                    mod-27954
                                    #f))
                                (lambda (type-27966
                                         value-27967
                                         form-27968
                                         e-27969
                                         w-27970
                                         s-27971
                                         mod-27972)
                                  (expand-expr-4332
                                    type-27966
                                    value-27967
                                    form-27968
                                    e-27969
                                    r-27952
                                    w-27970
                                    s-27971
                                    mod-27972))))))
                      (cons first-27955
                            (dobody-27611
                              (cdr body-27951)
                              r-27952
                              w-27953
                              mod-27954)))))))
             (dobody-27611
               body-27527
               r-27528
               w-27529
               mod-27531)))))
     (expand-top-sequence-4327
       (lambda (body-17409
                r-17410
                w-17411
                s-17412
                m-17413
                esew-17414
                mod-17415)
         (letrec*
           ((scan-17416
              (lambda (body-17547
                       r-17548
                       w-17549
                       s-17550
                       m-17551
                       esew-17552
                       mod-17553
                       exps-17554)
                (if (null? body-17547)
                  exps-17554
                  (call-with-values
                    (lambda ()
                      (call-with-values
                        (lambda ()
                          (let ((e-17555 (car body-17547)))
                            (syntax-type-4330
                              e-17555
                              r-17548
                              w-17549
                              (let ((t-17559 (source-annotation-4288 e-17555)))
                                (if t-17559 t-17559 s-17550))
                              #f
                              mod-17553
                              #f)))
                        (lambda (type-17794
                                 value-17795
                                 form-17796
                                 e-17797
                                 w-17798
                                 s-17799
                                 mod-17800)
                          (if (eqv? type-17794 'begin-form)
                            (let ((tmp-17809 ($sc-dispatch e-17797 '(_))))
                              (if tmp-17809
                                (@apply (lambda () exps-17554) tmp-17809)
                                (let ((tmp-17813
                                        ($sc-dispatch
                                          e-17797
                                          '(_ any . each-any))))
                                  (if tmp-17813
                                    (@apply
                                      (lambda (e1-17817 e2-17818)
                                        (scan-17416
                                          (cons e1-17817 e2-17818)
                                          r-17548
                                          w-17798
                                          s-17799
                                          m-17551
                                          esew-17552
                                          mod-17800
                                          exps-17554))
                                      tmp-17813)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      e-17797)))))
                            (if (eqv? type-17794 'local-syntax-form)
                              (expand-local-syntax-4336
                                value-17795
                                e-17797
                                r-17548
                                w-17798
                                s-17799
                                mod-17800
                                (lambda (body-17836
                                         r-17837
                                         w-17838
                                         s-17839
                                         mod-17840)
                                  (scan-17416
                                    body-17836
                                    r-17837
                                    w-17838
                                    s-17839
                                    m-17551
                                    esew-17552
                                    mod-17840
                                    exps-17554)))
                              (if (eqv? type-17794 'eval-when-form)
                                (let ((tmp-17848
                                        ($sc-dispatch
                                          e-17797
                                          '(_ each-any any . each-any))))
                                  (if tmp-17848
                                    (@apply
                                      (lambda (x-17852 e1-17853 e2-17854)
                                        (let ((when-list-17855
                                                (parse-when-list-4329
                                                  e-17797
                                                  x-17852))
                                              (body-17856
                                                (cons e1-17853 e2-17854)))
                                          (if (eq? m-17551 'e)
                                            (if (memq 'eval when-list-17855)
                                              (scan-17416
                                                body-17856
                                                r-17548
                                                w-17798
                                                s-17799
                                                (if (memq 'expand
                                                          when-list-17855)
                                                  'c&e
                                                  'e)
                                                '(eval)
                                                mod-17800
                                                exps-17554)
                                              (begin
                                                (if (memq 'expand
                                                          when-list-17855)
                                                  (let ((x-17933
                                                          (expand-top-sequence-4327
                                                            body-17856
                                                            r-17548
                                                            w-17798
                                                            s-17799
                                                            'e
                                                            '(eval)
                                                            mod-17800)))
                                                    (primitive-eval x-17933)))
                                                exps-17554))
                                            (if (memq 'load when-list-17855)
                                              (if (let ((t-17959
                                                          (memq 'compile
                                                                when-list-17855)))
                                                    (if t-17959
                                                      t-17959
                                                      (let ((t-18008
                                                              (memq 'expand
                                                                    when-list-17855)))
                                                        (if t-18008
                                                          t-18008
                                                          (if (eq? m-17551
                                                                   'c&e)
                                                            (memq 'eval
                                                                  when-list-17855)
                                                            #f)))))
                                                (scan-17416
                                                  body-17856
                                                  r-17548
                                                  w-17798
                                                  s-17799
                                                  'c&e
                                                  '(compile load)
                                                  mod-17800
                                                  exps-17554)
                                                (if (if (eq? m-17551 'c)
                                                      #t
                                                      (eq? m-17551 'c&e))
                                                  (scan-17416
                                                    body-17856
                                                    r-17548
                                                    w-17798
                                                    s-17799
                                                    'c
                                                    '(load)
                                                    mod-17800
                                                    exps-17554)
                                                  exps-17554))
                                              (if (let ((t-18137
                                                          (memq 'compile
                                                                when-list-17855)))
                                                    (if t-18137
                                                      t-18137
                                                      (let ((t-18186
                                                              (memq 'expand
                                                                    when-list-17855)))
                                                        (if t-18186
                                                          t-18186
                                                          (if (eq? m-17551
                                                                   'c&e)
                                                            (memq 'eval
                                                                  when-list-17855)
                                                            #f)))))
                                                (begin
                                                  (let ((x-18310
                                                          (expand-top-sequence-4327
                                                            body-17856
                                                            r-17548
                                                            w-17798
                                                            s-17799
                                                            'e
                                                            '(eval)
                                                            mod-17800)))
                                                    (primitive-eval x-18310))
                                                  exps-17554)
                                                exps-17554)))))
                                      tmp-17848)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      e-17797)))
                                (if (if (eqv? type-17794 'define-syntax-form)
                                      #t
                                      (eqv? type-17794
                                            'define-syntax-parameter-form))
                                  (let ((n-18359
                                          (id-var-name-4314
                                            value-17795
                                            w-17798))
                                        (r-18360
                                          (macros-only-env-4291 r-17548)))
                                    (if (eqv? m-17551 'c)
                                      (if (memq 'compile esew-17552)
                                        (let ((e-18368
                                                (expand-install-global-4328
                                                  n-18359
                                                  (expand-4331
                                                    e-17797
                                                    r-18360
                                                    w-17798
                                                    mod-17800))))
                                          (begin
                                            (top-level-eval-hook-4254
                                              e-18368
                                              mod-17800)
                                            (if (memq 'load esew-17552)
                                              (cons e-18368 exps-17554)
                                              exps-17554)))
                                        (if (memq 'load esew-17552)
                                          (cons (expand-install-global-4328
                                                  n-18359
                                                  (expand-4331
                                                    e-17797
                                                    r-18360
                                                    w-17798
                                                    mod-17800))
                                                exps-17554)
                                          exps-17554))
                                      (if (eqv? m-17551 'c&e)
                                        (let ((e-19013
                                                (expand-install-global-4328
                                                  n-18359
                                                  (expand-4331
                                                    e-17797
                                                    r-18360
                                                    w-17798
                                                    mod-17800))))
                                          (begin
                                            (top-level-eval-hook-4254
                                              e-19013
                                              mod-17800)
                                            (cons e-19013 exps-17554)))
                                        (begin
                                          (if (memq 'eval esew-17552)
                                            (top-level-eval-hook-4254
                                              (expand-install-global-4328
                                                n-18359
                                                (expand-4331
                                                  e-17797
                                                  r-18360
                                                  w-17798
                                                  mod-17800))
                                              mod-17800))
                                          exps-17554))))
                                  (if (eqv? type-17794 'define-form)
                                    (let ((n-19690
                                            (id-var-name-4314
                                              value-17795
                                              w-17798)))
                                      (let ((type-19691
                                              (car (let ((t-19699
                                                           (assq n-19690
                                                                 r-17548)))
                                                     (if t-19699
                                                       (cdr t-19699)
                                                       (if (symbol? n-19690)
                                                         (let ((t-19705
                                                                 (get-global-definition-hook-4258
                                                                   n-19690
                                                                   mod-17800)))
                                                           (if t-19705
                                                             t-19705
                                                             '(global)))
                                                         '(displaced-lexical)))))))
                                        (if (if (eqv? type-19691 'global)
                                              #t
                                              (if (eqv? type-19691 'core)
                                                #t
                                                (if (eqv? type-19691 'macro)
                                                  #t
                                                  (eqv? type-19691
                                                        'module-ref))))
                                          (begin
                                            (if (if (if (eq? m-17551 'c)
                                                      #t
                                                      (eq? m-17551 'c&e))
                                                  (if (not (module-local-variable
                                                             (current-module)
                                                             n-19690))
                                                    (current-module)
                                                    #f)
                                                  #f)
                                              (let ((old-19738
                                                      (module-variable
                                                        (current-module)
                                                        n-19690)))
                                                (if (if (variable? old-19738)
                                                      (variable-bound?
                                                        old-19738)
                                                      #f)
                                                  (module-define!
                                                    (current-module)
                                                    n-19690
                                                    (variable-ref old-19738))
                                                  (module-add!
                                                    (current-module)
                                                    n-19690
                                                    (make-undefined-variable)))))
                                            (cons (if (eq? m-17551 'c&e)
                                                    (let ((x-20179
                                                            (build-global-definition-4270
                                                              s-17799
                                                              n-19690
                                                              (expand-4331
                                                                e-17797
                                                                r-17548
                                                                w-17798
                                                                mod-17800))))
                                                      (begin
                                                        (top-level-eval-hook-4254
                                                          x-20179
                                                          mod-17800)
                                                        x-20179))
                                                    (lambda ()
                                                      (build-global-definition-4270
                                                        s-17799
                                                        n-19690
                                                        (expand-4331
                                                          e-17797
                                                          r-17548
                                                          w-17798
                                                          mod-17800))))
                                                  exps-17554))
                                          (if (eqv? type-19691
                                                    'displaced-lexical)
                                            (syntax-violation
                                              #f
                                              "identifier out of context"
                                              (wrap-4324
                                                (begin
                                                  (if (if s-17799
                                                        (supports-source-properties?
                                                          form-17796)
                                                        #f)
                                                    (set-source-properties!
                                                      form-17796
                                                      s-17799))
                                                  form-17796)
                                                w-17798
                                                mod-17800)
                                              (wrap-4324
                                                value-17795
                                                w-17798
                                                mod-17800))
                                            (syntax-violation
                                              #f
                                              "cannot define keyword at top level"
                                              (wrap-4324
                                                (begin
                                                  (if (if s-17799
                                                        (supports-source-properties?
                                                          form-17796)
                                                        #f)
                                                    (set-source-properties!
                                                      form-17796
                                                      s-17799))
                                                  form-17796)
                                                w-17798
                                                mod-17800)
                                              (wrap-4324
                                                value-17795
                                                w-17798
                                                mod-17800))))))
                                    (cons (if (eq? m-17551 'c&e)
                                            (let ((x-20681
                                                    (expand-expr-4332
                                                      type-17794
                                                      value-17795
                                                      form-17796
                                                      e-17797
                                                      r-17548
                                                      w-17798
                                                      s-17799
                                                      mod-17800)))
                                              (begin
                                                (primitive-eval x-20681)
                                                x-20681))
                                            (lambda ()
                                              (expand-expr-4332
                                                type-17794
                                                value-17795
                                                form-17796
                                                e-17797
                                                r-17548
                                                w-17798
                                                s-17799
                                                mod-17800)))
                                          exps-17554)))))))))
                    (lambda (exps-20686)
                      (scan-17416
                        (cdr body-17547)
                        r-17548
                        w-17549
                        s-17550
                        m-17551
                        esew-17552
                        mod-17553
                        exps-20686)))))))
           (call-with-values
             (lambda ()
               (scan-17416
                 body-17409
                 r-17410
                 w-17411
                 s-17412
                 m-17413
                 esew-17414
                 mod-17415
                 '()))
             (lambda (exps-17419)
               (if (null? exps-17419)
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 0)
                   s-17412)
                 (build-sequence-4276
                   s-17412
                   (letrec*
                     ((lp-17459
                        (lambda (in-17543 out-17544)
                          (if (null? in-17543)
                            out-17544
                            (let ((e-17545 (car in-17543)))
                              (lp-17459
                                (cdr in-17543)
                                (cons (if (procedure? e-17545)
                                        (e-17545)
                                        e-17545)
                                      out-17544)))))))
                     (lp-17459 exps-17419 '())))))))))
     (expand-install-global-4328
       (lambda (name-20687 e-20688)
         (let ((exp-20694
                 (let ((fun-exp-20704
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'make-syntax-transformer)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'make-syntax-transformer
                             #f)))
                       (arg-exps-20705
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 name-20687)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'macro)
                               e-20688)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     fun-exp-20704
                     arg-exps-20705))))
           (begin
             (if (if (struct? exp-20694)
                   (eq? (struct-vtable exp-20694)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((meta-20746 (struct-ref exp-20694 1)))
                 (if (not (assq 'name meta-20746))
                   (let ((v-20753
                           (cons (cons 'name name-20687) meta-20746)))
                     (struct-set! exp-20694 1 v-20753)))))
             (make-struct/no-tail
               (vector-ref %expanded-vtables 9)
               #f
               name-20687
               exp-20694)))))
     (parse-when-list-4329
       (lambda (e-20764 when-list-20765)
         (let ((result-20766 (strip-4344 when-list-20765 '(()))))
           (letrec*
             ((lp-20767
                (lambda (l-20821)
                  (if (null? l-20821)
                    result-20766
                    (if (let ((t-20823 (car l-20821)))
                          (if (eq? t-20823 'compile)
                            #t
                            (if (eq? t-20823 'load)
                              #t
                              (if (eq? t-20823 'eval)
                                #t
                                (eq? t-20823 'expand)))))
                      (lp-20767 (cdr l-20821))
                      (syntax-violation
                        'eval-when
                        "invalid situation"
                        e-20764
                        (car l-20821)))))))
             (lp-20767 result-20766)))))
     (syntax-type-4330
       (lambda (e-20825
                r-20826
                w-20827
                s-20828
                rib-20829
                mod-20830
                for-car?-20831)
         (if (symbol? e-20825)
           (let ((n-20832 (id-var-name-4314 e-20825 w-20827)))
             (let ((b-20833
                     (let ((t-20842 (assq n-20832 r-20826)))
                       (if t-20842
                         (cdr t-20842)
                         (if (symbol? n-20832)
                           (let ((t-20848
                                   (get-global-definition-hook-4258
                                     n-20832
                                     mod-20830)))
                             (if t-20848 t-20848 '(global)))
                           '(displaced-lexical))))))
               (let ((type-20834 (car b-20833)))
                 (if (eqv? type-20834 'lexical)
                   (values
                     type-20834
                     (cdr b-20833)
                     e-20825
                     e-20825
                     w-20827
                     s-20828
                     mod-20830)
                   (if (eqv? type-20834 'global)
                     (values
                       type-20834
                       n-20832
                       e-20825
                       e-20825
                       w-20827
                       s-20828
                       mod-20830)
                     (if (eqv? type-20834 'macro)
                       (if for-car?-20831
                         (values
                           type-20834
                           (cdr b-20833)
                           e-20825
                           e-20825
                           w-20827
                           s-20828
                           mod-20830)
                         (syntax-type-4330
                           (expand-macro-4334
                             (cdr b-20833)
                             e-20825
                             r-20826
                             w-20827
                             s-20828
                             rib-20829
                             mod-20830)
                           r-20826
                           '(())
                           s-20828
                           rib-20829
                           mod-20830
                           #f))
                       (values
                         type-20834
                         (cdr b-20833)
                         e-20825
                         e-20825
                         w-20827
                         s-20828
                         mod-20830)))))))
           (if (pair? e-20825)
             (let ((first-20876 (car e-20825)))
               (call-with-values
                 (lambda ()
                   (syntax-type-4330
                     first-20876
                     r-20826
                     w-20827
                     s-20828
                     rib-20829
                     mod-20830
                     #t))
                 (lambda (ftype-20878
                          fval-20879
                          fform-20880
                          fe-20881
                          fw-20882
                          fs-20883
                          fmod-20884)
                   (if (eqv? ftype-20878 'lexical)
                     (values
                       'lexical-call
                       fval-20879
                       e-20825
                       e-20825
                       w-20827
                       s-20828
                       mod-20830)
                     (if (eqv? ftype-20878 'global)
                       (values
                         'global-call
                         (vector
                           'syntax-object
                           fval-20879
                           w-20827
                           fmod-20884)
                         e-20825
                         e-20825
                         w-20827
                         s-20828
                         mod-20830)
                       (if (eqv? ftype-20878 'macro)
                         (syntax-type-4330
                           (expand-macro-4334
                             fval-20879
                             e-20825
                             r-20826
                             w-20827
                             s-20828
                             rib-20829
                             mod-20830)
                           r-20826
                           '(())
                           s-20828
                           rib-20829
                           mod-20830
                           for-car?-20831)
                         (if (eqv? ftype-20878 'module-ref)
                           (call-with-values
                             (lambda () (fval-20879 e-20825 r-20826 w-20827))
                             (lambda (e-20918
                                      r-20919
                                      w-20920
                                      s-20921
                                      mod-20922)
                               (syntax-type-4330
                                 e-20918
                                 r-20919
                                 w-20920
                                 s-20921
                                 rib-20829
                                 mod-20922
                                 for-car?-20831)))
                           (if (eqv? ftype-20878 'core)
                             (values
                               'core-form
                               fval-20879
                               e-20825
                               e-20825
                               w-20827
                               s-20828
                               mod-20830)
                             (if (eqv? ftype-20878 'local-syntax)
                               (values
                                 'local-syntax-form
                                 fval-20879
                                 e-20825
                                 e-20825
                                 w-20827
                                 s-20828
                                 mod-20830)
                               (if (eqv? ftype-20878 'begin)
                                 (values
                                   'begin-form
                                   #f
                                   e-20825
                                   e-20825
                                   w-20827
                                   s-20828
                                   mod-20830)
                                 (if (eqv? ftype-20878 'eval-when)
                                   (values
                                     'eval-when-form
                                     #f
                                     e-20825
                                     e-20825
                                     w-20827
                                     s-20828
                                     mod-20830)
                                   (if (eqv? ftype-20878 'define)
                                     (let ((tmp-20954
                                             ($sc-dispatch
                                               e-20825
                                               '(_ any any))))
                                       (if (if tmp-20954
                                             (@apply
                                               (lambda (name-20958 val-20959)
                                                 (if (symbol? name-20958)
                                                   #t
                                                   (if (if (vector? name-20958)
                                                         (if (= (vector-length
                                                                  name-20958)
                                                                4)
                                                           (eq? (vector-ref
                                                                  name-20958
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         name-20958
                                                         1))
                                                     #f)))
                                               tmp-20954)
                                             #f)
                                         (@apply
                                           (lambda (name-20986 val-20987)
                                             (values
                                               'define-form
                                               name-20986
                                               e-20825
                                               val-20987
                                               w-20827
                                               s-20828
                                               mod-20830))
                                           tmp-20954)
                                         (let ((tmp-20988
                                                 ($sc-dispatch
                                                   e-20825
                                                   '(_ (any . any)
                                                       any
                                                       .
                                                       each-any))))
                                           (if (if tmp-20988
                                                 (@apply
                                                   (lambda (name-20992
                                                            args-20993
                                                            e1-20994
                                                            e2-20995)
                                                     (if (if (symbol?
                                                               name-20992)
                                                           #t
                                                           (if (if (vector?
                                                                     name-20992)
                                                                 (if (= (vector-length
                                                                          name-20992)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          name-20992
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 name-20992
                                                                 1))
                                                             #f))
                                                       (valid-bound-ids?-4321
                                                         (letrec*
                                                           ((lvl-21144
                                                              (lambda (vars-21146
                                                                       ls-21147
                                                                       w-21148)
                                                                (if (pair? vars-21146)
                                                                  (lvl-21144
                                                                    (cdr vars-21146)
                                                                    (cons (wrap-4324
                                                                            (car vars-21146)
                                                                            w-21148
                                                                            #f)
                                                                          ls-21147)
                                                                    w-21148)
                                                                  (if (if (symbol?
                                                                            vars-21146)
                                                                        #t
                                                                        (if (if (vector?
                                                                                  vars-21146)
                                                                              (if (= (vector-length
                                                                                       vars-21146)
                                                                                     4)
                                                                                (eq? (vector-ref
                                                                                       vars-21146
                                                                                       0)
                                                                                     'syntax-object)
                                                                                #f)
                                                                              #f)
                                                                          (symbol?
                                                                            (vector-ref
                                                                              vars-21146
                                                                              1))
                                                                          #f))
                                                                    (cons (wrap-4324
                                                                            vars-21146
                                                                            w-21148
                                                                            #f)
                                                                          ls-21147)
                                                                    (if (null? vars-21146)
                                                                      ls-21147
                                                                      (if (if (vector?
                                                                                vars-21146)
                                                                            (if (= (vector-length
                                                                                     vars-21146)
                                                                                   4)
                                                                              (eq? (vector-ref
                                                                                     vars-21146
                                                                                     0)
                                                                                   'syntax-object)
                                                                              #f)
                                                                            #f)
                                                                        (lvl-21144
                                                                          (vector-ref
                                                                            vars-21146
                                                                            1)
                                                                          ls-21147
                                                                          (join-wraps-4311
                                                                            w-21148
                                                                            (vector-ref
                                                                              vars-21146
                                                                              2)))
                                                                        (cons vars-21146
                                                                              ls-21147))))))))
                                                           (lvl-21144
                                                             args-20993
                                                             '()
                                                             '(()))))
                                                       #f))
                                                   tmp-20988)
                                                 #f)
                                             (@apply
                                               (lambda (name-21192
                                                        args-21193
                                                        e1-21194
                                                        e2-21195)
                                                 (values
                                                   'define-form
                                                   (wrap-4324
                                                     name-21192
                                                     w-20827
                                                     mod-20830)
                                                   (wrap-4324
                                                     e-20825
                                                     w-20827
                                                     mod-20830)
                                                   (let ((e-21203
                                                           (cons '#(syntax-object
                                                                    lambda
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(name
                                                                         args
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-1902"
                                                                         "l-*-1903"
                                                                         "l-*-1904"
                                                                         "l-*-1905"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(key)
                                                                       #((m-*-1867
                                                                           top))
                                                                       #("l-*-1868"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(ftype
                                                                         fval
                                                                         fform
                                                                         fe
                                                                         fw
                                                                         fs
                                                                         fmod)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-1860"
                                                                         "l-*-1861"
                                                                         "l-*-1862"
                                                                         "l-*-1863"
                                                                         "l-*-1864"
                                                                         "l-*-1865"
                                                                         "l-*-1866"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(first)
                                                                       #((top))
                                                                       #("l-*-1851"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(e
                                                                         r
                                                                         w
                                                                         s
                                                                         rib
                                                                         mod
                                                                         for-car?)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-1827"
                                                                         "l-*-1828"
                                                                         "l-*-1829"
                                                                         "l-*-1830"
                                                                         "l-*-1831"
                                                                         "l-*-1832"
                                                                         "l-*-1833"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         session-id
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-476"
                                                                        "l-*-474"
                                                                        "l-*-472"
                                                                        "l-*-470"
                                                                        "l-*-468"
                                                                        "l-*-466"
                                                                        "l-*-464"
                                                                        "l-*-462"
                                                                        "l-*-460"
                                                                        "l-*-458"
                                                                        "l-*-456"
                                                                        "l-*-454"
                                                                        "l-*-452"
                                                                        "l-*-450"
                                                                        "l-*-448"
                                                                        "l-*-446"
                                                                        "l-*-444"
                                                                        "l-*-442"
                                                                        "l-*-440"
                                                                        "l-*-438"
                                                                        "l-*-436"
                                                                        "l-*-434"
                                                                        "l-*-432"
                                                                        "l-*-430"
                                                                        "l-*-428"
                                                                        "l-*-426"
                                                                        "l-*-424"
                                                                        "l-*-422"
                                                                        "l-*-420"
                                                                        "l-*-418"
                                                                        "l-*-416"
                                                                        "l-*-414"
                                                                        "l-*-412"
                                                                        "l-*-410"
                                                                        "l-*-408"
                                                                        "l-*-406"
                                                                        "l-*-404"
                                                                        "l-*-402"
                                                                        "l-*-400"
                                                                        "l-*-399"
                                                                        "l-*-397"
                                                                        "l-*-394"
                                                                        "l-*-393"
                                                                        "l-*-392"
                                                                        "l-*-390"
                                                                        "l-*-389"
                                                                        "l-*-387"
                                                                        "l-*-385"
                                                                        "l-*-383"
                                                                        "l-*-381"
                                                                        "l-*-379"
                                                                        "l-*-377"
                                                                        "l-*-375"
                                                                        "l-*-373"
                                                                        "l-*-370"
                                                                        "l-*-368"
                                                                        "l-*-367"
                                                                        "l-*-365"
                                                                        "l-*-363"
                                                                        "l-*-361"
                                                                        "l-*-359"
                                                                        "l-*-358"
                                                                        "l-*-357"
                                                                        "l-*-356"
                                                                        "l-*-354"
                                                                        "l-*-353"
                                                                        "l-*-350"
                                                                        "l-*-348"
                                                                        "l-*-346"
                                                                        "l-*-344"
                                                                        "l-*-342"
                                                                        "l-*-340"
                                                                        "l-*-338"
                                                                        "l-*-337"
                                                                        "l-*-336"
                                                                        "l-*-334"
                                                                        "l-*-332"
                                                                        "l-*-331"
                                                                        "l-*-328"
                                                                        "l-*-327"
                                                                        "l-*-325"
                                                                        "l-*-323"
                                                                        "l-*-321"
                                                                        "l-*-319"
                                                                        "l-*-317"
                                                                        "l-*-315"
                                                                        "l-*-313"
                                                                        "l-*-311"
                                                                        "l-*-309"
                                                                        "l-*-306"
                                                                        "l-*-304"
                                                                        "l-*-302"
                                                                        "l-*-300"
                                                                        "l-*-298"
                                                                        "l-*-296"
                                                                        "l-*-294"
                                                                        "l-*-292"
                                                                        "l-*-290"
                                                                        "l-*-288"
                                                                        "l-*-286"
                                                                        "l-*-284"
                                                                        "l-*-282"
                                                                        "l-*-280"
                                                                        "l-*-278"
                                                                        "l-*-276"
                                                                        "l-*-274"
                                                                        "l-*-272"
                                                                        "l-*-270"
                                                                        "l-*-268"
                                                                        "l-*-266"
                                                                        "l-*-264"
                                                                        "l-*-262"
                                                                        "l-*-260"
                                                                        "l-*-258"
                                                                        "l-*-256"
                                                                        "l-*-255"
                                                                        "l-*-254"
                                                                        "l-*-253"
                                                                        "l-*-252"
                                                                        "l-*-250"
                                                                        "l-*-248"
                                                                        "l-*-246"
                                                                        "l-*-243"
                                                                        "l-*-241"
                                                                        "l-*-239"
                                                                        "l-*-237"
                                                                        "l-*-235"
                                                                        "l-*-233"
                                                                        "l-*-231"
                                                                        "l-*-229"
                                                                        "l-*-227"
                                                                        "l-*-225"
                                                                        "l-*-223"
                                                                        "l-*-221"
                                                                        "l-*-219"
                                                                        "l-*-217"
                                                                        "l-*-215"
                                                                        "l-*-213"
                                                                        "l-*-211"
                                                                        "l-*-209"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-47"
                                                                        "l-*-46"
                                                                        "l-*-45")))
                                                                    (hygiene
                                                                      guile))
                                                                 (wrap-4324
                                                                   (cons args-21193
                                                                         (cons e1-21194
                                                                               e2-21195))
                                                                   w-20827
                                                                   mod-20830))))
                                                     (begin
                                                       (if (if s-20828
                                                             (supports-source-properties?
                                                               e-21203)
                                                             #f)
                                                         (set-source-properties!
                                                           e-21203
                                                           s-20828))
                                                       e-21203))
                                                   '(())
                                                   s-20828
                                                   mod-20830))
                                               tmp-20988)
                                             (let ((tmp-21210
                                                     ($sc-dispatch
                                                       e-20825
                                                       '(_ any))))
                                               (if (if tmp-21210
                                                     (@apply
                                                       (lambda (name-21214)
                                                         (if (symbol?
                                                               name-21214)
                                                           #t
                                                           (if (if (vector?
                                                                     name-21214)
                                                                 (if (= (vector-length
                                                                          name-21214)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          name-21214
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 name-21214
                                                                 1))
                                                             #f)))
                                                       tmp-21210)
                                                     #f)
                                                 (@apply
                                                   (lambda (name-21241)
                                                     (values
                                                       'define-form
                                                       (wrap-4324
                                                         name-21241
                                                         w-20827
                                                         mod-20830)
                                                       (wrap-4324
                                                         e-20825
                                                         w-20827
                                                         mod-20830)
                                                       '(#(syntax-object
                                                           if
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-1915"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(key)
                                                              #((m-*-1867 top))
                                                              #("l-*-1868"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1860"
                                                                "l-*-1861"
                                                                "l-*-1862"
                                                                "l-*-1863"
                                                                "l-*-1864"
                                                                "l-*-1865"
                                                                "l-*-1866"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-1851"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1827"
                                                                "l-*-1828"
                                                                "l-*-1829"
                                                                "l-*-1830"
                                                                "l-*-1831"
                                                                "l-*-1832"
                                                                "l-*-1833"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-476"
                                                               "l-*-474"
                                                               "l-*-472"
                                                               "l-*-470"
                                                               "l-*-468"
                                                               "l-*-466"
                                                               "l-*-464"
                                                               "l-*-462"
                                                               "l-*-460"
                                                               "l-*-458"
                                                               "l-*-456"
                                                               "l-*-454"
                                                               "l-*-452"
                                                               "l-*-450"
                                                               "l-*-448"
                                                               "l-*-446"
                                                               "l-*-444"
                                                               "l-*-442"
                                                               "l-*-440"
                                                               "l-*-438"
                                                               "l-*-436"
                                                               "l-*-434"
                                                               "l-*-432"
                                                               "l-*-430"
                                                               "l-*-428"
                                                               "l-*-426"
                                                               "l-*-424"
                                                               "l-*-422"
                                                               "l-*-420"
                                                               "l-*-418"
                                                               "l-*-416"
                                                               "l-*-414"
                                                               "l-*-412"
                                                               "l-*-410"
                                                               "l-*-408"
                                                               "l-*-406"
                                                               "l-*-404"
                                                               "l-*-402"
                                                               "l-*-400"
                                                               "l-*-399"
                                                               "l-*-397"
                                                               "l-*-394"
                                                               "l-*-393"
                                                               "l-*-392"
                                                               "l-*-390"
                                                               "l-*-389"
                                                               "l-*-387"
                                                               "l-*-385"
                                                               "l-*-383"
                                                               "l-*-381"
                                                               "l-*-379"
                                                               "l-*-377"
                                                               "l-*-375"
                                                               "l-*-373"
                                                               "l-*-370"
                                                               "l-*-368"
                                                               "l-*-367"
                                                               "l-*-365"
                                                               "l-*-363"
                                                               "l-*-361"
                                                               "l-*-359"
                                                               "l-*-358"
                                                               "l-*-357"
                                                               "l-*-356"
                                                               "l-*-354"
                                                               "l-*-353"
                                                               "l-*-350"
                                                               "l-*-348"
                                                               "l-*-346"
                                                               "l-*-344"
                                                               "l-*-342"
                                                               "l-*-340"
                                                               "l-*-338"
                                                               "l-*-337"
                                                               "l-*-336"
                                                               "l-*-334"
                                                               "l-*-332"
                                                               "l-*-331"
                                                               "l-*-328"
                                                               "l-*-327"
                                                               "l-*-325"
                                                               "l-*-323"
                                                               "l-*-321"
                                                               "l-*-319"
                                                               "l-*-317"
                                                               "l-*-315"
                                                               "l-*-313"
                                                               "l-*-311"
                                                               "l-*-309"
                                                               "l-*-306"
                                                               "l-*-304"
                                                               "l-*-302"
                                                               "l-*-300"
                                                               "l-*-298"
                                                               "l-*-296"
                                                               "l-*-294"
                                                               "l-*-292"
                                                               "l-*-290"
                                                               "l-*-288"
                                                               "l-*-286"
                                                               "l-*-284"
                                                               "l-*-282"
                                                               "l-*-280"
                                                               "l-*-278"
                                                               "l-*-276"
                                                               "l-*-274"
                                                               "l-*-272"
                                                               "l-*-270"
                                                               "l-*-268"
                                                               "l-*-266"
                                                               "l-*-264"
                                                               "l-*-262"
                                                               "l-*-260"
                                                               "l-*-258"
                                                               "l-*-256"
                                                               "l-*-255"
                                                               "l-*-254"
                                                               "l-*-253"
                                                               "l-*-252"
                                                               "l-*-250"
                                                               "l-*-248"
                                                               "l-*-246"
                                                               "l-*-243"
                                                               "l-*-241"
                                                               "l-*-239"
                                                               "l-*-237"
                                                               "l-*-235"
                                                               "l-*-233"
                                                               "l-*-231"
                                                               "l-*-229"
                                                               "l-*-227"
                                                               "l-*-225"
                                                               "l-*-223"
                                                               "l-*-221"
                                                               "l-*-219"
                                                               "l-*-217"
                                                               "l-*-215"
                                                               "l-*-213"
                                                               "l-*-211"
                                                               "l-*-209"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-47"
                                                               "l-*-46"
                                                               "l-*-45")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-1915"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(key)
                                                              #((m-*-1867 top))
                                                              #("l-*-1868"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1860"
                                                                "l-*-1861"
                                                                "l-*-1862"
                                                                "l-*-1863"
                                                                "l-*-1864"
                                                                "l-*-1865"
                                                                "l-*-1866"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-1851"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1827"
                                                                "l-*-1828"
                                                                "l-*-1829"
                                                                "l-*-1830"
                                                                "l-*-1831"
                                                                "l-*-1832"
                                                                "l-*-1833"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-476"
                                                               "l-*-474"
                                                               "l-*-472"
                                                               "l-*-470"
                                                               "l-*-468"
                                                               "l-*-466"
                                                               "l-*-464"
                                                               "l-*-462"
                                                               "l-*-460"
                                                               "l-*-458"
                                                               "l-*-456"
                                                               "l-*-454"
                                                               "l-*-452"
                                                               "l-*-450"
                                                               "l-*-448"
                                                               "l-*-446"
                                                               "l-*-444"
                                                               "l-*-442"
                                                               "l-*-440"
                                                               "l-*-438"
                                                               "l-*-436"
                                                               "l-*-434"
                                                               "l-*-432"
                                                               "l-*-430"
                                                               "l-*-428"
                                                               "l-*-426"
                                                               "l-*-424"
                                                               "l-*-422"
                                                               "l-*-420"
                                                               "l-*-418"
                                                               "l-*-416"
                                                               "l-*-414"
                                                               "l-*-412"
                                                               "l-*-410"
                                                               "l-*-408"
                                                               "l-*-406"
                                                               "l-*-404"
                                                               "l-*-402"
                                                               "l-*-400"
                                                               "l-*-399"
                                                               "l-*-397"
                                                               "l-*-394"
                                                               "l-*-393"
                                                               "l-*-392"
                                                               "l-*-390"
                                                               "l-*-389"
                                                               "l-*-387"
                                                               "l-*-385"
                                                               "l-*-383"
                                                               "l-*-381"
                                                               "l-*-379"
                                                               "l-*-377"
                                                               "l-*-375"
                                                               "l-*-373"
                                                               "l-*-370"
                                                               "l-*-368"
                                                               "l-*-367"
                                                               "l-*-365"
                                                               "l-*-363"
                                                               "l-*-361"
                                                               "l-*-359"
                                                               "l-*-358"
                                                               "l-*-357"
                                                               "l-*-356"
                                                               "l-*-354"
                                                               "l-*-353"
                                                               "l-*-350"
                                                               "l-*-348"
                                                               "l-*-346"
                                                               "l-*-344"
                                                               "l-*-342"
                                                               "l-*-340"
                                                               "l-*-338"
                                                               "l-*-337"
                                                               "l-*-336"
                                                               "l-*-334"
                                                               "l-*-332"
                                                               "l-*-331"
                                                               "l-*-328"
                                                               "l-*-327"
                                                               "l-*-325"
                                                               "l-*-323"
                                                               "l-*-321"
                                                               "l-*-319"
                                                               "l-*-317"
                                                               "l-*-315"
                                                               "l-*-313"
                                                               "l-*-311"
                                                               "l-*-309"
                                                               "l-*-306"
                                                               "l-*-304"
                                                               "l-*-302"
                                                               "l-*-300"
                                                               "l-*-298"
                                                               "l-*-296"
                                                               "l-*-294"
                                                               "l-*-292"
                                                               "l-*-290"
                                                               "l-*-288"
                                                               "l-*-286"
                                                               "l-*-284"
                                                               "l-*-282"
                                                               "l-*-280"
                                                               "l-*-278"
                                                               "l-*-276"
                                                               "l-*-274"
                                                               "l-*-272"
                                                               "l-*-270"
                                                               "l-*-268"
                                                               "l-*-266"
                                                               "l-*-264"
                                                               "l-*-262"
                                                               "l-*-260"
                                                               "l-*-258"
                                                               "l-*-256"
                                                               "l-*-255"
                                                               "l-*-254"
                                                               "l-*-253"
                                                               "l-*-252"
                                                               "l-*-250"
                                                               "l-*-248"
                                                               "l-*-246"
                                                               "l-*-243"
                                                               "l-*-241"
                                                               "l-*-239"
                                                               "l-*-237"
                                                               "l-*-235"
                                                               "l-*-233"
                                                               "l-*-231"
                                                               "l-*-229"
                                                               "l-*-227"
                                                               "l-*-225"
                                                               "l-*-223"
                                                               "l-*-221"
                                                               "l-*-219"
                                                               "l-*-217"
                                                               "l-*-215"
                                                               "l-*-213"
                                                               "l-*-211"
                                                               "l-*-209"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-47"
                                                               "l-*-46"
                                                               "l-*-45")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-1915"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(key)
                                                              #((m-*-1867 top))
                                                              #("l-*-1868"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1860"
                                                                "l-*-1861"
                                                                "l-*-1862"
                                                                "l-*-1863"
                                                                "l-*-1864"
                                                                "l-*-1865"
                                                                "l-*-1866"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-1851"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1827"
                                                                "l-*-1828"
                                                                "l-*-1829"
                                                                "l-*-1830"
                                                                "l-*-1831"
                                                                "l-*-1832"
                                                                "l-*-1833"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-476"
                                                               "l-*-474"
                                                               "l-*-472"
                                                               "l-*-470"
                                                               "l-*-468"
                                                               "l-*-466"
                                                               "l-*-464"
                                                               "l-*-462"
                                                               "l-*-460"
                                                               "l-*-458"
                                                               "l-*-456"
                                                               "l-*-454"
                                                               "l-*-452"
                                                               "l-*-450"
                                                               "l-*-448"
                                                               "l-*-446"
                                                               "l-*-444"
                                                               "l-*-442"
                                                               "l-*-440"
                                                               "l-*-438"
                                                               "l-*-436"
                                                               "l-*-434"
                                                               "l-*-432"
                                                               "l-*-430"
                                                               "l-*-428"
                                                               "l-*-426"
                                                               "l-*-424"
                                                               "l-*-422"
                                                               "l-*-420"
                                                               "l-*-418"
                                                               "l-*-416"
                                                               "l-*-414"
                                                               "l-*-412"
                                                               "l-*-410"
                                                               "l-*-408"
                                                               "l-*-406"
                                                               "l-*-404"
                                                               "l-*-402"
                                                               "l-*-400"
                                                               "l-*-399"
                                                               "l-*-397"
                                                               "l-*-394"
                                                               "l-*-393"
                                                               "l-*-392"
                                                               "l-*-390"
                                                               "l-*-389"
                                                               "l-*-387"
                                                               "l-*-385"
                                                               "l-*-383"
                                                               "l-*-381"
                                                               "l-*-379"
                                                               "l-*-377"
                                                               "l-*-375"
                                                               "l-*-373"
                                                               "l-*-370"
                                                               "l-*-368"
                                                               "l-*-367"
                                                               "l-*-365"
                                                               "l-*-363"
                                                               "l-*-361"
                                                               "l-*-359"
                                                               "l-*-358"
                                                               "l-*-357"
                                                               "l-*-356"
                                                               "l-*-354"
                                                               "l-*-353"
                                                               "l-*-350"
                                                               "l-*-348"
                                                               "l-*-346"
                                                               "l-*-344"
                                                               "l-*-342"
                                                               "l-*-340"
                                                               "l-*-338"
                                                               "l-*-337"
                                                               "l-*-336"
                                                               "l-*-334"
                                                               "l-*-332"
                                                               "l-*-331"
                                                               "l-*-328"
                                                               "l-*-327"
                                                               "l-*-325"
                                                               "l-*-323"
                                                               "l-*-321"
                                                               "l-*-319"
                                                               "l-*-317"
                                                               "l-*-315"
                                                               "l-*-313"
                                                               "l-*-311"
                                                               "l-*-309"
                                                               "l-*-306"
                                                               "l-*-304"
                                                               "l-*-302"
                                                               "l-*-300"
                                                               "l-*-298"
                                                               "l-*-296"
                                                               "l-*-294"
                                                               "l-*-292"
                                                               "l-*-290"
                                                               "l-*-288"
                                                               "l-*-286"
                                                               "l-*-284"
                                                               "l-*-282"
                                                               "l-*-280"
                                                               "l-*-278"
                                                               "l-*-276"
                                                               "l-*-274"
                                                               "l-*-272"
                                                               "l-*-270"
                                                               "l-*-268"
                                                               "l-*-266"
                                                               "l-*-264"
                                                               "l-*-262"
                                                               "l-*-260"
                                                               "l-*-258"
                                                               "l-*-256"
                                                               "l-*-255"
                                                               "l-*-254"
                                                               "l-*-253"
                                                               "l-*-252"
                                                               "l-*-250"
                                                               "l-*-248"
                                                               "l-*-246"
                                                               "l-*-243"
                                                               "l-*-241"
                                                               "l-*-239"
                                                               "l-*-237"
                                                               "l-*-235"
                                                               "l-*-233"
                                                               "l-*-231"
                                                               "l-*-229"
                                                               "l-*-227"
                                                               "l-*-225"
                                                               "l-*-223"
                                                               "l-*-221"
                                                               "l-*-219"
                                                               "l-*-217"
                                                               "l-*-215"
                                                               "l-*-213"
                                                               "l-*-211"
                                                               "l-*-209"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-47"
                                                               "l-*-46"
                                                               "l-*-45")))
                                                           (hygiene guile)))
                                                       '(())
                                                       s-20828
                                                       mod-20830))
                                                   tmp-21210)
                                                 (syntax-violation
                                                   #f
                                                   "source expression failed to match any pattern"
                                                   e-20825)))))))
                                     (if (eqv? ftype-20878 'define-syntax)
                                       (let ((tmp-21265
                                               ($sc-dispatch
                                                 e-20825
                                                 '(_ any any))))
                                         (if (if tmp-21265
                                               (@apply
                                                 (lambda (name-21269 val-21270)
                                                   (if (symbol? name-21269)
                                                     #t
                                                     (if (if (vector?
                                                               name-21269)
                                                           (if (= (vector-length
                                                                    name-21269)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    name-21269
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (symbol?
                                                         (vector-ref
                                                           name-21269
                                                           1))
                                                       #f)))
                                                 tmp-21265)
                                               #f)
                                           (@apply
                                             (lambda (name-21297 val-21298)
                                               (values
                                                 'define-syntax-form
                                                 name-21297
                                                 e-20825
                                                 val-21298
                                                 w-20827
                                                 s-20828
                                                 mod-20830))
                                             tmp-21265)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             e-20825)))
                                       (if (eqv? ftype-20878
                                                 'define-syntax-parameter)
                                         (let ((tmp-21312
                                                 ($sc-dispatch
                                                   e-20825
                                                   '(_ any any))))
                                           (if (if tmp-21312
                                                 (@apply
                                                   (lambda (name-21316
                                                            val-21317)
                                                     (if (symbol? name-21316)
                                                       #t
                                                       (if (if (vector?
                                                                 name-21316)
                                                             (if (= (vector-length
                                                                      name-21316)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      name-21316
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (symbol?
                                                           (vector-ref
                                                             name-21316
                                                             1))
                                                         #f)))
                                                   tmp-21312)
                                                 #f)
                                             (@apply
                                               (lambda (name-21344 val-21345)
                                                 (values
                                                   'define-syntax-parameter-form
                                                   name-21344
                                                   e-20825
                                                   val-21345
                                                   w-20827
                                                   s-20828
                                                   mod-20830))
                                               tmp-21312)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               e-20825)))
                                         (values
                                           'call
                                           #f
                                           e-20825
                                           e-20825
                                           w-20827
                                           s-20828
                                           mod-20830)))))))))))))))
             (if (if (vector? e-20825)
                   (if (= (vector-length e-20825) 4)
                     (eq? (vector-ref e-20825 0) 'syntax-object)
                     #f)
                   #f)
               (syntax-type-4330
                 (vector-ref e-20825 1)
                 r-20826
                 (join-wraps-4311 w-20827 (vector-ref e-20825 2))
                 (let ((t-21372 (source-annotation-4288 e-20825)))
                   (if t-21372 t-21372 s-20828))
                 rib-20829
                 (let ((t-21607 (vector-ref e-20825 3)))
                   (if t-21607 t-21607 mod-20830))
                 for-car?-20831)
               (if (self-evaluating? e-20825)
                 (values
                   'constant
                   #f
                   e-20825
                   e-20825
                   w-20827
                   s-20828
                   mod-20830)
                 (values
                   'other
                   #f
                   e-20825
                   e-20825
                   w-20827
                   s-20828
                   mod-20830)))))))
     (expand-4331
       (lambda (e-21616 r-21617 w-21618 mod-21619)
         (call-with-values
           (lambda ()
             (syntax-type-4330
               e-21616
               r-21617
               w-21618
               (source-annotation-4288 e-21616)
               #f
               mod-21619
               #f))
           (lambda (type-21774
                    value-21775
                    form-21776
                    e-21777
                    w-21778
                    s-21779
                    mod-21780)
             (expand-expr-4332
               type-21774
               value-21775
               form-21776
               e-21777
               r-21617
               w-21778
               s-21779
               mod-21780)))))
     (expand-expr-4332
       (lambda (type-21783
                value-21784
                form-21785
                e-21786
                r-21787
                w-21788
                s-21789
                mod-21790)
         (if (eqv? type-21783 'lexical)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 3)
             s-21789
             e-21786
             value-21784)
           (if (if (eqv? type-21783 'core)
                 #t
                 (eqv? type-21783 'core-form))
             (value-21784
               e-21786
               r-21787
               w-21788
               s-21789
               mod-21790)
             (if (eqv? type-21783 'module-ref)
               (call-with-values
                 (lambda () (value-21784 e-21786 r-21787 w-21788))
                 (lambda (e-21826 r-21827 w-21828 s-21829 mod-21830)
                   (expand-4331 e-21826 r-21827 w-21828 mod-21830)))
               (if (eqv? type-21783 'lexical-call)
                 (expand-application-4333
                   (let ((id-21908 (car e-21786)))
                     (build-lexical-reference-4265
                       'fun
                       (source-annotation-4288 id-21908)
                       (if (if (vector? id-21908)
                             (if (= (vector-length id-21908) 4)
                               (eq? (vector-ref id-21908 0) 'syntax-object)
                               #f)
                             #f)
                         (syntax->datum id-21908)
                         id-21908)
                       value-21784))
                   e-21786
                   r-21787
                   w-21788
                   s-21789
                   mod-21790)
                 (if (eqv? type-21783 'global-call)
                   (expand-application-4333
                     (build-global-reference-4268
                       (source-annotation-4288 (car e-21786))
                       (if (if (vector? value-21784)
                             (if (= (vector-length value-21784) 4)
                               (eq? (vector-ref value-21784 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref value-21784 1)
                         value-21784)
                       (if (if (vector? value-21784)
                             (if (= (vector-length value-21784) 4)
                               (eq? (vector-ref value-21784 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref value-21784 3)
                         mod-21790))
                     e-21786
                     r-21787
                     w-21788
                     s-21789
                     mod-21790)
                   (if (eqv? type-21783 'constant)
                     (let ((exp-22251
                             (strip-4344
                               (wrap-4324
                                 (begin
                                   (if (if s-21789
                                         (supports-source-properties? e-21786)
                                         #f)
                                     (set-source-properties! e-21786 s-21789))
                                   e-21786)
                                 w-21788
                                 mod-21790)
                               '(()))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         s-21789
                         exp-22251))
                     (if (eqv? type-21783 'global)
                       (analyze-variable-4267
                         mod-21790
                         value-21784
                         (lambda (mod-22290 var-22291 public?-22292)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             s-21789
                             mod-22290
                             var-22291
                             public?-22292))
                         (lambda (var-22301)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             s-21789
                             var-22301)))
                       (if (eqv? type-21783 'call)
                         (expand-application-4333
                           (expand-4331
                             (car e-21786)
                             r-21787
                             w-21788
                             mod-21790)
                           e-21786
                           r-21787
                           w-21788
                           s-21789
                           mod-21790)
                         (if (eqv? type-21783 'begin-form)
                           (let ((tmp-22382
                                   ($sc-dispatch e-21786 '(_ any . each-any))))
                             (if tmp-22382
                               (@apply
                                 (lambda (e1-22386 e2-22387)
                                   (expand-sequence-4326
                                     (cons e1-22386 e2-22387)
                                     r-21787
                                     w-21788
                                     s-21789
                                     mod-21790))
                                 tmp-22382)
                               (let ((tmp-22474 ($sc-dispatch e-21786 '(_))))
                                 (if tmp-22474
                                   (@apply
                                     (lambda ()
                                       (if (include-deprecated-features)
                                         (begin
                                           (issue-deprecation-warning
                                             "Sequences of zero expressions are deprecated.  Use *unspecified*.")
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))
                                         (syntax-violation
                                           #f
                                           "sequence of zero expressions"
                                           (wrap-4324
                                             (begin
                                               (if (if s-21789
                                                     (supports-source-properties?
                                                       e-21786)
                                                     #f)
                                                 (set-source-properties!
                                                   e-21786
                                                   s-21789))
                                               e-21786)
                                             w-21788
                                             mod-21790))))
                                     tmp-22474)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     e-21786)))))
                           (if (eqv? type-21783 'local-syntax-form)
                             (expand-local-syntax-4336
                               value-21784
                               e-21786
                               r-21787
                               w-21788
                               s-21789
                               mod-21790
                               expand-sequence-4326)
                             (if (eqv? type-21783 'eval-when-form)
                               (let ((tmp-22591
                                       ($sc-dispatch
                                         e-21786
                                         '(_ each-any any . each-any))))
                                 (if tmp-22591
                                   (@apply
                                     (lambda (x-22595 e1-22596 e2-22597)
                                       (let ((when-list-22598
                                               (parse-when-list-4329
                                                 e-21786
                                                 x-22595)))
                                         (if (memq 'eval when-list-22598)
                                           (expand-sequence-4326
                                             (cons e1-22596 e2-22597)
                                             r-21787
                                             w-21788
                                             s-21789
                                             mod-21790)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))))
                                     tmp-22591)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     e-21786)))
                               (if (if (eqv? type-21783 'define-form)
                                     #t
                                     (if (eqv? type-21783 'define-syntax-form)
                                       #t
                                       (eqv? type-21783
                                             'define-syntax-parameter-form)))
                                 (syntax-violation
                                   #f
                                   "definition in expression context, where definitions are not allowed,"
                                   (wrap-4324
                                     (begin
                                       (if (if s-21789
                                             (supports-source-properties?
                                               form-21785)
                                             #f)
                                         (set-source-properties!
                                           form-21785
                                           s-21789))
                                       form-21785)
                                     w-21788
                                     mod-21790))
                                 (if (eqv? type-21783 'syntax)
                                   (syntax-violation
                                     #f
                                     "reference to pattern variable outside syntax form"
                                     (wrap-4324
                                       (begin
                                         (if (if s-21789
                                               (supports-source-properties?
                                                 e-21786)
                                               #f)
                                           (set-source-properties!
                                             e-21786
                                             s-21789))
                                         e-21786)
                                       w-21788
                                       mod-21790))
                                   (if (eqv? type-21783 'displaced-lexical)
                                     (syntax-violation
                                       #f
                                       "reference to identifier outside its scope"
                                       (wrap-4324
                                         (begin
                                           (if (if s-21789
                                                 (supports-source-properties?
                                                   e-21786)
                                                 #f)
                                             (set-source-properties!
                                               e-21786
                                               s-21789))
                                           e-21786)
                                         w-21788
                                         mod-21790))
                                     (syntax-violation
                                       #f
                                       "unexpected syntax"
                                       (wrap-4324
                                         (begin
                                           (if (if s-21789
                                                 (supports-source-properties?
                                                   e-21786)
                                                 #f)
                                             (set-source-properties!
                                               e-21786
                                               s-21789))
                                           e-21786)
                                         w-21788
                                         mod-21790))))))))))))))))))
     (expand-application-4333
       (lambda (x-22867
                e-22868
                r-22869
                w-22870
                s-22871
                mod-22872)
         (let ((tmp-22874
                 ($sc-dispatch e-22868 '(any . each-any))))
           (if tmp-22874
             (@apply
               (lambda (e0-22878 e1-22879)
                 (build-application-4262
                   s-22871
                   x-22867
                   (map (lambda (e-22959)
                          (expand-4331 e-22959 r-22869 w-22870 mod-22872))
                        e1-22879)))
               tmp-22874)
             (syntax-violation
               #f
               "source expression failed to match any pattern"
               e-22868)))))
     (expand-macro-4334
       (lambda (p-23035
                e-23036
                r-23037
                w-23038
                s-23039
                rib-23040
                mod-23041)
         (letrec*
           ((rebuild-macro-output-23042
              (lambda (x-23075 m-23076)
                (if (pair? x-23075)
                  (let ((e-23080
                          (cons (rebuild-macro-output-23042
                                  (car x-23075)
                                  m-23076)
                                (rebuild-macro-output-23042
                                  (cdr x-23075)
                                  m-23076))))
                    (begin
                      (if (if s-23039
                            (supports-source-properties? e-23080)
                            #f)
                        (set-source-properties! e-23080 s-23039))
                      e-23080))
                  (if (if (vector? x-23075)
                        (if (= (vector-length x-23075) 4)
                          (eq? (vector-ref x-23075 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((w-23096 (vector-ref x-23075 2)))
                      (let ((ms-23097 (car w-23096))
                            (ss-23098 (cdr w-23096)))
                        (if (if (pair? ms-23097) (eq? (car ms-23097) #f) #f)
                          (let ((expression-23106 (vector-ref x-23075 1))
                                (wrap-23107
                                  (cons (cdr ms-23097)
                                        (if rib-23040
                                          (cons rib-23040 (cdr ss-23098))
                                          (cdr ss-23098))))
                                (module-23108 (vector-ref x-23075 3)))
                            (vector
                              'syntax-object
                              expression-23106
                              wrap-23107
                              module-23108))
                          (let ((expression-23118
                                  (let ((e-23123 (vector-ref x-23075 1)))
                                    (begin
                                      (if (if s-23039
                                            (supports-source-properties?
                                              e-23123)
                                            #f)
                                        (set-source-properties!
                                          e-23123
                                          s-23039))
                                      e-23123)))
                                (wrap-23119
                                  (cons (cons m-23076 ms-23097)
                                        (if rib-23040
                                          (cons rib-23040
                                                (cons 'shift ss-23098))
                                          (cons 'shift ss-23098))))
                                (module-23120 (vector-ref x-23075 3)))
                            (vector
                              'syntax-object
                              expression-23118
                              wrap-23119
                              module-23120)))))
                    (if (vector? x-23075)
                      (let ((n-23135 (vector-length x-23075)))
                        (let ((v-23136
                                (let ((e-23144 (make-vector n-23135)))
                                  (begin
                                    (if (if s-23039
                                          (supports-source-properties? e-23144)
                                          #f)
                                      (set-source-properties! e-23144 s-23039))
                                    e-23144))))
                          (letrec*
                            ((loop-23137
                               (lambda (i-23189)
                                 (if (= i-23189 n-23135)
                                   v-23136
                                   (begin
                                     (vector-set!
                                       v-23136
                                       i-23189
                                       (rebuild-macro-output-23042
                                         (vector-ref x-23075 i-23189)
                                         m-23076))
                                     (loop-23137 (#{1+}# i-23189)))))))
                            (loop-23137 0))))
                      (if (symbol? x-23075)
                        (syntax-violation
                          #f
                          "encountered raw symbol in macro output"
                          (let ((s-23195 (cdr w-23038)))
                            (wrap-4324
                              (begin
                                (if (if s-23195
                                      (supports-source-properties? e-23036)
                                      #f)
                                  (set-source-properties! e-23036 s-23195))
                                e-23036)
                              w-23038
                              mod-23041))
                          x-23075)
                        (begin
                          (if (if s-23039
                                (supports-source-properties? x-23075)
                                #f)
                            (set-source-properties! x-23075 s-23039))
                          x-23075))))))))
           (with-fluids
             ((transformer-environment-4317
                (lambda (k-23043)
                  (k-23043
                    e-23036
                    r-23037
                    w-23038
                    s-23039
                    rib-23040
                    mod-23041))))
             (rebuild-macro-output-23042
               (p-23035
                 (let ((w-23050
                         (cons (cons #f (car w-23038))
                               (cons 'shift (cdr w-23038)))))
                   (wrap-4324
                     (begin
                       (if (if s-23039
                             (supports-source-properties? e-23036)
                             #f)
                         (set-source-properties! e-23036 s-23039))
                       e-23036)
                     w-23050
                     mod-23041)))
               (gensym
                 (string-append "m-" (session-id-4256) "-")))))))
     (expand-body-4335
       (lambda (body-23227
                outer-form-23228
                r-23229
                w-23230
                mod-23231)
         (let ((r-23232
                 (cons '("placeholder" placeholder) r-23229)))
           (let ((ribcage-23233 (vector 'ribcage '() '() '())))
             (let ((w-23234
                     (cons (car w-23230)
                           (cons ribcage-23233 (cdr w-23230)))))
               (letrec*
                 ((parse-23235
                    (lambda (body-23248
                             ids-23249
                             labels-23250
                             var-ids-23251
                             vars-23252
                             vals-23253
                             bindings-23254)
                      (if (null? body-23248)
                        (syntax-violation
                          #f
                          "no expressions in body"
                          outer-form-23228)
                        (let ((e-23255 (cdr (car body-23248)))
                              (er-23256 (car (car body-23248))))
                          (call-with-values
                            (lambda ()
                              (syntax-type-4330
                                e-23255
                                er-23256
                                '(())
                                (source-annotation-4288 er-23256)
                                ribcage-23233
                                mod-23231
                                #f))
                            (lambda (type-23413
                                     value-23414
                                     form-23415
                                     e-23416
                                     w-23417
                                     s-23418
                                     mod-23419)
                              (if (eqv? type-23413 'define-form)
                                (let ((id-23427
                                        (wrap-4324
                                          value-23414
                                          w-23417
                                          mod-23419))
                                      (label-23428
                                        (string-append
                                          "l-"
                                          (session-id-4256)
                                          (symbol->string (gensym "-")))))
                                  (let ((var-23429
                                          (let ((id-23489
                                                  (if (if (vector? id-23427)
                                                        (if (= (vector-length
                                                                 id-23427)
                                                               4)
                                                          (eq? (vector-ref
                                                                 id-23427
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref id-23427 1)
                                                    id-23427)))
                                            (gensym
                                              (string-append
                                                (symbol->string id-23489)
                                                "-")))))
                                    (begin
                                      (let ((update-23479
                                              (cons (vector-ref id-23427 1)
                                                    (vector-ref
                                                      ribcage-23233
                                                      1))))
                                        (vector-set!
                                          ribcage-23233
                                          1
                                          update-23479))
                                      (let ((update-23481
                                              (cons (car (vector-ref
                                                           id-23427
                                                           2))
                                                    (vector-ref
                                                      ribcage-23233
                                                      2))))
                                        (vector-set!
                                          ribcage-23233
                                          2
                                          update-23481))
                                      (let ((update-23483
                                              (cons label-23428
                                                    (vector-ref
                                                      ribcage-23233
                                                      3))))
                                        (vector-set!
                                          ribcage-23233
                                          3
                                          update-23483))
                                      (parse-23235
                                        (cdr body-23248)
                                        (cons id-23427 ids-23249)
                                        (cons label-23428 labels-23250)
                                        (cons id-23427 var-ids-23251)
                                        (cons var-23429 vars-23252)
                                        (cons (cons er-23256
                                                    (wrap-4324
                                                      e-23416
                                                      w-23417
                                                      mod-23419))
                                              vals-23253)
                                        (cons (cons 'lexical var-23429)
                                              bindings-23254)))))
                                (if (if (eqv? type-23413 'define-syntax-form)
                                      #t
                                      (eqv? type-23413
                                            'define-syntax-parameter-form))
                                  (let ((id-23525
                                          (wrap-4324
                                            value-23414
                                            w-23417
                                            mod-23419))
                                        (label-23526
                                          (string-append
                                            "l-"
                                            (session-id-4256)
                                            (symbol->string (gensym "-")))))
                                    (begin
                                      (let ((update-23576
                                              (cons (vector-ref id-23525 1)
                                                    (vector-ref
                                                      ribcage-23233
                                                      1))))
                                        (vector-set!
                                          ribcage-23233
                                          1
                                          update-23576))
                                      (let ((update-23578
                                              (cons (car (vector-ref
                                                           id-23525
                                                           2))
                                                    (vector-ref
                                                      ribcage-23233
                                                      2))))
                                        (vector-set!
                                          ribcage-23233
                                          2
                                          update-23578))
                                      (let ((update-23580
                                              (cons label-23526
                                                    (vector-ref
                                                      ribcage-23233
                                                      3))))
                                        (vector-set!
                                          ribcage-23233
                                          3
                                          update-23580))
                                      (parse-23235
                                        (cdr body-23248)
                                        (cons id-23525 ids-23249)
                                        (cons label-23526 labels-23250)
                                        var-ids-23251
                                        vars-23252
                                        vals-23253
                                        (cons (cons 'macro
                                                    (cons er-23256
                                                          (wrap-4324
                                                            e-23416
                                                            w-23417
                                                            mod-23419)))
                                              bindings-23254))))
                                  (if (eqv? type-23413 'begin-form)
                                    (let ((tmp-23591
                                            ($sc-dispatch
                                              e-23416
                                              '(_ . each-any))))
                                      (if tmp-23591
                                        (@apply
                                          (lambda (e1-23595)
                                            (parse-23235
                                              (letrec*
                                                ((f-23596
                                                   (lambda (forms-23659)
                                                     (if (null? forms-23659)
                                                       (cdr body-23248)
                                                       (cons (cons er-23256
                                                                   (wrap-4324
                                                                     (car forms-23659)
                                                                     w-23417
                                                                     mod-23419))
                                                             (f-23596
                                                               (cdr forms-23659)))))))
                                                (f-23596 e1-23595))
                                              ids-23249
                                              labels-23250
                                              var-ids-23251
                                              vars-23252
                                              vals-23253
                                              bindings-23254))
                                          tmp-23591)
                                        (syntax-violation
                                          #f
                                          "source expression failed to match any pattern"
                                          e-23416)))
                                    (if (eqv? type-23413 'local-syntax-form)
                                      (expand-local-syntax-4336
                                        value-23414
                                        e-23416
                                        er-23256
                                        w-23417
                                        s-23418
                                        mod-23419
                                        (lambda (forms-23676
                                                 er-23677
                                                 w-23678
                                                 s-23679
                                                 mod-23680)
                                          (parse-23235
                                            (letrec*
                                              ((f-23681
                                                 (lambda (forms-23744)
                                                   (if (null? forms-23744)
                                                     (cdr body-23248)
                                                     (cons (cons er-23677
                                                                 (wrap-4324
                                                                   (car forms-23744)
                                                                   w-23678
                                                                   mod-23680))
                                                           (f-23681
                                                             (cdr forms-23744)))))))
                                              (f-23681 forms-23676))
                                            ids-23249
                                            labels-23250
                                            var-ids-23251
                                            vars-23252
                                            vals-23253
                                            bindings-23254)))
                                      (if (null? ids-23249)
                                        (build-sequence-4276
                                          #f
                                          (map (lambda (x-23809)
                                                 (let ((e-23813 (cdr x-23809))
                                                       (r-23814 (car x-23809)))
                                                   (call-with-values
                                                     (lambda ()
                                                       (syntax-type-4330
                                                         e-23813
                                                         r-23814
                                                         '(())
                                                         (source-annotation-4288
                                                           e-23813)
                                                         #f
                                                         mod-23419
                                                         #f))
                                                     (lambda (type-23818
                                                              value-23819
                                                              form-23820
                                                              e-23821
                                                              w-23822
                                                              s-23823
                                                              mod-23824)
                                                       (expand-expr-4332
                                                         type-23818
                                                         value-23819
                                                         form-23820
                                                         e-23821
                                                         r-23814
                                                         w-23822
                                                         s-23823
                                                         mod-23824)))))
                                               (cons (cons er-23256
                                                           (wrap-4324
                                                             (begin
                                                               (if (if s-23418
                                                                     (supports-source-properties?
                                                                       e-23416)
                                                                     #f)
                                                                 (set-source-properties!
                                                                   e-23416
                                                                   s-23418))
                                                               e-23416)
                                                             w-23417
                                                             mod-23419))
                                                     (cdr body-23248))))
                                        (begin
                                          (if (not (valid-bound-ids?-4321
                                                     ids-23249))
                                            (syntax-violation
                                              #f
                                              "invalid or duplicate identifier in definition"
                                              outer-form-23228))
                                          (letrec*
                                            ((loop-23925
                                               (lambda (bs-23928
                                                        er-cache-23929
                                                        r-cache-23930)
                                                 (if (not (null? bs-23928))
                                                   (let ((b-23931
                                                           (car bs-23928)))
                                                     (if (eq? (car b-23931)
                                                              'macro)
                                                       (let ((er-23933
                                                               (car (cdr b-23931))))
                                                         (let ((r-cache-23934
                                                                 (if (eq? er-23933
                                                                          er-cache-23929)
                                                                   r-cache-23930
                                                                   (macros-only-env-4291
                                                                     er-23933))))
                                                           (begin
                                                             (set-cdr!
                                                               b-23931
                                                               (eval-local-transformer-4337
                                                                 (expand-4331
                                                                   (cdr (cdr b-23931))
                                                                   r-cache-23934
                                                                   '(())
                                                                   mod-23419)
                                                                 mod-23419))
                                                             (loop-23925
                                                               (cdr bs-23928)
                                                               er-23933
                                                               r-cache-23934))))
                                                       (loop-23925
                                                         (cdr bs-23928)
                                                         er-cache-23929
                                                         r-cache-23930)))))))
                                            (loop-23925 bindings-23254 #f #f))
                                          (set-cdr!
                                            r-23232
                                            (extend-env-4289
                                              labels-23250
                                              bindings-23254
                                              (cdr r-23232)))
                                          (build-letrec-4279
                                            #f
                                            #t
                                            (reverse
                                              (map syntax->datum
                                                   var-ids-23251))
                                            (reverse vars-23252)
                                            (map (lambda (x-24277)
                                                   (let ((e-24281
                                                           (cdr x-24277))
                                                         (r-24282
                                                           (car x-24277)))
                                                     (call-with-values
                                                       (lambda ()
                                                         (syntax-type-4330
                                                           e-24281
                                                           r-24282
                                                           '(())
                                                           (source-annotation-4288
                                                             e-24281)
                                                           #f
                                                           mod-23419
                                                           #f))
                                                       (lambda (type-24286
                                                                value-24287
                                                                form-24288
                                                                e-24289
                                                                w-24290
                                                                s-24291
                                                                mod-24292)
                                                         (expand-expr-4332
                                                           type-24286
                                                           value-24287
                                                           form-24288
                                                           e-24289
                                                           r-24282
                                                           w-24290
                                                           s-24291
                                                           mod-24292)))))
                                                 (reverse vals-23253))
                                            (let ((exps-24298
                                                    (map (lambda (x-24299)
                                                           (let ((e-24302
                                                                   (cdr x-24299))
                                                                 (r-24303
                                                                   (car x-24299)))
                                                             (call-with-values
                                                               (lambda ()
                                                                 (syntax-type-4330
                                                                   e-24302
                                                                   r-24303
                                                                   '(())
                                                                   (source-annotation-4288
                                                                     e-24302)
                                                                   #f
                                                                   mod-23419
                                                                   #f))
                                                               (lambda (type-24307
                                                                        value-24308
                                                                        form-24309
                                                                        e-24310
                                                                        w-24311
                                                                        s-24312
                                                                        mod-24313)
                                                                 (expand-expr-4332
                                                                   type-24307
                                                                   value-24308
                                                                   form-24309
                                                                   e-24310
                                                                   r-24303
                                                                   w-24311
                                                                   s-24312
                                                                   mod-24313)))))
                                                         (cons (cons er-23256
                                                                     (wrap-4324
                                                                       (begin
                                                                         (if (if s-23418
                                                                               (supports-source-properties?
                                                                                 e-23416)
                                                                               #f)
                                                                           (set-source-properties!
                                                                             e-23416
                                                                             s-23418))
                                                                         e-23416)
                                                                       w-23417
                                                                       mod-23419))
                                                               (cdr body-23248)))))
                                              (if (null? (cdr exps-24298))
                                                (car exps-24298)
                                                (make-struct/no-tail
                                                  (vector-ref
                                                    %expanded-vtables
                                                    12)
                                                  #f
                                                  exps-24298)))))))))))))))))
                 (parse-23235
                   (map (lambda (x-23238)
                          (cons r-23232
                                (wrap-4324 x-23238 w-23234 mod-23231)))
                        body-23227)
                   '()
                   '()
                   '()
                   '()
                   '()
                   '())))))))
     (expand-local-syntax-4336
       (lambda (rec?-24339
                e-24340
                r-24341
                w-24342
                s-24343
                mod-24344
                k-24345)
         (let ((tmp-24347
                 ($sc-dispatch
                   e-24340
                   '(_ #(each (any any)) any . each-any))))
           (if tmp-24347
             (@apply
               (lambda (id-24351 val-24352 e1-24353 e2-24354)
                 (if (not (valid-bound-ids?-4321 id-24351))
                   (syntax-violation
                     #f
                     "duplicate bound keyword"
                     e-24340)
                   (let ((labels-24444 (gen-labels-4298 id-24351)))
                     (let ((new-w-24445
                             (make-binding-wrap-4309
                               id-24351
                               labels-24444
                               w-24342)))
                       (k-24345
                         (cons e1-24353 e2-24354)
                         (extend-env-4289
                           labels-24444
                           (let ((trans-r-24481
                                   (macros-only-env-4291 r-24341)))
                             (begin
                               (if rec?-24339 new-w-24445 w-24342)
                               (map (lambda (x-24482)
                                      (cons 'macro
                                            (eval-local-transformer-4337
                                              (expand-4331
                                                x-24482
                                                trans-r-24481
                                                (values
                                                  (if rec?-24339
                                                    new-w-24445
                                                    w-24342))
                                                mod-24344)
                                              mod-24344)))
                                    val-24352)))
                           r-24341)
                         new-w-24445
                         s-24343
                         mod-24344)))))
               tmp-24347)
             (syntax-violation
               #f
               "bad local syntax definition"
               (wrap-4324
                 (begin
                   (if (if s-24343
                         (supports-source-properties? e-24340)
                         #f)
                     (set-source-properties! e-24340 s-24343))
                   e-24340)
                 w-24342
                 mod-24344))))))
     (eval-local-transformer-4337
       (lambda (expanded-24762 mod-24763)
         (let ((p-24764 (primitive-eval expanded-24762)))
           (if (procedure? p-24764)
             p-24764
             (syntax-violation
               #f
               "nonprocedure transformer"
               p-24764)))))
     (ellipsis?-4339
       (lambda (x-5000)
         (if (if (if (vector? x-5000)
                   (if (= (vector-length x-5000) 4)
                     (eq? (vector-ref x-5000 0) 'syntax-object)
                     #f)
                   #f)
               (symbol? (vector-ref x-5000 1))
               #f)
           (if (eq? (if (if (vector? x-5000)
                          (if (= (vector-length x-5000) 4)
                            (eq? (vector-ref x-5000 0) 'syntax-object)
                            #f)
                          #f)
                      (vector-ref x-5000 1)
                      x-5000)
                    (if (if (= (vector-length
                                 '#(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-2267"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         expand-lambda-case
                                         lambda*-formals
                                         expand-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         expand-void
                                         eval-local-transformer
                                         expand-local-syntax
                                         expand-body
                                         expand-macro
                                         expand-application
                                         expand-expr
                                         expand
                                         syntax-type
                                         parse-when-list
                                         expand-install-global
                                         expand-top-sequence
                                         expand-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         with-transformer-environment
                                         transformer-environment
                                         resolve-identifier
                                         locally-bound-identifiers
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-application
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         session-id
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-sequence
                                         make-application
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("l-*-476"
                                        "l-*-474"
                                        "l-*-472"
                                        "l-*-470"
                                        "l-*-468"
                                        "l-*-466"
                                        "l-*-464"
                                        "l-*-462"
                                        "l-*-460"
                                        "l-*-458"
                                        "l-*-456"
                                        "l-*-454"
                                        "l-*-452"
                                        "l-*-450"
                                        "l-*-448"
                                        "l-*-446"
                                        "l-*-444"
                                        "l-*-442"
                                        "l-*-440"
                                        "l-*-438"
                                        "l-*-436"
                                        "l-*-434"
                                        "l-*-432"
                                        "l-*-430"
                                        "l-*-428"
                                        "l-*-426"
                                        "l-*-424"
                                        "l-*-422"
                                        "l-*-420"
                                        "l-*-418"
                                        "l-*-416"
                                        "l-*-414"
                                        "l-*-412"
                                        "l-*-410"
                                        "l-*-408"
                                        "l-*-406"
                                        "l-*-404"
                                        "l-*-402"
                                        "l-*-400"
                                        "l-*-399"
                                        "l-*-397"
                                        "l-*-394"
                                        "l-*-393"
                                        "l-*-392"
                                        "l-*-390"
                                        "l-*-389"
                                        "l-*-387"
                                        "l-*-385"
                                        "l-*-383"
                                        "l-*-381"
                                        "l-*-379"
                                        "l-*-377"
                                        "l-*-375"
                                        "l-*-373"
                                        "l-*-370"
                                        "l-*-368"
                                        "l-*-367"
                                        "l-*-365"
                                        "l-*-363"
                                        "l-*-361"
                                        "l-*-359"
                                        "l-*-358"
                                        "l-*-357"
                                        "l-*-356"
                                        "l-*-354"
                                        "l-*-353"
                                        "l-*-350"
                                        "l-*-348"
                                        "l-*-346"
                                        "l-*-344"
                                        "l-*-342"
                                        "l-*-340"
                                        "l-*-338"
                                        "l-*-337"
                                        "l-*-336"
                                        "l-*-334"
                                        "l-*-332"
                                        "l-*-331"
                                        "l-*-328"
                                        "l-*-327"
                                        "l-*-325"
                                        "l-*-323"
                                        "l-*-321"
                                        "l-*-319"
                                        "l-*-317"
                                        "l-*-315"
                                        "l-*-313"
                                        "l-*-311"
                                        "l-*-309"
                                        "l-*-306"
                                        "l-*-304"
                                        "l-*-302"
                                        "l-*-300"
                                        "l-*-298"
                                        "l-*-296"
                                        "l-*-294"
                                        "l-*-292"
                                        "l-*-290"
                                        "l-*-288"
                                        "l-*-286"
                                        "l-*-284"
                                        "l-*-282"
                                        "l-*-280"
                                        "l-*-278"
                                        "l-*-276"
                                        "l-*-274"
                                        "l-*-272"
                                        "l-*-270"
                                        "l-*-268"
                                        "l-*-266"
                                        "l-*-264"
                                        "l-*-262"
                                        "l-*-260"
                                        "l-*-258"
                                        "l-*-256"
                                        "l-*-255"
                                        "l-*-254"
                                        "l-*-253"
                                        "l-*-252"
                                        "l-*-250"
                                        "l-*-248"
                                        "l-*-246"
                                        "l-*-243"
                                        "l-*-241"
                                        "l-*-239"
                                        "l-*-237"
                                        "l-*-235"
                                        "l-*-233"
                                        "l-*-231"
                                        "l-*-229"
                                        "l-*-227"
                                        "l-*-225"
                                        "l-*-223"
                                        "l-*-221"
                                        "l-*-219"
                                        "l-*-217"
                                        "l-*-215"
                                        "l-*-213"
                                        "l-*-211"
                                        "l-*-209"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("l-*-47" "l-*-46" "l-*-45")))
                                    (hygiene guile)))
                               4)
                          #t
                          #f)
                      '...
                      '#(syntax-object
                         ...
                         ((top)
                          #(ribcage () () ())
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("l-*-2267"))
                          #(ribcage
                            (lambda-var-list
                              gen-var
                              strip
                              expand-lambda-case
                              lambda*-formals
                              expand-simple-lambda
                              lambda-formals
                              ellipsis?
                              expand-void
                              eval-local-transformer
                              expand-local-syntax
                              expand-body
                              expand-macro
                              expand-application
                              expand-expr
                              expand
                              syntax-type
                              parse-when-list
                              expand-install-global
                              expand-top-sequence
                              expand-sequence
                              source-wrap
                              wrap
                              bound-id-member?
                              distinct-bound-ids?
                              valid-bound-ids?
                              bound-id=?
                              free-id=?
                              with-transformer-environment
                              transformer-environment
                              resolve-identifier
                              locally-bound-identifiers
                              id-var-name
                              same-marks?
                              join-marks
                              join-wraps
                              smart-append
                              make-binding-wrap
                              extend-ribcage!
                              make-empty-ribcage
                              new-mark
                              anti-mark
                              the-anti-mark
                              top-marked?
                              top-wrap
                              empty-wrap
                              set-ribcage-labels!
                              set-ribcage-marks!
                              set-ribcage-symnames!
                              ribcage-labels
                              ribcage-marks
                              ribcage-symnames
                              ribcage?
                              make-ribcage
                              gen-labels
                              gen-label
                              make-rename
                              rename-marks
                              rename-new
                              rename-old
                              subst-rename?
                              wrap-subst
                              wrap-marks
                              make-wrap
                              id-sym-name&marks
                              id-sym-name
                              id?
                              nonsymbol-id?
                              global-extend
                              lookup
                              macros-only-env
                              extend-var-env
                              extend-env
                              null-env
                              binding-value
                              binding-type
                              make-binding
                              arg-check
                              source-annotation
                              no-source
                              set-syntax-object-module!
                              set-syntax-object-wrap!
                              set-syntax-object-expression!
                              syntax-object-module
                              syntax-object-wrap
                              syntax-object-expression
                              syntax-object?
                              make-syntax-object
                              build-lexical-var
                              build-letrec
                              build-named-let
                              build-let
                              build-sequence
                              build-data
                              build-primref
                              build-lambda-case
                              build-case-lambda
                              build-simple-lambda
                              build-global-definition
                              build-global-assignment
                              build-global-reference
                              analyze-variable
                              build-lexical-assignment
                              build-lexical-reference
                              build-dynlet
                              build-conditional
                              build-application
                              build-void
                              maybe-name-value!
                              decorate-source
                              get-global-definition-hook
                              put-global-definition-hook
                              session-id
                              local-eval-hook
                              top-level-eval-hook
                              fx<
                              fx=
                              fx-
                              fx+
                              set-lambda-meta!
                              lambda-meta
                              lambda?
                              make-dynlet
                              make-letrec
                              make-let
                              make-lambda-case
                              make-lambda
                              make-sequence
                              make-application
                              make-conditional
                              make-toplevel-define
                              make-toplevel-set
                              make-toplevel-ref
                              make-module-set
                              make-module-ref
                              make-lexical-set
                              make-lexical-ref
                              make-primitive-ref
                              make-const
                              make-void)
                            ((top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top))
                            ("l-*-476"
                             "l-*-474"
                             "l-*-472"
                             "l-*-470"
                             "l-*-468"
                             "l-*-466"
                             "l-*-464"
                             "l-*-462"
                             "l-*-460"
                             "l-*-458"
                             "l-*-456"
                             "l-*-454"
                             "l-*-452"
                             "l-*-450"
                             "l-*-448"
                             "l-*-446"
                             "l-*-444"
                             "l-*-442"
                             "l-*-440"
                             "l-*-438"
                             "l-*-436"
                             "l-*-434"
                             "l-*-432"
                             "l-*-430"
                             "l-*-428"
                             "l-*-426"
                             "l-*-424"
                             "l-*-422"
                             "l-*-420"
                             "l-*-418"
                             "l-*-416"
                             "l-*-414"
                             "l-*-412"
                             "l-*-410"
                             "l-*-408"
                             "l-*-406"
                             "l-*-404"
                             "l-*-402"
                             "l-*-400"
                             "l-*-399"
                             "l-*-397"
                             "l-*-394"
                             "l-*-393"
                             "l-*-392"
                             "l-*-390"
                             "l-*-389"
                             "l-*-387"
                             "l-*-385"
                             "l-*-383"
                             "l-*-381"
                             "l-*-379"
                             "l-*-377"
                             "l-*-375"
                             "l-*-373"
                             "l-*-370"
                             "l-*-368"
                             "l-*-367"
                             "l-*-365"
                             "l-*-363"
                             "l-*-361"
                             "l-*-359"
                             "l-*-358"
                             "l-*-357"
                             "l-*-356"
                             "l-*-354"
                             "l-*-353"
                             "l-*-350"
                             "l-*-348"
                             "l-*-346"
                             "l-*-344"
                             "l-*-342"
                             "l-*-340"
                             "l-*-338"
                             "l-*-337"
                             "l-*-336"
                             "l-*-334"
                             "l-*-332"
                             "l-*-331"
                             "l-*-328"
                             "l-*-327"
                             "l-*-325"
                             "l-*-323"
                             "l-*-321"
                             "l-*-319"
                             "l-*-317"
                             "l-*-315"
                             "l-*-313"
                             "l-*-311"
                             "l-*-309"
                             "l-*-306"
                             "l-*-304"
                             "l-*-302"
                             "l-*-300"
                             "l-*-298"
                             "l-*-296"
                             "l-*-294"
                             "l-*-292"
                             "l-*-290"
                             "l-*-288"
                             "l-*-286"
                             "l-*-284"
                             "l-*-282"
                             "l-*-280"
                             "l-*-278"
                             "l-*-276"
                             "l-*-274"
                             "l-*-272"
                             "l-*-270"
                             "l-*-268"
                             "l-*-266"
                             "l-*-264"
                             "l-*-262"
                             "l-*-260"
                             "l-*-258"
                             "l-*-256"
                             "l-*-255"
                             "l-*-254"
                             "l-*-253"
                             "l-*-252"
                             "l-*-250"
                             "l-*-248"
                             "l-*-246"
                             "l-*-243"
                             "l-*-241"
                             "l-*-239"
                             "l-*-237"
                             "l-*-235"
                             "l-*-233"
                             "l-*-231"
                             "l-*-229"
                             "l-*-227"
                             "l-*-225"
                             "l-*-223"
                             "l-*-221"
                             "l-*-219"
                             "l-*-217"
                             "l-*-215"
                             "l-*-213"
                             "l-*-211"
                             "l-*-209"))
                          #(ribcage
                            (define-structure
                              define-expansion-accessors
                              define-expansion-constructors)
                            ((top) (top) (top))
                            ("l-*-47" "l-*-46" "l-*-45")))
                         (hygiene guile))))
             (eq? (id-var-name-4314 x-5000 '(()))
                  (id-var-name-4314
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-2267"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            expand-lambda-case
                            lambda*-formals
                            expand-simple-lambda
                            lambda-formals
                            ellipsis?
                            expand-void
                            eval-local-transformer
                            expand-local-syntax
                            expand-body
                            expand-macro
                            expand-application
                            expand-expr
                            expand
                            syntax-type
                            parse-when-list
                            expand-install-global
                            expand-top-sequence
                            expand-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            with-transformer-environment
                            transformer-environment
                            resolve-identifier
                            locally-bound-identifiers
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            session-id
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("l-*-476"
                           "l-*-474"
                           "l-*-472"
                           "l-*-470"
                           "l-*-468"
                           "l-*-466"
                           "l-*-464"
                           "l-*-462"
                           "l-*-460"
                           "l-*-458"
                           "l-*-456"
                           "l-*-454"
                           "l-*-452"
                           "l-*-450"
                           "l-*-448"
                           "l-*-446"
                           "l-*-444"
                           "l-*-442"
                           "l-*-440"
                           "l-*-438"
                           "l-*-436"
                           "l-*-434"
                           "l-*-432"
                           "l-*-430"
                           "l-*-428"
                           "l-*-426"
                           "l-*-424"
                           "l-*-422"
                           "l-*-420"
                           "l-*-418"
                           "l-*-416"
                           "l-*-414"
                           "l-*-412"
                           "l-*-410"
                           "l-*-408"
                           "l-*-406"
                           "l-*-404"
                           "l-*-402"
                           "l-*-400"
                           "l-*-399"
                           "l-*-397"
                           "l-*-394"
                           "l-*-393"
                           "l-*-392"
                           "l-*-390"
                           "l-*-389"
                           "l-*-387"
                           "l-*-385"
                           "l-*-383"
                           "l-*-381"
                           "l-*-379"
                           "l-*-377"
                           "l-*-375"
                           "l-*-373"
                           "l-*-370"
                           "l-*-368"
                           "l-*-367"
                           "l-*-365"
                           "l-*-363"
                           "l-*-361"
                           "l-*-359"
                           "l-*-358"
                           "l-*-357"
                           "l-*-356"
                           "l-*-354"
                           "l-*-353"
                           "l-*-350"
                           "l-*-348"
                           "l-*-346"
                           "l-*-344"
                           "l-*-342"
                           "l-*-340"
                           "l-*-338"
                           "l-*-337"
                           "l-*-336"
                           "l-*-334"
                           "l-*-332"
                           "l-*-331"
                           "l-*-328"
                           "l-*-327"
                           "l-*-325"
                           "l-*-323"
                           "l-*-321"
                           "l-*-319"
                           "l-*-317"
                           "l-*-315"
                           "l-*-313"
                           "l-*-311"
                           "l-*-309"
                           "l-*-306"
                           "l-*-304"
                           "l-*-302"
                           "l-*-300"
                           "l-*-298"
                           "l-*-296"
                           "l-*-294"
                           "l-*-292"
                           "l-*-290"
                           "l-*-288"
                           "l-*-286"
                           "l-*-284"
                           "l-*-282"
                           "l-*-280"
                           "l-*-278"
                           "l-*-276"
                           "l-*-274"
                           "l-*-272"
                           "l-*-270"
                           "l-*-268"
                           "l-*-266"
                           "l-*-264"
                           "l-*-262"
                           "l-*-260"
                           "l-*-258"
                           "l-*-256"
                           "l-*-255"
                           "l-*-254"
                           "l-*-253"
                           "l-*-252"
                           "l-*-250"
                           "l-*-248"
                           "l-*-246"
                           "l-*-243"
                           "l-*-241"
                           "l-*-239"
                           "l-*-237"
                           "l-*-235"
                           "l-*-233"
                           "l-*-231"
                           "l-*-229"
                           "l-*-227"
                           "l-*-225"
                           "l-*-223"
                           "l-*-221"
                           "l-*-219"
                           "l-*-217"
                           "l-*-215"
                           "l-*-213"
                           "l-*-211"
                           "l-*-209"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("l-*-47" "l-*-46" "l-*-45")))
                       (hygiene guile))
                    '(())))
             #f)
           #f)))
     (lambda-formals-4340
       (lambda (orig-args-24769)
         (letrec*
           ((req-24770
              (lambda (args-24774 rreq-24775)
                (let ((tmp-24777 ($sc-dispatch args-24774 '())))
                  (if tmp-24777
                    (@apply
                      (lambda () (check-24771 (reverse rreq-24775) #f))
                      tmp-24777)
                    (let ((tmp-24900
                            ($sc-dispatch args-24774 '(any . any))))
                      (if (if tmp-24900
                            (@apply
                              (lambda (a-24904 b-24905)
                                (if (symbol? a-24904)
                                  #t
                                  (if (if (vector? a-24904)
                                        (if (= (vector-length a-24904) 4)
                                          (eq? (vector-ref a-24904 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-24904 1))
                                    #f)))
                              tmp-24900)
                            #f)
                        (@apply
                          (lambda (a-24932 b-24933)
                            (req-24770 b-24933 (cons a-24932 rreq-24775)))
                          tmp-24900)
                        (let ((tmp-24934 (list args-24774)))
                          (if (@apply
                                (lambda (r-24936)
                                  (if (symbol? r-24936)
                                    #t
                                    (if (if (vector? r-24936)
                                          (if (= (vector-length r-24936) 4)
                                            (eq? (vector-ref r-24936 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref r-24936 1))
                                      #f)))
                                tmp-24934)
                            (@apply
                              (lambda (r-24966)
                                (check-24771 (reverse rreq-24775) r-24966))
                              tmp-24934)
                            (syntax-violation
                              'lambda
                              "invalid argument list"
                              orig-args-24769
                              args-24774)))))))))
            (check-24771
              (lambda (req-25097 rest-25098)
                (if (distinct-bound-ids?-4322
                      (if rest-25098
                        (cons rest-25098 req-25097)
                        req-25097))
                  (values req-25097 #f rest-25098 #f)
                  (syntax-violation
                    'lambda
                    "duplicate identifier in argument list"
                    orig-args-24769)))))
           (req-24770 orig-args-24769 '()))))
     (expand-simple-lambda-4341
       (lambda (e-25214
                r-25215
                w-25216
                s-25217
                mod-25218
                req-25219
                rest-25220
                meta-25221
                body-25222)
         (let ((ids-25223
                 (if rest-25220
                   (append req-25219 (list rest-25220))
                   req-25219)))
           (let ((vars-25224 (map gen-var-4345 ids-25223)))
             (let ((labels-25225 (gen-labels-4298 ids-25223)))
               (build-simple-lambda-4271
                 s-25217
                 (map syntax->datum req-25219)
                 (if rest-25220 (syntax->datum rest-25220) #f)
                 vars-25224
                 meta-25221
                 (expand-body-4335
                   body-25222
                   (wrap-4324
                     (begin
                       (if (if s-25217
                             (supports-source-properties? e-25214)
                             #f)
                         (set-source-properties! e-25214 s-25217))
                       e-25214)
                     w-25216
                     mod-25218)
                   (extend-var-env-4290
                     labels-25225
                     vars-25224
                     r-25215)
                   (make-binding-wrap-4309
                     ids-25223
                     labels-25225
                     w-25216)
                   mod-25218)))))))
     (lambda*-formals-4342
       (lambda (orig-args-25505)
         (letrec*
           ((req-25506
              (lambda (args-25513 rreq-25514)
                (let ((tmp-25516 ($sc-dispatch args-25513 '())))
                  (if tmp-25516
                    (@apply
                      (lambda ()
                        (check-25510 (reverse rreq-25514) '() #f '()))
                      tmp-25516)
                    (let ((tmp-25522
                            ($sc-dispatch args-25513 '(any . any))))
                      (if (if tmp-25522
                            (@apply
                              (lambda (a-25526 b-25527)
                                (if (symbol? a-25526)
                                  #t
                                  (if (if (vector? a-25526)
                                        (if (= (vector-length a-25526) 4)
                                          (eq? (vector-ref a-25526 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-25526 1))
                                    #f)))
                              tmp-25522)
                            #f)
                        (@apply
                          (lambda (a-25554 b-25555)
                            (req-25506 b-25555 (cons a-25554 rreq-25514)))
                          tmp-25522)
                        (let ((tmp-25556
                                ($sc-dispatch args-25513 '(any . any))))
                          (if (if tmp-25556
                                (@apply
                                  (lambda (a-25560 b-25561)
                                    (eq? (syntax->datum a-25560) #:optional))
                                  tmp-25556)
                                #f)
                            (@apply
                              (lambda (a-25562 b-25563)
                                (opt-25507 b-25563 (reverse rreq-25514) '()))
                              tmp-25556)
                            (let ((tmp-25566
                                    ($sc-dispatch args-25513 '(any . any))))
                              (if (if tmp-25566
                                    (@apply
                                      (lambda (a-25570 b-25571)
                                        (eq? (syntax->datum a-25570) #:key))
                                      tmp-25566)
                                    #f)
                                (@apply
                                  (lambda (a-25572 b-25573)
                                    (key-25508
                                      b-25573
                                      (reverse rreq-25514)
                                      '()
                                      '()))
                                  tmp-25566)
                                (let ((tmp-25576
                                        ($sc-dispatch args-25513 '(any any))))
                                  (if (if tmp-25576
                                        (@apply
                                          (lambda (a-25580 b-25581)
                                            (eq? (syntax->datum a-25580)
                                                 #:rest))
                                          tmp-25576)
                                        #f)
                                    (@apply
                                      (lambda (a-25582 b-25583)
                                        (rest-25509
                                          b-25583
                                          (reverse rreq-25514)
                                          '()
                                          '()))
                                      tmp-25576)
                                    (let ((tmp-25586 (list args-25513)))
                                      (if (@apply
                                            (lambda (r-25588)
                                              (if (symbol? r-25588)
                                                #t
                                                (if (if (vector? r-25588)
                                                      (if (= (vector-length
                                                               r-25588)
                                                             4)
                                                        (eq? (vector-ref
                                                               r-25588
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref r-25588 1))
                                                  #f)))
                                            tmp-25586)
                                        (@apply
                                          (lambda (r-25618)
                                            (rest-25509
                                              r-25618
                                              (reverse rreq-25514)
                                              '()
                                              '()))
                                          tmp-25586)
                                        (syntax-violation
                                          'lambda*
                                          "invalid argument list"
                                          orig-args-25505
                                          args-25513)))))))))))))))
            (opt-25507
              (lambda (args-25637 req-25638 ropt-25639)
                (let ((tmp-25641 ($sc-dispatch args-25637 '())))
                  (if tmp-25641
                    (@apply
                      (lambda ()
                        (check-25510
                          req-25638
                          (reverse ropt-25639)
                          #f
                          '()))
                      tmp-25641)
                    (let ((tmp-25647
                            ($sc-dispatch args-25637 '(any . any))))
                      (if (if tmp-25647
                            (@apply
                              (lambda (a-25651 b-25652)
                                (if (symbol? a-25651)
                                  #t
                                  (if (if (vector? a-25651)
                                        (if (= (vector-length a-25651) 4)
                                          (eq? (vector-ref a-25651 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-25651 1))
                                    #f)))
                              tmp-25647)
                            #f)
                        (@apply
                          (lambda (a-25679 b-25680)
                            (opt-25507
                              b-25680
                              req-25638
                              (cons (cons a-25679
                                          '(#(syntax-object
                                              #f
                                              ((top)
                                               #(ribcage
                                                 #(a b)
                                                 #((top) (top))
                                                 #("l-*-2404" "l-*-2405"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(args req ropt)
                                                 #((top) (top) (top))
                                                 #("l-*-2394"
                                                   "l-*-2395"
                                                   "l-*-2396"))
                                               #(ribcage
                                                 (check rest key opt req)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-2340"
                                                  "l-*-2338"
                                                  "l-*-2336"
                                                  "l-*-2334"
                                                  "l-*-2332"))
                                               #(ribcage
                                                 #(orig-args)
                                                 #((top))
                                                 #("l-*-2331"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-application
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   parse-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   with-transformer-environment
                                                   transformer-environment
                                                   resolve-identifier
                                                   locally-bound-identifiers
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-application
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   session-id
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-sequence
                                                   make-application
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-476"
                                                  "l-*-474"
                                                  "l-*-472"
                                                  "l-*-470"
                                                  "l-*-468"
                                                  "l-*-466"
                                                  "l-*-464"
                                                  "l-*-462"
                                                  "l-*-460"
                                                  "l-*-458"
                                                  "l-*-456"
                                                  "l-*-454"
                                                  "l-*-452"
                                                  "l-*-450"
                                                  "l-*-448"
                                                  "l-*-446"
                                                  "l-*-444"
                                                  "l-*-442"
                                                  "l-*-440"
                                                  "l-*-438"
                                                  "l-*-436"
                                                  "l-*-434"
                                                  "l-*-432"
                                                  "l-*-430"
                                                  "l-*-428"
                                                  "l-*-426"
                                                  "l-*-424"
                                                  "l-*-422"
                                                  "l-*-420"
                                                  "l-*-418"
                                                  "l-*-416"
                                                  "l-*-414"
                                                  "l-*-412"
                                                  "l-*-410"
                                                  "l-*-408"
                                                  "l-*-406"
                                                  "l-*-404"
                                                  "l-*-402"
                                                  "l-*-400"
                                                  "l-*-399"
                                                  "l-*-397"
                                                  "l-*-394"
                                                  "l-*-393"
                                                  "l-*-392"
                                                  "l-*-390"
                                                  "l-*-389"
                                                  "l-*-387"
                                                  "l-*-385"
                                                  "l-*-383"
                                                  "l-*-381"
                                                  "l-*-379"
                                                  "l-*-377"
                                                  "l-*-375"
                                                  "l-*-373"
                                                  "l-*-370"
                                                  "l-*-368"
                                                  "l-*-367"
                                                  "l-*-365"
                                                  "l-*-363"
                                                  "l-*-361"
                                                  "l-*-359"
                                                  "l-*-358"
                                                  "l-*-357"
                                                  "l-*-356"
                                                  "l-*-354"
                                                  "l-*-353"
                                                  "l-*-350"
                                                  "l-*-348"
                                                  "l-*-346"
                                                  "l-*-344"
                                                  "l-*-342"
                                                  "l-*-340"
                                                  "l-*-338"
                                                  "l-*-337"
                                                  "l-*-336"
                                                  "l-*-334"
                                                  "l-*-332"
                                                  "l-*-331"
                                                  "l-*-328"
                                                  "l-*-327"
                                                  "l-*-325"
                                                  "l-*-323"
                                                  "l-*-321"
                                                  "l-*-319"
                                                  "l-*-317"
                                                  "l-*-315"
                                                  "l-*-313"
                                                  "l-*-311"
                                                  "l-*-309"
                                                  "l-*-306"
                                                  "l-*-304"
                                                  "l-*-302"
                                                  "l-*-300"
                                                  "l-*-298"
                                                  "l-*-296"
                                                  "l-*-294"
                                                  "l-*-292"
                                                  "l-*-290"
                                                  "l-*-288"
                                                  "l-*-286"
                                                  "l-*-284"
                                                  "l-*-282"
                                                  "l-*-280"
                                                  "l-*-278"
                                                  "l-*-276"
                                                  "l-*-274"
                                                  "l-*-272"
                                                  "l-*-270"
                                                  "l-*-268"
                                                  "l-*-266"
                                                  "l-*-264"
                                                  "l-*-262"
                                                  "l-*-260"
                                                  "l-*-258"
                                                  "l-*-256"
                                                  "l-*-255"
                                                  "l-*-254"
                                                  "l-*-253"
                                                  "l-*-252"
                                                  "l-*-250"
                                                  "l-*-248"
                                                  "l-*-246"
                                                  "l-*-243"
                                                  "l-*-241"
                                                  "l-*-239"
                                                  "l-*-237"
                                                  "l-*-235"
                                                  "l-*-233"
                                                  "l-*-231"
                                                  "l-*-229"
                                                  "l-*-227"
                                                  "l-*-225"
                                                  "l-*-223"
                                                  "l-*-221"
                                                  "l-*-219"
                                                  "l-*-217"
                                                  "l-*-215"
                                                  "l-*-213"
                                                  "l-*-211"
                                                  "l-*-209"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("l-*-47" "l-*-46" "l-*-45")))
                                              (hygiene guile))))
                                    ropt-25639)))
                          tmp-25647)
                        (let ((tmp-25681
                                ($sc-dispatch args-25637 '((any any) . any))))
                          (if (if tmp-25681
                                (@apply
                                  (lambda (a-25685 init-25686 b-25687)
                                    (if (symbol? a-25685)
                                      #t
                                      (if (if (vector? a-25685)
                                            (if (= (vector-length a-25685) 4)
                                              (eq? (vector-ref a-25685 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref a-25685 1))
                                        #f)))
                                  tmp-25681)
                                #f)
                            (@apply
                              (lambda (a-25714 init-25715 b-25716)
                                (opt-25507
                                  b-25716
                                  req-25638
                                  (cons (list a-25714 init-25715) ropt-25639)))
                              tmp-25681)
                            (let ((tmp-25717
                                    ($sc-dispatch args-25637 '(any . any))))
                              (if (if tmp-25717
                                    (@apply
                                      (lambda (a-25721 b-25722)
                                        (eq? (syntax->datum a-25721) #:key))
                                      tmp-25717)
                                    #f)
                                (@apply
                                  (lambda (a-25723 b-25724)
                                    (key-25508
                                      b-25724
                                      req-25638
                                      (reverse ropt-25639)
                                      '()))
                                  tmp-25717)
                                (let ((tmp-25727
                                        ($sc-dispatch args-25637 '(any any))))
                                  (if (if tmp-25727
                                        (@apply
                                          (lambda (a-25731 b-25732)
                                            (eq? (syntax->datum a-25731)
                                                 #:rest))
                                          tmp-25727)
                                        #f)
                                    (@apply
                                      (lambda (a-25733 b-25734)
                                        (rest-25509
                                          b-25734
                                          req-25638
                                          (reverse ropt-25639)
                                          '()))
                                      tmp-25727)
                                    (let ((tmp-25737 (list args-25637)))
                                      (if (@apply
                                            (lambda (r-25739)
                                              (if (symbol? r-25739)
                                                #t
                                                (if (if (vector? r-25739)
                                                      (if (= (vector-length
                                                               r-25739)
                                                             4)
                                                        (eq? (vector-ref
                                                               r-25739
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref r-25739 1))
                                                  #f)))
                                            tmp-25737)
                                        (@apply
                                          (lambda (r-25769)
                                            (rest-25509
                                              r-25769
                                              req-25638
                                              (reverse ropt-25639)
                                              '()))
                                          tmp-25737)
                                        (syntax-violation
                                          'lambda*
                                          "invalid optional argument list"
                                          orig-args-25505
                                          args-25637)))))))))))))))
            (key-25508
              (lambda (args-25788 req-25789 opt-25790 rkey-25791)
                (let ((tmp-25793 ($sc-dispatch args-25788 '())))
                  (if tmp-25793
                    (@apply
                      (lambda ()
                        (check-25510
                          req-25789
                          opt-25790
                          #f
                          (cons #f (reverse rkey-25791))))
                      tmp-25793)
                    (let ((tmp-25799
                            ($sc-dispatch args-25788 '(any . any))))
                      (if (if tmp-25799
                            (@apply
                              (lambda (a-25803 b-25804)
                                (if (symbol? a-25803)
                                  #t
                                  (if (if (vector? a-25803)
                                        (if (= (vector-length a-25803) 4)
                                          (eq? (vector-ref a-25803 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-25803 1))
                                    #f)))
                              tmp-25799)
                            #f)
                        (@apply
                          (lambda (a-25831 b-25832)
                            (let ((tmp-25833
                                    (symbol->keyword (syntax->datum a-25831))))
                              (key-25508
                                b-25832
                                req-25789
                                opt-25790
                                (cons (cons tmp-25833
                                            (cons a-25831
                                                  '(#(syntax-object
                                                      #f
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(k)
                                                         #((top))
                                                         #("l-*-2467"))
                                                       #(ribcage
                                                         #(a b)
                                                         #((top) (top))
                                                         #("l-*-2461"
                                                           "l-*-2462"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(args req opt rkey)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("l-*-2450"
                                                           "l-*-2451"
                                                           "l-*-2452"
                                                           "l-*-2453"))
                                                       #(ribcage
                                                         (check rest
                                                                key
                                                                opt
                                                                req)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-2340"
                                                          "l-*-2338"
                                                          "l-*-2336"
                                                          "l-*-2334"
                                                          "l-*-2332"))
                                                       #(ribcage
                                                         #(orig-args)
                                                         #((top))
                                                         #("l-*-2331"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           session-id
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-476"
                                                          "l-*-474"
                                                          "l-*-472"
                                                          "l-*-470"
                                                          "l-*-468"
                                                          "l-*-466"
                                                          "l-*-464"
                                                          "l-*-462"
                                                          "l-*-460"
                                                          "l-*-458"
                                                          "l-*-456"
                                                          "l-*-454"
                                                          "l-*-452"
                                                          "l-*-450"
                                                          "l-*-448"
                                                          "l-*-446"
                                                          "l-*-444"
                                                          "l-*-442"
                                                          "l-*-440"
                                                          "l-*-438"
                                                          "l-*-436"
                                                          "l-*-434"
                                                          "l-*-432"
                                                          "l-*-430"
                                                          "l-*-428"
                                                          "l-*-426"
                                                          "l-*-424"
                                                          "l-*-422"
                                                          "l-*-420"
                                                          "l-*-418"
                                                          "l-*-416"
                                                          "l-*-414"
                                                          "l-*-412"
                                                          "l-*-410"
                                                          "l-*-408"
                                                          "l-*-406"
                                                          "l-*-404"
                                                          "l-*-402"
                                                          "l-*-400"
                                                          "l-*-399"
                                                          "l-*-397"
                                                          "l-*-394"
                                                          "l-*-393"
                                                          "l-*-392"
                                                          "l-*-390"
                                                          "l-*-389"
                                                          "l-*-387"
                                                          "l-*-385"
                                                          "l-*-383"
                                                          "l-*-381"
                                                          "l-*-379"
                                                          "l-*-377"
                                                          "l-*-375"
                                                          "l-*-373"
                                                          "l-*-370"
                                                          "l-*-368"
                                                          "l-*-367"
                                                          "l-*-365"
                                                          "l-*-363"
                                                          "l-*-361"
                                                          "l-*-359"
                                                          "l-*-358"
                                                          "l-*-357"
                                                          "l-*-356"
                                                          "l-*-354"
                                                          "l-*-353"
                                                          "l-*-350"
                                                          "l-*-348"
                                                          "l-*-346"
                                                          "l-*-344"
                                                          "l-*-342"
                                                          "l-*-340"
                                                          "l-*-338"
                                                          "l-*-337"
                                                          "l-*-336"
                                                          "l-*-334"
                                                          "l-*-332"
                                                          "l-*-331"
                                                          "l-*-328"
                                                          "l-*-327"
                                                          "l-*-325"
                                                          "l-*-323"
                                                          "l-*-321"
                                                          "l-*-319"
                                                          "l-*-317"
                                                          "l-*-315"
                                                          "l-*-313"
                                                          "l-*-311"
                                                          "l-*-309"
                                                          "l-*-306"
                                                          "l-*-304"
                                                          "l-*-302"
                                                          "l-*-300"
                                                          "l-*-298"
                                                          "l-*-296"
                                                          "l-*-294"
                                                          "l-*-292"
                                                          "l-*-290"
                                                          "l-*-288"
                                                          "l-*-286"
                                                          "l-*-284"
                                                          "l-*-282"
                                                          "l-*-280"
                                                          "l-*-278"
                                                          "l-*-276"
                                                          "l-*-274"
                                                          "l-*-272"
                                                          "l-*-270"
                                                          "l-*-268"
                                                          "l-*-266"
                                                          "l-*-264"
                                                          "l-*-262"
                                                          "l-*-260"
                                                          "l-*-258"
                                                          "l-*-256"
                                                          "l-*-255"
                                                          "l-*-254"
                                                          "l-*-253"
                                                          "l-*-252"
                                                          "l-*-250"
                                                          "l-*-248"
                                                          "l-*-246"
                                                          "l-*-243"
                                                          "l-*-241"
                                                          "l-*-239"
                                                          "l-*-237"
                                                          "l-*-235"
                                                          "l-*-233"
                                                          "l-*-231"
                                                          "l-*-229"
                                                          "l-*-227"
                                                          "l-*-225"
                                                          "l-*-223"
                                                          "l-*-221"
                                                          "l-*-219"
                                                          "l-*-217"
                                                          "l-*-215"
                                                          "l-*-213"
                                                          "l-*-211"
                                                          "l-*-209"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("l-*-47"
                                                          "l-*-46"
                                                          "l-*-45")))
                                                      (hygiene guile)))))
                                      rkey-25791))))
                          tmp-25799)
                        (let ((tmp-25836
                                ($sc-dispatch args-25788 '((any any) . any))))
                          (if (if tmp-25836
                                (@apply
                                  (lambda (a-25840 init-25841 b-25842)
                                    (if (symbol? a-25840)
                                      #t
                                      (if (if (vector? a-25840)
                                            (if (= (vector-length a-25840) 4)
                                              (eq? (vector-ref a-25840 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref a-25840 1))
                                        #f)))
                                  tmp-25836)
                                #f)
                            (@apply
                              (lambda (a-25869 init-25870 b-25871)
                                (let ((tmp-25872
                                        (symbol->keyword
                                          (syntax->datum a-25869))))
                                  (key-25508
                                    b-25871
                                    req-25789
                                    opt-25790
                                    (cons (list tmp-25872 a-25869 init-25870)
                                          rkey-25791))))
                              tmp-25836)
                            (let ((tmp-25875
                                    ($sc-dispatch
                                      args-25788
                                      '((any any any) . any))))
                              (if (if tmp-25875
                                    (@apply
                                      (lambda (a-25879
                                               init-25880
                                               k-25881
                                               b-25882)
                                        (if (if (symbol? a-25879)
                                              #t
                                              (if (if (vector? a-25879)
                                                    (if (= (vector-length
                                                             a-25879)
                                                           4)
                                                      (eq? (vector-ref
                                                             a-25879
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref a-25879 1))
                                                #f))
                                          (keyword? (syntax->datum k-25881))
                                          #f))
                                      tmp-25875)
                                    #f)
                                (@apply
                                  (lambda (a-25909 init-25910 k-25911 b-25912)
                                    (key-25508
                                      b-25912
                                      req-25789
                                      opt-25790
                                      (cons (list k-25911 a-25909 init-25910)
                                            rkey-25791)))
                                  tmp-25875)
                                (let ((tmp-25913
                                        ($sc-dispatch args-25788 '(any))))
                                  (if (if tmp-25913
                                        (@apply
                                          (lambda (aok-25917)
                                            (eq? (syntax->datum aok-25917)
                                                 #:allow-other-keys))
                                          tmp-25913)
                                        #f)
                                    (@apply
                                      (lambda (aok-25918)
                                        (check-25510
                                          req-25789
                                          opt-25790
                                          #f
                                          (cons #t (reverse rkey-25791))))
                                      tmp-25913)
                                    (let ((tmp-25921
                                            ($sc-dispatch
                                              args-25788
                                              '(any any any))))
                                      (if (if tmp-25921
                                            (@apply
                                              (lambda (aok-25925
                                                       a-25926
                                                       b-25927)
                                                (if (eq? (syntax->datum
                                                           aok-25925)
                                                         #:allow-other-keys)
                                                  (eq? (syntax->datum a-25926)
                                                       #:rest)
                                                  #f))
                                              tmp-25921)
                                            #f)
                                        (@apply
                                          (lambda (aok-25928 a-25929 b-25930)
                                            (rest-25509
                                              b-25930
                                              req-25789
                                              opt-25790
                                              (cons #t (reverse rkey-25791))))
                                          tmp-25921)
                                        (let ((tmp-25933
                                                ($sc-dispatch
                                                  args-25788
                                                  '(any . any))))
                                          (if (if tmp-25933
                                                (@apply
                                                  (lambda (aok-25937 r-25938)
                                                    (if (eq? (syntax->datum
                                                               aok-25937)
                                                             #:allow-other-keys)
                                                      (if (symbol? r-25938)
                                                        #t
                                                        (if (if (vector?
                                                                  r-25938)
                                                              (if (= (vector-length
                                                                       r-25938)
                                                                     4)
                                                                (eq? (vector-ref
                                                                       r-25938
                                                                       0)
                                                                     'syntax-object)
                                                                #f)
                                                              #f)
                                                          (symbol?
                                                            (vector-ref
                                                              r-25938
                                                              1))
                                                          #f))
                                                      #f))
                                                  tmp-25933)
                                                #f)
                                            (@apply
                                              (lambda (aok-25965 r-25966)
                                                (rest-25509
                                                  r-25966
                                                  req-25789
                                                  opt-25790
                                                  (cons #t
                                                        (reverse rkey-25791))))
                                              tmp-25933)
                                            (let ((tmp-25969
                                                    ($sc-dispatch
                                                      args-25788
                                                      '(any any))))
                                              (if (if tmp-25969
                                                    (@apply
                                                      (lambda (a-25973 b-25974)
                                                        (eq? (syntax->datum
                                                               a-25973)
                                                             #:rest))
                                                      tmp-25969)
                                                    #f)
                                                (@apply
                                                  (lambda (a-25975 b-25976)
                                                    (rest-25509
                                                      b-25976
                                                      req-25789
                                                      opt-25790
                                                      (cons #f
                                                            (reverse
                                                              rkey-25791))))
                                                  tmp-25969)
                                                (let ((tmp-25979
                                                        (list args-25788)))
                                                  (if (@apply
                                                        (lambda (r-25981)
                                                          (if (symbol? r-25981)
                                                            #t
                                                            (if (if (vector?
                                                                      r-25981)
                                                                  (if (= (vector-length
                                                                           r-25981)
                                                                         4)
                                                                    (eq? (vector-ref
                                                                           r-25981
                                                                           0)
                                                                         'syntax-object)
                                                                    #f)
                                                                  #f)
                                                              (symbol?
                                                                (vector-ref
                                                                  r-25981
                                                                  1))
                                                              #f)))
                                                        tmp-25979)
                                                    (@apply
                                                      (lambda (r-26011)
                                                        (rest-25509
                                                          r-26011
                                                          req-25789
                                                          opt-25790
                                                          (cons #f
                                                                (reverse
                                                                  rkey-25791))))
                                                      tmp-25979)
                                                    (syntax-violation
                                                      'lambda*
                                                      "invalid keyword argument list"
                                                      orig-args-25505
                                                      args-25788)))))))))))))))))))))
            (rest-25509
              (lambda (args-26039 req-26040 opt-26041 kw-26042)
                (let ((tmp-26044 (list args-26039)))
                  (if (@apply
                        (lambda (r-26046)
                          (if (symbol? r-26046)
                            #t
                            (if (if (vector? r-26046)
                                  (if (= (vector-length r-26046) 4)
                                    (eq? (vector-ref r-26046 0) 'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref r-26046 1))
                              #f)))
                        tmp-26044)
                    (@apply
                      (lambda (r-26076)
                        (check-25510
                          req-26040
                          opt-26041
                          r-26076
                          kw-26042))
                      tmp-26044)
                    (syntax-violation
                      'lambda*
                      "invalid rest argument"
                      orig-args-25505
                      args-26039)))))
            (check-25510
              (lambda (req-26080 opt-26081 rest-26082 kw-26083)
                (if (distinct-bound-ids?-4322
                      (append
                        req-26080
                        (map car opt-26081)
                        (if rest-26082 (list rest-26082) '())
                        (if (pair? kw-26083)
                          (map cadr (cdr kw-26083))
                          '())))
                  (values req-26080 opt-26081 rest-26082 kw-26083)
                  (syntax-violation
                    'lambda*
                    "duplicate identifier in argument list"
                    orig-args-25505)))))
           (req-25506 orig-args-25505 '()))))
     (expand-lambda-case-4343
       (lambda (e-26199
                r-26200
                w-26201
                s-26202
                mod-26203
                get-formals-26204
                clauses-26205)
         (letrec*
           ((parse-req-26206
              (lambda (req-26337
                       opt-26338
                       rest-26339
                       kw-26340
                       body-26341)
                (let ((vars-26342 (map gen-var-4345 req-26337))
                      (labels-26343 (gen-labels-4298 req-26337)))
                  (let ((r*-26344
                          (extend-var-env-4290
                            labels-26343
                            vars-26342
                            r-26200))
                        (w*-26345
                          (make-binding-wrap-4309
                            req-26337
                            labels-26343
                            w-26201)))
                    (parse-opt-26207
                      (map syntax->datum req-26337)
                      opt-26338
                      rest-26339
                      kw-26340
                      body-26341
                      (reverse vars-26342)
                      r*-26344
                      w*-26345
                      '()
                      '())))))
            (parse-opt-26207
              (lambda (req-26531
                       opt-26532
                       rest-26533
                       kw-26534
                       body-26535
                       vars-26536
                       r*-26537
                       w*-26538
                       out-26539
                       inits-26540)
                (if (pair? opt-26532)
                  (let ((tmp-26541 (car opt-26532)))
                    (let ((tmp-26542 ($sc-dispatch tmp-26541 '(any any))))
                      (if tmp-26542
                        (@apply
                          (lambda (id-26544 i-26545)
                            (let ((v-26546
                                    (let ((id-26554
                                            (if (if (vector? id-26544)
                                                  (if (= (vector-length
                                                           id-26544)
                                                         4)
                                                    (eq? (vector-ref
                                                           id-26544
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref id-26544 1)
                                              id-26544)))
                                      (gensym
                                        (string-append
                                          (symbol->string id-26554)
                                          "-")))))
                              (let ((l-26547 (gen-labels-4298 (list v-26546))))
                                (let ((r**-26548
                                        (extend-var-env-4290
                                          l-26547
                                          (list v-26546)
                                          r*-26537)))
                                  (let ((w**-26549
                                          (make-binding-wrap-4309
                                            (list id-26544)
                                            l-26547
                                            w*-26538)))
                                    (parse-opt-26207
                                      req-26531
                                      (cdr opt-26532)
                                      rest-26533
                                      kw-26534
                                      body-26535
                                      (cons v-26546 vars-26536)
                                      r**-26548
                                      w**-26549
                                      (cons (syntax->datum id-26544) out-26539)
                                      (cons (expand-4331
                                              i-26545
                                              r*-26537
                                              w*-26538
                                              mod-26203)
                                            inits-26540)))))))
                          tmp-26542)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-26541))))
                  (if rest-26533
                    (let ((v-26792
                            (let ((id-26802
                                    (if (if (vector? rest-26533)
                                          (if (= (vector-length rest-26533) 4)
                                            (eq? (vector-ref rest-26533 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref rest-26533 1)
                                      rest-26533)))
                              (gensym
                                (string-append
                                  (symbol->string id-26802)
                                  "-")))))
                      (let ((l-26793 (gen-labels-4298 (list v-26792))))
                        (let ((r*-26794
                                (extend-var-env-4290
                                  l-26793
                                  (list v-26792)
                                  r*-26537)))
                          (let ((w*-26795
                                  (make-binding-wrap-4309
                                    (list rest-26533)
                                    l-26793
                                    w*-26538)))
                            (parse-kw-26208
                              req-26531
                              (if (pair? out-26539) (reverse out-26539) #f)
                              (syntax->datum rest-26533)
                              (if (pair? kw-26534) (cdr kw-26534) kw-26534)
                              body-26535
                              (cons v-26792 vars-26536)
                              r*-26794
                              w*-26795
                              (if (pair? kw-26534) (car kw-26534) #f)
                              '()
                              inits-26540)))))
                    (parse-kw-26208
                      req-26531
                      (if (pair? out-26539) (reverse out-26539) #f)
                      #f
                      (if (pair? kw-26534) (cdr kw-26534) kw-26534)
                      body-26535
                      vars-26536
                      r*-26537
                      w*-26538
                      (if (pair? kw-26534) (car kw-26534) #f)
                      '()
                      inits-26540)))))
            (parse-kw-26208
              (lambda (req-26973
                       opt-26974
                       rest-26975
                       kw-26976
                       body-26977
                       vars-26978
                       r*-26979
                       w*-26980
                       aok-26981
                       out-26982
                       inits-26983)
                (if (pair? kw-26976)
                  (let ((tmp-26984 (car kw-26976)))
                    (let ((tmp-26985
                            ($sc-dispatch tmp-26984 '(any any any))))
                      (if tmp-26985
                        (@apply
                          (lambda (k-26987 id-26988 i-26989)
                            (let ((v-26990
                                    (let ((id-26998
                                            (if (if (vector? id-26988)
                                                  (if (= (vector-length
                                                           id-26988)
                                                         4)
                                                    (eq? (vector-ref
                                                           id-26988
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref id-26988 1)
                                              id-26988)))
                                      (gensym
                                        (string-append
                                          (symbol->string id-26998)
                                          "-")))))
                              (let ((l-26991 (gen-labels-4298 (list v-26990))))
                                (let ((r**-26992
                                        (extend-var-env-4290
                                          l-26991
                                          (list v-26990)
                                          r*-26979)))
                                  (let ((w**-26993
                                          (make-binding-wrap-4309
                                            (list id-26988)
                                            l-26991
                                            w*-26980)))
                                    (parse-kw-26208
                                      req-26973
                                      opt-26974
                                      rest-26975
                                      (cdr kw-26976)
                                      body-26977
                                      (cons v-26990 vars-26978)
                                      r**-26992
                                      w**-26993
                                      aok-26981
                                      (cons (list (syntax->datum k-26987)
                                                  (syntax->datum id-26988)
                                                  v-26990)
                                            out-26982)
                                      (cons (expand-4331
                                              i-26989
                                              r*-26979
                                              w*-26980
                                              mod-26203)
                                            inits-26983)))))))
                          tmp-26985)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-26984))))
                  (parse-body-26209
                    req-26973
                    opt-26974
                    rest-26975
                    (if (if aok-26981 aok-26981 (pair? out-26982))
                      (cons aok-26981 (reverse out-26982))
                      #f)
                    body-26977
                    (reverse vars-26978)
                    r*-26979
                    w*-26980
                    (reverse inits-26983)
                    '()))))
            (parse-body-26209
              (lambda (req-27245
                       opt-27246
                       rest-27247
                       kw-27248
                       body-27249
                       vars-27250
                       r*-27251
                       w*-27252
                       inits-27253
                       meta-27254)
                (let ((tmp-27256
                        ($sc-dispatch body-27249 '(any any . each-any))))
                  (if (if tmp-27256
                        (@apply
                          (lambda (docstring-27260 e1-27261 e2-27262)
                            (string? (syntax->datum docstring-27260)))
                          tmp-27256)
                        #f)
                    (@apply
                      (lambda (docstring-27263 e1-27264 e2-27265)
                        (parse-body-26209
                          req-27245
                          opt-27246
                          rest-27247
                          kw-27248
                          (cons e1-27264 e2-27265)
                          vars-27250
                          r*-27251
                          w*-27252
                          inits-27253
                          (append
                            meta-27254
                            (list (cons 'documentation
                                        (syntax->datum docstring-27263))))))
                      tmp-27256)
                    (let ((tmp-27266
                            ($sc-dispatch
                              body-27249
                              '(#(vector #(each (any . any)))
                                any
                                .
                                each-any))))
                      (if tmp-27266
                        (@apply
                          (lambda (k-27270 v-27271 e1-27272 e2-27273)
                            (parse-body-26209
                              req-27245
                              opt-27246
                              rest-27247
                              kw-27248
                              (cons e1-27272 e2-27273)
                              vars-27250
                              r*-27251
                              w*-27252
                              inits-27253
                              (append
                                meta-27254
                                (syntax->datum (map cons k-27270 v-27271)))))
                          tmp-27266)
                        (let ((tmp-27274
                                ($sc-dispatch body-27249 '(any . each-any))))
                          (if tmp-27274
                            (@apply
                              (lambda (e1-27278 e2-27279)
                                (values
                                  meta-27254
                                  req-27245
                                  opt-27246
                                  rest-27247
                                  kw-27248
                                  inits-27253
                                  vars-27250
                                  (expand-body-4335
                                    (cons e1-27278 e2-27279)
                                    (wrap-4324
                                      (begin
                                        (if (if s-26202
                                              (supports-source-properties?
                                                e-26199)
                                              #f)
                                          (set-source-properties!
                                            e-26199
                                            s-26202))
                                        e-26199)
                                      w-26201
                                      mod-26203)
                                    r*-27251
                                    w*-27252
                                    mod-26203)))
                              tmp-27274)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              body-27249))))))))))
           (let ((tmp-26211 ($sc-dispatch clauses-26205 '())))
             (if tmp-26211
               (@apply (lambda () (values '() #f)) tmp-26211)
               (let ((tmp-26215
                       ($sc-dispatch
                         clauses-26205
                         '((any any . each-any)
                           .
                           #(each (any any . each-any))))))
                 (if tmp-26215
                   (@apply
                     (lambda (args-26219
                              e1-26220
                              e2-26221
                              args*-26222
                              e1*-26223
                              e2*-26224)
                       (call-with-values
                         (lambda () (get-formals-26204 args-26219))
                         (lambda (req-26225 opt-26226 rest-26227 kw-26228)
                           (call-with-values
                             (lambda ()
                               (parse-req-26206
                                 req-26225
                                 opt-26226
                                 rest-26227
                                 kw-26228
                                 (cons e1-26220 e2-26221)))
                             (lambda (meta-26293
                                      req-26294
                                      opt-26295
                                      rest-26296
                                      kw-26297
                                      inits-26298
                                      vars-26299
                                      body-26300)
                               (call-with-values
                                 (lambda ()
                                   (expand-lambda-case-4343
                                     e-26199
                                     r-26200
                                     w-26201
                                     s-26202
                                     mod-26203
                                     get-formals-26204
                                     (map (lambda (tmp-2802-26301
                                                   tmp-2801-26302
                                                   tmp-2800-26303)
                                            (cons tmp-2800-26303
                                                  (cons tmp-2801-26302
                                                        tmp-2802-26301)))
                                          e2*-26224
                                          e1*-26223
                                          args*-26222)))
                                 (lambda (meta*-26304 else*-26305)
                                   (values
                                     (append meta-26293 meta*-26304)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       s-26202
                                       req-26294
                                       opt-26295
                                       rest-26296
                                       kw-26297
                                       inits-26298
                                       vars-26299
                                       body-26300
                                       else*-26305)))))))))
                     tmp-26215)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     clauses-26205))))))))
     (strip-4344
       (lambda (x-27316 w-27317)
         (if (memq 'top (car w-27317))
           x-27316
           (letrec*
             ((f-27318
                (lambda (x-27321)
                  (if (if (vector? x-27321)
                        (if (= (vector-length x-27321) 4)
                          (eq? (vector-ref x-27321 0) 'syntax-object)
                          #f)
                        #f)
                    (strip-4344
                      (vector-ref x-27321 1)
                      (vector-ref x-27321 2))
                    (if (pair? x-27321)
                      (let ((a-27340 (f-27318 (car x-27321)))
                            (d-27341 (f-27318 (cdr x-27321))))
                        (if (if (eq? a-27340 (car x-27321))
                              (eq? d-27341 (cdr x-27321))
                              #f)
                          x-27321
                          (cons a-27340 d-27341)))
                      (if (vector? x-27321)
                        (let ((old-27344 (vector->list x-27321)))
                          (let ((new-27345 (map f-27318 old-27344)))
                            (letrec*
                              ((lp-27346
                                 (lambda (l1-27422 l2-27423)
                                   (if (null? l1-27422)
                                     x-27321
                                     (if (eq? (car l1-27422) (car l2-27423))
                                       (lp-27346 (cdr l1-27422) (cdr l2-27423))
                                       (list->vector new-27345))))))
                              (lp-27346 old-27344 new-27345))))
                        x-27321))))))
             (f-27318 x-27316)))))
     (gen-var-4345
       (lambda (id-26349)
         (let ((id-26350
                 (if (if (vector? id-26349)
                       (if (= (vector-length id-26349) 4)
                         (eq? (vector-ref id-26349 0) 'syntax-object)
                         #f)
                       #f)
                   (vector-ref id-26349 1)
                   id-26349)))
           (gensym
             (string-append (symbol->string id-26350) "-"))))))
    (begin
      (set! session-id-4256
        (let ((v-15685
                (module-variable
                  (current-module)
                  'syntax-session-id)))
          (lambda () ((variable-ref v-15685)))))
      (set! transformer-environment-4317
        (make-fluid
          (lambda (k-14717)
            (error "called outside the dynamic extent of a syntax transformer"))))
      (module-define!
        (current-module)
        'letrec-syntax
        (make-syntax-transformer
          'letrec-syntax
          'local-syntax
          #t))
      (module-define!
        (current-module)
        'let-syntax
        (make-syntax-transformer
          'let-syntax
          'local-syntax
          #f))
      (global-extend-4293
        'core
        'syntax-parameterize
        (lambda (e-4466 r-4467 w-4468 s-4469 mod-4470)
          (let ((tmp-4472
                  ($sc-dispatch
                    e-4466
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-4472
                  (@apply
                    (lambda (var-4476 val-4477 e1-4478 e2-4479)
                      (valid-bound-ids?-4321 var-4476))
                    tmp-4472)
                  #f)
              (@apply
                (lambda (var-4557 val-4558 e1-4559 e2-4560)
                  (let ((names-4561
                          (map (lambda (x-4611)
                                 (id-var-name-4314 x-4611 w-4468))
                               var-4557)))
                    (begin
                      (for-each
                        (lambda (id-4562 n-4563)
                          (let ((key-4564
                                  (car (let ((t-4571 (assq n-4563 r-4467)))
                                         (if t-4571
                                           (cdr t-4571)
                                           (if (symbol? n-4563)
                                             (let ((t-4576
                                                     (get-global-definition-hook-4258
                                                       n-4563
                                                       mod-4470)))
                                               (if t-4576 t-4576 '(global)))
                                             '(displaced-lexical)))))))
                            (if (eqv? key-4564 'displaced-lexical)
                              (syntax-violation
                                'syntax-parameterize
                                "identifier out of context"
                                e-4466
                                (wrap-4324
                                  (begin
                                    (if (if s-4469
                                          (supports-source-properties? id-4562)
                                          #f)
                                      (set-source-properties! id-4562 s-4469))
                                    id-4562)
                                  w-4468
                                  mod-4470)))))
                        var-4557
                        names-4561)
                      (expand-body-4335
                        (cons e1-4559 e2-4560)
                        (wrap-4324
                          (begin
                            (if (if s-4469
                                  (supports-source-properties? e-4466)
                                  #f)
                              (set-source-properties! e-4466 s-4469))
                            e-4466)
                          w-4468
                          mod-4470)
                        (extend-env-4289
                          names-4561
                          (let ((trans-r-4697 (macros-only-env-4291 r-4467)))
                            (map (lambda (x-4698)
                                   (cons 'macro
                                         (eval-local-transformer-4337
                                           (expand-4331
                                             x-4698
                                             trans-r-4697
                                             w-4468
                                             mod-4470)
                                           mod-4470)))
                                 val-4558))
                          r-4467)
                        w-4468
                        mod-4470))))
                tmp-4472)
              (syntax-violation
                'syntax-parameterize
                "bad syntax"
                (wrap-4324
                  (begin
                    (if (if s-4469
                          (supports-source-properties? e-4466)
                          #f)
                      (set-source-properties! e-4466 s-4469))
                    e-4466)
                  w-4468
                  mod-4470))))))
      (module-define!
        (current-module)
        'quote
        (make-syntax-transformer
          'quote
          'core
          (lambda (e-4907 r-4908 w-4909 s-4910 mod-4911)
            (let ((tmp-4913 ($sc-dispatch e-4907 '(_ any))))
              (if tmp-4913
                (@apply
                  (lambda (e-4916)
                    (let ((exp-4920 (strip-4344 e-4916 w-4909)))
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 1)
                        s-4910
                        exp-4920)))
                  tmp-4913)
                (syntax-violation
                  'quote
                  "bad syntax"
                  (wrap-4324
                    (begin
                      (if (if s-4910
                            (supports-source-properties? e-4907)
                            #f)
                        (set-source-properties! e-4907 s-4910))
                      e-4907)
                    w-4909
                    mod-4911)))))))
      (global-extend-4293
        'core
        'syntax
        (letrec*
          ((gen-syntax-5140
             (lambda (src-5242
                      e-5243
                      r-5244
                      maps-5245
                      ellipsis?-5246
                      mod-5247)
               (if (if (symbol? e-5243)
                     #t
                     (if (if (vector? e-5243)
                           (if (= (vector-length e-5243) 4)
                             (eq? (vector-ref e-5243 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref e-5243 1))
                       #f))
                 (let ((label-5274 (id-var-name-4314 e-5243 '(()))))
                   (let ((b-5275
                           (let ((t-5282 (assq label-5274 r-5244)))
                             (if t-5282
                               (cdr t-5282)
                               (if (symbol? label-5274)
                                 (let ((t-5288
                                         (get-global-definition-hook-4258
                                           label-5274
                                           mod-5247)))
                                   (if t-5288 t-5288 '(global)))
                                 '(displaced-lexical))))))
                     (if (eq? (car b-5275) 'syntax)
                       (call-with-values
                         (lambda ()
                           (let ((var.lev-5297 (cdr b-5275)))
                             (gen-ref-5141
                               src-5242
                               (car var.lev-5297)
                               (cdr var.lev-5297)
                               maps-5245)))
                         (lambda (var-5301 maps-5302)
                           (values (list 'ref var-5301) maps-5302)))
                       (if (ellipsis?-5246 e-5243)
                         (syntax-violation
                           'syntax
                           "misplaced ellipsis"
                           src-5242)
                         (values (list 'quote e-5243) maps-5245)))))
                 (let ((tmp-5304 ($sc-dispatch e-5243 '(any any))))
                   (if (if tmp-5304
                         (@apply
                           (lambda (dots-5308 e-5309)
                             (ellipsis?-5246 dots-5308))
                           tmp-5304)
                         #f)
                     (@apply
                       (lambda (dots-5310 e-5311)
                         (gen-syntax-5140
                           src-5242
                           e-5311
                           r-5244
                           maps-5245
                           (lambda (x-5312) #f)
                           mod-5247))
                       tmp-5304)
                     (let ((tmp-5313 ($sc-dispatch e-5243 '(any any . any))))
                       (if (if tmp-5313
                             (@apply
                               (lambda (x-5317 dots-5318 y-5319)
                                 (ellipsis?-5246 dots-5318))
                               tmp-5313)
                             #f)
                         (@apply
                           (lambda (x-5320 dots-5321 y-5322)
                             (letrec*
                               ((f-5323
                                  (lambda (y-5331 k-5332)
                                    (let ((tmp-5334
                                            ($sc-dispatch
                                              y-5331
                                              '(any . any))))
                                      (if (if tmp-5334
                                            (@apply
                                              (lambda (dots-5338 y-5339)
                                                (ellipsis?-5246 dots-5338))
                                              tmp-5334)
                                            #f)
                                        (@apply
                                          (lambda (dots-5340 y-5341)
                                            (f-5323
                                              y-5341
                                              (lambda (maps-5342)
                                                (call-with-values
                                                  (lambda ()
                                                    (k-5332
                                                      (cons '() maps-5342)))
                                                  (lambda (x-5343 maps-5344)
                                                    (if (null? (car maps-5344))
                                                      (syntax-violation
                                                        'syntax
                                                        "extra ellipsis"
                                                        src-5242)
                                                      (values
                                                        (let ((map-env-5348
                                                                (car maps-5344)))
                                                          (list 'apply
                                                                '(primitive
                                                                   append)
                                                                (gen-map-5143
                                                                  x-5343
                                                                  map-env-5348)))
                                                        (cdr maps-5344))))))))
                                          tmp-5334)
                                        (call-with-values
                                          (lambda ()
                                            (gen-syntax-5140
                                              src-5242
                                              y-5331
                                              r-5244
                                              maps-5245
                                              ellipsis?-5246
                                              mod-5247))
                                          (lambda (y-5351 maps-5352)
                                            (call-with-values
                                              (lambda () (k-5332 maps-5352))
                                              (lambda (x-5353 maps-5354)
                                                (values
                                                  (if (equal? y-5351 ''())
                                                    x-5353
                                                    (list 'append
                                                          x-5353
                                                          y-5351))
                                                  maps-5354))))))))))
                               (f-5323
                                 y-5322
                                 (lambda (maps-5326)
                                   (call-with-values
                                     (lambda ()
                                       (gen-syntax-5140
                                         src-5242
                                         x-5320
                                         r-5244
                                         (cons '() maps-5326)
                                         ellipsis?-5246
                                         mod-5247))
                                     (lambda (x-5327 maps-5328)
                                       (if (null? (car maps-5328))
                                         (syntax-violation
                                           'syntax
                                           "extra ellipsis"
                                           src-5242)
                                         (values
                                           (gen-map-5143
                                             x-5327
                                             (car maps-5328))
                                           (cdr maps-5328)))))))))
                           tmp-5313)
                         (let ((tmp-5370 ($sc-dispatch e-5243 '(any . any))))
                           (if tmp-5370
                             (@apply
                               (lambda (x-5374 y-5375)
                                 (call-with-values
                                   (lambda ()
                                     (gen-syntax-5140
                                       src-5242
                                       x-5374
                                       r-5244
                                       maps-5245
                                       ellipsis?-5246
                                       mod-5247))
                                   (lambda (x-5376 maps-5377)
                                     (call-with-values
                                       (lambda ()
                                         (gen-syntax-5140
                                           src-5242
                                           y-5375
                                           r-5244
                                           maps-5377
                                           ellipsis?-5246
                                           mod-5247))
                                       (lambda (y-5378 maps-5379)
                                         (values
                                           (let ((key-5384 (car y-5378)))
                                             (if (eqv? key-5384 'quote)
                                               (if (eq? (car x-5376) 'quote)
                                                 (list 'quote
                                                       (cons (car (cdr x-5376))
                                                             (car (cdr y-5378))))
                                                 (if (eq? (car (cdr y-5378))
                                                          '())
                                                   (list 'list x-5376)
                                                   (list 'cons x-5376 y-5378)))
                                               (if (eqv? key-5384 'list)
                                                 (cons 'list
                                                       (cons x-5376
                                                             (cdr y-5378)))
                                                 (list 'cons x-5376 y-5378))))
                                           maps-5379))))))
                               tmp-5370)
                             (let ((tmp-5413
                                     ($sc-dispatch
                                       e-5243
                                       '#(vector (any . each-any)))))
                               (if tmp-5413
                                 (@apply
                                   (lambda (e1-5417 e2-5418)
                                     (call-with-values
                                       (lambda ()
                                         (gen-syntax-5140
                                           src-5242
                                           (cons e1-5417 e2-5418)
                                           r-5244
                                           maps-5245
                                           ellipsis?-5246
                                           mod-5247))
                                       (lambda (e-5419 maps-5420)
                                         (values
                                           (if (eq? (car e-5419) 'list)
                                             (cons 'vector (cdr e-5419))
                                             (if (eq? (car e-5419) 'quote)
                                               (list 'quote
                                                     (list->vector
                                                       (car (cdr e-5419))))
                                               (list 'list->vector e-5419)))
                                           maps-5420))))
                                   tmp-5413)
                                 (values
                                   (list 'quote e-5243)
                                   maps-5245))))))))))))
           (gen-ref-5141
             (lambda (src-5447 var-5448 level-5449 maps-5450)
               (if (= level-5449 0)
                 (values var-5448 maps-5450)
                 (if (null? maps-5450)
                   (syntax-violation
                     'syntax
                     "missing ellipsis"
                     src-5447)
                   (call-with-values
                     (lambda ()
                       (gen-ref-5141
                         src-5447
                         var-5448
                         (#{1-}# level-5449)
                         (cdr maps-5450)))
                     (lambda (outer-var-5451 outer-maps-5452)
                       (let ((b-5453 (assq outer-var-5451 (car maps-5450))))
                         (if b-5453
                           (values (cdr b-5453) maps-5450)
                           (let ((inner-var-5455
                                   (gensym
                                     (string-append
                                       (symbol->string 'tmp)
                                       "-"))))
                             (values
                               inner-var-5455
                               (cons (cons (cons outer-var-5451 inner-var-5455)
                                           (car maps-5450))
                                     outer-maps-5452)))))))))))
           (gen-map-5143
             (lambda (e-5469 map-env-5470)
               (let ((formals-5471 (map cdr map-env-5470))
                     (actuals-5472
                       (map (lambda (x-5474) (list 'ref (car x-5474)))
                            map-env-5470)))
                 (if (eq? (car e-5469) 'ref)
                   (car actuals-5472)
                   (if (and-map
                         (lambda (x-5475)
                           (if (eq? (car x-5475) 'ref)
                             (memq (car (cdr x-5475)) formals-5471)
                             #f))
                         (cdr e-5469))
                     (cons 'map
                           (cons (list 'primitive (car e-5469))
                                 (map (let ((r-5477
                                              (map cons
                                                   formals-5471
                                                   actuals-5472)))
                                        (lambda (x-5478)
                                          (cdr (assq (car (cdr x-5478))
                                                     r-5477))))
                                      (cdr e-5469))))
                     (cons 'map
                           (cons (list 'lambda formals-5471 e-5469)
                                 actuals-5472)))))))
           (regen-5147
             (lambda (x-5480)
               (let ((key-5481 (car x-5480)))
                 (if (eqv? key-5481 'ref)
                   (let ((name-5491 (car (cdr x-5480)))
                         (var-5492 (car (cdr x-5480))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 3)
                       #f
                       name-5491
                       var-5492))
                   (if (eqv? key-5481 'primitive)
                     (let ((name-5504 (car (cdr x-5480))))
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           name-5504)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           name-5504
                           #f)))
                     (if (eqv? key-5481 'quote)
                       (let ((exp-5522 (car (cdr x-5480))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 1)
                           #f
                           exp-5522))
                       (if (eqv? key-5481 'lambda)
                         (if (list? (car (cdr x-5480)))
                           (let ((req-5533 (car (cdr x-5480)))
                                 (vars-5535 (car (cdr x-5480)))
                                 (exp-5537
                                   (regen-5147 (car (cdr (cdr x-5480))))))
                             (let ((body-5542
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       req-5533
                                       #f
                                       #f
                                       #f
                                       '()
                                       vars-5535
                                       exp-5537
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 body-5542)))
                           (error "how did we get here" x-5480))
                         (let ((fun-exp-5558
                                 (let ((name-5567 (car x-5480)))
                                   (if (equal?
                                         (module-name (current-module))
                                         '(guile))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 7)
                                       #f
                                       name-5567)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 5)
                                       #f
                                       '(guile)
                                       name-5567
                                       #f))))
                               (arg-exps-5559 (map regen-5147 (cdr x-5480))))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 11)
                             #f
                             fun-exp-5558
                             arg-exps-5559))))))))))
          (lambda (e-5148 r-5149 w-5150 s-5151 mod-5152)
            (let ((e-5153
                    (wrap-4324
                      (begin
                        (if (if s-5151
                              (supports-source-properties? e-5148)
                              #f)
                          (set-source-properties! e-5148 s-5151))
                        e-5148)
                      w-5150
                      mod-5152)))
              (let ((tmp-5155 ($sc-dispatch e-5153 '(_ any))))
                (if tmp-5155
                  (@apply
                    (lambda (x-5180)
                      (call-with-values
                        (lambda ()
                          (gen-syntax-5140
                            e-5153
                            x-5180
                            r-5149
                            '()
                            ellipsis?-4339
                            mod-5152))
                        (lambda (e-5234 maps-5235) (regen-5147 e-5234))))
                    tmp-5155)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    e-5153)))))))
      (global-extend-4293
        'core
        'lambda
        (lambda (e-5755 r-5756 w-5757 s-5758 mod-5759)
          (let ((tmp-5761
                  ($sc-dispatch e-5755 '(_ any any . each-any))))
            (if tmp-5761
              (@apply
                (lambda (args-5765 e1-5766 e2-5767)
                  (call-with-values
                    (lambda () (lambda-formals-4340 args-5765))
                    (lambda (req-5770 opt-5771 rest-5772 kw-5773)
                      (letrec*
                        ((lp-5774
                           (lambda (body-5777 meta-5778)
                             (let ((tmp-5780
                                     ($sc-dispatch
                                       body-5777
                                       '(any any . each-any))))
                               (if (if tmp-5780
                                     (@apply
                                       (lambda (docstring-5784 e1-5785 e2-5786)
                                         (string?
                                           (syntax->datum docstring-5784)))
                                       tmp-5780)
                                     #f)
                                 (@apply
                                   (lambda (docstring-5787 e1-5788 e2-5789)
                                     (lp-5774
                                       (cons e1-5788 e2-5789)
                                       (append
                                         meta-5778
                                         (list (cons 'documentation
                                                     (syntax->datum
                                                       docstring-5787))))))
                                   tmp-5780)
                                 (let ((tmp-5790
                                         ($sc-dispatch
                                           body-5777
                                           '(#(vector #(each (any . any)))
                                             any
                                             .
                                             each-any))))
                                   (if tmp-5790
                                     (@apply
                                       (lambda (k-5794 v-5795 e1-5796 e2-5797)
                                         (lp-5774
                                           (cons e1-5796 e2-5797)
                                           (append
                                             meta-5778
                                             (syntax->datum
                                               (map cons k-5794 v-5795)))))
                                       tmp-5790)
                                     (expand-simple-lambda-4341
                                       e-5755
                                       r-5756
                                       w-5757
                                       s-5758
                                       mod-5759
                                       req-5770
                                       rest-5772
                                       meta-5778
                                       body-5777))))))))
                        (lp-5774 (cons e1-5766 e2-5767) '())))))
                tmp-5761)
              (syntax-violation 'lambda "bad lambda" e-5755)))))
      (global-extend-4293
        'core
        'lambda*
        (lambda (e-6086 r-6087 w-6088 s-6089 mod-6090)
          (let ((tmp-6092
                  ($sc-dispatch e-6086 '(_ any any . each-any))))
            (if tmp-6092
              (@apply
                (lambda (args-6096 e1-6097 e2-6098)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-4343
                        e-6086
                        r-6087
                        w-6088
                        s-6089
                        mod-6090
                        lambda*-formals-4342
                        (list (cons args-6096 (cons e1-6097 e2-6098)))))
                    (lambda (meta-6101 lcase-6102)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        s-6089
                        meta-6101
                        lcase-6102))))
                tmp-6092)
              (syntax-violation 'lambda "bad lambda*" e-6086)))))
      (global-extend-4293
        'core
        'case-lambda
        (lambda (e-6272 r-6273 w-6274 s-6275 mod-6276)
          (let ((tmp-6278
                  ($sc-dispatch
                    e-6272
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if tmp-6278
              (@apply
                (lambda (args-6282
                         e1-6283
                         e2-6284
                         args*-6285
                         e1*-6286
                         e2*-6287)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-4343
                        e-6272
                        r-6273
                        w-6274
                        s-6275
                        mod-6276
                        lambda-formals-4340
                        (cons (cons args-6282 (cons e1-6283 e2-6284))
                              (map (lambda (tmp-3270-6290
                                            tmp-3269-6291
                                            tmp-3268-6292)
                                     (cons tmp-3268-6292
                                           (cons tmp-3269-6291 tmp-3270-6290)))
                                   e2*-6287
                                   e1*-6286
                                   args*-6285))))
                    (lambda (meta-6293 lcase-6294)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        s-6275
                        meta-6293
                        lcase-6294))))
                tmp-6278)
              (syntax-violation
                'case-lambda
                "bad case-lambda"
                e-6272)))))
      (global-extend-4293
        'core
        'case-lambda*
        (lambda (e-6456 r-6457 w-6458 s-6459 mod-6460)
          (let ((tmp-6462
                  ($sc-dispatch
                    e-6456
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if tmp-6462
              (@apply
                (lambda (args-6466
                         e1-6467
                         e2-6468
                         args*-6469
                         e1*-6470
                         e2*-6471)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-4343
                        e-6456
                        r-6457
                        w-6458
                        s-6459
                        mod-6460
                        lambda*-formals-4342
                        (cons (cons args-6466 (cons e1-6467 e2-6468))
                              (map (lambda (tmp-3305-6474
                                            tmp-3304-6475
                                            tmp-3303-6476)
                                     (cons tmp-3303-6476
                                           (cons tmp-3304-6475 tmp-3305-6474)))
                                   e2*-6471
                                   e1*-6470
                                   args*-6469))))
                    (lambda (meta-6477 lcase-6478)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        s-6459
                        meta-6477
                        lcase-6478))))
                tmp-6462)
              (syntax-violation
                'case-lambda
                "bad case-lambda*"
                e-6456)))))
      (global-extend-4293
        'core
        'let
        (letrec*
          ((expand-let-6669
             (lambda (e-6818
                      r-6819
                      w-6820
                      s-6821
                      mod-6822
                      constructor-6823
                      ids-6824
                      vals-6825
                      exps-6826)
               (if (not (valid-bound-ids?-4321 ids-6824))
                 (syntax-violation
                   'let
                   "duplicate bound variable"
                   e-6818)
                 (let ((labels-6904 (gen-labels-4298 ids-6824))
                       (new-vars-6905 (map gen-var-4345 ids-6824)))
                   (let ((nw-6906
                           (make-binding-wrap-4309
                             ids-6824
                             labels-6904
                             w-6820))
                         (nr-6907
                           (extend-var-env-4290
                             labels-6904
                             new-vars-6905
                             r-6819)))
                     (constructor-6823
                       s-6821
                       (map syntax->datum ids-6824)
                       new-vars-6905
                       (map (lambda (x-6924)
                              (expand-4331 x-6924 r-6819 w-6820 mod-6822))
                            vals-6825)
                       (expand-body-4335
                         exps-6826
                         (source-wrap-4325 e-6818 nw-6906 s-6821 mod-6822)
                         nr-6907
                         nw-6906
                         mod-6822))))))))
          (lambda (e-6670 r-6671 w-6672 s-6673 mod-6674)
            (let ((tmp-6676
                    ($sc-dispatch
                      e-6670
                      '(_ #(each (any any)) any . each-any))))
              (if (if tmp-6676
                    (@apply
                      (lambda (id-6680 val-6681 e1-6682 e2-6683)
                        (and-map id?-4295 id-6680))
                      tmp-6676)
                    #f)
                (@apply
                  (lambda (id-6699 val-6700 e1-6701 e2-6702)
                    (expand-let-6669
                      e-6670
                      r-6671
                      w-6672
                      s-6673
                      mod-6674
                      build-let-4277
                      id-6699
                      val-6700
                      (cons e1-6701 e2-6702)))
                  tmp-6676)
                (let ((tmp-6732
                        ($sc-dispatch
                          e-6670
                          '(_ any #(each (any any)) any . each-any))))
                  (if (if tmp-6732
                        (@apply
                          (lambda (f-6736 id-6737 val-6738 e1-6739 e2-6740)
                            (if (if (symbol? f-6736)
                                  #t
                                  (if (if (vector? f-6736)
                                        (if (= (vector-length f-6736) 4)
                                          (eq? (vector-ref f-6736 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref f-6736 1))
                                    #f))
                              (and-map id?-4295 id-6737)
                              #f))
                          tmp-6732)
                        #f)
                    (@apply
                      (lambda (f-6782 id-6783 val-6784 e1-6785 e2-6786)
                        (expand-let-6669
                          e-6670
                          r-6671
                          w-6672
                          s-6673
                          mod-6674
                          build-named-let-4278
                          (cons f-6782 id-6783)
                          val-6784
                          (cons e1-6785 e2-6786)))
                      tmp-6732)
                    (syntax-violation
                      'let
                      "bad let"
                      (wrap-4324
                        (begin
                          (if (if s-6673
                                (supports-source-properties? e-6670)
                                #f)
                            (set-source-properties! e-6670 s-6673))
                          e-6670)
                        w-6672
                        mod-6674)))))))))
      (global-extend-4293
        'core
        'letrec
        (lambda (e-7336 r-7337 w-7338 s-7339 mod-7340)
          (let ((tmp-7342
                  ($sc-dispatch
                    e-7336
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-7342
                  (@apply
                    (lambda (id-7346 val-7347 e1-7348 e2-7349)
                      (and-map id?-4295 id-7346))
                    tmp-7342)
                  #f)
              (@apply
                (lambda (id-7365 val-7366 e1-7367 e2-7368)
                  (if (not (valid-bound-ids?-4321 id-7365))
                    (syntax-violation
                      'letrec
                      "duplicate bound variable"
                      e-7336)
                    (let ((labels-7458 (gen-labels-4298 id-7365))
                          (new-vars-7459 (map gen-var-4345 id-7365)))
                      (let ((w-7460
                              (make-binding-wrap-4309
                                id-7365
                                labels-7458
                                w-7338))
                            (r-7461
                              (extend-var-env-4290
                                labels-7458
                                new-vars-7459
                                r-7337)))
                        (build-letrec-4279
                          s-7339
                          #f
                          (map syntax->datum id-7365)
                          new-vars-7459
                          (map (lambda (x-7546)
                                 (expand-4331 x-7546 r-7461 w-7460 mod-7340))
                               val-7366)
                          (expand-body-4335
                            (cons e1-7367 e2-7368)
                            (wrap-4324
                              (begin
                                (if (if s-7339
                                      (supports-source-properties? e-7336)
                                      #f)
                                  (set-source-properties! e-7336 s-7339))
                                e-7336)
                              w-7460
                              mod-7340)
                            r-7461
                            w-7460
                            mod-7340))))))
                tmp-7342)
              (syntax-violation
                'letrec
                "bad letrec"
                (wrap-4324
                  (begin
                    (if (if s-7339
                          (supports-source-properties? e-7336)
                          #f)
                      (set-source-properties! e-7336 s-7339))
                    e-7336)
                  w-7338
                  mod-7340))))))
      (global-extend-4293
        'core
        'letrec*
        (lambda (e-7941 r-7942 w-7943 s-7944 mod-7945)
          (let ((tmp-7947
                  ($sc-dispatch
                    e-7941
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-7947
                  (@apply
                    (lambda (id-7951 val-7952 e1-7953 e2-7954)
                      (and-map id?-4295 id-7951))
                    tmp-7947)
                  #f)
              (@apply
                (lambda (id-7970 val-7971 e1-7972 e2-7973)
                  (if (not (valid-bound-ids?-4321 id-7970))
                    (syntax-violation
                      'letrec*
                      "duplicate bound variable"
                      e-7941)
                    (let ((labels-8063 (gen-labels-4298 id-7970))
                          (new-vars-8064 (map gen-var-4345 id-7970)))
                      (let ((w-8065
                              (make-binding-wrap-4309
                                id-7970
                                labels-8063
                                w-7943))
                            (r-8066
                              (extend-var-env-4290
                                labels-8063
                                new-vars-8064
                                r-7942)))
                        (build-letrec-4279
                          s-7944
                          #t
                          (map syntax->datum id-7970)
                          new-vars-8064
                          (map (lambda (x-8151)
                                 (expand-4331 x-8151 r-8066 w-8065 mod-7945))
                               val-7971)
                          (expand-body-4335
                            (cons e1-7972 e2-7973)
                            (wrap-4324
                              (begin
                                (if (if s-7944
                                      (supports-source-properties? e-7941)
                                      #f)
                                  (set-source-properties! e-7941 s-7944))
                                e-7941)
                              w-8065
                              mod-7945)
                            r-8066
                            w-8065
                            mod-7945))))))
                tmp-7947)
              (syntax-violation
                'letrec*
                "bad letrec*"
                (wrap-4324
                  (begin
                    (if (if s-7944
                          (supports-source-properties? e-7941)
                          #f)
                      (set-source-properties! e-7941 s-7944))
                    e-7941)
                  w-7943
                  mod-7945))))))
      (global-extend-4293
        'core
        'set!
        (lambda (e-8585 r-8586 w-8587 s-8588 mod-8589)
          (let ((tmp-8591 ($sc-dispatch e-8585 '(_ any any))))
            (if (if tmp-8591
                  (@apply
                    (lambda (id-8595 val-8596)
                      (if (symbol? id-8595)
                        #t
                        (if (if (vector? id-8595)
                              (if (= (vector-length id-8595) 4)
                                (eq? (vector-ref id-8595 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-8595 1))
                          #f)))
                    tmp-8591)
                  #f)
              (@apply
                (lambda (id-8623 val-8624)
                  (let ((n-8625 (id-var-name-4314 id-8623 w-8587))
                        (id-mod-8626
                          (if (if (vector? id-8623)
                                (if (= (vector-length id-8623) 4)
                                  (eq? (vector-ref id-8623 0) 'syntax-object)
                                  #f)
                                #f)
                            (vector-ref id-8623 3)
                            mod-8589)))
                    (let ((b-8627
                            (let ((t-8668 (assq n-8625 r-8586)))
                              (if t-8668
                                (cdr t-8668)
                                (if (symbol? n-8625)
                                  (let ((t-8673
                                          (get-global-definition-hook-4258
                                            n-8625
                                            id-mod-8626)))
                                    (if t-8673 t-8673 '(global)))
                                  '(displaced-lexical))))))
                      (let ((key-8628 (car b-8627)))
                        (if (eqv? key-8628 'lexical)
                          (build-lexical-assignment-4266
                            s-8588
                            (syntax->datum id-8623)
                            (cdr b-8627)
                            (expand-4331 val-8624 r-8586 w-8587 mod-8589))
                          (if (eqv? key-8628 'global)
                            (build-global-assignment-4269
                              s-8588
                              n-8625
                              (expand-4331 val-8624 r-8586 w-8587 mod-8589)
                              id-mod-8626)
                            (if (eqv? key-8628 'macro)
                              (let ((p-8987 (cdr b-8627)))
                                (if (procedure-property
                                      p-8987
                                      'variable-transformer)
                                  (expand-4331
                                    (expand-macro-4334
                                      p-8987
                                      e-8585
                                      r-8586
                                      w-8587
                                      s-8588
                                      #f
                                      mod-8589)
                                    r-8586
                                    '(())
                                    mod-8589)
                                  (syntax-violation
                                    'set!
                                    "not a variable transformer"
                                    (wrap-4324 e-8585 w-8587 mod-8589)
                                    (wrap-4324 id-8623 w-8587 id-mod-8626))))
                              (if (eqv? key-8628 'displaced-lexical)
                                (syntax-violation
                                  'set!
                                  "identifier out of context"
                                  (wrap-4324 id-8623 w-8587 mod-8589))
                                (syntax-violation
                                  'set!
                                  "bad set!"
                                  (wrap-4324
                                    (begin
                                      (if (if s-8588
                                            (supports-source-properties?
                                              e-8585)
                                            #f)
                                        (set-source-properties! e-8585 s-8588))
                                      e-8585)
                                    w-8587
                                    mod-8589))))))))))
                tmp-8591)
              (let ((tmp-9082
                      ($sc-dispatch e-8585 '(_ (any . each-any) any))))
                (if tmp-9082
                  (@apply
                    (lambda (head-9086 tail-9087 val-9088)
                      (call-with-values
                        (lambda ()
                          (syntax-type-4330
                            head-9086
                            r-8586
                            '(())
                            #f
                            #f
                            mod-8589
                            #t))
                        (lambda (type-9091
                                 value-9092
                                 formform-9093
                                 ee-9094
                                 ww-9095
                                 ss-9096
                                 modmod-9097)
                          (if (eqv? type-9091 'module-ref)
                            (let ((val-9103
                                    (expand-4331
                                      val-9088
                                      r-8586
                                      w-8587
                                      mod-8589)))
                              (call-with-values
                                (lambda ()
                                  (value-9092
                                    (cons head-9086 tail-9087)
                                    r-8586
                                    w-8587))
                                (lambda (e-9104 r-9105 w-9106 s*-9107 mod-9108)
                                  (let ((tmp-9110 (list e-9104)))
                                    (if (@apply
                                          (lambda (e-9112)
                                            (if (symbol? e-9112)
                                              #t
                                              (if (if (vector? e-9112)
                                                    (if (= (vector-length
                                                             e-9112)
                                                           4)
                                                      (eq? (vector-ref
                                                             e-9112
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol? (vector-ref e-9112 1))
                                                #f)))
                                          tmp-9110)
                                      (@apply
                                        (lambda (e-9142)
                                          (build-global-assignment-4269
                                            s-8588
                                            (syntax->datum e-9142)
                                            val-9103
                                            mod-9108))
                                        tmp-9110)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        e-9104))))))
                            (build-application-4262
                              s-8588
                              (let ((e-9367
                                      (list '#(syntax-object
                                               setter
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(key)
                                                  #((m-*-3554 top))
                                                  #("l-*-3555"))
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(type
                                                    value
                                                    formform
                                                    ee
                                                    ww
                                                    ss
                                                    modmod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-3547"
                                                    "l-*-3548"
                                                    "l-*-3549"
                                                    "l-*-3550"
                                                    "l-*-3551"
                                                    "l-*-3552"
                                                    "l-*-3553"))
                                                #(ribcage
                                                  #(head tail val)
                                                  #((top) (top) (top))
                                                  #("l-*-3532"
                                                    "l-*-3533"
                                                    "l-*-3534"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(e r w s mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-3501"
                                                    "l-*-3502"
                                                    "l-*-3503"
                                                    "l-*-3504"
                                                    "l-*-3505"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    session-id
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-476"
                                                   "l-*-474"
                                                   "l-*-472"
                                                   "l-*-470"
                                                   "l-*-468"
                                                   "l-*-466"
                                                   "l-*-464"
                                                   "l-*-462"
                                                   "l-*-460"
                                                   "l-*-458"
                                                   "l-*-456"
                                                   "l-*-454"
                                                   "l-*-452"
                                                   "l-*-450"
                                                   "l-*-448"
                                                   "l-*-446"
                                                   "l-*-444"
                                                   "l-*-442"
                                                   "l-*-440"
                                                   "l-*-438"
                                                   "l-*-436"
                                                   "l-*-434"
                                                   "l-*-432"
                                                   "l-*-430"
                                                   "l-*-428"
                                                   "l-*-426"
                                                   "l-*-424"
                                                   "l-*-422"
                                                   "l-*-420"
                                                   "l-*-418"
                                                   "l-*-416"
                                                   "l-*-414"
                                                   "l-*-412"
                                                   "l-*-410"
                                                   "l-*-408"
                                                   "l-*-406"
                                                   "l-*-404"
                                                   "l-*-402"
                                                   "l-*-400"
                                                   "l-*-399"
                                                   "l-*-397"
                                                   "l-*-394"
                                                   "l-*-393"
                                                   "l-*-392"
                                                   "l-*-390"
                                                   "l-*-389"
                                                   "l-*-387"
                                                   "l-*-385"
                                                   "l-*-383"
                                                   "l-*-381"
                                                   "l-*-379"
                                                   "l-*-377"
                                                   "l-*-375"
                                                   "l-*-373"
                                                   "l-*-370"
                                                   "l-*-368"
                                                   "l-*-367"
                                                   "l-*-365"
                                                   "l-*-363"
                                                   "l-*-361"
                                                   "l-*-359"
                                                   "l-*-358"
                                                   "l-*-357"
                                                   "l-*-356"
                                                   "l-*-354"
                                                   "l-*-353"
                                                   "l-*-350"
                                                   "l-*-348"
                                                   "l-*-346"
                                                   "l-*-344"
                                                   "l-*-342"
                                                   "l-*-340"
                                                   "l-*-338"
                                                   "l-*-337"
                                                   "l-*-336"
                                                   "l-*-334"
                                                   "l-*-332"
                                                   "l-*-331"
                                                   "l-*-328"
                                                   "l-*-327"
                                                   "l-*-325"
                                                   "l-*-323"
                                                   "l-*-321"
                                                   "l-*-319"
                                                   "l-*-317"
                                                   "l-*-315"
                                                   "l-*-313"
                                                   "l-*-311"
                                                   "l-*-309"
                                                   "l-*-306"
                                                   "l-*-304"
                                                   "l-*-302"
                                                   "l-*-300"
                                                   "l-*-298"
                                                   "l-*-296"
                                                   "l-*-294"
                                                   "l-*-292"
                                                   "l-*-290"
                                                   "l-*-288"
                                                   "l-*-286"
                                                   "l-*-284"
                                                   "l-*-282"
                                                   "l-*-280"
                                                   "l-*-278"
                                                   "l-*-276"
                                                   "l-*-274"
                                                   "l-*-272"
                                                   "l-*-270"
                                                   "l-*-268"
                                                   "l-*-266"
                                                   "l-*-264"
                                                   "l-*-262"
                                                   "l-*-260"
                                                   "l-*-258"
                                                   "l-*-256"
                                                   "l-*-255"
                                                   "l-*-254"
                                                   "l-*-253"
                                                   "l-*-252"
                                                   "l-*-250"
                                                   "l-*-248"
                                                   "l-*-246"
                                                   "l-*-243"
                                                   "l-*-241"
                                                   "l-*-239"
                                                   "l-*-237"
                                                   "l-*-235"
                                                   "l-*-233"
                                                   "l-*-231"
                                                   "l-*-229"
                                                   "l-*-227"
                                                   "l-*-225"
                                                   "l-*-223"
                                                   "l-*-221"
                                                   "l-*-219"
                                                   "l-*-217"
                                                   "l-*-215"
                                                   "l-*-213"
                                                   "l-*-211"
                                                   "l-*-209"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("l-*-47"
                                                   "l-*-46"
                                                   "l-*-45")))
                                               (hygiene guile))
                                            head-9086)))
                                (call-with-values
                                  (lambda ()
                                    (syntax-type-4330
                                      e-9367
                                      r-8586
                                      w-8587
                                      (source-annotation-4288 e-9367)
                                      #f
                                      mod-8589
                                      #f))
                                  (lambda (type-9374
                                           value-9375
                                           form-9376
                                           e-9377
                                           w-9378
                                           s-9379
                                           mod-9380)
                                    (expand-expr-4332
                                      type-9374
                                      value-9375
                                      form-9376
                                      e-9377
                                      r-8586
                                      w-9378
                                      s-9379
                                      mod-9380))))
                              (map (lambda (e-9384)
                                     (call-with-values
                                       (lambda ()
                                         (syntax-type-4330
                                           e-9384
                                           r-8586
                                           w-8587
                                           (source-annotation-4288 e-9384)
                                           #f
                                           mod-8589
                                           #f))
                                       (lambda (type-9399
                                                value-9400
                                                form-9401
                                                e-9402
                                                w-9403
                                                s-9404
                                                mod-9405)
                                         (expand-expr-4332
                                           type-9399
                                           value-9400
                                           form-9401
                                           e-9402
                                           r-8586
                                           w-9403
                                           s-9404
                                           mod-9405))))
                                   (append tail-9087 (list val-9088))))))))
                    tmp-9082)
                  (syntax-violation
                    'set!
                    "bad set!"
                    (wrap-4324
                      (begin
                        (if (if s-8588
                              (supports-source-properties? e-8585)
                              #f)
                          (set-source-properties! e-8585 s-8588))
                        e-8585)
                      w-8587
                      mod-8589))))))))
      (module-define!
        (current-module)
        '@
        (make-syntax-transformer
          '@
          'module-ref
          (lambda (e-9448 r-9449 w-9450)
            (let ((tmp-9452
                    ($sc-dispatch e-9448 '(_ each-any any))))
              (if (if tmp-9452
                    (@apply
                      (lambda (mod-9455 id-9456)
                        (if (and-map id?-4295 mod-9455)
                          (if (symbol? id-9456)
                            #t
                            (if (if (vector? id-9456)
                                  (if (= (vector-length id-9456) 4)
                                    (eq? (vector-ref id-9456 0) 'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref id-9456 1))
                              #f))
                          #f))
                      tmp-9452)
                    #f)
                (@apply
                  (lambda (mod-9496 id-9497)
                    (values
                      (syntax->datum id-9497)
                      r-9449
                      w-9450
                      #f
                      (syntax->datum
                        (cons '#(syntax-object
                                 public
                                 ((top)
                                  #(ribcage
                                    #(mod id)
                                    #((top) (top))
                                    #("l-*-3596" "l-*-3597"))
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(e r w)
                                    #((top) (top) (top))
                                    #("l-*-3584" "l-*-3585" "l-*-3586"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      expand-lambda-case
                                      lambda*-formals
                                      expand-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      expand-void
                                      eval-local-transformer
                                      expand-local-syntax
                                      expand-body
                                      expand-macro
                                      expand-application
                                      expand-expr
                                      expand
                                      syntax-type
                                      parse-when-list
                                      expand-install-global
                                      expand-top-sequence
                                      expand-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      with-transformer-environment
                                      transformer-environment
                                      resolve-identifier
                                      locally-bound-identifiers
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      lookup
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-application
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      session-id
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-sequence
                                      make-application
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("l-*-476"
                                     "l-*-474"
                                     "l-*-472"
                                     "l-*-470"
                                     "l-*-468"
                                     "l-*-466"
                                     "l-*-464"
                                     "l-*-462"
                                     "l-*-460"
                                     "l-*-458"
                                     "l-*-456"
                                     "l-*-454"
                                     "l-*-452"
                                     "l-*-450"
                                     "l-*-448"
                                     "l-*-446"
                                     "l-*-444"
                                     "l-*-442"
                                     "l-*-440"
                                     "l-*-438"
                                     "l-*-436"
                                     "l-*-434"
                                     "l-*-432"
                                     "l-*-430"
                                     "l-*-428"
                                     "l-*-426"
                                     "l-*-424"
                                     "l-*-422"
                                     "l-*-420"
                                     "l-*-418"
                                     "l-*-416"
                                     "l-*-414"
                                     "l-*-412"
                                     "l-*-410"
                                     "l-*-408"
                                     "l-*-406"
                                     "l-*-404"
                                     "l-*-402"
                                     "l-*-400"
                                     "l-*-399"
                                     "l-*-397"
                                     "l-*-394"
                                     "l-*-393"
                                     "l-*-392"
                                     "l-*-390"
                                     "l-*-389"
                                     "l-*-387"
                                     "l-*-385"
                                     "l-*-383"
                                     "l-*-381"
                                     "l-*-379"
                                     "l-*-377"
                                     "l-*-375"
                                     "l-*-373"
                                     "l-*-370"
                                     "l-*-368"
                                     "l-*-367"
                                     "l-*-365"
                                     "l-*-363"
                                     "l-*-361"
                                     "l-*-359"
                                     "l-*-358"
                                     "l-*-357"
                                     "l-*-356"
                                     "l-*-354"
                                     "l-*-353"
                                     "l-*-350"
                                     "l-*-348"
                                     "l-*-346"
                                     "l-*-344"
                                     "l-*-342"
                                     "l-*-340"
                                     "l-*-338"
                                     "l-*-337"
                                     "l-*-336"
                                     "l-*-334"
                                     "l-*-332"
                                     "l-*-331"
                                     "l-*-328"
                                     "l-*-327"
                                     "l-*-325"
                                     "l-*-323"
                                     "l-*-321"
                                     "l-*-319"
                                     "l-*-317"
                                     "l-*-315"
                                     "l-*-313"
                                     "l-*-311"
                                     "l-*-309"
                                     "l-*-306"
                                     "l-*-304"
                                     "l-*-302"
                                     "l-*-300"
                                     "l-*-298"
                                     "l-*-296"
                                     "l-*-294"
                                     "l-*-292"
                                     "l-*-290"
                                     "l-*-288"
                                     "l-*-286"
                                     "l-*-284"
                                     "l-*-282"
                                     "l-*-280"
                                     "l-*-278"
                                     "l-*-276"
                                     "l-*-274"
                                     "l-*-272"
                                     "l-*-270"
                                     "l-*-268"
                                     "l-*-266"
                                     "l-*-264"
                                     "l-*-262"
                                     "l-*-260"
                                     "l-*-258"
                                     "l-*-256"
                                     "l-*-255"
                                     "l-*-254"
                                     "l-*-253"
                                     "l-*-252"
                                     "l-*-250"
                                     "l-*-248"
                                     "l-*-246"
                                     "l-*-243"
                                     "l-*-241"
                                     "l-*-239"
                                     "l-*-237"
                                     "l-*-235"
                                     "l-*-233"
                                     "l-*-231"
                                     "l-*-229"
                                     "l-*-227"
                                     "l-*-225"
                                     "l-*-223"
                                     "l-*-221"
                                     "l-*-219"
                                     "l-*-217"
                                     "l-*-215"
                                     "l-*-213"
                                     "l-*-211"
                                     "l-*-209"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("l-*-47" "l-*-46" "l-*-45")))
                                 (hygiene guile))
                              mod-9496))))
                  tmp-9452)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  e-9448))))))
      (global-extend-4293
        'module-ref
        '@@
        (lambda (e-9589 r-9590 w-9591)
          (letrec*
            ((remodulate-9592
               (lambda (x-9627 mod-9628)
                 (if (pair? x-9627)
                   (cons (remodulate-9592 (car x-9627) mod-9628)
                         (remodulate-9592 (cdr x-9627) mod-9628))
                   (if (if (vector? x-9627)
                         (if (= (vector-length x-9627) 4)
                           (eq? (vector-ref x-9627 0) 'syntax-object)
                           #f)
                         #f)
                     (let ((expression-9642
                             (remodulate-9592 (vector-ref x-9627 1) mod-9628))
                           (wrap-9643 (vector-ref x-9627 2)))
                       (vector
                         'syntax-object
                         expression-9642
                         wrap-9643
                         mod-9628))
                     (if (vector? x-9627)
                       (let ((n-9651 (vector-length x-9627)))
                         (let ((v-9652 (make-vector n-9651)))
                           (letrec*
                             ((loop-9653
                                (lambda (i-9700)
                                  (if (= i-9700 n-9651)
                                    v-9652
                                    (begin
                                      (vector-set!
                                        v-9652
                                        i-9700
                                        (remodulate-9592
                                          (vector-ref x-9627 i-9700)
                                          mod-9628))
                                      (loop-9653 (#{1+}# i-9700)))))))
                             (loop-9653 0))))
                       x-9627))))))
            (let ((tmp-9594
                    ($sc-dispatch e-9589 '(_ each-any any))))
              (if (if tmp-9594
                    (@apply
                      (lambda (mod-9598 exp-9599)
                        (and-map id?-4295 mod-9598))
                      tmp-9594)
                    #f)
                (@apply
                  (lambda (mod-9615 exp-9616)
                    (let ((mod-9617
                            (syntax->datum
                              (cons '#(syntax-object
                                       private
                                       ((top)
                                        #(ribcage
                                          #(mod exp)
                                          #((top) (top))
                                          #("l-*-3634" "l-*-3635"))
                                        #(ribcage
                                          (remodulate)
                                          ((top))
                                          ("l-*-3607"))
                                        #(ribcage
                                          #(e r w)
                                          #((top) (top) (top))
                                          #("l-*-3604" "l-*-3605" "l-*-3606"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            expand-lambda-case
                                            lambda*-formals
                                            expand-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            expand-void
                                            eval-local-transformer
                                            expand-local-syntax
                                            expand-body
                                            expand-macro
                                            expand-application
                                            expand-expr
                                            expand
                                            syntax-type
                                            parse-when-list
                                            expand-install-global
                                            expand-top-sequence
                                            expand-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            with-transformer-environment
                                            transformer-environment
                                            resolve-identifier
                                            locally-bound-identifiers
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            session-id
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("l-*-476"
                                           "l-*-474"
                                           "l-*-472"
                                           "l-*-470"
                                           "l-*-468"
                                           "l-*-466"
                                           "l-*-464"
                                           "l-*-462"
                                           "l-*-460"
                                           "l-*-458"
                                           "l-*-456"
                                           "l-*-454"
                                           "l-*-452"
                                           "l-*-450"
                                           "l-*-448"
                                           "l-*-446"
                                           "l-*-444"
                                           "l-*-442"
                                           "l-*-440"
                                           "l-*-438"
                                           "l-*-436"
                                           "l-*-434"
                                           "l-*-432"
                                           "l-*-430"
                                           "l-*-428"
                                           "l-*-426"
                                           "l-*-424"
                                           "l-*-422"
                                           "l-*-420"
                                           "l-*-418"
                                           "l-*-416"
                                           "l-*-414"
                                           "l-*-412"
                                           "l-*-410"
                                           "l-*-408"
                                           "l-*-406"
                                           "l-*-404"
                                           "l-*-402"
                                           "l-*-400"
                                           "l-*-399"
                                           "l-*-397"
                                           "l-*-394"
                                           "l-*-393"
                                           "l-*-392"
                                           "l-*-390"
                                           "l-*-389"
                                           "l-*-387"
                                           "l-*-385"
                                           "l-*-383"
                                           "l-*-381"
                                           "l-*-379"
                                           "l-*-377"
                                           "l-*-375"
                                           "l-*-373"
                                           "l-*-370"
                                           "l-*-368"
                                           "l-*-367"
                                           "l-*-365"
                                           "l-*-363"
                                           "l-*-361"
                                           "l-*-359"
                                           "l-*-358"
                                           "l-*-357"
                                           "l-*-356"
                                           "l-*-354"
                                           "l-*-353"
                                           "l-*-350"
                                           "l-*-348"
                                           "l-*-346"
                                           "l-*-344"
                                           "l-*-342"
                                           "l-*-340"
                                           "l-*-338"
                                           "l-*-337"
                                           "l-*-336"
                                           "l-*-334"
                                           "l-*-332"
                                           "l-*-331"
                                           "l-*-328"
                                           "l-*-327"
                                           "l-*-325"
                                           "l-*-323"
                                           "l-*-321"
                                           "l-*-319"
                                           "l-*-317"
                                           "l-*-315"
                                           "l-*-313"
                                           "l-*-311"
                                           "l-*-309"
                                           "l-*-306"
                                           "l-*-304"
                                           "l-*-302"
                                           "l-*-300"
                                           "l-*-298"
                                           "l-*-296"
                                           "l-*-294"
                                           "l-*-292"
                                           "l-*-290"
                                           "l-*-288"
                                           "l-*-286"
                                           "l-*-284"
                                           "l-*-282"
                                           "l-*-280"
                                           "l-*-278"
                                           "l-*-276"
                                           "l-*-274"
                                           "l-*-272"
                                           "l-*-270"
                                           "l-*-268"
                                           "l-*-266"
                                           "l-*-264"
                                           "l-*-262"
                                           "l-*-260"
                                           "l-*-258"
                                           "l-*-256"
                                           "l-*-255"
                                           "l-*-254"
                                           "l-*-253"
                                           "l-*-252"
                                           "l-*-250"
                                           "l-*-248"
                                           "l-*-246"
                                           "l-*-243"
                                           "l-*-241"
                                           "l-*-239"
                                           "l-*-237"
                                           "l-*-235"
                                           "l-*-233"
                                           "l-*-231"
                                           "l-*-229"
                                           "l-*-227"
                                           "l-*-225"
                                           "l-*-223"
                                           "l-*-221"
                                           "l-*-219"
                                           "l-*-217"
                                           "l-*-215"
                                           "l-*-213"
                                           "l-*-211"
                                           "l-*-209"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("l-*-47" "l-*-46" "l-*-45")))
                                       (hygiene guile))
                                    mod-9615))))
                      (values
                        (remodulate-9592 exp-9616 mod-9617)
                        r-9590
                        w-9591
                        (source-annotation-4288 exp-9616)
                        mod-9617)))
                  tmp-9594)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  e-9589))))))
      (global-extend-4293
        'core
        'if
        (lambda (e-9801 r-9802 w-9803 s-9804 mod-9805)
          (let ((tmp-9807 ($sc-dispatch e-9801 '(_ any any))))
            (if tmp-9807
              (@apply
                (lambda (test-9811 then-9812)
                  (build-conditional-4263
                    s-9804
                    (expand-4331 test-9811 r-9802 w-9803 mod-9805)
                    (expand-4331 then-9812 r-9802 w-9803 mod-9805)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 0)
                      #f)))
                tmp-9807)
              (let ((tmp-10037
                      ($sc-dispatch e-9801 '(_ any any any))))
                (if tmp-10037
                  (@apply
                    (lambda (test-10041 then-10042 else-10043)
                      (build-conditional-4263
                        s-9804
                        (expand-4331 test-10041 r-9802 w-9803 mod-9805)
                        (expand-4331 then-10042 r-9802 w-9803 mod-9805)
                        (expand-4331 else-10043 r-9802 w-9803 mod-9805)))
                    tmp-10037)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    e-9801)))))))
      (global-extend-4293
        'core
        'with-fluids
        (lambda (e-10442 r-10443 w-10444 s-10445 mod-10446)
          (let ((tmp-10448
                  ($sc-dispatch
                    e-10442
                    '(_ #(each (any any)) any . each-any))))
            (if tmp-10448
              (@apply
                (lambda (fluid-10452 val-10453 b-10454 b*-10455)
                  (build-dynlet-4264
                    s-10445
                    (map (lambda (x-10536)
                           (expand-4331 x-10536 r-10443 w-10444 mod-10446))
                         fluid-10452)
                    (map (lambda (x-10606)
                           (expand-4331 x-10606 r-10443 w-10444 mod-10446))
                         val-10453)
                    (expand-body-4335
                      (cons b-10454 b*-10455)
                      (wrap-4324
                        (begin
                          (if (if s-10445
                                (supports-source-properties? e-10442)
                                #f)
                            (set-source-properties! e-10442 s-10445))
                          e-10442)
                        w-10444
                        mod-10446)
                      r-10443
                      w-10444
                      mod-10446)))
                tmp-10448)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                e-10442)))))
      (module-define!
        (current-module)
        'begin
        (make-syntax-transformer 'begin 'begin '()))
      (module-define!
        (current-module)
        'define
        (make-syntax-transformer 'define 'define '()))
      (module-define!
        (current-module)
        'define-syntax
        (make-syntax-transformer
          'define-syntax
          'define-syntax
          '()))
      (module-define!
        (current-module)
        'define-syntax-parameter
        (make-syntax-transformer
          'define-syntax-parameter
          'define-syntax-parameter
          '()))
      (module-define!
        (current-module)
        'eval-when
        (make-syntax-transformer
          'eval-when
          'eval-when
          '()))
      (global-extend-4293
        'core
        'syntax-case
        (letrec*
          ((convert-pattern-10974
             (lambda (pattern-12571 keys-12572)
               (letrec*
                 ((cvt*-12573
                    (lambda (p*-13197 n-13198 ids-13199)
                      (if (not (pair? p*-13197))
                        (cvt-12575 p*-13197 n-13198 ids-13199)
                        (call-with-values
                          (lambda ()
                            (cvt*-12573 (cdr p*-13197) n-13198 ids-13199))
                          (lambda (y-13202 ids-13203)
                            (call-with-values
                              (lambda ()
                                (cvt-12575 (car p*-13197) n-13198 ids-13203))
                              (lambda (x-13206 ids-13207)
                                (values
                                  (cons x-13206 y-13202)
                                  ids-13207))))))))
                  (v-reverse-12574
                    (lambda (x-13208)
                      (letrec*
                        ((loop-13209
                           (lambda (r-13289 x-13290)
                             (if (not (pair? x-13290))
                               (values r-13289 x-13290)
                               (loop-13209
                                 (cons (car x-13290) r-13289)
                                 (cdr x-13290))))))
                        (loop-13209 '() x-13208))))
                  (cvt-12575
                    (lambda (p-12578 n-12579 ids-12580)
                      (if (if (symbol? p-12578)
                            #t
                            (if (if (vector? p-12578)
                                  (if (= (vector-length p-12578) 4)
                                    (eq? (vector-ref p-12578 0) 'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref p-12578 1))
                              #f))
                        (if (bound-id-member?-4323 p-12578 keys-12572)
                          (values (vector 'free-id p-12578) ids-12580)
                          (if (if (eq? (if (if (vector? p-12578)
                                             (if (= (vector-length p-12578) 4)
                                               (eq? (vector-ref p-12578 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (vector-ref p-12578 1)
                                         p-12578)
                                       (if (if (= (vector-length
                                                    '#(syntax-object
                                                       _
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p n ids)
                                                          #((top) (top) (top))
                                                          #("l-*-3735"
                                                            "l-*-3736"
                                                            "l-*-3737"))
                                                        #(ribcage
                                                          (cvt v-reverse cvt*)
                                                          ((top) (top) (top))
                                                          ("l-*-3708"
                                                           "l-*-3706"
                                                           "l-*-3704"))
                                                        #(ribcage
                                                          #(pattern keys)
                                                          #((top) (top))
                                                          #("l-*-3702"
                                                            "l-*-3703"))
                                                        #(ribcage
                                                          (gen-syntax-case
                                                            gen-clause
                                                            build-dispatch-call
                                                            convert-pattern)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-3698"
                                                           "l-*-3696"
                                                           "l-*-3694"
                                                           "l-*-3692"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            locally-bound-identifiers
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            session-id
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-476"
                                                           "l-*-474"
                                                           "l-*-472"
                                                           "l-*-470"
                                                           "l-*-468"
                                                           "l-*-466"
                                                           "l-*-464"
                                                           "l-*-462"
                                                           "l-*-460"
                                                           "l-*-458"
                                                           "l-*-456"
                                                           "l-*-454"
                                                           "l-*-452"
                                                           "l-*-450"
                                                           "l-*-448"
                                                           "l-*-446"
                                                           "l-*-444"
                                                           "l-*-442"
                                                           "l-*-440"
                                                           "l-*-438"
                                                           "l-*-436"
                                                           "l-*-434"
                                                           "l-*-432"
                                                           "l-*-430"
                                                           "l-*-428"
                                                           "l-*-426"
                                                           "l-*-424"
                                                           "l-*-422"
                                                           "l-*-420"
                                                           "l-*-418"
                                                           "l-*-416"
                                                           "l-*-414"
                                                           "l-*-412"
                                                           "l-*-410"
                                                           "l-*-408"
                                                           "l-*-406"
                                                           "l-*-404"
                                                           "l-*-402"
                                                           "l-*-400"
                                                           "l-*-399"
                                                           "l-*-397"
                                                           "l-*-394"
                                                           "l-*-393"
                                                           "l-*-392"
                                                           "l-*-390"
                                                           "l-*-389"
                                                           "l-*-387"
                                                           "l-*-385"
                                                           "l-*-383"
                                                           "l-*-381"
                                                           "l-*-379"
                                                           "l-*-377"
                                                           "l-*-375"
                                                           "l-*-373"
                                                           "l-*-370"
                                                           "l-*-368"
                                                           "l-*-367"
                                                           "l-*-365"
                                                           "l-*-363"
                                                           "l-*-361"
                                                           "l-*-359"
                                                           "l-*-358"
                                                           "l-*-357"
                                                           "l-*-356"
                                                           "l-*-354"
                                                           "l-*-353"
                                                           "l-*-350"
                                                           "l-*-348"
                                                           "l-*-346"
                                                           "l-*-344"
                                                           "l-*-342"
                                                           "l-*-340"
                                                           "l-*-338"
                                                           "l-*-337"
                                                           "l-*-336"
                                                           "l-*-334"
                                                           "l-*-332"
                                                           "l-*-331"
                                                           "l-*-328"
                                                           "l-*-327"
                                                           "l-*-325"
                                                           "l-*-323"
                                                           "l-*-321"
                                                           "l-*-319"
                                                           "l-*-317"
                                                           "l-*-315"
                                                           "l-*-313"
                                                           "l-*-311"
                                                           "l-*-309"
                                                           "l-*-306"
                                                           "l-*-304"
                                                           "l-*-302"
                                                           "l-*-300"
                                                           "l-*-298"
                                                           "l-*-296"
                                                           "l-*-294"
                                                           "l-*-292"
                                                           "l-*-290"
                                                           "l-*-288"
                                                           "l-*-286"
                                                           "l-*-284"
                                                           "l-*-282"
                                                           "l-*-280"
                                                           "l-*-278"
                                                           "l-*-276"
                                                           "l-*-274"
                                                           "l-*-272"
                                                           "l-*-270"
                                                           "l-*-268"
                                                           "l-*-266"
                                                           "l-*-264"
                                                           "l-*-262"
                                                           "l-*-260"
                                                           "l-*-258"
                                                           "l-*-256"
                                                           "l-*-255"
                                                           "l-*-254"
                                                           "l-*-253"
                                                           "l-*-252"
                                                           "l-*-250"
                                                           "l-*-248"
                                                           "l-*-246"
                                                           "l-*-243"
                                                           "l-*-241"
                                                           "l-*-239"
                                                           "l-*-237"
                                                           "l-*-235"
                                                           "l-*-233"
                                                           "l-*-231"
                                                           "l-*-229"
                                                           "l-*-227"
                                                           "l-*-225"
                                                           "l-*-223"
                                                           "l-*-221"
                                                           "l-*-219"
                                                           "l-*-217"
                                                           "l-*-215"
                                                           "l-*-213"
                                                           "l-*-211"
                                                           "l-*-209"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("l-*-47"
                                                           "l-*-46"
                                                           "l-*-45")))
                                                       (hygiene guile)))
                                                  4)
                                             #t
                                             #f)
                                         '_
                                         '#(syntax-object
                                            _
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(p n ids)
                                               #((top) (top) (top))
                                               #("l-*-3735"
                                                 "l-*-3736"
                                                 "l-*-3737"))
                                             #(ribcage
                                               (cvt v-reverse cvt*)
                                               ((top) (top) (top))
                                               ("l-*-3708"
                                                "l-*-3706"
                                                "l-*-3704"))
                                             #(ribcage
                                               #(pattern keys)
                                               #((top) (top))
                                               #("l-*-3702" "l-*-3703"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("l-*-3698"
                                                "l-*-3696"
                                                "l-*-3694"
                                                "l-*-3692"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 session-id
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-476"
                                                "l-*-474"
                                                "l-*-472"
                                                "l-*-470"
                                                "l-*-468"
                                                "l-*-466"
                                                "l-*-464"
                                                "l-*-462"
                                                "l-*-460"
                                                "l-*-458"
                                                "l-*-456"
                                                "l-*-454"
                                                "l-*-452"
                                                "l-*-450"
                                                "l-*-448"
                                                "l-*-446"
                                                "l-*-444"
                                                "l-*-442"
                                                "l-*-440"
                                                "l-*-438"
                                                "l-*-436"
                                                "l-*-434"
                                                "l-*-432"
                                                "l-*-430"
                                                "l-*-428"
                                                "l-*-426"
                                                "l-*-424"
                                                "l-*-422"
                                                "l-*-420"
                                                "l-*-418"
                                                "l-*-416"
                                                "l-*-414"
                                                "l-*-412"
                                                "l-*-410"
                                                "l-*-408"
                                                "l-*-406"
                                                "l-*-404"
                                                "l-*-402"
                                                "l-*-400"
                                                "l-*-399"
                                                "l-*-397"
                                                "l-*-394"
                                                "l-*-393"
                                                "l-*-392"
                                                "l-*-390"
                                                "l-*-389"
                                                "l-*-387"
                                                "l-*-385"
                                                "l-*-383"
                                                "l-*-381"
                                                "l-*-379"
                                                "l-*-377"
                                                "l-*-375"
                                                "l-*-373"
                                                "l-*-370"
                                                "l-*-368"
                                                "l-*-367"
                                                "l-*-365"
                                                "l-*-363"
                                                "l-*-361"
                                                "l-*-359"
                                                "l-*-358"
                                                "l-*-357"
                                                "l-*-356"
                                                "l-*-354"
                                                "l-*-353"
                                                "l-*-350"
                                                "l-*-348"
                                                "l-*-346"
                                                "l-*-344"
                                                "l-*-342"
                                                "l-*-340"
                                                "l-*-338"
                                                "l-*-337"
                                                "l-*-336"
                                                "l-*-334"
                                                "l-*-332"
                                                "l-*-331"
                                                "l-*-328"
                                                "l-*-327"
                                                "l-*-325"
                                                "l-*-323"
                                                "l-*-321"
                                                "l-*-319"
                                                "l-*-317"
                                                "l-*-315"
                                                "l-*-313"
                                                "l-*-311"
                                                "l-*-309"
                                                "l-*-306"
                                                "l-*-304"
                                                "l-*-302"
                                                "l-*-300"
                                                "l-*-298"
                                                "l-*-296"
                                                "l-*-294"
                                                "l-*-292"
                                                "l-*-290"
                                                "l-*-288"
                                                "l-*-286"
                                                "l-*-284"
                                                "l-*-282"
                                                "l-*-280"
                                                "l-*-278"
                                                "l-*-276"
                                                "l-*-274"
                                                "l-*-272"
                                                "l-*-270"
                                                "l-*-268"
                                                "l-*-266"
                                                "l-*-264"
                                                "l-*-262"
                                                "l-*-260"
                                                "l-*-258"
                                                "l-*-256"
                                                "l-*-255"
                                                "l-*-254"
                                                "l-*-253"
                                                "l-*-252"
                                                "l-*-250"
                                                "l-*-248"
                                                "l-*-246"
                                                "l-*-243"
                                                "l-*-241"
                                                "l-*-239"
                                                "l-*-237"
                                                "l-*-235"
                                                "l-*-233"
                                                "l-*-231"
                                                "l-*-229"
                                                "l-*-227"
                                                "l-*-225"
                                                "l-*-223"
                                                "l-*-221"
                                                "l-*-219"
                                                "l-*-217"
                                                "l-*-215"
                                                "l-*-213"
                                                "l-*-211"
                                                "l-*-209"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("l-*-47" "l-*-46" "l-*-45")))
                                            (hygiene guile))))
                                (eq? (id-var-name-4314 p-12578 '(()))
                                     (id-var-name-4314
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("l-*-3735"
                                               "l-*-3736"
                                               "l-*-3737"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("l-*-3708"
                                              "l-*-3706"
                                              "l-*-3704"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("l-*-3702" "l-*-3703"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("l-*-3698"
                                              "l-*-3696"
                                              "l-*-3694"
                                              "l-*-3692"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               with-transformer-environment
                                               transformer-environment
                                               resolve-identifier
                                               locally-bound-identifiers
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               session-id
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-476"
                                              "l-*-474"
                                              "l-*-472"
                                              "l-*-470"
                                              "l-*-468"
                                              "l-*-466"
                                              "l-*-464"
                                              "l-*-462"
                                              "l-*-460"
                                              "l-*-458"
                                              "l-*-456"
                                              "l-*-454"
                                              "l-*-452"
                                              "l-*-450"
                                              "l-*-448"
                                              "l-*-446"
                                              "l-*-444"
                                              "l-*-442"
                                              "l-*-440"
                                              "l-*-438"
                                              "l-*-436"
                                              "l-*-434"
                                              "l-*-432"
                                              "l-*-430"
                                              "l-*-428"
                                              "l-*-426"
                                              "l-*-424"
                                              "l-*-422"
                                              "l-*-420"
                                              "l-*-418"
                                              "l-*-416"
                                              "l-*-414"
                                              "l-*-412"
                                              "l-*-410"
                                              "l-*-408"
                                              "l-*-406"
                                              "l-*-404"
                                              "l-*-402"
                                              "l-*-400"
                                              "l-*-399"
                                              "l-*-397"
                                              "l-*-394"
                                              "l-*-393"
                                              "l-*-392"
                                              "l-*-390"
                                              "l-*-389"
                                              "l-*-387"
                                              "l-*-385"
                                              "l-*-383"
                                              "l-*-381"
                                              "l-*-379"
                                              "l-*-377"
                                              "l-*-375"
                                              "l-*-373"
                                              "l-*-370"
                                              "l-*-368"
                                              "l-*-367"
                                              "l-*-365"
                                              "l-*-363"
                                              "l-*-361"
                                              "l-*-359"
                                              "l-*-358"
                                              "l-*-357"
                                              "l-*-356"
                                              "l-*-354"
                                              "l-*-353"
                                              "l-*-350"
                                              "l-*-348"
                                              "l-*-346"
                                              "l-*-344"
                                              "l-*-342"
                                              "l-*-340"
                                              "l-*-338"
                                              "l-*-337"
                                              "l-*-336"
                                              "l-*-334"
                                              "l-*-332"
                                              "l-*-331"
                                              "l-*-328"
                                              "l-*-327"
                                              "l-*-325"
                                              "l-*-323"
                                              "l-*-321"
                                              "l-*-319"
                                              "l-*-317"
                                              "l-*-315"
                                              "l-*-313"
                                              "l-*-311"
                                              "l-*-309"
                                              "l-*-306"
                                              "l-*-304"
                                              "l-*-302"
                                              "l-*-300"
                                              "l-*-298"
                                              "l-*-296"
                                              "l-*-294"
                                              "l-*-292"
                                              "l-*-290"
                                              "l-*-288"
                                              "l-*-286"
                                              "l-*-284"
                                              "l-*-282"
                                              "l-*-280"
                                              "l-*-278"
                                              "l-*-276"
                                              "l-*-274"
                                              "l-*-272"
                                              "l-*-270"
                                              "l-*-268"
                                              "l-*-266"
                                              "l-*-264"
                                              "l-*-262"
                                              "l-*-260"
                                              "l-*-258"
                                              "l-*-256"
                                              "l-*-255"
                                              "l-*-254"
                                              "l-*-253"
                                              "l-*-252"
                                              "l-*-250"
                                              "l-*-248"
                                              "l-*-246"
                                              "l-*-243"
                                              "l-*-241"
                                              "l-*-239"
                                              "l-*-237"
                                              "l-*-235"
                                              "l-*-233"
                                              "l-*-231"
                                              "l-*-229"
                                              "l-*-227"
                                              "l-*-225"
                                              "l-*-223"
                                              "l-*-221"
                                              "l-*-219"
                                              "l-*-217"
                                              "l-*-215"
                                              "l-*-213"
                                              "l-*-211"
                                              "l-*-209"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("l-*-47" "l-*-46" "l-*-45")))
                                          (hygiene guile))
                                       '(())))
                                #f)
                            (values '_ ids-12580)
                            (values
                              'any
                              (cons (cons p-12578 n-12579) ids-12580))))
                        (let ((tmp-12900 ($sc-dispatch p-12578 '(any any))))
                          (if (if tmp-12900
                                (@apply
                                  (lambda (x-12904 dots-12905)
                                    (if (if (if (vector? dots-12905)
                                              (if (= (vector-length dots-12905)
                                                     4)
                                                (eq? (vector-ref dots-12905 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (symbol? (vector-ref dots-12905 1))
                                          #f)
                                      (if (eq? (if (if (vector? dots-12905)
                                                     (if (= (vector-length
                                                              dots-12905)
                                                            4)
                                                       (eq? (vector-ref
                                                              dots-12905
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref dots-12905 1)
                                                 dots-12905)
                                               (if (if (= (vector-length
                                                            '#(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("l-*-2267"))
                                                                #(ribcage
                                                                  (lambda-var-list
                                                                    gen-var
                                                                    strip
                                                                    expand-lambda-case
                                                                    lambda*-formals
                                                                    expand-simple-lambda
                                                                    lambda-formals
                                                                    ellipsis?
                                                                    expand-void
                                                                    eval-local-transformer
                                                                    expand-local-syntax
                                                                    expand-body
                                                                    expand-macro
                                                                    expand-application
                                                                    expand-expr
                                                                    expand
                                                                    syntax-type
                                                                    parse-when-list
                                                                    expand-install-global
                                                                    expand-top-sequence
                                                                    expand-sequence
                                                                    source-wrap
                                                                    wrap
                                                                    bound-id-member?
                                                                    distinct-bound-ids?
                                                                    valid-bound-ids?
                                                                    bound-id=?
                                                                    free-id=?
                                                                    with-transformer-environment
                                                                    transformer-environment
                                                                    resolve-identifier
                                                                    locally-bound-identifiers
                                                                    id-var-name
                                                                    same-marks?
                                                                    join-marks
                                                                    join-wraps
                                                                    smart-append
                                                                    make-binding-wrap
                                                                    extend-ribcage!
                                                                    make-empty-ribcage
                                                                    new-mark
                                                                    anti-mark
                                                                    the-anti-mark
                                                                    top-marked?
                                                                    top-wrap
                                                                    empty-wrap
                                                                    set-ribcage-labels!
                                                                    set-ribcage-marks!
                                                                    set-ribcage-symnames!
                                                                    ribcage-labels
                                                                    ribcage-marks
                                                                    ribcage-symnames
                                                                    ribcage?
                                                                    make-ribcage
                                                                    gen-labels
                                                                    gen-label
                                                                    make-rename
                                                                    rename-marks
                                                                    rename-new
                                                                    rename-old
                                                                    subst-rename?
                                                                    wrap-subst
                                                                    wrap-marks
                                                                    make-wrap
                                                                    id-sym-name&marks
                                                                    id-sym-name
                                                                    id?
                                                                    nonsymbol-id?
                                                                    global-extend
                                                                    lookup
                                                                    macros-only-env
                                                                    extend-var-env
                                                                    extend-env
                                                                    null-env
                                                                    binding-value
                                                                    binding-type
                                                                    make-binding
                                                                    arg-check
                                                                    source-annotation
                                                                    no-source
                                                                    set-syntax-object-module!
                                                                    set-syntax-object-wrap!
                                                                    set-syntax-object-expression!
                                                                    syntax-object-module
                                                                    syntax-object-wrap
                                                                    syntax-object-expression
                                                                    syntax-object?
                                                                    make-syntax-object
                                                                    build-lexical-var
                                                                    build-letrec
                                                                    build-named-let
                                                                    build-let
                                                                    build-sequence
                                                                    build-data
                                                                    build-primref
                                                                    build-lambda-case
                                                                    build-case-lambda
                                                                    build-simple-lambda
                                                                    build-global-definition
                                                                    build-global-assignment
                                                                    build-global-reference
                                                                    analyze-variable
                                                                    build-lexical-assignment
                                                                    build-lexical-reference
                                                                    build-dynlet
                                                                    build-conditional
                                                                    build-application
                                                                    build-void
                                                                    maybe-name-value!
                                                                    decorate-source
                                                                    get-global-definition-hook
                                                                    put-global-definition-hook
                                                                    session-id
                                                                    local-eval-hook
                                                                    top-level-eval-hook
                                                                    fx<
                                                                    fx=
                                                                    fx-
                                                                    fx+
                                                                    set-lambda-meta!
                                                                    lambda-meta
                                                                    lambda?
                                                                    make-dynlet
                                                                    make-letrec
                                                                    make-let
                                                                    make-lambda-case
                                                                    make-lambda
                                                                    make-sequence
                                                                    make-application
                                                                    make-conditional
                                                                    make-toplevel-define
                                                                    make-toplevel-set
                                                                    make-toplevel-ref
                                                                    make-module-set
                                                                    make-module-ref
                                                                    make-lexical-set
                                                                    make-lexical-ref
                                                                    make-primitive-ref
                                                                    make-const
                                                                    make-void)
                                                                  ((top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                  ("l-*-476"
                                                                   "l-*-474"
                                                                   "l-*-472"
                                                                   "l-*-470"
                                                                   "l-*-468"
                                                                   "l-*-466"
                                                                   "l-*-464"
                                                                   "l-*-462"
                                                                   "l-*-460"
                                                                   "l-*-458"
                                                                   "l-*-456"
                                                                   "l-*-454"
                                                                   "l-*-452"
                                                                   "l-*-450"
                                                                   "l-*-448"
                                                                   "l-*-446"
                                                                   "l-*-444"
                                                                   "l-*-442"
                                                                   "l-*-440"
                                                                   "l-*-438"
                                                                   "l-*-436"
                                                                   "l-*-434"
                                                                   "l-*-432"
                                                                   "l-*-430"
                                                                   "l-*-428"
                                                                   "l-*-426"
                                                                   "l-*-424"
                                                                   "l-*-422"
                                                                   "l-*-420"
                                                                   "l-*-418"
                                                                   "l-*-416"
                                                                   "l-*-414"
                                                                   "l-*-412"
                                                                   "l-*-410"
                                                                   "l-*-408"
                                                                   "l-*-406"
                                                                   "l-*-404"
                                                                   "l-*-402"
                                                                   "l-*-400"
                                                                   "l-*-399"
                                                                   "l-*-397"
                                                                   "l-*-394"
                                                                   "l-*-393"
                                                                   "l-*-392"
                                                                   "l-*-390"
                                                                   "l-*-389"
                                                                   "l-*-387"
                                                                   "l-*-385"
                                                                   "l-*-383"
                                                                   "l-*-381"
                                                                   "l-*-379"
                                                                   "l-*-377"
                                                                   "l-*-375"
                                                                   "l-*-373"
                                                                   "l-*-370"
                                                                   "l-*-368"
                                                                   "l-*-367"
                                                                   "l-*-365"
                                                                   "l-*-363"
                                                                   "l-*-361"
                                                                   "l-*-359"
                                                                   "l-*-358"
                                                                   "l-*-357"
                                                                   "l-*-356"
                                                                   "l-*-354"
                                                                   "l-*-353"
                                                                   "l-*-350"
                                                                   "l-*-348"
                                                                   "l-*-346"
                                                                   "l-*-344"
                                                                   "l-*-342"
                                                                   "l-*-340"
                                                                   "l-*-338"
                                                                   "l-*-337"
                                                                   "l-*-336"
                                                                   "l-*-334"
                                                                   "l-*-332"
                                                                   "l-*-331"
                                                                   "l-*-328"
                                                                   "l-*-327"
                                                                   "l-*-325"
                                                                   "l-*-323"
                                                                   "l-*-321"
                                                                   "l-*-319"
                                                                   "l-*-317"
                                                                   "l-*-315"
                                                                   "l-*-313"
                                                                   "l-*-311"
                                                                   "l-*-309"
                                                                   "l-*-306"
                                                                   "l-*-304"
                                                                   "l-*-302"
                                                                   "l-*-300"
                                                                   "l-*-298"
                                                                   "l-*-296"
                                                                   "l-*-294"
                                                                   "l-*-292"
                                                                   "l-*-290"
                                                                   "l-*-288"
                                                                   "l-*-286"
                                                                   "l-*-284"
                                                                   "l-*-282"
                                                                   "l-*-280"
                                                                   "l-*-278"
                                                                   "l-*-276"
                                                                   "l-*-274"
                                                                   "l-*-272"
                                                                   "l-*-270"
                                                                   "l-*-268"
                                                                   "l-*-266"
                                                                   "l-*-264"
                                                                   "l-*-262"
                                                                   "l-*-260"
                                                                   "l-*-258"
                                                                   "l-*-256"
                                                                   "l-*-255"
                                                                   "l-*-254"
                                                                   "l-*-253"
                                                                   "l-*-252"
                                                                   "l-*-250"
                                                                   "l-*-248"
                                                                   "l-*-246"
                                                                   "l-*-243"
                                                                   "l-*-241"
                                                                   "l-*-239"
                                                                   "l-*-237"
                                                                   "l-*-235"
                                                                   "l-*-233"
                                                                   "l-*-231"
                                                                   "l-*-229"
                                                                   "l-*-227"
                                                                   "l-*-225"
                                                                   "l-*-223"
                                                                   "l-*-221"
                                                                   "l-*-219"
                                                                   "l-*-217"
                                                                   "l-*-215"
                                                                   "l-*-213"
                                                                   "l-*-211"
                                                                   "l-*-209"))
                                                                #(ribcage
                                                                  (define-structure
                                                                    define-expansion-accessors
                                                                    define-expansion-constructors)
                                                                  ((top)
                                                                   (top)
                                                                   (top))
                                                                  ("l-*-47"
                                                                   "l-*-46"
                                                                   "l-*-45")))
                                                               (hygiene
                                                                 guile)))
                                                          4)
                                                     #t
                                                     #f)
                                                 '...
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-2267"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         with-transformer-environment
                                                         transformer-environment
                                                         resolve-identifier
                                                         locally-bound-identifiers
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         session-id
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("l-*-476"
                                                        "l-*-474"
                                                        "l-*-472"
                                                        "l-*-470"
                                                        "l-*-468"
                                                        "l-*-466"
                                                        "l-*-464"
                                                        "l-*-462"
                                                        "l-*-460"
                                                        "l-*-458"
                                                        "l-*-456"
                                                        "l-*-454"
                                                        "l-*-452"
                                                        "l-*-450"
                                                        "l-*-448"
                                                        "l-*-446"
                                                        "l-*-444"
                                                        "l-*-442"
                                                        "l-*-440"
                                                        "l-*-438"
                                                        "l-*-436"
                                                        "l-*-434"
                                                        "l-*-432"
                                                        "l-*-430"
                                                        "l-*-428"
                                                        "l-*-426"
                                                        "l-*-424"
                                                        "l-*-422"
                                                        "l-*-420"
                                                        "l-*-418"
                                                        "l-*-416"
                                                        "l-*-414"
                                                        "l-*-412"
                                                        "l-*-410"
                                                        "l-*-408"
                                                        "l-*-406"
                                                        "l-*-404"
                                                        "l-*-402"
                                                        "l-*-400"
                                                        "l-*-399"
                                                        "l-*-397"
                                                        "l-*-394"
                                                        "l-*-393"
                                                        "l-*-392"
                                                        "l-*-390"
                                                        "l-*-389"
                                                        "l-*-387"
                                                        "l-*-385"
                                                        "l-*-383"
                                                        "l-*-381"
                                                        "l-*-379"
                                                        "l-*-377"
                                                        "l-*-375"
                                                        "l-*-373"
                                                        "l-*-370"
                                                        "l-*-368"
                                                        "l-*-367"
                                                        "l-*-365"
                                                        "l-*-363"
                                                        "l-*-361"
                                                        "l-*-359"
                                                        "l-*-358"
                                                        "l-*-357"
                                                        "l-*-356"
                                                        "l-*-354"
                                                        "l-*-353"
                                                        "l-*-350"
                                                        "l-*-348"
                                                        "l-*-346"
                                                        "l-*-344"
                                                        "l-*-342"
                                                        "l-*-340"
                                                        "l-*-338"
                                                        "l-*-337"
                                                        "l-*-336"
                                                        "l-*-334"
                                                        "l-*-332"
                                                        "l-*-331"
                                                        "l-*-328"
                                                        "l-*-327"
                                                        "l-*-325"
                                                        "l-*-323"
                                                        "l-*-321"
                                                        "l-*-319"
                                                        "l-*-317"
                                                        "l-*-315"
                                                        "l-*-313"
                                                        "l-*-311"
                                                        "l-*-309"
                                                        "l-*-306"
                                                        "l-*-304"
                                                        "l-*-302"
                                                        "l-*-300"
                                                        "l-*-298"
                                                        "l-*-296"
                                                        "l-*-294"
                                                        "l-*-292"
                                                        "l-*-290"
                                                        "l-*-288"
                                                        "l-*-286"
                                                        "l-*-284"
                                                        "l-*-282"
                                                        "l-*-280"
                                                        "l-*-278"
                                                        "l-*-276"
                                                        "l-*-274"
                                                        "l-*-272"
                                                        "l-*-270"
                                                        "l-*-268"
                                                        "l-*-266"
                                                        "l-*-264"
                                                        "l-*-262"
                                                        "l-*-260"
                                                        "l-*-258"
                                                        "l-*-256"
                                                        "l-*-255"
                                                        "l-*-254"
                                                        "l-*-253"
                                                        "l-*-252"
                                                        "l-*-250"
                                                        "l-*-248"
                                                        "l-*-246"
                                                        "l-*-243"
                                                        "l-*-241"
                                                        "l-*-239"
                                                        "l-*-237"
                                                        "l-*-235"
                                                        "l-*-233"
                                                        "l-*-231"
                                                        "l-*-229"
                                                        "l-*-227"
                                                        "l-*-225"
                                                        "l-*-223"
                                                        "l-*-221"
                                                        "l-*-219"
                                                        "l-*-217"
                                                        "l-*-215"
                                                        "l-*-213"
                                                        "l-*-211"
                                                        "l-*-209"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("l-*-47"
                                                        "l-*-46"
                                                        "l-*-45")))
                                                    (hygiene guile))))
                                        (eq? (id-var-name-4314
                                               dots-12905
                                               '(()))
                                             (id-var-name-4314
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-2267"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       expand-lambda-case
                                                       lambda*-formals
                                                       expand-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       expand-void
                                                       eval-local-transformer
                                                       expand-local-syntax
                                                       expand-body
                                                       expand-macro
                                                       expand-application
                                                       expand-expr
                                                       expand
                                                       syntax-type
                                                       parse-when-list
                                                       expand-install-global
                                                       expand-top-sequence
                                                       expand-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       with-transformer-environment
                                                       transformer-environment
                                                       resolve-identifier
                                                       locally-bound-identifiers
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       session-id
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-476"
                                                      "l-*-474"
                                                      "l-*-472"
                                                      "l-*-470"
                                                      "l-*-468"
                                                      "l-*-466"
                                                      "l-*-464"
                                                      "l-*-462"
                                                      "l-*-460"
                                                      "l-*-458"
                                                      "l-*-456"
                                                      "l-*-454"
                                                      "l-*-452"
                                                      "l-*-450"
                                                      "l-*-448"
                                                      "l-*-446"
                                                      "l-*-444"
                                                      "l-*-442"
                                                      "l-*-440"
                                                      "l-*-438"
                                                      "l-*-436"
                                                      "l-*-434"
                                                      "l-*-432"
                                                      "l-*-430"
                                                      "l-*-428"
                                                      "l-*-426"
                                                      "l-*-424"
                                                      "l-*-422"
                                                      "l-*-420"
                                                      "l-*-418"
                                                      "l-*-416"
                                                      "l-*-414"
                                                      "l-*-412"
                                                      "l-*-410"
                                                      "l-*-408"
                                                      "l-*-406"
                                                      "l-*-404"
                                                      "l-*-402"
                                                      "l-*-400"
                                                      "l-*-399"
                                                      "l-*-397"
                                                      "l-*-394"
                                                      "l-*-393"
                                                      "l-*-392"
                                                      "l-*-390"
                                                      "l-*-389"
                                                      "l-*-387"
                                                      "l-*-385"
                                                      "l-*-383"
                                                      "l-*-381"
                                                      "l-*-379"
                                                      "l-*-377"
                                                      "l-*-375"
                                                      "l-*-373"
                                                      "l-*-370"
                                                      "l-*-368"
                                                      "l-*-367"
                                                      "l-*-365"
                                                      "l-*-363"
                                                      "l-*-361"
                                                      "l-*-359"
                                                      "l-*-358"
                                                      "l-*-357"
                                                      "l-*-356"
                                                      "l-*-354"
                                                      "l-*-353"
                                                      "l-*-350"
                                                      "l-*-348"
                                                      "l-*-346"
                                                      "l-*-344"
                                                      "l-*-342"
                                                      "l-*-340"
                                                      "l-*-338"
                                                      "l-*-337"
                                                      "l-*-336"
                                                      "l-*-334"
                                                      "l-*-332"
                                                      "l-*-331"
                                                      "l-*-328"
                                                      "l-*-327"
                                                      "l-*-325"
                                                      "l-*-323"
                                                      "l-*-321"
                                                      "l-*-319"
                                                      "l-*-317"
                                                      "l-*-315"
                                                      "l-*-313"
                                                      "l-*-311"
                                                      "l-*-309"
                                                      "l-*-306"
                                                      "l-*-304"
                                                      "l-*-302"
                                                      "l-*-300"
                                                      "l-*-298"
                                                      "l-*-296"
                                                      "l-*-294"
                                                      "l-*-292"
                                                      "l-*-290"
                                                      "l-*-288"
                                                      "l-*-286"
                                                      "l-*-284"
                                                      "l-*-282"
                                                      "l-*-280"
                                                      "l-*-278"
                                                      "l-*-276"
                                                      "l-*-274"
                                                      "l-*-272"
                                                      "l-*-270"
                                                      "l-*-268"
                                                      "l-*-266"
                                                      "l-*-264"
                                                      "l-*-262"
                                                      "l-*-260"
                                                      "l-*-258"
                                                      "l-*-256"
                                                      "l-*-255"
                                                      "l-*-254"
                                                      "l-*-253"
                                                      "l-*-252"
                                                      "l-*-250"
                                                      "l-*-248"
                                                      "l-*-246"
                                                      "l-*-243"
                                                      "l-*-241"
                                                      "l-*-239"
                                                      "l-*-237"
                                                      "l-*-235"
                                                      "l-*-233"
                                                      "l-*-231"
                                                      "l-*-229"
                                                      "l-*-227"
                                                      "l-*-225"
                                                      "l-*-223"
                                                      "l-*-221"
                                                      "l-*-219"
                                                      "l-*-217"
                                                      "l-*-215"
                                                      "l-*-213"
                                                      "l-*-211"
                                                      "l-*-209"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("l-*-47"
                                                      "l-*-46"
                                                      "l-*-45")))
                                                  (hygiene guile))
                                               '(())))
                                        #f)
                                      #f))
                                  tmp-12900)
                                #f)
                            (@apply
                              (lambda (x-13005 dots-13006)
                                (call-with-values
                                  (lambda ()
                                    (cvt-12575
                                      x-13005
                                      (#{1+}# n-12579)
                                      ids-12580))
                                  (lambda (p-13007 ids-13008)
                                    (values
                                      (if (eq? p-13007 'any)
                                        'each-any
                                        (vector 'each p-13007))
                                      ids-13008))))
                              tmp-12900)
                            (let ((tmp-13009
                                    ($sc-dispatch p-12578 '(any any . any))))
                              (if (if tmp-13009
                                    (@apply
                                      (lambda (x-13013 dots-13014 ys-13015)
                                        (if (if (if (vector? dots-13014)
                                                  (if (= (vector-length
                                                           dots-13014)
                                                         4)
                                                    (eq? (vector-ref
                                                           dots-13014
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref dots-13014 1))
                                              #f)
                                          (if (eq? (if (if (vector? dots-13014)
                                                         (if (= (vector-length
                                                                  dots-13014)
                                                                4)
                                                           (eq? (vector-ref
                                                                  dots-13014
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref dots-13014 1)
                                                     dots-13014)
                                                   (if (if (= (vector-length
                                                                '#(syntax-object
                                                                   ...
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(x)
                                                                      #((top))
                                                                      #("l-*-2267"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        expand-lambda-case
                                                                        lambda*-formals
                                                                        expand-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        expand-void
                                                                        eval-local-transformer
                                                                        expand-local-syntax
                                                                        expand-body
                                                                        expand-macro
                                                                        expand-application
                                                                        expand-expr
                                                                        expand
                                                                        syntax-type
                                                                        parse-when-list
                                                                        expand-install-global
                                                                        expand-top-sequence
                                                                        expand-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        with-transformer-environment
                                                                        transformer-environment
                                                                        resolve-identifier
                                                                        locally-bound-identifiers
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        session-id
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("l-*-476"
                                                                       "l-*-474"
                                                                       "l-*-472"
                                                                       "l-*-470"
                                                                       "l-*-468"
                                                                       "l-*-466"
                                                                       "l-*-464"
                                                                       "l-*-462"
                                                                       "l-*-460"
                                                                       "l-*-458"
                                                                       "l-*-456"
                                                                       "l-*-454"
                                                                       "l-*-452"
                                                                       "l-*-450"
                                                                       "l-*-448"
                                                                       "l-*-446"
                                                                       "l-*-444"
                                                                       "l-*-442"
                                                                       "l-*-440"
                                                                       "l-*-438"
                                                                       "l-*-436"
                                                                       "l-*-434"
                                                                       "l-*-432"
                                                                       "l-*-430"
                                                                       "l-*-428"
                                                                       "l-*-426"
                                                                       "l-*-424"
                                                                       "l-*-422"
                                                                       "l-*-420"
                                                                       "l-*-418"
                                                                       "l-*-416"
                                                                       "l-*-414"
                                                                       "l-*-412"
                                                                       "l-*-410"
                                                                       "l-*-408"
                                                                       "l-*-406"
                                                                       "l-*-404"
                                                                       "l-*-402"
                                                                       "l-*-400"
                                                                       "l-*-399"
                                                                       "l-*-397"
                                                                       "l-*-394"
                                                                       "l-*-393"
                                                                       "l-*-392"
                                                                       "l-*-390"
                                                                       "l-*-389"
                                                                       "l-*-387"
                                                                       "l-*-385"
                                                                       "l-*-383"
                                                                       "l-*-381"
                                                                       "l-*-379"
                                                                       "l-*-377"
                                                                       "l-*-375"
                                                                       "l-*-373"
                                                                       "l-*-370"
                                                                       "l-*-368"
                                                                       "l-*-367"
                                                                       "l-*-365"
                                                                       "l-*-363"
                                                                       "l-*-361"
                                                                       "l-*-359"
                                                                       "l-*-358"
                                                                       "l-*-357"
                                                                       "l-*-356"
                                                                       "l-*-354"
                                                                       "l-*-353"
                                                                       "l-*-350"
                                                                       "l-*-348"
                                                                       "l-*-346"
                                                                       "l-*-344"
                                                                       "l-*-342"
                                                                       "l-*-340"
                                                                       "l-*-338"
                                                                       "l-*-337"
                                                                       "l-*-336"
                                                                       "l-*-334"
                                                                       "l-*-332"
                                                                       "l-*-331"
                                                                       "l-*-328"
                                                                       "l-*-327"
                                                                       "l-*-325"
                                                                       "l-*-323"
                                                                       "l-*-321"
                                                                       "l-*-319"
                                                                       "l-*-317"
                                                                       "l-*-315"
                                                                       "l-*-313"
                                                                       "l-*-311"
                                                                       "l-*-309"
                                                                       "l-*-306"
                                                                       "l-*-304"
                                                                       "l-*-302"
                                                                       "l-*-300"
                                                                       "l-*-298"
                                                                       "l-*-296"
                                                                       "l-*-294"
                                                                       "l-*-292"
                                                                       "l-*-290"
                                                                       "l-*-288"
                                                                       "l-*-286"
                                                                       "l-*-284"
                                                                       "l-*-282"
                                                                       "l-*-280"
                                                                       "l-*-278"
                                                                       "l-*-276"
                                                                       "l-*-274"
                                                                       "l-*-272"
                                                                       "l-*-270"
                                                                       "l-*-268"
                                                                       "l-*-266"
                                                                       "l-*-264"
                                                                       "l-*-262"
                                                                       "l-*-260"
                                                                       "l-*-258"
                                                                       "l-*-256"
                                                                       "l-*-255"
                                                                       "l-*-254"
                                                                       "l-*-253"
                                                                       "l-*-252"
                                                                       "l-*-250"
                                                                       "l-*-248"
                                                                       "l-*-246"
                                                                       "l-*-243"
                                                                       "l-*-241"
                                                                       "l-*-239"
                                                                       "l-*-237"
                                                                       "l-*-235"
                                                                       "l-*-233"
                                                                       "l-*-231"
                                                                       "l-*-229"
                                                                       "l-*-227"
                                                                       "l-*-225"
                                                                       "l-*-223"
                                                                       "l-*-221"
                                                                       "l-*-219"
                                                                       "l-*-217"
                                                                       "l-*-215"
                                                                       "l-*-213"
                                                                       "l-*-211"
                                                                       "l-*-209"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors)
                                                                      ((top)
                                                                       (top)
                                                                       (top))
                                                                      ("l-*-47"
                                                                       "l-*-46"
                                                                       "l-*-45")))
                                                                   (hygiene
                                                                     guile)))
                                                              4)
                                                         #t
                                                         #f)
                                                     '...
                                                     '#(syntax-object
                                                        ...
                                                        ((top)
                                                         #(ribcage () () ())
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-2267"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             with-transformer-environment
                                                             transformer-environment
                                                             resolve-identifier
                                                             locally-bound-identifiers
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             session-id
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("l-*-476"
                                                            "l-*-474"
                                                            "l-*-472"
                                                            "l-*-470"
                                                            "l-*-468"
                                                            "l-*-466"
                                                            "l-*-464"
                                                            "l-*-462"
                                                            "l-*-460"
                                                            "l-*-458"
                                                            "l-*-456"
                                                            "l-*-454"
                                                            "l-*-452"
                                                            "l-*-450"
                                                            "l-*-448"
                                                            "l-*-446"
                                                            "l-*-444"
                                                            "l-*-442"
                                                            "l-*-440"
                                                            "l-*-438"
                                                            "l-*-436"
                                                            "l-*-434"
                                                            "l-*-432"
                                                            "l-*-430"
                                                            "l-*-428"
                                                            "l-*-426"
                                                            "l-*-424"
                                                            "l-*-422"
                                                            "l-*-420"
                                                            "l-*-418"
                                                            "l-*-416"
                                                            "l-*-414"
                                                            "l-*-412"
                                                            "l-*-410"
                                                            "l-*-408"
                                                            "l-*-406"
                                                            "l-*-404"
                                                            "l-*-402"
                                                            "l-*-400"
                                                            "l-*-399"
                                                            "l-*-397"
                                                            "l-*-394"
                                                            "l-*-393"
                                                            "l-*-392"
                                                            "l-*-390"
                                                            "l-*-389"
                                                            "l-*-387"
                                                            "l-*-385"
                                                            "l-*-383"
                                                            "l-*-381"
                                                            "l-*-379"
                                                            "l-*-377"
                                                            "l-*-375"
                                                            "l-*-373"
                                                            "l-*-370"
                                                            "l-*-368"
                                                            "l-*-367"
                                                            "l-*-365"
                                                            "l-*-363"
                                                            "l-*-361"
                                                            "l-*-359"
                                                            "l-*-358"
                                                            "l-*-357"
                                                            "l-*-356"
                                                            "l-*-354"
                                                            "l-*-353"
                                                            "l-*-350"
                                                            "l-*-348"
                                                            "l-*-346"
                                                            "l-*-344"
                                                            "l-*-342"
                                                            "l-*-340"
                                                            "l-*-338"
                                                            "l-*-337"
                                                            "l-*-336"
                                                            "l-*-334"
                                                            "l-*-332"
                                                            "l-*-331"
                                                            "l-*-328"
                                                            "l-*-327"
                                                            "l-*-325"
                                                            "l-*-323"
                                                            "l-*-321"
                                                            "l-*-319"
                                                            "l-*-317"
                                                            "l-*-315"
                                                            "l-*-313"
                                                            "l-*-311"
                                                            "l-*-309"
                                                            "l-*-306"
                                                            "l-*-304"
                                                            "l-*-302"
                                                            "l-*-300"
                                                            "l-*-298"
                                                            "l-*-296"
                                                            "l-*-294"
                                                            "l-*-292"
                                                            "l-*-290"
                                                            "l-*-288"
                                                            "l-*-286"
                                                            "l-*-284"
                                                            "l-*-282"
                                                            "l-*-280"
                                                            "l-*-278"
                                                            "l-*-276"
                                                            "l-*-274"
                                                            "l-*-272"
                                                            "l-*-270"
                                                            "l-*-268"
                                                            "l-*-266"
                                                            "l-*-264"
                                                            "l-*-262"
                                                            "l-*-260"
                                                            "l-*-258"
                                                            "l-*-256"
                                                            "l-*-255"
                                                            "l-*-254"
                                                            "l-*-253"
                                                            "l-*-252"
                                                            "l-*-250"
                                                            "l-*-248"
                                                            "l-*-246"
                                                            "l-*-243"
                                                            "l-*-241"
                                                            "l-*-239"
                                                            "l-*-237"
                                                            "l-*-235"
                                                            "l-*-233"
                                                            "l-*-231"
                                                            "l-*-229"
                                                            "l-*-227"
                                                            "l-*-225"
                                                            "l-*-223"
                                                            "l-*-221"
                                                            "l-*-219"
                                                            "l-*-217"
                                                            "l-*-215"
                                                            "l-*-213"
                                                            "l-*-211"
                                                            "l-*-209"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("l-*-47"
                                                            "l-*-46"
                                                            "l-*-45")))
                                                        (hygiene guile))))
                                            (eq? (id-var-name-4314
                                                   dots-13014
                                                   '(()))
                                                 (id-var-name-4314
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("l-*-2267"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           session-id
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-476"
                                                          "l-*-474"
                                                          "l-*-472"
                                                          "l-*-470"
                                                          "l-*-468"
                                                          "l-*-466"
                                                          "l-*-464"
                                                          "l-*-462"
                                                          "l-*-460"
                                                          "l-*-458"
                                                          "l-*-456"
                                                          "l-*-454"
                                                          "l-*-452"
                                                          "l-*-450"
                                                          "l-*-448"
                                                          "l-*-446"
                                                          "l-*-444"
                                                          "l-*-442"
                                                          "l-*-440"
                                                          "l-*-438"
                                                          "l-*-436"
                                                          "l-*-434"
                                                          "l-*-432"
                                                          "l-*-430"
                                                          "l-*-428"
                                                          "l-*-426"
                                                          "l-*-424"
                                                          "l-*-422"
                                                          "l-*-420"
                                                          "l-*-418"
                                                          "l-*-416"
                                                          "l-*-414"
                                                          "l-*-412"
                                                          "l-*-410"
                                                          "l-*-408"
                                                          "l-*-406"
                                                          "l-*-404"
                                                          "l-*-402"
                                                          "l-*-400"
                                                          "l-*-399"
                                                          "l-*-397"
                                                          "l-*-394"
                                                          "l-*-393"
                                                          "l-*-392"
                                                          "l-*-390"
                                                          "l-*-389"
                                                          "l-*-387"
                                                          "l-*-385"
                                                          "l-*-383"
                                                          "l-*-381"
                                                          "l-*-379"
                                                          "l-*-377"
                                                          "l-*-375"
                                                          "l-*-373"
                                                          "l-*-370"
                                                          "l-*-368"
                                                          "l-*-367"
                                                          "l-*-365"
                                                          "l-*-363"
                                                          "l-*-361"
                                                          "l-*-359"
                                                          "l-*-358"
                                                          "l-*-357"
                                                          "l-*-356"
                                                          "l-*-354"
                                                          "l-*-353"
                                                          "l-*-350"
                                                          "l-*-348"
                                                          "l-*-346"
                                                          "l-*-344"
                                                          "l-*-342"
                                                          "l-*-340"
                                                          "l-*-338"
                                                          "l-*-337"
                                                          "l-*-336"
                                                          "l-*-334"
                                                          "l-*-332"
                                                          "l-*-331"
                                                          "l-*-328"
                                                          "l-*-327"
                                                          "l-*-325"
                                                          "l-*-323"
                                                          "l-*-321"
                                                          "l-*-319"
                                                          "l-*-317"
                                                          "l-*-315"
                                                          "l-*-313"
                                                          "l-*-311"
                                                          "l-*-309"
                                                          "l-*-306"
                                                          "l-*-304"
                                                          "l-*-302"
                                                          "l-*-300"
                                                          "l-*-298"
                                                          "l-*-296"
                                                          "l-*-294"
                                                          "l-*-292"
                                                          "l-*-290"
                                                          "l-*-288"
                                                          "l-*-286"
                                                          "l-*-284"
                                                          "l-*-282"
                                                          "l-*-280"
                                                          "l-*-278"
                                                          "l-*-276"
                                                          "l-*-274"
                                                          "l-*-272"
                                                          "l-*-270"
                                                          "l-*-268"
                                                          "l-*-266"
                                                          "l-*-264"
                                                          "l-*-262"
                                                          "l-*-260"
                                                          "l-*-258"
                                                          "l-*-256"
                                                          "l-*-255"
                                                          "l-*-254"
                                                          "l-*-253"
                                                          "l-*-252"
                                                          "l-*-250"
                                                          "l-*-248"
                                                          "l-*-246"
                                                          "l-*-243"
                                                          "l-*-241"
                                                          "l-*-239"
                                                          "l-*-237"
                                                          "l-*-235"
                                                          "l-*-233"
                                                          "l-*-231"
                                                          "l-*-229"
                                                          "l-*-227"
                                                          "l-*-225"
                                                          "l-*-223"
                                                          "l-*-221"
                                                          "l-*-219"
                                                          "l-*-217"
                                                          "l-*-215"
                                                          "l-*-213"
                                                          "l-*-211"
                                                          "l-*-209"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("l-*-47"
                                                          "l-*-46"
                                                          "l-*-45")))
                                                      (hygiene guile))
                                                   '(())))
                                            #f)
                                          #f))
                                      tmp-13009)
                                    #f)
                                (@apply
                                  (lambda (x-13115 dots-13116 ys-13117)
                                    (call-with-values
                                      (lambda ()
                                        (cvt*-12573
                                          ys-13117
                                          n-12579
                                          ids-12580))
                                      (lambda (ys-13120 ids-13121)
                                        (call-with-values
                                          (lambda ()
                                            (cvt-12575
                                              x-13115
                                              (#{1+}# n-12579)
                                              ids-13121))
                                          (lambda (x-13122 ids-13123)
                                            (call-with-values
                                              (lambda ()
                                                (v-reverse-12574 ys-13120))
                                              (lambda (ys-13156 e-13157)
                                                (values
                                                  (vector
                                                    'each+
                                                    x-13122
                                                    ys-13156
                                                    e-13157)
                                                  ids-13123))))))))
                                  tmp-13009)
                                (let ((tmp-13158
                                        ($sc-dispatch p-12578 '(any . any))))
                                  (if tmp-13158
                                    (@apply
                                      (lambda (x-13162 y-13163)
                                        (call-with-values
                                          (lambda ()
                                            (cvt-12575
                                              y-13163
                                              n-12579
                                              ids-12580))
                                          (lambda (y-13164 ids-13165)
                                            (call-with-values
                                              (lambda ()
                                                (cvt-12575
                                                  x-13162
                                                  n-12579
                                                  ids-13165))
                                              (lambda (x-13166 ids-13167)
                                                (values
                                                  (cons x-13166 y-13164)
                                                  ids-13167))))))
                                      tmp-13158)
                                    (let ((tmp-13168
                                            ($sc-dispatch p-12578 '())))
                                      (if tmp-13168
                                        (@apply
                                          (lambda () (values '() ids-12580))
                                          tmp-13168)
                                        (let ((tmp-13172
                                                ($sc-dispatch
                                                  p-12578
                                                  '#(vector each-any))))
                                          (if tmp-13172
                                            (@apply
                                              (lambda (x-13176)
                                                (call-with-values
                                                  (lambda ()
                                                    (cvt-12575
                                                      x-13176
                                                      n-12579
                                                      ids-12580))
                                                  (lambda (p-13177 ids-13178)
                                                    (values
                                                      (vector 'vector p-13177)
                                                      ids-13178))))
                                              tmp-13172)
                                            (values
                                              (vector
                                                'atom
                                                (strip-4344 p-12578 '(())))
                                              ids-12580)))))))))))))))
                 (cvt-12575 pattern-12571 0 '()))))
           (build-dispatch-call-10975
             (lambda (pvars-13291 exp-13292 y-13293 r-13294 mod-13295)
               (let ((ids-13296 (map car pvars-13291)))
                 (begin
                   (map cdr pvars-13291)
                   (let ((labels-13298 (gen-labels-4298 ids-13296))
                         (new-vars-13299 (map gen-var-4345 ids-13296)))
                     (build-application-4262
                       #f
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'apply)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'apply
                           #f))
                       (list (build-simple-lambda-4271
                               #f
                               (map syntax->datum ids-13296)
                               #f
                               new-vars-13299
                               '()
                               (expand-4331
                                 exp-13292
                                 (extend-env-4289
                                   labels-13298
                                   (map (lambda (var-13622 level-13623)
                                          (cons 'syntax
                                                (cons var-13622 level-13623)))
                                        new-vars-13299
                                        (map cdr pvars-13291))
                                   r-13294)
                                 (make-binding-wrap-4309
                                   ids-13296
                                   labels-13298
                                   '(()))
                                 mod-13295))
                             y-13293)))))))
           (gen-clause-10976
             (lambda (x-11943
                      keys-11944
                      clauses-11945
                      r-11946
                      pat-11947
                      fender-11948
                      exp-11949
                      mod-11950)
               (call-with-values
                 (lambda ()
                   (convert-pattern-10974 pat-11947 keys-11944))
                 (lambda (p-12105 pvars-12106)
                   (if (not (distinct-bound-ids?-4322 (map car pvars-12106)))
                     (syntax-violation
                       'syntax-case
                       "duplicate pattern variable"
                       pat-11947)
                     (if (not (and-map
                                (lambda (x-12222)
                                  (not (let ((x-12226 (car x-12222)))
                                         (if (if (if (vector? x-12226)
                                                   (if (= (vector-length
                                                            x-12226)
                                                          4)
                                                     (eq? (vector-ref
                                                            x-12226
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (symbol? (vector-ref x-12226 1))
                                               #f)
                                           (if (eq? (if (if (vector? x-12226)
                                                          (if (= (vector-length
                                                                   x-12226)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   x-12226
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (vector-ref x-12226 1)
                                                      x-12226)
                                                    (if (if (= (vector-length
                                                                 '#(syntax-object
                                                                    ...
                                                                    ((top)
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("l-*-2267"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         session-id
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-476"
                                                                        "l-*-474"
                                                                        "l-*-472"
                                                                        "l-*-470"
                                                                        "l-*-468"
                                                                        "l-*-466"
                                                                        "l-*-464"
                                                                        "l-*-462"
                                                                        "l-*-460"
                                                                        "l-*-458"
                                                                        "l-*-456"
                                                                        "l-*-454"
                                                                        "l-*-452"
                                                                        "l-*-450"
                                                                        "l-*-448"
                                                                        "l-*-446"
                                                                        "l-*-444"
                                                                        "l-*-442"
                                                                        "l-*-440"
                                                                        "l-*-438"
                                                                        "l-*-436"
                                                                        "l-*-434"
                                                                        "l-*-432"
                                                                        "l-*-430"
                                                                        "l-*-428"
                                                                        "l-*-426"
                                                                        "l-*-424"
                                                                        "l-*-422"
                                                                        "l-*-420"
                                                                        "l-*-418"
                                                                        "l-*-416"
                                                                        "l-*-414"
                                                                        "l-*-412"
                                                                        "l-*-410"
                                                                        "l-*-408"
                                                                        "l-*-406"
                                                                        "l-*-404"
                                                                        "l-*-402"
                                                                        "l-*-400"
                                                                        "l-*-399"
                                                                        "l-*-397"
                                                                        "l-*-394"
                                                                        "l-*-393"
                                                                        "l-*-392"
                                                                        "l-*-390"
                                                                        "l-*-389"
                                                                        "l-*-387"
                                                                        "l-*-385"
                                                                        "l-*-383"
                                                                        "l-*-381"
                                                                        "l-*-379"
                                                                        "l-*-377"
                                                                        "l-*-375"
                                                                        "l-*-373"
                                                                        "l-*-370"
                                                                        "l-*-368"
                                                                        "l-*-367"
                                                                        "l-*-365"
                                                                        "l-*-363"
                                                                        "l-*-361"
                                                                        "l-*-359"
                                                                        "l-*-358"
                                                                        "l-*-357"
                                                                        "l-*-356"
                                                                        "l-*-354"
                                                                        "l-*-353"
                                                                        "l-*-350"
                                                                        "l-*-348"
                                                                        "l-*-346"
                                                                        "l-*-344"
                                                                        "l-*-342"
                                                                        "l-*-340"
                                                                        "l-*-338"
                                                                        "l-*-337"
                                                                        "l-*-336"
                                                                        "l-*-334"
                                                                        "l-*-332"
                                                                        "l-*-331"
                                                                        "l-*-328"
                                                                        "l-*-327"
                                                                        "l-*-325"
                                                                        "l-*-323"
                                                                        "l-*-321"
                                                                        "l-*-319"
                                                                        "l-*-317"
                                                                        "l-*-315"
                                                                        "l-*-313"
                                                                        "l-*-311"
                                                                        "l-*-309"
                                                                        "l-*-306"
                                                                        "l-*-304"
                                                                        "l-*-302"
                                                                        "l-*-300"
                                                                        "l-*-298"
                                                                        "l-*-296"
                                                                        "l-*-294"
                                                                        "l-*-292"
                                                                        "l-*-290"
                                                                        "l-*-288"
                                                                        "l-*-286"
                                                                        "l-*-284"
                                                                        "l-*-282"
                                                                        "l-*-280"
                                                                        "l-*-278"
                                                                        "l-*-276"
                                                                        "l-*-274"
                                                                        "l-*-272"
                                                                        "l-*-270"
                                                                        "l-*-268"
                                                                        "l-*-266"
                                                                        "l-*-264"
                                                                        "l-*-262"
                                                                        "l-*-260"
                                                                        "l-*-258"
                                                                        "l-*-256"
                                                                        "l-*-255"
                                                                        "l-*-254"
                                                                        "l-*-253"
                                                                        "l-*-252"
                                                                        "l-*-250"
                                                                        "l-*-248"
                                                                        "l-*-246"
                                                                        "l-*-243"
                                                                        "l-*-241"
                                                                        "l-*-239"
                                                                        "l-*-237"
                                                                        "l-*-235"
                                                                        "l-*-233"
                                                                        "l-*-231"
                                                                        "l-*-229"
                                                                        "l-*-227"
                                                                        "l-*-225"
                                                                        "l-*-223"
                                                                        "l-*-221"
                                                                        "l-*-219"
                                                                        "l-*-217"
                                                                        "l-*-215"
                                                                        "l-*-213"
                                                                        "l-*-211"
                                                                        "l-*-209"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-47"
                                                                        "l-*-46"
                                                                        "l-*-45")))
                                                                    (hygiene
                                                                      guile)))
                                                               4)
                                                          #t
                                                          #f)
                                                      '...
                                                      '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("l-*-2267"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              with-transformer-environment
                                                              transformer-environment
                                                              resolve-identifier
                                                              locally-bound-identifiers
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              session-id
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("l-*-476"
                                                             "l-*-474"
                                                             "l-*-472"
                                                             "l-*-470"
                                                             "l-*-468"
                                                             "l-*-466"
                                                             "l-*-464"
                                                             "l-*-462"
                                                             "l-*-460"
                                                             "l-*-458"
                                                             "l-*-456"
                                                             "l-*-454"
                                                             "l-*-452"
                                                             "l-*-450"
                                                             "l-*-448"
                                                             "l-*-446"
                                                             "l-*-444"
                                                             "l-*-442"
                                                             "l-*-440"
                                                             "l-*-438"
                                                             "l-*-436"
                                                             "l-*-434"
                                                             "l-*-432"
                                                             "l-*-430"
                                                             "l-*-428"
                                                             "l-*-426"
                                                             "l-*-424"
                                                             "l-*-422"
                                                             "l-*-420"
                                                             "l-*-418"
                                                             "l-*-416"
                                                             "l-*-414"
                                                             "l-*-412"
                                                             "l-*-410"
                                                             "l-*-408"
                                                             "l-*-406"
                                                             "l-*-404"
                                                             "l-*-402"
                                                             "l-*-400"
                                                             "l-*-399"
                                                             "l-*-397"
                                                             "l-*-394"
                                                             "l-*-393"
                                                             "l-*-392"
                                                             "l-*-390"
                                                             "l-*-389"
                                                             "l-*-387"
                                                             "l-*-385"
                                                             "l-*-383"
                                                             "l-*-381"
                                                             "l-*-379"
                                                             "l-*-377"
                                                             "l-*-375"
                                                             "l-*-373"
                                                             "l-*-370"
                                                             "l-*-368"
                                                             "l-*-367"
                                                             "l-*-365"
                                                             "l-*-363"
                                                             "l-*-361"
                                                             "l-*-359"
                                                             "l-*-358"
                                                             "l-*-357"
                                                             "l-*-356"
                                                             "l-*-354"
                                                             "l-*-353"
                                                             "l-*-350"
                                                             "l-*-348"
                                                             "l-*-346"
                                                             "l-*-344"
                                                             "l-*-342"
                                                             "l-*-340"
                                                             "l-*-338"
                                                             "l-*-337"
                                                             "l-*-336"
                                                             "l-*-334"
                                                             "l-*-332"
                                                             "l-*-331"
                                                             "l-*-328"
                                                             "l-*-327"
                                                             "l-*-325"
                                                             "l-*-323"
                                                             "l-*-321"
                                                             "l-*-319"
                                                             "l-*-317"
                                                             "l-*-315"
                                                             "l-*-313"
                                                             "l-*-311"
                                                             "l-*-309"
                                                             "l-*-306"
                                                             "l-*-304"
                                                             "l-*-302"
                                                             "l-*-300"
                                                             "l-*-298"
                                                             "l-*-296"
                                                             "l-*-294"
                                                             "l-*-292"
                                                             "l-*-290"
                                                             "l-*-288"
                                                             "l-*-286"
                                                             "l-*-284"
                                                             "l-*-282"
                                                             "l-*-280"
                                                             "l-*-278"
                                                             "l-*-276"
                                                             "l-*-274"
                                                             "l-*-272"
                                                             "l-*-270"
                                                             "l-*-268"
                                                             "l-*-266"
                                                             "l-*-264"
                                                             "l-*-262"
                                                             "l-*-260"
                                                             "l-*-258"
                                                             "l-*-256"
                                                             "l-*-255"
                                                             "l-*-254"
                                                             "l-*-253"
                                                             "l-*-252"
                                                             "l-*-250"
                                                             "l-*-248"
                                                             "l-*-246"
                                                             "l-*-243"
                                                             "l-*-241"
                                                             "l-*-239"
                                                             "l-*-237"
                                                             "l-*-235"
                                                             "l-*-233"
                                                             "l-*-231"
                                                             "l-*-229"
                                                             "l-*-227"
                                                             "l-*-225"
                                                             "l-*-223"
                                                             "l-*-221"
                                                             "l-*-219"
                                                             "l-*-217"
                                                             "l-*-215"
                                                             "l-*-213"
                                                             "l-*-211"
                                                             "l-*-209"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("l-*-47"
                                                             "l-*-46"
                                                             "l-*-45")))
                                                         (hygiene guile))))
                                             (eq? (id-var-name-4314
                                                    x-12226
                                                    '(()))
                                                  (id-var-name-4314
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("l-*-2267"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            locally-bound-identifiers
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            session-id
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-476"
                                                           "l-*-474"
                                                           "l-*-472"
                                                           "l-*-470"
                                                           "l-*-468"
                                                           "l-*-466"
                                                           "l-*-464"
                                                           "l-*-462"
                                                           "l-*-460"
                                                           "l-*-458"
                                                           "l-*-456"
                                                           "l-*-454"
                                                           "l-*-452"
                                                           "l-*-450"
                                                           "l-*-448"
                                                           "l-*-446"
                                                           "l-*-444"
                                                           "l-*-442"
                                                           "l-*-440"
                                                           "l-*-438"
                                                           "l-*-436"
                                                           "l-*-434"
                                                           "l-*-432"
                                                           "l-*-430"
                                                           "l-*-428"
                                                           "l-*-426"
                                                           "l-*-424"
                                                           "l-*-422"
                                                           "l-*-420"
                                                           "l-*-418"
                                                           "l-*-416"
                                                           "l-*-414"
                                                           "l-*-412"
                                                           "l-*-410"
                                                           "l-*-408"
                                                           "l-*-406"
                                                           "l-*-404"
                                                           "l-*-402"
                                                           "l-*-400"
                                                           "l-*-399"
                                                           "l-*-397"
                                                           "l-*-394"
                                                           "l-*-393"
                                                           "l-*-392"
                                                           "l-*-390"
                                                           "l-*-389"
                                                           "l-*-387"
                                                           "l-*-385"
                                                           "l-*-383"
                                                           "l-*-381"
                                                           "l-*-379"
                                                           "l-*-377"
                                                           "l-*-375"
                                                           "l-*-373"
                                                           "l-*-370"
                                                           "l-*-368"
                                                           "l-*-367"
                                                           "l-*-365"
                                                           "l-*-363"
                                                           "l-*-361"
                                                           "l-*-359"
                                                           "l-*-358"
                                                           "l-*-357"
                                                           "l-*-356"
                                                           "l-*-354"
                                                           "l-*-353"
                                                           "l-*-350"
                                                           "l-*-348"
                                                           "l-*-346"
                                                           "l-*-344"
                                                           "l-*-342"
                                                           "l-*-340"
                                                           "l-*-338"
                                                           "l-*-337"
                                                           "l-*-336"
                                                           "l-*-334"
                                                           "l-*-332"
                                                           "l-*-331"
                                                           "l-*-328"
                                                           "l-*-327"
                                                           "l-*-325"
                                                           "l-*-323"
                                                           "l-*-321"
                                                           "l-*-319"
                                                           "l-*-317"
                                                           "l-*-315"
                                                           "l-*-313"
                                                           "l-*-311"
                                                           "l-*-309"
                                                           "l-*-306"
                                                           "l-*-304"
                                                           "l-*-302"
                                                           "l-*-300"
                                                           "l-*-298"
                                                           "l-*-296"
                                                           "l-*-294"
                                                           "l-*-292"
                                                           "l-*-290"
                                                           "l-*-288"
                                                           "l-*-286"
                                                           "l-*-284"
                                                           "l-*-282"
                                                           "l-*-280"
                                                           "l-*-278"
                                                           "l-*-276"
                                                           "l-*-274"
                                                           "l-*-272"
                                                           "l-*-270"
                                                           "l-*-268"
                                                           "l-*-266"
                                                           "l-*-264"
                                                           "l-*-262"
                                                           "l-*-260"
                                                           "l-*-258"
                                                           "l-*-256"
                                                           "l-*-255"
                                                           "l-*-254"
                                                           "l-*-253"
                                                           "l-*-252"
                                                           "l-*-250"
                                                           "l-*-248"
                                                           "l-*-246"
                                                           "l-*-243"
                                                           "l-*-241"
                                                           "l-*-239"
                                                           "l-*-237"
                                                           "l-*-235"
                                                           "l-*-233"
                                                           "l-*-231"
                                                           "l-*-229"
                                                           "l-*-227"
                                                           "l-*-225"
                                                           "l-*-223"
                                                           "l-*-221"
                                                           "l-*-219"
                                                           "l-*-217"
                                                           "l-*-215"
                                                           "l-*-213"
                                                           "l-*-211"
                                                           "l-*-209"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("l-*-47"
                                                           "l-*-46"
                                                           "l-*-45")))
                                                       (hygiene guile))
                                                    '(())))
                                             #f)
                                           #f))))
                                pvars-12106))
                       (syntax-violation
                         'syntax-case
                         "misplaced ellipsis"
                         pat-11947)
                       (let ((y-12302
                               (gensym
                                 (string-append (symbol->string 'tmp) "-"))))
                         (build-application-4262
                           #f
                           (let ((req-12445 (list 'tmp))
                                 (vars-12447 (list y-12302))
                                 (exp-12449
                                   (let ((y-12466
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 3)
                                             #f
                                             'tmp
                                             y-12302)))
                                     (let ((test-exp-12470
                                             (let ((tmp-12479
                                                     ($sc-dispatch
                                                       fender-11948
                                                       '#(atom #t))))
                                               (if tmp-12479
                                                 (@apply
                                                   (lambda () y-12466)
                                                   tmp-12479)
                                                 (let ((then-exp-12497
                                                         (build-dispatch-call-10975
                                                           pvars-12106
                                                           fender-11948
                                                           y-12466
                                                           r-11946
                                                           mod-11950))
                                                       (else-exp-12498
                                                         (make-struct/no-tail
                                                           (vector-ref
                                                             %expanded-vtables
                                                             1)
                                                           #f
                                                           #f)))
                                                   (make-struct/no-tail
                                                     (vector-ref
                                                       %expanded-vtables
                                                       10)
                                                     #f
                                                     y-12466
                                                     then-exp-12497
                                                     else-exp-12498)))))
                                           (then-exp-12471
                                             (build-dispatch-call-10975
                                               pvars-12106
                                               exp-11949
                                               y-12466
                                               r-11946
                                               mod-11950))
                                           (else-exp-12472
                                             (gen-syntax-case-10977
                                               x-11943
                                               keys-11944
                                               clauses-11945
                                               r-11946
                                               mod-11950)))
                                       (make-struct/no-tail
                                         (vector-ref %expanded-vtables 10)
                                         #f
                                         test-exp-12470
                                         then-exp-12471
                                         else-exp-12472)))))
                             (let ((body-12454
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       req-12445
                                       #f
                                       #f
                                       #f
                                       '()
                                       vars-12447
                                       exp-12449
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 body-12454)))
                           (list (if (eq? p-12105 'any)
                                   (let ((fun-exp-12520
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               'list)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               'list
                                               #f)))
                                         (arg-exps-12521 (list x-11943)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       fun-exp-12520
                                       arg-exps-12521))
                                   (let ((fun-exp-12544
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               '$sc-dispatch)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               '$sc-dispatch
                                               #f)))
                                         (arg-exps-12545
                                           (list x-11943
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     1)
                                                   #f
                                                   p-12105))))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       fun-exp-12544
                                       arg-exps-12545))))))))))))
           (gen-syntax-case-10977
             (lambda (x-11376
                      keys-11377
                      clauses-11378
                      r-11379
                      mod-11380)
               (if (null? clauses-11378)
                 (let ((fun-exp-11385
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'syntax-violation)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'syntax-violation
                             #f)))
                       (arg-exps-11386
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #f)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 "source expression failed to match any pattern")
                               x-11376)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     fun-exp-11385
                     arg-exps-11386))
                 (let ((tmp-11419 (car clauses-11378)))
                   (let ((tmp-11420 ($sc-dispatch tmp-11419 '(any any))))
                     (if tmp-11420
                       (@apply
                         (lambda (pat-11422 exp-11423)
                           (if (if (if (symbol? pat-11422)
                                     #t
                                     (if (if (vector? pat-11422)
                                           (if (= (vector-length pat-11422) 4)
                                             (eq? (vector-ref pat-11422 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (symbol? (vector-ref pat-11422 1))
                                       #f))
                                 (and-map
                                   (lambda (x-11450)
                                     (not (if (eq? (if (if (vector? pat-11422)
                                                         (if (= (vector-length
                                                                  pat-11422)
                                                                4)
                                                           (eq? (vector-ref
                                                                  pat-11422
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref pat-11422 1)
                                                     pat-11422)
                                                   (if (if (vector? x-11450)
                                                         (if (= (vector-length
                                                                  x-11450)
                                                                4)
                                                           (eq? (vector-ref
                                                                  x-11450
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref x-11450 1)
                                                     x-11450))
                                            (eq? (id-var-name-4314
                                                   pat-11422
                                                   '(()))
                                                 (id-var-name-4314
                                                   x-11450
                                                   '(())))
                                            #f)))
                                   (cons '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("l-*-3891" "l-*-3892"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("l-*-3880"
                                                 "l-*-3881"
                                                 "l-*-3882"
                                                 "l-*-3883"
                                                 "l-*-3884"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("l-*-3698"
                                                "l-*-3696"
                                                "l-*-3694"
                                                "l-*-3692"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 session-id
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-476"
                                                "l-*-474"
                                                "l-*-472"
                                                "l-*-470"
                                                "l-*-468"
                                                "l-*-466"
                                                "l-*-464"
                                                "l-*-462"
                                                "l-*-460"
                                                "l-*-458"
                                                "l-*-456"
                                                "l-*-454"
                                                "l-*-452"
                                                "l-*-450"
                                                "l-*-448"
                                                "l-*-446"
                                                "l-*-444"
                                                "l-*-442"
                                                "l-*-440"
                                                "l-*-438"
                                                "l-*-436"
                                                "l-*-434"
                                                "l-*-432"
                                                "l-*-430"
                                                "l-*-428"
                                                "l-*-426"
                                                "l-*-424"
                                                "l-*-422"
                                                "l-*-420"
                                                "l-*-418"
                                                "l-*-416"
                                                "l-*-414"
                                                "l-*-412"
                                                "l-*-410"
                                                "l-*-408"
                                                "l-*-406"
                                                "l-*-404"
                                                "l-*-402"
                                                "l-*-400"
                                                "l-*-399"
                                                "l-*-397"
                                                "l-*-394"
                                                "l-*-393"
                                                "l-*-392"
                                                "l-*-390"
                                                "l-*-389"
                                                "l-*-387"
                                                "l-*-385"
                                                "l-*-383"
                                                "l-*-381"
                                                "l-*-379"
                                                "l-*-377"
                                                "l-*-375"
                                                "l-*-373"
                                                "l-*-370"
                                                "l-*-368"
                                                "l-*-367"
                                                "l-*-365"
                                                "l-*-363"
                                                "l-*-361"
                                                "l-*-359"
                                                "l-*-358"
                                                "l-*-357"
                                                "l-*-356"
                                                "l-*-354"
                                                "l-*-353"
                                                "l-*-350"
                                                "l-*-348"
                                                "l-*-346"
                                                "l-*-344"
                                                "l-*-342"
                                                "l-*-340"
                                                "l-*-338"
                                                "l-*-337"
                                                "l-*-336"
                                                "l-*-334"
                                                "l-*-332"
                                                "l-*-331"
                                                "l-*-328"
                                                "l-*-327"
                                                "l-*-325"
                                                "l-*-323"
                                                "l-*-321"
                                                "l-*-319"
                                                "l-*-317"
                                                "l-*-315"
                                                "l-*-313"
                                                "l-*-311"
                                                "l-*-309"
                                                "l-*-306"
                                                "l-*-304"
                                                "l-*-302"
                                                "l-*-300"
                                                "l-*-298"
                                                "l-*-296"
                                                "l-*-294"
                                                "l-*-292"
                                                "l-*-290"
                                                "l-*-288"
                                                "l-*-286"
                                                "l-*-284"
                                                "l-*-282"
                                                "l-*-280"
                                                "l-*-278"
                                                "l-*-276"
                                                "l-*-274"
                                                "l-*-272"
                                                "l-*-270"
                                                "l-*-268"
                                                "l-*-266"
                                                "l-*-264"
                                                "l-*-262"
                                                "l-*-260"
                                                "l-*-258"
                                                "l-*-256"
                                                "l-*-255"
                                                "l-*-254"
                                                "l-*-253"
                                                "l-*-252"
                                                "l-*-250"
                                                "l-*-248"
                                                "l-*-246"
                                                "l-*-243"
                                                "l-*-241"
                                                "l-*-239"
                                                "l-*-237"
                                                "l-*-235"
                                                "l-*-233"
                                                "l-*-231"
                                                "l-*-229"
                                                "l-*-227"
                                                "l-*-225"
                                                "l-*-223"
                                                "l-*-221"
                                                "l-*-219"
                                                "l-*-217"
                                                "l-*-215"
                                                "l-*-213"
                                                "l-*-211"
                                                "l-*-209"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("l-*-47" "l-*-46" "l-*-45")))
                                            (hygiene guile))
                                         keys-11377))
                                 #f)
                             (if (if (eq? (if (if (= (vector-length
                                                       '#(syntax-object
                                                          pad
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("l-*-3891"
                                                               "l-*-3892"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-3880"
                                                               "l-*-3881"
                                                               "l-*-3882"
                                                               "l-*-3883"
                                                               "l-*-3884"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-3698"
                                                              "l-*-3696"
                                                              "l-*-3694"
                                                              "l-*-3692"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               locally-bound-identifiers
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               session-id
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-476"
                                                              "l-*-474"
                                                              "l-*-472"
                                                              "l-*-470"
                                                              "l-*-468"
                                                              "l-*-466"
                                                              "l-*-464"
                                                              "l-*-462"
                                                              "l-*-460"
                                                              "l-*-458"
                                                              "l-*-456"
                                                              "l-*-454"
                                                              "l-*-452"
                                                              "l-*-450"
                                                              "l-*-448"
                                                              "l-*-446"
                                                              "l-*-444"
                                                              "l-*-442"
                                                              "l-*-440"
                                                              "l-*-438"
                                                              "l-*-436"
                                                              "l-*-434"
                                                              "l-*-432"
                                                              "l-*-430"
                                                              "l-*-428"
                                                              "l-*-426"
                                                              "l-*-424"
                                                              "l-*-422"
                                                              "l-*-420"
                                                              "l-*-418"
                                                              "l-*-416"
                                                              "l-*-414"
                                                              "l-*-412"
                                                              "l-*-410"
                                                              "l-*-408"
                                                              "l-*-406"
                                                              "l-*-404"
                                                              "l-*-402"
                                                              "l-*-400"
                                                              "l-*-399"
                                                              "l-*-397"
                                                              "l-*-394"
                                                              "l-*-393"
                                                              "l-*-392"
                                                              "l-*-390"
                                                              "l-*-389"
                                                              "l-*-387"
                                                              "l-*-385"
                                                              "l-*-383"
                                                              "l-*-381"
                                                              "l-*-379"
                                                              "l-*-377"
                                                              "l-*-375"
                                                              "l-*-373"
                                                              "l-*-370"
                                                              "l-*-368"
                                                              "l-*-367"
                                                              "l-*-365"
                                                              "l-*-363"
                                                              "l-*-361"
                                                              "l-*-359"
                                                              "l-*-358"
                                                              "l-*-357"
                                                              "l-*-356"
                                                              "l-*-354"
                                                              "l-*-353"
                                                              "l-*-350"
                                                              "l-*-348"
                                                              "l-*-346"
                                                              "l-*-344"
                                                              "l-*-342"
                                                              "l-*-340"
                                                              "l-*-338"
                                                              "l-*-337"
                                                              "l-*-336"
                                                              "l-*-334"
                                                              "l-*-332"
                                                              "l-*-331"
                                                              "l-*-328"
                                                              "l-*-327"
                                                              "l-*-325"
                                                              "l-*-323"
                                                              "l-*-321"
                                                              "l-*-319"
                                                              "l-*-317"
                                                              "l-*-315"
                                                              "l-*-313"
                                                              "l-*-311"
                                                              "l-*-309"
                                                              "l-*-306"
                                                              "l-*-304"
                                                              "l-*-302"
                                                              "l-*-300"
                                                              "l-*-298"
                                                              "l-*-296"
                                                              "l-*-294"
                                                              "l-*-292"
                                                              "l-*-290"
                                                              "l-*-288"
                                                              "l-*-286"
                                                              "l-*-284"
                                                              "l-*-282"
                                                              "l-*-280"
                                                              "l-*-278"
                                                              "l-*-276"
                                                              "l-*-274"
                                                              "l-*-272"
                                                              "l-*-270"
                                                              "l-*-268"
                                                              "l-*-266"
                                                              "l-*-264"
                                                              "l-*-262"
                                                              "l-*-260"
                                                              "l-*-258"
                                                              "l-*-256"
                                                              "l-*-255"
                                                              "l-*-254"
                                                              "l-*-253"
                                                              "l-*-252"
                                                              "l-*-250"
                                                              "l-*-248"
                                                              "l-*-246"
                                                              "l-*-243"
                                                              "l-*-241"
                                                              "l-*-239"
                                                              "l-*-237"
                                                              "l-*-235"
                                                              "l-*-233"
                                                              "l-*-231"
                                                              "l-*-229"
                                                              "l-*-227"
                                                              "l-*-225"
                                                              "l-*-223"
                                                              "l-*-221"
                                                              "l-*-219"
                                                              "l-*-217"
                                                              "l-*-215"
                                                              "l-*-213"
                                                              "l-*-211"
                                                              "l-*-209"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("l-*-47"
                                                              "l-*-46"
                                                              "l-*-45")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            'pad
                                            '#(syntax-object
                                               pad
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("l-*-3891" "l-*-3892"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-3880"
                                                    "l-*-3881"
                                                    "l-*-3882"
                                                    "l-*-3883"
                                                    "l-*-3884"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("l-*-3698"
                                                   "l-*-3696"
                                                   "l-*-3694"
                                                   "l-*-3692"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    session-id
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-476"
                                                   "l-*-474"
                                                   "l-*-472"
                                                   "l-*-470"
                                                   "l-*-468"
                                                   "l-*-466"
                                                   "l-*-464"
                                                   "l-*-462"
                                                   "l-*-460"
                                                   "l-*-458"
                                                   "l-*-456"
                                                   "l-*-454"
                                                   "l-*-452"
                                                   "l-*-450"
                                                   "l-*-448"
                                                   "l-*-446"
                                                   "l-*-444"
                                                   "l-*-442"
                                                   "l-*-440"
                                                   "l-*-438"
                                                   "l-*-436"
                                                   "l-*-434"
                                                   "l-*-432"
                                                   "l-*-430"
                                                   "l-*-428"
                                                   "l-*-426"
                                                   "l-*-424"
                                                   "l-*-422"
                                                   "l-*-420"
                                                   "l-*-418"
                                                   "l-*-416"
                                                   "l-*-414"
                                                   "l-*-412"
                                                   "l-*-410"
                                                   "l-*-408"
                                                   "l-*-406"
                                                   "l-*-404"
                                                   "l-*-402"
                                                   "l-*-400"
                                                   "l-*-399"
                                                   "l-*-397"
                                                   "l-*-394"
                                                   "l-*-393"
                                                   "l-*-392"
                                                   "l-*-390"
                                                   "l-*-389"
                                                   "l-*-387"
                                                   "l-*-385"
                                                   "l-*-383"
                                                   "l-*-381"
                                                   "l-*-379"
                                                   "l-*-377"
                                                   "l-*-375"
                                                   "l-*-373"
                                                   "l-*-370"
                                                   "l-*-368"
                                                   "l-*-367"
                                                   "l-*-365"
                                                   "l-*-363"
                                                   "l-*-361"
                                                   "l-*-359"
                                                   "l-*-358"
                                                   "l-*-357"
                                                   "l-*-356"
                                                   "l-*-354"
                                                   "l-*-353"
                                                   "l-*-350"
                                                   "l-*-348"
                                                   "l-*-346"
                                                   "l-*-344"
                                                   "l-*-342"
                                                   "l-*-340"
                                                   "l-*-338"
                                                   "l-*-337"
                                                   "l-*-336"
                                                   "l-*-334"
                                                   "l-*-332"
                                                   "l-*-331"
                                                   "l-*-328"
                                                   "l-*-327"
                                                   "l-*-325"
                                                   "l-*-323"
                                                   "l-*-321"
                                                   "l-*-319"
                                                   "l-*-317"
                                                   "l-*-315"
                                                   "l-*-313"
                                                   "l-*-311"
                                                   "l-*-309"
                                                   "l-*-306"
                                                   "l-*-304"
                                                   "l-*-302"
                                                   "l-*-300"
                                                   "l-*-298"
                                                   "l-*-296"
                                                   "l-*-294"
                                                   "l-*-292"
                                                   "l-*-290"
                                                   "l-*-288"
                                                   "l-*-286"
                                                   "l-*-284"
                                                   "l-*-282"
                                                   "l-*-280"
                                                   "l-*-278"
                                                   "l-*-276"
                                                   "l-*-274"
                                                   "l-*-272"
                                                   "l-*-270"
                                                   "l-*-268"
                                                   "l-*-266"
                                                   "l-*-264"
                                                   "l-*-262"
                                                   "l-*-260"
                                                   "l-*-258"
                                                   "l-*-256"
                                                   "l-*-255"
                                                   "l-*-254"
                                                   "l-*-253"
                                                   "l-*-252"
                                                   "l-*-250"
                                                   "l-*-248"
                                                   "l-*-246"
                                                   "l-*-243"
                                                   "l-*-241"
                                                   "l-*-239"
                                                   "l-*-237"
                                                   "l-*-235"
                                                   "l-*-233"
                                                   "l-*-231"
                                                   "l-*-229"
                                                   "l-*-227"
                                                   "l-*-225"
                                                   "l-*-223"
                                                   "l-*-221"
                                                   "l-*-219"
                                                   "l-*-217"
                                                   "l-*-215"
                                                   "l-*-213"
                                                   "l-*-211"
                                                   "l-*-209"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("l-*-47"
                                                   "l-*-46"
                                                   "l-*-45")))
                                               (hygiene guile)))
                                          (if (if (= (vector-length
                                                       '#(syntax-object
                                                          _
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("l-*-3891"
                                                               "l-*-3892"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-3880"
                                                               "l-*-3881"
                                                               "l-*-3882"
                                                               "l-*-3883"
                                                               "l-*-3884"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-3698"
                                                              "l-*-3696"
                                                              "l-*-3694"
                                                              "l-*-3692"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               locally-bound-identifiers
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               session-id
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-476"
                                                              "l-*-474"
                                                              "l-*-472"
                                                              "l-*-470"
                                                              "l-*-468"
                                                              "l-*-466"
                                                              "l-*-464"
                                                              "l-*-462"
                                                              "l-*-460"
                                                              "l-*-458"
                                                              "l-*-456"
                                                              "l-*-454"
                                                              "l-*-452"
                                                              "l-*-450"
                                                              "l-*-448"
                                                              "l-*-446"
                                                              "l-*-444"
                                                              "l-*-442"
                                                              "l-*-440"
                                                              "l-*-438"
                                                              "l-*-436"
                                                              "l-*-434"
                                                              "l-*-432"
                                                              "l-*-430"
                                                              "l-*-428"
                                                              "l-*-426"
                                                              "l-*-424"
                                                              "l-*-422"
                                                              "l-*-420"
                                                              "l-*-418"
                                                              "l-*-416"
                                                              "l-*-414"
                                                              "l-*-412"
                                                              "l-*-410"
                                                              "l-*-408"
                                                              "l-*-406"
                                                              "l-*-404"
                                                              "l-*-402"
                                                              "l-*-400"
                                                              "l-*-399"
                                                              "l-*-397"
                                                              "l-*-394"
                                                              "l-*-393"
                                                              "l-*-392"
                                                              "l-*-390"
                                                              "l-*-389"
                                                              "l-*-387"
                                                              "l-*-385"
                                                              "l-*-383"
                                                              "l-*-381"
                                                              "l-*-379"
                                                              "l-*-377"
                                                              "l-*-375"
                                                              "l-*-373"
                                                              "l-*-370"
                                                              "l-*-368"
                                                              "l-*-367"
                                                              "l-*-365"
                                                              "l-*-363"
                                                              "l-*-361"
                                                              "l-*-359"
                                                              "l-*-358"
                                                              "l-*-357"
                                                              "l-*-356"
                                                              "l-*-354"
                                                              "l-*-353"
                                                              "l-*-350"
                                                              "l-*-348"
                                                              "l-*-346"
                                                              "l-*-344"
                                                              "l-*-342"
                                                              "l-*-340"
                                                              "l-*-338"
                                                              "l-*-337"
                                                              "l-*-336"
                                                              "l-*-334"
                                                              "l-*-332"
                                                              "l-*-331"
                                                              "l-*-328"
                                                              "l-*-327"
                                                              "l-*-325"
                                                              "l-*-323"
                                                              "l-*-321"
                                                              "l-*-319"
                                                              "l-*-317"
                                                              "l-*-315"
                                                              "l-*-313"
                                                              "l-*-311"
                                                              "l-*-309"
                                                              "l-*-306"
                                                              "l-*-304"
                                                              "l-*-302"
                                                              "l-*-300"
                                                              "l-*-298"
                                                              "l-*-296"
                                                              "l-*-294"
                                                              "l-*-292"
                                                              "l-*-290"
                                                              "l-*-288"
                                                              "l-*-286"
                                                              "l-*-284"
                                                              "l-*-282"
                                                              "l-*-280"
                                                              "l-*-278"
                                                              "l-*-276"
                                                              "l-*-274"
                                                              "l-*-272"
                                                              "l-*-270"
                                                              "l-*-268"
                                                              "l-*-266"
                                                              "l-*-264"
                                                              "l-*-262"
                                                              "l-*-260"
                                                              "l-*-258"
                                                              "l-*-256"
                                                              "l-*-255"
                                                              "l-*-254"
                                                              "l-*-253"
                                                              "l-*-252"
                                                              "l-*-250"
                                                              "l-*-248"
                                                              "l-*-246"
                                                              "l-*-243"
                                                              "l-*-241"
                                                              "l-*-239"
                                                              "l-*-237"
                                                              "l-*-235"
                                                              "l-*-233"
                                                              "l-*-231"
                                                              "l-*-229"
                                                              "l-*-227"
                                                              "l-*-225"
                                                              "l-*-223"
                                                              "l-*-221"
                                                              "l-*-219"
                                                              "l-*-217"
                                                              "l-*-215"
                                                              "l-*-213"
                                                              "l-*-211"
                                                              "l-*-209"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("l-*-47"
                                                              "l-*-46"
                                                              "l-*-45")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            '_
                                            '#(syntax-object
                                               _
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("l-*-3891" "l-*-3892"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-3880"
                                                    "l-*-3881"
                                                    "l-*-3882"
                                                    "l-*-3883"
                                                    "l-*-3884"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("l-*-3698"
                                                   "l-*-3696"
                                                   "l-*-3694"
                                                   "l-*-3692"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    session-id
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-476"
                                                   "l-*-474"
                                                   "l-*-472"
                                                   "l-*-470"
                                                   "l-*-468"
                                                   "l-*-466"
                                                   "l-*-464"
                                                   "l-*-462"
                                                   "l-*-460"
                                                   "l-*-458"
                                                   "l-*-456"
                                                   "l-*-454"
                                                   "l-*-452"
                                                   "l-*-450"
                                                   "l-*-448"
                                                   "l-*-446"
                                                   "l-*-444"
                                                   "l-*-442"
                                                   "l-*-440"
                                                   "l-*-438"
                                                   "l-*-436"
                                                   "l-*-434"
                                                   "l-*-432"
                                                   "l-*-430"
                                                   "l-*-428"
                                                   "l-*-426"
                                                   "l-*-424"
                                                   "l-*-422"
                                                   "l-*-420"
                                                   "l-*-418"
                                                   "l-*-416"
                                                   "l-*-414"
                                                   "l-*-412"
                                                   "l-*-410"
                                                   "l-*-408"
                                                   "l-*-406"
                                                   "l-*-404"
                                                   "l-*-402"
                                                   "l-*-400"
                                                   "l-*-399"
                                                   "l-*-397"
                                                   "l-*-394"
                                                   "l-*-393"
                                                   "l-*-392"
                                                   "l-*-390"
                                                   "l-*-389"
                                                   "l-*-387"
                                                   "l-*-385"
                                                   "l-*-383"
                                                   "l-*-381"
                                                   "l-*-379"
                                                   "l-*-377"
                                                   "l-*-375"
                                                   "l-*-373"
                                                   "l-*-370"
                                                   "l-*-368"
                                                   "l-*-367"
                                                   "l-*-365"
                                                   "l-*-363"
                                                   "l-*-361"
                                                   "l-*-359"
                                                   "l-*-358"
                                                   "l-*-357"
                                                   "l-*-356"
                                                   "l-*-354"
                                                   "l-*-353"
                                                   "l-*-350"
                                                   "l-*-348"
                                                   "l-*-346"
                                                   "l-*-344"
                                                   "l-*-342"
                                                   "l-*-340"
                                                   "l-*-338"
                                                   "l-*-337"
                                                   "l-*-336"
                                                   "l-*-334"
                                                   "l-*-332"
                                                   "l-*-331"
                                                   "l-*-328"
                                                   "l-*-327"
                                                   "l-*-325"
                                                   "l-*-323"
                                                   "l-*-321"
                                                   "l-*-319"
                                                   "l-*-317"
                                                   "l-*-315"
                                                   "l-*-313"
                                                   "l-*-311"
                                                   "l-*-309"
                                                   "l-*-306"
                                                   "l-*-304"
                                                   "l-*-302"
                                                   "l-*-300"
                                                   "l-*-298"
                                                   "l-*-296"
                                                   "l-*-294"
                                                   "l-*-292"
                                                   "l-*-290"
                                                   "l-*-288"
                                                   "l-*-286"
                                                   "l-*-284"
                                                   "l-*-282"
                                                   "l-*-280"
                                                   "l-*-278"
                                                   "l-*-276"
                                                   "l-*-274"
                                                   "l-*-272"
                                                   "l-*-270"
                                                   "l-*-268"
                                                   "l-*-266"
                                                   "l-*-264"
                                                   "l-*-262"
                                                   "l-*-260"
                                                   "l-*-258"
                                                   "l-*-256"
                                                   "l-*-255"
                                                   "l-*-254"
                                                   "l-*-253"
                                                   "l-*-252"
                                                   "l-*-250"
                                                   "l-*-248"
                                                   "l-*-246"
                                                   "l-*-243"
                                                   "l-*-241"
                                                   "l-*-239"
                                                   "l-*-237"
                                                   "l-*-235"
                                                   "l-*-233"
                                                   "l-*-231"
                                                   "l-*-229"
                                                   "l-*-227"
                                                   "l-*-225"
                                                   "l-*-223"
                                                   "l-*-221"
                                                   "l-*-219"
                                                   "l-*-217"
                                                   "l-*-215"
                                                   "l-*-213"
                                                   "l-*-211"
                                                   "l-*-209"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("l-*-47"
                                                   "l-*-46"
                                                   "l-*-45")))
                                               (hygiene guile))))
                                   (eq? (id-var-name-4314
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("l-*-3891" "l-*-3892"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-3880"
                                                  "l-*-3881"
                                                  "l-*-3882"
                                                  "l-*-3883"
                                                  "l-*-3884"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("l-*-3698"
                                                 "l-*-3696"
                                                 "l-*-3694"
                                                 "l-*-3692"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  locally-bound-identifiers
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  session-id
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-476"
                                                 "l-*-474"
                                                 "l-*-472"
                                                 "l-*-470"
                                                 "l-*-468"
                                                 "l-*-466"
                                                 "l-*-464"
                                                 "l-*-462"
                                                 "l-*-460"
                                                 "l-*-458"
                                                 "l-*-456"
                                                 "l-*-454"
                                                 "l-*-452"
                                                 "l-*-450"
                                                 "l-*-448"
                                                 "l-*-446"
                                                 "l-*-444"
                                                 "l-*-442"
                                                 "l-*-440"
                                                 "l-*-438"
                                                 "l-*-436"
                                                 "l-*-434"
                                                 "l-*-432"
                                                 "l-*-430"
                                                 "l-*-428"
                                                 "l-*-426"
                                                 "l-*-424"
                                                 "l-*-422"
                                                 "l-*-420"
                                                 "l-*-418"
                                                 "l-*-416"
                                                 "l-*-414"
                                                 "l-*-412"
                                                 "l-*-410"
                                                 "l-*-408"
                                                 "l-*-406"
                                                 "l-*-404"
                                                 "l-*-402"
                                                 "l-*-400"
                                                 "l-*-399"
                                                 "l-*-397"
                                                 "l-*-394"
                                                 "l-*-393"
                                                 "l-*-392"
                                                 "l-*-390"
                                                 "l-*-389"
                                                 "l-*-387"
                                                 "l-*-385"
                                                 "l-*-383"
                                                 "l-*-381"
                                                 "l-*-379"
                                                 "l-*-377"
                                                 "l-*-375"
                                                 "l-*-373"
                                                 "l-*-370"
                                                 "l-*-368"
                                                 "l-*-367"
                                                 "l-*-365"
                                                 "l-*-363"
                                                 "l-*-361"
                                                 "l-*-359"
                                                 "l-*-358"
                                                 "l-*-357"
                                                 "l-*-356"
                                                 "l-*-354"
                                                 "l-*-353"
                                                 "l-*-350"
                                                 "l-*-348"
                                                 "l-*-346"
                                                 "l-*-344"
                                                 "l-*-342"
                                                 "l-*-340"
                                                 "l-*-338"
                                                 "l-*-337"
                                                 "l-*-336"
                                                 "l-*-334"
                                                 "l-*-332"
                                                 "l-*-331"
                                                 "l-*-328"
                                                 "l-*-327"
                                                 "l-*-325"
                                                 "l-*-323"
                                                 "l-*-321"
                                                 "l-*-319"
                                                 "l-*-317"
                                                 "l-*-315"
                                                 "l-*-313"
                                                 "l-*-311"
                                                 "l-*-309"
                                                 "l-*-306"
                                                 "l-*-304"
                                                 "l-*-302"
                                                 "l-*-300"
                                                 "l-*-298"
                                                 "l-*-296"
                                                 "l-*-294"
                                                 "l-*-292"
                                                 "l-*-290"
                                                 "l-*-288"
                                                 "l-*-286"
                                                 "l-*-284"
                                                 "l-*-282"
                                                 "l-*-280"
                                                 "l-*-278"
                                                 "l-*-276"
                                                 "l-*-274"
                                                 "l-*-272"
                                                 "l-*-270"
                                                 "l-*-268"
                                                 "l-*-266"
                                                 "l-*-264"
                                                 "l-*-262"
                                                 "l-*-260"
                                                 "l-*-258"
                                                 "l-*-256"
                                                 "l-*-255"
                                                 "l-*-254"
                                                 "l-*-253"
                                                 "l-*-252"
                                                 "l-*-250"
                                                 "l-*-248"
                                                 "l-*-246"
                                                 "l-*-243"
                                                 "l-*-241"
                                                 "l-*-239"
                                                 "l-*-237"
                                                 "l-*-235"
                                                 "l-*-233"
                                                 "l-*-231"
                                                 "l-*-229"
                                                 "l-*-227"
                                                 "l-*-225"
                                                 "l-*-223"
                                                 "l-*-221"
                                                 "l-*-219"
                                                 "l-*-217"
                                                 "l-*-215"
                                                 "l-*-213"
                                                 "l-*-211"
                                                 "l-*-209"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("l-*-47" "l-*-46" "l-*-45")))
                                             (hygiene guile))
                                          '(()))
                                        (id-var-name-4314
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("l-*-3891" "l-*-3892"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-3880"
                                                  "l-*-3881"
                                                  "l-*-3882"
                                                  "l-*-3883"
                                                  "l-*-3884"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("l-*-3698"
                                                 "l-*-3696"
                                                 "l-*-3694"
                                                 "l-*-3692"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  locally-bound-identifiers
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  session-id
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-476"
                                                 "l-*-474"
                                                 "l-*-472"
                                                 "l-*-470"
                                                 "l-*-468"
                                                 "l-*-466"
                                                 "l-*-464"
                                                 "l-*-462"
                                                 "l-*-460"
                                                 "l-*-458"
                                                 "l-*-456"
                                                 "l-*-454"
                                                 "l-*-452"
                                                 "l-*-450"
                                                 "l-*-448"
                                                 "l-*-446"
                                                 "l-*-444"
                                                 "l-*-442"
                                                 "l-*-440"
                                                 "l-*-438"
                                                 "l-*-436"
                                                 "l-*-434"
                                                 "l-*-432"
                                                 "l-*-430"
                                                 "l-*-428"
                                                 "l-*-426"
                                                 "l-*-424"
                                                 "l-*-422"
                                                 "l-*-420"
                                                 "l-*-418"
                                                 "l-*-416"
                                                 "l-*-414"
                                                 "l-*-412"
                                                 "l-*-410"
                                                 "l-*-408"
                                                 "l-*-406"
                                                 "l-*-404"
                                                 "l-*-402"
                                                 "l-*-400"
                                                 "l-*-399"
                                                 "l-*-397"
                                                 "l-*-394"
                                                 "l-*-393"
                                                 "l-*-392"
                                                 "l-*-390"
                                                 "l-*-389"
                                                 "l-*-387"
                                                 "l-*-385"
                                                 "l-*-383"
                                                 "l-*-381"
                                                 "l-*-379"
                                                 "l-*-377"
                                                 "l-*-375"
                                                 "l-*-373"
                                                 "l-*-370"
                                                 "l-*-368"
                                                 "l-*-367"
                                                 "l-*-365"
                                                 "l-*-363"
                                                 "l-*-361"
                                                 "l-*-359"
                                                 "l-*-358"
                                                 "l-*-357"
                                                 "l-*-356"
                                                 "l-*-354"
                                                 "l-*-353"
                                                 "l-*-350"
                                                 "l-*-348"
                                                 "l-*-346"
                                                 "l-*-344"
                                                 "l-*-342"
                                                 "l-*-340"
                                                 "l-*-338"
                                                 "l-*-337"
                                                 "l-*-336"
                                                 "l-*-334"
                                                 "l-*-332"
                                                 "l-*-331"
                                                 "l-*-328"
                                                 "l-*-327"
                                                 "l-*-325"
                                                 "l-*-323"
                                                 "l-*-321"
                                                 "l-*-319"
                                                 "l-*-317"
                                                 "l-*-315"
                                                 "l-*-313"
                                                 "l-*-311"
                                                 "l-*-309"
                                                 "l-*-306"
                                                 "l-*-304"
                                                 "l-*-302"
                                                 "l-*-300"
                                                 "l-*-298"
                                                 "l-*-296"
                                                 "l-*-294"
                                                 "l-*-292"
                                                 "l-*-290"
                                                 "l-*-288"
                                                 "l-*-286"
                                                 "l-*-284"
                                                 "l-*-282"
                                                 "l-*-280"
                                                 "l-*-278"
                                                 "l-*-276"
                                                 "l-*-274"
                                                 "l-*-272"
                                                 "l-*-270"
                                                 "l-*-268"
                                                 "l-*-266"
                                                 "l-*-264"
                                                 "l-*-262"
                                                 "l-*-260"
                                                 "l-*-258"
                                                 "l-*-256"
                                                 "l-*-255"
                                                 "l-*-254"
                                                 "l-*-253"
                                                 "l-*-252"
                                                 "l-*-250"
                                                 "l-*-248"
                                                 "l-*-246"
                                                 "l-*-243"
                                                 "l-*-241"
                                                 "l-*-239"
                                                 "l-*-237"
                                                 "l-*-235"
                                                 "l-*-233"
                                                 "l-*-231"
                                                 "l-*-229"
                                                 "l-*-227"
                                                 "l-*-225"
                                                 "l-*-223"
                                                 "l-*-221"
                                                 "l-*-219"
                                                 "l-*-217"
                                                 "l-*-215"
                                                 "l-*-213"
                                                 "l-*-211"
                                                 "l-*-209"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("l-*-47" "l-*-46" "l-*-45")))
                                             (hygiene guile))
                                          '(())))
                                   #f)
                               (expand-4331 exp-11423 r-11379 '(()) mod-11380)
                               (let ((labels-11626
                                       (list (string-append
                                               "l-"
                                               (session-id-4256)
                                               (symbol->string (gensym "-")))))
                                     (var-11627
                                       (let ((id-11665
                                               (if (if (vector? pat-11422)
                                                     (if (= (vector-length
                                                              pat-11422)
                                                            4)
                                                       (eq? (vector-ref
                                                              pat-11422
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref pat-11422 1)
                                                 pat-11422)))
                                         (gensym
                                           (string-append
                                             (symbol->string id-11665)
                                             "-")))))
                                 (build-application-4262
                                   #f
                                   (build-simple-lambda-4271
                                     #f
                                     (list (syntax->datum pat-11422))
                                     #f
                                     (list var-11627)
                                     '()
                                     (expand-4331
                                       exp-11423
                                       (extend-env-4289
                                         labels-11626
                                         (list (cons 'syntax
                                                     (cons var-11627 0)))
                                         r-11379)
                                       (make-binding-wrap-4309
                                         (list pat-11422)
                                         labels-11626
                                         '(()))
                                       mod-11380))
                                   (list x-11376))))
                             (gen-clause-10976
                               x-11376
                               keys-11377
                               (cdr clauses-11378)
                               r-11379
                               pat-11422
                               #t
                               exp-11423
                               mod-11380)))
                         tmp-11420)
                       (let ((tmp-11935
                               ($sc-dispatch tmp-11419 '(any any any))))
                         (if tmp-11935
                           (@apply
                             (lambda (pat-11937 fender-11938 exp-11939)
                               (gen-clause-10976
                                 x-11376
                                 keys-11377
                                 (cdr clauses-11378)
                                 r-11379
                                 pat-11937
                                 fender-11938
                                 exp-11939
                                 mod-11380))
                             tmp-11935)
                           (syntax-violation
                             'syntax-case
                             "invalid clause"
                             (car clauses-11378)))))))))))
          (lambda (e-10978 r-10979 w-10980 s-10981 mod-10982)
            (let ((e-10983
                    (wrap-4324
                      (begin
                        (if (if s-10981
                              (supports-source-properties? e-10978)
                              #f)
                          (set-source-properties! e-10978 s-10981))
                        e-10978)
                      w-10980
                      mod-10982)))
              (let ((tmp-10985
                      ($sc-dispatch
                        e-10983
                        '(_ any each-any . each-any))))
                (if tmp-10985
                  (@apply
                    (lambda (val-11010 key-11011 m-11012)
                      (if (and-map
                            (lambda (x-11013)
                              (if (if (symbol? x-11013)
                                    #t
                                    (if (if (vector? x-11013)
                                          (if (= (vector-length x-11013) 4)
                                            (eq? (vector-ref x-11013 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref x-11013 1))
                                      #f))
                                (not (if (if (if (vector? x-11013)
                                               (if (= (vector-length x-11013)
                                                      4)
                                                 (eq? (vector-ref x-11013 0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol? (vector-ref x-11013 1))
                                           #f)
                                       (if (eq? (if (if (vector? x-11013)
                                                      (if (= (vector-length
                                                               x-11013)
                                                             4)
                                                        (eq? (vector-ref
                                                               x-11013
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref x-11013 1)
                                                  x-11013)
                                                (if (if (= (vector-length
                                                             '#(syntax-object
                                                                ...
                                                                ((top)
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-2267"))
                                                                 #(ribcage
                                                                   (lambda-var-list
                                                                     gen-var
                                                                     strip
                                                                     expand-lambda-case
                                                                     lambda*-formals
                                                                     expand-simple-lambda
                                                                     lambda-formals
                                                                     ellipsis?
                                                                     expand-void
                                                                     eval-local-transformer
                                                                     expand-local-syntax
                                                                     expand-body
                                                                     expand-macro
                                                                     expand-application
                                                                     expand-expr
                                                                     expand
                                                                     syntax-type
                                                                     parse-when-list
                                                                     expand-install-global
                                                                     expand-top-sequence
                                                                     expand-sequence
                                                                     source-wrap
                                                                     wrap
                                                                     bound-id-member?
                                                                     distinct-bound-ids?
                                                                     valid-bound-ids?
                                                                     bound-id=?
                                                                     free-id=?
                                                                     with-transformer-environment
                                                                     transformer-environment
                                                                     resolve-identifier
                                                                     locally-bound-identifiers
                                                                     id-var-name
                                                                     same-marks?
                                                                     join-marks
                                                                     join-wraps
                                                                     smart-append
                                                                     make-binding-wrap
                                                                     extend-ribcage!
                                                                     make-empty-ribcage
                                                                     new-mark
                                                                     anti-mark
                                                                     the-anti-mark
                                                                     top-marked?
                                                                     top-wrap
                                                                     empty-wrap
                                                                     set-ribcage-labels!
                                                                     set-ribcage-marks!
                                                                     set-ribcage-symnames!
                                                                     ribcage-labels
                                                                     ribcage-marks
                                                                     ribcage-symnames
                                                                     ribcage?
                                                                     make-ribcage
                                                                     gen-labels
                                                                     gen-label
                                                                     make-rename
                                                                     rename-marks
                                                                     rename-new
                                                                     rename-old
                                                                     subst-rename?
                                                                     wrap-subst
                                                                     wrap-marks
                                                                     make-wrap
                                                                     id-sym-name&marks
                                                                     id-sym-name
                                                                     id?
                                                                     nonsymbol-id?
                                                                     global-extend
                                                                     lookup
                                                                     macros-only-env
                                                                     extend-var-env
                                                                     extend-env
                                                                     null-env
                                                                     binding-value
                                                                     binding-type
                                                                     make-binding
                                                                     arg-check
                                                                     source-annotation
                                                                     no-source
                                                                     set-syntax-object-module!
                                                                     set-syntax-object-wrap!
                                                                     set-syntax-object-expression!
                                                                     syntax-object-module
                                                                     syntax-object-wrap
                                                                     syntax-object-expression
                                                                     syntax-object?
                                                                     make-syntax-object
                                                                     build-lexical-var
                                                                     build-letrec
                                                                     build-named-let
                                                                     build-let
                                                                     build-sequence
                                                                     build-data
                                                                     build-primref
                                                                     build-lambda-case
                                                                     build-case-lambda
                                                                     build-simple-lambda
                                                                     build-global-definition
                                                                     build-global-assignment
                                                                     build-global-reference
                                                                     analyze-variable
                                                                     build-lexical-assignment
                                                                     build-lexical-reference
                                                                     build-dynlet
                                                                     build-conditional
                                                                     build-application
                                                                     build-void
                                                                     maybe-name-value!
                                                                     decorate-source
                                                                     get-global-definition-hook
                                                                     put-global-definition-hook
                                                                     session-id
                                                                     local-eval-hook
                                                                     top-level-eval-hook
                                                                     fx<
                                                                     fx=
                                                                     fx-
                                                                     fx+
                                                                     set-lambda-meta!
                                                                     lambda-meta
                                                                     lambda?
                                                                     make-dynlet
                                                                     make-letrec
                                                                     make-let
                                                                     make-lambda-case
                                                                     make-lambda
                                                                     make-sequence
                                                                     make-application
                                                                     make-conditional
                                                                     make-toplevel-define
                                                                     make-toplevel-set
                                                                     make-toplevel-ref
                                                                     make-module-set
                                                                     make-module-ref
                                                                     make-lexical-set
                                                                     make-lexical-ref
                                                                     make-primitive-ref
                                                                     make-const
                                                                     make-void)
                                                                   ((top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top))
                                                                   ("l-*-476"
                                                                    "l-*-474"
                                                                    "l-*-472"
                                                                    "l-*-470"
                                                                    "l-*-468"
                                                                    "l-*-466"
                                                                    "l-*-464"
                                                                    "l-*-462"
                                                                    "l-*-460"
                                                                    "l-*-458"
                                                                    "l-*-456"
                                                                    "l-*-454"
                                                                    "l-*-452"
                                                                    "l-*-450"
                                                                    "l-*-448"
                                                                    "l-*-446"
                                                                    "l-*-444"
                                                                    "l-*-442"
                                                                    "l-*-440"
                                                                    "l-*-438"
                                                                    "l-*-436"
                                                                    "l-*-434"
                                                                    "l-*-432"
                                                                    "l-*-430"
                                                                    "l-*-428"
                                                                    "l-*-426"
                                                                    "l-*-424"
                                                                    "l-*-422"
                                                                    "l-*-420"
                                                                    "l-*-418"
                                                                    "l-*-416"
                                                                    "l-*-414"
                                                                    "l-*-412"
                                                                    "l-*-410"
                                                                    "l-*-408"
                                                                    "l-*-406"
                                                                    "l-*-404"
                                                                    "l-*-402"
                                                                    "l-*-400"
                                                                    "l-*-399"
                                                                    "l-*-397"
                                                                    "l-*-394"
                                                                    "l-*-393"
                                                                    "l-*-392"
                                                                    "l-*-390"
                                                                    "l-*-389"
                                                                    "l-*-387"
                                                                    "l-*-385"
                                                                    "l-*-383"
                                                                    "l-*-381"
                                                                    "l-*-379"
                                                                    "l-*-377"
                                                                    "l-*-375"
                                                                    "l-*-373"
                                                                    "l-*-370"
                                                                    "l-*-368"
                                                                    "l-*-367"
                                                                    "l-*-365"
                                                                    "l-*-363"
                                                                    "l-*-361"
                                                                    "l-*-359"
                                                                    "l-*-358"
                                                                    "l-*-357"
                                                                    "l-*-356"
                                                                    "l-*-354"
                                                                    "l-*-353"
                                                                    "l-*-350"
                                                                    "l-*-348"
                                                                    "l-*-346"
                                                                    "l-*-344"
                                                                    "l-*-342"
                                                                    "l-*-340"
                                                                    "l-*-338"
                                                                    "l-*-337"
                                                                    "l-*-336"
                                                                    "l-*-334"
                                                                    "l-*-332"
                                                                    "l-*-331"
                                                                    "l-*-328"
                                                                    "l-*-327"
                                                                    "l-*-325"
                                                                    "l-*-323"
                                                                    "l-*-321"
                                                                    "l-*-319"
                                                                    "l-*-317"
                                                                    "l-*-315"
                                                                    "l-*-313"
                                                                    "l-*-311"
                                                                    "l-*-309"
                                                                    "l-*-306"
                                                                    "l-*-304"
                                                                    "l-*-302"
                                                                    "l-*-300"
                                                                    "l-*-298"
                                                                    "l-*-296"
                                                                    "l-*-294"
                                                                    "l-*-292"
                                                                    "l-*-290"
                                                                    "l-*-288"
                                                                    "l-*-286"
                                                                    "l-*-284"
                                                                    "l-*-282"
                                                                    "l-*-280"
                                                                    "l-*-278"
                                                                    "l-*-276"
                                                                    "l-*-274"
                                                                    "l-*-272"
                                                                    "l-*-270"
                                                                    "l-*-268"
                                                                    "l-*-266"
                                                                    "l-*-264"
                                                                    "l-*-262"
                                                                    "l-*-260"
                                                                    "l-*-258"
                                                                    "l-*-256"
                                                                    "l-*-255"
                                                                    "l-*-254"
                                                                    "l-*-253"
                                                                    "l-*-252"
                                                                    "l-*-250"
                                                                    "l-*-248"
                                                                    "l-*-246"
                                                                    "l-*-243"
                                                                    "l-*-241"
                                                                    "l-*-239"
                                                                    "l-*-237"
                                                                    "l-*-235"
                                                                    "l-*-233"
                                                                    "l-*-231"
                                                                    "l-*-229"
                                                                    "l-*-227"
                                                                    "l-*-225"
                                                                    "l-*-223"
                                                                    "l-*-221"
                                                                    "l-*-219"
                                                                    "l-*-217"
                                                                    "l-*-215"
                                                                    "l-*-213"
                                                                    "l-*-211"
                                                                    "l-*-209"))
                                                                 #(ribcage
                                                                   (define-structure
                                                                     define-expansion-accessors
                                                                     define-expansion-constructors)
                                                                   ((top)
                                                                    (top)
                                                                    (top))
                                                                   ("l-*-47"
                                                                    "l-*-46"
                                                                    "l-*-45")))
                                                                (hygiene
                                                                  guile)))
                                                           4)
                                                      #t
                                                      #f)
                                                  '...
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("l-*-2267"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          with-transformer-environment
                                                          transformer-environment
                                                          resolve-identifier
                                                          locally-bound-identifiers
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          session-id
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("l-*-476"
                                                         "l-*-474"
                                                         "l-*-472"
                                                         "l-*-470"
                                                         "l-*-468"
                                                         "l-*-466"
                                                         "l-*-464"
                                                         "l-*-462"
                                                         "l-*-460"
                                                         "l-*-458"
                                                         "l-*-456"
                                                         "l-*-454"
                                                         "l-*-452"
                                                         "l-*-450"
                                                         "l-*-448"
                                                         "l-*-446"
                                                         "l-*-444"
                                                         "l-*-442"
                                                         "l-*-440"
                                                         "l-*-438"
                                                         "l-*-436"
                                                         "l-*-434"
                                                         "l-*-432"
                                                         "l-*-430"
                                                         "l-*-428"
                                                         "l-*-426"
                                                         "l-*-424"
                                                         "l-*-422"
                                                         "l-*-420"
                                                         "l-*-418"
                                                         "l-*-416"
                                                         "l-*-414"
                                                         "l-*-412"
                                                         "l-*-410"
                                                         "l-*-408"
                                                         "l-*-406"
                                                         "l-*-404"
                                                         "l-*-402"
                                                         "l-*-400"
                                                         "l-*-399"
                                                         "l-*-397"
                                                         "l-*-394"
                                                         "l-*-393"
                                                         "l-*-392"
                                                         "l-*-390"
                                                         "l-*-389"
                                                         "l-*-387"
                                                         "l-*-385"
                                                         "l-*-383"
                                                         "l-*-381"
                                                         "l-*-379"
                                                         "l-*-377"
                                                         "l-*-375"
                                                         "l-*-373"
                                                         "l-*-370"
                                                         "l-*-368"
                                                         "l-*-367"
                                                         "l-*-365"
                                                         "l-*-363"
                                                         "l-*-361"
                                                         "l-*-359"
                                                         "l-*-358"
                                                         "l-*-357"
                                                         "l-*-356"
                                                         "l-*-354"
                                                         "l-*-353"
                                                         "l-*-350"
                                                         "l-*-348"
                                                         "l-*-346"
                                                         "l-*-344"
                                                         "l-*-342"
                                                         "l-*-340"
                                                         "l-*-338"
                                                         "l-*-337"
                                                         "l-*-336"
                                                         "l-*-334"
                                                         "l-*-332"
                                                         "l-*-331"
                                                         "l-*-328"
                                                         "l-*-327"
                                                         "l-*-325"
                                                         "l-*-323"
                                                         "l-*-321"
                                                         "l-*-319"
                                                         "l-*-317"
                                                         "l-*-315"
                                                         "l-*-313"
                                                         "l-*-311"
                                                         "l-*-309"
                                                         "l-*-306"
                                                         "l-*-304"
                                                         "l-*-302"
                                                         "l-*-300"
                                                         "l-*-298"
                                                         "l-*-296"
                                                         "l-*-294"
                                                         "l-*-292"
                                                         "l-*-290"
                                                         "l-*-288"
                                                         "l-*-286"
                                                         "l-*-284"
                                                         "l-*-282"
                                                         "l-*-280"
                                                         "l-*-278"
                                                         "l-*-276"
                                                         "l-*-274"
                                                         "l-*-272"
                                                         "l-*-270"
                                                         "l-*-268"
                                                         "l-*-266"
                                                         "l-*-264"
                                                         "l-*-262"
                                                         "l-*-260"
                                                         "l-*-258"
                                                         "l-*-256"
                                                         "l-*-255"
                                                         "l-*-254"
                                                         "l-*-253"
                                                         "l-*-252"
                                                         "l-*-250"
                                                         "l-*-248"
                                                         "l-*-246"
                                                         "l-*-243"
                                                         "l-*-241"
                                                         "l-*-239"
                                                         "l-*-237"
                                                         "l-*-235"
                                                         "l-*-233"
                                                         "l-*-231"
                                                         "l-*-229"
                                                         "l-*-227"
                                                         "l-*-225"
                                                         "l-*-223"
                                                         "l-*-221"
                                                         "l-*-219"
                                                         "l-*-217"
                                                         "l-*-215"
                                                         "l-*-213"
                                                         "l-*-211"
                                                         "l-*-209"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("l-*-47"
                                                         "l-*-46"
                                                         "l-*-45")))
                                                     (hygiene guile))))
                                         (eq? (id-var-name-4314 x-11013 '(()))
                                              (id-var-name-4314
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-2267"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        expand-lambda-case
                                                        lambda*-formals
                                                        expand-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        expand-void
                                                        eval-local-transformer
                                                        expand-local-syntax
                                                        expand-body
                                                        expand-macro
                                                        expand-application
                                                        expand-expr
                                                        expand
                                                        syntax-type
                                                        parse-when-list
                                                        expand-install-global
                                                        expand-top-sequence
                                                        expand-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        with-transformer-environment
                                                        transformer-environment
                                                        resolve-identifier
                                                        locally-bound-identifiers
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        session-id
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("l-*-476"
                                                       "l-*-474"
                                                       "l-*-472"
                                                       "l-*-470"
                                                       "l-*-468"
                                                       "l-*-466"
                                                       "l-*-464"
                                                       "l-*-462"
                                                       "l-*-460"
                                                       "l-*-458"
                                                       "l-*-456"
                                                       "l-*-454"
                                                       "l-*-452"
                                                       "l-*-450"
                                                       "l-*-448"
                                                       "l-*-446"
                                                       "l-*-444"
                                                       "l-*-442"
                                                       "l-*-440"
                                                       "l-*-438"
                                                       "l-*-436"
                                                       "l-*-434"
                                                       "l-*-432"
                                                       "l-*-430"
                                                       "l-*-428"
                                                       "l-*-426"
                                                       "l-*-424"
                                                       "l-*-422"
                                                       "l-*-420"
                                                       "l-*-418"
                                                       "l-*-416"
                                                       "l-*-414"
                                                       "l-*-412"
                                                       "l-*-410"
                                                       "l-*-408"
                                                       "l-*-406"
                                                       "l-*-404"
                                                       "l-*-402"
                                                       "l-*-400"
                                                       "l-*-399"
                                                       "l-*-397"
                                                       "l-*-394"
                                                       "l-*-393"
                                                       "l-*-392"
                                                       "l-*-390"
                                                       "l-*-389"
                                                       "l-*-387"
                                                       "l-*-385"
                                                       "l-*-383"
                                                       "l-*-381"
                                                       "l-*-379"
                                                       "l-*-377"
                                                       "l-*-375"
                                                       "l-*-373"
                                                       "l-*-370"
                                                       "l-*-368"
                                                       "l-*-367"
                                                       "l-*-365"
                                                       "l-*-363"
                                                       "l-*-361"
                                                       "l-*-359"
                                                       "l-*-358"
                                                       "l-*-357"
                                                       "l-*-356"
                                                       "l-*-354"
                                                       "l-*-353"
                                                       "l-*-350"
                                                       "l-*-348"
                                                       "l-*-346"
                                                       "l-*-344"
                                                       "l-*-342"
                                                       "l-*-340"
                                                       "l-*-338"
                                                       "l-*-337"
                                                       "l-*-336"
                                                       "l-*-334"
                                                       "l-*-332"
                                                       "l-*-331"
                                                       "l-*-328"
                                                       "l-*-327"
                                                       "l-*-325"
                                                       "l-*-323"
                                                       "l-*-321"
                                                       "l-*-319"
                                                       "l-*-317"
                                                       "l-*-315"
                                                       "l-*-313"
                                                       "l-*-311"
                                                       "l-*-309"
                                                       "l-*-306"
                                                       "l-*-304"
                                                       "l-*-302"
                                                       "l-*-300"
                                                       "l-*-298"
                                                       "l-*-296"
                                                       "l-*-294"
                                                       "l-*-292"
                                                       "l-*-290"
                                                       "l-*-288"
                                                       "l-*-286"
                                                       "l-*-284"
                                                       "l-*-282"
                                                       "l-*-280"
                                                       "l-*-278"
                                                       "l-*-276"
                                                       "l-*-274"
                                                       "l-*-272"
                                                       "l-*-270"
                                                       "l-*-268"
                                                       "l-*-266"
                                                       "l-*-264"
                                                       "l-*-262"
                                                       "l-*-260"
                                                       "l-*-258"
                                                       "l-*-256"
                                                       "l-*-255"
                                                       "l-*-254"
                                                       "l-*-253"
                                                       "l-*-252"
                                                       "l-*-250"
                                                       "l-*-248"
                                                       "l-*-246"
                                                       "l-*-243"
                                                       "l-*-241"
                                                       "l-*-239"
                                                       "l-*-237"
                                                       "l-*-235"
                                                       "l-*-233"
                                                       "l-*-231"
                                                       "l-*-229"
                                                       "l-*-227"
                                                       "l-*-225"
                                                       "l-*-223"
                                                       "l-*-221"
                                                       "l-*-219"
                                                       "l-*-217"
                                                       "l-*-215"
                                                       "l-*-213"
                                                       "l-*-211"
                                                       "l-*-209"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("l-*-47"
                                                       "l-*-46"
                                                       "l-*-45")))
                                                   (hygiene guile))
                                                '(())))
                                         #f)
                                       #f))
                                #f))
                            key-11011)
                        (let ((x-11139
                                (gensym
                                  (string-append (symbol->string 'tmp) "-"))))
                          (build-application-4262
                            s-10981
                            (let ((req-11269 (list 'tmp))
                                  (vars-11271 (list x-11139))
                                  (exp-11273
                                    (gen-syntax-case-10977
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        x-11139)
                                      key-11011
                                      m-11012
                                      r-10979
                                      mod-10982)))
                              (let ((body-11278
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 14)
                                        #f
                                        req-11269
                                        #f
                                        #f
                                        #f
                                        '()
                                        vars-11271
                                        exp-11273
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 13)
                                  #f
                                  '()
                                  body-11278)))
                            (list (expand-4331
                                    val-11010
                                    r-10979
                                    '(())
                                    mod-10982))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          e-10983)))
                    tmp-10985)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    e-10983)))))))
      (set! macroexpand
        (lambda*
          (x-13696
            #:optional
            (m-13697 'e)
            (esew-13698 '(eval)))
          (expand-top-sequence-4327
            (list x-13696)
            '()
            '((top))
            #f
            m-13697
            esew-13698
            (cons 'hygiene (module-name (current-module))))))
      (set! identifier?
        (lambda (x-13701)
          (if (if (vector? x-13701)
                (if (= (vector-length x-13701) 4)
                  (eq? (vector-ref x-13701 0) 'syntax-object)
                  #f)
                #f)
            (symbol? (vector-ref x-13701 1))
            #f)))
      (set! datum->syntax
        (lambda (id-13726 datum-13727)
          (let ((wrap-13732 (vector-ref id-13726 2))
                (module-13733 (vector-ref id-13726 3)))
            (vector
              'syntax-object
              datum-13727
              wrap-13732
              module-13733))))
      (set! syntax->datum
        (lambda (x-13740) (strip-4344 x-13740 '(()))))
      (set! syntax-source
        (lambda (x-13743)
          (source-annotation-4288 x-13743)))
      (set! generate-temporaries
        (lambda (ls-13896)
          (begin
            (if (not (list? ls-13896))
              (syntax-violation
                'generate-temporaries
                "invalid argument"
                ls-13896))
            (let ((mod-13904
                    (cons 'hygiene (module-name (current-module)))))
              (map (lambda (x-13905)
                     (wrap-4324 (gensym "t-") '((top)) mod-13904))
                   ls-13896)))))
      (set! free-identifier=?
        (lambda (x-13909 y-13910)
          (begin
            (if (not (if (if (vector? x-13909)
                           (if (= (vector-length x-13909) 4)
                             (eq? (vector-ref x-13909 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref x-13909 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                x-13909))
            (if (not (if (if (vector? y-13910)
                           (if (= (vector-length y-13910) 4)
                             (eq? (vector-ref y-13910 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref y-13910 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                y-13910))
            (if (eq? (if (if (vector? x-13909)
                           (if (= (vector-length x-13909) 4)
                             (eq? (vector-ref x-13909 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref x-13909 1)
                       x-13909)
                     (if (if (vector? y-13910)
                           (if (= (vector-length y-13910) 4)
                             (eq? (vector-ref y-13910 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref y-13910 1)
                       y-13910))
              (eq? (id-var-name-4314 x-13909 '(()))
                   (id-var-name-4314 y-13910 '(())))
              #f))))
      (set! bound-identifier=?
        (lambda (x-14060 y-14061)
          (begin
            (if (not (if (if (vector? x-14060)
                           (if (= (vector-length x-14060) 4)
                             (eq? (vector-ref x-14060 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref x-14060 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                x-14060))
            (if (not (if (if (vector? y-14061)
                           (if (= (vector-length y-14061) 4)
                             (eq? (vector-ref y-14061 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref y-14061 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                y-14061))
            (if (if (if (vector? x-14060)
                      (if (= (vector-length x-14060) 4)
                        (eq? (vector-ref x-14060 0) 'syntax-object)
                        #f)
                      #f)
                  (if (vector? y-14061)
                    (if (= (vector-length y-14061) 4)
                      (eq? (vector-ref y-14061 0) 'syntax-object)
                      #f)
                    #f)
                  #f)
              (if (eq? (vector-ref x-14060 1)
                       (vector-ref y-14061 1))
                (same-marks?-4313
                  (car (vector-ref x-14060 2))
                  (car (vector-ref y-14061 2)))
                #f)
              (eq? x-14060 y-14061)))))
      (set! syntax-violation
        (lambda*
          (who-14194
            message-14195
            form-14196
            #:optional
            (subform-14197 #f))
          (begin
            (if (not (if (not who-14194)
                       (not who-14194)
                       (let ((t-14215 (string? who-14194)))
                         (if t-14215 t-14215 (symbol? who-14194)))))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                who-14194))
            (if (not (string? message-14195))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                message-14195))
            (throw 'syntax-error
                   who-14194
                   message-14195
                   (let ((t-14246 (source-annotation-4288 subform-14197)))
                     (if t-14246
                       t-14246
                       (source-annotation-4288 form-14196)))
                   (strip-4344 form-14196 '(()))
                   (if subform-14197
                     (strip-4344 subform-14197 '(()))
                     #f)))))
      (letrec*
        ((syntax-local-binding-14638
           (lambda (id-14771)
             (begin
               (if (not (if (if (vector? id-14771)
                              (if (= (vector-length id-14771) 4)
                                (eq? (vector-ref id-14771 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-14771 1))
                          #f))
                 (syntax-violation
                   'syntax-local-binding
                   "invalid argument"
                   id-14771))
               ((fluid-ref transformer-environment-4317)
                (lambda (e-14811
                         r-14812
                         w-14813
                         s-14814
                         rib-14815
                         mod-14816)
                  (call-with-values
                    (lambda ()
                      (let ((id-14819 (vector-ref id-14771 1))
                            (w-14820
                              (let ((w-14831 (vector-ref id-14771 2)))
                                (let ((ms-14832 (car w-14831))
                                      (s-14833 (cdr w-14831)))
                                  (if (if (pair? ms-14832)
                                        (eq? (car ms-14832) #f)
                                        #f)
                                    (cons (cdr ms-14832)
                                          (if rib-14815
                                            (cons rib-14815 (cdr s-14833))
                                            (cdr s-14833)))
                                    (cons ms-14832
                                          (if rib-14815
                                            (cons rib-14815 s-14833)
                                            s-14833))))))
                            (mod-14822 (vector-ref id-14771 3)))
                        (let ((n-14825 (id-var-name-4314 id-14819 w-14820)))
                          (if (symbol? n-14825)
                            (let ((mod-14839
                                    (if (if (vector? id-14819)
                                          (if (= (vector-length id-14819) 4)
                                            (eq? (vector-ref id-14819 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref id-14819 3)
                                      mod-14822)))
                              (let ((b-14840
                                      (let ((t-14841
                                              (get-global-definition-hook-4258
                                                n-14825
                                                mod-14839)))
                                        (if t-14841 t-14841 '(global)))))
                                (if (eq? (car b-14840) 'global)
                                  (values 'global n-14825 mod-14839)
                                  (values
                                    (car b-14840)
                                    (cdr b-14840)
                                    mod-14839))))
                            (if (string? n-14825)
                              (let ((mod-14867
                                      (if (if (vector? id-14819)
                                            (if (= (vector-length id-14819) 4)
                                              (eq? (vector-ref id-14819 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (vector-ref id-14819 3)
                                        mod-14822)))
                                (let ((b-14868
                                        (let ((t-14869
                                                (assq-ref r-14812 n-14825)))
                                          (if t-14869
                                            t-14869
                                            '(displaced-lexical)))))
                                  (values
                                    (car b-14868)
                                    (cdr b-14868)
                                    mod-14867)))
                              (error "unexpected id-var-name"
                                     id-14819
                                     w-14820
                                     n-14825))))))
                    (lambda (type-14882 value-14883 mod-14884)
                      (if (eqv? type-14882 'lexical)
                        (values 'lexical value-14883)
                        (if (eqv? type-14882 'macro)
                          (values 'macro value-14883)
                          (if (eqv? type-14882 'syntax)
                            (values 'pattern-variable value-14883)
                            (if (eqv? type-14882 'displaced-lexical)
                              (values 'displaced-lexical #f)
                              (if (eqv? type-14882 'global)
                                (values
                                  'global
                                  (cons value-14883 (cdr mod-14884)))
                                (values 'other #f)))))))))))))
         (syntax-locally-bound-identifiers-14639
           (lambda (id-14906)
             (begin
               (if (not (if (if (vector? id-14906)
                              (if (= (vector-length id-14906) 4)
                                (eq? (vector-ref id-14906 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-14906 1))
                          #f))
                 (syntax-violation
                   'syntax-locally-bound-identifiers
                   "invalid argument"
                   id-14906))
               (locally-bound-identifiers-4315
                 (vector-ref id-14906 2)
                 (vector-ref id-14906 3))))))
        (begin
          (define!
            'syntax-module
            (lambda (id-14641)
              (begin
                (if (not (if (if (vector? id-14641)
                               (if (= (vector-length id-14641) 4)
                                 (eq? (vector-ref id-14641 0) 'syntax-object)
                                 #f)
                               #f)
                           (symbol? (vector-ref id-14641 1))
                           #f))
                  (syntax-violation
                    'syntax-module
                    "invalid argument"
                    id-14641))
                (cdr (vector-ref id-14641 3)))))
          (define!
            'syntax-local-binding
            syntax-local-binding-14638)
          (define!
            'syntax-locally-bound-identifiers
            syntax-locally-bound-identifiers-14639)))
      (letrec*
        ((match-each-15013
           (lambda (e-15600 p-15601 w-15602 mod-15603)
             (if (pair? e-15600)
               (let ((first-15604
                       (match-15019
                         (car e-15600)
                         p-15601
                         w-15602
                         '()
                         mod-15603)))
                 (if first-15604
                   (let ((rest-15607
                           (match-each-15013
                             (cdr e-15600)
                             p-15601
                             w-15602
                             mod-15603)))
                     (if rest-15607 (cons first-15604 rest-15607) #f))
                   #f))
               (if (null? e-15600)
                 '()
                 (if (if (vector? e-15600)
                       (if (= (vector-length e-15600) 4)
                         (eq? (vector-ref e-15600 0) 'syntax-object)
                         #f)
                       #f)
                   (match-each-15013
                     (vector-ref e-15600 1)
                     p-15601
                     (join-wraps-4311 w-15602 (vector-ref e-15600 2))
                     (vector-ref e-15600 3))
                   #f)))))
         (match-each-any-15015
           (lambda (e-15635 w-15636 mod-15637)
             (if (pair? e-15635)
               (let ((l-15638
                       (match-each-any-15015
                         (cdr e-15635)
                         w-15636
                         mod-15637)))
                 (if l-15638
                   (cons (wrap-4324 (car e-15635) w-15636 mod-15637)
                         l-15638)
                   #f))
               (if (null? e-15635)
                 '()
                 (if (if (vector? e-15635)
                       (if (= (vector-length e-15635) 4)
                         (eq? (vector-ref e-15635 0) 'syntax-object)
                         #f)
                       #f)
                   (match-each-any-15015
                     (vector-ref e-15635 1)
                     (join-wraps-4311 w-15636 (vector-ref e-15635 2))
                     mod-15637)
                   #f)))))
         (match-empty-15016
           (lambda (p-15662 r-15663)
             (if (null? p-15662)
               r-15663
               (if (eq? p-15662 '_)
                 r-15663
                 (if (eq? p-15662 'any)
                   (cons '() r-15663)
                   (if (pair? p-15662)
                     (match-empty-15016
                       (car p-15662)
                       (match-empty-15016 (cdr p-15662) r-15663))
                     (if (eq? p-15662 'each-any)
                       (cons '() r-15663)
                       (let ((key-15664 (vector-ref p-15662 0)))
                         (if (eqv? key-15664 'each)
                           (match-empty-15016
                             (vector-ref p-15662 1)
                             r-15663)
                           (if (eqv? key-15664 'each+)
                             (match-empty-15016
                               (vector-ref p-15662 1)
                               (match-empty-15016
                                 (reverse (vector-ref p-15662 2))
                                 (match-empty-15016
                                   (vector-ref p-15662 3)
                                   r-15663)))
                             (if (if (eqv? key-15664 'free-id)
                                   #t
                                   (eqv? key-15664 'atom))
                               r-15663
                               (if (eqv? key-15664 'vector)
                                 (match-empty-15016
                                   (vector-ref p-15662 1)
                                   r-15663)))))))))))))
         (combine-15017
           (lambda (r*-15683 r-15684)
             (if (null? (car r*-15683))
               r-15684
               (cons (map car r*-15683)
                     (combine-15017 (map cdr r*-15683) r-15684)))))
         (match*-15018
           (lambda (e-15048 p-15049 w-15050 r-15051 mod-15052)
             (if (null? p-15049)
               (if (null? e-15048) r-15051 #f)
               (if (pair? p-15049)
                 (if (pair? e-15048)
                   (match-15019
                     (car e-15048)
                     (car p-15049)
                     w-15050
                     (match-15019
                       (cdr e-15048)
                       (cdr p-15049)
                       w-15050
                       r-15051
                       mod-15052)
                     mod-15052)
                   #f)
                 (if (eq? p-15049 'each-any)
                   (let ((l-15057
                           (match-each-any-15015 e-15048 w-15050 mod-15052)))
                     (if l-15057 (cons l-15057 r-15051) #f))
                   (let ((key-15062 (vector-ref p-15049 0)))
                     (if (eqv? key-15062 'each)
                       (if (null? e-15048)
                         (match-empty-15016
                           (vector-ref p-15049 1)
                           r-15051)
                         (let ((l-15069
                                 (match-each-15013
                                   e-15048
                                   (vector-ref p-15049 1)
                                   w-15050
                                   mod-15052)))
                           (if l-15069
                             (letrec*
                               ((collect-15072
                                  (lambda (l-15123)
                                    (if (null? (car l-15123))
                                      r-15051
                                      (cons (map car l-15123)
                                            (collect-15072
                                              (map cdr l-15123)))))))
                               (collect-15072 l-15069))
                             #f)))
                       (if (eqv? key-15062 'each+)
                         (call-with-values
                           (lambda ()
                             (let ((x-pat-15132 (vector-ref p-15049 1))
                                   (y-pat-15133 (vector-ref p-15049 2))
                                   (z-pat-15134 (vector-ref p-15049 3)))
                               (letrec*
                                 ((f-15138
                                    (lambda (e-15140 w-15141)
                                      (if (pair? e-15140)
                                        (call-with-values
                                          (lambda ()
                                            (f-15138 (cdr e-15140) w-15141))
                                          (lambda (xr*-15142
                                                   y-pat-15143
                                                   r-15144)
                                            (if r-15144
                                              (if (null? y-pat-15143)
                                                (let ((xr-15145
                                                        (match-15019
                                                          (car e-15140)
                                                          x-pat-15132
                                                          w-15141
                                                          '()
                                                          mod-15052)))
                                                  (if xr-15145
                                                    (values
                                                      (cons xr-15145 xr*-15142)
                                                      y-pat-15143
                                                      r-15144)
                                                    (values #f #f #f)))
                                                (values
                                                  '()
                                                  (cdr y-pat-15143)
                                                  (match-15019
                                                    (car e-15140)
                                                    (car y-pat-15143)
                                                    w-15141
                                                    r-15144
                                                    mod-15052)))
                                              (values #f #f #f))))
                                        (if (if (vector? e-15140)
                                              (if (= (vector-length e-15140) 4)
                                                (eq? (vector-ref e-15140 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (f-15138
                                            (vector-ref e-15140 1)
                                            (join-wraps-4311 w-15141 e-15140))
                                          (values
                                            '()
                                            y-pat-15133
                                            (match-15019
                                              e-15140
                                              z-pat-15134
                                              w-15141
                                              r-15051
                                              mod-15052)))))))
                                 (f-15138 e-15048 w-15050))))
                           (lambda (xr*-15171 y-pat-15172 r-15173)
                             (if r-15173
                               (if (null? y-pat-15172)
                                 (if (null? xr*-15171)
                                   (match-empty-15016
                                     (vector-ref p-15049 1)
                                     r-15173)
                                   (combine-15017 xr*-15171 r-15173))
                                 #f)
                               #f)))
                         (if (eqv? key-15062 'free-id)
                           (if (if (symbol? e-15048)
                                 #t
                                 (if (if (vector? e-15048)
                                       (if (= (vector-length e-15048) 4)
                                         (eq? (vector-ref e-15048 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (symbol? (vector-ref e-15048 1))
                                   #f))
                             (if (let ((i-15504
                                         (wrap-4324 e-15048 w-15050 mod-15052))
                                       (j-15505 (vector-ref p-15049 1)))
                                   (if (eq? (if (if (vector? i-15504)
                                                  (if (= (vector-length
                                                           i-15504)
                                                         4)
                                                    (eq? (vector-ref i-15504 0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref i-15504 1)
                                              i-15504)
                                            (if (if (vector? j-15505)
                                                  (if (= (vector-length
                                                           j-15505)
                                                         4)
                                                    (eq? (vector-ref j-15505 0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref j-15505 1)
                                              j-15505))
                                     (eq? (id-var-name-4314 i-15504 '(()))
                                          (id-var-name-4314 j-15505 '(())))
                                     #f))
                               r-15051
                               #f)
                             #f)
                           (if (eqv? key-15062 'atom)
                             (if (equal?
                                   (vector-ref p-15049 1)
                                   (strip-4344 e-15048 w-15050))
                               r-15051
                               #f)
                             (if (eqv? key-15062 'vector)
                               (if (vector? e-15048)
                                 (match-15019
                                   (vector->list e-15048)
                                   (vector-ref p-15049 1)
                                   w-15050
                                   r-15051
                                   mod-15052)
                                 #f))))))))))))
         (match-15019
           (lambda (e-15565 p-15566 w-15567 r-15568 mod-15569)
             (if (not r-15568)
               #f
               (if (eq? p-15566 '_)
                 r-15568
                 (if (eq? p-15566 'any)
                   (cons (wrap-4324 e-15565 w-15567 mod-15569)
                         r-15568)
                   (if (if (vector? e-15565)
                         (if (= (vector-length e-15565) 4)
                           (eq? (vector-ref e-15565 0) 'syntax-object)
                           #f)
                         #f)
                     (match*-15018
                       (vector-ref e-15565 1)
                       p-15566
                       (join-wraps-4311 w-15567 (vector-ref e-15565 2))
                       r-15568
                       (vector-ref e-15565 3))
                     (match*-15018
                       e-15565
                       p-15566
                       w-15567
                       r-15568
                       mod-15569))))))))
        (set! $sc-dispatch
          (lambda (e-15020 p-15021)
            (if (eq? p-15021 'any)
              (list e-15020)
              (if (eq? p-15021 '_)
                '()
                (if (if (vector? e-15020)
                      (if (= (vector-length e-15020) 4)
                        (eq? (vector-ref e-15020 0) 'syntax-object)
                        #f)
                      #f)
                  (match*-15018
                    (vector-ref e-15020 1)
                    p-15021
                    (vector-ref e-15020 2)
                    '()
                    (vector-ref e-15020 3))
                  (match*-15018 e-15020 p-15021 '(()) '() #f))))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (x-28007)
      (let ((tmp-28009
              ($sc-dispatch x-28007 '(_ () any . each-any))))
        (if tmp-28009
          (@apply
            (lambda (e1-28013 e2-28014)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("l-*-27980" "l-*-27981"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-27977")))
                       (hygiene guile))
                    (cons '() (cons e1-28013 e2-28014))))
            tmp-28009)
          (let ((tmp-28015
                  ($sc-dispatch
                    x-28007
                    '(_ ((any any)) any . each-any))))
            (if tmp-28015
              (@apply
                (lambda (out-28019 in-28020 e1-28021 e2-28022)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("l-*-27986"
                                "l-*-27987"
                                "l-*-27988"
                                "l-*-27989"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-27977")))
                           (hygiene guile))
                        in-28020
                        '()
                        (list out-28019
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("l-*-27986"
                                            "l-*-27987"
                                            "l-*-27988"
                                            "l-*-27989"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-27977")))
                                       (hygiene guile))
                                    (cons '() (cons e1-28021 e2-28022))))))
                tmp-28015)
              (let ((tmp-28023
                      ($sc-dispatch
                        x-28007
                        '(_ #(each (any any)) any . each-any))))
                (if tmp-28023
                  (@apply
                    (lambda (out-28027 in-28028 e1-28029 e2-28030)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("l-*-27996"
                                    "l-*-27997"
                                    "l-*-27998"
                                    "l-*-27999"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("l-*-27977")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("l-*-27996"
                                          "l-*-27997"
                                          "l-*-27998"
                                          "l-*-27999"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-27977")))
                                     (hygiene guile))
                                  in-28028)
                            '()
                            (list out-28027
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("l-*-27996"
                                                "l-*-27997"
                                                "l-*-27998"
                                                "l-*-27999"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("l-*-27977")))
                                           (hygiene guile))
                                        (cons '() (cons e1-28029 e2-28030))))))
                    tmp-28023)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    x-28007))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (x-28084)
      (let ((tmp-28086
              ($sc-dispatch
                x-28084
                '(_ each-any . #(each ((any . any) any))))))
        (if tmp-28086
          (@apply
            (lambda (k-28090
                     keyword-28091
                     pattern-28092
                     template-28093)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("l-*-28047"
                            "l-*-28048"
                            "l-*-28049"
                            "l-*-28050"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-28044")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("l-*-28047"
                             "l-*-28048"
                             "l-*-28049"
                             "l-*-28050"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("l-*-28044")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("l-*-28047"
                               "l-*-28048"
                               "l-*-28049"
                               "l-*-28050"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-28044")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("l-*-28047"
                               "l-*-28048"
                               "l-*-28049"
                               "l-*-28050"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-28044")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("l-*-28047"
                                    "l-*-28048"
                                    "l-*-28049"
                                    "l-*-28050"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("l-*-28044")))
                               (hygiene guile))
                            pattern-28092))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("l-*-28047"
                                  "l-*-28048"
                                  "l-*-28049"
                                  "l-*-28050"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-28044")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("l-*-28047"
                                        "l-*-28048"
                                        "l-*-28049"
                                        "l-*-28050"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-28044")))
                                   (hygiene guile))
                                (cons k-28090
                                      (map (lambda (tmp-28058-28094
                                                    tmp-28057-28095)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("l-*-28047"
                                                                 "l-*-28048"
                                                                 "l-*-28049"
                                                                 "l-*-28050"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-28044")))
                                                            (hygiene guile))
                                                         tmp-28057-28095)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("l-*-28047"
                                                                 "l-*-28048"
                                                                 "l-*-28049"
                                                                 "l-*-28050"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-28044")))
                                                            (hygiene guile))
                                                         tmp-28058-28094)))
                                           template-28093
                                           pattern-28092))))))
            tmp-28086)
          (let ((tmp-28096
                  ($sc-dispatch
                    x-28084
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if tmp-28096
                  (@apply
                    (lambda (k-28100
                             docstring-28101
                             keyword-28102
                             pattern-28103
                             template-28104)
                      (string? (syntax->datum docstring-28101)))
                    tmp-28096)
                  #f)
              (@apply
                (lambda (k-28105
                         docstring-28106
                         keyword-28107
                         pattern-28108
                         template-28109)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("l-*-28070"
                                "l-*-28071"
                                "l-*-28072"
                                "l-*-28073"
                                "l-*-28074"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-28044")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("l-*-28070"
                                 "l-*-28071"
                                 "l-*-28072"
                                 "l-*-28073"
                                 "l-*-28074"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("l-*-28044")))
                            (hygiene guile)))
                        docstring-28106
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("l-*-28070"
                                   "l-*-28071"
                                   "l-*-28072"
                                   "l-*-28073"
                                   "l-*-28074"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-28044")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("l-*-28070"
                                   "l-*-28071"
                                   "l-*-28072"
                                   "l-*-28073"
                                   "l-*-28074"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-28044")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("l-*-28070"
                                        "l-*-28071"
                                        "l-*-28072"
                                        "l-*-28073"
                                        "l-*-28074"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-28044")))
                                   (hygiene guile))
                                pattern-28108))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("l-*-28070"
                                      "l-*-28071"
                                      "l-*-28072"
                                      "l-*-28073"
                                      "l-*-28074"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-28044")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-28070"
                                            "l-*-28071"
                                            "l-*-28072"
                                            "l-*-28073"
                                            "l-*-28074"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-28044")))
                                       (hygiene guile))
                                    (cons k-28105
                                          (map (lambda (tmp-28083-28110
                                                        tmp-28082-28111)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-28070"
                                                                     "l-*-28071"
                                                                     "l-*-28072"
                                                                     "l-*-28073"
                                                                     "l-*-28074"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-28044")))
                                                                (hygiene
                                                                  guile))
                                                             tmp-28082-28111)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-28070"
                                                                     "l-*-28071"
                                                                     "l-*-28072"
                                                                     "l-*-28073"
                                                                     "l-*-28074"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-28044")))
                                                                (hygiene
                                                                  guile))
                                                             tmp-28083-28110)))
                                               template-28109
                                               pattern-28108))))))
                tmp-28096)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-28084))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (x-28148)
      (let ((tmp-28150
              ($sc-dispatch x-28148 '(_ (any . any) any))))
        (if tmp-28150
          (@apply
            (lambda (name-28154 pattern-28155 template-28156)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("l-*-28125" "l-*-28126" "l-*-28127"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-28122")))
                       (hygiene guile))
                    name-28154
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("l-*-28125" "l-*-28126" "l-*-28127"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-28122")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("l-*-28125"
                                              "l-*-28126"
                                              "l-*-28127"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-28122")))
                                         (hygiene guile))
                                      pattern-28155)
                                template-28156))))
            tmp-28150)
          (let ((tmp-28157
                  ($sc-dispatch x-28148 '(_ (any . any) any any))))
            (if (if tmp-28157
                  (@apply
                    (lambda (name-28161
                             pattern-28162
                             docstring-28163
                             template-28164)
                      (string? (syntax->datum docstring-28163)))
                    tmp-28157)
                  #f)
              (@apply
                (lambda (name-28165
                         pattern-28166
                         docstring-28167
                         template-28168)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("l-*-28140"
                                "l-*-28141"
                                "l-*-28142"
                                "l-*-28143"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-28122")))
                           (hygiene guile))
                        name-28165
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("l-*-28140"
                                      "l-*-28141"
                                      "l-*-28142"
                                      "l-*-28143"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-28122")))
                                 (hygiene guile))
                              '()
                              docstring-28167
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("l-*-28140"
                                                  "l-*-28141"
                                                  "l-*-28142"
                                                  "l-*-28143"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("l-*-28122")))
                                             (hygiene guile))
                                          pattern-28166)
                                    template-28168))))
                tmp-28157)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-28148))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (x-28217)
      (let ((tmp-28219
              ($sc-dispatch
                x-28217
                '(any #(each (any any)) any . each-any))))
        (if (if tmp-28219
              (@apply
                (lambda (let*-28223 x-28224 v-28225 e1-28226 e2-28227)
                  (and-map identifier? x-28224))
                tmp-28219)
              #f)
          (@apply
            (lambda (let*-28228 x-28229 v-28230 e1-28231 e2-28232)
              (letrec*
                ((f-28233
                   (lambda (bindings-28236)
                     (if (null? bindings-28236)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("l-*-28203" "l-*-28204"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("l-*-28193"
                                     "l-*-28194"
                                     "l-*-28195"
                                     "l-*-28196"
                                     "l-*-28197"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("l-*-28179")))
                                (hygiene guile))
                             (cons '() (cons e1-28231 e2-28232)))
                       (let ((tmp-28237
                               (list (f-28233 (cdr bindings-28236))
                                     (car bindings-28236))))
                         (let ((tmp-28238 ($sc-dispatch tmp-28237 '(any any))))
                           (if tmp-28238
                             (@apply
                               (lambda (body-28240 binding-28241)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("l-*-28213" "l-*-28214"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("l-*-28203" "l-*-28204"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("l-*-28193"
                                               "l-*-28194"
                                               "l-*-28195"
                                               "l-*-28196"
                                               "l-*-28197"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-28179")))
                                          (hygiene guile))
                                       (list binding-28241)
                                       body-28240))
                               tmp-28238)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               tmp-28237))))))))
                (f-28233 (map list x-28229 v-28230))))
            tmp-28219)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-28217))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (orig-x-28299)
      (let ((tmp-28301
              ($sc-dispatch
                orig-x-28299
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if tmp-28301
          (@apply
            (lambda (var-28305
                     init-28306
                     step-28307
                     e0-28308
                     e1-28309
                     c-28310)
              (let ((tmp-28311
                      (map (lambda (v-28314 s-28315)
                             (let ((tmp-28317 ($sc-dispatch s-28315 '())))
                               (if tmp-28317
                                 (@apply (lambda () v-28314) tmp-28317)
                                 (let ((tmp-28320
                                         ($sc-dispatch s-28315 '(any))))
                                   (if tmp-28320
                                     (@apply
                                       (lambda (e-28323) e-28323)
                                       tmp-28320)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       orig-x-28299
                                       s-28315))))))
                           var-28305
                           step-28307)))
                (let ((tmp-28312 ($sc-dispatch tmp-28311 'each-any)))
                  (if tmp-28312
                    (@apply
                      (lambda (step-28329)
                        (let ((tmp-28331 ($sc-dispatch e1-28309 '())))
                          (if tmp-28331
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("l-*-28267"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("l-*-28252"
                                              "l-*-28253"
                                              "l-*-28254"
                                              "l-*-28255"
                                              "l-*-28256"
                                              "l-*-28257"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("l-*-28249")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("l-*-28267"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("l-*-28252"
                                              "l-*-28253"
                                              "l-*-28254"
                                              "l-*-28255"
                                              "l-*-28256"
                                              "l-*-28257"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("l-*-28249")))
                                         (hygiene guile))
                                      (map list var-28305 init-28306)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("l-*-28267"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-28252"
                                                    "l-*-28253"
                                                    "l-*-28254"
                                                    "l-*-28255"
                                                    "l-*-28256"
                                                    "l-*-28257"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("l-*-28249")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("l-*-28267"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("l-*-28252"
                                                          "l-*-28253"
                                                          "l-*-28254"
                                                          "l-*-28255"
                                                          "l-*-28256"
                                                          "l-*-28257"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("l-*-28249")))
                                                     (hygiene guile))
                                                  e0-28308)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("l-*-28267"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("l-*-28252"
                                                          "l-*-28253"
                                                          "l-*-28254"
                                                          "l-*-28255"
                                                          "l-*-28256"
                                                          "l-*-28257"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("l-*-28249")))
                                                     (hygiene guile))
                                                  (append
                                                    c-28310
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("l-*-28267"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("l-*-28252"
                                                                        "l-*-28253"
                                                                        "l-*-28254"
                                                                        "l-*-28255"
                                                                        "l-*-28256"
                                                                        "l-*-28257"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("l-*-28249")))
                                                                   (hygiene
                                                                     guile))
                                                                step-28329)))))))
                              tmp-28331)
                            (let ((tmp-28335
                                    ($sc-dispatch e1-28309 '(any . each-any))))
                              (if tmp-28335
                                (@apply
                                  (lambda (e1-28339 e2-28340)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("l-*-28276" "l-*-28277"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("l-*-28267"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-28252"
                                                  "l-*-28253"
                                                  "l-*-28254"
                                                  "l-*-28255"
                                                  "l-*-28256"
                                                  "l-*-28257"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("l-*-28249")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("l-*-28276" "l-*-28277"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("l-*-28267"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-28252"
                                                  "l-*-28253"
                                                  "l-*-28254"
                                                  "l-*-28255"
                                                  "l-*-28256"
                                                  "l-*-28257"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("l-*-28249")))
                                             (hygiene guile))
                                          (map list var-28305 init-28306)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("l-*-28276"
                                                        "l-*-28277"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("l-*-28267"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-28252"
                                                        "l-*-28253"
                                                        "l-*-28254"
                                                        "l-*-28255"
                                                        "l-*-28256"
                                                        "l-*-28257"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("l-*-28249")))
                                                   (hygiene guile))
                                                e0-28308
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("l-*-28276"
                                                              "l-*-28277"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("l-*-28267"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-28252"
                                                              "l-*-28253"
                                                              "l-*-28254"
                                                              "l-*-28255"
                                                              "l-*-28256"
                                                              "l-*-28257"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("l-*-28249")))
                                                         (hygiene guile))
                                                      (cons e1-28339 e2-28340))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("l-*-28276"
                                                              "l-*-28277"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("l-*-28267"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-28252"
                                                              "l-*-28253"
                                                              "l-*-28254"
                                                              "l-*-28255"
                                                              "l-*-28256"
                                                              "l-*-28257"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("l-*-28249")))
                                                         (hygiene guile))
                                                      (append
                                                        c-28310
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("l-*-28276"
                                                                            "l-*-28277"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("l-*-28267"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("l-*-28252"
                                                                            "l-*-28253"
                                                                            "l-*-28254"
                                                                            "l-*-28255"
                                                                            "l-*-28256"
                                                                            "l-*-28257"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("l-*-28249")))
                                                                       (hygiene
                                                                         guile))
                                                                    step-28329)))))))
                                  tmp-28335)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  e1-28309))))))
                      tmp-28312)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      tmp-28311)))))
            tmp-28301)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            orig-x-28299))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((quasi-28620
         (lambda (p-28644 lev-28645)
           (let ((tmp-28647
                   ($sc-dispatch
                     p-28644
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-28372" "l-*-28373"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-28368"
                               "l-*-28366"
                               "l-*-28364"
                               "l-*-28362"
                               "l-*-28360"
                               "l-*-28358"
                               "l-*-28356")))
                           (hygiene guile)))
                       any))))
             (if tmp-28647
               (@apply
                 (lambda (p-28651)
                   (if (= lev-28645 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("l-*-28376"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("l-*-28372" "l-*-28373"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("l-*-28368"
                                  "l-*-28366"
                                  "l-*-28364"
                                  "l-*-28362"
                                  "l-*-28360"
                                  "l-*-28358"
                                  "l-*-28356")))
                              (hygiene guile))
                           p-28651)
                     (quasicons-28622
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("l-*-28376"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-28372" "l-*-28373"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-28368"
                               "l-*-28366"
                               "l-*-28364"
                               "l-*-28362"
                               "l-*-28360"
                               "l-*-28358"
                               "l-*-28356")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("l-*-28376"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-28372" "l-*-28373"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-28368"
                               "l-*-28366"
                               "l-*-28364"
                               "l-*-28362"
                               "l-*-28360"
                               "l-*-28358"
                               "l-*-28356")))
                           (hygiene guile)))
                       (quasi-28620 (list p-28651) (#{1-}# lev-28645)))))
                 tmp-28647)
               (let ((tmp-28654
                       ($sc-dispatch
                         p-28644
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("l-*-28372" "l-*-28373"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("l-*-28368"
                                   "l-*-28366"
                                   "l-*-28364"
                                   "l-*-28362"
                                   "l-*-28360"
                                   "l-*-28358"
                                   "l-*-28356")))
                               (hygiene guile)))
                           any))))
                 (if tmp-28654
                   (@apply
                     (lambda (p-28658)
                       (quasicons-28622
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("l-*-28379"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("l-*-28372" "l-*-28373"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("l-*-28368"
                                 "l-*-28366"
                                 "l-*-28364"
                                 "l-*-28362"
                                 "l-*-28360"
                                 "l-*-28358"
                                 "l-*-28356")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("l-*-28379"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("l-*-28372" "l-*-28373"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("l-*-28368"
                                 "l-*-28366"
                                 "l-*-28364"
                                 "l-*-28362"
                                 "l-*-28360"
                                 "l-*-28358"
                                 "l-*-28356")))
                             (hygiene guile)))
                         (quasi-28620 (list p-28658) (#{1+}# lev-28645))))
                     tmp-28654)
                   (let ((tmp-28661 ($sc-dispatch p-28644 '(any . any))))
                     (if tmp-28661
                       (@apply
                         (lambda (p-28665 q-28666)
                           (let ((tmp-28668
                                   ($sc-dispatch
                                     p-28665
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("l-*-28382" "l-*-28383"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("l-*-28372" "l-*-28373"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("l-*-28368"
                                               "l-*-28366"
                                               "l-*-28364"
                                               "l-*-28362"
                                               "l-*-28360"
                                               "l-*-28358"
                                               "l-*-28356")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if tmp-28668
                               (@apply
                                 (lambda (p-28672)
                                   (if (= lev-28645 0)
                                     (quasilist*-28624
                                       (map (lambda (tmp-28390-28708)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("l-*-28388"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("l-*-28382"
                                                            "l-*-28383"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("l-*-28372"
                                                            "l-*-28373"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-28368"
                                                           "l-*-28366"
                                                           "l-*-28364"
                                                           "l-*-28362"
                                                           "l-*-28360"
                                                           "l-*-28358"
                                                           "l-*-28356")))
                                                       (hygiene guile))
                                                    tmp-28390-28708))
                                            p-28672)
                                       (quasi-28620 q-28666 lev-28645))
                                     (quasicons-28622
                                       (quasicons-28622
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("l-*-28388"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("l-*-28382" "l-*-28383"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("l-*-28372" "l-*-28373"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-28368"
                                                 "l-*-28366"
                                                 "l-*-28364"
                                                 "l-*-28362"
                                                 "l-*-28360"
                                                 "l-*-28358"
                                                 "l-*-28356")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("l-*-28388"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("l-*-28382" "l-*-28383"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("l-*-28372" "l-*-28373"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-28368"
                                                 "l-*-28366"
                                                 "l-*-28364"
                                                 "l-*-28362"
                                                 "l-*-28360"
                                                 "l-*-28358"
                                                 "l-*-28356")))
                                             (hygiene guile)))
                                         (quasi-28620
                                           p-28672
                                           (#{1-}# lev-28645)))
                                       (quasi-28620 q-28666 lev-28645))))
                                 tmp-28668)
                               (let ((tmp-28713
                                       ($sc-dispatch
                                         p-28665
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("l-*-28382" "l-*-28383"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("l-*-28372" "l-*-28373"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-28368"
                                                   "l-*-28366"
                                                   "l-*-28364"
                                                   "l-*-28362"
                                                   "l-*-28360"
                                                   "l-*-28358"
                                                   "l-*-28356")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if tmp-28713
                                   (@apply
                                     (lambda (p-28717)
                                       (if (= lev-28645 0)
                                         (quasiappend-28623
                                           (map (lambda (tmp-28395-28720)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("l-*-28393"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("l-*-28382"
                                                                "l-*-28383"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("l-*-28372"
                                                                "l-*-28373"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-28368"
                                                               "l-*-28366"
                                                               "l-*-28364"
                                                               "l-*-28362"
                                                               "l-*-28360"
                                                               "l-*-28358"
                                                               "l-*-28356")))
                                                           (hygiene guile))
                                                        tmp-28395-28720))
                                                p-28717)
                                           (quasi-28620 q-28666 lev-28645))
                                         (quasicons-28622
                                           (quasicons-28622
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("l-*-28393"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("l-*-28382" "l-*-28383"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("l-*-28372" "l-*-28373"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("l-*-28368"
                                                     "l-*-28366"
                                                     "l-*-28364"
                                                     "l-*-28362"
                                                     "l-*-28360"
                                                     "l-*-28358"
                                                     "l-*-28356")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("l-*-28393"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("l-*-28382" "l-*-28383"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("l-*-28372" "l-*-28373"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("l-*-28368"
                                                     "l-*-28366"
                                                     "l-*-28364"
                                                     "l-*-28362"
                                                     "l-*-28360"
                                                     "l-*-28358"
                                                     "l-*-28356")))
                                                 (hygiene guile)))
                                             (quasi-28620
                                               p-28717
                                               (#{1-}# lev-28645)))
                                           (quasi-28620 q-28666 lev-28645))))
                                     tmp-28713)
                                   (quasicons-28622
                                     (quasi-28620 p-28665 lev-28645)
                                     (quasi-28620 q-28666 lev-28645)))))))
                         tmp-28661)
                       (let ((tmp-28734
                               ($sc-dispatch p-28644 '#(vector each-any))))
                         (if tmp-28734
                           (@apply
                             (lambda (x-28738)
                               (let ((x-28741
                                       (vquasi-28621 x-28738 lev-28645)))
                                 (let ((tmp-28743
                                         ($sc-dispatch
                                           x-28741
                                           '(#(atom "quote") each-any))))
                                   (if tmp-28743
                                     (@apply
                                       (lambda (x-28747)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-28494"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-28491"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-28368"
                                                      "l-*-28366"
                                                      "l-*-28364"
                                                      "l-*-28362"
                                                      "l-*-28360"
                                                      "l-*-28358"
                                                      "l-*-28356")))
                                                  (hygiene guile))
                                               (list->vector x-28747)))
                                       tmp-28743)
                                     (letrec*
                                       ((f-28749
                                          (lambda (y-28761 k-28762)
                                            (let ((tmp-28764
                                                    ($sc-dispatch
                                                      y-28761
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if tmp-28764
                                                (@apply
                                                  (lambda (y-28767)
                                                    (k-28762
                                                      (map (lambda (tmp-28519-28768)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("l-*-28517"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("l-*-28499"
                                                                           "l-*-28500"
                                                                           "l-*-28501"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("l-*-28497"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("l-*-28491"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("l-*-28368"
                                                                          "l-*-28366"
                                                                          "l-*-28364"
                                                                          "l-*-28362"
                                                                          "l-*-28360"
                                                                          "l-*-28358"
                                                                          "l-*-28356")))
                                                                      (hygiene
                                                                        guile))
                                                                   tmp-28519-28768))
                                                           y-28767)))
                                                  tmp-28764)
                                                (let ((tmp-28769
                                                        ($sc-dispatch
                                                          y-28761
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if tmp-28769
                                                    (@apply
                                                      (lambda (y-28772)
                                                        (k-28762 y-28772))
                                                      tmp-28769)
                                                    (let ((tmp-28773
                                                            ($sc-dispatch
                                                              y-28761
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if tmp-28773
                                                        (@apply
                                                          (lambda (y-28776
                                                                   z-28777)
                                                            (f-28749
                                                              z-28777
                                                              (lambda (ls-28778)
                                                                (k-28762
                                                                  (append
                                                                    y-28776
                                                                    ls-28778)))))
                                                          tmp-28773)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(t-28534)
                                                                    #((m-*-28535
                                                                        top))
                                                                    #("l-*-28538"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("l-*-28532"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("l-*-28499"
                                                                      "l-*-28500"
                                                                      "l-*-28501"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("l-*-28497"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("l-*-28491"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("l-*-28368"
                                                                     "l-*-28366"
                                                                     "l-*-28364"
                                                                     "l-*-28362"
                                                                     "l-*-28360"
                                                                     "l-*-28358"
                                                                     "l-*-28356")))
                                                                 (hygiene
                                                                   guile))
                                                              x-28741))))))))))
                                       (f-28749
                                         x-28741
                                         (lambda (ls-28751)
                                           (let ((tmp-28753
                                                   ($sc-dispatch
                                                     ls-28751
                                                     'each-any)))
                                             (if tmp-28753
                                               (@apply
                                                 (lambda (t-28507-28756)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(t-28507)
                                                               #((m-*-28508
                                                                   top))
                                                               #("l-*-28512"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("l-*-28506"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("l-*-28497"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-28491"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("l-*-28368"
                                                                "l-*-28366"
                                                                "l-*-28364"
                                                                "l-*-28362"
                                                                "l-*-28360"
                                                                "l-*-28358"
                                                                "l-*-28356")))
                                                            (hygiene guile))
                                                         t-28507-28756))
                                                 tmp-28753)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 ls-28751))))))))))
                             tmp-28734)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("l-*-28403"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("l-*-28372" "l-*-28373"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("l-*-28368"
                                        "l-*-28366"
                                        "l-*-28364"
                                        "l-*-28362"
                                        "l-*-28360"
                                        "l-*-28358"
                                        "l-*-28356")))
                                    (hygiene guile))
                                 p-28644)))))))))))
       (vquasi-28621
         (lambda (p-28806 lev-28807)
           (let ((tmp-28809 ($sc-dispatch p-28806 '(any . any))))
             (if tmp-28809
               (@apply
                 (lambda (p-28813 q-28814)
                   (let ((tmp-28816
                           ($sc-dispatch
                             p-28813
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("l-*-28411" "l-*-28412"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("l-*-28407" "l-*-28408"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("l-*-28368"
                                       "l-*-28366"
                                       "l-*-28364"
                                       "l-*-28362"
                                       "l-*-28360"
                                       "l-*-28358"
                                       "l-*-28356")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if tmp-28816
                       (@apply
                         (lambda (p-28820)
                           (if (= lev-28807 0)
                             (quasilist*-28624
                               (map (lambda (tmp-28419-28856)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("l-*-28417"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("l-*-28411" "l-*-28412"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("l-*-28407" "l-*-28408"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-28368"
                                                   "l-*-28366"
                                                   "l-*-28364"
                                                   "l-*-28362"
                                                   "l-*-28360"
                                                   "l-*-28358"
                                                   "l-*-28356")))
                                               (hygiene guile))
                                            tmp-28419-28856))
                                    p-28820)
                               (vquasi-28621 q-28814 lev-28807))
                             (quasicons-28622
                               (quasicons-28622
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("l-*-28417"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("l-*-28411" "l-*-28412"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("l-*-28407" "l-*-28408"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("l-*-28368"
                                         "l-*-28366"
                                         "l-*-28364"
                                         "l-*-28362"
                                         "l-*-28360"
                                         "l-*-28358"
                                         "l-*-28356")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("l-*-28417"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("l-*-28411" "l-*-28412"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("l-*-28407" "l-*-28408"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("l-*-28368"
                                         "l-*-28366"
                                         "l-*-28364"
                                         "l-*-28362"
                                         "l-*-28360"
                                         "l-*-28358"
                                         "l-*-28356")))
                                     (hygiene guile)))
                                 (quasi-28620 p-28820 (#{1-}# lev-28807)))
                               (vquasi-28621 q-28814 lev-28807))))
                         tmp-28816)
                       (let ((tmp-28863
                               ($sc-dispatch
                                 p-28813
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("l-*-28411" "l-*-28412"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("l-*-28407" "l-*-28408"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("l-*-28368"
                                           "l-*-28366"
                                           "l-*-28364"
                                           "l-*-28362"
                                           "l-*-28360"
                                           "l-*-28358"
                                           "l-*-28356")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if tmp-28863
                           (@apply
                             (lambda (p-28867)
                               (if (= lev-28807 0)
                                 (quasiappend-28623
                                   (map (lambda (tmp-28424-28870)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("l-*-28422"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("l-*-28411"
                                                        "l-*-28412"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("l-*-28407"
                                                        "l-*-28408"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("l-*-28368"
                                                       "l-*-28366"
                                                       "l-*-28364"
                                                       "l-*-28362"
                                                       "l-*-28360"
                                                       "l-*-28358"
                                                       "l-*-28356")))
                                                   (hygiene guile))
                                                tmp-28424-28870))
                                        p-28867)
                                   (vquasi-28621 q-28814 lev-28807))
                                 (quasicons-28622
                                   (quasicons-28622
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage
                                            #(p)
                                            #((top))
                                            #("l-*-28422"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("l-*-28411" "l-*-28412"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("l-*-28407" "l-*-28408"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("l-*-28368"
                                             "l-*-28366"
                                             "l-*-28364"
                                             "l-*-28362"
                                             "l-*-28360"
                                             "l-*-28358"
                                             "l-*-28356")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage
                                            #(p)
                                            #((top))
                                            #("l-*-28422"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("l-*-28411" "l-*-28412"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("l-*-28407" "l-*-28408"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("l-*-28368"
                                             "l-*-28366"
                                             "l-*-28364"
                                             "l-*-28362"
                                             "l-*-28360"
                                             "l-*-28358"
                                             "l-*-28356")))
                                         (hygiene guile)))
                                     (quasi-28620 p-28867 (#{1-}# lev-28807)))
                                   (vquasi-28621 q-28814 lev-28807))))
                             tmp-28863)
                           (quasicons-28622
                             (quasi-28620 p-28813 lev-28807)
                             (vquasi-28621 q-28814 lev-28807)))))))
                 tmp-28809)
               (let ((tmp-28888 ($sc-dispatch p-28806 '())))
                 (if tmp-28888
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-28407" "l-*-28408"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-28368"
                               "l-*-28366"
                               "l-*-28364"
                               "l-*-28362"
                               "l-*-28360"
                               "l-*-28358"
                               "l-*-28356")))
                           (hygiene guile))
                         ()))
                     tmp-28888)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     p-28806)))))))
       (quasicons-28622
         (lambda (x-28901 y-28902)
           (let ((tmp-28903 (list x-28901 y-28902)))
             (let ((tmp-28904 ($sc-dispatch tmp-28903 '(any any))))
               (if tmp-28904
                 (@apply
                   (lambda (x-28906 y-28907)
                     (let ((tmp-28909
                             ($sc-dispatch y-28907 '(#(atom "quote") any))))
                       (if tmp-28909
                         (@apply
                           (lambda (dy-28913)
                             (let ((tmp-28915
                                     ($sc-dispatch
                                       x-28906
                                       '(#(atom "quote") any))))
                               (if tmp-28915
                                 (@apply
                                   (lambda (dx-28919)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("l-*-28446"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("l-*-28442"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-28436" "l-*-28437"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-28431" "l-*-28432"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-28368"
                                                  "l-*-28366"
                                                  "l-*-28364"
                                                  "l-*-28362"
                                                  "l-*-28360"
                                                  "l-*-28358"
                                                  "l-*-28356")))
                                              (hygiene guile))
                                           (cons dx-28919 dy-28913)))
                                   tmp-28915)
                                 (if (null? dy-28913)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("l-*-28448"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("l-*-28442"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-28436" "l-*-28437"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-28431" "l-*-28432"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-28368"
                                                "l-*-28366"
                                                "l-*-28364"
                                                "l-*-28362"
                                                "l-*-28360"
                                                "l-*-28358"
                                                "l-*-28356")))
                                            (hygiene guile))
                                         x-28906)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("l-*-28448"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("l-*-28442"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-28436" "l-*-28437"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-28431" "l-*-28432"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-28368"
                                                "l-*-28366"
                                                "l-*-28364"
                                                "l-*-28362"
                                                "l-*-28360"
                                                "l-*-28358"
                                                "l-*-28356")))
                                            (hygiene guile))
                                         x-28906
                                         y-28907)))))
                           tmp-28909)
                         (let ((tmp-28924
                                 ($sc-dispatch
                                   y-28907
                                   '(#(atom "list") . any))))
                           (if tmp-28924
                             (@apply
                               (lambda (stuff-28928)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("l-*-28451"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-28436" "l-*-28437"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-28431" "l-*-28432"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-28368"
                                              "l-*-28366"
                                              "l-*-28364"
                                              "l-*-28362"
                                              "l-*-28360"
                                              "l-*-28358"
                                              "l-*-28356")))
                                          (hygiene guile))
                                       (cons x-28906 stuff-28928)))
                               tmp-28924)
                             (let ((tmp-28929
                                     ($sc-dispatch
                                       y-28907
                                       '(#(atom "list*") . any))))
                               (if tmp-28929
                                 (@apply
                                   (lambda (stuff-28933)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("l-*-28454"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-28436" "l-*-28437"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-28431" "l-*-28432"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-28368"
                                                  "l-*-28366"
                                                  "l-*-28364"
                                                  "l-*-28362"
                                                  "l-*-28360"
                                                  "l-*-28358"
                                                  "l-*-28356")))
                                              (hygiene guile))
                                           (cons x-28906 stuff-28933)))
                                   tmp-28929)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage
                                             #(_)
                                             #((top))
                                             #("l-*-28456"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-28436" "l-*-28437"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-28431" "l-*-28432"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-28368"
                                              "l-*-28366"
                                              "l-*-28364"
                                              "l-*-28362"
                                              "l-*-28360"
                                              "l-*-28358"
                                              "l-*-28356")))
                                          (hygiene guile))
                                       x-28906
                                       y-28907))))))))
                   tmp-28904)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   tmp-28903))))))
       (quasiappend-28623
         (lambda (x-28944 y-28945)
           (let ((tmp-28947
                   ($sc-dispatch y-28945 '(#(atom "quote") ()))))
             (if tmp-28947
               (@apply
                 (lambda ()
                   (if (null? x-28944)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("l-*-28460" "l-*-28461"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("l-*-28368"
                             "l-*-28366"
                             "l-*-28364"
                             "l-*-28362"
                             "l-*-28360"
                             "l-*-28358"
                             "l-*-28356")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr x-28944))
                       (car x-28944)
                       (let ((tmp-28952 ($sc-dispatch x-28944 'each-any)))
                         (if tmp-28952
                           (@apply
                             (lambda (p-28956)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p)
                                           #((top))
                                           #("l-*-28468"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("l-*-28460" "l-*-28461"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("l-*-28368"
                                            "l-*-28366"
                                            "l-*-28364"
                                            "l-*-28362"
                                            "l-*-28360"
                                            "l-*-28358"
                                            "l-*-28356")))
                                        (hygiene guile))
                                     p-28956))
                             tmp-28952)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             x-28944))))))
                 tmp-28947)
               (if (null? x-28944)
                 y-28945
                 (let ((tmp-28964 (list x-28944 y-28945)))
                   (let ((tmp-28965
                           ($sc-dispatch tmp-28964 '(each-any any))))
                     (if tmp-28965
                       (@apply
                         (lambda (p-28967 y-28968)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("l-*-28477" "l-*-28478"))
                                     #(ribcage #(_) #((top)) #("l-*-28471"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("l-*-28460" "l-*-28461"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("l-*-28368"
                                        "l-*-28366"
                                        "l-*-28364"
                                        "l-*-28362"
                                        "l-*-28360"
                                        "l-*-28358"
                                        "l-*-28356")))
                                    (hygiene guile))
                                 (append p-28967 (list y-28968))))
                         tmp-28965)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         tmp-28964)))))))))
       (quasilist*-28624
         (lambda (x-28972 y-28973)
           (letrec*
             ((f-28974
                (lambda (x-29063)
                  (if (null? x-29063)
                    y-28973
                    (quasicons-28622
                      (car x-29063)
                      (f-28974 (cdr x-29063)))))))
             (f-28974 x-28972))))
       (emit-28626
         (lambda (x-29066)
           (let ((tmp-29068
                   ($sc-dispatch x-29066 '(#(atom "quote") any))))
             (if tmp-29068
               (@apply
                 (lambda (x-29072)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("l-*-28544"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("l-*-28541"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("l-*-28368"
                                "l-*-28366"
                                "l-*-28364"
                                "l-*-28362"
                                "l-*-28360"
                                "l-*-28358"
                                "l-*-28356")))
                            (hygiene guile))
                         x-29072))
                 tmp-29068)
               (let ((tmp-29073
                       ($sc-dispatch
                         x-29066
                         '(#(atom "list") . each-any))))
                 (if tmp-29073
                   (@apply
                     (lambda (x-29077)
                       (let ((tmp-29078 (map emit-28626 x-29077)))
                         (let ((tmp-29079 ($sc-dispatch tmp-29078 'each-any)))
                           (if tmp-29079
                             (@apply
                               (lambda (t-28549-29081)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(t-28549)
                                             #((m-*-28550 top))
                                             #("l-*-28554"))
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-28547"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-28541"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-28368"
                                              "l-*-28366"
                                              "l-*-28364"
                                              "l-*-28362"
                                              "l-*-28360"
                                              "l-*-28358"
                                              "l-*-28356")))
                                          (hygiene guile))
                                       t-28549-29081))
                               tmp-29079)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               tmp-29078)))))
                     tmp-29073)
                   (let ((tmp-29082
                           ($sc-dispatch
                             x-29066
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if tmp-29082
                       (@apply
                         (lambda (x-29086 y-29087)
                           (letrec*
                             ((f-29088
                                (lambda (x*-29091)
                                  (if (null? x*-29091)
                                    (emit-28626 y-29087)
                                    (let ((tmp-29092
                                            (list (emit-28626 (car x*-29091))
                                                  (f-29088 (cdr x*-29091)))))
                                      (let ((tmp-29093
                                              ($sc-dispatch
                                                tmp-29092
                                                '(any any))))
                                        (if tmp-29093
                                          (@apply
                                            (lambda (t-28569-29095
                                                     t-28568-29096)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(t-28569 t-28568)
                                                          #((m-*-28570 top)
                                                            (m-*-28570 top))
                                                          #("l-*-28574"
                                                            "l-*-28575"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("l-*-28563"
                                                            "l-*-28564"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("l-*-28559"
                                                            "l-*-28560"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("l-*-28541"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-28368"
                                                           "l-*-28366"
                                                           "l-*-28364"
                                                           "l-*-28362"
                                                           "l-*-28360"
                                                           "l-*-28358"
                                                           "l-*-28356")))
                                                       (hygiene guile))
                                                    t-28569-29095
                                                    t-28568-29096))
                                            tmp-29093)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            tmp-29092))))))))
                             (f-29088 x-29086)))
                         tmp-29082)
                       (let ((tmp-29097
                               ($sc-dispatch
                                 x-29066
                                 '(#(atom "append") . each-any))))
                         (if tmp-29097
                           (@apply
                             (lambda (x-29101)
                               (let ((tmp-29102 (map emit-28626 x-29101)))
                                 (let ((tmp-29103
                                         ($sc-dispatch tmp-29102 'each-any)))
                                   (if tmp-29103
                                     (@apply
                                       (lambda (t-28581-29105)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(t-28581)
                                                     #((m-*-28582 top))
                                                     #("l-*-28586"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-28579"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-28541"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-28368"
                                                      "l-*-28366"
                                                      "l-*-28364"
                                                      "l-*-28362"
                                                      "l-*-28360"
                                                      "l-*-28358"
                                                      "l-*-28356")))
                                                  (hygiene guile))
                                               t-28581-29105))
                                       tmp-29103)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       tmp-29102)))))
                             tmp-29097)
                           (let ((tmp-29106
                                   ($sc-dispatch
                                     x-29066
                                     '(#(atom "vector") . each-any))))
                             (if tmp-29106
                               (@apply
                                 (lambda (x-29110)
                                   (let ((tmp-29111 (map emit-28626 x-29110)))
                                     (let ((tmp-29112
                                             ($sc-dispatch
                                               tmp-29111
                                               'each-any)))
                                       (if tmp-29112
                                         (@apply
                                           (lambda (t-28593-29114)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(t-28593)
                                                         #((m-*-28594 top))
                                                         #("l-*-28598"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("l-*-28591"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("l-*-28541"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-28368"
                                                          "l-*-28366"
                                                          "l-*-28364"
                                                          "l-*-28362"
                                                          "l-*-28360"
                                                          "l-*-28358"
                                                          "l-*-28356")))
                                                      (hygiene guile))
                                                   t-28593-29114))
                                           tmp-29112)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           tmp-29111)))))
                                 tmp-29106)
                               (let ((tmp-29115
                                       ($sc-dispatch
                                         x-29066
                                         '(#(atom "list->vector") any))))
                                 (if tmp-29115
                                   (@apply
                                     (lambda (x-29119)
                                       (let ((tmp-29120 (emit-28626 x-29119)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(t-28605)
                                                     #((m-*-28606 top))
                                                     #("l-*-28609"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-28603"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-28541"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-28368"
                                                      "l-*-28366"
                                                      "l-*-28364"
                                                      "l-*-28362"
                                                      "l-*-28360"
                                                      "l-*-28358"
                                                      "l-*-28356")))
                                                  (hygiene guile))
                                               tmp-29120)))
                                     tmp-29115)
                                   (let ((tmp-29123
                                           ($sc-dispatch
                                             x-29066
                                             '(#(atom "value") any))))
                                     (if tmp-29123
                                       (@apply
                                         (lambda (x-29127) x-29127)
                                         tmp-29123)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         x-29066))))))))))))))))))
      (lambda (x-28627)
        (let ((tmp-28629 ($sc-dispatch x-28627 '(_ any))))
          (if tmp-28629
            (@apply
              (lambda (e-28633)
                (emit-28626 (quasi-28620 e-28633 0)))
              tmp-28629)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              x-28627)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (x-29182)
      (letrec*
        ((read-file-29183
           (lambda (fn-29292 k-29293)
             (let ((p-29294 (open-input-file fn-29292)))
               (letrec*
                 ((f-29295
                    (lambda (x-29349 result-29350)
                      (if (eof-object? x-29349)
                        (begin
                          (close-input-port p-29294)
                          (reverse result-29350))
                        (f-29295
                          (read p-29294)
                          (cons (datum->syntax k-29293 x-29349)
                                result-29350))))))
                 (f-29295 (read p-29294) '()))))))
        (let ((tmp-29185 ($sc-dispatch x-29182 '(any any))))
          (if tmp-29185
            (@apply
              (lambda (k-29189 filename-29190)
                (let ((fn-29191 (syntax->datum filename-29190)))
                  (let ((tmp-29192
                          (read-file-29183 fn-29191 filename-29190)))
                    (let ((tmp-29193 ($sc-dispatch tmp-29192 'each-any)))
                      (if tmp-29193
                        (@apply
                          (lambda (exp-29211)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("l-*-29179"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("l-*-29174"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("l-*-29170" "l-*-29171"))
                                      #(ribcage
                                        (read-file)
                                        ((top))
                                        ("l-*-29154"))
                                      #(ribcage #(x) #((top)) #("l-*-29153")))
                                     (hygiene guile))
                                  exp-29211))
                          tmp-29193)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-29192))))))
              tmp-29185)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              x-29182)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (x-29369)
      (let ((tmp-29371 ($sc-dispatch x-29369 '(any any))))
        (if tmp-29371
          (@apply
            (lambda (k-29375 filename-29376)
              (let ((fn-29377 (syntax->datum filename-29376)))
                (let ((tmp-29378
                        (datum->syntax
                          filename-29376
                          (let ((t-29381 (%search-load-path fn-29377)))
                            (if t-29381
                              t-29381
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                x-29369
                                filename-29376))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("l-*-29363"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("l-*-29359"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("l-*-29355" "l-*-29356"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29352")))
                           (hygiene guile))
                        tmp-29378))))
            tmp-29371)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-29369))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (x-29390)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        x-29390))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (x-29393)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        x-29393))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (x-29449)
      (let ((tmp-29451
              ($sc-dispatch x-29449 '(_ any any . each-any))))
        (if tmp-29451
          (@apply
            (lambda (e-29455 m1-29456 m2-29457)
              (let ((tmp-29458
                      (letrec*
                        ((f-29500
                           (lambda (clause-29503 clauses-29504)
                             (if (null? clauses-29504)
                               (let ((tmp-29506
                                       ($sc-dispatch
                                         clause-29503
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("l-*-29408"
                                                    "l-*-29409"
                                                    "l-*-29410"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("l-*-29398"
                                                    "l-*-29399"
                                                    "l-*-29400"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("l-*-29395")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if tmp-29506
                                   (@apply
                                     (lambda (e1-29510 e2-29511)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("l-*-29417" "l-*-29418"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("l-*-29408"
                                                     "l-*-29409"
                                                     "l-*-29410"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("l-*-29398"
                                                     "l-*-29399"
                                                     "l-*-29400"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-29395")))
                                                (hygiene guile))
                                             (cons e1-29510 e2-29511)))
                                     tmp-29506)
                                   (let ((tmp-29512
                                           ($sc-dispatch
                                             clause-29503
                                             '(each-any any . each-any))))
                                     (if tmp-29512
                                       (@apply
                                         (lambda (k-29516 e1-29517 e2-29518)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("l-*-29423"
                                                         "l-*-29424"
                                                         "l-*-29425"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("l-*-29408"
                                                         "l-*-29409"
                                                         "l-*-29410"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("l-*-29398"
                                                         "l-*-29399"
                                                         "l-*-29400"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-29395")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29423"
                                                               "l-*-29424"
                                                               "l-*-29425"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29408"
                                                               "l-*-29409"
                                                               "l-*-29410"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29398"
                                                               "l-*-29399"
                                                               "l-*-29400"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-29395")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29423"
                                                               "l-*-29424"
                                                               "l-*-29425"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29408"
                                                               "l-*-29409"
                                                               "l-*-29410"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29398"
                                                               "l-*-29399"
                                                               "l-*-29400"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-29395")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-29423"
                                                                     "l-*-29424"
                                                                     "l-*-29425"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-29408"
                                                                     "l-*-29409"
                                                                     "l-*-29410"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-29398"
                                                                     "l-*-29399"
                                                                     "l-*-29400"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-29395")))
                                                                (hygiene
                                                                  guile))
                                                             k-29516))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29423"
                                                               "l-*-29424"
                                                               "l-*-29425"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29408"
                                                               "l-*-29409"
                                                               "l-*-29410"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29398"
                                                               "l-*-29399"
                                                               "l-*-29400"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-29395")))
                                                          (hygiene guile))
                                                       (cons e1-29517
                                                             e2-29518))))
                                         tmp-29512)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         x-29449
                                         clause-29503)))))
                               (let ((tmp-29526
                                       (f-29500
                                         (car clauses-29504)
                                         (cdr clauses-29504))))
                                 (let ((tmp-29529
                                         ($sc-dispatch
                                           clause-29503
                                           '(each-any any . each-any))))
                                   (if tmp-29529
                                     (@apply
                                       (lambda (k-29533 e1-29534 e2-29535)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("l-*-29439"
                                                       "l-*-29440"
                                                       "l-*-29441"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("l-*-29435"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("l-*-29408"
                                                       "l-*-29409"
                                                       "l-*-29410"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("l-*-29398"
                                                       "l-*-29399"
                                                       "l-*-29400"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-29395")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-29439"
                                                             "l-*-29440"
                                                             "l-*-29441"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-29435"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-29408"
                                                             "l-*-29409"
                                                             "l-*-29410"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-29398"
                                                             "l-*-29399"
                                                             "l-*-29400"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-29395")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-29439"
                                                             "l-*-29440"
                                                             "l-*-29441"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-29435"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-29408"
                                                             "l-*-29409"
                                                             "l-*-29410"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-29398"
                                                             "l-*-29399"
                                                             "l-*-29400"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-29395")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-29439"
                                                                   "l-*-29440"
                                                                   "l-*-29441"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("l-*-29435"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-29408"
                                                                   "l-*-29409"
                                                                   "l-*-29410"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-29398"
                                                                   "l-*-29399"
                                                                   "l-*-29400"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("l-*-29395")))
                                                              (hygiene guile))
                                                           k-29533))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-29439"
                                                             "l-*-29440"
                                                             "l-*-29441"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-29435"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-29408"
                                                             "l-*-29409"
                                                             "l-*-29410"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-29398"
                                                             "l-*-29399"
                                                             "l-*-29400"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-29395")))
                                                        (hygiene guile))
                                                     (cons e1-29534 e2-29535))
                                               tmp-29526))
                                       tmp-29529)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       x-29449
                                       clause-29503))))))))
                        (f-29500 m1-29456 m2-29457))))
                (let ((body-29459 tmp-29458))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("l-*-29406"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("l-*-29398" "l-*-29399" "l-*-29400"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29395")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(body)
                                          #((top))
                                          #("l-*-29406"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("l-*-29398"
                                            "l-*-29399"
                                            "l-*-29400"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-29395")))
                                       (hygiene guile))
                                    e-29455))
                        body-29459))))
            tmp-29451)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-29449))))))

(define make-variable-transformer
  (lambda (proc-29553)
    (if (procedure? proc-29553)
      (letrec*
        ((trans-29554
           (lambda (x-29560) (proc-29553 x-29560))))
        (begin
          (set-procedure-property!
            trans-29554
            'variable-transformer
            #t)
          trans-29554))
      (error "variable transformer not a procedure"
             proc-29553))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (x-29592)
      (let ((tmp-29594 ($sc-dispatch x-29592 '(_ any))))
        (if tmp-29594
          (@apply
            (lambda (e-29598)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("l-*-29567"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-29564")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("l-*-29567"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("l-*-29564")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("l-*-29567"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-29564")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("l-*-29567"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-29564")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("l-*-29567"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-29564")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("l-*-29567"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-29564")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("l-*-29567"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-29564")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-29567"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-29564")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("l-*-29567"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-29564")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("l-*-29567"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-29564")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage
                                            #(e)
                                            #((top))
                                            #("l-*-29567"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-29564")))
                                         (hygiene guile))
                                      e-29598))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-29567"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-29564")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-29567"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-29564")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-29567"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-29564")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage
                                            #(e)
                                            #((top))
                                            #("l-*-29567"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-29564")))
                                         (hygiene guile))
                                      (cons e-29598
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("l-*-29567"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-29564")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("l-*-29567"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-29564")))
                                                (hygiene guile)))))))))
            tmp-29594)
          (let ((tmp-29599
                  ($sc-dispatch
                    x-29592
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-29564")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if tmp-29599
                  (@apply
                    (lambda (id-29603
                             exp1-29604
                             var-29605
                             val-29606
                             exp2-29607)
                      (if (identifier? id-29603)
                        (identifier? var-29605)
                        #f))
                    tmp-29599)
                  #f)
              (@apply
                (lambda (id-29608
                         exp1-29609
                         var-29610
                         val-29611
                         exp2-29612)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("l-*-29582"
                                "l-*-29583"
                                "l-*-29584"
                                "l-*-29585"
                                "l-*-29586"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29564")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("l-*-29582"
                                      "l-*-29583"
                                      "l-*-29584"
                                      "l-*-29585"
                                      "l-*-29586"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-29564")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("l-*-29582"
                                       "l-*-29583"
                                       "l-*-29584"
                                       "l-*-29585"
                                       "l-*-29586"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("l-*-29564")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("l-*-29582"
                                         "l-*-29583"
                                         "l-*-29584"
                                         "l-*-29585"
                                         "l-*-29586"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-29564")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("l-*-29582"
                                         "l-*-29583"
                                         "l-*-29584"
                                         "l-*-29585"
                                         "l-*-29586"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-29564")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-29582"
                                            "l-*-29583"
                                            "l-*-29584"
                                            "l-*-29585"
                                            "l-*-29586"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-29564")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-29582"
                                            "l-*-29583"
                                            "l-*-29584"
                                            "l-*-29585"
                                            "l-*-29586"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-29564")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("l-*-29582"
                                             "l-*-29583"
                                             "l-*-29584"
                                             "l-*-29585"
                                             "l-*-29586"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x)
                                           #((top))
                                           #("l-*-29564")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-29582"
                                                        "l-*-29583"
                                                        "l-*-29584"
                                                        "l-*-29585"
                                                        "l-*-29586"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-29564")))
                                                   (hygiene guile))
                                                var-29610
                                                val-29611)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-29582"
                                                        "l-*-29583"
                                                        "l-*-29584"
                                                        "l-*-29585"
                                                        "l-*-29586"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-29564")))
                                                   (hygiene guile))
                                                exp2-29612))
                                    (list (cons id-29608
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("l-*-29582"
                                                         "l-*-29583"
                                                         "l-*-29584"
                                                         "l-*-29585"
                                                         "l-*-29586"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-29564")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("l-*-29582"
                                                         "l-*-29583"
                                                         "l-*-29584"
                                                         "l-*-29585"
                                                         "l-*-29586"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-29564")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-29582"
                                                        "l-*-29583"
                                                        "l-*-29584"
                                                        "l-*-29585"
                                                        "l-*-29586"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-29564")))
                                                   (hygiene guile))
                                                (cons exp1-29609
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29582"
                                                               "l-*-29583"
                                                               "l-*-29584"
                                                               "l-*-29585"
                                                               "l-*-29586"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-29564")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29582"
                                                               "l-*-29583"
                                                               "l-*-29584"
                                                               "l-*-29585"
                                                               "l-*-29586"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-29564")))
                                                          (hygiene guile))))))
                                    (list id-29608
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-29582"
                                                        "l-*-29583"
                                                        "l-*-29584"
                                                        "l-*-29585"
                                                        "l-*-29586"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-29564")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-29582"
                                                              "l-*-29583"
                                                              "l-*-29584"
                                                              "l-*-29585"
                                                              "l-*-29586"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("l-*-29564")))
                                                         (hygiene guile))
                                                      id-29608))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-29582"
                                                        "l-*-29583"
                                                        "l-*-29584"
                                                        "l-*-29585"
                                                        "l-*-29586"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-29564")))
                                                   (hygiene guile))
                                                exp1-29609))))))
                tmp-29599)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-29592))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (x-29644)
      (let ((tmp-29646
              ($sc-dispatch
                x-29644
                '(_ (any . any) any . each-any))))
        (if tmp-29646
          (@apply
            (lambda (id-29650 args-29651 b0-29652 b1-29653)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("l-*-29626"
                            "l-*-29627"
                            "l-*-29628"
                            "l-*-29629"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-29623")))
                       (hygiene guile))
                    id-29650
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("l-*-29626"
                                  "l-*-29627"
                                  "l-*-29628"
                                  "l-*-29629"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-29623")))
                             (hygiene guile))
                          (cons args-29651 (cons b0-29652 b1-29653)))))
            tmp-29646)
          (let ((tmp-29654 ($sc-dispatch x-29644 '(_ any any))))
            (if (if tmp-29654
                  (@apply
                    (lambda (id-29658 val-29659)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("l-*-29636" "l-*-29637"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29623")))
                           (hygiene guile))))
                    tmp-29654)
                  #f)
              (@apply
                (lambda (id-29660 val-29661)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("l-*-29640" "l-*-29641"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29623")))
                           (hygiene guile))
                        id-29660
                        val-29661))
                tmp-29654)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-29644))))))))

