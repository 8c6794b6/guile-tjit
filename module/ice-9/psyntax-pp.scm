(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{top-level-eval-hook 4373}#
     (lambda (#{x 35449}# #{mod 35450}#)
       (primitive-eval #{x 35449}#)))
   (#{maybe-name-value! 4378}#
     (lambda (#{name 18994}# #{val 18995}#)
       (if (if (struct? #{val 18995}#)
             (eq? (struct-vtable #{val 18995}#)
                  (vector-ref %expanded-vtables 14))
             #f)
         (let ((#{meta 19002}# (struct-ref #{val 18995}# 1)))
           (if (not (assq 'name #{meta 19002}#))
             (let ((#{v 19007}#
                     (cons (cons 'name #{name 18994}#) #{meta 19002}#)))
               (struct-set! #{val 18995}# 1 #{v 19007}#)))))))
   (#{build-call 4380}#
     (lambda (#{source 18739}#
              #{fun-exp 18740}#
              #{arg-exps 18741}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 11)
         #{source 18739}#
         #{fun-exp 18740}#
         #{arg-exps 18741}#)))
   (#{build-conditional 4381}#
     (lambda (#{source 18747}#
              #{test-exp 18748}#
              #{then-exp 18749}#
              #{else-exp 18750}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 10)
         #{source 18747}#
         #{test-exp 18748}#
         #{then-exp 18749}#
         #{else-exp 18750}#)))
   (#{build-dynlet 4382}#
     (lambda (#{source 18757}#
              #{fluids 18758}#
              #{vals 18759}#
              #{body 18760}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 18)
         #{source 18757}#
         #{fluids 18758}#
         #{vals 18759}#
         #{body 18760}#)))
   (#{build-lexical-reference 4383}#
     (lambda (#{type 35451}#
              #{source 35452}#
              #{name 35453}#
              #{var 35454}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 3)
         #{source 35452}#
         #{name 35453}#
         #{var 35454}#)))
   (#{build-lexical-assignment 4384}#
     (lambda (#{source 18767}#
              #{name 18768}#
              #{var 18769}#
              #{exp 18770}#)
       (begin
         (if (if (struct? #{exp 18770}#)
               (eq? (struct-vtable #{exp 18770}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 18786}# (struct-ref #{exp 18770}# 1)))
             (if (not (assq 'name #{meta 18786}#))
               (let ((#{v 18793}#
                       (cons (cons 'name #{name 18768}#) #{meta 18786}#)))
                 (struct-set! #{exp 18770}# 1 #{v 18793}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 4)
           #{source 18767}#
           #{name 18768}#
           #{var 18769}#
           #{exp 18770}#))))
   (#{analyze-variable 4385}#
     (lambda (#{mod 35460}#
              #{var 35461}#
              #{modref-cont 35462}#
              #{bare-cont 35463}#)
       (if (not #{mod 35460}#)
         (#{bare-cont 35463}# #{var 35461}#)
         (let ((#{kind 35464}# (car #{mod 35460}#))
               (#{mod 35465}# (cdr #{mod 35460}#)))
           (if (eqv? #{kind 35464}# 'public)
             (#{modref-cont 35462}#
               #{mod 35465}#
               #{var 35461}#
               #t)
             (if (eqv? #{kind 35464}# 'private)
               (if (not (equal?
                          #{mod 35465}#
                          (module-name (current-module))))
                 (#{modref-cont 35462}#
                   #{mod 35465}#
                   #{var 35461}#
                   #f)
                 (#{bare-cont 35463}# #{var 35461}#))
               (if (eqv? #{kind 35464}# 'bare)
                 (#{bare-cont 35463}# #{var 35461}#)
                 (if (eqv? #{kind 35464}# 'hygiene)
                   (if (if (not (equal?
                                  #{mod 35465}#
                                  (module-name (current-module))))
                         (module-variable
                           (resolve-module #{mod 35465}#)
                           #{var 35461}#)
                         #f)
                     (#{modref-cont 35462}#
                       #{mod 35465}#
                       #{var 35461}#
                       #f)
                     (#{bare-cont 35463}# #{var 35461}#))
                   (syntax-violation
                     #f
                     "bad module kind"
                     #{var 35461}#
                     #{mod 35465}#)))))))))
   (#{build-global-reference 4386}#
     (lambda (#{source 35480}# #{var 35481}# #{mod 35482}#)
       (#{analyze-variable 4385}#
         #{mod 35482}#
         #{var 35481}#
         (lambda (#{mod 35485}# #{var 35486}# #{public? 35487}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 5)
             #{source 35480}#
             #{mod 35485}#
             #{var 35486}#
             #{public? 35487}#))
         (lambda (#{var 35494}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 7)
             #{source 35480}#
             #{var 35494}#)))))
   (#{build-global-assignment 4387}#
     (lambda (#{source 18802}#
              #{var 18803}#
              #{exp 18804}#
              #{mod 18805}#)
       (begin
         (if (if (struct? #{exp 18804}#)
               (eq? (struct-vtable #{exp 18804}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 18821}# (struct-ref #{exp 18804}# 1)))
             (if (not (assq 'name #{meta 18821}#))
               (let ((#{v 18828}#
                       (cons (cons 'name #{var 18803}#) #{meta 18821}#)))
                 (struct-set! #{exp 18804}# 1 #{v 18828}#)))))
         (#{analyze-variable 4385}#
           #{mod 18805}#
           #{var 18803}#
           (lambda (#{mod 18833}# #{var 18834}# #{public? 18835}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{source 18802}#
               #{mod 18833}#
               #{var 18834}#
               #{public? 18835}#
               #{exp 18804}#))
           (lambda (#{var 18843}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{source 18802}#
               #{var 18843}#
               #{exp 18804}#))))))
   (#{build-global-definition 4388}#
     (lambda (#{source 35499}# #{var 35500}# #{exp 35501}#)
       (begin
         (if (if (struct? #{exp 35501}#)
               (eq? (struct-vtable #{exp 35501}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 35517}# (struct-ref #{exp 35501}# 1)))
             (if (not (assq 'name #{meta 35517}#))
               (let ((#{v 35524}#
                       (cons (cons 'name #{var 35500}#) #{meta 35517}#)))
                 (struct-set! #{exp 35501}# 1 #{v 35524}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 9)
           #{source 35499}#
           #{var 35500}#
           #{exp 35501}#))))
   (#{build-simple-lambda 4389}#
     (lambda (#{src 18849}#
              #{req 18850}#
              #{rest 18851}#
              #{vars 18852}#
              #{meta 18853}#
              #{exp 18854}#)
       (let ((#{body 18860}#
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 15)
                 #{src 18849}#
                 #{req 18850}#
                 #f
                 #{rest 18851}#
                 #f
                 '()
                 #{vars 18852}#
                 #{exp 18854}#
                 #f)))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 14)
           #{src 18849}#
           #{meta 18853}#
           #{body 18860}#))))
   (#{build-primcall 4392}#
     (lambda (#{src 18872}# #{name 18873}# #{args 18874}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 12)
         #{src 18872}#
         #{name 18873}#
         #{args 18874}#)))
   (#{build-sequence 4395}#
     (lambda (#{src 35532}# #{exps 35533}#)
       (if (null? (cdr #{exps 35533}#))
         (car #{exps 35533}#)
         (let ((#{head 35537}# (car #{exps 35533}#))
               (#{tail 35538}#
                 (#{build-sequence 4395}# #f (cdr #{exps 35533}#))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             #{src 35532}#
             #{head 35537}#
             #{tail 35538}#)))))
   (#{build-named-let 4397}#
     (lambda (#{src 18880}#
              #{ids 18881}#
              #{vars 18882}#
              #{val-exps 18883}#
              #{body-exp 18884}#)
       (let ((#{f 18885}# (car #{vars 18882}#))
             (#{f-name 18886}# (car #{ids 18881}#))
             (#{vars 18887}# (cdr #{vars 18882}#))
             (#{ids 18888}# (cdr #{ids 18881}#)))
         (let ((#{proc 18889}#
                 (let ((#{body 18909}#
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 15)
                           #{src 18880}#
                           #{ids 18888}#
                           #f
                           #f
                           #f
                           '()
                           #{vars 18887}#
                           #{body-exp 18884}#
                           #f)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 14)
                     #{src 18880}#
                     '()
                     #{body 18909}#))))
           (begin
             (if (if (struct? #{proc 18889}#)
                   (eq? (struct-vtable #{proc 18889}#)
                        (vector-ref %expanded-vtables 14))
                   #f)
               (let ((#{meta 18933}# (struct-ref #{proc 18889}# 1)))
                 (if (not (assq 'name #{meta 18933}#))
                   (let ((#{v 18940}#
                           (cons (cons 'name #{f-name 18886}#)
                                 #{meta 18933}#)))
                     (struct-set! #{proc 18889}# 1 #{v 18940}#)))))
             (for-each
               #{maybe-name-value! 4378}#
               #{ids 18888}#
               #{val-exps 18883}#)
             (let ((#{names 18964}# (list #{f-name 18886}#))
                   (#{gensyms 18965}# (list #{f 18885}#))
                   (#{vals 18966}# (list #{proc 18889}#))
                   (#{body 18967}#
                     (let ((#{fun-exp 18971}#
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 3)
                               #{src 18880}#
                               #{f-name 18886}#
                               #{f 18885}#)))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 11)
                         #{src 18880}#
                         #{fun-exp 18971}#
                         #{val-exps 18883}#))))
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 17)
                 #{src 18880}#
                 #f
                 #{names 18964}#
                 #{gensyms 18965}#
                 #{vals 18966}#
                 #{body 18967}#)))))))
   (#{build-letrec 4398}#
     (lambda (#{src 18987}#
              #{in-order? 18988}#
              #{ids 18989}#
              #{vars 18990}#
              #{val-exps 18991}#
              #{body-exp 18992}#)
       (if (null? #{vars 18990}#)
         #{body-exp 18992}#
         (begin
           (for-each
             #{maybe-name-value! 4378}#
             #{ids 18989}#
             #{val-exps 18991}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 17)
             #{src 18987}#
             #{in-order? 18988}#
             #{ids 18989}#
             #{vars 18990}#
             #{val-exps 18991}#
             #{body-exp 18992}#)))))
   (#{source-annotation 4407}#
     (lambda (#{x 19018}#)
       (if (if (vector? #{x 19018}#)
             (if (= (vector-length #{x 19018}#) 4)
               (eq? (vector-ref #{x 19018}# 0) 'syntax-object)
               #f)
             #f)
         (#{source-annotation 4407}#
           (vector-ref #{x 19018}# 1))
         (if (pair? #{x 19018}#)
           (let ((#{props 19033}# (source-properties #{x 19018}#)))
             (if (pair? #{props 19033}#) #{props 19033}# #f))
           #f))))
   (#{extend-env 4408}#
     (lambda (#{labels 19035}# #{bindings 19036}# #{r 19037}#)
       (if (null? #{labels 19035}#)
         #{r 19037}#
         (#{extend-env 4408}#
           (cdr #{labels 19035}#)
           (cdr #{bindings 19036}#)
           (cons (cons (car #{labels 19035}#)
                       (car #{bindings 19036}#))
                 #{r 19037}#)))))
   (#{extend-var-env 4409}#
     (lambda (#{labels 19038}# #{vars 19039}# #{r 19040}#)
       (if (null? #{labels 19038}#)
         #{r 19040}#
         (#{extend-var-env 4409}#
           (cdr #{labels 19038}#)
           (cdr #{vars 19039}#)
           (cons (cons (car #{labels 19038}#)
                       (cons 'lexical (car #{vars 19039}#)))
                 #{r 19040}#)))))
   (#{macros-only-env 4410}#
     (lambda (#{r 19041}#)
       (if (null? #{r 19041}#)
         '()
         (let ((#{a 19042}# (car #{r 19041}#)))
           (if (let ((#{t 19045}# (car (cdr #{a 19042}#))))
                 (if (eq? #{t 19045}# 'macro)
                   #t
                   (eq? #{t 19045}# 'syntax-parameter)))
             (cons #{a 19042}#
                   (#{macros-only-env 4410}# (cdr #{r 19041}#)))
             (#{macros-only-env 4410}# (cdr #{r 19041}#)))))))
   (#{global-extend 4411}#
     (lambda (#{type 19047}# #{sym 19048}# #{val 19049}#)
       (module-define!
         (current-module)
         #{sym 19048}#
         (make-syntax-transformer
           #{sym 19048}#
           #{type 19047}#
           #{val 19049}#))))
   (#{id? 4413}#
     (lambda (#{x 11971}#)
       (if (symbol? #{x 11971}#)
         #t
         (if (if (vector? #{x 11971}#)
               (if (= (vector-length #{x 11971}#) 4)
                 (eq? (vector-ref #{x 11971}# 0) 'syntax-object)
                 #f)
               #f)
           (symbol? (vector-ref #{x 11971}# 1))
           #f))))
   (#{gen-labels 4416}#
     (lambda (#{ls 19059}#)
       (if (null? #{ls 19059}#)
         '()
         (cons (symbol->string (gensym "i"))
               (#{gen-labels 4416}# (cdr #{ls 19059}#))))))
   (#{make-binding-wrap 4427}#
     (lambda (#{ids 19063}# #{labels 19064}# #{w 19065}#)
       (if (null? #{ids 19063}#)
         #{w 19065}#
         (cons (car #{w 19065}#)
               (cons (let ((#{labelvec 19066}#
                             (list->vector #{labels 19064}#)))
                       (let ((#{n 19067}# (vector-length #{labelvec 19066}#)))
                         (let ((#{symnamevec 19068}# (make-vector #{n 19067}#))
                               (#{marksvec 19069}# (make-vector #{n 19067}#)))
                           (begin
                             (letrec*
                               ((#{f 19070}#
                                  (lambda (#{ids 19269}# #{i 19270}#)
                                    (if (not (null? #{ids 19269}#))
                                      (call-with-values
                                        (lambda ()
                                          (let ((#{x 19273}#
                                                  (car #{ids 19269}#)))
                                            (if (if (vector? #{x 19273}#)
                                                  (if (= (vector-length
                                                           #{x 19273}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{x 19273}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (values
                                                (vector-ref #{x 19273}# 1)
                                                (let ((#{m1 19289}#
                                                        (car #{w 19065}#))
                                                      (#{m2 19290}#
                                                        (car (vector-ref
                                                               #{x 19273}#
                                                               2))))
                                                  (if (null? #{m2 19290}#)
                                                    #{m1 19289}#
                                                    (append
                                                      #{m1 19289}#
                                                      #{m2 19290}#))))
                                              (values
                                                #{x 19273}#
                                                (car #{w 19065}#)))))
                                        (lambda (#{symname 19310}#
                                                 #{marks 19311}#)
                                          (begin
                                            (vector-set!
                                              #{symnamevec 19068}#
                                              #{i 19270}#
                                              #{symname 19310}#)
                                            (vector-set!
                                              #{marksvec 19069}#
                                              #{i 19270}#
                                              #{marks 19311}#)
                                            (#{f 19070}#
                                              (cdr #{ids 19269}#)
                                              (#{1+}# #{i 19270}#)))))))))
                               (#{f 19070}# #{ids 19063}# 0))
                             (vector
                               'ribcage
                               #{symnamevec 19068}#
                               #{marksvec 19069}#
                               #{labelvec 19066}#)))))
                     (cdr #{w 19065}#))))))
   (#{same-marks? 4431}#
     (lambda (#{x 35539}# #{y 35540}#)
       (if (eq? #{x 35539}# #{y 35540}#)
         (eq? #{x 35539}# #{y 35540}#)
         (if (not (null? #{x 35539}#))
           (if (not (null? #{y 35540}#))
             (if (eq? (car #{x 35539}#) (car #{y 35540}#))
               (#{same-marks? 4431}#
                 (cdr #{x 35539}#)
                 (cdr #{y 35540}#))
               #f)
             #f)
           #f))))
   (#{id-var-name 4432}#
     (lambda (#{id 35548}# #{w 35549}# #{mod 35550}#)
       (letrec*
         ((#{search 35551}#
            (lambda (#{sym 35617}#
                     #{subst 35618}#
                     #{marks 35619}#
                     #{mod 35620}#)
              (if (null? #{subst 35618}#)
                (values #f #{marks 35619}#)
                (let ((#{fst 35621}# (car #{subst 35618}#)))
                  (if (eq? #{fst 35621}# 'shift)
                    (#{search 35551}#
                      #{sym 35617}#
                      (cdr #{subst 35618}#)
                      (cdr #{marks 35619}#)
                      #{mod 35620}#)
                    (let ((#{symnames 35623}# (vector-ref #{fst 35621}# 1)))
                      (if (vector? #{symnames 35623}#)
                        (#{search-vector-rib 35553}#
                          #{sym 35617}#
                          #{subst 35618}#
                          #{marks 35619}#
                          #{symnames 35623}#
                          #{fst 35621}#
                          #{mod 35620}#)
                        (#{search-list-rib 35552}#
                          #{sym 35617}#
                          #{subst 35618}#
                          #{marks 35619}#
                          #{symnames 35623}#
                          #{fst 35621}#
                          #{mod 35620}#))))))))
          (#{search-list-rib 35552}#
            (lambda (#{sym 35798}#
                     #{subst 35799}#
                     #{marks 35800}#
                     #{symnames 35801}#
                     #{ribcage 35802}#
                     #{mod 35803}#)
              (letrec*
                ((#{f 35804}#
                   (lambda (#{symnames 35807}# #{i 35808}#)
                     (if (null? #{symnames 35807}#)
                       (#{search 35551}#
                         #{sym 35798}#
                         (cdr #{subst 35799}#)
                         #{marks 35800}#
                         #{mod 35803}#)
                       (if (if (eq? (car #{symnames 35807}#) #{sym 35798}#)
                             (#{same-marks? 4431}#
                               #{marks 35800}#
                               (list-ref
                                 (vector-ref #{ribcage 35802}# 2)
                                 #{i 35808}#))
                             #f)
                         (let ((#{n 35954}#
                                 (list-ref
                                   (vector-ref #{ribcage 35802}# 3)
                                   #{i 35808}#)))
                           (if (pair? #{n 35954}#)
                             (if (equal? #{mod 35803}# (car #{n 35954}#))
                               (values (cdr #{n 35954}#) #{marks 35800}#)
                               (#{f 35804}#
                                 (cdr #{symnames 35807}#)
                                 (#{1+}# #{i 35808}#)))
                             (values #{n 35954}# #{marks 35800}#)))
                         (#{f 35804}#
                           (cdr #{symnames 35807}#)
                           (#{1+}# #{i 35808}#)))))))
                (#{f 35804}# #{symnames 35801}# 0))))
          (#{search-vector-rib 35553}#
            (lambda (#{sym 35959}#
                     #{subst 35960}#
                     #{marks 35961}#
                     #{symnames 35962}#
                     #{ribcage 35963}#
                     #{mod 35964}#)
              (let ((#{n 35965}# (vector-length #{symnames 35962}#)))
                (letrec*
                  ((#{f 35966}#
                     (lambda (#{i 35969}#)
                       (if (= #{i 35969}# #{n 35965}#)
                         (#{search 35551}#
                           #{sym 35959}#
                           (cdr #{subst 35960}#)
                           #{marks 35961}#
                           #{mod 35964}#)
                         (if (if (eq? (vector-ref
                                        #{symnames 35962}#
                                        #{i 35969}#)
                                      #{sym 35959}#)
                               (#{same-marks? 4431}#
                                 #{marks 35961}#
                                 (vector-ref
                                   (vector-ref #{ribcage 35963}# 2)
                                   #{i 35969}#))
                               #f)
                           (let ((#{n 36116}#
                                   (vector-ref
                                     (vector-ref #{ribcage 35963}# 3)
                                     #{i 35969}#)))
                             (if (pair? #{n 36116}#)
                               (if (equal? #{mod 35964}# (car #{n 36116}#))
                                 (values (cdr #{n 36116}#) #{marks 35961}#)
                                 (#{f 35966}# (#{1+}# #{i 35969}#)))
                               (values #{n 36116}# #{marks 35961}#)))
                           (#{f 35966}# (#{1+}# #{i 35969}#)))))))
                  (#{f 35966}# 0))))))
         (if (symbol? #{id 35548}#)
           (let ((#{t 35554}#
                   (#{search 35551}#
                     #{id 35548}#
                     (cdr #{w 35549}#)
                     (car #{w 35549}#)
                     #{mod 35550}#)))
             (if #{t 35554}# #{t 35554}# #{id 35548}#))
           (if (if (vector? #{id 35548}#)
                 (if (= (vector-length #{id 35548}#) 4)
                   (eq? (vector-ref #{id 35548}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{id 35569}# (vector-ref #{id 35548}# 1))
                   (#{w1 35570}# (vector-ref #{id 35548}# 2))
                   (#{mod 35571}# (vector-ref #{id 35548}# 3)))
               (let ((#{marks 35572}#
                       (let ((#{m1 35582}# (car #{w 35549}#))
                             (#{m2 35583}# (car #{w1 35570}#)))
                         (if (null? #{m2 35583}#)
                           #{m1 35582}#
                           (append #{m1 35582}# #{m2 35583}#)))))
                 (call-with-values
                   (lambda ()
                     (#{search 35551}#
                       #{id 35569}#
                       (cdr #{w 35549}#)
                       #{marks 35572}#
                       #{mod 35571}#))
                   (lambda (#{new-id 35603}# #{marks 35604}#)
                     (if #{new-id 35603}#
                       #{new-id 35603}#
                       (let ((#{t 35612}#
                               (#{search 35551}#
                                 #{id 35569}#
                                 (cdr #{w1 35570}#)
                                 #{marks 35604}#
                                 #{mod 35571}#)))
                         (if #{t 35612}# #{t 35612}# #{id 35569}#)))))))
             (syntax-violation
               'id-var-name
               "invalid id"
               #{id 35548}#))))))
   (#{resolve-identifier 4433}#
     (lambda (#{id 19318}#
              #{w 19319}#
              #{r 19320}#
              #{mod 19321}#
              #{resolve-syntax-parameters? 19322}#)
       (let ((#{n 19326}#
               (#{id-var-name 4432}#
                 #{id 19318}#
                 #{w 19319}#
                 #{mod 19321}#)))
         (if (if (vector? #{n 19326}#)
               (if (= (vector-length #{n 19326}#) 4)
                 (eq? (vector-ref #{n 19326}# 0) 'syntax-object)
                 #f)
               #f)
           (#{resolve-identifier 4433}#
             #{n 19326}#
             #{w 19319}#
             #{r 19320}#
             #{mod 19321}#
             #{resolve-syntax-parameters? 19322}#)
           (if (symbol? #{n 19326}#)
             (let ((#{mod 19341}#
                     (if (if (vector? #{id 19318}#)
                           (if (= (vector-length #{id 19318}#) 4)
                             (eq? (vector-ref #{id 19318}# 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{id 19318}# 3)
                       #{mod 19321}#)))
               (let ((#{b 19342}#
                       (let ((#{b 19345}#
                               (let ((#{t 19346}#
                                       (begin
                                         (if (if (not #{mod 19341}#)
                                               (current-module)
                                               #f)
                                           (warn "module system is booted, we should have a module"
                                                 #{n 19326}#))
                                         (let ((#{v 19395}#
                                                 (module-variable
                                                   (if #{mod 19341}#
                                                     (resolve-module
                                                       (cdr #{mod 19341}#))
                                                     (current-module))
                                                   #{n 19326}#)))
                                           (if #{v 19395}#
                                             (if (variable-bound? #{v 19395}#)
                                               (let ((#{val 19404}#
                                                       (variable-ref
                                                         #{v 19395}#)))
                                                 (if (macro? #{val 19404}#)
                                                   (if (macro-type
                                                         #{val 19404}#)
                                                     (cons (macro-type
                                                             #{val 19404}#)
                                                           (macro-binding
                                                             #{val 19404}#))
                                                     #f)
                                                   #f))
                                               #f)
                                             #f)))))
                                 (if #{t 19346}# #{t 19346}# '(global)))))
                         (if (if #{resolve-syntax-parameters? 19322}#
                               (eq? (car #{b 19345}#) 'syntax-parameter)
                               #f)
                           (let ((#{t 19413}#
                                   (assq-ref #{r 19320}# (cdr #{b 19345}#))))
                             (if #{t 19413}#
                               #{t 19413}#
                               (cons 'macro (car (cdr #{b 19345}#)))))
                           #{b 19345}#))))
                 (if (eq? (car #{b 19342}#) 'global)
                   (values 'global #{n 19326}# #{mod 19341}#)
                   (values
                     (car #{b 19342}#)
                     (cdr #{b 19342}#)
                     #{mod 19341}#))))
             (if (string? #{n 19326}#)
               (let ((#{mod 19419}#
                       (if (if (vector? #{id 19318}#)
                             (if (= (vector-length #{id 19318}#) 4)
                               (eq? (vector-ref #{id 19318}# 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{id 19318}# 3)
                         #{mod 19321}#)))
                 (let ((#{b 19420}#
                         (let ((#{b 19423}#
                                 (let ((#{t 19424}#
                                         (assq-ref #{r 19320}# #{n 19326}#)))
                                   (if #{t 19424}#
                                     #{t 19424}#
                                     '(displaced-lexical)))))
                           (if (if #{resolve-syntax-parameters? 19322}#
                                 (eq? (car #{b 19423}#) 'syntax-parameter)
                                 #f)
                             (let ((#{t 19425}#
                                     (assq-ref #{r 19320}# (cdr #{b 19423}#))))
                               (if #{t 19425}#
                                 #{t 19425}#
                                 (cons 'macro (car (cdr #{b 19423}#)))))
                             #{b 19423}#))))
                   (values
                     (car #{b 19420}#)
                     (cdr #{b 19420}#)
                     #{mod 19419}#)))
               (error "unexpected id-var-name"
                      #{id 19318}#
                      #{w 19319}#
                      #{n 19326}#)))))))
   (#{free-id=? 4434}#
     (lambda (#{i 19438}# #{j 19439}#)
       (let ((#{mi 19440}#
               (if (if (vector? #{i 19438}#)
                     (if (= (vector-length #{i 19438}#) 4)
                       (eq? (vector-ref #{i 19438}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{i 19438}# 3)
                 #f)))
         (let ((#{mj 19441}#
                 (if (if (vector? #{j 19439}#)
                       (if (= (vector-length #{j 19439}#) 4)
                         (eq? (vector-ref #{j 19439}# 0) 'syntax-object)
                         #f)
                       #f)
                   (vector-ref #{j 19439}# 3)
                   #f)))
           (let ((#{ni 19442}#
                   (#{id-var-name 4432}#
                     #{i 19438}#
                     '(())
                     #{mi 19440}#)))
             (let ((#{nj 19443}#
                     (#{id-var-name 4432}#
                       #{j 19439}#
                       '(())
                       #{mj 19441}#)))
               (if (if (vector? #{ni 19442}#)
                     (if (= (vector-length #{ni 19442}#) 4)
                       (eq? (vector-ref #{ni 19442}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{free-id=? 4434}# #{ni 19442}# #{j 19439}#)
                 (if (if (vector? #{nj 19443}#)
                       (if (= (vector-length #{nj 19443}#) 4)
                         (eq? (vector-ref #{nj 19443}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{free-id=? 4434}# #{i 19438}# #{nj 19443}#)
                   (if (symbol? #{ni 19442}#)
                     (if (eq? #{nj 19443}#
                              (if (if (vector? #{j 19439}#)
                                    (if (= (vector-length #{j 19439}#) 4)
                                      (eq? (vector-ref #{j 19439}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (vector-ref #{j 19439}# 1)
                                #{j 19439}#))
                       (if (let ((#{bi 19515}#
                                   (module-variable
                                     (if #{mi 19440}#
                                       (resolve-module (cdr #{mi 19440}#))
                                       (current-module))
                                     (if (if (vector? #{i 19438}#)
                                           (if (= (vector-length #{i 19438}#)
                                                  4)
                                             (eq? (vector-ref #{i 19438}# 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (vector-ref #{i 19438}# 1)
                                       #{i 19438}#))))
                             (if #{bi 19515}#
                               (eq? #{bi 19515}#
                                    (module-variable
                                      (if #{mj 19441}#
                                        (resolve-module (cdr #{mj 19441}#))
                                        (current-module))
                                      (if (if (vector? #{j 19439}#)
                                            (if (= (vector-length #{j 19439}#)
                                                   4)
                                              (eq? (vector-ref #{j 19439}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (vector-ref #{j 19439}# 1)
                                        #{j 19439}#)))
                               (if (not (module-variable
                                          (if #{mj 19441}#
                                            (resolve-module (cdr #{mj 19441}#))
                                            (current-module))
                                          (if (if (vector? #{j 19439}#)
                                                (if (= (vector-length
                                                         #{j 19439}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{j 19439}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{j 19439}# 1)
                                            #{j 19439}#)))
                                 (eq? #{ni 19442}# #{nj 19443}#)
                                 #f)))
                         (eq? (module-variable
                                (if #{mi 19440}#
                                  (resolve-module (cdr #{mi 19440}#))
                                  (current-module))
                                (if (if (vector? #{i 19438}#)
                                      (if (= (vector-length #{i 19438}#) 4)
                                        (eq? (vector-ref #{i 19438}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (vector-ref #{i 19438}# 1)
                                  #{i 19438}#))
                              (module-variable
                                (if #{mj 19441}#
                                  (resolve-module (cdr #{mj 19441}#))
                                  (current-module))
                                (if (if (vector? #{j 19439}#)
                                      (if (= (vector-length #{j 19439}#) 4)
                                        (eq? (vector-ref #{j 19439}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (vector-ref #{j 19439}# 1)
                                  #{j 19439}#)))
                         #f)
                       #f)
                     (equal? #{ni 19442}# #{nj 19443}#))))))))))
   (#{bound-id=? 4435}#
     (lambda (#{i 19708}# #{j 19709}#)
       (if (if (if (vector? #{i 19708}#)
                 (if (= (vector-length #{i 19708}#) 4)
                   (eq? (vector-ref #{i 19708}# 0) 'syntax-object)
                   #f)
                 #f)
             (if (vector? #{j 19709}#)
               (if (= (vector-length #{j 19709}#) 4)
                 (eq? (vector-ref #{j 19709}# 0) 'syntax-object)
                 #f)
               #f)
             #f)
         (if (eq? (vector-ref #{i 19708}# 1)
                  (vector-ref #{j 19709}# 1))
           (#{same-marks? 4431}#
             (car (vector-ref #{i 19708}# 2))
             (car (vector-ref #{j 19709}# 2)))
           #f)
         (eq? #{i 19708}# #{j 19709}#))))
   (#{valid-bound-ids? 4436}#
     (lambda (#{ids 19878}#)
       (if (letrec*
             ((#{all-ids? 19879}#
                (lambda (#{ids 20076}#)
                  (if (null? #{ids 20076}#)
                    (null? #{ids 20076}#)
                    (if (let ((#{x 20087}# (car #{ids 20076}#)))
                          (if (symbol? #{x 20087}#)
                            #t
                            (if (if (vector? #{x 20087}#)
                                  (if (= (vector-length #{x 20087}#) 4)
                                    (eq? (vector-ref #{x 20087}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{x 20087}# 1))
                              #f)))
                      (#{all-ids? 19879}# (cdr #{ids 20076}#))
                      #f)))))
             (#{all-ids? 19879}# #{ids 19878}#))
         (#{distinct-bound-ids? 4437}# #{ids 19878}#)
         #f)))
   (#{distinct-bound-ids? 4437}#
     (lambda (#{ids 20208}#)
       (letrec*
         ((#{distinct? 20209}#
            (lambda (#{ids 20314}#)
              (if (null? #{ids 20314}#)
                (null? #{ids 20314}#)
                (if (not (#{bound-id-member? 4438}#
                           (car #{ids 20314}#)
                           (cdr #{ids 20314}#)))
                  (#{distinct? 20209}# (cdr #{ids 20314}#))
                  #f)))))
         (#{distinct? 20209}# #{ids 20208}#))))
   (#{bound-id-member? 4438}#
     (lambda (#{x 20410}# #{list 20411}#)
       (if (not (null? #{list 20411}#))
         (let ((#{t 20412}#
                 (#{bound-id=? 4435}#
                   #{x 20410}#
                   (car #{list 20411}#))))
           (if #{t 20412}#
             #{t 20412}#
             (#{bound-id-member? 4438}#
               #{x 20410}#
               (cdr #{list 20411}#))))
         #f)))
   (#{source-wrap 4440}#
     (lambda (#{x 20590}#
              #{w 20591}#
              #{s 20592}#
              #{defmod 20593}#)
       (let ((#{x 20597}#
               (begin
                 (if (if (pair? #{x 20590}#) #{s 20592}# #f)
                   (set-source-properties! #{x 20590}# #{s 20592}#))
                 #{x 20590}#)))
         (if (if (null? (car #{w 20591}#))
               (null? (cdr #{w 20591}#))
               #f)
           #{x 20597}#
           (if (if (vector? #{x 20597}#)
                 (if (= (vector-length #{x 20597}#) 4)
                   (eq? (vector-ref #{x 20597}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{expression 20629}# (vector-ref #{x 20597}# 1))
                   (#{wrap 20630}#
                     (let ((#{w2 20638}# (vector-ref #{x 20597}# 2)))
                       (let ((#{m1 20639}# (car #{w 20591}#))
                             (#{s1 20640}# (cdr #{w 20591}#)))
                         (if (null? #{m1 20639}#)
                           (if (null? #{s1 20640}#)
                             #{w2 20638}#
                             (cons (car #{w2 20638}#)
                                   (let ((#{m2 20655}# (cdr #{w2 20638}#)))
                                     (if (null? #{m2 20655}#)
                                       #{s1 20640}#
                                       (append #{s1 20640}# #{m2 20655}#)))))
                           (cons (let ((#{m2 20663}# (car #{w2 20638}#)))
                                   (if (null? #{m2 20663}#)
                                     #{m1 20639}#
                                     (append #{m1 20639}# #{m2 20663}#)))
                                 (let ((#{m2 20671}# (cdr #{w2 20638}#)))
                                   (if (null? #{m2 20671}#)
                                     #{s1 20640}#
                                     (append #{s1 20640}# #{m2 20671}#))))))))
                   (#{module 20631}# (vector-ref #{x 20597}# 3)))
               (vector
                 'syntax-object
                 #{expression 20629}#
                 #{wrap 20630}#
                 #{module 20631}#))
             (if (null? #{x 20597}#)
               #{x 20597}#
               (vector
                 'syntax-object
                 #{x 20597}#
                 #{w 20591}#
                 #{defmod 20593}#)))))))
   (#{chi-sequence 4441}#
     (lambda (#{body 36121}#
              #{r 36122}#
              #{w 36123}#
              #{s 36124}#
              #{mod 36125}#)
       (#{build-sequence 4395}#
         #{s 36124}#
         (letrec*
           ((#{dobody 36217}#
              (lambda (#{body 36304}#
                       #{r 36305}#
                       #{w 36306}#
                       #{mod 36307}#)
                (if (null? #{body 36304}#)
                  '()
                  (let ((#{first 36308}#
                          (#{chi 4446}#
                            (car #{body 36304}#)
                            #{r 36305}#
                            #{w 36306}#
                            #{mod 36307}#)))
                    (cons #{first 36308}#
                          (#{dobody 36217}#
                            (cdr #{body 36304}#)
                            #{r 36305}#
                            #{w 36306}#
                            #{mod 36307}#)))))))
           (#{dobody 36217}#
             #{body 36121}#
             #{r 36122}#
             #{w 36123}#
             #{mod 36125}#)))))
   (#{chi-top-sequence 4442}#
     (lambda (#{body 20686}#
              #{r 20687}#
              #{w 20688}#
              #{s 20689}#
              #{m 20690}#
              #{esew 20691}#
              #{mod 20692}#)
       (let ((#{r 20693}#
               (cons '("placeholder" placeholder) #{r 20687}#)))
         (let ((#{ribcage 20694}# (vector 'ribcage '() '() '())))
           (let ((#{w 20695}#
                   (cons (car #{w 20688}#)
                         (cons #{ribcage 20694}# (cdr #{w 20688}#)))))
             (letrec*
               ((#{record-definition! 20696}#
                  (lambda (#{id 23703}# #{var 23704}#)
                    (let ((#{mod 23705}#
                            (cons 'hygiene (module-name (current-module)))))
                      (let ((#{label 23711}#
                              (cons (vector-ref #{id 23703}# 3)
                                    (if (if (vector? #{var 23704}#)
                                          (if (= (vector-length #{var 23704}#)
                                                 4)
                                            (eq? (vector-ref #{var 23704}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 23773}#
                                              (vector-ref #{var 23704}# 1))
                                            (#{wrap 23774}#
                                              (let ((#{w2 23784}#
                                                      (vector-ref
                                                        #{var 23704}#
                                                        2)))
                                                (cons (let ((#{m2 23791}#
                                                              (car #{w2 23784}#)))
                                                        (if (null? #{m2 23791}#)
                                                          '(top)
                                                          (append
                                                            '(top)
                                                            #{m2 23791}#)))
                                                      (let ((#{m2 23800}#
                                                              (cdr #{w2 23784}#)))
                                                        (if (null? #{m2 23800}#)
                                                          '()
                                                          (append
                                                            '()
                                                            #{m2 23800}#))))))
                                            (#{module 23775}#
                                              (vector-ref #{var 23704}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 23773}#
                                          #{wrap 23774}#
                                          #{module 23775}#))
                                      (if (null? #{var 23704}#)
                                        #{var 23704}#
                                        (vector
                                          'syntax-object
                                          #{var 23704}#
                                          '((top))
                                          #{mod 23705}#))))))
                        (begin
                          (let ((#{update 23714}#
                                  (cons (vector-ref #{id 23703}# 1)
                                        (vector-ref #{ribcage 20694}# 1))))
                            (vector-set!
                              #{ribcage 20694}#
                              1
                              #{update 23714}#))
                          (let ((#{update 23729}#
                                  (cons (car (vector-ref #{id 23703}# 2))
                                        (vector-ref #{ribcage 20694}# 2))))
                            (vector-set!
                              #{ribcage 20694}#
                              2
                              #{update 23729}#))
                          (let ((#{update 23744}#
                                  (cons #{label 23711}#
                                        (vector-ref #{ribcage 20694}# 3))))
                            (vector-set!
                              #{ribcage 20694}#
                              3
                              #{update 23744}#)))))))
                (#{parse 20699}#
                  (lambda (#{body 20904}#
                           #{r 20905}#
                           #{w 20906}#
                           #{s 20907}#
                           #{m 20908}#
                           #{esew 20909}#
                           #{mod 20910}#)
                    (letrec*
                      ((#{lp 20911}#
                         (lambda (#{body 20998}# #{exps 20999}#)
                           (if (null? #{body 20998}#)
                             #{exps 20999}#
                             (#{lp 20911}#
                               (cdr #{body 20998}#)
                               (append
                                 (#{parse1 20700}#
                                   (car #{body 20998}#)
                                   #{r 20905}#
                                   #{w 20906}#
                                   #{s 20907}#
                                   #{m 20908}#
                                   #{esew 20909}#
                                   #{mod 20910}#)
                                 #{exps 20999}#))))))
                      (#{lp 20911}# #{body 20904}# '()))))
                (#{parse1 20700}#
                  (lambda (#{x 21073}#
                           #{r 21074}#
                           #{w 21075}#
                           #{s 21076}#
                           #{m 21077}#
                           #{esew 21078}#
                           #{mod 21079}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 4445}#
                          #{x 21073}#
                          #{r 21074}#
                          #{w 21075}#
                          (#{source-annotation 4407}# #{x 21073}#)
                          #{ribcage 20694}#
                          #{mod 21079}#
                          #f))
                      (lambda (#{type 21283}#
                               #{value 21284}#
                               #{e 21285}#
                               #{w 21286}#
                               #{s 21287}#
                               #{mod 21288}#)
                        (if (eqv? #{type 21283}# 'define-form)
                          (let ((#{id 21292}#
                                  (if (if (null? (car #{w 21286}#))
                                        (null? (cdr #{w 21286}#))
                                        #f)
                                    #{value 21284}#
                                    (if (if (vector? #{value 21284}#)
                                          (if (= (vector-length
                                                   #{value 21284}#)
                                                 4)
                                            (eq? (vector-ref #{value 21284}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 21342}#
                                              (vector-ref #{value 21284}# 1))
                                            (#{wrap 21343}#
                                              (let ((#{w2 21353}#
                                                      (vector-ref
                                                        #{value 21284}#
                                                        2)))
                                                (let ((#{m1 21354}#
                                                        (car #{w 21286}#))
                                                      (#{s1 21355}#
                                                        (cdr #{w 21286}#)))
                                                  (if (null? #{m1 21354}#)
                                                    (if (null? #{s1 21355}#)
                                                      #{w2 21353}#
                                                      (cons (car #{w2 21353}#)
                                                            (let ((#{m2 21372}#
                                                                    (cdr #{w2 21353}#)))
                                                              (if (null? #{m2 21372}#)
                                                                #{s1 21355}#
                                                                (append
                                                                  #{s1 21355}#
                                                                  #{m2 21372}#)))))
                                                    (cons (let ((#{m2 21380}#
                                                                  (car #{w2 21353}#)))
                                                            (if (null? #{m2 21380}#)
                                                              #{m1 21354}#
                                                              (append
                                                                #{m1 21354}#
                                                                #{m2 21380}#)))
                                                          (let ((#{m2 21388}#
                                                                  (cdr #{w2 21353}#)))
                                                            (if (null? #{m2 21388}#)
                                                              #{s1 21355}#
                                                              (append
                                                                #{s1 21355}#
                                                                #{m2 21388}#))))))))
                                            (#{module 21344}#
                                              (vector-ref #{value 21284}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 21342}#
                                          #{wrap 21343}#
                                          #{module 21344}#))
                                      (if (null? #{value 21284}#)
                                        #{value 21284}#
                                        (vector
                                          'syntax-object
                                          #{value 21284}#
                                          #{w 21286}#
                                          #{mod 21288}#))))))
                            (begin
                              (symbol->string (gensym "i"))
                              (let ((#{var 21294}#
                                      (if (not (equal?
                                                 (car (vector-ref
                                                        #{id 21292}#
                                                        2))
                                                 '(top)))
                                        (symbol-append
                                          (vector-ref #{id 21292}# 1)
                                          '-
                                          (string->symbol
                                            (number->string
                                              (hash (syntax->datum #{x 21073}#)
                                                    most-positive-fixnum)
                                              16)))
                                        (vector-ref #{id 21292}# 1))))
                                (begin
                                  (#{record-definition! 20696}#
                                    #{id 21292}#
                                    #{var 21294}#)
                                  (list (if (eq? #{m 21077}# 'c&e)
                                          (let ((#{x 21519}#
                                                  (#{build-global-definition 4388}#
                                                    #{s 21287}#
                                                    #{var 21294}#
                                                    (#{chi 4446}#
                                                      #{e 21285}#
                                                      #{r 21074}#
                                                      #{w 21286}#
                                                      #{mod 21288}#))))
                                            (begin
                                              (#{top-level-eval-hook 4373}#
                                                #{x 21519}#
                                                #{mod 21288}#)
                                              (lambda () #{x 21519}#)))
                                          (lambda ()
                                            (#{build-global-definition 4388}#
                                              #{s 21287}#
                                              #{var 21294}#
                                              (#{chi 4446}#
                                                #{e 21285}#
                                                #{r 21074}#
                                                #{w 21286}#
                                                #{mod 21288}#)))))))))
                          (if (if (eqv? #{type 21283}# 'define-syntax-form)
                                #t
                                (eqv? #{type 21283}#
                                      'define-syntax-parameter-form))
                            (let ((#{id 22035}#
                                    (if (if (null? (car #{w 21286}#))
                                          (null? (cdr #{w 21286}#))
                                          #f)
                                      #{value 21284}#
                                      (if (if (vector? #{value 21284}#)
                                            (if (= (vector-length
                                                     #{value 21284}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{value 21284}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (let ((#{expression 22085}#
                                                (vector-ref #{value 21284}# 1))
                                              (#{wrap 22086}#
                                                (let ((#{w2 22096}#
                                                        (vector-ref
                                                          #{value 21284}#
                                                          2)))
                                                  (let ((#{m1 22097}#
                                                          (car #{w 21286}#))
                                                        (#{s1 22098}#
                                                          (cdr #{w 21286}#)))
                                                    (if (null? #{m1 22097}#)
                                                      (if (null? #{s1 22098}#)
                                                        #{w2 22096}#
                                                        (cons (car #{w2 22096}#)
                                                              (let ((#{m2 22115}#
                                                                      (cdr #{w2 22096}#)))
                                                                (if (null? #{m2 22115}#)
                                                                  #{s1 22098}#
                                                                  (append
                                                                    #{s1 22098}#
                                                                    #{m2 22115}#)))))
                                                      (cons (let ((#{m2 22123}#
                                                                    (car #{w2 22096}#)))
                                                              (if (null? #{m2 22123}#)
                                                                #{m1 22097}#
                                                                (append
                                                                  #{m1 22097}#
                                                                  #{m2 22123}#)))
                                                            (let ((#{m2 22131}#
                                                                    (cdr #{w2 22096}#)))
                                                              (if (null? #{m2 22131}#)
                                                                #{s1 22098}#
                                                                (append
                                                                  #{s1 22098}#
                                                                  #{m2 22131}#))))))))
                                              (#{module 22087}#
                                                (vector-ref
                                                  #{value 21284}#
                                                  3)))
                                          (vector
                                            'syntax-object
                                            #{expression 22085}#
                                            #{wrap 22086}#
                                            #{module 22087}#))
                                        (if (null? #{value 21284}#)
                                          #{value 21284}#
                                          (vector
                                            'syntax-object
                                            #{value 21284}#
                                            #{w 21286}#
                                            #{mod 21288}#))))))
                              (begin
                                (symbol->string (gensym "i"))
                                (let ((#{var 22037}#
                                        (if (not (equal?
                                                   (car (vector-ref
                                                          #{id 22035}#
                                                          2))
                                                   '(top)))
                                          (symbol-append
                                            (vector-ref #{id 22035}# 1)
                                            '-
                                            (string->symbol
                                              (number->string
                                                (hash (syntax->datum
                                                        #{x 21073}#)
                                                      most-positive-fixnum)
                                                16)))
                                          (vector-ref #{id 22035}# 1))))
                                  (begin
                                    (#{record-definition! 20696}#
                                      #{id 22035}#
                                      #{var 22037}#)
                                    (if (eqv? #{m 21077}# 'c)
                                      (if (memq 'compile #{esew 21078}#)
                                        (let ((#{e 22265}#
                                                (#{chi-install-global 4443}#
                                                  #{var 22037}#
                                                  #{type 21283}#
                                                  (#{chi 4446}#
                                                    #{e 21285}#
                                                    #{r 21074}#
                                                    #{w 21286}#
                                                    #{mod 21288}#))))
                                          (begin
                                            (#{top-level-eval-hook 4373}#
                                              #{e 22265}#
                                              #{mod 21288}#)
                                            (if (memq 'load #{esew 21078}#)
                                              (list (lambda () #{e 22265}#))
                                              '())))
                                        (if (memq 'load #{esew 21078}#)
                                          (list (lambda ()
                                                  (#{chi-install-global 4443}#
                                                    #{var 22037}#
                                                    #{type 21283}#
                                                    (#{chi 4446}#
                                                      #{e 21285}#
                                                      #{r 21074}#
                                                      #{w 21286}#
                                                      #{mod 21288}#))))
                                          '()))
                                      (if (eqv? #{m 21077}# 'c&e)
                                        (let ((#{e 22785}#
                                                (#{chi-install-global 4443}#
                                                  #{var 22037}#
                                                  #{type 21283}#
                                                  (#{chi 4446}#
                                                    #{e 21285}#
                                                    #{r 21074}#
                                                    #{w 21286}#
                                                    #{mod 21288}#))))
                                          (begin
                                            (#{top-level-eval-hook 4373}#
                                              #{e 22785}#
                                              #{mod 21288}#)
                                            (list (lambda () #{e 22785}#))))
                                        (begin
                                          (if (memq 'eval #{esew 21078}#)
                                            (#{top-level-eval-hook 4373}#
                                              (#{chi-install-global 4443}#
                                                #{var 22037}#
                                                #{type 21283}#
                                                (#{chi 4446}#
                                                  #{e 21285}#
                                                  #{r 21074}#
                                                  #{w 21286}#
                                                  #{mod 21288}#))
                                              #{mod 21288}#))
                                          '())))))))
                            (if (eqv? #{type 21283}# 'begin-form)
                              (let ((#{tmp 23414}#
                                      ($sc-dispatch
                                        #{e 21285}#
                                        '(_ . each-any))))
                                (if #{tmp 23414}#
                                  (@apply
                                    (lambda (#{e1 23418}#)
                                      (#{parse 20699}#
                                        #{e1 23418}#
                                        #{r 21074}#
                                        #{w 21286}#
                                        #{s 21287}#
                                        #{m 21077}#
                                        #{esew 21078}#
                                        #{mod 21288}#))
                                    #{tmp 23414}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 21285}#)))
                              (if (eqv? #{type 21283}# 'local-syntax-form)
                                (#{chi-local-syntax 4451}#
                                  #{value 21284}#
                                  #{e 21285}#
                                  #{r 21074}#
                                  #{w 21286}#
                                  #{s 21287}#
                                  #{mod 21288}#
                                  (lambda (#{forms 23464}#
                                           #{r 23465}#
                                           #{w 23466}#
                                           #{s 23467}#
                                           #{mod 23468}#)
                                    (#{parse 20699}#
                                      #{forms 23464}#
                                      #{r 23465}#
                                      #{w 23466}#
                                      #{s 23467}#
                                      #{m 21077}#
                                      #{esew 21078}#
                                      #{mod 23468}#)))
                                (if (eqv? #{type 21283}# 'eval-when-form)
                                  (let ((#{tmp 23507}#
                                          ($sc-dispatch
                                            #{e 21285}#
                                            '(_ each-any any . each-any))))
                                    (if #{tmp 23507}#
                                      (@apply
                                        (lambda (#{x 23511}#
                                                 #{e1 23512}#
                                                 #{e2 23513}#)
                                          (let ((#{when-list 23514}#
                                                  (#{chi-when-list 4444}#
                                                    #{e 21285}#
                                                    #{x 23511}#
                                                    #{w 21286}#))
                                                (#{body 23515}#
                                                  (cons #{e1 23512}#
                                                        #{e2 23513}#)))
                                            (letrec*
                                              ((#{recurse 23516}#
                                                 (lambda (#{m 23652}#
                                                          #{esew 23653}#)
                                                   (#{parse 20699}#
                                                     #{body 23515}#
                                                     #{r 21074}#
                                                     #{w 21286}#
                                                     #{s 21287}#
                                                     #{m 23652}#
                                                     #{esew 23653}#
                                                     #{mod 21288}#))))
                                              (if (eq? #{m 21077}# 'e)
                                                (if (memq 'eval
                                                          #{when-list 23514}#)
                                                  (#{recurse 23516}#
                                                    (if (memq 'expand
                                                              #{when-list 23514}#)
                                                      'c&e
                                                      'e)
                                                    '(eval))
                                                  (begin
                                                    (if (memq 'expand
                                                              #{when-list 23514}#)
                                                      (let ((#{x 23557}#
                                                              (#{chi-top-sequence 4442}#
                                                                #{body 23515}#
                                                                #{r 21074}#
                                                                #{w 21286}#
                                                                #{s 21287}#
                                                                'e
                                                                '(eval)
                                                                #{mod 21288}#)))
                                                        (primitive-eval
                                                          #{x 23557}#)))
                                                    '()))
                                                (if (memq 'load
                                                          #{when-list 23514}#)
                                                  (if (let ((#{t 23559}#
                                                              (memq 'compile
                                                                    #{when-list 23514}#)))
                                                        (if #{t 23559}#
                                                          #{t 23559}#
                                                          (let ((#{t 23561}#
                                                                  (memq 'expand
                                                                        #{when-list 23514}#)))
                                                            (if #{t 23561}#
                                                              #{t 23561}#
                                                              (if (eq? #{m 21077}#
                                                                       'c&e)
                                                                (memq 'eval
                                                                      #{when-list 23514}#)
                                                                #f)))))
                                                    (#{recurse 23516}#
                                                      'c&e
                                                      '(compile load))
                                                    (if (if (eq? #{m 21077}#
                                                                 'c)
                                                          #t
                                                          (eq? #{m 21077}#
                                                               'c&e))
                                                      (#{recurse 23516}#
                                                        'c
                                                        '(load))
                                                      '()))
                                                  (if (let ((#{t 23643}#
                                                              (memq 'compile
                                                                    #{when-list 23514}#)))
                                                        (if #{t 23643}#
                                                          #{t 23643}#
                                                          (let ((#{t 23645}#
                                                                  (memq 'expand
                                                                        #{when-list 23514}#)))
                                                            (if #{t 23645}#
                                                              #{t 23645}#
                                                              (if (eq? #{m 21077}#
                                                                       'c&e)
                                                                (memq 'eval
                                                                      #{when-list 23514}#)
                                                                #f)))))
                                                    (begin
                                                      (let ((#{x 23650}#
                                                              (#{chi-top-sequence 4442}#
                                                                #{body 23515}#
                                                                #{r 21074}#
                                                                #{w 21286}#
                                                                #{s 21287}#
                                                                'e
                                                                '(eval)
                                                                #{mod 21288}#)))
                                                        (primitive-eval
                                                          #{x 23650}#))
                                                      '())
                                                    '()))))))
                                        #{tmp 23507}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 21285}#)))
                                  (list (if (eq? #{m 21077}# 'c&e)
                                          (let ((#{x 23694}#
                                                  (#{chi-expr 4447}#
                                                    #{type 21283}#
                                                    #{value 21284}#
                                                    #{e 21285}#
                                                    #{r 21074}#
                                                    #{w 21286}#
                                                    #{s 21287}#
                                                    #{mod 21288}#)))
                                            (begin
                                              (primitive-eval #{x 23694}#)
                                              (lambda () #{x 23694}#)))
                                          (lambda ()
                                            (#{chi-expr 4447}#
                                              #{type 21283}#
                                              #{value 21284}#
                                              #{e 21285}#
                                              #{r 21074}#
                                              #{w 21286}#
                                              #{s 21287}#
                                              #{mod 21288}#))))))))))))))
               (let ((#{exps 20701}#
                       (map (lambda (#{x 20832}#) (#{x 20832}#))
                            (reverse
                              (#{parse 20699}#
                                #{body 20686}#
                                #{r 20693}#
                                #{w 20695}#
                                #{s 20689}#
                                #{m 20690}#
                                #{esew 20691}#
                                #{mod 20692}#)))))
                 (if (null? #{exps 20701}#)
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 0)
                     #{s 20689}#)
                   (#{build-sequence 4395}#
                     #{s 20689}#
                     #{exps 20701}#)))))))))
   (#{chi-install-global 4443}#
     (lambda (#{name 23822}# #{type 23823}# #{e 23824}#)
       (let ((#{exp 23830}#
               (let ((#{args 23841}#
                       (if (eq? #{type 23823}#
                                'define-syntax-parameter-form)
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #{name 23822}#)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'syntax-parameter)
                               (let ((#{args 23864}# (list #{e 23824}#)))
                                 (make-struct/no-tail
                                   (vector-ref %expanded-vtables 12)
                                   #f
                                   'list
                                   #{args 23864}#)))
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #{name 23822}#)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'macro)
                               #{e 23824}#))))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 12)
                   #f
                   'make-syntax-transformer
                   #{args 23841}#))))
         (begin
           (if (if (struct? #{exp 23830}#)
                 (eq? (struct-vtable #{exp 23830}#)
                      (vector-ref %expanded-vtables 14))
                 #f)
             (let ((#{meta 23891}# (struct-ref #{exp 23830}# 1)))
               (if (not (assq 'name #{meta 23891}#))
                 (let ((#{v 23898}#
                         (cons (cons 'name #{name 23822}#) #{meta 23891}#)))
                   (struct-set! #{exp 23830}# 1 #{v 23898}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #f
             #{name 23822}#
             #{exp 23830}#)))))
   (#{chi-when-list 4444}#
     (lambda (#{e 23909}# #{when-list 23910}# #{w 23911}#)
       (letrec*
         ((#{f 23912}#
            (lambda (#{when-list 24114}# #{situations 24115}#)
              (if (null? #{when-list 24114}#)
                #{situations 24115}#
                (#{f 23912}#
                  (cdr #{when-list 24114}#)
                  (cons (let ((#{x 24116}#
                                (syntax->datum (car #{when-list 24114}#))))
                          (if (if (eq? #{x 24116}# 'compile)
                                #t
                                (if (eq? #{x 24116}# 'load)
                                  #t
                                  (if (eq? #{x 24116}# 'eval)
                                    #t
                                    (eq? #{x 24116}# 'expand))))
                            #{x 24116}#
                            (syntax-violation
                              'eval-when
                              "invalid situation"
                              #{e 23909}#
                              (let ((#{x 24135}# (car #{when-list 24114}#)))
                                (if (if (null? (car #{w 23911}#))
                                      (null? (cdr #{w 23911}#))
                                      #f)
                                  #{x 24135}#
                                  (if (if (vector? #{x 24135}#)
                                        (if (= (vector-length #{x 24135}#) 4)
                                          (eq? (vector-ref #{x 24135}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 24153}#
                                            (vector-ref #{x 24135}# 1))
                                          (#{wrap 24154}#
                                            (let ((#{w2 24162}#
                                                    (vector-ref
                                                      #{x 24135}#
                                                      2)))
                                              (let ((#{m1 24163}#
                                                      (car #{w 23911}#))
                                                    (#{s1 24164}#
                                                      (cdr #{w 23911}#)))
                                                (if (null? #{m1 24163}#)
                                                  (if (null? #{s1 24164}#)
                                                    #{w2 24162}#
                                                    (cons (car #{w2 24162}#)
                                                          (let ((#{m2 24179}#
                                                                  (cdr #{w2 24162}#)))
                                                            (if (null? #{m2 24179}#)
                                                              #{s1 24164}#
                                                              (append
                                                                #{s1 24164}#
                                                                #{m2 24179}#)))))
                                                  (cons (let ((#{m2 24187}#
                                                                (car #{w2 24162}#)))
                                                          (if (null? #{m2 24187}#)
                                                            #{m1 24163}#
                                                            (append
                                                              #{m1 24163}#
                                                              #{m2 24187}#)))
                                                        (let ((#{m2 24195}#
                                                                (cdr #{w2 24162}#)))
                                                          (if (null? #{m2 24195}#)
                                                            #{s1 24164}#
                                                            (append
                                                              #{s1 24164}#
                                                              #{m2 24195}#))))))))
                                          (#{module 24155}#
                                            (vector-ref #{x 24135}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 24153}#
                                        #{wrap 24154}#
                                        #{module 24155}#))
                                    (if (null? #{x 24135}#)
                                      #{x 24135}#
                                      (vector
                                        'syntax-object
                                        #{x 24135}#
                                        #{w 23911}#
                                        #f))))))))
                        #{situations 24115}#))))))
         (#{f 23912}# #{when-list 23910}# '()))))
   (#{syntax-type 4445}#
     (lambda (#{e 24210}#
              #{r 24211}#
              #{w 24212}#
              #{s 24213}#
              #{rib 24214}#
              #{mod 24215}#
              #{for-car? 24216}#)
       (if (symbol? #{e 24210}#)
         (call-with-values
           (lambda ()
             (#{resolve-identifier 4433}#
               #{e 24210}#
               #{w 24212}#
               #{r 24211}#
               #{mod 24215}#
               #t))
           (lambda (#{type 24219}# #{value 24220}# #{mod* 24221}#)
             (if (eqv? #{type 24219}# 'macro)
               (if #{for-car? 24216}#
                 (values
                   #{type 24219}#
                   #{value 24220}#
                   #{e 24210}#
                   #{w 24212}#
                   #{s 24213}#
                   #{mod 24215}#)
                 (#{syntax-type 4445}#
                   (#{chi-macro 4449}#
                     #{value 24220}#
                     #{e 24210}#
                     #{r 24211}#
                     #{w 24212}#
                     #{s 24213}#
                     #{rib 24214}#
                     #{mod 24215}#)
                   #{r 24211}#
                   '(())
                   #{s 24213}#
                   #{rib 24214}#
                   #{mod 24215}#
                   #f))
               (if (eqv? #{type 24219}# 'global)
                 (values
                   #{type 24219}#
                   #{value 24220}#
                   #{value 24220}#
                   #{w 24212}#
                   #{s 24213}#
                   #{mod* 24221}#)
                 (values
                   #{type 24219}#
                   #{value 24220}#
                   #{e 24210}#
                   #{w 24212}#
                   #{s 24213}#
                   #{mod 24215}#)))))
         (if (pair? #{e 24210}#)
           (let ((#{first 24230}# (car #{e 24210}#)))
             (call-with-values
               (lambda ()
                 (#{syntax-type 4445}#
                   #{first 24230}#
                   #{r 24211}#
                   #{w 24212}#
                   #{s 24213}#
                   #{rib 24214}#
                   #{mod 24215}#
                   #t))
               (lambda (#{ftype 24232}#
                        #{fval 24233}#
                        #{fe 24234}#
                        #{fw 24235}#
                        #{fs 24236}#
                        #{fmod 24237}#)
                 (if (eqv? #{ftype 24232}# 'lexical)
                   (values
                     'lexical-call
                     #{fval 24233}#
                     #{e 24210}#
                     #{w 24212}#
                     #{s 24213}#
                     #{mod 24215}#)
                   (if (eqv? #{ftype 24232}# 'global)
                     (values
                       'global-call
                       (vector
                         'syntax-object
                         #{fval 24233}#
                         #{w 24212}#
                         #{fmod 24237}#)
                       #{e 24210}#
                       #{w 24212}#
                       #{s 24213}#
                       #{mod 24215}#)
                     (if (eqv? #{ftype 24232}# 'macro)
                       (#{syntax-type 4445}#
                         (#{chi-macro 4449}#
                           #{fval 24233}#
                           #{e 24210}#
                           #{r 24211}#
                           #{w 24212}#
                           #{s 24213}#
                           #{rib 24214}#
                           #{mod 24215}#)
                         #{r 24211}#
                         '(())
                         #{s 24213}#
                         #{rib 24214}#
                         #{mod 24215}#
                         #{for-car? 24216}#)
                       (if (eqv? #{ftype 24232}# 'module-ref)
                         (call-with-values
                           (lambda ()
                             (#{fval 24233}#
                               #{e 24210}#
                               #{r 24211}#
                               #{w 24212}#))
                           (lambda (#{e 24258}#
                                    #{r 24259}#
                                    #{w 24260}#
                                    #{s 24261}#
                                    #{mod 24262}#)
                             (#{syntax-type 4445}#
                               #{e 24258}#
                               #{r 24259}#
                               #{w 24260}#
                               #{s 24261}#
                               #{rib 24214}#
                               #{mod 24262}#
                               #{for-car? 24216}#)))
                         (if (eqv? #{ftype 24232}# 'core)
                           (values
                             'core-form
                             #{fval 24233}#
                             #{e 24210}#
                             #{w 24212}#
                             #{s 24213}#
                             #{mod 24215}#)
                           (if (eqv? #{ftype 24232}# 'local-syntax)
                             (values
                               'local-syntax-form
                               #{fval 24233}#
                               #{e 24210}#
                               #{w 24212}#
                               #{s 24213}#
                               #{mod 24215}#)
                             (if (eqv? #{ftype 24232}# 'begin)
                               (values
                                 'begin-form
                                 #f
                                 #{e 24210}#
                                 #{w 24212}#
                                 #{s 24213}#
                                 #{mod 24215}#)
                               (if (eqv? #{ftype 24232}# 'eval-when)
                                 (values
                                   'eval-when-form
                                   #f
                                   #{e 24210}#
                                   #{w 24212}#
                                   #{s 24213}#
                                   #{mod 24215}#)
                                 (if (eqv? #{ftype 24232}# 'define)
                                   (let ((#{tmp 24279}#
                                           ($sc-dispatch
                                             #{e 24210}#
                                             '(_ any any))))
                                     (if (if #{tmp 24279}#
                                           (@apply
                                             (lambda (#{name 24283}#
                                                      #{val 24284}#)
                                               (if (symbol? #{name 24283}#)
                                                 #t
                                                 (if (if (vector?
                                                           #{name 24283}#)
                                                       (if (= (vector-length
                                                                #{name 24283}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{name 24283}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (symbol?
                                                     (vector-ref
                                                       #{name 24283}#
                                                       1))
                                                   #f)))
                                             #{tmp 24279}#)
                                           #f)
                                       (@apply
                                         (lambda (#{name 24311}# #{val 24312}#)
                                           (values
                                             'define-form
                                             #{name 24311}#
                                             #{val 24312}#
                                             #{w 24212}#
                                             #{s 24213}#
                                             #{mod 24215}#))
                                         #{tmp 24279}#)
                                       (let ((#{tmp 24313}#
                                               ($sc-dispatch
                                                 #{e 24210}#
                                                 '(_ (any . any)
                                                     any
                                                     .
                                                     each-any))))
                                         (if (if #{tmp 24313}#
                                               (@apply
                                                 (lambda (#{name 24317}#
                                                          #{args 24318}#
                                                          #{e1 24319}#
                                                          #{e2 24320}#)
                                                   (if (if (symbol?
                                                             #{name 24317}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 24317}#)
                                                               (if (= (vector-length
                                                                        #{name 24317}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 24317}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 24317}#
                                                               1))
                                                           #f))
                                                     (#{valid-bound-ids? 4436}#
                                                       (#{lambda-var-list 4461}#
                                                         #{args 24318}#))
                                                     #f))
                                                 #{tmp 24313}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 24801}#
                                                      #{args 24802}#
                                                      #{e1 24803}#
                                                      #{e2 24804}#)
                                               (values
                                                 'define-form
                                                 (if (if (null? (car #{w 24212}#))
                                                       (null? (cdr #{w 24212}#))
                                                       #f)
                                                   #{name 24801}#
                                                   (if (if (vector?
                                                             #{name 24801}#)
                                                         (if (= (vector-length
                                                                  #{name 24801}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 24801}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (let ((#{expression 24834}#
                                                             (vector-ref
                                                               #{name 24801}#
                                                               1))
                                                           (#{wrap 24835}#
                                                             (let ((#{w2 24845}#
                                                                     (vector-ref
                                                                       #{name 24801}#
                                                                       2)))
                                                               (let ((#{m1 24846}#
                                                                       (car #{w 24212}#))
                                                                     (#{s1 24847}#
                                                                       (cdr #{w 24212}#)))
                                                                 (if (null? #{m1 24846}#)
                                                                   (if (null? #{s1 24847}#)
                                                                     #{w2 24845}#
                                                                     (cons (car #{w2 24845}#)
                                                                           (let ((#{m2 24864}#
                                                                                   (cdr #{w2 24845}#)))
                                                                             (if (null? #{m2 24864}#)
                                                                               #{s1 24847}#
                                                                               (append
                                                                                 #{s1 24847}#
                                                                                 #{m2 24864}#)))))
                                                                   (cons (let ((#{m2 24872}#
                                                                                 (car #{w2 24845}#)))
                                                                           (if (null? #{m2 24872}#)
                                                                             #{m1 24846}#
                                                                             (append
                                                                               #{m1 24846}#
                                                                               #{m2 24872}#)))
                                                                         (let ((#{m2 24880}#
                                                                                 (cdr #{w2 24845}#)))
                                                                           (if (null? #{m2 24880}#)
                                                                             #{s1 24847}#
                                                                             (append
                                                                               #{s1 24847}#
                                                                               #{m2 24880}#))))))))
                                                           (#{module 24836}#
                                                             (vector-ref
                                                               #{name 24801}#
                                                               3)))
                                                       (vector
                                                         'syntax-object
                                                         #{expression 24834}#
                                                         #{wrap 24835}#
                                                         #{module 24836}#))
                                                     (if (null? #{name 24801}#)
                                                       #{name 24801}#
                                                       (vector
                                                         'syntax-object
                                                         #{name 24801}#
                                                         #{w 24212}#
                                                         #{mod 24215}#))))
                                                 (let ((#{e 24906}#
                                                         (cons '#(syntax-object
                                                                  lambda
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(name
                                                                       args
                                                                       e1
                                                                       e2)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1955"
                                                                       "i1956"
                                                                       "i1957"
                                                                       "i1958"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(ftype
                                                                       fval
                                                                       fe
                                                                       fw
                                                                       fs
                                                                       fmod)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1908"
                                                                       "i1909"
                                                                       "i1910"
                                                                       "i1911"
                                                                       "i1912"
                                                                       "i1913"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(first)
                                                                     #((top))
                                                                     #("i1900"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(e
                                                                       r
                                                                       w
                                                                       s
                                                                       rib
                                                                       mod
                                                                       for-car?)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1879"
                                                                       "i1880"
                                                                       "i1881"
                                                                       "i1882"
                                                                       "i1883"
                                                                       "i1884"
                                                                       "i1885"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       chi-lambda-case
                                                                       lambda*-formals
                                                                       chi-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       chi-void
                                                                       eval-local-transformer
                                                                       chi-local-syntax
                                                                       chi-body
                                                                       chi-macro
                                                                       chi-call
                                                                       chi-expr
                                                                       chi
                                                                       syntax-type
                                                                       chi-when-list
                                                                       chi-install-global
                                                                       chi-top-sequence
                                                                       chi-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       resolve-identifier
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-primcall
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-call
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-seq
                                                                       make-primcall
                                                                       make-call
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i471"
                                                                      "i469"
                                                                      "i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i401"
                                                                      "i400"
                                                                      "i398"
                                                                      "i395"
                                                                      "i394"
                                                                      "i393"
                                                                      "i391"
                                                                      "i390"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i374"
                                                                      "i371"
                                                                      "i369"
                                                                      "i368"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i360"
                                                                      "i359"
                                                                      "i358"
                                                                      "i357"
                                                                      "i355"
                                                                      "i354"
                                                                      "i351"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i340"
                                                                      "i339"
                                                                      "i337"
                                                                      "i335"
                                                                      "i334"
                                                                      "i331"
                                                                      "i330"
                                                                      "i328"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i309"
                                                                      "i307"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i262"
                                                                      "i259"
                                                                      "i257"
                                                                      "i256"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i244"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ()))
                                                                  (hygiene
                                                                    guile))
                                                               (let ((#{x 24910}#
                                                                       (cons #{args 24802}#
                                                                             (cons #{e1 24803}#
                                                                                   #{e2 24804}#))))
                                                                 (if (if (null? (car #{w 24212}#))
                                                                       (null? (cdr #{w 24212}#))
                                                                       #f)
                                                                   #{x 24910}#
                                                                   (if (if (vector?
                                                                             #{x 24910}#)
                                                                         (if (= (vector-length
                                                                                  #{x 24910}#)
                                                                                4)
                                                                           (eq? (vector-ref
                                                                                  #{x 24910}#
                                                                                  0)
                                                                                'syntax-object)
                                                                           #f)
                                                                         #f)
                                                                     (let ((#{expression 24928}#
                                                                             (vector-ref
                                                                               #{x 24910}#
                                                                               1))
                                                                           (#{wrap 24929}#
                                                                             (let ((#{w2 24937}#
                                                                                     (vector-ref
                                                                                       #{x 24910}#
                                                                                       2)))
                                                                               (let ((#{m1 24938}#
                                                                                       (car #{w 24212}#))
                                                                                     (#{s1 24939}#
                                                                                       (cdr #{w 24212}#)))
                                                                                 (if (null? #{m1 24938}#)
                                                                                   (if (null? #{s1 24939}#)
                                                                                     #{w2 24937}#
                                                                                     (cons (car #{w2 24937}#)
                                                                                           (let ((#{m2 24954}#
                                                                                                   (cdr #{w2 24937}#)))
                                                                                             (if (null? #{m2 24954}#)
                                                                                               #{s1 24939}#
                                                                                               (append
                                                                                                 #{s1 24939}#
                                                                                                 #{m2 24954}#)))))
                                                                                   (cons (let ((#{m2 24962}#
                                                                                                 (car #{w2 24937}#)))
                                                                                           (if (null? #{m2 24962}#)
                                                                                             #{m1 24938}#
                                                                                             (append
                                                                                               #{m1 24938}#
                                                                                               #{m2 24962}#)))
                                                                                         (let ((#{m2 24970}#
                                                                                                 (cdr #{w2 24937}#)))
                                                                                           (if (null? #{m2 24970}#)
                                                                                             #{s1 24939}#
                                                                                             (append
                                                                                               #{s1 24939}#
                                                                                               #{m2 24970}#))))))))
                                                                           (#{module 24930}#
                                                                             (vector-ref
                                                                               #{x 24910}#
                                                                               3)))
                                                                       (vector
                                                                         'syntax-object
                                                                         #{expression 24928}#
                                                                         #{wrap 24929}#
                                                                         #{module 24930}#))
                                                                     (if (null? #{x 24910}#)
                                                                       #{x 24910}#
                                                                       (vector
                                                                         'syntax-object
                                                                         #{x 24910}#
                                                                         #{w 24212}#
                                                                         #{mod 24215}#))))))))
                                                   (begin
                                                     (if (if (pair? #{e 24906}#)
                                                           #{s 24213}#
                                                           #f)
                                                       (set-source-properties!
                                                         #{e 24906}#
                                                         #{s 24213}#))
                                                     #{e 24906}#))
                                                 '(())
                                                 #{s 24213}#
                                                 #{mod 24215}#))
                                             #{tmp 24313}#)
                                           (let ((#{tmp 24989}#
                                                   ($sc-dispatch
                                                     #{e 24210}#
                                                     '(_ any))))
                                             (if (if #{tmp 24989}#
                                                   (@apply
                                                     (lambda (#{name 24993}#)
                                                       (if (symbol?
                                                             #{name 24993}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 24993}#)
                                                               (if (= (vector-length
                                                                        #{name 24993}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 24993}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 24993}#
                                                               1))
                                                           #f)))
                                                     #{tmp 24989}#)
                                                   #f)
                                               (@apply
                                                 (lambda (#{name 25020}#)
                                                   (values
                                                     'define-form
                                                     (if (if (null? (car #{w 24212}#))
                                                           (null? (cdr #{w 24212}#))
                                                           #f)
                                                       #{name 25020}#
                                                       (if (if (vector?
                                                                 #{name 25020}#)
                                                             (if (= (vector-length
                                                                      #{name 25020}#)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      #{name 25020}#
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (let ((#{expression 25050}#
                                                                 (vector-ref
                                                                   #{name 25020}#
                                                                   1))
                                                               (#{wrap 25051}#
                                                                 (let ((#{w2 25061}#
                                                                         (vector-ref
                                                                           #{name 25020}#
                                                                           2)))
                                                                   (let ((#{m1 25062}#
                                                                           (car #{w 24212}#))
                                                                         (#{s1 25063}#
                                                                           (cdr #{w 24212}#)))
                                                                     (if (null? #{m1 25062}#)
                                                                       (if (null? #{s1 25063}#)
                                                                         #{w2 25061}#
                                                                         (cons (car #{w2 25061}#)
                                                                               (let ((#{m2 25080}#
                                                                                       (cdr #{w2 25061}#)))
                                                                                 (if (null? #{m2 25080}#)
                                                                                   #{s1 25063}#
                                                                                   (append
                                                                                     #{s1 25063}#
                                                                                     #{m2 25080}#)))))
                                                                       (cons (let ((#{m2 25088}#
                                                                                     (car #{w2 25061}#)))
                                                                               (if (null? #{m2 25088}#)
                                                                                 #{m1 25062}#
                                                                                 (append
                                                                                   #{m1 25062}#
                                                                                   #{m2 25088}#)))
                                                                             (let ((#{m2 25096}#
                                                                                     (cdr #{w2 25061}#)))
                                                                               (if (null? #{m2 25096}#)
                                                                                 #{s1 25063}#
                                                                                 (append
                                                                                   #{s1 25063}#
                                                                                   #{m2 25096}#))))))))
                                                               (#{module 25052}#
                                                                 (vector-ref
                                                                   #{name 25020}#
                                                                   3)))
                                                           (vector
                                                             'syntax-object
                                                             #{expression 25050}#
                                                             #{wrap 25051}#
                                                             #{module 25052}#))
                                                         (if (null? #{name 25020}#)
                                                           #{name 25020}#
                                                           (vector
                                                             'syntax-object
                                                             #{name 25020}#
                                                             #{w 24212}#
                                                             #{mod 24215}#))))
                                                     '(#(syntax-object
                                                         if
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1968"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1908"
                                                              "i1909"
                                                              "i1910"
                                                              "i1911"
                                                              "i1912"
                                                              "i1913"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1900"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1879"
                                                              "i1880"
                                                              "i1881"
                                                              "i1882"
                                                              "i1883"
                                                              "i1884"
                                                              "i1885"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              resolve-identifier
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i400"
                                                             "i398"
                                                             "i395"
                                                             "i394"
                                                             "i393"
                                                             "i391"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i371"
                                                             "i369"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i359"
                                                             "i358"
                                                             "i357"
                                                             "i355"
                                                             "i354"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44"))
                                                          #(ribcage () () ()))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1968"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1908"
                                                              "i1909"
                                                              "i1910"
                                                              "i1911"
                                                              "i1912"
                                                              "i1913"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1900"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1879"
                                                              "i1880"
                                                              "i1881"
                                                              "i1882"
                                                              "i1883"
                                                              "i1884"
                                                              "i1885"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              resolve-identifier
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i400"
                                                             "i398"
                                                             "i395"
                                                             "i394"
                                                             "i393"
                                                             "i391"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i371"
                                                             "i369"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i359"
                                                             "i358"
                                                             "i357"
                                                             "i355"
                                                             "i354"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44"))
                                                          #(ribcage () () ()))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1968"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1908"
                                                              "i1909"
                                                              "i1910"
                                                              "i1911"
                                                              "i1912"
                                                              "i1913"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1900"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1879"
                                                              "i1880"
                                                              "i1881"
                                                              "i1882"
                                                              "i1883"
                                                              "i1884"
                                                              "i1885"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              resolve-identifier
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i400"
                                                             "i398"
                                                             "i395"
                                                             "i394"
                                                             "i393"
                                                             "i391"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i371"
                                                             "i369"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i359"
                                                             "i358"
                                                             "i357"
                                                             "i355"
                                                             "i354"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44"))
                                                          #(ribcage () () ()))
                                                         (hygiene guile)))
                                                     '(())
                                                     #{s 24213}#
                                                     #{mod 24215}#))
                                                 #{tmp 24989}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{e 24210}#)))))))
                                   (if (eqv? #{ftype 24232}# 'define-syntax)
                                     (let ((#{tmp 25135}#
                                             ($sc-dispatch
                                               #{e 24210}#
                                               '(_ any any))))
                                       (if (if #{tmp 25135}#
                                             (@apply
                                               (lambda (#{name 25139}#
                                                        #{val 25140}#)
                                                 (if (symbol? #{name 25139}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name 25139}#)
                                                         (if (= (vector-length
                                                                  #{name 25139}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 25139}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name 25139}#
                                                         1))
                                                     #f)))
                                               #{tmp 25135}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 25167}#
                                                    #{val 25168}#)
                                             (values
                                               'define-syntax-form
                                               #{name 25167}#
                                               #{val 25168}#
                                               #{w 24212}#
                                               #{s 24213}#
                                               #{mod 24215}#))
                                           #{tmp 25135}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{e 24210}#)))
                                     (if (eqv? #{ftype 24232}#
                                               'define-syntax-parameter)
                                       (let ((#{tmp 25179}#
                                               ($sc-dispatch
                                                 #{e 24210}#
                                                 '(_ any any))))
                                         (if (if #{tmp 25179}#
                                               (@apply
                                                 (lambda (#{name 25183}#
                                                          #{val 25184}#)
                                                   (if (symbol? #{name 25183}#)
                                                     #t
                                                     (if (if (vector?
                                                               #{name 25183}#)
                                                           (if (= (vector-length
                                                                    #{name 25183}#)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    #{name 25183}#
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (symbol?
                                                         (vector-ref
                                                           #{name 25183}#
                                                           1))
                                                       #f)))
                                                 #{tmp 25179}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 25211}#
                                                      #{val 25212}#)
                                               (values
                                                 'define-syntax-parameter-form
                                                 #{name 25211}#
                                                 #{val 25212}#
                                                 #{w 24212}#
                                                 #{s 24213}#
                                                 #{mod 24215}#))
                                             #{tmp 25179}#)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             #{e 24210}#)))
                                       (values
                                         'call
                                         #f
                                         #{e 24210}#
                                         #{w 24212}#
                                         #{s 24213}#
                                         #{mod 24215}#)))))))))))))))
           (if (if (vector? #{e 24210}#)
                 (if (= (vector-length #{e 24210}#) 4)
                   (eq? (vector-ref #{e 24210}# 0) 'syntax-object)
                   #f)
                 #f)
             (#{syntax-type 4445}#
               (vector-ref #{e 24210}# 1)
               #{r 24211}#
               (let ((#{w2 25237}# (vector-ref #{e 24210}# 2)))
                 (let ((#{m1 25238}# (car #{w 24212}#))
                       (#{s1 25239}# (cdr #{w 24212}#)))
                   (if (null? #{m1 25238}#)
                     (if (null? #{s1 25239}#)
                       #{w2 25237}#
                       (cons (car #{w2 25237}#)
                             (let ((#{m2 25250}# (cdr #{w2 25237}#)))
                               (if (null? #{m2 25250}#)
                                 #{s1 25239}#
                                 (append #{s1 25239}# #{m2 25250}#)))))
                     (cons (let ((#{m2 25258}# (car #{w2 25237}#)))
                             (if (null? #{m2 25258}#)
                               #{m1 25238}#
                               (append #{m1 25238}# #{m2 25258}#)))
                           (let ((#{m2 25266}# (cdr #{w2 25237}#)))
                             (if (null? #{m2 25266}#)
                               #{s1 25239}#
                               (append #{s1 25239}# #{m2 25266}#)))))))
               (let ((#{t 25271}#
                       (#{source-annotation 4407}# #{e 24210}#)))
                 (if #{t 25271}# #{t 25271}# #{s 24213}#))
               #{rib 24214}#
               (let ((#{t 25569}# (vector-ref #{e 24210}# 3)))
                 (if #{t 25569}# #{t 25569}# #{mod 24215}#))
               #{for-car? 24216}#)
             (if (self-evaluating? #{e 24210}#)
               (values
                 'constant
                 #f
                 #{e 24210}#
                 #{w 24212}#
                 #{s 24213}#
                 #{mod 24215}#)
               (values
                 'other
                 #f
                 #{e 24210}#
                 #{w 24212}#
                 #{s 24213}#
                 #{mod 24215}#)))))))
   (#{chi 4446}#
     (lambda (#{e 25578}#
              #{r 25579}#
              #{w 25580}#
              #{mod 25581}#)
       (call-with-values
         (lambda ()
           (#{syntax-type 4445}#
             #{e 25578}#
             #{r 25579}#
             #{w 25580}#
             (#{source-annotation 4407}# #{e 25578}#)
             #f
             #{mod 25581}#
             #f))
         (lambda (#{type 25785}#
                  #{value 25786}#
                  #{e 25787}#
                  #{w 25788}#
                  #{s 25789}#
                  #{mod 25790}#)
           (#{chi-expr 4447}#
             #{type 25785}#
             #{value 25786}#
             #{e 25787}#
             #{r 25579}#
             #{w 25788}#
             #{s 25789}#
             #{mod 25790}#)))))
   (#{chi-expr 4447}#
     (lambda (#{type 25793}#
              #{value 25794}#
              #{e 25795}#
              #{r 25796}#
              #{w 25797}#
              #{s 25798}#
              #{mod 25799}#)
       (if (eqv? #{type 25793}# 'lexical)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{s 25798}#
           #{e 25795}#
           #{value 25794}#)
         (if (if (eqv? #{type 25793}# 'core)
               #t
               (eqv? #{type 25793}# 'core-form))
           (#{value 25794}#
             #{e 25795}#
             #{r 25796}#
             #{w 25797}#
             #{s 25798}#
             #{mod 25799}#)
           (if (eqv? #{type 25793}# 'module-ref)
             (call-with-values
               (lambda ()
                 (#{value 25794}#
                   #{e 25795}#
                   #{r 25796}#
                   #{w 25797}#))
               (lambda (#{e 25825}#
                        #{r 25826}#
                        #{w 25827}#
                        #{s 25828}#
                        #{mod 25829}#)
                 (#{chi 4446}#
                   #{e 25825}#
                   #{r 25826}#
                   #{w 25827}#
                   #{mod 25829}#)))
             (if (eqv? #{type 25793}# 'lexical-call)
               (#{chi-call 4448}#
                 (let ((#{id 26010}# (car #{e 25795}#)))
                   (#{build-lexical-reference 4383}#
                     'fun
                     (#{source-annotation 4407}# #{id 26010}#)
                     (if (if (vector? #{id 26010}#)
                           (if (= (vector-length #{id 26010}#) 4)
                             (eq? (vector-ref #{id 26010}# 0) 'syntax-object)
                             #f)
                           #f)
                       (syntax->datum #{id 26010}#)
                       #{id 26010}#)
                     #{value 25794}#))
                 #{e 25795}#
                 #{r 25796}#
                 #{w 25797}#
                 #{s 25798}#
                 #{mod 25799}#)
               (if (eqv? #{type 25793}# 'global-call)
                 (#{chi-call 4448}#
                   (#{build-global-reference 4386}#
                     (#{source-annotation 4407}# (car #{e 25795}#))
                     (if (if (vector? #{value 25794}#)
                           (if (= (vector-length #{value 25794}#) 4)
                             (eq? (vector-ref #{value 25794}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 25794}# 1)
                       #{value 25794}#)
                     (if (if (vector? #{value 25794}#)
                           (if (= (vector-length #{value 25794}#) 4)
                             (eq? (vector-ref #{value 25794}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 25794}# 3)
                       #{mod 25799}#))
                   #{e 25795}#
                   #{r 25796}#
                   #{w 25797}#
                   #{s 25798}#
                   #{mod 25799}#)
                 (if (eqv? #{type 25793}# 'constant)
                   (let ((#{exp 26732}#
                           (#{strip 4459}#
                             (let ((#{x 26745}#
                                     (begin
                                       (if (if (pair? #{e 25795}#)
                                             #{s 25798}#
                                             #f)
                                         (set-source-properties!
                                           #{e 25795}#
                                           #{s 25798}#))
                                       #{e 25795}#)))
                               (if (if (null? (car #{w 25797}#))
                                     (null? (cdr #{w 25797}#))
                                     #f)
                                 #{x 26745}#
                                 (if (if (vector? #{x 26745}#)
                                       (if (= (vector-length #{x 26745}#) 4)
                                         (eq? (vector-ref #{x 26745}# 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (let ((#{expression 26777}#
                                           (vector-ref #{x 26745}# 1))
                                         (#{wrap 26778}#
                                           (let ((#{w2 26786}#
                                                   (vector-ref #{x 26745}# 2)))
                                             (let ((#{m1 26787}#
                                                     (car #{w 25797}#))
                                                   (#{s1 26788}#
                                                     (cdr #{w 25797}#)))
                                               (if (null? #{m1 26787}#)
                                                 (if (null? #{s1 26788}#)
                                                   #{w2 26786}#
                                                   (cons (car #{w2 26786}#)
                                                         (let ((#{m2 26803}#
                                                                 (cdr #{w2 26786}#)))
                                                           (if (null? #{m2 26803}#)
                                                             #{s1 26788}#
                                                             (append
                                                               #{s1 26788}#
                                                               #{m2 26803}#)))))
                                                 (cons (let ((#{m2 26811}#
                                                               (car #{w2 26786}#)))
                                                         (if (null? #{m2 26811}#)
                                                           #{m1 26787}#
                                                           (append
                                                             #{m1 26787}#
                                                             #{m2 26811}#)))
                                                       (let ((#{m2 26819}#
                                                               (cdr #{w2 26786}#)))
                                                         (if (null? #{m2 26819}#)
                                                           #{s1 26788}#
                                                           (append
                                                             #{s1 26788}#
                                                             #{m2 26819}#))))))))
                                         (#{module 26779}#
                                           (vector-ref #{x 26745}# 3)))
                                     (vector
                                       'syntax-object
                                       #{expression 26777}#
                                       #{wrap 26778}#
                                       #{module 26779}#))
                                   (if (null? #{x 26745}#)
                                     #{x 26745}#
                                     (vector
                                       'syntax-object
                                       #{x 26745}#
                                       #{w 25797}#
                                       #{mod 25799}#)))))
                             '(()))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 1)
                       #{s 25798}#
                       #{exp 26732}#))
                   (if (eqv? #{type 25793}# 'global)
                     (#{analyze-variable 4385}#
                       #{mod 25799}#
                       #{value 25794}#
                       (lambda (#{mod 26844}# #{var 26845}# #{public? 26846}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #{s 25798}#
                           #{mod 26844}#
                           #{var 26845}#
                           #{public? 26846}#))
                       (lambda (#{var 26854}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #{s 25798}#
                           #{var 26854}#)))
                     (if (eqv? #{type 25793}# 'call)
                       (#{chi-call 4448}#
                         (#{chi 4446}#
                           (car #{e 25795}#)
                           #{r 25796}#
                           #{w 25797}#
                           #{mod 25799}#)
                         #{e 25795}#
                         #{r 25796}#
                         #{w 25797}#
                         #{s 25798}#
                         #{mod 25799}#)
                       (if (eqv? #{type 25793}# 'begin-form)
                         (let ((#{tmp 27032}#
                                 ($sc-dispatch
                                   #{e 25795}#
                                   '(_ any . each-any))))
                           (if #{tmp 27032}#
                             (@apply
                               (lambda (#{e1 27036}# #{e2 27037}#)
                                 (#{chi-sequence 4441}#
                                   (cons #{e1 27036}# #{e2 27037}#)
                                   #{r 25796}#
                                   #{w 25797}#
                                   #{s 25798}#
                                   #{mod 25799}#))
                               #{tmp 27032}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{e 25795}#)))
                         (if (eqv? #{type 25793}# 'local-syntax-form)
                           (#{chi-local-syntax 4451}#
                             #{value 25794}#
                             #{e 25795}#
                             #{r 25796}#
                             #{w 25797}#
                             #{s 25798}#
                             #{mod 25799}#
                             #{chi-sequence 4441}#)
                           (if (eqv? #{type 25793}# 'eval-when-form)
                             (let ((#{tmp 27217}#
                                     ($sc-dispatch
                                       #{e 25795}#
                                       '(_ each-any any . each-any))))
                               (if #{tmp 27217}#
                                 (@apply
                                   (lambda (#{x 27221}#
                                            #{e1 27222}#
                                            #{e2 27223}#)
                                     (let ((#{when-list 27224}#
                                             (#{chi-when-list 4444}#
                                               #{e 25795}#
                                               #{x 27221}#
                                               #{w 25797}#)))
                                       (if (memq 'eval #{when-list 27224}#)
                                         (#{chi-sequence 4441}#
                                           (cons #{e1 27222}# #{e2 27223}#)
                                           #{r 25796}#
                                           #{w 25797}#
                                           #{s 25798}#
                                           #{mod 25799}#)
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 0)
                                           #f))))
                                   #{tmp 27217}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 25795}#)))
                             (if (if (eqv? #{type 25793}# 'define-form)
                                   #t
                                   (if (eqv? #{type 25793}#
                                             'define-syntax-form)
                                     #t
                                     (eqv? #{type 25793}#
                                           'define-syntax-parameter-form)))
                               (syntax-violation
                                 #f
                                 "definition in expression context"
                                 #{e 25795}#
                                 (if (if (null? (car #{w 25797}#))
                                       (null? (cdr #{w 25797}#))
                                       #f)
                                   #{value 25794}#
                                   (if (if (vector? #{value 25794}#)
                                         (if (= (vector-length #{value 25794}#)
                                                4)
                                           (eq? (vector-ref #{value 25794}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (let ((#{expression 27378}#
                                             (vector-ref #{value 25794}# 1))
                                           (#{wrap 27379}#
                                             (let ((#{w2 27389}#
                                                     (vector-ref
                                                       #{value 25794}#
                                                       2)))
                                               (let ((#{m1 27390}#
                                                       (car #{w 25797}#))
                                                     (#{s1 27391}#
                                                       (cdr #{w 25797}#)))
                                                 (if (null? #{m1 27390}#)
                                                   (if (null? #{s1 27391}#)
                                                     #{w2 27389}#
                                                     (cons (car #{w2 27389}#)
                                                           (let ((#{m2 27408}#
                                                                   (cdr #{w2 27389}#)))
                                                             (if (null? #{m2 27408}#)
                                                               #{s1 27391}#
                                                               (append
                                                                 #{s1 27391}#
                                                                 #{m2 27408}#)))))
                                                   (cons (let ((#{m2 27416}#
                                                                 (car #{w2 27389}#)))
                                                           (if (null? #{m2 27416}#)
                                                             #{m1 27390}#
                                                             (append
                                                               #{m1 27390}#
                                                               #{m2 27416}#)))
                                                         (let ((#{m2 27424}#
                                                                 (cdr #{w2 27389}#)))
                                                           (if (null? #{m2 27424}#)
                                                             #{s1 27391}#
                                                             (append
                                                               #{s1 27391}#
                                                               #{m2 27424}#))))))))
                                           (#{module 27380}#
                                             (vector-ref #{value 25794}# 3)))
                                       (vector
                                         'syntax-object
                                         #{expression 27378}#
                                         #{wrap 27379}#
                                         #{module 27380}#))
                                     (if (null? #{value 25794}#)
                                       #{value 25794}#
                                       (vector
                                         'syntax-object
                                         #{value 25794}#
                                         #{w 25797}#
                                         #{mod 25799}#)))))
                               (if (eqv? #{type 25793}# 'syntax)
                                 (syntax-violation
                                   #f
                                   "reference to pattern variable outside syntax form"
                                   (let ((#{x 27459}#
                                           (begin
                                             (if (if (pair? #{e 25795}#)
                                                   #{s 25798}#
                                                   #f)
                                               (set-source-properties!
                                                 #{e 25795}#
                                                 #{s 25798}#))
                                             #{e 25795}#)))
                                     (if (if (null? (car #{w 25797}#))
                                           (null? (cdr #{w 25797}#))
                                           #f)
                                       #{x 27459}#
                                       (if (if (vector? #{x 27459}#)
                                             (if (= (vector-length #{x 27459}#)
                                                    4)
                                               (eq? (vector-ref #{x 27459}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (let ((#{expression 27491}#
                                                 (vector-ref #{x 27459}# 1))
                                               (#{wrap 27492}#
                                                 (let ((#{w2 27500}#
                                                         (vector-ref
                                                           #{x 27459}#
                                                           2)))
                                                   (let ((#{m1 27501}#
                                                           (car #{w 25797}#))
                                                         (#{s1 27502}#
                                                           (cdr #{w 25797}#)))
                                                     (if (null? #{m1 27501}#)
                                                       (if (null? #{s1 27502}#)
                                                         #{w2 27500}#
                                                         (cons (car #{w2 27500}#)
                                                               (let ((#{m2 27517}#
                                                                       (cdr #{w2 27500}#)))
                                                                 (if (null? #{m2 27517}#)
                                                                   #{s1 27502}#
                                                                   (append
                                                                     #{s1 27502}#
                                                                     #{m2 27517}#)))))
                                                       (cons (let ((#{m2 27525}#
                                                                     (car #{w2 27500}#)))
                                                               (if (null? #{m2 27525}#)
                                                                 #{m1 27501}#
                                                                 (append
                                                                   #{m1 27501}#
                                                                   #{m2 27525}#)))
                                                             (let ((#{m2 27533}#
                                                                     (cdr #{w2 27500}#)))
                                                               (if (null? #{m2 27533}#)
                                                                 #{s1 27502}#
                                                                 (append
                                                                   #{s1 27502}#
                                                                   #{m2 27533}#))))))))
                                               (#{module 27493}#
                                                 (vector-ref #{x 27459}# 3)))
                                           (vector
                                             'syntax-object
                                             #{expression 27491}#
                                             #{wrap 27492}#
                                             #{module 27493}#))
                                         (if (null? #{x 27459}#)
                                           #{x 27459}#
                                           (vector
                                             'syntax-object
                                             #{x 27459}#
                                             #{w 25797}#
                                             #{mod 25799}#))))))
                                 (if (eqv? #{type 25793}# 'displaced-lexical)
                                   (syntax-violation
                                     #f
                                     "reference to identifier outside its scope"
                                     (let ((#{x 27560}#
                                             (begin
                                               (if (if (pair? #{e 25795}#)
                                                     #{s 25798}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e 25795}#
                                                   #{s 25798}#))
                                               #{e 25795}#)))
                                       (if (if (null? (car #{w 25797}#))
                                             (null? (cdr #{w 25797}#))
                                             #f)
                                         #{x 27560}#
                                         (if (if (vector? #{x 27560}#)
                                               (if (= (vector-length
                                                        #{x 27560}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 27560}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (let ((#{expression 27592}#
                                                   (vector-ref #{x 27560}# 1))
                                                 (#{wrap 27593}#
                                                   (let ((#{w2 27601}#
                                                           (vector-ref
                                                             #{x 27560}#
                                                             2)))
                                                     (let ((#{m1 27602}#
                                                             (car #{w 25797}#))
                                                           (#{s1 27603}#
                                                             (cdr #{w 25797}#)))
                                                       (if (null? #{m1 27602}#)
                                                         (if (null? #{s1 27603}#)
                                                           #{w2 27601}#
                                                           (cons (car #{w2 27601}#)
                                                                 (let ((#{m2 27618}#
                                                                         (cdr #{w2 27601}#)))
                                                                   (if (null? #{m2 27618}#)
                                                                     #{s1 27603}#
                                                                     (append
                                                                       #{s1 27603}#
                                                                       #{m2 27618}#)))))
                                                         (cons (let ((#{m2 27626}#
                                                                       (car #{w2 27601}#)))
                                                                 (if (null? #{m2 27626}#)
                                                                   #{m1 27602}#
                                                                   (append
                                                                     #{m1 27602}#
                                                                     #{m2 27626}#)))
                                                               (let ((#{m2 27634}#
                                                                       (cdr #{w2 27601}#)))
                                                                 (if (null? #{m2 27634}#)
                                                                   #{s1 27603}#
                                                                   (append
                                                                     #{s1 27603}#
                                                                     #{m2 27634}#))))))))
                                                 (#{module 27594}#
                                                   (vector-ref #{x 27560}# 3)))
                                             (vector
                                               'syntax-object
                                               #{expression 27592}#
                                               #{wrap 27593}#
                                               #{module 27594}#))
                                           (if (null? #{x 27560}#)
                                             #{x 27560}#
                                             (vector
                                               'syntax-object
                                               #{x 27560}#
                                               #{w 25797}#
                                               #{mod 25799}#))))))
                                   (syntax-violation
                                     #f
                                     "unexpected syntax"
                                     (let ((#{x 27658}#
                                             (begin
                                               (if (if (pair? #{e 25795}#)
                                                     #{s 25798}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e 25795}#
                                                   #{s 25798}#))
                                               #{e 25795}#)))
                                       (if (if (null? (car #{w 25797}#))
                                             (null? (cdr #{w 25797}#))
                                             #f)
                                         #{x 27658}#
                                         (if (if (vector? #{x 27658}#)
                                               (if (= (vector-length
                                                        #{x 27658}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 27658}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (let ((#{expression 27690}#
                                                   (vector-ref #{x 27658}# 1))
                                                 (#{wrap 27691}#
                                                   (let ((#{w2 27699}#
                                                           (vector-ref
                                                             #{x 27658}#
                                                             2)))
                                                     (let ((#{m1 27700}#
                                                             (car #{w 25797}#))
                                                           (#{s1 27701}#
                                                             (cdr #{w 25797}#)))
                                                       (if (null? #{m1 27700}#)
                                                         (if (null? #{s1 27701}#)
                                                           #{w2 27699}#
                                                           (cons (car #{w2 27699}#)
                                                                 (let ((#{m2 27716}#
                                                                         (cdr #{w2 27699}#)))
                                                                   (if (null? #{m2 27716}#)
                                                                     #{s1 27701}#
                                                                     (append
                                                                       #{s1 27701}#
                                                                       #{m2 27716}#)))))
                                                         (cons (let ((#{m2 27724}#
                                                                       (car #{w2 27699}#)))
                                                                 (if (null? #{m2 27724}#)
                                                                   #{m1 27700}#
                                                                   (append
                                                                     #{m1 27700}#
                                                                     #{m2 27724}#)))
                                                               (let ((#{m2 27732}#
                                                                       (cdr #{w2 27699}#)))
                                                                 (if (null? #{m2 27732}#)
                                                                   #{s1 27701}#
                                                                   (append
                                                                     #{s1 27701}#
                                                                     #{m2 27732}#))))))))
                                                 (#{module 27692}#
                                                   (vector-ref #{x 27658}# 3)))
                                             (vector
                                               'syntax-object
                                               #{expression 27690}#
                                               #{wrap 27691}#
                                               #{module 27692}#))
                                           (if (null? #{x 27658}#)
                                             #{x 27658}#
                                             (vector
                                               'syntax-object
                                               #{x 27658}#
                                               #{w 25797}#
                                               #{mod 25799}#))))))))))))))))))))))
   (#{chi-call 4448}#
     (lambda (#{x 27747}#
              #{e 27748}#
              #{r 27749}#
              #{w 27750}#
              #{s 27751}#
              #{mod 27752}#)
       (let ((#{tmp 27754}#
               ($sc-dispatch #{e 27748}# '(any . each-any))))
         (if #{tmp 27754}#
           (@apply
             (lambda (#{e0 27758}# #{e1 27759}#)
               (#{build-call 4380}#
                 #{s 27751}#
                 #{x 27747}#
                 (map (lambda (#{e 27851}#)
                        (#{chi 4446}#
                          #{e 27851}#
                          #{r 27749}#
                          #{w 27750}#
                          #{mod 27752}#))
                      #{e1 27759}#)))
             #{tmp 27754}#)
           (syntax-violation
             #f
             "source expression failed to match any pattern"
             #{e 27748}#)))))
   (#{chi-macro 4449}#
     (lambda (#{p 27939}#
              #{e 27940}#
              #{r 27941}#
              #{w 27942}#
              #{s 27943}#
              #{rib 27944}#
              #{mod 27945}#)
       (letrec*
         ((#{rebuild-macro-output 27946}#
            (lambda (#{x 28053}# #{m 28054}#)
              (if (pair? #{x 28053}#)
                (let ((#{e 28058}#
                        (cons (#{rebuild-macro-output 27946}#
                                (car #{x 28053}#)
                                #{m 28054}#)
                              (#{rebuild-macro-output 27946}#
                                (cdr #{x 28053}#)
                                #{m 28054}#))))
                  (begin
                    (if (if (pair? #{e 28058}#) #{s 27943}# #f)
                      (set-source-properties! #{e 28058}# #{s 27943}#))
                    #{e 28058}#))
                (if (if (vector? #{x 28053}#)
                      (if (= (vector-length #{x 28053}#) 4)
                        (eq? (vector-ref #{x 28053}# 0) 'syntax-object)
                        #f)
                      #f)
                  (let ((#{w 28074}# (vector-ref #{x 28053}# 2)))
                    (let ((#{ms 28075}# (car #{w 28074}#))
                          (#{s 28076}# (cdr #{w 28074}#)))
                      (if (if (pair? #{ms 28075}#)
                            (eq? (car #{ms 28075}#) #f)
                            #f)
                        (let ((#{expression 28084}# (vector-ref #{x 28053}# 1))
                              (#{wrap 28085}#
                                (cons (cdr #{ms 28075}#)
                                      (if #{rib 27944}#
                                        (cons #{rib 27944}# (cdr #{s 28076}#))
                                        (cdr #{s 28076}#))))
                              (#{module 28086}# (vector-ref #{x 28053}# 3)))
                          (vector
                            'syntax-object
                            #{expression 28084}#
                            #{wrap 28085}#
                            #{module 28086}#))
                        (let ((#{expression 28096}#
                                (let ((#{e 28101}# (vector-ref #{x 28053}# 1)))
                                  (begin
                                    (if (if (pair? #{e 28101}#) #{s 28076}# #f)
                                      (set-source-properties!
                                        #{e 28101}#
                                        #{s 28076}#))
                                    #{e 28101}#)))
                              (#{wrap 28097}#
                                (cons (cons #{m 28054}# #{ms 28075}#)
                                      (if #{rib 27944}#
                                        (cons #{rib 27944}#
                                              (cons 'shift #{s 28076}#))
                                        (cons 'shift #{s 28076}#))))
                              (#{module 28098}# (vector-ref #{x 28053}# 3)))
                          (vector
                            'syntax-object
                            #{expression 28096}#
                            #{wrap 28097}#
                            #{module 28098}#)))))
                  (if (vector? #{x 28053}#)
                    (let ((#{n 28113}# (vector-length #{x 28053}#)))
                      (let ((#{v 28114}#
                              (let ((#{e 28122}# (make-vector #{n 28113}#)))
                                (begin
                                  (if (if (pair? #{e 28122}#) #{x 28053}# #f)
                                    (set-source-properties!
                                      #{e 28122}#
                                      #{x 28053}#))
                                  #{e 28122}#))))
                        (letrec*
                          ((#{loop 28115}#
                             (lambda (#{i 28176}#)
                               (if (= #{i 28176}# #{n 28113}#)
                                 #{v 28114}#
                                 (begin
                                   (vector-set!
                                     #{v 28114}#
                                     #{i 28176}#
                                     (#{rebuild-macro-output 27946}#
                                       (vector-ref #{x 28053}# #{i 28176}#)
                                       #{m 28054}#))
                                   (#{loop 28115}# (#{1+}# #{i 28176}#)))))))
                          (#{loop 28115}# 0))))
                    (if (symbol? #{x 28053}#)
                      (syntax-violation
                        #f
                        "encountered raw symbol in macro output"
                        (let ((#{s 28182}# (cdr #{w 27942}#)))
                          (let ((#{x 28186}#
                                  (begin
                                    (if (if (pair? #{e 27940}#) #{s 28182}# #f)
                                      (set-source-properties!
                                        #{e 27940}#
                                        #{s 28182}#))
                                    #{e 27940}#)))
                            (if (if (null? (car #{w 27942}#))
                                  (null? (cdr #{w 27942}#))
                                  #f)
                              #{x 28186}#
                              (if (if (vector? #{x 28186}#)
                                    (if (= (vector-length #{x 28186}#) 4)
                                      (eq? (vector-ref #{x 28186}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 28218}#
                                        (vector-ref #{x 28186}# 1))
                                      (#{wrap 28219}#
                                        (let ((#{w2 28227}#
                                                (vector-ref #{x 28186}# 2)))
                                          (let ((#{m1 28228}#
                                                  (car #{w 27942}#))
                                                (#{s1 28229}#
                                                  (cdr #{w 27942}#)))
                                            (if (null? #{m1 28228}#)
                                              (if (null? #{s1 28229}#)
                                                #{w2 28227}#
                                                (cons (car #{w2 28227}#)
                                                      (let ((#{m2 28244}#
                                                              (cdr #{w2 28227}#)))
                                                        (if (null? #{m2 28244}#)
                                                          #{s1 28229}#
                                                          (append
                                                            #{s1 28229}#
                                                            #{m2 28244}#)))))
                                              (cons (let ((#{m2 28252}#
                                                            (car #{w2 28227}#)))
                                                      (if (null? #{m2 28252}#)
                                                        #{m1 28228}#
                                                        (append
                                                          #{m1 28228}#
                                                          #{m2 28252}#)))
                                                    (let ((#{m2 28260}#
                                                            (cdr #{w2 28227}#)))
                                                      (if (null? #{m2 28260}#)
                                                        #{s1 28229}#
                                                        (append
                                                          #{s1 28229}#
                                                          #{m2 28260}#))))))))
                                      (#{module 28220}#
                                        (vector-ref #{x 28186}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 28218}#
                                    #{wrap 28219}#
                                    #{module 28220}#))
                                (if (null? #{x 28186}#)
                                  #{x 28186}#
                                  (vector
                                    'syntax-object
                                    #{x 28186}#
                                    #{w 27942}#
                                    #{mod 27945}#))))))
                        #{x 28053}#)
                      (begin
                        (if (if (pair? #{x 28053}#) #{s 27943}# #f)
                          (set-source-properties! #{x 28053}# #{s 27943}#))
                        #{x 28053}#))))))))
         (#{rebuild-macro-output 27946}#
           (#{p 27939}#
             (let ((#{w 27953}#
                     (cons (cons #f (car #{w 27942}#))
                           (cons 'shift (cdr #{w 27942}#)))))
               (let ((#{x 27958}#
                       (begin
                         (if (if (pair? #{e 27940}#) #{s 27943}# #f)
                           (set-source-properties! #{e 27940}# #{s 27943}#))
                         #{e 27940}#)))
                 (if (if (null? (car #{w 27953}#))
                       (null? (cdr #{w 27953}#))
                       #f)
                   #{x 27958}#
                   (if (if (vector? #{x 27958}#)
                         (if (= (vector-length #{x 27958}#) 4)
                           (eq? (vector-ref #{x 27958}# 0) 'syntax-object)
                           #f)
                         #f)
                     (let ((#{expression 27996}# (vector-ref #{x 27958}# 1))
                           (#{wrap 27997}#
                             (let ((#{w2 28005}# (vector-ref #{x 27958}# 2)))
                               (let ((#{m1 28006}# (car #{w 27953}#))
                                     (#{s1 28007}# (cdr #{w 27953}#)))
                                 (if (null? #{m1 28006}#)
                                   (if (null? #{s1 28007}#)
                                     #{w2 28005}#
                                     (cons (car #{w2 28005}#)
                                           (let ((#{m2 28022}#
                                                   (cdr #{w2 28005}#)))
                                             (if (null? #{m2 28022}#)
                                               #{s1 28007}#
                                               (append
                                                 #{s1 28007}#
                                                 #{m2 28022}#)))))
                                   (cons (let ((#{m2 28030}#
                                                 (car #{w2 28005}#)))
                                           (if (null? #{m2 28030}#)
                                             #{m1 28006}#
                                             (append
                                               #{m1 28006}#
                                               #{m2 28030}#)))
                                         (let ((#{m2 28038}#
                                                 (cdr #{w2 28005}#)))
                                           (if (null? #{m2 28038}#)
                                             #{s1 28007}#
                                             (append
                                               #{s1 28007}#
                                               #{m2 28038}#))))))))
                           (#{module 27998}# (vector-ref #{x 27958}# 3)))
                       (vector
                         'syntax-object
                         #{expression 27996}#
                         #{wrap 27997}#
                         #{module 27998}#))
                     (if (null? #{x 27958}#)
                       #{x 27958}#
                       (vector
                         'syntax-object
                         #{x 27958}#
                         #{w 27953}#
                         #{mod 27945}#)))))))
           (gensym "m")))))
   (#{chi-body 4450}#
     (lambda (#{body 28290}#
              #{outer-form 28291}#
              #{r 28292}#
              #{w 28293}#
              #{mod 28294}#)
       (let ((#{r 28295}#
               (cons '("placeholder" placeholder) #{r 28292}#)))
         (let ((#{ribcage 28296}# (vector 'ribcage '() '() '())))
           (let ((#{w 28297}#
                   (cons (car #{w 28293}#)
                         (cons #{ribcage 28296}# (cdr #{w 28293}#)))))
             (letrec*
               ((#{parse 28298}#
                  (lambda (#{body 28406}#
                           #{ids 28407}#
                           #{labels 28408}#
                           #{var-ids 28409}#
                           #{vars 28410}#
                           #{vals 28411}#
                           #{bindings 28412}#)
                    (if (null? #{body 28406}#)
                      (syntax-violation
                        #f
                        "no expressions in body"
                        #{outer-form 28291}#)
                      (let ((#{e 28413}# (cdr (car #{body 28406}#)))
                            (#{er 28414}# (car (car #{body 28406}#))))
                        (call-with-values
                          (lambda ()
                            (#{syntax-type 4445}#
                              #{e 28413}#
                              #{er 28414}#
                              '(())
                              (#{source-annotation 4407}# #{er 28414}#)
                              #{ribcage 28296}#
                              #{mod 28294}#
                              #f))
                          (lambda (#{type 28620}#
                                   #{value 28621}#
                                   #{e 28622}#
                                   #{w 28623}#
                                   #{s 28624}#
                                   #{mod 28625}#)
                            (if (eqv? #{type 28620}# 'define-form)
                              (let ((#{id 28629}#
                                      (if (if (null? (car #{w 28623}#))
                                            (null? (cdr #{w 28623}#))
                                            #f)
                                        #{value 28621}#
                                        (if (if (vector? #{value 28621}#)
                                              (if (= (vector-length
                                                       #{value 28621}#)
                                                     4)
                                                (eq? (vector-ref
                                                       #{value 28621}#
                                                       0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (let ((#{expression 28674}#
                                                  (vector-ref
                                                    #{value 28621}#
                                                    1))
                                                (#{wrap 28675}#
                                                  (let ((#{w2 28685}#
                                                          (vector-ref
                                                            #{value 28621}#
                                                            2)))
                                                    (let ((#{m1 28686}#
                                                            (car #{w 28623}#))
                                                          (#{s1 28687}#
                                                            (cdr #{w 28623}#)))
                                                      (if (null? #{m1 28686}#)
                                                        (if (null? #{s1 28687}#)
                                                          #{w2 28685}#
                                                          (cons (car #{w2 28685}#)
                                                                (let ((#{m2 28704}#
                                                                        (cdr #{w2 28685}#)))
                                                                  (if (null? #{m2 28704}#)
                                                                    #{s1 28687}#
                                                                    (append
                                                                      #{s1 28687}#
                                                                      #{m2 28704}#)))))
                                                        (cons (let ((#{m2 28712}#
                                                                      (car #{w2 28685}#)))
                                                                (if (null? #{m2 28712}#)
                                                                  #{m1 28686}#
                                                                  (append
                                                                    #{m1 28686}#
                                                                    #{m2 28712}#)))
                                                              (let ((#{m2 28720}#
                                                                      (cdr #{w2 28685}#)))
                                                                (if (null? #{m2 28720}#)
                                                                  #{s1 28687}#
                                                                  (append
                                                                    #{s1 28687}#
                                                                    #{m2 28720}#))))))))
                                                (#{module 28676}#
                                                  (vector-ref
                                                    #{value 28621}#
                                                    3)))
                                            (vector
                                              'syntax-object
                                              #{expression 28674}#
                                              #{wrap 28675}#
                                              #{module 28676}#))
                                          (if (null? #{value 28621}#)
                                            #{value 28621}#
                                            (vector
                                              'syntax-object
                                              #{value 28621}#
                                              #{w 28623}#
                                              #{mod 28625}#)))))
                                    (#{label 28630}#
                                      (symbol->string (gensym "i"))))
                                (let ((#{var 28631}#
                                        (let ((#{id 28781}#
                                                (if (if (vector? #{id 28629}#)
                                                      (if (= (vector-length
                                                               #{id 28629}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{id 28629}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref #{id 28629}# 1)
                                                  #{id 28629}#)))
                                          (gensym
                                            (string-append
                                              (symbol->string #{id 28781}#)
                                              " ")))))
                                  (begin
                                    (begin
                                      (let ((#{update 28640}#
                                              (cons (vector-ref #{id 28629}# 1)
                                                    (vector-ref
                                                      #{ribcage 28296}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 28296}#
                                          1
                                          #{update 28640}#))
                                      (let ((#{update 28752}#
                                              (cons (car (vector-ref
                                                           #{id 28629}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 28296}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 28296}#
                                          2
                                          #{update 28752}#))
                                      (let ((#{update 28767}#
                                              (cons #{label 28630}#
                                                    (vector-ref
                                                      #{ribcage 28296}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 28296}#
                                          3
                                          #{update 28767}#)))
                                    (#{parse 28298}#
                                      (cdr #{body 28406}#)
                                      (cons #{id 28629}# #{ids 28407}#)
                                      (cons #{label 28630}# #{labels 28408}#)
                                      (cons #{id 28629}# #{var-ids 28409}#)
                                      (cons #{var 28631}# #{vars 28410}#)
                                      (cons (cons #{er 28414}#
                                                  (if (if (null? (car #{w 28623}#))
                                                        (null? (cdr #{w 28623}#))
                                                        #f)
                                                    #{e 28622}#
                                                    (if (if (vector?
                                                              #{e 28622}#)
                                                          (if (= (vector-length
                                                                   #{e 28622}#)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   #{e 28622}#
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (let ((#{expression 28833}#
                                                              (vector-ref
                                                                #{e 28622}#
                                                                1))
                                                            (#{wrap 28834}#
                                                              (let ((#{w2 28844}#
                                                                      (vector-ref
                                                                        #{e 28622}#
                                                                        2)))
                                                                (let ((#{m1 28845}#
                                                                        (car #{w 28623}#))
                                                                      (#{s1 28846}#
                                                                        (cdr #{w 28623}#)))
                                                                  (if (null? #{m1 28845}#)
                                                                    (if (null? #{s1 28846}#)
                                                                      #{w2 28844}#
                                                                      (cons (car #{w2 28844}#)
                                                                            (let ((#{m2 28863}#
                                                                                    (cdr #{w2 28844}#)))
                                                                              (if (null? #{m2 28863}#)
                                                                                #{s1 28846}#
                                                                                (append
                                                                                  #{s1 28846}#
                                                                                  #{m2 28863}#)))))
                                                                    (cons (let ((#{m2 28871}#
                                                                                  (car #{w2 28844}#)))
                                                                            (if (null? #{m2 28871}#)
                                                                              #{m1 28845}#
                                                                              (append
                                                                                #{m1 28845}#
                                                                                #{m2 28871}#)))
                                                                          (let ((#{m2 28879}#
                                                                                  (cdr #{w2 28844}#)))
                                                                            (if (null? #{m2 28879}#)
                                                                              #{s1 28846}#
                                                                              (append
                                                                                #{s1 28846}#
                                                                                #{m2 28879}#))))))))
                                                            (#{module 28835}#
                                                              (vector-ref
                                                                #{e 28622}#
                                                                3)))
                                                        (vector
                                                          'syntax-object
                                                          #{expression 28833}#
                                                          #{wrap 28834}#
                                                          #{module 28835}#))
                                                      (if (null? #{e 28622}#)
                                                        #{e 28622}#
                                                        (vector
                                                          'syntax-object
                                                          #{e 28622}#
                                                          #{w 28623}#
                                                          #{mod 28625}#)))))
                                            #{vals 28411}#)
                                      (cons (cons 'lexical #{var 28631}#)
                                            #{bindings 28412}#)))))
                              (if (if (eqv? #{type 28620}# 'define-syntax-form)
                                    #t
                                    (eqv? #{type 28620}#
                                          'define-syntax-parameter-form))
                                (let ((#{id 28910}#
                                        (if (if (null? (car #{w 28623}#))
                                              (null? (cdr #{w 28623}#))
                                              #f)
                                          #{value 28621}#
                                          (if (if (vector? #{value 28621}#)
                                                (if (= (vector-length
                                                         #{value 28621}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{value 28621}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (let ((#{expression 28954}#
                                                    (vector-ref
                                                      #{value 28621}#
                                                      1))
                                                  (#{wrap 28955}#
                                                    (let ((#{w2 28965}#
                                                            (vector-ref
                                                              #{value 28621}#
                                                              2)))
                                                      (let ((#{m1 28966}#
                                                              (car #{w 28623}#))
                                                            (#{s1 28967}#
                                                              (cdr #{w 28623}#)))
                                                        (if (null? #{m1 28966}#)
                                                          (if (null? #{s1 28967}#)
                                                            #{w2 28965}#
                                                            (cons (car #{w2 28965}#)
                                                                  (let ((#{m2 28984}#
                                                                          (cdr #{w2 28965}#)))
                                                                    (if (null? #{m2 28984}#)
                                                                      #{s1 28967}#
                                                                      (append
                                                                        #{s1 28967}#
                                                                        #{m2 28984}#)))))
                                                          (cons (let ((#{m2 28992}#
                                                                        (car #{w2 28965}#)))
                                                                  (if (null? #{m2 28992}#)
                                                                    #{m1 28966}#
                                                                    (append
                                                                      #{m1 28966}#
                                                                      #{m2 28992}#)))
                                                                (let ((#{m2 29000}#
                                                                        (cdr #{w2 28965}#)))
                                                                  (if (null? #{m2 29000}#)
                                                                    #{s1 28967}#
                                                                    (append
                                                                      #{s1 28967}#
                                                                      #{m2 29000}#))))))))
                                                  (#{module 28956}#
                                                    (vector-ref
                                                      #{value 28621}#
                                                      3)))
                                              (vector
                                                'syntax-object
                                                #{expression 28954}#
                                                #{wrap 28955}#
                                                #{module 28956}#))
                                            (if (null? #{value 28621}#)
                                              #{value 28621}#
                                              (vector
                                                'syntax-object
                                                #{value 28621}#
                                                #{w 28623}#
                                                #{mod 28625}#)))))
                                      (#{label 28911}#
                                        (symbol->string (gensym "i"))))
                                  (begin
                                    (begin
                                      (let ((#{update 28920}#
                                              (cons (vector-ref #{id 28910}# 1)
                                                    (vector-ref
                                                      #{ribcage 28296}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 28296}#
                                          1
                                          #{update 28920}#))
                                      (let ((#{update 29032}#
                                              (cons (car (vector-ref
                                                           #{id 28910}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 28296}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 28296}#
                                          2
                                          #{update 29032}#))
                                      (let ((#{update 29047}#
                                              (cons #{label 28911}#
                                                    (vector-ref
                                                      #{ribcage 28296}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 28296}#
                                          3
                                          #{update 29047}#)))
                                    (#{parse 28298}#
                                      (cdr #{body 28406}#)
                                      (cons #{id 28910}# #{ids 28407}#)
                                      (cons #{label 28911}# #{labels 28408}#)
                                      #{var-ids 28409}#
                                      #{vars 28410}#
                                      #{vals 28411}#
                                      (cons (cons (if (eq? #{type 28620}#
                                                           'define-syntax-parameter-form)
                                                    'syntax-parameter
                                                    'macro)
                                                  (cons #{er 28414}#
                                                        (if (if (null? (car #{w 28623}#))
                                                              (null? (cdr #{w 28623}#))
                                                              #f)
                                                          #{e 28622}#
                                                          (if (if (vector?
                                                                    #{e 28622}#)
                                                                (if (= (vector-length
                                                                         #{e 28622}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{e 28622}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (let ((#{expression 29086}#
                                                                    (vector-ref
                                                                      #{e 28622}#
                                                                      1))
                                                                  (#{wrap 29087}#
                                                                    (let ((#{w2 29097}#
                                                                            (vector-ref
                                                                              #{e 28622}#
                                                                              2)))
                                                                      (let ((#{m1 29098}#
                                                                              (car #{w 28623}#))
                                                                            (#{s1 29099}#
                                                                              (cdr #{w 28623}#)))
                                                                        (if (null? #{m1 29098}#)
                                                                          (if (null? #{s1 29099}#)
                                                                            #{w2 29097}#
                                                                            (cons (car #{w2 29097}#)
                                                                                  (let ((#{m2 29116}#
                                                                                          (cdr #{w2 29097}#)))
                                                                                    (if (null? #{m2 29116}#)
                                                                                      #{s1 29099}#
                                                                                      (append
                                                                                        #{s1 29099}#
                                                                                        #{m2 29116}#)))))
                                                                          (cons (let ((#{m2 29124}#
                                                                                        (car #{w2 29097}#)))
                                                                                  (if (null? #{m2 29124}#)
                                                                                    #{m1 29098}#
                                                                                    (append
                                                                                      #{m1 29098}#
                                                                                      #{m2 29124}#)))
                                                                                (let ((#{m2 29132}#
                                                                                        (cdr #{w2 29097}#)))
                                                                                  (if (null? #{m2 29132}#)
                                                                                    #{s1 29099}#
                                                                                    (append
                                                                                      #{s1 29099}#
                                                                                      #{m2 29132}#))))))))
                                                                  (#{module 29088}#
                                                                    (vector-ref
                                                                      #{e 28622}#
                                                                      3)))
                                                              (vector
                                                                'syntax-object
                                                                #{expression 29086}#
                                                                #{wrap 29087}#
                                                                #{module 29088}#))
                                                            (if (null? #{e 28622}#)
                                                              #{e 28622}#
                                                              (vector
                                                                'syntax-object
                                                                #{e 28622}#
                                                                #{w 28623}#
                                                                #{mod 28625}#))))))
                                            #{bindings 28412}#))))
                                (if (eqv? #{type 28620}# 'begin-form)
                                  (let ((#{tmp 29159}#
                                          ($sc-dispatch
                                            #{e 28622}#
                                            '(_ . each-any))))
                                    (if #{tmp 29159}#
                                      (@apply
                                        (lambda (#{e1 29163}#)
                                          (#{parse 28298}#
                                            (letrec*
                                              ((#{f 29164}#
                                                 (lambda (#{forms 29380}#)
                                                   (if (null? #{forms 29380}#)
                                                     (cdr #{body 28406}#)
                                                     (cons (cons #{er 28414}#
                                                                 (let ((#{x 29384}#
                                                                         (car #{forms 29380}#)))
                                                                   (if (if (null? (car #{w 28623}#))
                                                                         (null? (cdr #{w 28623}#))
                                                                         #f)
                                                                     #{x 29384}#
                                                                     (if (if (vector?
                                                                               #{x 29384}#)
                                                                           (if (= (vector-length
                                                                                    #{x 29384}#)
                                                                                  4)
                                                                             (eq? (vector-ref
                                                                                    #{x 29384}#
                                                                                    0)
                                                                                  'syntax-object)
                                                                             #f)
                                                                           #f)
                                                                       (let ((#{expression 29402}#
                                                                               (vector-ref
                                                                                 #{x 29384}#
                                                                                 1))
                                                                             (#{wrap 29403}#
                                                                               (let ((#{w2 29411}#
                                                                                       (vector-ref
                                                                                         #{x 29384}#
                                                                                         2)))
                                                                                 (let ((#{m1 29412}#
                                                                                         (car #{w 28623}#))
                                                                                       (#{s1 29413}#
                                                                                         (cdr #{w 28623}#)))
                                                                                   (if (null? #{m1 29412}#)
                                                                                     (if (null? #{s1 29413}#)
                                                                                       #{w2 29411}#
                                                                                       (cons (car #{w2 29411}#)
                                                                                             (let ((#{m2 29428}#
                                                                                                     (cdr #{w2 29411}#)))
                                                                                               (if (null? #{m2 29428}#)
                                                                                                 #{s1 29413}#
                                                                                                 (append
                                                                                                   #{s1 29413}#
                                                                                                   #{m2 29428}#)))))
                                                                                     (cons (let ((#{m2 29436}#
                                                                                                   (car #{w2 29411}#)))
                                                                                             (if (null? #{m2 29436}#)
                                                                                               #{m1 29412}#
                                                                                               (append
                                                                                                 #{m1 29412}#
                                                                                                 #{m2 29436}#)))
                                                                                           (let ((#{m2 29444}#
                                                                                                   (cdr #{w2 29411}#)))
                                                                                             (if (null? #{m2 29444}#)
                                                                                               #{s1 29413}#
                                                                                               (append
                                                                                                 #{s1 29413}#
                                                                                                 #{m2 29444}#))))))))
                                                                             (#{module 29404}#
                                                                               (vector-ref
                                                                                 #{x 29384}#
                                                                                 3)))
                                                                         (vector
                                                                           'syntax-object
                                                                           #{expression 29402}#
                                                                           #{wrap 29403}#
                                                                           #{module 29404}#))
                                                                       (if (null? #{x 29384}#)
                                                                         #{x 29384}#
                                                                         (vector
                                                                           'syntax-object
                                                                           #{x 29384}#
                                                                           #{w 28623}#
                                                                           #{mod 28625}#))))))
                                                           (#{f 29164}#
                                                             (cdr #{forms 29380}#)))))))
                                              (#{f 29164}# #{e1 29163}#))
                                            #{ids 28407}#
                                            #{labels 28408}#
                                            #{var-ids 28409}#
                                            #{vars 28410}#
                                            #{vals 28411}#
                                            #{bindings 28412}#))
                                        #{tmp 29159}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 28622}#)))
                                  (if (eqv? #{type 28620}# 'local-syntax-form)
                                    (#{chi-local-syntax 4451}#
                                      #{value 28621}#
                                      #{e 28622}#
                                      #{er 28414}#
                                      #{w 28623}#
                                      #{s 28624}#
                                      #{mod 28625}#
                                      (lambda (#{forms 29470}#
                                               #{er 29471}#
                                               #{w 29472}#
                                               #{s 29473}#
                                               #{mod 29474}#)
                                        (#{parse 28298}#
                                          (letrec*
                                            ((#{f 29475}#
                                               (lambda (#{forms 29691}#)
                                                 (if (null? #{forms 29691}#)
                                                   (cdr #{body 28406}#)
                                                   (cons (cons #{er 29471}#
                                                               (let ((#{x 29695}#
                                                                       (car #{forms 29691}#)))
                                                                 (if (if (null? (car #{w 29472}#))
                                                                       (null? (cdr #{w 29472}#))
                                                                       #f)
                                                                   #{x 29695}#
                                                                   (if (if (vector?
                                                                             #{x 29695}#)
                                                                         (if (= (vector-length
                                                                                  #{x 29695}#)
                                                                                4)
                                                                           (eq? (vector-ref
                                                                                  #{x 29695}#
                                                                                  0)
                                                                                'syntax-object)
                                                                           #f)
                                                                         #f)
                                                                     (let ((#{expression 29713}#
                                                                             (vector-ref
                                                                               #{x 29695}#
                                                                               1))
                                                                           (#{wrap 29714}#
                                                                             (let ((#{w2 29722}#
                                                                                     (vector-ref
                                                                                       #{x 29695}#
                                                                                       2)))
                                                                               (let ((#{m1 29723}#
                                                                                       (car #{w 29472}#))
                                                                                     (#{s1 29724}#
                                                                                       (cdr #{w 29472}#)))
                                                                                 (if (null? #{m1 29723}#)
                                                                                   (if (null? #{s1 29724}#)
                                                                                     #{w2 29722}#
                                                                                     (cons (car #{w2 29722}#)
                                                                                           (let ((#{m2 29739}#
                                                                                                   (cdr #{w2 29722}#)))
                                                                                             (if (null? #{m2 29739}#)
                                                                                               #{s1 29724}#
                                                                                               (append
                                                                                                 #{s1 29724}#
                                                                                                 #{m2 29739}#)))))
                                                                                   (cons (let ((#{m2 29747}#
                                                                                                 (car #{w2 29722}#)))
                                                                                           (if (null? #{m2 29747}#)
                                                                                             #{m1 29723}#
                                                                                             (append
                                                                                               #{m1 29723}#
                                                                                               #{m2 29747}#)))
                                                                                         (let ((#{m2 29755}#
                                                                                                 (cdr #{w2 29722}#)))
                                                                                           (if (null? #{m2 29755}#)
                                                                                             #{s1 29724}#
                                                                                             (append
                                                                                               #{s1 29724}#
                                                                                               #{m2 29755}#))))))))
                                                                           (#{module 29715}#
                                                                             (vector-ref
                                                                               #{x 29695}#
                                                                               3)))
                                                                       (vector
                                                                         'syntax-object
                                                                         #{expression 29713}#
                                                                         #{wrap 29714}#
                                                                         #{module 29715}#))
                                                                     (if (null? #{x 29695}#)
                                                                       #{x 29695}#
                                                                       (vector
                                                                         'syntax-object
                                                                         #{x 29695}#
                                                                         #{w 29472}#
                                                                         #{mod 29474}#))))))
                                                         (#{f 29475}#
                                                           (cdr #{forms 29691}#)))))))
                                            (#{f 29475}# #{forms 29470}#))
                                          #{ids 28407}#
                                          #{labels 28408}#
                                          #{var-ids 28409}#
                                          #{vars 28410}#
                                          #{vals 28411}#
                                          #{bindings 28412}#)))
                                    (if (null? #{ids 28407}#)
                                      (#{build-sequence 4395}#
                                        #f
                                        (map (lambda (#{x 29844}#)
                                               (#{chi 4446}#
                                                 (cdr #{x 29844}#)
                                                 (car #{x 29844}#)
                                                 '(())
                                                 #{mod 28625}#))
                                             (cons (cons #{er 28414}#
                                                         (let ((#{x 29923}#
                                                                 (begin
                                                                   (if (if (pair? #{e 28622}#)
                                                                         #{s 28624}#
                                                                         #f)
                                                                     (set-source-properties!
                                                                       #{e 28622}#
                                                                       #{s 28624}#))
                                                                   #{e 28622}#)))
                                                           (if (if (null? (car #{w 28623}#))
                                                                 (null? (cdr #{w 28623}#))
                                                                 #f)
                                                             #{x 29923}#
                                                             (if (if (vector?
                                                                       #{x 29923}#)
                                                                   (if (= (vector-length
                                                                            #{x 29923}#)
                                                                          4)
                                                                     (eq? (vector-ref
                                                                            #{x 29923}#
                                                                            0)
                                                                          'syntax-object)
                                                                     #f)
                                                                   #f)
                                                               (let ((#{expression 29955}#
                                                                       (vector-ref
                                                                         #{x 29923}#
                                                                         1))
                                                                     (#{wrap 29956}#
                                                                       (let ((#{w2 29964}#
                                                                               (vector-ref
                                                                                 #{x 29923}#
                                                                                 2)))
                                                                         (let ((#{m1 29965}#
                                                                                 (car #{w 28623}#))
                                                                               (#{s1 29966}#
                                                                                 (cdr #{w 28623}#)))
                                                                           (if (null? #{m1 29965}#)
                                                                             (if (null? #{s1 29966}#)
                                                                               #{w2 29964}#
                                                                               (cons (car #{w2 29964}#)
                                                                                     (let ((#{m2 29981}#
                                                                                             (cdr #{w2 29964}#)))
                                                                                       (if (null? #{m2 29981}#)
                                                                                         #{s1 29966}#
                                                                                         (append
                                                                                           #{s1 29966}#
                                                                                           #{m2 29981}#)))))
                                                                             (cons (let ((#{m2 29989}#
                                                                                           (car #{w2 29964}#)))
                                                                                     (if (null? #{m2 29989}#)
                                                                                       #{m1 29965}#
                                                                                       (append
                                                                                         #{m1 29965}#
                                                                                         #{m2 29989}#)))
                                                                                   (let ((#{m2 29997}#
                                                                                           (cdr #{w2 29964}#)))
                                                                                     (if (null? #{m2 29997}#)
                                                                                       #{s1 29966}#
                                                                                       (append
                                                                                         #{s1 29966}#
                                                                                         #{m2 29997}#))))))))
                                                                     (#{module 29957}#
                                                                       (vector-ref
                                                                         #{x 29923}#
                                                                         3)))
                                                                 (vector
                                                                   'syntax-object
                                                                   #{expression 29955}#
                                                                   #{wrap 29956}#
                                                                   #{module 29957}#))
                                                               (if (null? #{x 29923}#)
                                                                 #{x 29923}#
                                                                 (vector
                                                                   'syntax-object
                                                                   #{x 29923}#
                                                                   #{w 28623}#
                                                                   #{mod 28625}#))))))
                                                   (cdr #{body 28406}#))))
                                      (begin
                                        (if (not (#{valid-bound-ids? 4436}#
                                                   #{ids 28407}#))
                                          (syntax-violation
                                            #f
                                            "invalid or duplicate identifier in definition"
                                            #{outer-form 28291}#))
                                        (letrec*
                                          ((#{loop 30096}#
                                             (lambda (#{bs 30099}#
                                                      #{er-cache 30100}#
                                                      #{r-cache 30101}#)
                                               (if (not (null? #{bs 30099}#))
                                                 (let ((#{b 30102}#
                                                         (car #{bs 30099}#)))
                                                   (if (let ((#{t 30105}#
                                                               (car #{b 30102}#)))
                                                         (if (eq? #{t 30105}#
                                                                  'macro)
                                                           #t
                                                           (eq? #{t 30105}#
                                                                'syntax-parameter)))
                                                     (let ((#{er 30107}#
                                                             (car (cdr #{b 30102}#))))
                                                       (let ((#{r-cache 30108}#
                                                               (if (eq? #{er 30107}#
                                                                        #{er-cache 30100}#)
                                                                 #{r-cache 30101}#
                                                                 (#{macros-only-env 4410}#
                                                                   #{er 30107}#))))
                                                         (begin
                                                           (set-cdr!
                                                             #{b 30102}#
                                                             (#{eval-local-transformer 4452}#
                                                               (#{chi 4446}#
                                                                 (cdr (cdr #{b 30102}#))
                                                                 #{r-cache 30108}#
                                                                 '(())
                                                                 #{mod 28625}#)
                                                               #{mod 28625}#))
                                                           (if (eq? (car #{b 30102}#)
                                                                    'syntax-parameter)
                                                             (set-cdr!
                                                               #{b 30102}#
                                                               (list (cdr #{b 30102}#))))
                                                           (#{loop 30096}#
                                                             (cdr #{bs 30099}#)
                                                             #{er 30107}#
                                                             #{r-cache 30108}#))))
                                                     (#{loop 30096}#
                                                       (cdr #{bs 30099}#)
                                                       #{er-cache 30100}#
                                                       #{r-cache 30101}#)))))))
                                          (#{loop 30096}#
                                            #{bindings 28412}#
                                            #f
                                            #f))
                                        (set-cdr!
                                          #{r 28295}#
                                          (#{extend-env 4408}#
                                            #{labels 28408}#
                                            #{bindings 28412}#
                                            (cdr #{r 28295}#)))
                                        (#{build-letrec 4398}#
                                          #f
                                          #t
                                          (reverse
                                            (map syntax->datum
                                                 #{var-ids 28409}#))
                                          (reverse #{vars 28410}#)
                                          (map (lambda (#{x 30536}#)
                                                 (#{chi 4446}#
                                                   (cdr #{x 30536}#)
                                                   (car #{x 30536}#)
                                                   '(())
                                                   #{mod 28625}#))
                                               (reverse #{vals 28411}#))
                                          (#{build-sequence 4395}#
                                            #f
                                            (map (lambda (#{x 30680}#)
                                                   (#{chi 4446}#
                                                     (cdr #{x 30680}#)
                                                     (car #{x 30680}#)
                                                     '(())
                                                     #{mod 28625}#))
                                                 (cons (cons #{er 28414}#
                                                             (let ((#{x 30759}#
                                                                     (begin
                                                                       (if (if (pair? #{e 28622}#)
                                                                             #{s 28624}#
                                                                             #f)
                                                                         (set-source-properties!
                                                                           #{e 28622}#
                                                                           #{s 28624}#))
                                                                       #{e 28622}#)))
                                                               (if (if (null? (car #{w 28623}#))
                                                                     (null? (cdr #{w 28623}#))
                                                                     #f)
                                                                 #{x 30759}#
                                                                 (if (if (vector?
                                                                           #{x 30759}#)
                                                                       (if (= (vector-length
                                                                                #{x 30759}#)
                                                                              4)
                                                                         (eq? (vector-ref
                                                                                #{x 30759}#
                                                                                0)
                                                                              'syntax-object)
                                                                         #f)
                                                                       #f)
                                                                   (let ((#{expression 30791}#
                                                                           (vector-ref
                                                                             #{x 30759}#
                                                                             1))
                                                                         (#{wrap 30792}#
                                                                           (let ((#{w2 30800}#
                                                                                   (vector-ref
                                                                                     #{x 30759}#
                                                                                     2)))
                                                                             (let ((#{m1 30801}#
                                                                                     (car #{w 28623}#))
                                                                                   (#{s1 30802}#
                                                                                     (cdr #{w 28623}#)))
                                                                               (if (null? #{m1 30801}#)
                                                                                 (if (null? #{s1 30802}#)
                                                                                   #{w2 30800}#
                                                                                   (cons (car #{w2 30800}#)
                                                                                         (let ((#{m2 30817}#
                                                                                                 (cdr #{w2 30800}#)))
                                                                                           (if (null? #{m2 30817}#)
                                                                                             #{s1 30802}#
                                                                                             (append
                                                                                               #{s1 30802}#
                                                                                               #{m2 30817}#)))))
                                                                                 (cons (let ((#{m2 30825}#
                                                                                               (car #{w2 30800}#)))
                                                                                         (if (null? #{m2 30825}#)
                                                                                           #{m1 30801}#
                                                                                           (append
                                                                                             #{m1 30801}#
                                                                                             #{m2 30825}#)))
                                                                                       (let ((#{m2 30833}#
                                                                                               (cdr #{w2 30800}#)))
                                                                                         (if (null? #{m2 30833}#)
                                                                                           #{s1 30802}#
                                                                                           (append
                                                                                             #{s1 30802}#
                                                                                             #{m2 30833}#))))))))
                                                                         (#{module 30793}#
                                                                           (vector-ref
                                                                             #{x 30759}#
                                                                             3)))
                                                                     (vector
                                                                       'syntax-object
                                                                       #{expression 30791}#
                                                                       #{wrap 30792}#
                                                                       #{module 30793}#))
                                                                   (if (null? #{x 30759}#)
                                                                     #{x 30759}#
                                                                     (vector
                                                                       'syntax-object
                                                                       #{x 30759}#
                                                                       #{w 28623}#
                                                                       #{mod 28625}#))))))
                                                       (cdr #{body 28406}#))))))))))))))))))
               (#{parse 28298}#
                 (map (lambda (#{x 28301}#)
                        (cons #{r 28295}#
                              (if (if (null? (car #{w 28297}#))
                                    (null? (cdr #{w 28297}#))
                                    #f)
                                #{x 28301}#
                                (if (if (vector? #{x 28301}#)
                                      (if (= (vector-length #{x 28301}#) 4)
                                        (eq? (vector-ref #{x 28301}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 28337}#
                                          (vector-ref #{x 28301}# 1))
                                        (#{wrap 28338}#
                                          (let ((#{w2 28348}#
                                                  (vector-ref #{x 28301}# 2)))
                                            (let ((#{m1 28349}#
                                                    (car #{w 28297}#))
                                                  (#{s1 28350}#
                                                    (cdr #{w 28297}#)))
                                              (if (null? #{m1 28349}#)
                                                (if (null? #{s1 28350}#)
                                                  #{w2 28348}#
                                                  (cons (car #{w2 28348}#)
                                                        (let ((#{m2 28367}#
                                                                (cdr #{w2 28348}#)))
                                                          (if (null? #{m2 28367}#)
                                                            #{s1 28350}#
                                                            (append
                                                              #{s1 28350}#
                                                              #{m2 28367}#)))))
                                                (cons (let ((#{m2 28375}#
                                                              (car #{w2 28348}#)))
                                                        (if (null? #{m2 28375}#)
                                                          #{m1 28349}#
                                                          (append
                                                            #{m1 28349}#
                                                            #{m2 28375}#)))
                                                      (let ((#{m2 28383}#
                                                              (cdr #{w2 28348}#)))
                                                        (if (null? #{m2 28383}#)
                                                          #{s1 28350}#
                                                          (append
                                                            #{s1 28350}#
                                                            #{m2 28383}#))))))))
                                        (#{module 28339}#
                                          (vector-ref #{x 28301}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 28337}#
                                      #{wrap 28338}#
                                      #{module 28339}#))
                                  (if (null? #{x 28301}#)
                                    #{x 28301}#
                                    (vector
                                      'syntax-object
                                      #{x 28301}#
                                      #{w 28297}#
                                      #{mod 28294}#))))))
                      #{body 28290}#)
                 '()
                 '()
                 '()
                 '()
                 '()
                 '())))))))
   (#{chi-local-syntax 4451}#
     (lambda (#{rec? 30848}#
              #{e 30849}#
              #{r 30850}#
              #{w 30851}#
              #{s 30852}#
              #{mod 30853}#
              #{k 30854}#)
       (let ((#{tmp 30856}#
               ($sc-dispatch
                 #{e 30849}#
                 '(_ #(each (any any)) any . each-any))))
         (if #{tmp 30856}#
           (@apply
             (lambda (#{id 30860}#
                      #{val 30861}#
                      #{e1 30862}#
                      #{e2 30863}#)
               (if (not (#{valid-bound-ids? 4436}# #{id 30860}#))
                 (syntax-violation
                   #f
                   "duplicate bound keyword"
                   #{e 30849}#)
                 (let ((#{labels 30960}#
                         (#{gen-labels 4416}# #{id 30860}#)))
                   (let ((#{new-w 30961}#
                           (#{make-binding-wrap 4427}#
                             #{id 30860}#
                             #{labels 30960}#
                             #{w 30851}#)))
                     (#{k 30854}#
                       (cons #{e1 30862}# #{e2 30863}#)
                       (#{extend-env 4408}#
                         #{labels 30960}#
                         (let ((#{trans-r 31001}#
                                 (#{macros-only-env 4410}# #{r 30850}#)))
                           (begin
                             (if #{rec? 30848}# (if #f #f))
                             (map (lambda (#{x 31002}#)
                                    (cons 'macro
                                          (#{eval-local-transformer 4452}#
                                            (#{chi 4446}#
                                              #{x 31002}#
                                              #{trans-r 31001}#
                                              (if #{rec? 30848}#
                                                #{new-w 30961}#
                                                #{w 30851}#)
                                              #{mod 30853}#)
                                            #{mod 30853}#)))
                                  #{val 30861}#)))
                         #{r 30850}#)
                       #{new-w 30961}#
                       #{s 30852}#
                       #{mod 30853}#)))))
             #{tmp 30856}#)
           (syntax-violation
             #f
             "bad local syntax definition"
             (let ((#{x 31335}#
                     (begin
                       (if (if (pair? #{e 30849}#) #{s 30852}# #f)
                         (set-source-properties! #{e 30849}# #{s 30852}#))
                       #{e 30849}#)))
               (if (if (null? (car #{w 30851}#))
                     (null? (cdr #{w 30851}#))
                     #f)
                 #{x 31335}#
                 (if (if (vector? #{x 31335}#)
                       (if (= (vector-length #{x 31335}#) 4)
                         (eq? (vector-ref #{x 31335}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 31367}# (vector-ref #{x 31335}# 1))
                         (#{wrap 31368}#
                           (let ((#{w2 31376}# (vector-ref #{x 31335}# 2)))
                             (let ((#{m1 31377}# (car #{w 30851}#))
                                   (#{s1 31378}# (cdr #{w 30851}#)))
                               (if (null? #{m1 31377}#)
                                 (if (null? #{s1 31378}#)
                                   #{w2 31376}#
                                   (cons (car #{w2 31376}#)
                                         (let ((#{m2 31393}#
                                                 (cdr #{w2 31376}#)))
                                           (if (null? #{m2 31393}#)
                                             #{s1 31378}#
                                             (append
                                               #{s1 31378}#
                                               #{m2 31393}#)))))
                                 (cons (let ((#{m2 31401}# (car #{w2 31376}#)))
                                         (if (null? #{m2 31401}#)
                                           #{m1 31377}#
                                           (append #{m1 31377}# #{m2 31401}#)))
                                       (let ((#{m2 31409}# (cdr #{w2 31376}#)))
                                         (if (null? #{m2 31409}#)
                                           #{s1 31378}#
                                           (append
                                             #{s1 31378}#
                                             #{m2 31409}#))))))))
                         (#{module 31369}# (vector-ref #{x 31335}# 3)))
                     (vector
                       'syntax-object
                       #{expression 31367}#
                       #{wrap 31368}#
                       #{module 31369}#))
                   (if (null? #{x 31335}#)
                     #{x 31335}#
                     (vector
                       'syntax-object
                       #{x 31335}#
                       #{w 30851}#
                       #{mod 30853}#))))))))))
   (#{eval-local-transformer 4452}#
     (lambda (#{expanded 31427}# #{mod 31428}#)
       (let ((#{p 31429}# (primitive-eval #{expanded 31427}#)))
         (if (procedure? #{p 31429}#)
           #{p 31429}#
           (syntax-violation
             #f
             "nonprocedure transformer"
             #{p 31429}#)))))
   (#{ellipsis? 4454}#
     (lambda (#{x 6023}#)
       (if (if (if (vector? #{x 6023}#)
                 (if (= (vector-length #{x 6023}#) 4)
                   (eq? (vector-ref #{x 6023}# 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref #{x 6023}# 1))
             #f)
         (#{free-id=? 4434}#
           #{x 6023}#
           '#(syntax-object
              ...
              ((top)
               #(ribcage () () ())
               #(ribcage () () ())
               #(ribcage #(x) #((top)) #("i2341"))
               #(ribcage
                 (lambda-var-list
                   gen-var
                   strip
                   chi-lambda-case
                   lambda*-formals
                   chi-simple-lambda
                   lambda-formals
                   ellipsis?
                   chi-void
                   eval-local-transformer
                   chi-local-syntax
                   chi-body
                   chi-macro
                   chi-call
                   chi-expr
                   chi
                   syntax-type
                   chi-when-list
                   chi-install-global
                   chi-top-sequence
                   chi-sequence
                   source-wrap
                   wrap
                   bound-id-member?
                   distinct-bound-ids?
                   valid-bound-ids?
                   bound-id=?
                   free-id=?
                   resolve-identifier
                   id-var-name
                   same-marks?
                   join-marks
                   join-wraps
                   smart-append
                   make-binding-wrap
                   extend-ribcage!
                   make-empty-ribcage
                   new-mark
                   anti-mark
                   the-anti-mark
                   top-marked?
                   top-wrap
                   empty-wrap
                   set-ribcage-labels!
                   set-ribcage-marks!
                   set-ribcage-symnames!
                   ribcage-labels
                   ribcage-marks
                   ribcage-symnames
                   ribcage?
                   make-ribcage
                   gen-labels
                   gen-label
                   make-rename
                   rename-marks
                   rename-new
                   rename-old
                   subst-rename?
                   wrap-subst
                   wrap-marks
                   make-wrap
                   id-sym-name&marks
                   id-sym-name
                   id?
                   nonsymbol-id?
                   global-extend
                   macros-only-env
                   extend-var-env
                   extend-env
                   null-env
                   binding-value
                   binding-type
                   make-binding
                   arg-check
                   source-annotation
                   no-source
                   set-syntax-object-module!
                   set-syntax-object-wrap!
                   set-syntax-object-expression!
                   syntax-object-module
                   syntax-object-wrap
                   syntax-object-expression
                   syntax-object?
                   make-syntax-object
                   build-lexical-var
                   build-letrec
                   build-named-let
                   build-let
                   build-sequence
                   build-data
                   build-primref
                   build-primcall
                   build-lambda-case
                   build-case-lambda
                   build-simple-lambda
                   build-global-definition
                   build-global-assignment
                   build-global-reference
                   analyze-variable
                   build-lexical-assignment
                   build-lexical-reference
                   build-dynlet
                   build-conditional
                   build-call
                   build-void
                   maybe-name-value!
                   decorate-source
                   get-global-definition-hook
                   put-global-definition-hook
                   gensym-hook
                   local-eval-hook
                   top-level-eval-hook
                   fx<
                   fx=
                   fx-
                   fx+
                   set-lambda-meta!
                   lambda-meta
                   lambda?
                   make-dynlet
                   make-letrec
                   make-let
                   make-lambda-case
                   make-lambda
                   make-seq
                   make-primcall
                   make-call
                   make-conditional
                   make-toplevel-define
                   make-toplevel-set
                   make-toplevel-ref
                   make-module-set
                   make-module-ref
                   make-lexical-set
                   make-lexical-ref
                   make-primitive-ref
                   make-const
                   make-void)
                 ((top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top))
                 ("i471"
                  "i469"
                  "i467"
                  "i465"
                  "i463"
                  "i461"
                  "i459"
                  "i457"
                  "i455"
                  "i453"
                  "i451"
                  "i449"
                  "i447"
                  "i445"
                  "i443"
                  "i441"
                  "i439"
                  "i437"
                  "i435"
                  "i433"
                  "i431"
                  "i429"
                  "i427"
                  "i425"
                  "i423"
                  "i421"
                  "i419"
                  "i417"
                  "i415"
                  "i413"
                  "i411"
                  "i409"
                  "i407"
                  "i405"
                  "i403"
                  "i401"
                  "i400"
                  "i398"
                  "i395"
                  "i394"
                  "i393"
                  "i391"
                  "i390"
                  "i388"
                  "i386"
                  "i384"
                  "i382"
                  "i380"
                  "i378"
                  "i376"
                  "i374"
                  "i371"
                  "i369"
                  "i368"
                  "i366"
                  "i364"
                  "i362"
                  "i360"
                  "i359"
                  "i358"
                  "i357"
                  "i355"
                  "i354"
                  "i351"
                  "i349"
                  "i347"
                  "i345"
                  "i343"
                  "i341"
                  "i340"
                  "i339"
                  "i337"
                  "i335"
                  "i334"
                  "i331"
                  "i330"
                  "i328"
                  "i326"
                  "i324"
                  "i322"
                  "i320"
                  "i318"
                  "i316"
                  "i314"
                  "i312"
                  "i309"
                  "i307"
                  "i305"
                  "i303"
                  "i301"
                  "i299"
                  "i297"
                  "i295"
                  "i293"
                  "i291"
                  "i289"
                  "i287"
                  "i285"
                  "i283"
                  "i281"
                  "i279"
                  "i277"
                  "i275"
                  "i273"
                  "i271"
                  "i269"
                  "i267"
                  "i265"
                  "i263"
                  "i262"
                  "i259"
                  "i257"
                  "i256"
                  "i255"
                  "i254"
                  "i253"
                  "i251"
                  "i249"
                  "i247"
                  "i244"
                  "i242"
                  "i240"
                  "i238"
                  "i236"
                  "i234"
                  "i232"
                  "i230"
                  "i228"
                  "i226"
                  "i224"
                  "i222"
                  "i220"
                  "i218"
                  "i216"
                  "i214"
                  "i212"
                  "i210"
                  "i208"))
               #(ribcage
                 (define-structure
                   define-expansion-accessors
                   define-expansion-constructors)
                 ((top) (top) (top))
                 ("i46" "i45" "i44"))
               #(ribcage () () ()))
              (hygiene guile)))
         #f)))
   (#{lambda-formals 4455}#
     (lambda (#{orig-args 31434}#)
       (letrec*
         ((#{req 31435}#
            (lambda (#{args 31439}# #{rreq 31440}#)
              (let ((#{tmp 31442}# ($sc-dispatch #{args 31439}# '())))
                (if #{tmp 31442}#
                  (@apply
                    (lambda ()
                      (#{check 31436}# (reverse #{rreq 31440}#) #f))
                    #{tmp 31442}#)
                  (let ((#{tmp 31558}#
                          ($sc-dispatch #{args 31439}# '(any . any))))
                    (if (if #{tmp 31558}#
                          (@apply
                            (lambda (#{a 31562}# #{b 31563}#)
                              (if (symbol? #{a 31562}#)
                                #t
                                (if (if (vector? #{a 31562}#)
                                      (if (= (vector-length #{a 31562}#) 4)
                                        (eq? (vector-ref #{a 31562}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 31562}# 1))
                                  #f)))
                            #{tmp 31558}#)
                          #f)
                      (@apply
                        (lambda (#{a 31590}# #{b 31591}#)
                          (#{req 31435}#
                            #{b 31591}#
                            (cons #{a 31590}# #{rreq 31440}#)))
                        #{tmp 31558}#)
                      (let ((#{tmp 31592}# (list #{args 31439}#)))
                        (if (@apply
                              (lambda (#{r 31594}#)
                                (if (symbol? #{r 31594}#)
                                  #t
                                  (if (if (vector? #{r 31594}#)
                                        (if (= (vector-length #{r 31594}#) 4)
                                          (eq? (vector-ref #{r 31594}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{r 31594}# 1))
                                    #f)))
                              #{tmp 31592}#)
                          (@apply
                            (lambda (#{r 31624}#)
                              (#{check 31436}#
                                (reverse #{rreq 31440}#)
                                #{r 31624}#))
                            #{tmp 31592}#)
                          (syntax-violation
                            'lambda
                            "invalid argument list"
                            #{orig-args 31434}#
                            #{args 31439}#)))))))))
          (#{check 31436}#
            (lambda (#{req 31748}# #{rest 31749}#)
              (if (#{distinct-bound-ids? 4437}#
                    (if #{rest 31749}#
                      (cons #{rest 31749}# #{req 31748}#)
                      #{req 31748}#))
                (values #{req 31748}# #f #{rest 31749}# #f)
                (syntax-violation
                  'lambda
                  "duplicate identifier in argument list"
                  #{orig-args 31434}#)))))
         (#{req 31435}# #{orig-args 31434}# '()))))
   (#{chi-simple-lambda 4456}#
     (lambda (#{e 31858}#
              #{r 31859}#
              #{w 31860}#
              #{s 31861}#
              #{mod 31862}#
              #{req 31863}#
              #{rest 31864}#
              #{meta 31865}#
              #{body 31866}#)
       (let ((#{ids 31867}#
               (if #{rest 31864}#
                 (append #{req 31863}# (list #{rest 31864}#))
                 #{req 31863}#)))
         (let ((#{vars 31868}#
                 (map #{gen-var 4460}# #{ids 31867}#)))
           (let ((#{labels 31869}#
                   (#{gen-labels 4416}# #{ids 31867}#)))
             (#{build-simple-lambda 4389}#
               #{s 31861}#
               (map syntax->datum #{req 31863}#)
               (if #{rest 31864}#
                 (syntax->datum #{rest 31864}#)
                 #f)
               #{vars 31868}#
               #{meta 31865}#
               (#{chi-body 4450}#
                 #{body 31866}#
                 (let ((#{x 32058}#
                         (begin
                           (if (if (pair? #{e 31858}#) #{s 31861}# #f)
                             (set-source-properties! #{e 31858}# #{s 31861}#))
                           #{e 31858}#)))
                   (if (if (null? (car #{w 31860}#))
                         (null? (cdr #{w 31860}#))
                         #f)
                     #{x 32058}#
                     (if (if (vector? #{x 32058}#)
                           (if (= (vector-length #{x 32058}#) 4)
                             (eq? (vector-ref #{x 32058}# 0) 'syntax-object)
                             #f)
                           #f)
                       (let ((#{expression 32090}# (vector-ref #{x 32058}# 1))
                             (#{wrap 32091}#
                               (let ((#{w2 32099}# (vector-ref #{x 32058}# 2)))
                                 (let ((#{m1 32100}# (car #{w 31860}#))
                                       (#{s1 32101}# (cdr #{w 31860}#)))
                                   (if (null? #{m1 32100}#)
                                     (if (null? #{s1 32101}#)
                                       #{w2 32099}#
                                       (cons (car #{w2 32099}#)
                                             (let ((#{m2 32116}#
                                                     (cdr #{w2 32099}#)))
                                               (if (null? #{m2 32116}#)
                                                 #{s1 32101}#
                                                 (append
                                                   #{s1 32101}#
                                                   #{m2 32116}#)))))
                                     (cons (let ((#{m2 32124}#
                                                   (car #{w2 32099}#)))
                                             (if (null? #{m2 32124}#)
                                               #{m1 32100}#
                                               (append
                                                 #{m1 32100}#
                                                 #{m2 32124}#)))
                                           (let ((#{m2 32132}#
                                                   (cdr #{w2 32099}#)))
                                             (if (null? #{m2 32132}#)
                                               #{s1 32101}#
                                               (append
                                                 #{s1 32101}#
                                                 #{m2 32132}#))))))))
                             (#{module 32092}# (vector-ref #{x 32058}# 3)))
                         (vector
                           'syntax-object
                           #{expression 32090}#
                           #{wrap 32091}#
                           #{module 32092}#))
                       (if (null? #{x 32058}#)
                         #{x 32058}#
                         (vector
                           'syntax-object
                           #{x 32058}#
                           #{w 31860}#
                           #{mod 31862}#)))))
                 (#{extend-var-env 4409}#
                   #{labels 31869}#
                   #{vars 31868}#
                   #{r 31859}#)
                 (#{make-binding-wrap 4427}#
                   #{ids 31867}#
                   #{labels 31869}#
                   #{w 31860}#)
                 #{mod 31862}#)))))))
   (#{lambda*-formals 4457}#
     (lambda (#{orig-args 32363}#)
       (letrec*
         ((#{req 32364}#
            (lambda (#{args 32371}# #{rreq 32372}#)
              (let ((#{tmp 32374}# ($sc-dispatch #{args 32371}# '())))
                (if #{tmp 32374}#
                  (@apply
                    (lambda ()
                      (#{check 32368}#
                        (reverse #{rreq 32372}#)
                        '()
                        #f
                        '()))
                    #{tmp 32374}#)
                  (let ((#{tmp 32493}#
                          ($sc-dispatch #{args 32371}# '(any . any))))
                    (if (if #{tmp 32493}#
                          (@apply
                            (lambda (#{a 32497}# #{b 32498}#)
                              (if (symbol? #{a 32497}#)
                                #t
                                (if (if (vector? #{a 32497}#)
                                      (if (= (vector-length #{a 32497}#) 4)
                                        (eq? (vector-ref #{a 32497}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 32497}# 1))
                                  #f)))
                            #{tmp 32493}#)
                          #f)
                      (@apply
                        (lambda (#{a 32525}# #{b 32526}#)
                          (#{req 32364}#
                            #{b 32526}#
                            (cons #{a 32525}# #{rreq 32372}#)))
                        #{tmp 32493}#)
                      (let ((#{tmp 32527}#
                              ($sc-dispatch #{args 32371}# '(any . any))))
                        (if (if #{tmp 32527}#
                              (@apply
                                (lambda (#{a 32531}# #{b 32532}#)
                                  (eq? (syntax->datum #{a 32531}#) #:optional))
                                #{tmp 32527}#)
                              #f)
                          (@apply
                            (lambda (#{a 32533}# #{b 32534}#)
                              (#{opt 32365}#
                                #{b 32534}#
                                (reverse #{rreq 32372}#)
                                '()))
                            #{tmp 32527}#)
                          (let ((#{tmp 32537}#
                                  ($sc-dispatch #{args 32371}# '(any . any))))
                            (if (if #{tmp 32537}#
                                  (@apply
                                    (lambda (#{a 32541}# #{b 32542}#)
                                      (eq? (syntax->datum #{a 32541}#) #:key))
                                    #{tmp 32537}#)
                                  #f)
                              (@apply
                                (lambda (#{a 32543}# #{b 32544}#)
                                  (#{key 32366}#
                                    #{b 32544}#
                                    (reverse #{rreq 32372}#)
                                    '()
                                    '()))
                                #{tmp 32537}#)
                              (let ((#{tmp 32547}#
                                      ($sc-dispatch
                                        #{args 32371}#
                                        '(any any))))
                                (if (if #{tmp 32547}#
                                      (@apply
                                        (lambda (#{a 32551}# #{b 32552}#)
                                          (eq? (syntax->datum #{a 32551}#)
                                               #:rest))
                                        #{tmp 32547}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 32553}# #{b 32554}#)
                                      (#{rest 32367}#
                                        #{b 32554}#
                                        (reverse #{rreq 32372}#)
                                        '()
                                        '()))
                                    #{tmp 32547}#)
                                  (let ((#{tmp 32557}# (list #{args 32371}#)))
                                    (if (@apply
                                          (lambda (#{r 32559}#)
                                            (if (symbol? #{r 32559}#)
                                              #t
                                              (if (if (vector? #{r 32559}#)
                                                    (if (= (vector-length
                                                             #{r 32559}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 32559}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 32559}# 1))
                                                #f)))
                                          #{tmp 32557}#)
                                      (@apply
                                        (lambda (#{r 32589}#)
                                          (#{rest 32367}#
                                            #{r 32589}#
                                            (reverse #{rreq 32372}#)
                                            '()
                                            '()))
                                        #{tmp 32557}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid argument list"
                                        #{orig-args 32363}#
                                        #{args 32371}#)))))))))))))))
          (#{opt 32365}#
            (lambda (#{args 32608}# #{req 32609}# #{ropt 32610}#)
              (let ((#{tmp 32612}# ($sc-dispatch #{args 32608}# '())))
                (if #{tmp 32612}#
                  (@apply
                    (lambda ()
                      (#{check 32368}#
                        #{req 32609}#
                        (reverse #{ropt 32610}#)
                        #f
                        '()))
                    #{tmp 32612}#)
                  (let ((#{tmp 32733}#
                          ($sc-dispatch #{args 32608}# '(any . any))))
                    (if (if #{tmp 32733}#
                          (@apply
                            (lambda (#{a 32737}# #{b 32738}#)
                              (if (symbol? #{a 32737}#)
                                #t
                                (if (if (vector? #{a 32737}#)
                                      (if (= (vector-length #{a 32737}#) 4)
                                        (eq? (vector-ref #{a 32737}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 32737}# 1))
                                  #f)))
                            #{tmp 32733}#)
                          #f)
                      (@apply
                        (lambda (#{a 32765}# #{b 32766}#)
                          (#{opt 32365}#
                            #{b 32766}#
                            #{req 32609}#
                            (cons (cons #{a 32765}#
                                        '(#(syntax-object
                                            #f
                                            ((top)
                                             #(ribcage
                                               #(a b)
                                               #((top) (top))
                                               #("i2480" "i2481"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(args req ropt)
                                               #((top) (top) (top))
                                               #("i2470" "i2471" "i2472"))
                                             #(ribcage
                                               (check rest key opt req)
                                               ((top) (top) (top) (top) (top))
                                               ("i2416"
                                                "i2414"
                                                "i2412"
                                                "i2410"
                                                "i2408"))
                                             #(ribcage
                                               #(orig-args)
                                               #((top))
                                               #("i2407"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-call
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 resolve-identifier
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-seq
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i471"
                                                "i469"
                                                "i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i400"
                                                "i398"
                                                "i395"
                                                "i394"
                                                "i393"
                                                "i391"
                                                "i390"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i371"
                                                "i369"
                                                "i368"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i359"
                                                "i358"
                                                "i357"
                                                "i355"
                                                "i354"
                                                "i351"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i340"
                                                "i339"
                                                "i337"
                                                "i335"
                                                "i334"
                                                "i331"
                                                "i330"
                                                "i328"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i309"
                                                "i307"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i262"
                                                "i259"
                                                "i257"
                                                "i256"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i244"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44"))
                                             #(ribcage () () ()))
                                            (hygiene guile))))
                                  #{ropt 32610}#)))
                        #{tmp 32733}#)
                      (let ((#{tmp 32767}#
                              ($sc-dispatch
                                #{args 32608}#
                                '((any any) . any))))
                        (if (if #{tmp 32767}#
                              (@apply
                                (lambda (#{a 32771}#
                                         #{init 32772}#
                                         #{b 32773}#)
                                  (if (symbol? #{a 32771}#)
                                    #t
                                    (if (if (vector? #{a 32771}#)
                                          (if (= (vector-length #{a 32771}#) 4)
                                            (eq? (vector-ref #{a 32771}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 32771}# 1))
                                      #f)))
                                #{tmp 32767}#)
                              #f)
                          (@apply
                            (lambda (#{a 32800}# #{init 32801}# #{b 32802}#)
                              (#{opt 32365}#
                                #{b 32802}#
                                #{req 32609}#
                                (cons (list #{a 32800}# #{init 32801}#)
                                      #{ropt 32610}#)))
                            #{tmp 32767}#)
                          (let ((#{tmp 32803}#
                                  ($sc-dispatch #{args 32608}# '(any . any))))
                            (if (if #{tmp 32803}#
                                  (@apply
                                    (lambda (#{a 32807}# #{b 32808}#)
                                      (eq? (syntax->datum #{a 32807}#) #:key))
                                    #{tmp 32803}#)
                                  #f)
                              (@apply
                                (lambda (#{a 32809}# #{b 32810}#)
                                  (#{key 32366}#
                                    #{b 32810}#
                                    #{req 32609}#
                                    (reverse #{ropt 32610}#)
                                    '()))
                                #{tmp 32803}#)
                              (let ((#{tmp 32813}#
                                      ($sc-dispatch
                                        #{args 32608}#
                                        '(any any))))
                                (if (if #{tmp 32813}#
                                      (@apply
                                        (lambda (#{a 32817}# #{b 32818}#)
                                          (eq? (syntax->datum #{a 32817}#)
                                               #:rest))
                                        #{tmp 32813}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 32819}# #{b 32820}#)
                                      (#{rest 32367}#
                                        #{b 32820}#
                                        #{req 32609}#
                                        (reverse #{ropt 32610}#)
                                        '()))
                                    #{tmp 32813}#)
                                  (let ((#{tmp 32823}# (list #{args 32608}#)))
                                    (if (@apply
                                          (lambda (#{r 32825}#)
                                            (if (symbol? #{r 32825}#)
                                              #t
                                              (if (if (vector? #{r 32825}#)
                                                    (if (= (vector-length
                                                             #{r 32825}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 32825}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 32825}# 1))
                                                #f)))
                                          #{tmp 32823}#)
                                      (@apply
                                        (lambda (#{r 32855}#)
                                          (#{rest 32367}#
                                            #{r 32855}#
                                            #{req 32609}#
                                            (reverse #{ropt 32610}#)
                                            '()))
                                        #{tmp 32823}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid optional argument list"
                                        #{orig-args 32363}#
                                        #{args 32608}#)))))))))))))))
          (#{key 32366}#
            (lambda (#{args 32874}#
                     #{req 32875}#
                     #{opt 32876}#
                     #{rkey 32877}#)
              (let ((#{tmp 32879}# ($sc-dispatch #{args 32874}# '())))
                (if #{tmp 32879}#
                  (@apply
                    (lambda ()
                      (#{check 32368}#
                        #{req 32875}#
                        #{opt 32876}#
                        #f
                        (cons #f (reverse #{rkey 32877}#))))
                    #{tmp 32879}#)
                  (let ((#{tmp 33001}#
                          ($sc-dispatch #{args 32874}# '(any . any))))
                    (if (if #{tmp 33001}#
                          (@apply
                            (lambda (#{a 33005}# #{b 33006}#)
                              (if (symbol? #{a 33005}#)
                                #t
                                (if (if (vector? #{a 33005}#)
                                      (if (= (vector-length #{a 33005}#) 4)
                                        (eq? (vector-ref #{a 33005}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 33005}# 1))
                                  #f)))
                            #{tmp 33001}#)
                          #f)
                      (@apply
                        (lambda (#{a 33033}# #{b 33034}#)
                          (let ((#{tmp 33035}#
                                  (symbol->keyword
                                    (syntax->datum #{a 33033}#))))
                            (#{key 32366}#
                              #{b 33034}#
                              #{req 32875}#
                              #{opt 32876}#
                              (cons (cons #{tmp 33035}#
                                          (cons #{a 33033}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(k)
                                                       #((top))
                                                       #("i2543"))
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i2537" "i2538"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req opt rkey)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i2526"
                                                         "i2527"
                                                         "i2528"
                                                         "i2529"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2416"
                                                        "i2414"
                                                        "i2412"
                                                        "i2410"
                                                        "i2408"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i2407"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         chi-lambda-case
                                                         lambda*-formals
                                                         chi-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         chi-void
                                                         eval-local-transformer
                                                         chi-local-syntax
                                                         chi-body
                                                         chi-macro
                                                         chi-call
                                                         chi-expr
                                                         chi
                                                         syntax-type
                                                         chi-when-list
                                                         chi-install-global
                                                         chi-top-sequence
                                                         chi-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         resolve-identifier
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-primcall
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-call
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-seq
                                                         make-primcall
                                                         make-call
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i471"
                                                        "i469"
                                                        "i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i401"
                                                        "i400"
                                                        "i398"
                                                        "i395"
                                                        "i394"
                                                        "i393"
                                                        "i391"
                                                        "i390"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i374"
                                                        "i371"
                                                        "i369"
                                                        "i368"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i360"
                                                        "i359"
                                                        "i358"
                                                        "i357"
                                                        "i355"
                                                        "i354"
                                                        "i351"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i340"
                                                        "i339"
                                                        "i337"
                                                        "i335"
                                                        "i334"
                                                        "i331"
                                                        "i330"
                                                        "i328"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i309"
                                                        "i307"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i262"
                                                        "i259"
                                                        "i257"
                                                        "i256"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i244"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44"))
                                                     #(ribcage () () ()))
                                                    (hygiene guile)))))
                                    #{rkey 32877}#))))
                        #{tmp 33001}#)
                      (let ((#{tmp 33038}#
                              ($sc-dispatch
                                #{args 32874}#
                                '((any any) . any))))
                        (if (if #{tmp 33038}#
                              (@apply
                                (lambda (#{a 33042}#
                                         #{init 33043}#
                                         #{b 33044}#)
                                  (if (symbol? #{a 33042}#)
                                    #t
                                    (if (if (vector? #{a 33042}#)
                                          (if (= (vector-length #{a 33042}#) 4)
                                            (eq? (vector-ref #{a 33042}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 33042}# 1))
                                      #f)))
                                #{tmp 33038}#)
                              #f)
                          (@apply
                            (lambda (#{a 33071}# #{init 33072}# #{b 33073}#)
                              (let ((#{tmp 33074}#
                                      (symbol->keyword
                                        (syntax->datum #{a 33071}#))))
                                (#{key 32366}#
                                  #{b 33073}#
                                  #{req 32875}#
                                  #{opt 32876}#
                                  (cons (list #{tmp 33074}#
                                              #{a 33071}#
                                              #{init 33072}#)
                                        #{rkey 32877}#))))
                            #{tmp 33038}#)
                          (let ((#{tmp 33077}#
                                  ($sc-dispatch
                                    #{args 32874}#
                                    '((any any any) . any))))
                            (if (if #{tmp 33077}#
                                  (@apply
                                    (lambda (#{a 33081}#
                                             #{init 33082}#
                                             #{k 33083}#
                                             #{b 33084}#)
                                      (if (if (symbol? #{a 33081}#)
                                            #t
                                            (if (if (vector? #{a 33081}#)
                                                  (if (= (vector-length
                                                           #{a 33081}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{a 33081}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{a 33081}# 1))
                                              #f))
                                        (keyword? (syntax->datum #{k 33083}#))
                                        #f))
                                    #{tmp 33077}#)
                                  #f)
                              (@apply
                                (lambda (#{a 33111}#
                                         #{init 33112}#
                                         #{k 33113}#
                                         #{b 33114}#)
                                  (#{key 32366}#
                                    #{b 33114}#
                                    #{req 32875}#
                                    #{opt 32876}#
                                    (cons (list #{k 33113}#
                                                #{a 33111}#
                                                #{init 33112}#)
                                          #{rkey 32877}#)))
                                #{tmp 33077}#)
                              (let ((#{tmp 33115}#
                                      ($sc-dispatch #{args 32874}# '(any))))
                                (if (if #{tmp 33115}#
                                      (@apply
                                        (lambda (#{aok 33119}#)
                                          (eq? (syntax->datum #{aok 33119}#)
                                               #:allow-other-keys))
                                        #{tmp 33115}#)
                                      #f)
                                  (@apply
                                    (lambda (#{aok 33120}#)
                                      (#{check 32368}#
                                        #{req 32875}#
                                        #{opt 32876}#
                                        #f
                                        (cons #t (reverse #{rkey 32877}#))))
                                    #{tmp 33115}#)
                                  (let ((#{tmp 33239}#
                                          ($sc-dispatch
                                            #{args 32874}#
                                            '(any any any))))
                                    (if (if #{tmp 33239}#
                                          (@apply
                                            (lambda (#{aok 33243}#
                                                     #{a 33244}#
                                                     #{b 33245}#)
                                              (if (eq? (syntax->datum
                                                         #{aok 33243}#)
                                                       #:allow-other-keys)
                                                (eq? (syntax->datum
                                                       #{a 33244}#)
                                                     #:rest)
                                                #f))
                                            #{tmp 33239}#)
                                          #f)
                                      (@apply
                                        (lambda (#{aok 33246}#
                                                 #{a 33247}#
                                                 #{b 33248}#)
                                          (#{rest 32367}#
                                            #{b 33248}#
                                            #{req 32875}#
                                            #{opt 32876}#
                                            (cons #t
                                                  (reverse #{rkey 32877}#))))
                                        #{tmp 33239}#)
                                      (let ((#{tmp 33251}#
                                              ($sc-dispatch
                                                #{args 32874}#
                                                '(any . any))))
                                        (if (if #{tmp 33251}#
                                              (@apply
                                                (lambda (#{aok 33255}#
                                                         #{r 33256}#)
                                                  (if (eq? (syntax->datum
                                                             #{aok 33255}#)
                                                           #:allow-other-keys)
                                                    (if (symbol? #{r 33256}#)
                                                      #t
                                                      (if (if (vector?
                                                                #{r 33256}#)
                                                            (if (= (vector-length
                                                                     #{r 33256}#)
                                                                   4)
                                                              (eq? (vector-ref
                                                                     #{r 33256}#
                                                                     0)
                                                                   'syntax-object)
                                                              #f)
                                                            #f)
                                                        (symbol?
                                                          (vector-ref
                                                            #{r 33256}#
                                                            1))
                                                        #f))
                                                    #f))
                                                #{tmp 33251}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok 33283}# #{r 33284}#)
                                              (#{rest 32367}#
                                                #{r 33284}#
                                                #{req 32875}#
                                                #{opt 32876}#
                                                (cons #t
                                                      (reverse
                                                        #{rkey 32877}#))))
                                            #{tmp 33251}#)
                                          (let ((#{tmp 33287}#
                                                  ($sc-dispatch
                                                    #{args 32874}#
                                                    '(any any))))
                                            (if (if #{tmp 33287}#
                                                  (@apply
                                                    (lambda (#{a 33291}#
                                                             #{b 33292}#)
                                                      (eq? (syntax->datum
                                                             #{a 33291}#)
                                                           #:rest))
                                                    #{tmp 33287}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{a 33293}#
                                                         #{b 33294}#)
                                                  (#{rest 32367}#
                                                    #{b 33294}#
                                                    #{req 32875}#
                                                    #{opt 32876}#
                                                    (cons #f
                                                          (reverse
                                                            #{rkey 32877}#))))
                                                #{tmp 33287}#)
                                              (let ((#{tmp 33297}#
                                                      (list #{args 32874}#)))
                                                (if (@apply
                                                      (lambda (#{r 33299}#)
                                                        (if (symbol?
                                                              #{r 33299}#)
                                                          #t
                                                          (if (if (vector?
                                                                    #{r 33299}#)
                                                                (if (= (vector-length
                                                                         #{r 33299}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{r 33299}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (symbol?
                                                              (vector-ref
                                                                #{r 33299}#
                                                                1))
                                                            #f)))
                                                      #{tmp 33297}#)
                                                  (@apply
                                                    (lambda (#{r 33329}#)
                                                      (#{rest 32367}#
                                                        #{r 33329}#
                                                        #{req 32875}#
                                                        #{opt 32876}#
                                                        (cons #f
                                                              (reverse
                                                                #{rkey 32877}#))))
                                                    #{tmp 33297}#)
                                                  (syntax-violation
                                                    'lambda*
                                                    "invalid keyword argument list"
                                                    #{orig-args 32363}#
                                                    #{args 32874}#)))))))))))))))))))))
          (#{rest 32367}#
            (lambda (#{args 33357}#
                     #{req 33358}#
                     #{opt 33359}#
                     #{kw 33360}#)
              (let ((#{tmp 33362}# (list #{args 33357}#)))
                (if (@apply
                      (lambda (#{r 33364}#)
                        (if (symbol? #{r 33364}#)
                          #t
                          (if (if (vector? #{r 33364}#)
                                (if (= (vector-length #{r 33364}#) 4)
                                  (eq? (vector-ref #{r 33364}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{r 33364}# 1))
                            #f)))
                      #{tmp 33362}#)
                  (@apply
                    (lambda (#{r 33394}#)
                      (#{check 32368}#
                        #{req 33358}#
                        #{opt 33359}#
                        #{r 33394}#
                        #{kw 33360}#))
                    #{tmp 33362}#)
                  (syntax-violation
                    'lambda*
                    "invalid rest argument"
                    #{orig-args 32363}#
                    #{args 33357}#)))))
          (#{check 32368}#
            (lambda (#{req 33522}#
                     #{opt 33523}#
                     #{rest 33524}#
                     #{kw 33525}#)
              (if (#{distinct-bound-ids? 4437}#
                    (append
                      #{req 33522}#
                      (map car #{opt 33523}#)
                      (if #{rest 33524}# (list #{rest 33524}#) '())
                      (if (pair? #{kw 33525}#)
                        (map cadr (cdr #{kw 33525}#))
                        '())))
                (values
                  #{req 33522}#
                  #{opt 33523}#
                  #{rest 33524}#
                  #{kw 33525}#)
                (syntax-violation
                  'lambda*
                  "duplicate identifier in argument list"
                  #{orig-args 32363}#)))))
         (#{req 32364}# #{orig-args 32363}# '()))))
   (#{chi-lambda-case 4458}#
     (lambda (#{e 33634}#
              #{r 33635}#
              #{w 33636}#
              #{s 33637}#
              #{mod 33638}#
              #{get-formals 33639}#
              #{clauses 33640}#)
       (letrec*
         ((#{expand-req 33641}#
            (lambda (#{req 33777}#
                     #{opt 33778}#
                     #{rest 33779}#
                     #{kw 33780}#
                     #{body 33781}#)
              (let ((#{vars 33782}#
                      (map #{gen-var 4460}# #{req 33777}#))
                    (#{labels 33783}#
                      (#{gen-labels 4416}# #{req 33777}#)))
                (let ((#{r* 33784}#
                        (#{extend-var-env 4409}#
                          #{labels 33783}#
                          #{vars 33782}#
                          #{r 33635}#))
                      (#{w* 33785}#
                        (#{make-binding-wrap 4427}#
                          #{req 33777}#
                          #{labels 33783}#
                          #{w 33636}#)))
                  (#{expand-opt 33642}#
                    (map syntax->datum #{req 33777}#)
                    #{opt 33778}#
                    #{rest 33779}#
                    #{kw 33780}#
                    #{body 33781}#
                    (reverse #{vars 33782}#)
                    #{r* 33784}#
                    #{w* 33785}#
                    '()
                    '())))))
          (#{expand-opt 33642}#
            (lambda (#{req 34021}#
                     #{opt 34022}#
                     #{rest 34023}#
                     #{kw 34024}#
                     #{body 34025}#
                     #{vars 34026}#
                     #{r* 34027}#
                     #{w* 34028}#
                     #{out 34029}#
                     #{inits 34030}#)
              (if (pair? #{opt 34022}#)
                (let ((#{tmp 34031}# (car #{opt 34022}#)))
                  (let ((#{tmp 34032}#
                          ($sc-dispatch #{tmp 34031}# '(any any))))
                    (if #{tmp 34032}#
                      (@apply
                        (lambda (#{id 34034}# #{i 34035}#)
                          (let ((#{v 34036}#
                                  (let ((#{id 34044}#
                                          (if (if (vector? #{id 34034}#)
                                                (if (= (vector-length
                                                         #{id 34034}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 34034}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 34034}# 1)
                                            #{id 34034}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 34044}#)
                                        " ")))))
                            (let ((#{l 34037}#
                                    (#{gen-labels 4416}# (list #{v 34036}#))))
                              (let ((#{r** 34038}#
                                      (#{extend-var-env 4409}#
                                        #{l 34037}#
                                        (list #{v 34036}#)
                                        #{r* 34027}#)))
                                (let ((#{w** 34039}#
                                        (#{make-binding-wrap 4427}#
                                          (list #{id 34034}#)
                                          #{l 34037}#
                                          #{w* 34028}#)))
                                  (#{expand-opt 33642}#
                                    #{req 34021}#
                                    (cdr #{opt 34022}#)
                                    #{rest 34023}#
                                    #{kw 34024}#
                                    #{body 34025}#
                                    (cons #{v 34036}# #{vars 34026}#)
                                    #{r** 34038}#
                                    #{w** 34039}#
                                    (cons (syntax->datum #{id 34034}#)
                                          #{out 34029}#)
                                    (cons (#{chi 4446}#
                                            #{i 34035}#
                                            #{r* 34027}#
                                            #{w* 34028}#
                                            #{mod 33638}#)
                                          #{inits 34030}#)))))))
                        #{tmp 34032}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 34031}#))))
                (if #{rest 34023}#
                  (let ((#{v 34345}#
                          (let ((#{id 34355}#
                                  (if (if (vector? #{rest 34023}#)
                                        (if (= (vector-length #{rest 34023}#)
                                               4)
                                          (eq? (vector-ref #{rest 34023}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{rest 34023}# 1)
                                    #{rest 34023}#)))
                            (gensym
                              (string-append
                                (symbol->string #{id 34355}#)
                                " ")))))
                    (let ((#{l 34346}#
                            (#{gen-labels 4416}# (list #{v 34345}#))))
                      (let ((#{r* 34347}#
                              (#{extend-var-env 4409}#
                                #{l 34346}#
                                (list #{v 34345}#)
                                #{r* 34027}#)))
                        (let ((#{w* 34348}#
                                (#{make-binding-wrap 4427}#
                                  (list #{rest 34023}#)
                                  #{l 34346}#
                                  #{w* 34028}#)))
                          (#{expand-kw 33643}#
                            #{req 34021}#
                            (if (pair? #{out 34029}#)
                              (reverse #{out 34029}#)
                              #f)
                            (syntax->datum #{rest 34023}#)
                            (if (pair? #{kw 34024}#)
                              (cdr #{kw 34024}#)
                              #{kw 34024}#)
                            #{body 34025}#
                            (cons #{v 34345}# #{vars 34026}#)
                            #{r* 34347}#
                            #{w* 34348}#
                            (if (pair? #{kw 34024}#) (car #{kw 34024}#) #f)
                            '()
                            #{inits 34030}#)))))
                  (#{expand-kw 33643}#
                    #{req 34021}#
                    (if (pair? #{out 34029}#)
                      (reverse #{out 34029}#)
                      #f)
                    #f
                    (if (pair? #{kw 34024}#)
                      (cdr #{kw 34024}#)
                      #{kw 34024}#)
                    #{body 34025}#
                    #{vars 34026}#
                    #{r* 34027}#
                    #{w* 34028}#
                    (if (pair? #{kw 34024}#) (car #{kw 34024}#) #f)
                    '()
                    #{inits 34030}#)))))
          (#{expand-kw 33643}#
            (lambda (#{req 34577}#
                     #{opt 34578}#
                     #{rest 34579}#
                     #{kw 34580}#
                     #{body 34581}#
                     #{vars 34582}#
                     #{r* 34583}#
                     #{w* 34584}#
                     #{aok 34585}#
                     #{out 34586}#
                     #{inits 34587}#)
              (if (pair? #{kw 34580}#)
                (let ((#{tmp 34588}# (car #{kw 34580}#)))
                  (let ((#{tmp 34589}#
                          ($sc-dispatch #{tmp 34588}# '(any any any))))
                    (if #{tmp 34589}#
                      (@apply
                        (lambda (#{k 34591}# #{id 34592}# #{i 34593}#)
                          (let ((#{v 34594}#
                                  (let ((#{id 34602}#
                                          (if (if (vector? #{id 34592}#)
                                                (if (= (vector-length
                                                         #{id 34592}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 34592}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 34592}# 1)
                                            #{id 34592}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 34602}#)
                                        " ")))))
                            (let ((#{l 34595}#
                                    (#{gen-labels 4416}# (list #{v 34594}#))))
                              (let ((#{r** 34596}#
                                      (#{extend-var-env 4409}#
                                        #{l 34595}#
                                        (list #{v 34594}#)
                                        #{r* 34583}#)))
                                (let ((#{w** 34597}#
                                        (#{make-binding-wrap 4427}#
                                          (list #{id 34592}#)
                                          #{l 34595}#
                                          #{w* 34584}#)))
                                  (#{expand-kw 33643}#
                                    #{req 34577}#
                                    #{opt 34578}#
                                    #{rest 34579}#
                                    (cdr #{kw 34580}#)
                                    #{body 34581}#
                                    (cons #{v 34594}# #{vars 34582}#)
                                    #{r** 34596}#
                                    #{w** 34597}#
                                    #{aok 34585}#
                                    (cons (list (syntax->datum #{k 34591}#)
                                                (syntax->datum #{id 34592}#)
                                                #{v 34594}#)
                                          #{out 34586}#)
                                    (cons (#{chi 4446}#
                                            #{i 34593}#
                                            #{r* 34583}#
                                            #{w* 34584}#
                                            #{mod 33638}#)
                                          #{inits 34587}#)))))))
                        #{tmp 34589}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 34588}#))))
                (#{expand-body 33644}#
                  #{req 34577}#
                  #{opt 34578}#
                  #{rest 34579}#
                  (if (if #{aok 34585}#
                        #{aok 34585}#
                        (pair? #{out 34586}#))
                    (cons #{aok 34585}# (reverse #{out 34586}#))
                    #f)
                  #{body 34581}#
                  (reverse #{vars 34582}#)
                  #{r* 34583}#
                  #{w* 34584}#
                  (reverse #{inits 34587}#)
                  '()))))
          (#{expand-body 33644}#
            (lambda (#{req 34912}#
                     #{opt 34913}#
                     #{rest 34914}#
                     #{kw 34915}#
                     #{body 34916}#
                     #{vars 34917}#
                     #{r* 34918}#
                     #{w* 34919}#
                     #{inits 34920}#
                     #{meta 34921}#)
              (let ((#{tmp 34923}#
                      ($sc-dispatch
                        #{body 34916}#
                        '(any any . each-any))))
                (if (if #{tmp 34923}#
                      (@apply
                        (lambda (#{docstring 34927}# #{e1 34928}# #{e2 34929}#)
                          (string? (syntax->datum #{docstring 34927}#)))
                        #{tmp 34923}#)
                      #f)
                  (@apply
                    (lambda (#{docstring 34930}# #{e1 34931}# #{e2 34932}#)
                      (#{expand-body 33644}#
                        #{req 34912}#
                        #{opt 34913}#
                        #{rest 34914}#
                        #{kw 34915}#
                        (cons #{e1 34931}# #{e2 34932}#)
                        #{vars 34917}#
                        #{r* 34918}#
                        #{w* 34919}#
                        #{inits 34920}#
                        (append
                          #{meta 34921}#
                          (list (cons 'documentation
                                      (syntax->datum #{docstring 34930}#))))))
                    #{tmp 34923}#)
                  (let ((#{tmp 34933}#
                          ($sc-dispatch
                            #{body 34916}#
                            '(#(vector #(each (any . any))) any . each-any))))
                    (if #{tmp 34933}#
                      (@apply
                        (lambda (#{k 34937}#
                                 #{v 34938}#
                                 #{e1 34939}#
                                 #{e2 34940}#)
                          (#{expand-body 33644}#
                            #{req 34912}#
                            #{opt 34913}#
                            #{rest 34914}#
                            #{kw 34915}#
                            (cons #{e1 34939}# #{e2 34940}#)
                            #{vars 34917}#
                            #{r* 34918}#
                            #{w* 34919}#
                            #{inits 34920}#
                            (append
                              #{meta 34921}#
                              (syntax->datum
                                (map cons #{k 34937}# #{v 34938}#)))))
                        #{tmp 34933}#)
                      (let ((#{tmp 34941}#
                              ($sc-dispatch #{body 34916}# '(any . each-any))))
                        (if #{tmp 34941}#
                          (@apply
                            (lambda (#{e1 34945}# #{e2 34946}#)
                              (values
                                #{meta 34921}#
                                #{req 34912}#
                                #{opt 34913}#
                                #{rest 34914}#
                                #{kw 34915}#
                                #{inits 34920}#
                                #{vars 34917}#
                                (#{chi-body 4450}#
                                  (cons #{e1 34945}# #{e2 34946}#)
                                  (let ((#{x 34958}#
                                          (begin
                                            (if (if (pair? #{e 33634}#)
                                                  #{s 33637}#
                                                  #f)
                                              (set-source-properties!
                                                #{e 33634}#
                                                #{s 33637}#))
                                            #{e 33634}#)))
                                    (if (if (null? (car #{w 33636}#))
                                          (null? (cdr #{w 33636}#))
                                          #f)
                                      #{x 34958}#
                                      (if (if (vector? #{x 34958}#)
                                            (if (= (vector-length #{x 34958}#)
                                                   4)
                                              (eq? (vector-ref #{x 34958}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (let ((#{expression 34990}#
                                                (vector-ref #{x 34958}# 1))
                                              (#{wrap 34991}#
                                                (let ((#{w2 34999}#
                                                        (vector-ref
                                                          #{x 34958}#
                                                          2)))
                                                  (let ((#{m1 35000}#
                                                          (car #{w 33636}#))
                                                        (#{s1 35001}#
                                                          (cdr #{w 33636}#)))
                                                    (if (null? #{m1 35000}#)
                                                      (if (null? #{s1 35001}#)
                                                        #{w2 34999}#
                                                        (cons (car #{w2 34999}#)
                                                              (let ((#{m2 35016}#
                                                                      (cdr #{w2 34999}#)))
                                                                (if (null? #{m2 35016}#)
                                                                  #{s1 35001}#
                                                                  (append
                                                                    #{s1 35001}#
                                                                    #{m2 35016}#)))))
                                                      (cons (let ((#{m2 35024}#
                                                                    (car #{w2 34999}#)))
                                                              (if (null? #{m2 35024}#)
                                                                #{m1 35000}#
                                                                (append
                                                                  #{m1 35000}#
                                                                  #{m2 35024}#)))
                                                            (let ((#{m2 35032}#
                                                                    (cdr #{w2 34999}#)))
                                                              (if (null? #{m2 35032}#)
                                                                #{s1 35001}#
                                                                (append
                                                                  #{s1 35001}#
                                                                  #{m2 35032}#))))))))
                                              (#{module 34992}#
                                                (vector-ref #{x 34958}# 3)))
                                          (vector
                                            'syntax-object
                                            #{expression 34990}#
                                            #{wrap 34991}#
                                            #{module 34992}#))
                                        (if (null? #{x 34958}#)
                                          #{x 34958}#
                                          (vector
                                            'syntax-object
                                            #{x 34958}#
                                            #{w 33636}#
                                            #{mod 33638}#)))))
                                  #{r* 34918}#
                                  #{w* 34919}#
                                  #{mod 33638}#)))
                            #{tmp 34941}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{body 34916}#))))))))))
         (let ((#{tmp 33646}#
                 ($sc-dispatch #{clauses 33640}# '())))
           (if #{tmp 33646}#
             (@apply
               (lambda () (values '() #f))
               #{tmp 33646}#)
             (let ((#{tmp 33651}#
                     ($sc-dispatch
                       #{clauses 33640}#
                       '((any any . each-any)
                         .
                         #(each (any any . each-any))))))
               (if #{tmp 33651}#
                 (@apply
                   (lambda (#{args 33655}#
                            #{e1 33656}#
                            #{e2 33657}#
                            #{args* 33658}#
                            #{e1* 33659}#
                            #{e2* 33660}#)
                     (call-with-values
                       (lambda ()
                         (#{get-formals 33639}# #{args 33655}#))
                       (lambda (#{req 33661}#
                                #{opt 33662}#
                                #{rest 33663}#
                                #{kw 33664}#)
                         (call-with-values
                           (lambda ()
                             (#{expand-req 33641}#
                               #{req 33661}#
                               #{opt 33662}#
                               #{rest 33663}#
                               #{kw 33664}#
                               (cons #{e1 33656}# #{e2 33657}#)))
                           (lambda (#{meta 33733}#
                                    #{req 33734}#
                                    #{opt 33735}#
                                    #{rest 33736}#
                                    #{kw 33737}#
                                    #{inits 33738}#
                                    #{vars 33739}#
                                    #{body 33740}#)
                             (call-with-values
                               (lambda ()
                                 (#{chi-lambda-case 4458}#
                                   #{e 33634}#
                                   #{r 33635}#
                                   #{w 33636}#
                                   #{s 33637}#
                                   #{mod 33638}#
                                   #{get-formals 33639}#
                                   (map (lambda (#{tmp 2886 33741}#
                                                 #{tmp 2885 33742}#
                                                 #{tmp 2884 33743}#)
                                          (cons #{tmp 2884 33743}#
                                                (cons #{tmp 2885 33742}#
                                                      #{tmp 2886 33741}#)))
                                        #{e2* 33660}#
                                        #{e1* 33659}#
                                        #{args* 33658}#)))
                               (lambda (#{meta* 33744}# #{else* 33745}#)
                                 (values
                                   (append #{meta 33733}# #{meta* 33744}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 15)
                                     #{s 33637}#
                                     #{req 33734}#
                                     #{opt 33735}#
                                     #{rest 33736}#
                                     #{kw 33737}#
                                     #{inits 33738}#
                                     #{vars 33739}#
                                     #{body 33740}#
                                     #{else* 33745}#)))))))))
                   #{tmp 33651}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{clauses 33640}#))))))))
   (#{strip 4459}#
     (lambda (#{x 35059}# #{w 35060}#)
       (if (memq 'top (car #{w 35060}#))
         #{x 35059}#
         (letrec*
           ((#{f 35061}#
              (lambda (#{x 35064}#)
                (if (if (vector? #{x 35064}#)
                      (if (= (vector-length #{x 35064}#) 4)
                        (eq? (vector-ref #{x 35064}# 0) 'syntax-object)
                        #f)
                      #f)
                  (#{strip 4459}#
                    (vector-ref #{x 35064}# 1)
                    (vector-ref #{x 35064}# 2))
                  (if (pair? #{x 35064}#)
                    (let ((#{a 35083}# (#{f 35061}# (car #{x 35064}#)))
                          (#{d 35084}# (#{f 35061}# (cdr #{x 35064}#))))
                      (if (if (eq? #{a 35083}# (car #{x 35064}#))
                            (eq? #{d 35084}# (cdr #{x 35064}#))
                            #f)
                        #{x 35064}#
                        (cons #{a 35083}# #{d 35084}#)))
                    (if (vector? #{x 35064}#)
                      (let ((#{old 35087}# (vector->list #{x 35064}#)))
                        (let ((#{new 35088}# (map #{f 35061}# #{old 35087}#)))
                          (letrec*
                            ((#{lp 35089}#
                               (lambda (#{l1 35186}# #{l2 35187}#)
                                 (if (null? #{l1 35186}#)
                                   #{x 35064}#
                                   (if (eq? (car #{l1 35186}#)
                                            (car #{l2 35187}#))
                                     (#{lp 35089}#
                                       (cdr #{l1 35186}#)
                                       (cdr #{l2 35187}#))
                                     (list->vector #{new 35088}#))))))
                            (#{lp 35089}# #{old 35087}# #{new 35088}#))))
                      #{x 35064}#))))))
           (#{f 35061}# #{x 35059}#)))))
   (#{gen-var 4460}#
     (lambda (#{id 33789}#)
       (let ((#{id 33790}#
               (if (if (vector? #{id 33789}#)
                     (if (= (vector-length #{id 33789}#) 4)
                       (eq? (vector-ref #{id 33789}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{id 33789}# 1)
                 #{id 33789}#)))
         (gensym
           (string-append (symbol->string #{id 33790}#) " ")))))
   (#{lambda-var-list 4461}#
     (lambda (#{vars 35188}#)
       (letrec*
         ((#{lvl 35189}#
            (lambda (#{vars 35192}# #{ls 35193}# #{w 35194}#)
              (if (pair? #{vars 35192}#)
                (#{lvl 35189}#
                  (cdr #{vars 35192}#)
                  (cons (let ((#{x 35198}# (car #{vars 35192}#)))
                          (if (if (null? (car #{w 35194}#))
                                (null? (cdr #{w 35194}#))
                                #f)
                            #{x 35198}#
                            (if (if (vector? #{x 35198}#)
                                  (if (= (vector-length #{x 35198}#) 4)
                                    (eq? (vector-ref #{x 35198}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (let ((#{expression 35216}#
                                      (vector-ref #{x 35198}# 1))
                                    (#{wrap 35217}#
                                      (let ((#{w2 35225}#
                                              (vector-ref #{x 35198}# 2)))
                                        (let ((#{m1 35226}# (car #{w 35194}#))
                                              (#{s1 35227}# (cdr #{w 35194}#)))
                                          (if (null? #{m1 35226}#)
                                            (if (null? #{s1 35227}#)
                                              #{w2 35225}#
                                              (cons (car #{w2 35225}#)
                                                    (let ((#{m2 35242}#
                                                            (cdr #{w2 35225}#)))
                                                      (if (null? #{m2 35242}#)
                                                        #{s1 35227}#
                                                        (append
                                                          #{s1 35227}#
                                                          #{m2 35242}#)))))
                                            (cons (let ((#{m2 35250}#
                                                          (car #{w2 35225}#)))
                                                    (if (null? #{m2 35250}#)
                                                      #{m1 35226}#
                                                      (append
                                                        #{m1 35226}#
                                                        #{m2 35250}#)))
                                                  (let ((#{m2 35258}#
                                                          (cdr #{w2 35225}#)))
                                                    (if (null? #{m2 35258}#)
                                                      #{s1 35227}#
                                                      (append
                                                        #{s1 35227}#
                                                        #{m2 35258}#))))))))
                                    (#{module 35218}#
                                      (vector-ref #{x 35198}# 3)))
                                (vector
                                  'syntax-object
                                  #{expression 35216}#
                                  #{wrap 35217}#
                                  #{module 35218}#))
                              (if (null? #{x 35198}#)
                                #{x 35198}#
                                (vector
                                  'syntax-object
                                  #{x 35198}#
                                  #{w 35194}#
                                  #f)))))
                        #{ls 35193}#)
                  #{w 35194}#)
                (if (if (symbol? #{vars 35192}#)
                      #t
                      (if (if (vector? #{vars 35192}#)
                            (if (= (vector-length #{vars 35192}#) 4)
                              (eq? (vector-ref #{vars 35192}# 0)
                                   'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{vars 35192}# 1))
                        #f))
                  (cons (if (if (null? (car #{w 35194}#))
                              (null? (cdr #{w 35194}#))
                              #f)
                          #{vars 35192}#
                          (if (if (vector? #{vars 35192}#)
                                (if (= (vector-length #{vars 35192}#) 4)
                                  (eq? (vector-ref #{vars 35192}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (let ((#{expression 35328}#
                                    (vector-ref #{vars 35192}# 1))
                                  (#{wrap 35329}#
                                    (let ((#{w2 35339}#
                                            (vector-ref #{vars 35192}# 2)))
                                      (let ((#{m1 35340}# (car #{w 35194}#))
                                            (#{s1 35341}# (cdr #{w 35194}#)))
                                        (if (null? #{m1 35340}#)
                                          (if (null? #{s1 35341}#)
                                            #{w2 35339}#
                                            (cons (car #{w2 35339}#)
                                                  (let ((#{m2 35358}#
                                                          (cdr #{w2 35339}#)))
                                                    (if (null? #{m2 35358}#)
                                                      #{s1 35341}#
                                                      (append
                                                        #{s1 35341}#
                                                        #{m2 35358}#)))))
                                          (cons (let ((#{m2 35366}#
                                                        (car #{w2 35339}#)))
                                                  (if (null? #{m2 35366}#)
                                                    #{m1 35340}#
                                                    (append
                                                      #{m1 35340}#
                                                      #{m2 35366}#)))
                                                (let ((#{m2 35374}#
                                                        (cdr #{w2 35339}#)))
                                                  (if (null? #{m2 35374}#)
                                                    #{s1 35341}#
                                                    (append
                                                      #{s1 35341}#
                                                      #{m2 35374}#))))))))
                                  (#{module 35330}#
                                    (vector-ref #{vars 35192}# 3)))
                              (vector
                                'syntax-object
                                #{expression 35328}#
                                #{wrap 35329}#
                                #{module 35330}#))
                            (if (null? #{vars 35192}#)
                              #{vars 35192}#
                              (vector
                                'syntax-object
                                #{vars 35192}#
                                #{w 35194}#
                                #f))))
                        #{ls 35193}#)
                  (if (null? #{vars 35192}#)
                    #{ls 35193}#
                    (if (if (vector? #{vars 35192}#)
                          (if (= (vector-length #{vars 35192}#) 4)
                            (eq? (vector-ref #{vars 35192}# 0)
                                 'syntax-object)
                            #f)
                          #f)
                      (#{lvl 35189}#
                        (vector-ref #{vars 35192}# 1)
                        #{ls 35193}#
                        (let ((#{w2 35415}# (vector-ref #{vars 35192}# 2)))
                          (let ((#{m1 35416}# (car #{w 35194}#))
                                (#{s1 35417}# (cdr #{w 35194}#)))
                            (if (null? #{m1 35416}#)
                              (if (null? #{s1 35417}#)
                                #{w2 35415}#
                                (cons (car #{w2 35415}#)
                                      (let ((#{m2 35428}# (cdr #{w2 35415}#)))
                                        (if (null? #{m2 35428}#)
                                          #{s1 35417}#
                                          (append
                                            #{s1 35417}#
                                            #{m2 35428}#)))))
                              (cons (let ((#{m2 35436}# (car #{w2 35415}#)))
                                      (if (null? #{m2 35436}#)
                                        #{m1 35416}#
                                        (append #{m1 35416}# #{m2 35436}#)))
                                    (let ((#{m2 35444}# (cdr #{w2 35415}#)))
                                      (if (null? #{m2 35444}#)
                                        #{s1 35417}#
                                        (append
                                          #{s1 35417}#
                                          #{m2 35444}#))))))))
                      (cons #{vars 35192}# #{ls 35193}#))))))))
         (#{lvl 35189}# #{vars 35188}# '() '(()))))))
  (begin
    (module-define!
      (current-module)
      'letrec-syntax
      (make-syntax-transformer
        'letrec-syntax
        'local-syntax
        #t))
    (module-define!
      (current-module)
      'let-syntax
      (make-syntax-transformer
        'let-syntax
        'local-syntax
        #f))
    (#{global-extend 4411}#
      'core
      'syntax-parameterize
      (lambda (#{e 4588}#
               #{r 4589}#
               #{w 4590}#
               #{s 4591}#
               #{mod 4592}#)
        (let ((#{tmp 4594}#
                ($sc-dispatch
                  #{e 4588}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 4594}#
                (@apply
                  (lambda (#{var 4598}#
                           #{val 4599}#
                           #{e1 4600}#
                           #{e2 4601}#)
                    (#{valid-bound-ids? 4436}# #{var 4598}#))
                  #{tmp 4594}#)
                #f)
            (@apply
              (lambda (#{var 4686}#
                       #{val 4687}#
                       #{e1 4688}#
                       #{e2 4689}#)
                (let ((#{names 4690}#
                        (map (lambda (#{x 5039}#)
                               (call-with-values
                                 (lambda ()
                                   (#{resolve-identifier 4433}#
                                     #{x 5039}#
                                     #{w 4590}#
                                     #{r 4589}#
                                     #{mod 4592}#
                                     #f))
                                 (lambda (#{type 5042}#
                                          #{value 5043}#
                                          #{mod 5044}#)
                                   (if (eqv? #{type 5042}# 'displaced-lexical)
                                     (syntax-violation
                                       'syntax-parameterize
                                       "identifier out of context"
                                       #{e 4588}#
                                       (let ((#{x 5057}#
                                               (begin
                                                 (if (if (pair? #{x 5039}#)
                                                       #{s 4591}#
                                                       #f)
                                                   (set-source-properties!
                                                     #{x 5039}#
                                                     #{s 4591}#))
                                                 #{x 5039}#)))
                                         (if (if (null? (car #{w 4590}#))
                                               (null? (cdr #{w 4590}#))
                                               #f)
                                           #{x 5057}#
                                           (if (if (vector? #{x 5057}#)
                                                 (if (= (vector-length
                                                          #{x 5057}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 5057}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (let ((#{expression 5089}#
                                                     (vector-ref #{x 5057}# 1))
                                                   (#{wrap 5090}#
                                                     (let ((#{w2 5098}#
                                                             (vector-ref
                                                               #{x 5057}#
                                                               2)))
                                                       (let ((#{m1 5099}#
                                                               (car #{w 4590}#))
                                                             (#{s1 5100}#
                                                               (cdr #{w 4590}#)))
                                                         (if (null? #{m1 5099}#)
                                                           (if (null? #{s1 5100}#)
                                                             #{w2 5098}#
                                                             (cons (car #{w2 5098}#)
                                                                   (let ((#{m2 5115}#
                                                                           (cdr #{w2 5098}#)))
                                                                     (if (null? #{m2 5115}#)
                                                                       #{s1 5100}#
                                                                       (append
                                                                         #{s1 5100}#
                                                                         #{m2 5115}#)))))
                                                           (cons (let ((#{m2 5123}#
                                                                         (car #{w2 5098}#)))
                                                                   (if (null? #{m2 5123}#)
                                                                     #{m1 5099}#
                                                                     (append
                                                                       #{m1 5099}#
                                                                       #{m2 5123}#)))
                                                                 (let ((#{m2 5131}#
                                                                         (cdr #{w2 5098}#)))
                                                                   (if (null? #{m2 5131}#)
                                                                     #{s1 5100}#
                                                                     (append
                                                                       #{s1 5100}#
                                                                       #{m2 5131}#))))))))
                                                   (#{module 5091}#
                                                     (vector-ref
                                                       #{x 5057}#
                                                       3)))
                                               (vector
                                                 'syntax-object
                                                 #{expression 5089}#
                                                 #{wrap 5090}#
                                                 #{module 5091}#))
                                             (if (null? #{x 5057}#)
                                               #{x 5057}#
                                               (vector
                                                 'syntax-object
                                                 #{x 5057}#
                                                 #{w 4590}#
                                                 #{mod 5044}#))))))
                                     (if (eqv? #{type 5042}# 'syntax-parameter)
                                       #{value 5043}#
                                       (syntax-violation
                                         'syntax-parameterize
                                         "invalid syntax parameter"
                                         #{e 4588}#
                                         (let ((#{x 5158}#
                                                 (begin
                                                   (if (if (pair? #{x 5039}#)
                                                         #{s 4591}#
                                                         #f)
                                                     (set-source-properties!
                                                       #{x 5039}#
                                                       #{s 4591}#))
                                                   #{x 5039}#)))
                                           (if (if (null? (car #{w 4590}#))
                                                 (null? (cdr #{w 4590}#))
                                                 #f)
                                             #{x 5158}#
                                             (if (if (vector? #{x 5158}#)
                                                   (if (= (vector-length
                                                            #{x 5158}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{x 5158}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (let ((#{expression 5190}#
                                                       (vector-ref
                                                         #{x 5158}#
                                                         1))
                                                     (#{wrap 5191}#
                                                       (let ((#{w2 5199}#
                                                               (vector-ref
                                                                 #{x 5158}#
                                                                 2)))
                                                         (let ((#{m1 5200}#
                                                                 (car #{w 4590}#))
                                                               (#{s1 5201}#
                                                                 (cdr #{w 4590}#)))
                                                           (if (null? #{m1 5200}#)
                                                             (if (null? #{s1 5201}#)
                                                               #{w2 5199}#
                                                               (cons (car #{w2 5199}#)
                                                                     (let ((#{m2 5216}#
                                                                             (cdr #{w2 5199}#)))
                                                                       (if (null? #{m2 5216}#)
                                                                         #{s1 5201}#
                                                                         (append
                                                                           #{s1 5201}#
                                                                           #{m2 5216}#)))))
                                                             (cons (let ((#{m2 5224}#
                                                                           (car #{w2 5199}#)))
                                                                     (if (null? #{m2 5224}#)
                                                                       #{m1 5200}#
                                                                       (append
                                                                         #{m1 5200}#
                                                                         #{m2 5224}#)))
                                                                   (let ((#{m2 5232}#
                                                                           (cdr #{w2 5199}#)))
                                                                     (if (null? #{m2 5232}#)
                                                                       #{s1 5201}#
                                                                       (append
                                                                         #{s1 5201}#
                                                                         #{m2 5232}#))))))))
                                                     (#{module 5192}#
                                                       (vector-ref
                                                         #{x 5158}#
                                                         3)))
                                                 (vector
                                                   'syntax-object
                                                   #{expression 5190}#
                                                   #{wrap 5191}#
                                                   #{module 5192}#))
                                               (if (null? #{x 5158}#)
                                                 #{x 5158}#
                                                 (vector
                                                   'syntax-object
                                                   #{x 5158}#
                                                   #{w 4590}#
                                                   #{mod 5044}#)))))))))))
                             #{var 4686}#))
                      (#{bindings 4691}#
                        (let ((#{trans-r 5247}#
                                (#{macros-only-env 4410}# #{r 4589}#)))
                          (map (lambda (#{x 5248}#)
                                 (cons 'macro
                                       (#{eval-local-transformer 4452}#
                                         (#{chi 4446}#
                                           #{x 5248}#
                                           #{trans-r 5247}#
                                           #{w 4590}#
                                           #{mod 4592}#)
                                         #{mod 4592}#)))
                               #{val 4687}#))))
                  (#{chi-body 4450}#
                    (cons #{e1 4688}# #{e2 4689}#)
                    (let ((#{x 4703}#
                            (begin
                              (if (if (pair? #{e 4588}#) #{s 4591}# #f)
                                (set-source-properties! #{e 4588}# #{s 4591}#))
                              #{e 4588}#)))
                      (if (if (null? (car #{w 4590}#))
                            (null? (cdr #{w 4590}#))
                            #f)
                        #{x 4703}#
                        (if (if (vector? #{x 4703}#)
                              (if (= (vector-length #{x 4703}#) 4)
                                (eq? (vector-ref #{x 4703}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 4735}# (vector-ref #{x 4703}# 1))
                                (#{wrap 4736}#
                                  (let ((#{w2 4744}#
                                          (vector-ref #{x 4703}# 2)))
                                    (let ((#{m1 4745}# (car #{w 4590}#))
                                          (#{s1 4746}# (cdr #{w 4590}#)))
                                      (if (null? #{m1 4745}#)
                                        (if (null? #{s1 4746}#)
                                          #{w2 4744}#
                                          (cons (car #{w2 4744}#)
                                                (let ((#{m2 4761}#
                                                        (cdr #{w2 4744}#)))
                                                  (if (null? #{m2 4761}#)
                                                    #{s1 4746}#
                                                    (append
                                                      #{s1 4746}#
                                                      #{m2 4761}#)))))
                                        (cons (let ((#{m2 4769}#
                                                      (car #{w2 4744}#)))
                                                (if (null? #{m2 4769}#)
                                                  #{m1 4745}#
                                                  (append
                                                    #{m1 4745}#
                                                    #{m2 4769}#)))
                                              (let ((#{m2 4777}#
                                                      (cdr #{w2 4744}#)))
                                                (if (null? #{m2 4777}#)
                                                  #{s1 4746}#
                                                  (append
                                                    #{s1 4746}#
                                                    #{m2 4777}#))))))))
                                (#{module 4737}# (vector-ref #{x 4703}# 3)))
                            (vector
                              'syntax-object
                              #{expression 4735}#
                              #{wrap 4736}#
                              #{module 4737}#))
                          (if (null? #{x 4703}#)
                            #{x 4703}#
                            (vector
                              'syntax-object
                              #{x 4703}#
                              #{w 4590}#
                              #{mod 4592}#)))))
                    (#{extend-env 4408}#
                      #{names 4690}#
                      #{bindings 4691}#
                      #{r 4589}#)
                    #{w 4590}#
                    #{mod 4592}#)))
              #{tmp 4594}#)
            (syntax-violation
              'syntax-parameterize
              "bad syntax"
              (let ((#{x 5472}#
                      (begin
                        (if (if (pair? #{e 4588}#) #{s 4591}# #f)
                          (set-source-properties! #{e 4588}# #{s 4591}#))
                        #{e 4588}#)))
                (if (if (null? (car #{w 4590}#))
                      (null? (cdr #{w 4590}#))
                      #f)
                  #{x 5472}#
                  (if (if (vector? #{x 5472}#)
                        (if (= (vector-length #{x 5472}#) 4)
                          (eq? (vector-ref #{x 5472}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 5504}# (vector-ref #{x 5472}# 1))
                          (#{wrap 5505}#
                            (let ((#{w2 5513}# (vector-ref #{x 5472}# 2)))
                              (let ((#{m1 5514}# (car #{w 4590}#))
                                    (#{s1 5515}# (cdr #{w 4590}#)))
                                (if (null? #{m1 5514}#)
                                  (if (null? #{s1 5515}#)
                                    #{w2 5513}#
                                    (cons (car #{w2 5513}#)
                                          (let ((#{m2 5530}#
                                                  (cdr #{w2 5513}#)))
                                            (if (null? #{m2 5530}#)
                                              #{s1 5515}#
                                              (append
                                                #{s1 5515}#
                                                #{m2 5530}#)))))
                                  (cons (let ((#{m2 5538}# (car #{w2 5513}#)))
                                          (if (null? #{m2 5538}#)
                                            #{m1 5514}#
                                            (append #{m1 5514}# #{m2 5538}#)))
                                        (let ((#{m2 5546}# (cdr #{w2 5513}#)))
                                          (if (null? #{m2 5546}#)
                                            #{s1 5515}#
                                            (append
                                              #{s1 5515}#
                                              #{m2 5546}#))))))))
                          (#{module 5506}# (vector-ref #{x 5472}# 3)))
                      (vector
                        'syntax-object
                        #{expression 5504}#
                        #{wrap 5505}#
                        #{module 5506}#))
                    (if (null? #{x 5472}#)
                      #{x 5472}#
                      (vector
                        'syntax-object
                        #{x 5472}#
                        #{w 4590}#
                        #{mod 4592}#))))))))))
    (module-define!
      (current-module)
      'quote
      (make-syntax-transformer
        'quote
        'core
        (lambda (#{e 5574}#
                 #{r 5575}#
                 #{w 5576}#
                 #{s 5577}#
                 #{mod 5578}#)
          (let ((#{tmp 5580}# ($sc-dispatch #{e 5574}# '(_ any))))
            (if #{tmp 5580}#
              (@apply
                (lambda (#{e 5583}#)
                  (let ((#{exp 5587}#
                          (#{strip 4459}# #{e 5583}# #{w 5576}#)))
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 1)
                      #{s 5577}#
                      #{exp 5587}#)))
                #{tmp 5580}#)
              (syntax-violation
                'quote
                "bad syntax"
                (let ((#{x 5601}#
                        (begin
                          (if (if (pair? #{e 5574}#) #{s 5577}# #f)
                            (set-source-properties! #{e 5574}# #{s 5577}#))
                          #{e 5574}#)))
                  (if (if (null? (car #{w 5576}#))
                        (null? (cdr #{w 5576}#))
                        #f)
                    #{x 5601}#
                    (if (if (vector? #{x 5601}#)
                          (if (= (vector-length #{x 5601}#) 4)
                            (eq? (vector-ref #{x 5601}# 0) 'syntax-object)
                            #f)
                          #f)
                      (let ((#{expression 5633}# (vector-ref #{x 5601}# 1))
                            (#{wrap 5634}#
                              (let ((#{w2 5642}# (vector-ref #{x 5601}# 2)))
                                (let ((#{m1 5643}# (car #{w 5576}#))
                                      (#{s1 5644}# (cdr #{w 5576}#)))
                                  (if (null? #{m1 5643}#)
                                    (if (null? #{s1 5644}#)
                                      #{w2 5642}#
                                      (cons (car #{w2 5642}#)
                                            (let ((#{m2 5659}#
                                                    (cdr #{w2 5642}#)))
                                              (if (null? #{m2 5659}#)
                                                #{s1 5644}#
                                                (append
                                                  #{s1 5644}#
                                                  #{m2 5659}#)))))
                                    (cons (let ((#{m2 5667}#
                                                  (car #{w2 5642}#)))
                                            (if (null? #{m2 5667}#)
                                              #{m1 5643}#
                                              (append
                                                #{m1 5643}#
                                                #{m2 5667}#)))
                                          (let ((#{m2 5675}#
                                                  (cdr #{w2 5642}#)))
                                            (if (null? #{m2 5675}#)
                                              #{s1 5644}#
                                              (append
                                                #{s1 5644}#
                                                #{m2 5675}#))))))))
                            (#{module 5635}# (vector-ref #{x 5601}# 3)))
                        (vector
                          'syntax-object
                          #{expression 5633}#
                          #{wrap 5634}#
                          #{module 5635}#))
                      (if (null? #{x 5601}#)
                        #{x 5601}#
                        (vector
                          'syntax-object
                          #{x 5601}#
                          #{w 5576}#
                          #{mod 5578}#)))))))))))
    (#{global-extend 4411}#
      'core
      'syntax
      (letrec*
        ((#{gen-syntax 5899}#
           (lambda (#{src 6362}#
                    #{e 6363}#
                    #{r 6364}#
                    #{maps 6365}#
                    #{ellipsis? 6366}#
                    #{mod 6367}#)
             (if (if (symbol? #{e 6363}#)
                   #t
                   (if (if (vector? #{e 6363}#)
                         (if (= (vector-length #{e 6363}#) 4)
                           (eq? (vector-ref #{e 6363}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{e 6363}# 1))
                     #f))
               (call-with-values
                 (lambda ()
                   (#{resolve-identifier 4433}#
                     #{e 6363}#
                     '(())
                     #{r 6364}#
                     #{mod 6367}#
                     #f))
                 (lambda (#{type 6396}# #{value 6397}# #{mod 6398}#)
                   (if (eqv? #{type 6396}# 'syntax)
                     (call-with-values
                       (lambda ()
                         (#{gen-ref 5900}#
                           #{src 6362}#
                           (car #{value 6397}#)
                           (cdr #{value 6397}#)
                           #{maps 6365}#))
                       (lambda (#{var 6404}# #{maps 6405}#)
                         (values (list 'ref #{var 6404}#) #{maps 6405}#)))
                     (if (#{ellipsis? 6366}# #{e 6363}#)
                       (syntax-violation
                         'syntax
                         "misplaced ellipsis"
                         #{src 6362}#)
                       (values (list 'quote #{e 6363}#) #{maps 6365}#)))))
               (let ((#{tmp 6407}#
                       ($sc-dispatch #{e 6363}# '(any any))))
                 (if (if #{tmp 6407}#
                       (@apply
                         (lambda (#{dots 6411}# #{e 6412}#)
                           (#{ellipsis? 6366}# #{dots 6411}#))
                         #{tmp 6407}#)
                       #f)
                   (@apply
                     (lambda (#{dots 6413}# #{e 6414}#)
                       (#{gen-syntax 5899}#
                         #{src 6362}#
                         #{e 6414}#
                         #{r 6364}#
                         #{maps 6365}#
                         (lambda (#{x 6415}#) #f)
                         #{mod 6367}#))
                     #{tmp 6407}#)
                   (let ((#{tmp 6416}#
                           ($sc-dispatch #{e 6363}# '(any any . any))))
                     (if (if #{tmp 6416}#
                           (@apply
                             (lambda (#{x 6420}# #{dots 6421}# #{y 6422}#)
                               (#{ellipsis? 6366}# #{dots 6421}#))
                             #{tmp 6416}#)
                           #f)
                       (@apply
                         (lambda (#{x 6423}# #{dots 6424}# #{y 6425}#)
                           (letrec*
                             ((#{f 6426}#
                                (lambda (#{y 6434}# #{k 6435}#)
                                  (let ((#{tmp 6437}#
                                          ($sc-dispatch
                                            #{y 6434}#
                                            '(any . any))))
                                    (if (if #{tmp 6437}#
                                          (@apply
                                            (lambda (#{dots 6441}# #{y 6442}#)
                                              (#{ellipsis? 6366}#
                                                #{dots 6441}#))
                                            #{tmp 6437}#)
                                          #f)
                                      (@apply
                                        (lambda (#{dots 6443}# #{y 6444}#)
                                          (#{f 6426}#
                                            #{y 6444}#
                                            (lambda (#{maps 6445}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{k 6435}#
                                                    (cons '() #{maps 6445}#)))
                                                (lambda (#{x 6446}#
                                                         #{maps 6447}#)
                                                  (if (null? (car #{maps 6447}#))
                                                    (syntax-violation
                                                      'syntax
                                                      "extra ellipsis"
                                                      #{src 6362}#)
                                                    (values
                                                      (let ((#{map-env 6451}#
                                                              (car #{maps 6447}#)))
                                                        (list 'apply
                                                              '(primitive
                                                                 append)
                                                              (#{gen-map 5902}#
                                                                #{x 6446}#
                                                                #{map-env 6451}#)))
                                                      (cdr #{maps 6447}#))))))))
                                        #{tmp 6437}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{gen-syntax 5899}#
                                            #{src 6362}#
                                            #{y 6434}#
                                            #{r 6364}#
                                            #{maps 6365}#
                                            #{ellipsis? 6366}#
                                            #{mod 6367}#))
                                        (lambda (#{y 6454}# #{maps 6455}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{k 6435}# #{maps 6455}#))
                                            (lambda (#{x 6456}# #{maps 6457}#)
                                              (values
                                                (if (equal? #{y 6454}# ''())
                                                  #{x 6456}#
                                                  (list 'append
                                                        #{x 6456}#
                                                        #{y 6454}#))
                                                #{maps 6457}#))))))))))
                             (#{f 6426}#
                               #{y 6425}#
                               (lambda (#{maps 6429}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 5899}#
                                       #{src 6362}#
                                       #{x 6423}#
                                       #{r 6364}#
                                       (cons '() #{maps 6429}#)
                                       #{ellipsis? 6366}#
                                       #{mod 6367}#))
                                   (lambda (#{x 6430}# #{maps 6431}#)
                                     (if (null? (car #{maps 6431}#))
                                       (syntax-violation
                                         'syntax
                                         "extra ellipsis"
                                         #{src 6362}#)
                                       (values
                                         (#{gen-map 5902}#
                                           #{x 6430}#
                                           (car #{maps 6431}#))
                                         (cdr #{maps 6431}#)))))))))
                         #{tmp 6416}#)
                       (let ((#{tmp 6473}#
                               ($sc-dispatch #{e 6363}# '(any . any))))
                         (if #{tmp 6473}#
                           (@apply
                             (lambda (#{x 6477}# #{y 6478}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax 5899}#
                                     #{src 6362}#
                                     #{x 6477}#
                                     #{r 6364}#
                                     #{maps 6365}#
                                     #{ellipsis? 6366}#
                                     #{mod 6367}#))
                                 (lambda (#{x 6479}# #{maps 6480}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5899}#
                                         #{src 6362}#
                                         #{y 6478}#
                                         #{r 6364}#
                                         #{maps 6480}#
                                         #{ellipsis? 6366}#
                                         #{mod 6367}#))
                                     (lambda (#{y 6481}# #{maps 6482}#)
                                       (values
                                         (let ((#{atom-key 6487}#
                                                 (car #{y 6481}#)))
                                           (if (eqv? #{atom-key 6487}# 'quote)
                                             (if (eq? (car #{x 6479}#) 'quote)
                                               (list 'quote
                                                     (cons (car (cdr #{x 6479}#))
                                                           (car (cdr #{y 6481}#))))
                                               (if (eq? (car (cdr #{y 6481}#))
                                                        '())
                                                 (list 'list #{x 6479}#)
                                                 (list 'cons
                                                       #{x 6479}#
                                                       #{y 6481}#)))
                                             (if (eqv? #{atom-key 6487}# 'list)
                                               (cons 'list
                                                     (cons #{x 6479}#
                                                           (cdr #{y 6481}#)))
                                               (list 'cons
                                                     #{x 6479}#
                                                     #{y 6481}#))))
                                         #{maps 6482}#))))))
                             #{tmp 6473}#)
                           (let ((#{tmp 6516}#
                                   ($sc-dispatch
                                     #{e 6363}#
                                     '#(vector (any . each-any)))))
                             (if #{tmp 6516}#
                               (@apply
                                 (lambda (#{e1 6520}# #{e2 6521}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5899}#
                                         #{src 6362}#
                                         (cons #{e1 6520}# #{e2 6521}#)
                                         #{r 6364}#
                                         #{maps 6365}#
                                         #{ellipsis? 6366}#
                                         #{mod 6367}#))
                                     (lambda (#{e 6522}# #{maps 6523}#)
                                       (values
                                         (if (eq? (car #{e 6522}#) 'list)
                                           (cons 'vector (cdr #{e 6522}#))
                                           (if (eq? (car #{e 6522}#) 'quote)
                                             (list 'quote
                                                   (list->vector
                                                     (car (cdr #{e 6522}#))))
                                             (list 'list->vector #{e 6522}#)))
                                         #{maps 6523}#))))
                                 #{tmp 6516}#)
                               (values
                                 (list 'quote #{e 6363}#)
                                 #{maps 6365}#))))))))))))
         (#{gen-ref 5900}#
           (lambda (#{src 6550}#
                    #{var 6551}#
                    #{level 6552}#
                    #{maps 6553}#)
             (if (= #{level 6552}# 0)
               (values #{var 6551}# #{maps 6553}#)
               (if (null? #{maps 6553}#)
                 (syntax-violation
                   'syntax
                   "missing ellipsis"
                   #{src 6550}#)
                 (call-with-values
                   (lambda ()
                     (#{gen-ref 5900}#
                       #{src 6550}#
                       #{var 6551}#
                       (#{1-}# #{level 6552}#)
                       (cdr #{maps 6553}#)))
                   (lambda (#{outer-var 6554}# #{outer-maps 6555}#)
                     (let ((#{b 6556}#
                             (assq #{outer-var 6554}# (car #{maps 6553}#))))
                       (if #{b 6556}#
                         (values (cdr #{b 6556}#) #{maps 6553}#)
                         (let ((#{inner-var 6558}#
                                 (gensym
                                   (string-append (symbol->string 'tmp) " "))))
                           (values
                             #{inner-var 6558}#
                             (cons (cons (cons #{outer-var 6554}#
                                               #{inner-var 6558}#)
                                         (car #{maps 6553}#))
                                   #{outer-maps 6555}#)))))))))))
         (#{gen-map 5902}#
           (lambda (#{e 6572}# #{map-env 6573}#)
             (let ((#{formals 6574}# (map cdr #{map-env 6573}#))
                   (#{actuals 6575}#
                     (map (lambda (#{x 6577}#)
                            (list 'ref (car #{x 6577}#)))
                          #{map-env 6573}#)))
               (if (eq? (car #{e 6572}#) 'ref)
                 (car #{actuals 6575}#)
                 (if (and-map
                       (lambda (#{x 6578}#)
                         (if (eq? (car #{x 6578}#) 'ref)
                           (memq (car (cdr #{x 6578}#)) #{formals 6574}#)
                           #f))
                       (cdr #{e 6572}#))
                   (cons 'map
                         (cons (list 'primitive (car #{e 6572}#))
                               (map (let ((#{r 6580}#
                                            (map cons
                                                 #{formals 6574}#
                                                 #{actuals 6575}#)))
                                      (lambda (#{x 6581}#)
                                        (cdr (assq (car (cdr #{x 6581}#))
                                                   #{r 6580}#))))
                                    (cdr #{e 6572}#))))
                   (cons 'map
                         (cons (list 'lambda #{formals 6574}# #{e 6572}#)
                               #{actuals 6575}#)))))))
         (#{regen 5906}#
           (lambda (#{x 6583}#)
             (let ((#{atom-key 6584}# (car #{x 6583}#)))
               (if (eqv? #{atom-key 6584}# 'ref)
                 (let ((#{name 6594}# (car (cdr #{x 6583}#)))
                       (#{var 6595}# (car (cdr #{x 6583}#))))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 3)
                     #f
                     #{name 6594}#
                     #{var 6595}#))
                 (if (eqv? #{atom-key 6584}# 'primitive)
                   (let ((#{name 6606}# (car (cdr #{x 6583}#))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 2)
                       #f
                       #{name 6606}#))
                   (if (eqv? #{atom-key 6584}# 'quote)
                     (let ((#{exp 6617}# (car (cdr #{x 6583}#))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #f
                         #{exp 6617}#))
                     (if (eqv? #{atom-key 6584}# 'lambda)
                       (if (list? (car (cdr #{x 6583}#)))
                         (let ((#{req 6628}# (car (cdr #{x 6583}#)))
                               (#{vars 6630}# (car (cdr #{x 6583}#)))
                               (#{exp 6632}#
                                 (#{regen 5906}#
                                   (car (cdr (cdr #{x 6583}#))))))
                           (let ((#{body 6637}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 15)
                                     #f
                                     #{req 6628}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 6630}#
                                     #{exp 6632}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 14)
                               #f
                               '()
                               #{body 6637}#)))
                         (error "how did we get here" #{x 6583}#))
                       (let ((#{name 6653}# (car #{x 6583}#))
                             (#{args 6654}#
                               (map #{regen 5906}# (cdr #{x 6583}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 12)
                           #f
                           #{name 6653}#
                           #{args 6654}#))))))))))
        (lambda (#{e 5907}#
                 #{r 5908}#
                 #{w 5909}#
                 #{s 5910}#
                 #{mod 5911}#)
          (let ((#{e 5912}#
                  (let ((#{x 6273}#
                          (begin
                            (if (if (pair? #{e 5907}#) #{s 5910}# #f)
                              (set-source-properties! #{e 5907}# #{s 5910}#))
                            #{e 5907}#)))
                    (if (if (null? (car #{w 5909}#))
                          (null? (cdr #{w 5909}#))
                          #f)
                      #{x 6273}#
                      (if (if (vector? #{x 6273}#)
                            (if (= (vector-length #{x 6273}#) 4)
                              (eq? (vector-ref #{x 6273}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 6305}# (vector-ref #{x 6273}# 1))
                              (#{wrap 6306}#
                                (let ((#{w2 6314}# (vector-ref #{x 6273}# 2)))
                                  (let ((#{m1 6315}# (car #{w 5909}#))
                                        (#{s1 6316}# (cdr #{w 5909}#)))
                                    (if (null? #{m1 6315}#)
                                      (if (null? #{s1 6316}#)
                                        #{w2 6314}#
                                        (cons (car #{w2 6314}#)
                                              (let ((#{m2 6331}#
                                                      (cdr #{w2 6314}#)))
                                                (if (null? #{m2 6331}#)
                                                  #{s1 6316}#
                                                  (append
                                                    #{s1 6316}#
                                                    #{m2 6331}#)))))
                                      (cons (let ((#{m2 6339}#
                                                    (car #{w2 6314}#)))
                                              (if (null? #{m2 6339}#)
                                                #{m1 6315}#
                                                (append
                                                  #{m1 6315}#
                                                  #{m2 6339}#)))
                                            (let ((#{m2 6347}#
                                                    (cdr #{w2 6314}#)))
                                              (if (null? #{m2 6347}#)
                                                #{s1 6316}#
                                                (append
                                                  #{s1 6316}#
                                                  #{m2 6347}#))))))))
                              (#{module 6307}# (vector-ref #{x 6273}# 3)))
                          (vector
                            'syntax-object
                            #{expression 6305}#
                            #{wrap 6306}#
                            #{module 6307}#))
                        (if (null? #{x 6273}#)
                          #{x 6273}#
                          (vector
                            'syntax-object
                            #{x 6273}#
                            #{w 5909}#
                            #{mod 5911}#)))))))
            (let ((#{tmp 5913}# #{e 5912}#))
              (let ((#{tmp 5914}#
                      ($sc-dispatch #{tmp 5913}# '(_ any))))
                (if #{tmp 5914}#
                  (@apply
                    (lambda (#{x 5966}#)
                      (call-with-values
                        (lambda ()
                          (#{gen-syntax 5899}#
                            #{e 5912}#
                            #{x 5966}#
                            #{r 5908}#
                            '()
                            #{ellipsis? 4454}#
                            #{mod 5911}#))
                        (lambda (#{e 6049}# #{maps 6050}#)
                          (#{regen 5906}# #{e 6049}#))))
                    #{tmp 5914}#)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    #{e 5912}#))))))))
    (#{global-extend 4411}#
      'core
      'lambda
      (lambda (#{e 6890}#
               #{r 6891}#
               #{w 6892}#
               #{s 6893}#
               #{mod 6894}#)
        (let ((#{tmp 6896}#
                ($sc-dispatch #{e 6890}# '(_ any any . each-any))))
          (if #{tmp 6896}#
            (@apply
              (lambda (#{args 6900}# #{e1 6901}# #{e2 6902}#)
                (call-with-values
                  (lambda ()
                    (#{lambda-formals 4455}# #{args 6900}#))
                  (lambda (#{req 6905}#
                           #{opt 6906}#
                           #{rest 6907}#
                           #{kw 6908}#)
                    (letrec*
                      ((#{lp 6909}#
                         (lambda (#{body 6912}# #{meta 6913}#)
                           (let ((#{tmp 6915}#
                                   ($sc-dispatch
                                     #{body 6912}#
                                     '(any any . each-any))))
                             (if (if #{tmp 6915}#
                                   (@apply
                                     (lambda (#{docstring 6919}#
                                              #{e1 6920}#
                                              #{e2 6921}#)
                                       (string?
                                         (syntax->datum #{docstring 6919}#)))
                                     #{tmp 6915}#)
                                   #f)
                               (@apply
                                 (lambda (#{docstring 6922}#
                                          #{e1 6923}#
                                          #{e2 6924}#)
                                   (#{lp 6909}#
                                     (cons #{e1 6923}# #{e2 6924}#)
                                     (append
                                       #{meta 6913}#
                                       (list (cons 'documentation
                                                   (syntax->datum
                                                     #{docstring 6922}#))))))
                                 #{tmp 6915}#)
                               (let ((#{tmp 6925}#
                                       ($sc-dispatch
                                         #{body 6912}#
                                         '(#(vector #(each (any . any)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 6925}#
                                   (@apply
                                     (lambda (#{k 6929}#
                                              #{v 6930}#
                                              #{e1 6931}#
                                              #{e2 6932}#)
                                       (#{lp 6909}#
                                         (cons #{e1 6931}# #{e2 6932}#)
                                         (append
                                           #{meta 6913}#
                                           (syntax->datum
                                             (map cons
                                                  #{k 6929}#
                                                  #{v 6930}#)))))
                                     #{tmp 6925}#)
                                   (#{chi-simple-lambda 4456}#
                                     #{e 6890}#
                                     #{r 6891}#
                                     #{w 6892}#
                                     #{s 6893}#
                                     #{mod 6894}#
                                     #{req 6905}#
                                     #{rest 6907}#
                                     #{meta 6913}#
                                     #{body 6912}#))))))))
                      (#{lp 6909}# (cons #{e1 6901}# #{e2 6902}#) '())))))
              #{tmp 6896}#)
            (syntax-violation
              'lambda
              "bad lambda"
              #{e 6890}#)))))
    (#{global-extend 4411}#
      'core
      'lambda*
      (lambda (#{e 7316}#
               #{r 7317}#
               #{w 7318}#
               #{s 7319}#
               #{mod 7320}#)
        (let ((#{tmp 7322}#
                ($sc-dispatch #{e 7316}# '(_ any any . each-any))))
          (if #{tmp 7322}#
            (@apply
              (lambda (#{args 7326}# #{e1 7327}# #{e2 7328}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4458}#
                      #{e 7316}#
                      #{r 7317}#
                      #{w 7318}#
                      #{s 7319}#
                      #{mod 7320}#
                      #{lambda*-formals 4457}#
                      (list (cons #{args 7326}#
                                  (cons #{e1 7327}# #{e2 7328}#)))))
                  (lambda (#{meta 7331}# #{lcase 7332}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7319}#
                      #{meta 7331}#
                      #{lcase 7332}#))))
              #{tmp 7322}#)
            (syntax-violation
              'lambda
              "bad lambda*"
              #{e 7316}#)))))
    (#{global-extend 4411}#
      'core
      'case-lambda
      (lambda (#{e 7495}#
               #{r 7496}#
               #{w 7497}#
               #{s 7498}#
               #{mod 7499}#)
        (let ((#{tmp 7501}#
                ($sc-dispatch
                  #{e 7495}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 7501}#
            (@apply
              (lambda (#{args 7505}#
                       #{e1 7506}#
                       #{e2 7507}#
                       #{args* 7508}#
                       #{e1* 7509}#
                       #{e2* 7510}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4458}#
                      #{e 7495}#
                      #{r 7496}#
                      #{w 7497}#
                      #{s 7498}#
                      #{mod 7499}#
                      #{lambda-formals 4455}#
                      (cons (cons #{args 7505}#
                                  (cons #{e1 7506}# #{e2 7507}#))
                            (map (lambda (#{tmp 3385 7513}#
                                          #{tmp 3384 7514}#
                                          #{tmp 3383 7515}#)
                                   (cons #{tmp 3383 7515}#
                                         (cons #{tmp 3384 7514}#
                                               #{tmp 3385 7513}#)))
                                 #{e2* 7510}#
                                 #{e1* 7509}#
                                 #{args* 7508}#))))
                  (lambda (#{meta 7516}# #{lcase 7517}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7498}#
                      #{meta 7516}#
                      #{lcase 7517}#))))
              #{tmp 7501}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda"
              #{e 7495}#)))))
    (#{global-extend 4411}#
      'core
      'case-lambda*
      (lambda (#{e 7686}#
               #{r 7687}#
               #{w 7688}#
               #{s 7689}#
               #{mod 7690}#)
        (let ((#{tmp 7692}#
                ($sc-dispatch
                  #{e 7686}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 7692}#
            (@apply
              (lambda (#{args 7696}#
                       #{e1 7697}#
                       #{e2 7698}#
                       #{args* 7699}#
                       #{e1* 7700}#
                       #{e2* 7701}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4458}#
                      #{e 7686}#
                      #{r 7687}#
                      #{w 7688}#
                      #{s 7689}#
                      #{mod 7690}#
                      #{lambda*-formals 4457}#
                      (cons (cons #{args 7696}#
                                  (cons #{e1 7697}# #{e2 7698}#))
                            (map (lambda (#{tmp 3420 7704}#
                                          #{tmp 3419 7705}#
                                          #{tmp 3418 7706}#)
                                   (cons #{tmp 3418 7706}#
                                         (cons #{tmp 3419 7705}#
                                               #{tmp 3420 7704}#)))
                                 #{e2* 7701}#
                                 #{e1* 7700}#
                                 #{args* 7699}#))))
                  (lambda (#{meta 7707}# #{lcase 7708}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7689}#
                      #{meta 7707}#
                      #{lcase 7708}#))))
              #{tmp 7692}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda*"
              #{e 7686}#)))))
    (#{global-extend 4411}#
      'core
      'let
      (letrec*
        ((#{chi-let 7917}#
           (lambda (#{e 8127}#
                    #{r 8128}#
                    #{w 8129}#
                    #{s 8130}#
                    #{mod 8131}#
                    #{constructor 8132}#
                    #{ids 8133}#
                    #{vals 8134}#
                    #{exps 8135}#)
             (if (not (#{valid-bound-ids? 4436}# #{ids 8133}#))
               (syntax-violation
                 'let
                 "duplicate bound variable"
                 #{e 8127}#)
               (let ((#{labels 8220}#
                       (#{gen-labels 4416}# #{ids 8133}#))
                     (#{new-vars 8221}#
                       (map #{gen-var 4460}# #{ids 8133}#)))
                 (let ((#{nw 8222}#
                         (#{make-binding-wrap 4427}#
                           #{ids 8133}#
                           #{labels 8220}#
                           #{w 8129}#))
                       (#{nr 8223}#
                         (#{extend-var-env 4409}#
                           #{labels 8220}#
                           #{new-vars 8221}#
                           #{r 8128}#)))
                   (#{constructor 8132}#
                     #{s 8130}#
                     (map syntax->datum #{ids 8133}#)
                     #{new-vars 8221}#
                     (map (lambda (#{x 8240}#)
                            (#{chi 4446}#
                              #{x 8240}#
                              #{r 8128}#
                              #{w 8129}#
                              #{mod 8131}#))
                          #{vals 8134}#)
                     (#{chi-body 4450}#
                       #{exps 8135}#
                       (#{source-wrap 4440}#
                         #{e 8127}#
                         #{nw 8222}#
                         #{s 8130}#
                         #{mod 8131}#)
                       #{nr 8223}#
                       #{nw 8222}#
                       #{mod 8131}#))))))))
        (lambda (#{e 7918}#
                 #{r 7919}#
                 #{w 7920}#
                 #{s 7921}#
                 #{mod 7922}#)
          (let ((#{tmp 7924}#
                  ($sc-dispatch
                    #{e 7918}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 7924}#
                  (@apply
                    (lambda (#{id 7928}#
                             #{val 7929}#
                             #{e1 7930}#
                             #{e2 7931}#)
                      (and-map #{id? 4413}# #{id 7928}#))
                    #{tmp 7924}#)
                  #f)
              (@apply
                (lambda (#{id 7947}#
                         #{val 7948}#
                         #{e1 7949}#
                         #{e2 7950}#)
                  (#{chi-let 7917}#
                    #{e 7918}#
                    #{r 7919}#
                    #{w 7920}#
                    #{s 7921}#
                    #{mod 7922}#
                    (lambda (#{src 7954}#
                             #{ids 7955}#
                             #{vars 7956}#
                             #{val-exps 7957}#
                             #{body-exp 7958}#)
                      (begin
                        (for-each
                          #{maybe-name-value! 4378}#
                          #{ids 7955}#
                          #{val-exps 7957}#)
                        (if (null? #{vars 7956}#)
                          #{body-exp 7958}#
                          (make-struct/no-tail
                            (vector-ref %expanded-vtables 16)
                            #{src 7954}#
                            #{ids 7955}#
                            #{vars 7956}#
                            #{val-exps 7957}#
                            #{body-exp 7958}#))))
                    #{id 7947}#
                    #{val 7948}#
                    (cons #{e1 7949}# #{e2 7950}#)))
                #{tmp 7924}#)
              (let ((#{tmp 7965}#
                      ($sc-dispatch
                        #{e 7918}#
                        '(_ any #(each (any any)) any . each-any))))
                (if (if #{tmp 7965}#
                      (@apply
                        (lambda (#{f 7969}#
                                 #{id 7970}#
                                 #{val 7971}#
                                 #{e1 7972}#
                                 #{e2 7973}#)
                          (if (if (symbol? #{f 7969}#)
                                #t
                                (if (if (vector? #{f 7969}#)
                                      (if (= (vector-length #{f 7969}#) 4)
                                        (eq? (vector-ref #{f 7969}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{f 7969}# 1))
                                  #f))
                            (and-map #{id? 4413}# #{id 7970}#)
                            #f))
                        #{tmp 7965}#)
                      #f)
                  (@apply
                    (lambda (#{f 8015}#
                             #{id 8016}#
                             #{val 8017}#
                             #{e1 8018}#
                             #{e2 8019}#)
                      (#{chi-let 7917}#
                        #{e 7918}#
                        #{r 7919}#
                        #{w 7920}#
                        #{s 7921}#
                        #{mod 7922}#
                        #{build-named-let 4397}#
                        (cons #{f 8015}# #{id 8016}#)
                        #{val 8017}#
                        (cons #{e1 8018}# #{e2 8019}#)))
                    #{tmp 7965}#)
                  (syntax-violation
                    'let
                    "bad let"
                    (let ((#{x 8032}#
                            (begin
                              (if (if (pair? #{e 7918}#) #{s 7921}# #f)
                                (set-source-properties! #{e 7918}# #{s 7921}#))
                              #{e 7918}#)))
                      (if (if (null? (car #{w 7920}#))
                            (null? (cdr #{w 7920}#))
                            #f)
                        #{x 8032}#
                        (if (if (vector? #{x 8032}#)
                              (if (= (vector-length #{x 8032}#) 4)
                                (eq? (vector-ref #{x 8032}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 8064}# (vector-ref #{x 8032}# 1))
                                (#{wrap 8065}#
                                  (let ((#{w2 8073}#
                                          (vector-ref #{x 8032}# 2)))
                                    (let ((#{m1 8074}# (car #{w 7920}#))
                                          (#{s1 8075}# (cdr #{w 7920}#)))
                                      (if (null? #{m1 8074}#)
                                        (if (null? #{s1 8075}#)
                                          #{w2 8073}#
                                          (cons (car #{w2 8073}#)
                                                (let ((#{m2 8090}#
                                                        (cdr #{w2 8073}#)))
                                                  (if (null? #{m2 8090}#)
                                                    #{s1 8075}#
                                                    (append
                                                      #{s1 8075}#
                                                      #{m2 8090}#)))))
                                        (cons (let ((#{m2 8098}#
                                                      (car #{w2 8073}#)))
                                                (if (null? #{m2 8098}#)
                                                  #{m1 8074}#
                                                  (append
                                                    #{m1 8074}#
                                                    #{m2 8098}#)))
                                              (let ((#{m2 8106}#
                                                      (cdr #{w2 8073}#)))
                                                (if (null? #{m2 8106}#)
                                                  #{s1 8075}#
                                                  (append
                                                    #{s1 8075}#
                                                    #{m2 8106}#))))))))
                                (#{module 8066}# (vector-ref #{x 8032}# 3)))
                            (vector
                              'syntax-object
                              #{expression 8064}#
                              #{wrap 8065}#
                              #{module 8066}#))
                          (if (null? #{x 8032}#)
                            #{x 8032}#
                            (vector
                              'syntax-object
                              #{x 8032}#
                              #{w 7920}#
                              #{mod 7922}#)))))))))))))
    (#{global-extend 4411}#
      'core
      'letrec
      (lambda (#{e 8717}#
               #{r 8718}#
               #{w 8719}#
               #{s 8720}#
               #{mod 8721}#)
        (let ((#{tmp 8723}#
                ($sc-dispatch
                  #{e 8717}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 8723}#
                (@apply
                  (lambda (#{id 8727}#
                           #{val 8728}#
                           #{e1 8729}#
                           #{e2 8730}#)
                    (and-map #{id? 4413}# #{id 8727}#))
                  #{tmp 8723}#)
                #f)
            (@apply
              (lambda (#{id 8746}#
                       #{val 8747}#
                       #{e1 8748}#
                       #{e2 8749}#)
                (if (not (#{valid-bound-ids? 4436}# #{id 8746}#))
                  (syntax-violation
                    'letrec
                    "duplicate bound variable"
                    #{e 8717}#)
                  (let ((#{labels 8846}#
                          (#{gen-labels 4416}# #{id 8746}#))
                        (#{new-vars 8847}#
                          (map #{gen-var 4460}# #{id 8746}#)))
                    (let ((#{w 8848}#
                            (#{make-binding-wrap 4427}#
                              #{id 8746}#
                              #{labels 8846}#
                              #{w 8719}#))
                          (#{r 8849}#
                            (#{extend-var-env 4409}#
                              #{labels 8846}#
                              #{new-vars 8847}#
                              #{r 8718}#)))
                      (#{build-letrec 4398}#
                        #{s 8720}#
                        #f
                        (map syntax->datum #{id 8746}#)
                        #{new-vars 8847}#
                        (map (lambda (#{x 8928}#)
                               (#{chi 4446}#
                                 #{x 8928}#
                                 #{r 8849}#
                                 #{w 8848}#
                                 #{mod 8721}#))
                             #{val 8747}#)
                        (#{chi-body 4450}#
                          (cons #{e1 8748}# #{e2 8749}#)
                          (let ((#{x 8990}#
                                  (begin
                                    (if (if (pair? #{e 8717}#) #{s 8720}# #f)
                                      (set-source-properties!
                                        #{e 8717}#
                                        #{s 8720}#))
                                    #{e 8717}#)))
                            (if (if (null? (car #{w 8848}#))
                                  (null? (cdr #{w 8848}#))
                                  #f)
                              #{x 8990}#
                              (if (if (vector? #{x 8990}#)
                                    (if (= (vector-length #{x 8990}#) 4)
                                      (eq? (vector-ref #{x 8990}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 9022}#
                                        (vector-ref #{x 8990}# 1))
                                      (#{wrap 9023}#
                                        (let ((#{w2 9031}#
                                                (vector-ref #{x 8990}# 2)))
                                          (let ((#{m1 9032}# (car #{w 8848}#))
                                                (#{s1 9033}# (cdr #{w 8848}#)))
                                            (if (null? #{m1 9032}#)
                                              (if (null? #{s1 9033}#)
                                                #{w2 9031}#
                                                (cons (car #{w2 9031}#)
                                                      (let ((#{m2 9048}#
                                                              (cdr #{w2 9031}#)))
                                                        (if (null? #{m2 9048}#)
                                                          #{s1 9033}#
                                                          (append
                                                            #{s1 9033}#
                                                            #{m2 9048}#)))))
                                              (cons (let ((#{m2 9056}#
                                                            (car #{w2 9031}#)))
                                                      (if (null? #{m2 9056}#)
                                                        #{m1 9032}#
                                                        (append
                                                          #{m1 9032}#
                                                          #{m2 9056}#)))
                                                    (let ((#{m2 9064}#
                                                            (cdr #{w2 9031}#)))
                                                      (if (null? #{m2 9064}#)
                                                        #{s1 9033}#
                                                        (append
                                                          #{s1 9033}#
                                                          #{m2 9064}#))))))))
                                      (#{module 9024}#
                                        (vector-ref #{x 8990}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 9022}#
                                    #{wrap 9023}#
                                    #{module 9024}#))
                                (if (null? #{x 8990}#)
                                  #{x 8990}#
                                  (vector
                                    'syntax-object
                                    #{x 8990}#
                                    #{w 8848}#
                                    #{mod 8721}#)))))
                          #{r 8849}#
                          #{w 8848}#
                          #{mod 8721}#))))))
              #{tmp 8723}#)
            (syntax-violation
              'letrec
              "bad letrec"
              (let ((#{x 9304}#
                      (begin
                        (if (if (pair? #{e 8717}#) #{s 8720}# #f)
                          (set-source-properties! #{e 8717}# #{s 8720}#))
                        #{e 8717}#)))
                (if (if (null? (car #{w 8719}#))
                      (null? (cdr #{w 8719}#))
                      #f)
                  #{x 9304}#
                  (if (if (vector? #{x 9304}#)
                        (if (= (vector-length #{x 9304}#) 4)
                          (eq? (vector-ref #{x 9304}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 9336}# (vector-ref #{x 9304}# 1))
                          (#{wrap 9337}#
                            (let ((#{w2 9345}# (vector-ref #{x 9304}# 2)))
                              (let ((#{m1 9346}# (car #{w 8719}#))
                                    (#{s1 9347}# (cdr #{w 8719}#)))
                                (if (null? #{m1 9346}#)
                                  (if (null? #{s1 9347}#)
                                    #{w2 9345}#
                                    (cons (car #{w2 9345}#)
                                          (let ((#{m2 9362}#
                                                  (cdr #{w2 9345}#)))
                                            (if (null? #{m2 9362}#)
                                              #{s1 9347}#
                                              (append
                                                #{s1 9347}#
                                                #{m2 9362}#)))))
                                  (cons (let ((#{m2 9370}# (car #{w2 9345}#)))
                                          (if (null? #{m2 9370}#)
                                            #{m1 9346}#
                                            (append #{m1 9346}# #{m2 9370}#)))
                                        (let ((#{m2 9378}# (cdr #{w2 9345}#)))
                                          (if (null? #{m2 9378}#)
                                            #{s1 9347}#
                                            (append
                                              #{s1 9347}#
                                              #{m2 9378}#))))))))
                          (#{module 9338}# (vector-ref #{x 9304}# 3)))
                      (vector
                        'syntax-object
                        #{expression 9336}#
                        #{wrap 9337}#
                        #{module 9338}#))
                    (if (null? #{x 9304}#)
                      #{x 9304}#
                      (vector
                        'syntax-object
                        #{x 9304}#
                        #{w 8719}#
                        #{mod 8721}#))))))))))
    (#{global-extend 4411}#
      'core
      'letrec*
      (lambda (#{e 9529}#
               #{r 9530}#
               #{w 9531}#
               #{s 9532}#
               #{mod 9533}#)
        (let ((#{tmp 9535}#
                ($sc-dispatch
                  #{e 9529}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 9535}#
                (@apply
                  (lambda (#{id 9539}#
                           #{val 9540}#
                           #{e1 9541}#
                           #{e2 9542}#)
                    (and-map #{id? 4413}# #{id 9539}#))
                  #{tmp 9535}#)
                #f)
            (@apply
              (lambda (#{id 9558}#
                       #{val 9559}#
                       #{e1 9560}#
                       #{e2 9561}#)
                (if (not (#{valid-bound-ids? 4436}# #{id 9558}#))
                  (syntax-violation
                    'letrec*
                    "duplicate bound variable"
                    #{e 9529}#)
                  (let ((#{labels 9658}#
                          (#{gen-labels 4416}# #{id 9558}#))
                        (#{new-vars 9659}#
                          (map #{gen-var 4460}# #{id 9558}#)))
                    (let ((#{w 9660}#
                            (#{make-binding-wrap 4427}#
                              #{id 9558}#
                              #{labels 9658}#
                              #{w 9531}#))
                          (#{r 9661}#
                            (#{extend-var-env 4409}#
                              #{labels 9658}#
                              #{new-vars 9659}#
                              #{r 9530}#)))
                      (#{build-letrec 4398}#
                        #{s 9532}#
                        #t
                        (map syntax->datum #{id 9558}#)
                        #{new-vars 9659}#
                        (map (lambda (#{x 9740}#)
                               (#{chi 4446}#
                                 #{x 9740}#
                                 #{r 9661}#
                                 #{w 9660}#
                                 #{mod 9533}#))
                             #{val 9559}#)
                        (#{chi-body 4450}#
                          (cons #{e1 9560}# #{e2 9561}#)
                          (let ((#{x 9802}#
                                  (begin
                                    (if (if (pair? #{e 9529}#) #{s 9532}# #f)
                                      (set-source-properties!
                                        #{e 9529}#
                                        #{s 9532}#))
                                    #{e 9529}#)))
                            (if (if (null? (car #{w 9660}#))
                                  (null? (cdr #{w 9660}#))
                                  #f)
                              #{x 9802}#
                              (if (if (vector? #{x 9802}#)
                                    (if (= (vector-length #{x 9802}#) 4)
                                      (eq? (vector-ref #{x 9802}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 9834}#
                                        (vector-ref #{x 9802}# 1))
                                      (#{wrap 9835}#
                                        (let ((#{w2 9843}#
                                                (vector-ref #{x 9802}# 2)))
                                          (let ((#{m1 9844}# (car #{w 9660}#))
                                                (#{s1 9845}# (cdr #{w 9660}#)))
                                            (if (null? #{m1 9844}#)
                                              (if (null? #{s1 9845}#)
                                                #{w2 9843}#
                                                (cons (car #{w2 9843}#)
                                                      (let ((#{m2 9860}#
                                                              (cdr #{w2 9843}#)))
                                                        (if (null? #{m2 9860}#)
                                                          #{s1 9845}#
                                                          (append
                                                            #{s1 9845}#
                                                            #{m2 9860}#)))))
                                              (cons (let ((#{m2 9868}#
                                                            (car #{w2 9843}#)))
                                                      (if (null? #{m2 9868}#)
                                                        #{m1 9844}#
                                                        (append
                                                          #{m1 9844}#
                                                          #{m2 9868}#)))
                                                    (let ((#{m2 9876}#
                                                            (cdr #{w2 9843}#)))
                                                      (if (null? #{m2 9876}#)
                                                        #{s1 9845}#
                                                        (append
                                                          #{s1 9845}#
                                                          #{m2 9876}#))))))))
                                      (#{module 9836}#
                                        (vector-ref #{x 9802}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 9834}#
                                    #{wrap 9835}#
                                    #{module 9836}#))
                                (if (null? #{x 9802}#)
                                  #{x 9802}#
                                  (vector
                                    'syntax-object
                                    #{x 9802}#
                                    #{w 9660}#
                                    #{mod 9533}#)))))
                          #{r 9661}#
                          #{w 9660}#
                          #{mod 9533}#))))))
              #{tmp 9535}#)
            (syntax-violation
              'letrec*
              "bad letrec*"
              (let ((#{x 10116}#
                      (begin
                        (if (if (pair? #{e 9529}#) #{s 9532}# #f)
                          (set-source-properties! #{e 9529}# #{s 9532}#))
                        #{e 9529}#)))
                (if (if (null? (car #{w 9531}#))
                      (null? (cdr #{w 9531}#))
                      #f)
                  #{x 10116}#
                  (if (if (vector? #{x 10116}#)
                        (if (= (vector-length #{x 10116}#) 4)
                          (eq? (vector-ref #{x 10116}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 10148}# (vector-ref #{x 10116}# 1))
                          (#{wrap 10149}#
                            (let ((#{w2 10157}# (vector-ref #{x 10116}# 2)))
                              (let ((#{m1 10158}# (car #{w 9531}#))
                                    (#{s1 10159}# (cdr #{w 9531}#)))
                                (if (null? #{m1 10158}#)
                                  (if (null? #{s1 10159}#)
                                    #{w2 10157}#
                                    (cons (car #{w2 10157}#)
                                          (let ((#{m2 10174}#
                                                  (cdr #{w2 10157}#)))
                                            (if (null? #{m2 10174}#)
                                              #{s1 10159}#
                                              (append
                                                #{s1 10159}#
                                                #{m2 10174}#)))))
                                  (cons (let ((#{m2 10182}#
                                                (car #{w2 10157}#)))
                                          (if (null? #{m2 10182}#)
                                            #{m1 10158}#
                                            (append
                                              #{m1 10158}#
                                              #{m2 10182}#)))
                                        (let ((#{m2 10190}#
                                                (cdr #{w2 10157}#)))
                                          (if (null? #{m2 10190}#)
                                            #{s1 10159}#
                                            (append
                                              #{s1 10159}#
                                              #{m2 10190}#))))))))
                          (#{module 10150}# (vector-ref #{x 10116}# 3)))
                      (vector
                        'syntax-object
                        #{expression 10148}#
                        #{wrap 10149}#
                        #{module 10150}#))
                    (if (null? #{x 10116}#)
                      #{x 10116}#
                      (vector
                        'syntax-object
                        #{x 10116}#
                        #{w 9531}#
                        #{mod 9533}#))))))))))
    (#{global-extend 4411}#
      'core
      'set!
      (lambda (#{e 10353}#
               #{r 10354}#
               #{w 10355}#
               #{s 10356}#
               #{mod 10357}#)
        (let ((#{tmp 10359}#
                ($sc-dispatch #{e 10353}# '(_ any any))))
          (if (if #{tmp 10359}#
                (@apply
                  (lambda (#{id 10363}# #{val 10364}#)
                    (if (symbol? #{id 10363}#)
                      #t
                      (if (if (vector? #{id 10363}#)
                            (if (= (vector-length #{id 10363}#) 4)
                              (eq? (vector-ref #{id 10363}# 0) 'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{id 10363}# 1))
                        #f)))
                  #{tmp 10359}#)
                #f)
            (@apply
              (lambda (#{id 10391}# #{val 10392}#)
                (call-with-values
                  (lambda ()
                    (#{resolve-identifier 4433}#
                      #{id 10391}#
                      #{w 10355}#
                      #{r 10354}#
                      #{mod 10357}#
                      #t))
                  (lambda (#{type 10395}# #{value 10396}# #{id-mod 10397}#)
                    (if (eqv? #{type 10395}# 'lexical)
                      (#{build-lexical-assignment 4384}#
                        #{s 10356}#
                        (syntax->datum #{id 10391}#)
                        #{value 10396}#
                        (#{chi 4446}#
                          #{val 10392}#
                          #{r 10354}#
                          #{w 10355}#
                          #{mod 10357}#))
                      (if (eqv? #{type 10395}# 'global)
                        (#{build-global-assignment 4387}#
                          #{s 10356}#
                          #{value 10396}#
                          (#{chi 4446}#
                            #{val 10392}#
                            #{r 10354}#
                            #{w 10355}#
                            #{mod 10357}#)
                          #{id-mod 10397}#)
                        (if (eqv? #{type 10395}# 'macro)
                          (if (procedure-property
                                #{value 10396}#
                                'variable-transformer)
                            (#{chi 4446}#
                              (#{chi-macro 4449}#
                                #{value 10396}#
                                #{e 10353}#
                                #{r 10354}#
                                #{w 10355}#
                                #{s 10356}#
                                #f
                                #{mod 10357}#)
                              #{r 10354}#
                              '(())
                              #{mod 10357}#)
                            (syntax-violation
                              'set!
                              "not a variable transformer"
                              (if (if (null? (car #{w 10355}#))
                                    (null? (cdr #{w 10355}#))
                                    #f)
                                #{e 10353}#
                                (if (if (vector? #{e 10353}#)
                                      (if (= (vector-length #{e 10353}#) 4)
                                        (eq? (vector-ref #{e 10353}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 10857}#
                                          (vector-ref #{e 10353}# 1))
                                        (#{wrap 10858}#
                                          (let ((#{w2 10868}#
                                                  (vector-ref #{e 10353}# 2)))
                                            (let ((#{m1 10869}#
                                                    (car #{w 10355}#))
                                                  (#{s1 10870}#
                                                    (cdr #{w 10355}#)))
                                              (if (null? #{m1 10869}#)
                                                (if (null? #{s1 10870}#)
                                                  #{w2 10868}#
                                                  (cons (car #{w2 10868}#)
                                                        (let ((#{m2 10887}#
                                                                (cdr #{w2 10868}#)))
                                                          (if (null? #{m2 10887}#)
                                                            #{s1 10870}#
                                                            (append
                                                              #{s1 10870}#
                                                              #{m2 10887}#)))))
                                                (cons (let ((#{m2 10895}#
                                                              (car #{w2 10868}#)))
                                                        (if (null? #{m2 10895}#)
                                                          #{m1 10869}#
                                                          (append
                                                            #{m1 10869}#
                                                            #{m2 10895}#)))
                                                      (let ((#{m2 10903}#
                                                              (cdr #{w2 10868}#)))
                                                        (if (null? #{m2 10903}#)
                                                          #{s1 10870}#
                                                          (append
                                                            #{s1 10870}#
                                                            #{m2 10903}#))))))))
                                        (#{module 10859}#
                                          (vector-ref #{e 10353}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 10857}#
                                      #{wrap 10858}#
                                      #{module 10859}#))
                                  (if (null? #{e 10353}#)
                                    #{e 10353}#
                                    (vector
                                      'syntax-object
                                      #{e 10353}#
                                      #{w 10355}#
                                      #{mod 10357}#))))
                              (if (if (null? (car #{w 10355}#))
                                    (null? (cdr #{w 10355}#))
                                    #f)
                                #{id 10391}#
                                (if (if (vector? #{id 10391}#)
                                      (if (= (vector-length #{id 10391}#) 4)
                                        (eq? (vector-ref #{id 10391}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 10955}#
                                          (vector-ref #{id 10391}# 1))
                                        (#{wrap 10956}#
                                          (let ((#{w2 10966}#
                                                  (vector-ref #{id 10391}# 2)))
                                            (let ((#{m1 10967}#
                                                    (car #{w 10355}#))
                                                  (#{s1 10968}#
                                                    (cdr #{w 10355}#)))
                                              (if (null? #{m1 10967}#)
                                                (if (null? #{s1 10968}#)
                                                  #{w2 10966}#
                                                  (cons (car #{w2 10966}#)
                                                        (let ((#{m2 10985}#
                                                                (cdr #{w2 10966}#)))
                                                          (if (null? #{m2 10985}#)
                                                            #{s1 10968}#
                                                            (append
                                                              #{s1 10968}#
                                                              #{m2 10985}#)))))
                                                (cons (let ((#{m2 10993}#
                                                              (car #{w2 10966}#)))
                                                        (if (null? #{m2 10993}#)
                                                          #{m1 10967}#
                                                          (append
                                                            #{m1 10967}#
                                                            #{m2 10993}#)))
                                                      (let ((#{m2 11001}#
                                                              (cdr #{w2 10966}#)))
                                                        (if (null? #{m2 11001}#)
                                                          #{s1 10968}#
                                                          (append
                                                            #{s1 10968}#
                                                            #{m2 11001}#))))))))
                                        (#{module 10957}#
                                          (vector-ref #{id 10391}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 10955}#
                                      #{wrap 10956}#
                                      #{module 10957}#))
                                  (if (null? #{id 10391}#)
                                    #{id 10391}#
                                    (vector
                                      'syntax-object
                                      #{id 10391}#
                                      #{w 10355}#
                                      #{id-mod 10397}#))))))
                          (if (eqv? #{type 10395}# 'displaced-lexical)
                            (syntax-violation
                              'set!
                              "identifier out of context"
                              (if (if (null? (car #{w 10355}#))
                                    (null? (cdr #{w 10355}#))
                                    #f)
                                #{id 10391}#
                                (if (if (vector? #{id 10391}#)
                                      (if (= (vector-length #{id 10391}#) 4)
                                        (eq? (vector-ref #{id 10391}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 11056}#
                                          (vector-ref #{id 10391}# 1))
                                        (#{wrap 11057}#
                                          (let ((#{w2 11067}#
                                                  (vector-ref #{id 10391}# 2)))
                                            (let ((#{m1 11068}#
                                                    (car #{w 10355}#))
                                                  (#{s1 11069}#
                                                    (cdr #{w 10355}#)))
                                              (if (null? #{m1 11068}#)
                                                (if (null? #{s1 11069}#)
                                                  #{w2 11067}#
                                                  (cons (car #{w2 11067}#)
                                                        (let ((#{m2 11086}#
                                                                (cdr #{w2 11067}#)))
                                                          (if (null? #{m2 11086}#)
                                                            #{s1 11069}#
                                                            (append
                                                              #{s1 11069}#
                                                              #{m2 11086}#)))))
                                                (cons (let ((#{m2 11094}#
                                                              (car #{w2 11067}#)))
                                                        (if (null? #{m2 11094}#)
                                                          #{m1 11068}#
                                                          (append
                                                            #{m1 11068}#
                                                            #{m2 11094}#)))
                                                      (let ((#{m2 11102}#
                                                              (cdr #{w2 11067}#)))
                                                        (if (null? #{m2 11102}#)
                                                          #{s1 11069}#
                                                          (append
                                                            #{s1 11069}#
                                                            #{m2 11102}#))))))))
                                        (#{module 11058}#
                                          (vector-ref #{id 10391}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 11056}#
                                      #{wrap 11057}#
                                      #{module 11058}#))
                                  (if (null? #{id 10391}#)
                                    #{id 10391}#
                                    (vector
                                      'syntax-object
                                      #{id 10391}#
                                      #{w 10355}#
                                      #{mod 10357}#)))))
                            (syntax-violation
                              'set!
                              "bad set!"
                              (let ((#{x 11134}#
                                      (begin
                                        (if (if (pair? #{e 10353}#)
                                              #{s 10356}#
                                              #f)
                                          (set-source-properties!
                                            #{e 10353}#
                                            #{s 10356}#))
                                        #{e 10353}#)))
                                (if (if (null? (car #{w 10355}#))
                                      (null? (cdr #{w 10355}#))
                                      #f)
                                  #{x 11134}#
                                  (if (if (vector? #{x 11134}#)
                                        (if (= (vector-length #{x 11134}#) 4)
                                          (eq? (vector-ref #{x 11134}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 11166}#
                                            (vector-ref #{x 11134}# 1))
                                          (#{wrap 11167}#
                                            (let ((#{w2 11175}#
                                                    (vector-ref
                                                      #{x 11134}#
                                                      2)))
                                              (let ((#{m1 11176}#
                                                      (car #{w 10355}#))
                                                    (#{s1 11177}#
                                                      (cdr #{w 10355}#)))
                                                (if (null? #{m1 11176}#)
                                                  (if (null? #{s1 11177}#)
                                                    #{w2 11175}#
                                                    (cons (car #{w2 11175}#)
                                                          (let ((#{m2 11192}#
                                                                  (cdr #{w2 11175}#)))
                                                            (if (null? #{m2 11192}#)
                                                              #{s1 11177}#
                                                              (append
                                                                #{s1 11177}#
                                                                #{m2 11192}#)))))
                                                  (cons (let ((#{m2 11200}#
                                                                (car #{w2 11175}#)))
                                                          (if (null? #{m2 11200}#)
                                                            #{m1 11176}#
                                                            (append
                                                              #{m1 11176}#
                                                              #{m2 11200}#)))
                                                        (let ((#{m2 11208}#
                                                                (cdr #{w2 11175}#)))
                                                          (if (null? #{m2 11208}#)
                                                            #{s1 11177}#
                                                            (append
                                                              #{s1 11177}#
                                                              #{m2 11208}#))))))))
                                          (#{module 11168}#
                                            (vector-ref #{x 11134}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 11166}#
                                        #{wrap 11167}#
                                        #{module 11168}#))
                                    (if (null? #{x 11134}#)
                                      #{x 11134}#
                                      (vector
                                        'syntax-object
                                        #{x 11134}#
                                        #{w 10355}#
                                        #{mod 10357}#)))))))))))))
              #{tmp 10359}#)
            (let ((#{tmp 11223}#
                    ($sc-dispatch
                      #{e 10353}#
                      '(_ (any . each-any) any))))
              (if #{tmp 11223}#
                (@apply
                  (lambda (#{head 11227}# #{tail 11228}# #{val 11229}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 4445}#
                          #{head 11227}#
                          #{r 10354}#
                          '(())
                          #f
                          #f
                          #{mod 10357}#
                          #t))
                      (lambda (#{type 11232}#
                               #{value 11233}#
                               #{ee 11234}#
                               #{ww 11235}#
                               #{ss 11236}#
                               #{modmod 11237}#)
                        (if (eqv? #{type 11232}# 'module-ref)
                          (let ((#{val 11241}#
                                  (#{chi 4446}#
                                    #{val 11229}#
                                    #{r 10354}#
                                    #{w 10355}#
                                    #{mod 10357}#)))
                            (call-with-values
                              (lambda ()
                                (#{value 11233}#
                                  (cons #{head 11227}# #{tail 11228}#)
                                  #{r 10354}#
                                  #{w 10355}#))
                              (lambda (#{e 11242}#
                                       #{r 11243}#
                                       #{w 11244}#
                                       #{s* 11245}#
                                       #{mod 11246}#)
                                (let ((#{tmp 11248}# (list #{e 11242}#)))
                                  (if (@apply
                                        (lambda (#{e 11250}#)
                                          (if (symbol? #{e 11250}#)
                                            #t
                                            (if (if (vector? #{e 11250}#)
                                                  (if (= (vector-length
                                                           #{e 11250}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{e 11250}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{e 11250}# 1))
                                              #f)))
                                        #{tmp 11248}#)
                                    (@apply
                                      (lambda (#{e 11280}#)
                                        (#{build-global-assignment 4387}#
                                          #{s 10356}#
                                          (syntax->datum #{e 11280}#)
                                          #{val 11241}#
                                          #{mod 11246}#))
                                      #{tmp 11248}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 11242}#))))))
                          (#{build-call 4380}#
                            #{s 10356}#
                            (#{chi 4446}#
                              (list '#(syntax-object
                                       setter
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(type value ee ww ss modmod)
                                          #((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                          #("i3658"
                                            "i3659"
                                            "i3660"
                                            "i3661"
                                            "i3662"
                                            "i3663"))
                                        #(ribcage
                                          #(head tail val)
                                          #((top) (top) (top))
                                          #("i3644" "i3645" "i3646"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(e r w s mod)
                                          #((top) (top) (top) (top) (top))
                                          #("i3616"
                                            "i3617"
                                            "i3618"
                                            "i3619"
                                            "i3620"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            chi-lambda-case
                                            lambda*-formals
                                            chi-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            chi-void
                                            eval-local-transformer
                                            chi-local-syntax
                                            chi-body
                                            chi-macro
                                            chi-call
                                            chi-expr
                                            chi
                                            syntax-type
                                            chi-when-list
                                            chi-install-global
                                            chi-top-sequence
                                            chi-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            resolve-identifier
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-primcall
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-call
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-seq
                                            make-primcall
                                            make-call
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i471"
                                           "i469"
                                           "i467"
                                           "i465"
                                           "i463"
                                           "i461"
                                           "i459"
                                           "i457"
                                           "i455"
                                           "i453"
                                           "i451"
                                           "i449"
                                           "i447"
                                           "i445"
                                           "i443"
                                           "i441"
                                           "i439"
                                           "i437"
                                           "i435"
                                           "i433"
                                           "i431"
                                           "i429"
                                           "i427"
                                           "i425"
                                           "i423"
                                           "i421"
                                           "i419"
                                           "i417"
                                           "i415"
                                           "i413"
                                           "i411"
                                           "i409"
                                           "i407"
                                           "i405"
                                           "i403"
                                           "i401"
                                           "i400"
                                           "i398"
                                           "i395"
                                           "i394"
                                           "i393"
                                           "i391"
                                           "i390"
                                           "i388"
                                           "i386"
                                           "i384"
                                           "i382"
                                           "i380"
                                           "i378"
                                           "i376"
                                           "i374"
                                           "i371"
                                           "i369"
                                           "i368"
                                           "i366"
                                           "i364"
                                           "i362"
                                           "i360"
                                           "i359"
                                           "i358"
                                           "i357"
                                           "i355"
                                           "i354"
                                           "i351"
                                           "i349"
                                           "i347"
                                           "i345"
                                           "i343"
                                           "i341"
                                           "i340"
                                           "i339"
                                           "i337"
                                           "i335"
                                           "i334"
                                           "i331"
                                           "i330"
                                           "i328"
                                           "i326"
                                           "i324"
                                           "i322"
                                           "i320"
                                           "i318"
                                           "i316"
                                           "i314"
                                           "i312"
                                           "i309"
                                           "i307"
                                           "i305"
                                           "i303"
                                           "i301"
                                           "i299"
                                           "i297"
                                           "i295"
                                           "i293"
                                           "i291"
                                           "i289"
                                           "i287"
                                           "i285"
                                           "i283"
                                           "i281"
                                           "i279"
                                           "i277"
                                           "i275"
                                           "i273"
                                           "i271"
                                           "i269"
                                           "i267"
                                           "i265"
                                           "i263"
                                           "i262"
                                           "i259"
                                           "i257"
                                           "i256"
                                           "i255"
                                           "i254"
                                           "i253"
                                           "i251"
                                           "i249"
                                           "i247"
                                           "i244"
                                           "i242"
                                           "i240"
                                           "i238"
                                           "i236"
                                           "i234"
                                           "i232"
                                           "i230"
                                           "i228"
                                           "i226"
                                           "i224"
                                           "i222"
                                           "i220"
                                           "i218"
                                           "i216"
                                           "i214"
                                           "i212"
                                           "i210"
                                           "i208"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("i46" "i45" "i44"))
                                        #(ribcage () () ()))
                                       (hygiene guile))
                                    #{head 11227}#)
                              #{r 10354}#
                              #{w 10355}#
                              #{mod 10357}#)
                            (map (lambda (#{e 11609}#)
                                   (#{chi 4446}#
                                     #{e 11609}#
                                     #{r 10354}#
                                     #{w 10355}#
                                     #{mod 10357}#))
                                 (append
                                   #{tail 11228}#
                                   (list #{val 11229}#))))))))
                  #{tmp 11223}#)
                (syntax-violation
                  'set!
                  "bad set!"
                  (let ((#{x 11701}#
                          (begin
                            (if (if (pair? #{e 10353}#) #{s 10356}# #f)
                              (set-source-properties! #{e 10353}# #{s 10356}#))
                            #{e 10353}#)))
                    (if (if (null? (car #{w 10355}#))
                          (null? (cdr #{w 10355}#))
                          #f)
                      #{x 11701}#
                      (if (if (vector? #{x 11701}#)
                            (if (= (vector-length #{x 11701}#) 4)
                              (eq? (vector-ref #{x 11701}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 11733}# (vector-ref #{x 11701}# 1))
                              (#{wrap 11734}#
                                (let ((#{w2 11742}#
                                        (vector-ref #{x 11701}# 2)))
                                  (let ((#{m1 11743}# (car #{w 10355}#))
                                        (#{s1 11744}# (cdr #{w 10355}#)))
                                    (if (null? #{m1 11743}#)
                                      (if (null? #{s1 11744}#)
                                        #{w2 11742}#
                                        (cons (car #{w2 11742}#)
                                              (let ((#{m2 11759}#
                                                      (cdr #{w2 11742}#)))
                                                (if (null? #{m2 11759}#)
                                                  #{s1 11744}#
                                                  (append
                                                    #{s1 11744}#
                                                    #{m2 11759}#)))))
                                      (cons (let ((#{m2 11767}#
                                                    (car #{w2 11742}#)))
                                              (if (null? #{m2 11767}#)
                                                #{m1 11743}#
                                                (append
                                                  #{m1 11743}#
                                                  #{m2 11767}#)))
                                            (let ((#{m2 11775}#
                                                    (cdr #{w2 11742}#)))
                                              (if (null? #{m2 11775}#)
                                                #{s1 11744}#
                                                (append
                                                  #{s1 11744}#
                                                  #{m2 11775}#))))))))
                              (#{module 11735}# (vector-ref #{x 11701}# 3)))
                          (vector
                            'syntax-object
                            #{expression 11733}#
                            #{wrap 11734}#
                            #{module 11735}#))
                        (if (null? #{x 11701}#)
                          #{x 11701}#
                          (vector
                            'syntax-object
                            #{x 11701}#
                            #{w 10355}#
                            #{mod 10357}#))))))))))))
    (module-define!
      (current-module)
      '@
      (make-syntax-transformer
        '@
        'module-ref
        (lambda (#{e 11806}# #{r 11807}# #{w 11808}#)
          (let ((#{tmp 11810}#
                  ($sc-dispatch #{e 11806}# '(_ each-any any))))
            (if (if #{tmp 11810}#
                  (@apply
                    (lambda (#{mod 11813}# #{id 11814}#)
                      (if (and-map #{id? 4413}# #{mod 11813}#)
                        (if (symbol? #{id 11814}#)
                          #t
                          (if (if (vector? #{id 11814}#)
                                (if (= (vector-length #{id 11814}#) 4)
                                  (eq? (vector-ref #{id 11814}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{id 11814}# 1))
                            #f))
                        #f))
                    #{tmp 11810}#)
                  #f)
              (@apply
                (lambda (#{mod 11854}# #{id 11855}#)
                  (values
                    (syntax->datum #{id 11855}#)
                    #{r 11807}#
                    #{w 11808}#
                    #f
                    (syntax->datum
                      (cons '#(syntax-object
                               public
                               ((top)
                                #(ribcage
                                  #(mod id)
                                  #((top) (top))
                                  #("i3705" "i3706"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(e r w)
                                  #((top) (top) (top))
                                  #("i3693" "i3694" "i3695"))
                                #(ribcage
                                  (lambda-var-list
                                    gen-var
                                    strip
                                    chi-lambda-case
                                    lambda*-formals
                                    chi-simple-lambda
                                    lambda-formals
                                    ellipsis?
                                    chi-void
                                    eval-local-transformer
                                    chi-local-syntax
                                    chi-body
                                    chi-macro
                                    chi-call
                                    chi-expr
                                    chi
                                    syntax-type
                                    chi-when-list
                                    chi-install-global
                                    chi-top-sequence
                                    chi-sequence
                                    source-wrap
                                    wrap
                                    bound-id-member?
                                    distinct-bound-ids?
                                    valid-bound-ids?
                                    bound-id=?
                                    free-id=?
                                    resolve-identifier
                                    id-var-name
                                    same-marks?
                                    join-marks
                                    join-wraps
                                    smart-append
                                    make-binding-wrap
                                    extend-ribcage!
                                    make-empty-ribcage
                                    new-mark
                                    anti-mark
                                    the-anti-mark
                                    top-marked?
                                    top-wrap
                                    empty-wrap
                                    set-ribcage-labels!
                                    set-ribcage-marks!
                                    set-ribcage-symnames!
                                    ribcage-labels
                                    ribcage-marks
                                    ribcage-symnames
                                    ribcage?
                                    make-ribcage
                                    gen-labels
                                    gen-label
                                    make-rename
                                    rename-marks
                                    rename-new
                                    rename-old
                                    subst-rename?
                                    wrap-subst
                                    wrap-marks
                                    make-wrap
                                    id-sym-name&marks
                                    id-sym-name
                                    id?
                                    nonsymbol-id?
                                    global-extend
                                    macros-only-env
                                    extend-var-env
                                    extend-env
                                    null-env
                                    binding-value
                                    binding-type
                                    make-binding
                                    arg-check
                                    source-annotation
                                    no-source
                                    set-syntax-object-module!
                                    set-syntax-object-wrap!
                                    set-syntax-object-expression!
                                    syntax-object-module
                                    syntax-object-wrap
                                    syntax-object-expression
                                    syntax-object?
                                    make-syntax-object
                                    build-lexical-var
                                    build-letrec
                                    build-named-let
                                    build-let
                                    build-sequence
                                    build-data
                                    build-primref
                                    build-primcall
                                    build-lambda-case
                                    build-case-lambda
                                    build-simple-lambda
                                    build-global-definition
                                    build-global-assignment
                                    build-global-reference
                                    analyze-variable
                                    build-lexical-assignment
                                    build-lexical-reference
                                    build-dynlet
                                    build-conditional
                                    build-call
                                    build-void
                                    maybe-name-value!
                                    decorate-source
                                    get-global-definition-hook
                                    put-global-definition-hook
                                    gensym-hook
                                    local-eval-hook
                                    top-level-eval-hook
                                    fx<
                                    fx=
                                    fx-
                                    fx+
                                    set-lambda-meta!
                                    lambda-meta
                                    lambda?
                                    make-dynlet
                                    make-letrec
                                    make-let
                                    make-lambda-case
                                    make-lambda
                                    make-seq
                                    make-primcall
                                    make-call
                                    make-conditional
                                    make-toplevel-define
                                    make-toplevel-set
                                    make-toplevel-ref
                                    make-module-set
                                    make-module-ref
                                    make-lexical-set
                                    make-lexical-ref
                                    make-primitive-ref
                                    make-const
                                    make-void)
                                  ((top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top))
                                  ("i471"
                                   "i469"
                                   "i467"
                                   "i465"
                                   "i463"
                                   "i461"
                                   "i459"
                                   "i457"
                                   "i455"
                                   "i453"
                                   "i451"
                                   "i449"
                                   "i447"
                                   "i445"
                                   "i443"
                                   "i441"
                                   "i439"
                                   "i437"
                                   "i435"
                                   "i433"
                                   "i431"
                                   "i429"
                                   "i427"
                                   "i425"
                                   "i423"
                                   "i421"
                                   "i419"
                                   "i417"
                                   "i415"
                                   "i413"
                                   "i411"
                                   "i409"
                                   "i407"
                                   "i405"
                                   "i403"
                                   "i401"
                                   "i400"
                                   "i398"
                                   "i395"
                                   "i394"
                                   "i393"
                                   "i391"
                                   "i390"
                                   "i388"
                                   "i386"
                                   "i384"
                                   "i382"
                                   "i380"
                                   "i378"
                                   "i376"
                                   "i374"
                                   "i371"
                                   "i369"
                                   "i368"
                                   "i366"
                                   "i364"
                                   "i362"
                                   "i360"
                                   "i359"
                                   "i358"
                                   "i357"
                                   "i355"
                                   "i354"
                                   "i351"
                                   "i349"
                                   "i347"
                                   "i345"
                                   "i343"
                                   "i341"
                                   "i340"
                                   "i339"
                                   "i337"
                                   "i335"
                                   "i334"
                                   "i331"
                                   "i330"
                                   "i328"
                                   "i326"
                                   "i324"
                                   "i322"
                                   "i320"
                                   "i318"
                                   "i316"
                                   "i314"
                                   "i312"
                                   "i309"
                                   "i307"
                                   "i305"
                                   "i303"
                                   "i301"
                                   "i299"
                                   "i297"
                                   "i295"
                                   "i293"
                                   "i291"
                                   "i289"
                                   "i287"
                                   "i285"
                                   "i283"
                                   "i281"
                                   "i279"
                                   "i277"
                                   "i275"
                                   "i273"
                                   "i271"
                                   "i269"
                                   "i267"
                                   "i265"
                                   "i263"
                                   "i262"
                                   "i259"
                                   "i257"
                                   "i256"
                                   "i255"
                                   "i254"
                                   "i253"
                                   "i251"
                                   "i249"
                                   "i247"
                                   "i244"
                                   "i242"
                                   "i240"
                                   "i238"
                                   "i236"
                                   "i234"
                                   "i232"
                                   "i230"
                                   "i228"
                                   "i226"
                                   "i224"
                                   "i222"
                                   "i220"
                                   "i218"
                                   "i216"
                                   "i214"
                                   "i212"
                                   "i210"
                                   "i208"))
                                #(ribcage
                                  (define-structure
                                    define-expansion-accessors
                                    define-expansion-constructors)
                                  ((top) (top) (top))
                                  ("i46" "i45" "i44"))
                                #(ribcage () () ()))
                               (hygiene guile))
                            #{mod 11854}#))))
                #{tmp 11810}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 11806}#))))))
    (#{global-extend 4411}#
      'module-ref
      '@@
      (lambda (#{e 11959}# #{r 11960}# #{w 11961}#)
        (letrec*
          ((#{remodulate 11962}#
             (lambda (#{x 12198}# #{mod 12199}#)
               (if (pair? #{x 12198}#)
                 (cons (#{remodulate 11962}#
                         (car #{x 12198}#)
                         #{mod 12199}#)
                       (#{remodulate 11962}#
                         (cdr #{x 12198}#)
                         #{mod 12199}#))
                 (if (if (vector? #{x 12198}#)
                       (if (= (vector-length #{x 12198}#) 4)
                         (eq? (vector-ref #{x 12198}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 12213}#
                           (#{remodulate 11962}#
                             (vector-ref #{x 12198}# 1)
                             #{mod 12199}#))
                         (#{wrap 12214}# (vector-ref #{x 12198}# 2)))
                     (vector
                       'syntax-object
                       #{expression 12213}#
                       #{wrap 12214}#
                       #{mod 12199}#))
                   (if (vector? #{x 12198}#)
                     (let ((#{n 12222}# (vector-length #{x 12198}#)))
                       (let ((#{v 12223}# (make-vector #{n 12222}#)))
                         (letrec*
                           ((#{loop 12224}#
                              (lambda (#{i 12279}#)
                                (if (= #{i 12279}# #{n 12222}#)
                                  #{v 12223}#
                                  (begin
                                    (vector-set!
                                      #{v 12223}#
                                      #{i 12279}#
                                      (#{remodulate 11962}#
                                        (vector-ref #{x 12198}# #{i 12279}#)
                                        #{mod 12199}#))
                                    (#{loop 12224}# (#{1+}# #{i 12279}#)))))))
                           (#{loop 12224}# 0))))
                     #{x 12198}#))))))
          (let ((#{tmp 11964}#
                  ($sc-dispatch #{e 11959}# '(_ each-any any))))
            (if (if #{tmp 11964}#
                  (@apply
                    (lambda (#{mod 11968}# #{exp 11969}#)
                      (and-map #{id? 4413}# #{mod 11968}#))
                    #{tmp 11964}#)
                  #f)
              (@apply
                (lambda (#{mod 11985}# #{exp 11986}#)
                  (let ((#{mod 11987}#
                          (syntax->datum
                            (cons '#(syntax-object
                                     private
                                     ((top)
                                      #(ribcage
                                        #(mod exp)
                                        #((top) (top))
                                        #("i3749" "i3750"))
                                      #(ribcage (remodulate) ((top)) ("i3716"))
                                      #(ribcage
                                        #(e r w)
                                        #((top) (top) (top))
                                        #("i3713" "i3714" "i3715"))
                                      #(ribcage
                                        (lambda-var-list
                                          gen-var
                                          strip
                                          chi-lambda-case
                                          lambda*-formals
                                          chi-simple-lambda
                                          lambda-formals
                                          ellipsis?
                                          chi-void
                                          eval-local-transformer
                                          chi-local-syntax
                                          chi-body
                                          chi-macro
                                          chi-call
                                          chi-expr
                                          chi
                                          syntax-type
                                          chi-when-list
                                          chi-install-global
                                          chi-top-sequence
                                          chi-sequence
                                          source-wrap
                                          wrap
                                          bound-id-member?
                                          distinct-bound-ids?
                                          valid-bound-ids?
                                          bound-id=?
                                          free-id=?
                                          resolve-identifier
                                          id-var-name
                                          same-marks?
                                          join-marks
                                          join-wraps
                                          smart-append
                                          make-binding-wrap
                                          extend-ribcage!
                                          make-empty-ribcage
                                          new-mark
                                          anti-mark
                                          the-anti-mark
                                          top-marked?
                                          top-wrap
                                          empty-wrap
                                          set-ribcage-labels!
                                          set-ribcage-marks!
                                          set-ribcage-symnames!
                                          ribcage-labels
                                          ribcage-marks
                                          ribcage-symnames
                                          ribcage?
                                          make-ribcage
                                          gen-labels
                                          gen-label
                                          make-rename
                                          rename-marks
                                          rename-new
                                          rename-old
                                          subst-rename?
                                          wrap-subst
                                          wrap-marks
                                          make-wrap
                                          id-sym-name&marks
                                          id-sym-name
                                          id?
                                          nonsymbol-id?
                                          global-extend
                                          macros-only-env
                                          extend-var-env
                                          extend-env
                                          null-env
                                          binding-value
                                          binding-type
                                          make-binding
                                          arg-check
                                          source-annotation
                                          no-source
                                          set-syntax-object-module!
                                          set-syntax-object-wrap!
                                          set-syntax-object-expression!
                                          syntax-object-module
                                          syntax-object-wrap
                                          syntax-object-expression
                                          syntax-object?
                                          make-syntax-object
                                          build-lexical-var
                                          build-letrec
                                          build-named-let
                                          build-let
                                          build-sequence
                                          build-data
                                          build-primref
                                          build-primcall
                                          build-lambda-case
                                          build-case-lambda
                                          build-simple-lambda
                                          build-global-definition
                                          build-global-assignment
                                          build-global-reference
                                          analyze-variable
                                          build-lexical-assignment
                                          build-lexical-reference
                                          build-dynlet
                                          build-conditional
                                          build-call
                                          build-void
                                          maybe-name-value!
                                          decorate-source
                                          get-global-definition-hook
                                          put-global-definition-hook
                                          gensym-hook
                                          local-eval-hook
                                          top-level-eval-hook
                                          fx<
                                          fx=
                                          fx-
                                          fx+
                                          set-lambda-meta!
                                          lambda-meta
                                          lambda?
                                          make-dynlet
                                          make-letrec
                                          make-let
                                          make-lambda-case
                                          make-lambda
                                          make-seq
                                          make-primcall
                                          make-call
                                          make-conditional
                                          make-toplevel-define
                                          make-toplevel-set
                                          make-toplevel-ref
                                          make-module-set
                                          make-module-ref
                                          make-lexical-set
                                          make-lexical-ref
                                          make-primitive-ref
                                          make-const
                                          make-void)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i471"
                                         "i469"
                                         "i467"
                                         "i465"
                                         "i463"
                                         "i461"
                                         "i459"
                                         "i457"
                                         "i455"
                                         "i453"
                                         "i451"
                                         "i449"
                                         "i447"
                                         "i445"
                                         "i443"
                                         "i441"
                                         "i439"
                                         "i437"
                                         "i435"
                                         "i433"
                                         "i431"
                                         "i429"
                                         "i427"
                                         "i425"
                                         "i423"
                                         "i421"
                                         "i419"
                                         "i417"
                                         "i415"
                                         "i413"
                                         "i411"
                                         "i409"
                                         "i407"
                                         "i405"
                                         "i403"
                                         "i401"
                                         "i400"
                                         "i398"
                                         "i395"
                                         "i394"
                                         "i393"
                                         "i391"
                                         "i390"
                                         "i388"
                                         "i386"
                                         "i384"
                                         "i382"
                                         "i380"
                                         "i378"
                                         "i376"
                                         "i374"
                                         "i371"
                                         "i369"
                                         "i368"
                                         "i366"
                                         "i364"
                                         "i362"
                                         "i360"
                                         "i359"
                                         "i358"
                                         "i357"
                                         "i355"
                                         "i354"
                                         "i351"
                                         "i349"
                                         "i347"
                                         "i345"
                                         "i343"
                                         "i341"
                                         "i340"
                                         "i339"
                                         "i337"
                                         "i335"
                                         "i334"
                                         "i331"
                                         "i330"
                                         "i328"
                                         "i326"
                                         "i324"
                                         "i322"
                                         "i320"
                                         "i318"
                                         "i316"
                                         "i314"
                                         "i312"
                                         "i309"
                                         "i307"
                                         "i305"
                                         "i303"
                                         "i301"
                                         "i299"
                                         "i297"
                                         "i295"
                                         "i293"
                                         "i291"
                                         "i289"
                                         "i287"
                                         "i285"
                                         "i283"
                                         "i281"
                                         "i279"
                                         "i277"
                                         "i275"
                                         "i273"
                                         "i271"
                                         "i269"
                                         "i267"
                                         "i265"
                                         "i263"
                                         "i262"
                                         "i259"
                                         "i257"
                                         "i256"
                                         "i255"
                                         "i254"
                                         "i253"
                                         "i251"
                                         "i249"
                                         "i247"
                                         "i244"
                                         "i242"
                                         "i240"
                                         "i238"
                                         "i236"
                                         "i234"
                                         "i232"
                                         "i230"
                                         "i228"
                                         "i226"
                                         "i224"
                                         "i222"
                                         "i220"
                                         "i218"
                                         "i216"
                                         "i214"
                                         "i212"
                                         "i210"
                                         "i208"))
                                      #(ribcage
                                        (define-structure
                                          define-expansion-accessors
                                          define-expansion-constructors)
                                        ((top) (top) (top))
                                        ("i46" "i45" "i44"))
                                      #(ribcage () () ()))
                                     (hygiene guile))
                                  #{mod 11985}#))))
                    (values
                      (#{remodulate 11962}#
                        #{exp 11986}#
                        #{mod 11987}#)
                      #{r 11960}#
                      #{w 11961}#
                      (#{source-annotation 4407}# #{exp 11986}#)
                      #{mod 11987}#)))
                #{tmp 11964}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 11959}#))))))
    (#{global-extend 4411}#
      'core
      'if
      (lambda (#{e 12392}#
               #{r 12393}#
               #{w 12394}#
               #{s 12395}#
               #{mod 12396}#)
        (let ((#{tmp 12398}#
                ($sc-dispatch #{e 12392}# '(_ any any))))
          (if #{tmp 12398}#
            (@apply
              (lambda (#{test 12402}# #{then 12403}#)
                (#{build-conditional 4381}#
                  #{s 12395}#
                  (#{chi 4446}#
                    #{test 12402}#
                    #{r 12393}#
                    #{w 12394}#
                    #{mod 12396}#)
                  (#{chi 4446}#
                    #{then 12403}#
                    #{r 12393}#
                    #{w 12394}#
                    #{mod 12396}#)
                  (make-struct/no-tail
                    (vector-ref %expanded-vtables 0)
                    #f)))
              #{tmp 12398}#)
            (let ((#{tmp 12664}#
                    ($sc-dispatch #{e 12392}# '(_ any any any))))
              (if #{tmp 12664}#
                (@apply
                  (lambda (#{test 12668}# #{then 12669}# #{else 12670}#)
                    (#{build-conditional 4381}#
                      #{s 12395}#
                      (#{chi 4446}#
                        #{test 12668}#
                        #{r 12393}#
                        #{w 12394}#
                        #{mod 12396}#)
                      (#{chi 4446}#
                        #{then 12669}#
                        #{r 12393}#
                        #{w 12394}#
                        #{mod 12396}#)
                      (#{chi 4446}#
                        #{else 12670}#
                        #{r 12393}#
                        #{w 12394}#
                        #{mod 12396}#)))
                  #{tmp 12664}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 12392}#)))))))
    (#{global-extend 4411}#
      'core
      'with-fluids
      (lambda (#{e 13129}#
               #{r 13130}#
               #{w 13131}#
               #{s 13132}#
               #{mod 13133}#)
        (let ((#{tmp 13135}#
                ($sc-dispatch
                  #{e 13129}#
                  '(_ #(each (any any)) any . each-any))))
          (if #{tmp 13135}#
            (@apply
              (lambda (#{fluid 13139}#
                       #{val 13140}#
                       #{b 13141}#
                       #{b* 13142}#)
                (#{build-dynlet 4382}#
                  #{s 13132}#
                  (map (lambda (#{x 13235}#)
                         (#{chi 4446}#
                           #{x 13235}#
                           #{r 13130}#
                           #{w 13131}#
                           #{mod 13133}#))
                       #{fluid 13139}#)
                  (map (lambda (#{x 13317}#)
                         (#{chi 4446}#
                           #{x 13317}#
                           #{r 13130}#
                           #{w 13131}#
                           #{mod 13133}#))
                       #{val 13140}#)
                  (#{chi-body 4450}#
                    (cons #{b 13141}# #{b* 13142}#)
                    (let ((#{x 13410}#
                            (begin
                              (if (if (pair? #{e 13129}#) #{s 13132}# #f)
                                (set-source-properties!
                                  #{e 13129}#
                                  #{s 13132}#))
                              #{e 13129}#)))
                      (if (if (null? (car #{w 13131}#))
                            (null? (cdr #{w 13131}#))
                            #f)
                        #{x 13410}#
                        (if (if (vector? #{x 13410}#)
                              (if (= (vector-length #{x 13410}#) 4)
                                (eq? (vector-ref #{x 13410}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 13442}#
                                  (vector-ref #{x 13410}# 1))
                                (#{wrap 13443}#
                                  (let ((#{w2 13451}#
                                          (vector-ref #{x 13410}# 2)))
                                    (let ((#{m1 13452}# (car #{w 13131}#))
                                          (#{s1 13453}# (cdr #{w 13131}#)))
                                      (if (null? #{m1 13452}#)
                                        (if (null? #{s1 13453}#)
                                          #{w2 13451}#
                                          (cons (car #{w2 13451}#)
                                                (let ((#{m2 13468}#
                                                        (cdr #{w2 13451}#)))
                                                  (if (null? #{m2 13468}#)
                                                    #{s1 13453}#
                                                    (append
                                                      #{s1 13453}#
                                                      #{m2 13468}#)))))
                                        (cons (let ((#{m2 13476}#
                                                      (car #{w2 13451}#)))
                                                (if (null? #{m2 13476}#)
                                                  #{m1 13452}#
                                                  (append
                                                    #{m1 13452}#
                                                    #{m2 13476}#)))
                                              (let ((#{m2 13484}#
                                                      (cdr #{w2 13451}#)))
                                                (if (null? #{m2 13484}#)
                                                  #{s1 13453}#
                                                  (append
                                                    #{s1 13453}#
                                                    #{m2 13484}#))))))))
                                (#{module 13444}# (vector-ref #{x 13410}# 3)))
                            (vector
                              'syntax-object
                              #{expression 13442}#
                              #{wrap 13443}#
                              #{module 13444}#))
                          (if (null? #{x 13410}#)
                            #{x 13410}#
                            (vector
                              'syntax-object
                              #{x 13410}#
                              #{w 13131}#
                              #{mod 13133}#)))))
                    #{r 13130}#
                    #{w 13131}#
                    #{mod 13133}#)))
              #{tmp 13135}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{e 13129}#)))))
    (module-define!
      (current-module)
      'begin
      (make-syntax-transformer 'begin 'begin '()))
    (module-define!
      (current-module)
      'define
      (make-syntax-transformer 'define 'define '()))
    (module-define!
      (current-module)
      'define-syntax
      (make-syntax-transformer
        'define-syntax
        'define-syntax
        '()))
    (module-define!
      (current-module)
      'define-syntax-parameter
      (make-syntax-transformer
        'define-syntax-parameter
        'define-syntax-parameter
        '()))
    (module-define!
      (current-module)
      'eval-when
      (make-syntax-transformer
        'eval-when
        'eval-when
        '()))
    (#{global-extend 4411}#
      'core
      'syntax-case
      (letrec*
        ((#{convert-pattern 13788}#
           (lambda (#{pattern 15444}# #{keys 15445}#)
             (letrec*
               ((#{cvt* 15446}#
                  (lambda (#{p* 16245}# #{n 16246}# #{ids 16247}#)
                    (if (not (pair? #{p* 16245}#))
                      (#{cvt 15448}#
                        #{p* 16245}#
                        #{n 16246}#
                        #{ids 16247}#)
                      (call-with-values
                        (lambda ()
                          (#{cvt* 15446}#
                            (cdr #{p* 16245}#)
                            #{n 16246}#
                            #{ids 16247}#))
                        (lambda (#{y 16250}# #{ids 16251}#)
                          (call-with-values
                            (lambda ()
                              (#{cvt 15448}#
                                (car #{p* 16245}#)
                                #{n 16246}#
                                #{ids 16251}#))
                            (lambda (#{x 16254}# #{ids 16255}#)
                              (values
                                (cons #{x 16254}# #{y 16250}#)
                                #{ids 16255}#))))))))
                (#{v-reverse 15447}#
                  (lambda (#{x 16256}#)
                    (letrec*
                      ((#{loop 16257}#
                         (lambda (#{r 16358}# #{x 16359}#)
                           (if (not (pair? #{x 16359}#))
                             (values #{r 16358}# #{x 16359}#)
                             (#{loop 16257}#
                               (cons (car #{x 16359}#) #{r 16358}#)
                               (cdr #{x 16359}#))))))
                      (#{loop 16257}# '() #{x 16256}#))))
                (#{cvt 15448}#
                  (lambda (#{p 15451}# #{n 15452}# #{ids 15453}#)
                    (if (if (symbol? #{p 15451}#)
                          #t
                          (if (if (vector? #{p 15451}#)
                                (if (= (vector-length #{p 15451}#) 4)
                                  (eq? (vector-ref #{p 15451}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{p 15451}# 1))
                            #f))
                      (if (#{bound-id-member? 4438}#
                            #{p 15451}#
                            #{keys 15445}#)
                        (values
                          (vector 'free-id #{p 15451}#)
                          #{ids 15453}#)
                        (if (#{free-id=? 4434}#
                              #{p 15451}#
                              '#(syntax-object
                                 _
                                 ((top)
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(p n ids)
                                    #((top) (top) (top))
                                    #("i3850" "i3851" "i3852"))
                                  #(ribcage
                                    (cvt v-reverse cvt*)
                                    ((top) (top) (top))
                                    ("i3823" "i3821" "i3819"))
                                  #(ribcage
                                    #(pattern keys)
                                    #((top) (top))
                                    #("i3817" "i3818"))
                                  #(ribcage
                                    (gen-syntax-case
                                      gen-clause
                                      build-dispatch-call
                                      convert-pattern)
                                    ((top) (top) (top) (top))
                                    ("i3813" "i3811" "i3809" "i3807"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      chi-lambda-case
                                      lambda*-formals
                                      chi-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      chi-void
                                      eval-local-transformer
                                      chi-local-syntax
                                      chi-body
                                      chi-macro
                                      chi-call
                                      chi-expr
                                      chi
                                      syntax-type
                                      chi-when-list
                                      chi-install-global
                                      chi-top-sequence
                                      chi-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      resolve-identifier
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-primcall
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-call
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      gensym-hook
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-seq
                                      make-primcall
                                      make-call
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("i471"
                                     "i469"
                                     "i467"
                                     "i465"
                                     "i463"
                                     "i461"
                                     "i459"
                                     "i457"
                                     "i455"
                                     "i453"
                                     "i451"
                                     "i449"
                                     "i447"
                                     "i445"
                                     "i443"
                                     "i441"
                                     "i439"
                                     "i437"
                                     "i435"
                                     "i433"
                                     "i431"
                                     "i429"
                                     "i427"
                                     "i425"
                                     "i423"
                                     "i421"
                                     "i419"
                                     "i417"
                                     "i415"
                                     "i413"
                                     "i411"
                                     "i409"
                                     "i407"
                                     "i405"
                                     "i403"
                                     "i401"
                                     "i400"
                                     "i398"
                                     "i395"
                                     "i394"
                                     "i393"
                                     "i391"
                                     "i390"
                                     "i388"
                                     "i386"
                                     "i384"
                                     "i382"
                                     "i380"
                                     "i378"
                                     "i376"
                                     "i374"
                                     "i371"
                                     "i369"
                                     "i368"
                                     "i366"
                                     "i364"
                                     "i362"
                                     "i360"
                                     "i359"
                                     "i358"
                                     "i357"
                                     "i355"
                                     "i354"
                                     "i351"
                                     "i349"
                                     "i347"
                                     "i345"
                                     "i343"
                                     "i341"
                                     "i340"
                                     "i339"
                                     "i337"
                                     "i335"
                                     "i334"
                                     "i331"
                                     "i330"
                                     "i328"
                                     "i326"
                                     "i324"
                                     "i322"
                                     "i320"
                                     "i318"
                                     "i316"
                                     "i314"
                                     "i312"
                                     "i309"
                                     "i307"
                                     "i305"
                                     "i303"
                                     "i301"
                                     "i299"
                                     "i297"
                                     "i295"
                                     "i293"
                                     "i291"
                                     "i289"
                                     "i287"
                                     "i285"
                                     "i283"
                                     "i281"
                                     "i279"
                                     "i277"
                                     "i275"
                                     "i273"
                                     "i271"
                                     "i269"
                                     "i267"
                                     "i265"
                                     "i263"
                                     "i262"
                                     "i259"
                                     "i257"
                                     "i256"
                                     "i255"
                                     "i254"
                                     "i253"
                                     "i251"
                                     "i249"
                                     "i247"
                                     "i244"
                                     "i242"
                                     "i240"
                                     "i238"
                                     "i236"
                                     "i234"
                                     "i232"
                                     "i230"
                                     "i228"
                                     "i226"
                                     "i224"
                                     "i222"
                                     "i220"
                                     "i218"
                                     "i216"
                                     "i214"
                                     "i212"
                                     "i210"
                                     "i208"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("i46" "i45" "i44"))
                                  #(ribcage () () ()))
                                 (hygiene guile)))
                          (values '_ #{ids 15453}#)
                          (values
                            'any
                            (cons (cons #{p 15451}# #{n 15452}#)
                                  #{ids 15453}#))))
                      (let ((#{tmp 15585}#
                              ($sc-dispatch #{p 15451}# '(any any))))
                        (if (if #{tmp 15585}#
                              (@apply
                                (lambda (#{x 15589}# #{dots 15590}#)
                                  (if (if (if (vector? #{dots 15590}#)
                                            (if (= (vector-length
                                                     #{dots 15590}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{dots 15590}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{dots 15590}# 1))
                                        #f)
                                    (#{free-id=? 4434}#
                                      #{dots 15590}#
                                      '#(syntax-object
                                         ...
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i2341"))
                                          #(ribcage
                                            (lambda-var-list
                                              gen-var
                                              strip
                                              chi-lambda-case
                                              lambda*-formals
                                              chi-simple-lambda
                                              lambda-formals
                                              ellipsis?
                                              chi-void
                                              eval-local-transformer
                                              chi-local-syntax
                                              chi-body
                                              chi-macro
                                              chi-call
                                              chi-expr
                                              chi
                                              syntax-type
                                              chi-when-list
                                              chi-install-global
                                              chi-top-sequence
                                              chi-sequence
                                              source-wrap
                                              wrap
                                              bound-id-member?
                                              distinct-bound-ids?
                                              valid-bound-ids?
                                              bound-id=?
                                              free-id=?
                                              resolve-identifier
                                              id-var-name
                                              same-marks?
                                              join-marks
                                              join-wraps
                                              smart-append
                                              make-binding-wrap
                                              extend-ribcage!
                                              make-empty-ribcage
                                              new-mark
                                              anti-mark
                                              the-anti-mark
                                              top-marked?
                                              top-wrap
                                              empty-wrap
                                              set-ribcage-labels!
                                              set-ribcage-marks!
                                              set-ribcage-symnames!
                                              ribcage-labels
                                              ribcage-marks
                                              ribcage-symnames
                                              ribcage?
                                              make-ribcage
                                              gen-labels
                                              gen-label
                                              make-rename
                                              rename-marks
                                              rename-new
                                              rename-old
                                              subst-rename?
                                              wrap-subst
                                              wrap-marks
                                              make-wrap
                                              id-sym-name&marks
                                              id-sym-name
                                              id?
                                              nonsymbol-id?
                                              global-extend
                                              macros-only-env
                                              extend-var-env
                                              extend-env
                                              null-env
                                              binding-value
                                              binding-type
                                              make-binding
                                              arg-check
                                              source-annotation
                                              no-source
                                              set-syntax-object-module!
                                              set-syntax-object-wrap!
                                              set-syntax-object-expression!
                                              syntax-object-module
                                              syntax-object-wrap
                                              syntax-object-expression
                                              syntax-object?
                                              make-syntax-object
                                              build-lexical-var
                                              build-letrec
                                              build-named-let
                                              build-let
                                              build-sequence
                                              build-data
                                              build-primref
                                              build-primcall
                                              build-lambda-case
                                              build-case-lambda
                                              build-simple-lambda
                                              build-global-definition
                                              build-global-assignment
                                              build-global-reference
                                              analyze-variable
                                              build-lexical-assignment
                                              build-lexical-reference
                                              build-dynlet
                                              build-conditional
                                              build-call
                                              build-void
                                              maybe-name-value!
                                              decorate-source
                                              get-global-definition-hook
                                              put-global-definition-hook
                                              gensym-hook
                                              local-eval-hook
                                              top-level-eval-hook
                                              fx<
                                              fx=
                                              fx-
                                              fx+
                                              set-lambda-meta!
                                              lambda-meta
                                              lambda?
                                              make-dynlet
                                              make-letrec
                                              make-let
                                              make-lambda-case
                                              make-lambda
                                              make-seq
                                              make-primcall
                                              make-call
                                              make-conditional
                                              make-toplevel-define
                                              make-toplevel-set
                                              make-toplevel-ref
                                              make-module-set
                                              make-module-ref
                                              make-lexical-set
                                              make-lexical-ref
                                              make-primitive-ref
                                              make-const
                                              make-void)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i471"
                                             "i469"
                                             "i467"
                                             "i465"
                                             "i463"
                                             "i461"
                                             "i459"
                                             "i457"
                                             "i455"
                                             "i453"
                                             "i451"
                                             "i449"
                                             "i447"
                                             "i445"
                                             "i443"
                                             "i441"
                                             "i439"
                                             "i437"
                                             "i435"
                                             "i433"
                                             "i431"
                                             "i429"
                                             "i427"
                                             "i425"
                                             "i423"
                                             "i421"
                                             "i419"
                                             "i417"
                                             "i415"
                                             "i413"
                                             "i411"
                                             "i409"
                                             "i407"
                                             "i405"
                                             "i403"
                                             "i401"
                                             "i400"
                                             "i398"
                                             "i395"
                                             "i394"
                                             "i393"
                                             "i391"
                                             "i390"
                                             "i388"
                                             "i386"
                                             "i384"
                                             "i382"
                                             "i380"
                                             "i378"
                                             "i376"
                                             "i374"
                                             "i371"
                                             "i369"
                                             "i368"
                                             "i366"
                                             "i364"
                                             "i362"
                                             "i360"
                                             "i359"
                                             "i358"
                                             "i357"
                                             "i355"
                                             "i354"
                                             "i351"
                                             "i349"
                                             "i347"
                                             "i345"
                                             "i343"
                                             "i341"
                                             "i340"
                                             "i339"
                                             "i337"
                                             "i335"
                                             "i334"
                                             "i331"
                                             "i330"
                                             "i328"
                                             "i326"
                                             "i324"
                                             "i322"
                                             "i320"
                                             "i318"
                                             "i316"
                                             "i314"
                                             "i312"
                                             "i309"
                                             "i307"
                                             "i305"
                                             "i303"
                                             "i301"
                                             "i299"
                                             "i297"
                                             "i295"
                                             "i293"
                                             "i291"
                                             "i289"
                                             "i287"
                                             "i285"
                                             "i283"
                                             "i281"
                                             "i279"
                                             "i277"
                                             "i275"
                                             "i273"
                                             "i271"
                                             "i269"
                                             "i267"
                                             "i265"
                                             "i263"
                                             "i262"
                                             "i259"
                                             "i257"
                                             "i256"
                                             "i255"
                                             "i254"
                                             "i253"
                                             "i251"
                                             "i249"
                                             "i247"
                                             "i244"
                                             "i242"
                                             "i240"
                                             "i238"
                                             "i236"
                                             "i234"
                                             "i232"
                                             "i230"
                                             "i228"
                                             "i226"
                                             "i224"
                                             "i222"
                                             "i220"
                                             "i218"
                                             "i216"
                                             "i214"
                                             "i212"
                                             "i210"
                                             "i208"))
                                          #(ribcage
                                            (define-structure
                                              define-expansion-accessors
                                              define-expansion-constructors)
                                            ((top) (top) (top))
                                            ("i46" "i45" "i44"))
                                          #(ribcage () () ()))
                                         (hygiene guile)))
                                    #f))
                                #{tmp 15585}#)
                              #f)
                          (@apply
                            (lambda (#{x 15629}# #{dots 15630}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt 15448}#
                                    #{x 15629}#
                                    (#{1+}# #{n 15452}#)
                                    #{ids 15453}#))
                                (lambda (#{p 15631}# #{ids 15632}#)
                                  (values
                                    (if (eq? #{p 15631}# 'any)
                                      'each-any
                                      (vector 'each #{p 15631}#))
                                    #{ids 15632}#))))
                            #{tmp 15585}#)
                          (let ((#{tmp 15633}#
                                  ($sc-dispatch #{p 15451}# '(any any . any))))
                            (if (if #{tmp 15633}#
                                  (@apply
                                    (lambda (#{x 15637}#
                                             #{dots 15638}#
                                             #{ys 15639}#)
                                      (if (if (if (vector? #{dots 15638}#)
                                                (if (= (vector-length
                                                         #{dots 15638}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{dots 15638}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (symbol?
                                              (vector-ref #{dots 15638}# 1))
                                            #f)
                                        (#{free-id=? 4434}#
                                          #{dots 15638}#
                                          '#(syntax-object
                                             ...
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i2341"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  chi-lambda-case
                                                  lambda*-formals
                                                  chi-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  chi-void
                                                  eval-local-transformer
                                                  chi-local-syntax
                                                  chi-body
                                                  chi-macro
                                                  chi-call
                                                  chi-expr
                                                  chi
                                                  syntax-type
                                                  chi-when-list
                                                  chi-install-global
                                                  chi-top-sequence
                                                  chi-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  resolve-identifier
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-primcall
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-call
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-seq
                                                  make-primcall
                                                  make-call
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i471"
                                                 "i469"
                                                 "i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i400"
                                                 "i398"
                                                 "i395"
                                                 "i394"
                                                 "i393"
                                                 "i391"
                                                 "i390"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i371"
                                                 "i369"
                                                 "i368"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i359"
                                                 "i358"
                                                 "i357"
                                                 "i355"
                                                 "i354"
                                                 "i351"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i340"
                                                 "i339"
                                                 "i337"
                                                 "i335"
                                                 "i334"
                                                 "i331"
                                                 "i330"
                                                 "i328"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i309"
                                                 "i307"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i262"
                                                 "i259"
                                                 "i257"
                                                 "i256"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i244"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44"))
                                              #(ribcage () () ()))
                                             (hygiene guile)))
                                        #f))
                                    #{tmp 15633}#)
                                  #f)
                              (@apply
                                (lambda (#{x 15678}#
                                         #{dots 15679}#
                                         #{ys 15680}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt* 15446}#
                                        #{ys 15680}#
                                        #{n 15452}#
                                        #{ids 15453}#))
                                    (lambda (#{ys 16165}# #{ids 16166}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 15448}#
                                            #{x 15678}#
                                            (#{1+}# #{n 15452}#)
                                            #{ids 16166}#))
                                        (lambda (#{x 16167}# #{ids 16168}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{v-reverse 15447}#
                                                #{ys 16165}#))
                                            (lambda (#{ys 16204}# #{e 16205}#)
                                              (values
                                                (vector
                                                  'each+
                                                  #{x 16167}#
                                                  #{ys 16204}#
                                                  #{e 16205}#)
                                                #{ids 16168}#))))))))
                                #{tmp 15633}#)
                              (let ((#{tmp 16206}#
                                      ($sc-dispatch #{p 15451}# '(any . any))))
                                (if #{tmp 16206}#
                                  (@apply
                                    (lambda (#{x 16210}# #{y 16211}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 15448}#
                                            #{y 16211}#
                                            #{n 15452}#
                                            #{ids 15453}#))
                                        (lambda (#{y 16212}# #{ids 16213}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 15448}#
                                                #{x 16210}#
                                                #{n 15452}#
                                                #{ids 16213}#))
                                            (lambda (#{x 16214}# #{ids 16215}#)
                                              (values
                                                (cons #{x 16214}# #{y 16212}#)
                                                #{ids 16215}#))))))
                                    #{tmp 16206}#)
                                  (let ((#{tmp 16216}#
                                          ($sc-dispatch #{p 15451}# '())))
                                    (if #{tmp 16216}#
                                      (@apply
                                        (lambda () (values '() #{ids 15453}#))
                                        #{tmp 16216}#)
                                      (let ((#{tmp 16220}#
                                              ($sc-dispatch
                                                #{p 15451}#
                                                '#(vector each-any))))
                                        (if #{tmp 16220}#
                                          (@apply
                                            (lambda (#{x 16224}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt 15448}#
                                                    #{x 16224}#
                                                    #{n 15452}#
                                                    #{ids 15453}#))
                                                (lambda (#{p 16225}#
                                                         #{ids 16226}#)
                                                  (values
                                                    (vector
                                                      'vector
                                                      #{p 16225}#)
                                                    #{ids 16226}#))))
                                            #{tmp 16220}#)
                                          (values
                                            (vector
                                              'atom
                                              (#{strip 4459}#
                                                #{p 15451}#
                                                '(())))
                                            #{ids 15453}#)))))))))))))))
               (#{cvt 15448}# #{pattern 15444}# 0 '()))))
         (#{build-dispatch-call 13789}#
           (lambda (#{pvars 16360}#
                    #{exp 16361}#
                    #{y 16362}#
                    #{r 16363}#
                    #{mod 16364}#)
             (let ((#{ids 16365}# (map car #{pvars 16360}#)))
               (begin
                 (map cdr #{pvars 16360}#)
                 (let ((#{labels 16367}#
                         (#{gen-labels 4416}# #{ids 16365}#))
                       (#{new-vars 16368}#
                         (map #{gen-var 4460}# #{ids 16365}#)))
                   (#{build-primcall 4392}#
                     #f
                     'apply
                     (list (#{build-simple-lambda 4389}#
                             #f
                             (map syntax->datum #{ids 16365}#)
                             #f
                             #{new-vars 16368}#
                             '()
                             (#{chi 4446}#
                               #{exp 16361}#
                               (#{extend-env 4408}#
                                 #{labels 16367}#
                                 (map (lambda (#{var 16700}# #{level 16701}#)
                                        (cons 'syntax
                                              (cons #{var 16700}#
                                                    #{level 16701}#)))
                                      #{new-vars 16368}#
                                      (map cdr #{pvars 16360}#))
                                 #{r 16363}#)
                               (#{make-binding-wrap 4427}#
                                 #{ids 16365}#
                                 #{labels 16367}#
                                 '(()))
                               #{mod 16364}#))
                           #{y 16362}#)))))))
         (#{gen-clause 13790}#
           (lambda (#{x 15038}#
                    #{keys 15039}#
                    #{clauses 15040}#
                    #{r 15041}#
                    #{pat 15042}#
                    #{fender 15043}#
                    #{exp 15044}#
                    #{mod 15045}#)
             (call-with-values
               (lambda ()
                 (#{convert-pattern 13788}#
                   #{pat 15042}#
                   #{keys 15039}#))
               (lambda (#{p 15183}# #{pvars 15184}#)
                 (if (not (#{distinct-bound-ids? 4437}#
                            (map car #{pvars 15184}#)))
                   (syntax-violation
                     'syntax-case
                     "duplicate pattern variable"
                     #{pat 15042}#)
                   (if (not (and-map
                              (lambda (#{x 15293}#)
                                (not (let ((#{x 15297}# (car #{x 15293}#)))
                                       (if (if (if (vector? #{x 15297}#)
                                                 (if (= (vector-length
                                                          #{x 15297}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 15297}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (symbol?
                                               (vector-ref #{x 15297}# 1))
                                             #f)
                                         (#{free-id=? 4434}#
                                           #{x 15297}#
                                           '#(syntax-object
                                              ...
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i2341"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   chi-lambda-case
                                                   lambda*-formals
                                                   chi-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   chi-void
                                                   eval-local-transformer
                                                   chi-local-syntax
                                                   chi-body
                                                   chi-macro
                                                   chi-call
                                                   chi-expr
                                                   chi
                                                   syntax-type
                                                   chi-when-list
                                                   chi-install-global
                                                   chi-top-sequence
                                                   chi-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   resolve-identifier
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-primcall
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-call
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-seq
                                                   make-primcall
                                                   make-call
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i471"
                                                  "i469"
                                                  "i467"
                                                  "i465"
                                                  "i463"
                                                  "i461"
                                                  "i459"
                                                  "i457"
                                                  "i455"
                                                  "i453"
                                                  "i451"
                                                  "i449"
                                                  "i447"
                                                  "i445"
                                                  "i443"
                                                  "i441"
                                                  "i439"
                                                  "i437"
                                                  "i435"
                                                  "i433"
                                                  "i431"
                                                  "i429"
                                                  "i427"
                                                  "i425"
                                                  "i423"
                                                  "i421"
                                                  "i419"
                                                  "i417"
                                                  "i415"
                                                  "i413"
                                                  "i411"
                                                  "i409"
                                                  "i407"
                                                  "i405"
                                                  "i403"
                                                  "i401"
                                                  "i400"
                                                  "i398"
                                                  "i395"
                                                  "i394"
                                                  "i393"
                                                  "i391"
                                                  "i390"
                                                  "i388"
                                                  "i386"
                                                  "i384"
                                                  "i382"
                                                  "i380"
                                                  "i378"
                                                  "i376"
                                                  "i374"
                                                  "i371"
                                                  "i369"
                                                  "i368"
                                                  "i366"
                                                  "i364"
                                                  "i362"
                                                  "i360"
                                                  "i359"
                                                  "i358"
                                                  "i357"
                                                  "i355"
                                                  "i354"
                                                  "i351"
                                                  "i349"
                                                  "i347"
                                                  "i345"
                                                  "i343"
                                                  "i341"
                                                  "i340"
                                                  "i339"
                                                  "i337"
                                                  "i335"
                                                  "i334"
                                                  "i331"
                                                  "i330"
                                                  "i328"
                                                  "i326"
                                                  "i324"
                                                  "i322"
                                                  "i320"
                                                  "i318"
                                                  "i316"
                                                  "i314"
                                                  "i312"
                                                  "i309"
                                                  "i307"
                                                  "i305"
                                                  "i303"
                                                  "i301"
                                                  "i299"
                                                  "i297"
                                                  "i295"
                                                  "i293"
                                                  "i291"
                                                  "i289"
                                                  "i287"
                                                  "i285"
                                                  "i283"
                                                  "i281"
                                                  "i279"
                                                  "i277"
                                                  "i275"
                                                  "i273"
                                                  "i271"
                                                  "i269"
                                                  "i267"
                                                  "i265"
                                                  "i263"
                                                  "i262"
                                                  "i259"
                                                  "i257"
                                                  "i256"
                                                  "i255"
                                                  "i254"
                                                  "i253"
                                                  "i251"
                                                  "i249"
                                                  "i247"
                                                  "i244"
                                                  "i242"
                                                  "i240"
                                                  "i238"
                                                  "i236"
                                                  "i234"
                                                  "i232"
                                                  "i230"
                                                  "i228"
                                                  "i226"
                                                  "i224"
                                                  "i222"
                                                  "i220"
                                                  "i218"
                                                  "i216"
                                                  "i214"
                                                  "i212"
                                                  "i210"
                                                  "i208"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("i46" "i45" "i44"))
                                               #(ribcage () () ()))
                                              (hygiene guile)))
                                         #f))))
                              #{pvars 15184}#))
                     (syntax-violation
                       'syntax-case
                       "misplaced ellipsis"
                       #{pat 15042}#)
                     (let ((#{y 15322}#
                             (gensym
                               (string-append (symbol->string 'tmp) " "))))
                       (let ((#{fun-exp 15327}#
                               (let ((#{req 15336}# (list 'tmp))
                                     (#{vars 15338}# (list #{y 15322}#))
                                     (#{exp 15340}#
                                       (let ((#{y 15369}#
                                               (make-struct/no-tail
                                                 (vector-ref
                                                   %expanded-vtables
                                                   3)
                                                 #f
                                                 'tmp
                                                 #{y 15322}#)))
                                         (let ((#{test-exp 15373}#
                                                 (let ((#{tmp 15382}#
                                                         ($sc-dispatch
                                                           #{fender 15043}#
                                                           '#(atom #t))))
                                                   (if #{tmp 15382}#
                                                     (@apply
                                                       (lambda () #{y 15369}#)
                                                       #{tmp 15382}#)
                                                     (let ((#{then-exp 15400}#
                                                             (#{build-dispatch-call 13789}#
                                                               #{pvars 15184}#
                                                               #{fender 15043}#
                                                               #{y 15369}#
                                                               #{r 15041}#
                                                               #{mod 15045}#))
                                                           (#{else-exp 15401}#
                                                             (make-struct/no-tail
                                                               (vector-ref
                                                                 %expanded-vtables
                                                                 1)
                                                               #f
                                                               #f)))
                                                       (make-struct/no-tail
                                                         (vector-ref
                                                           %expanded-vtables
                                                           10)
                                                         #f
                                                         #{y 15369}#
                                                         #{then-exp 15400}#
                                                         #{else-exp 15401}#)))))
                                               (#{then-exp 15374}#
                                                 (#{build-dispatch-call 13789}#
                                                   #{pvars 15184}#
                                                   #{exp 15044}#
                                                   #{y 15369}#
                                                   #{r 15041}#
                                                   #{mod 15045}#))
                                               (#{else-exp 15375}#
                                                 (#{gen-syntax-case 13791}#
                                                   #{x 15038}#
                                                   #{keys 15039}#
                                                   #{clauses 15040}#
                                                   #{r 15041}#
                                                   #{mod 15045}#)))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 10)
                                             #f
                                             #{test-exp 15373}#
                                             #{then-exp 15374}#
                                             #{else-exp 15375}#)))))
                                 (let ((#{body 15345}#
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 15)
                                           #f
                                           #{req 15336}#
                                           #f
                                           #f
                                           #f
                                           '()
                                           #{vars 15338}#
                                           #{exp 15340}#
                                           #f)))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     '()
                                     #{body 15345}#))))
                             (#{arg-exps 15328}#
                               (list (if (eq? #{p 15183}# 'any)
                                       (let ((#{args 15423}#
                                               (list #{x 15038}#)))
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 12)
                                           #f
                                           'list
                                           #{args 15423}#))
                                       (let ((#{args 15432}#
                                               (list #{x 15038}#
                                                     (make-struct/no-tail
                                                       (vector-ref
                                                         %expanded-vtables
                                                         1)
                                                       #f
                                                       #{p 15183}#))))
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 12)
                                           #f
                                           '$sc-dispatch
                                           #{args 15432}#))))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #f
                           #{fun-exp 15327}#
                           #{arg-exps 15328}#)))))))))
         (#{gen-syntax-case 13791}#
           (lambda (#{x 14535}#
                    #{keys 14536}#
                    #{clauses 14537}#
                    #{r 14538}#
                    #{mod 14539}#)
             (if (null? #{clauses 14537}#)
               (let ((#{args 14545}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #f)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               "source expression failed to match any pattern")
                             #{x 14535}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 12)
                   #f
                   'syntax-violation
                   #{args 14545}#))
               (let ((#{tmp 14564}# (car #{clauses 14537}#)))
                 (let ((#{tmp 14565}#
                         ($sc-dispatch #{tmp 14564}# '(any any))))
                   (if #{tmp 14565}#
                     (@apply
                       (lambda (#{pat 14567}# #{exp 14568}#)
                         (if (if (if (symbol? #{pat 14567}#)
                                   #t
                                   (if (if (vector? #{pat 14567}#)
                                         (if (= (vector-length #{pat 14567}#)
                                                4)
                                           (eq? (vector-ref #{pat 14567}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (symbol? (vector-ref #{pat 14567}# 1))
                                     #f))
                               (and-map
                                 (lambda (#{x 14595}#)
                                   (not (#{free-id=? 4434}#
                                          #{pat 14567}#
                                          #{x 14595}#)))
                                 (cons '#(syntax-object
                                          ...
                                          ((top)
                                           #(ribcage
                                             #(pat exp)
                                             #((top) (top))
                                             #("i4010" "i4011"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x keys clauses r mod)
                                             #((top) (top) (top) (top) (top))
                                             #("i4000"
                                               "i4001"
                                               "i4002"
                                               "i4003"
                                               "i4004"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3813" "i3811" "i3809" "i3807"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               chi-lambda-case
                                               lambda*-formals
                                               chi-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               chi-void
                                               eval-local-transformer
                                               chi-local-syntax
                                               chi-body
                                               chi-macro
                                               chi-call
                                               chi-expr
                                               chi
                                               syntax-type
                                               chi-when-list
                                               chi-install-global
                                               chi-top-sequence
                                               chi-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               resolve-identifier
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-primcall
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-call
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-seq
                                               make-primcall
                                               make-call
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i471"
                                              "i469"
                                              "i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i400"
                                              "i398"
                                              "i395"
                                              "i394"
                                              "i393"
                                              "i391"
                                              "i390"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i371"
                                              "i369"
                                              "i368"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i359"
                                              "i358"
                                              "i357"
                                              "i355"
                                              "i354"
                                              "i351"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i340"
                                              "i339"
                                              "i337"
                                              "i335"
                                              "i334"
                                              "i331"
                                              "i330"
                                              "i328"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i309"
                                              "i307"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i262"
                                              "i259"
                                              "i257"
                                              "i256"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i244"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44"))
                                           #(ribcage () () ()))
                                          (hygiene guile))
                                       #{keys 14536}#))
                               #f)
                           (if (#{free-id=? 4434}#
                                 '#(syntax-object
                                    pad
                                    ((top)
                                     #(ribcage
                                       #(pat exp)
                                       #((top) (top))
                                       #("i4010" "i4011"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x keys clauses r mod)
                                       #((top) (top) (top) (top) (top))
                                       #("i4000"
                                         "i4001"
                                         "i4002"
                                         "i4003"
                                         "i4004"))
                                     #(ribcage
                                       (gen-syntax-case
                                         gen-clause
                                         build-dispatch-call
                                         convert-pattern)
                                       ((top) (top) (top) (top))
                                       ("i3813" "i3811" "i3809" "i3807"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         chi-lambda-case
                                         lambda*-formals
                                         chi-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         chi-void
                                         eval-local-transformer
                                         chi-local-syntax
                                         chi-body
                                         chi-macro
                                         chi-call
                                         chi-expr
                                         chi
                                         syntax-type
                                         chi-when-list
                                         chi-install-global
                                         chi-top-sequence
                                         chi-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         resolve-identifier
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-primcall
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-call
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-seq
                                         make-primcall
                                         make-call
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i471"
                                        "i469"
                                        "i467"
                                        "i465"
                                        "i463"
                                        "i461"
                                        "i459"
                                        "i457"
                                        "i455"
                                        "i453"
                                        "i451"
                                        "i449"
                                        "i447"
                                        "i445"
                                        "i443"
                                        "i441"
                                        "i439"
                                        "i437"
                                        "i435"
                                        "i433"
                                        "i431"
                                        "i429"
                                        "i427"
                                        "i425"
                                        "i423"
                                        "i421"
                                        "i419"
                                        "i417"
                                        "i415"
                                        "i413"
                                        "i411"
                                        "i409"
                                        "i407"
                                        "i405"
                                        "i403"
                                        "i401"
                                        "i400"
                                        "i398"
                                        "i395"
                                        "i394"
                                        "i393"
                                        "i391"
                                        "i390"
                                        "i388"
                                        "i386"
                                        "i384"
                                        "i382"
                                        "i380"
                                        "i378"
                                        "i376"
                                        "i374"
                                        "i371"
                                        "i369"
                                        "i368"
                                        "i366"
                                        "i364"
                                        "i362"
                                        "i360"
                                        "i359"
                                        "i358"
                                        "i357"
                                        "i355"
                                        "i354"
                                        "i351"
                                        "i349"
                                        "i347"
                                        "i345"
                                        "i343"
                                        "i341"
                                        "i340"
                                        "i339"
                                        "i337"
                                        "i335"
                                        "i334"
                                        "i331"
                                        "i330"
                                        "i328"
                                        "i326"
                                        "i324"
                                        "i322"
                                        "i320"
                                        "i318"
                                        "i316"
                                        "i314"
                                        "i312"
                                        "i309"
                                        "i307"
                                        "i305"
                                        "i303"
                                        "i301"
                                        "i299"
                                        "i297"
                                        "i295"
                                        "i293"
                                        "i291"
                                        "i289"
                                        "i287"
                                        "i285"
                                        "i283"
                                        "i281"
                                        "i279"
                                        "i277"
                                        "i275"
                                        "i273"
                                        "i271"
                                        "i269"
                                        "i267"
                                        "i265"
                                        "i263"
                                        "i262"
                                        "i259"
                                        "i257"
                                        "i256"
                                        "i255"
                                        "i254"
                                        "i253"
                                        "i251"
                                        "i249"
                                        "i247"
                                        "i244"
                                        "i242"
                                        "i240"
                                        "i238"
                                        "i236"
                                        "i234"
                                        "i232"
                                        "i230"
                                        "i228"
                                        "i226"
                                        "i224"
                                        "i222"
                                        "i220"
                                        "i218"
                                        "i216"
                                        "i214"
                                        "i212"
                                        "i210"
                                        "i208"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i46" "i45" "i44"))
                                     #(ribcage () () ()))
                                    (hygiene guile))
                                 '#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage
                                       #(pat exp)
                                       #((top) (top))
                                       #("i4010" "i4011"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x keys clauses r mod)
                                       #((top) (top) (top) (top) (top))
                                       #("i4000"
                                         "i4001"
                                         "i4002"
                                         "i4003"
                                         "i4004"))
                                     #(ribcage
                                       (gen-syntax-case
                                         gen-clause
                                         build-dispatch-call
                                         convert-pattern)
                                       ((top) (top) (top) (top))
                                       ("i3813" "i3811" "i3809" "i3807"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         chi-lambda-case
                                         lambda*-formals
                                         chi-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         chi-void
                                         eval-local-transformer
                                         chi-local-syntax
                                         chi-body
                                         chi-macro
                                         chi-call
                                         chi-expr
                                         chi
                                         syntax-type
                                         chi-when-list
                                         chi-install-global
                                         chi-top-sequence
                                         chi-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         resolve-identifier
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-primcall
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-call
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-seq
                                         make-primcall
                                         make-call
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i471"
                                        "i469"
                                        "i467"
                                        "i465"
                                        "i463"
                                        "i461"
                                        "i459"
                                        "i457"
                                        "i455"
                                        "i453"
                                        "i451"
                                        "i449"
                                        "i447"
                                        "i445"
                                        "i443"
                                        "i441"
                                        "i439"
                                        "i437"
                                        "i435"
                                        "i433"
                                        "i431"
                                        "i429"
                                        "i427"
                                        "i425"
                                        "i423"
                                        "i421"
                                        "i419"
                                        "i417"
                                        "i415"
                                        "i413"
                                        "i411"
                                        "i409"
                                        "i407"
                                        "i405"
                                        "i403"
                                        "i401"
                                        "i400"
                                        "i398"
                                        "i395"
                                        "i394"
                                        "i393"
                                        "i391"
                                        "i390"
                                        "i388"
                                        "i386"
                                        "i384"
                                        "i382"
                                        "i380"
                                        "i378"
                                        "i376"
                                        "i374"
                                        "i371"
                                        "i369"
                                        "i368"
                                        "i366"
                                        "i364"
                                        "i362"
                                        "i360"
                                        "i359"
                                        "i358"
                                        "i357"
                                        "i355"
                                        "i354"
                                        "i351"
                                        "i349"
                                        "i347"
                                        "i345"
                                        "i343"
                                        "i341"
                                        "i340"
                                        "i339"
                                        "i337"
                                        "i335"
                                        "i334"
                                        "i331"
                                        "i330"
                                        "i328"
                                        "i326"
                                        "i324"
                                        "i322"
                                        "i320"
                                        "i318"
                                        "i316"
                                        "i314"
                                        "i312"
                                        "i309"
                                        "i307"
                                        "i305"
                                        "i303"
                                        "i301"
                                        "i299"
                                        "i297"
                                        "i295"
                                        "i293"
                                        "i291"
                                        "i289"
                                        "i287"
                                        "i285"
                                        "i283"
                                        "i281"
                                        "i279"
                                        "i277"
                                        "i275"
                                        "i273"
                                        "i271"
                                        "i269"
                                        "i267"
                                        "i265"
                                        "i263"
                                        "i262"
                                        "i259"
                                        "i257"
                                        "i256"
                                        "i255"
                                        "i254"
                                        "i253"
                                        "i251"
                                        "i249"
                                        "i247"
                                        "i244"
                                        "i242"
                                        "i240"
                                        "i238"
                                        "i236"
                                        "i234"
                                        "i232"
                                        "i230"
                                        "i228"
                                        "i226"
                                        "i224"
                                        "i222"
                                        "i220"
                                        "i218"
                                        "i216"
                                        "i214"
                                        "i212"
                                        "i210"
                                        "i208"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i46" "i45" "i44"))
                                     #(ribcage () () ()))
                                    (hygiene guile)))
                             (#{chi 4446}#
                               #{exp 14568}#
                               #{r 14538}#
                               '(())
                               #{mod 14539}#)
                             (let ((#{labels 14681}#
                                     (list (symbol->string (gensym "i"))))
                                   (#{var 14682}#
                                     (let ((#{id 14720}#
                                             (if (if (vector? #{pat 14567}#)
                                                   (if (= (vector-length
                                                            #{pat 14567}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{pat 14567}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{pat 14567}# 1)
                                               #{pat 14567}#)))
                                       (gensym
                                         (string-append
                                           (symbol->string #{id 14720}#)
                                           " ")))))
                               (#{build-call 4380}#
                                 #f
                                 (#{build-simple-lambda 4389}#
                                   #f
                                   (list (syntax->datum #{pat 14567}#))
                                   #f
                                   (list #{var 14682}#)
                                   '()
                                   (#{chi 4446}#
                                     #{exp 14568}#
                                     (#{extend-env 4408}#
                                       #{labels 14681}#
                                       (list (cons 'syntax
                                                   (cons #{var 14682}# 0)))
                                       #{r 14538}#)
                                     (#{make-binding-wrap 4427}#
                                       (list #{pat 14567}#)
                                       #{labels 14681}#
                                       '(()))
                                     #{mod 14539}#))
                                 (list #{x 14535}#))))
                           (#{gen-clause 13790}#
                             #{x 14535}#
                             #{keys 14536}#
                             (cdr #{clauses 14537}#)
                             #{r 14538}#
                             #{pat 14567}#
                             #t
                             #{exp 14568}#
                             #{mod 14539}#)))
                       #{tmp 14565}#)
                     (let ((#{tmp 15030}#
                             ($sc-dispatch #{tmp 14564}# '(any any any))))
                       (if #{tmp 15030}#
                         (@apply
                           (lambda (#{pat 15032}#
                                    #{fender 15033}#
                                    #{exp 15034}#)
                             (#{gen-clause 13790}#
                               #{x 14535}#
                               #{keys 14536}#
                               (cdr #{clauses 14537}#)
                               #{r 14538}#
                               #{pat 15032}#
                               #{fender 15033}#
                               #{exp 15034}#
                               #{mod 14539}#))
                           #{tmp 15030}#)
                         (syntax-violation
                           'syntax-case
                           "invalid clause"
                           (car #{clauses 14537}#)))))))))))
        (lambda (#{e 13792}#
                 #{r 13793}#
                 #{w 13794}#
                 #{s 13795}#
                 #{mod 13796}#)
          (let ((#{e 13797}#
                  (let ((#{x 14446}#
                          (begin
                            (if (if (pair? #{e 13792}#) #{s 13795}# #f)
                              (set-source-properties! #{e 13792}# #{s 13795}#))
                            #{e 13792}#)))
                    (if (if (null? (car #{w 13794}#))
                          (null? (cdr #{w 13794}#))
                          #f)
                      #{x 14446}#
                      (if (if (vector? #{x 14446}#)
                            (if (= (vector-length #{x 14446}#) 4)
                              (eq? (vector-ref #{x 14446}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 14478}# (vector-ref #{x 14446}# 1))
                              (#{wrap 14479}#
                                (let ((#{w2 14487}#
                                        (vector-ref #{x 14446}# 2)))
                                  (let ((#{m1 14488}# (car #{w 13794}#))
                                        (#{s1 14489}# (cdr #{w 13794}#)))
                                    (if (null? #{m1 14488}#)
                                      (if (null? #{s1 14489}#)
                                        #{w2 14487}#
                                        (cons (car #{w2 14487}#)
                                              (let ((#{m2 14504}#
                                                      (cdr #{w2 14487}#)))
                                                (if (null? #{m2 14504}#)
                                                  #{s1 14489}#
                                                  (append
                                                    #{s1 14489}#
                                                    #{m2 14504}#)))))
                                      (cons (let ((#{m2 14512}#
                                                    (car #{w2 14487}#)))
                                              (if (null? #{m2 14512}#)
                                                #{m1 14488}#
                                                (append
                                                  #{m1 14488}#
                                                  #{m2 14512}#)))
                                            (let ((#{m2 14520}#
                                                    (cdr #{w2 14487}#)))
                                              (if (null? #{m2 14520}#)
                                                #{s1 14489}#
                                                (append
                                                  #{s1 14489}#
                                                  #{m2 14520}#))))))))
                              (#{module 14480}# (vector-ref #{x 14446}# 3)))
                          (vector
                            'syntax-object
                            #{expression 14478}#
                            #{wrap 14479}#
                            #{module 14480}#))
                        (if (null? #{x 14446}#)
                          #{x 14446}#
                          (vector
                            'syntax-object
                            #{x 14446}#
                            #{w 13794}#
                            #{mod 13796}#)))))))
            (let ((#{tmp 13798}# #{e 13797}#))
              (let ((#{tmp 13799}#
                      ($sc-dispatch
                        #{tmp 13798}#
                        '(_ any each-any . each-any))))
                (if #{tmp 13799}#
                  (@apply
                    (lambda (#{val 13851}# #{key 13852}# #{m 13853}#)
                      (if (and-map
                            (lambda (#{x 13854}#)
                              (if (if (symbol? #{x 13854}#)
                                    #t
                                    (if (if (vector? #{x 13854}#)
                                          (if (= (vector-length #{x 13854}#) 4)
                                            (eq? (vector-ref #{x 13854}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{x 13854}# 1))
                                      #f))
                                (not (if (if (if (vector? #{x 13854}#)
                                               (if (= (vector-length
                                                        #{x 13854}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 13854}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol? (vector-ref #{x 13854}# 1))
                                           #f)
                                       (#{free-id=? 4434}#
                                         #{x 13854}#
                                         '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i2341"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-call
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 resolve-identifier
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-seq
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i471"
                                                "i469"
                                                "i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i400"
                                                "i398"
                                                "i395"
                                                "i394"
                                                "i393"
                                                "i391"
                                                "i390"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i371"
                                                "i369"
                                                "i368"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i359"
                                                "i358"
                                                "i357"
                                                "i355"
                                                "i354"
                                                "i351"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i340"
                                                "i339"
                                                "i337"
                                                "i335"
                                                "i334"
                                                "i331"
                                                "i330"
                                                "i328"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i309"
                                                "i307"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i262"
                                                "i259"
                                                "i257"
                                                "i256"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i244"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44"))
                                             #(ribcage () () ()))
                                            (hygiene guile)))
                                       #f))
                                #f))
                            #{key 13852}#)
                        (let ((#{x 13919}#
                                (gensym
                                  (string-append (symbol->string 'tmp) " "))))
                          (#{build-call 4380}#
                            #{s 13795}#
                            (let ((#{req 14061}# (list 'tmp))
                                  (#{vars 14063}# (list #{x 13919}#))
                                  (#{exp 14065}#
                                    (#{gen-syntax-case 13791}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        #{x 13919}#)
                                      #{key 13852}#
                                      #{m 13853}#
                                      #{r 13793}#
                                      #{mod 13796}#)))
                              (let ((#{body 14070}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 15)
                                        #f
                                        #{req 14061}#
                                        #f
                                        #f
                                        #f
                                        '()
                                        #{vars 14063}#
                                        #{exp 14065}#
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 14)
                                  #f
                                  '()
                                  #{body 14070}#)))
                            (list (#{chi 4446}#
                                    #{val 13851}#
                                    #{r 13793}#
                                    '(())
                                    #{mod 13796}#))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          #{e 13797}#)))
                    #{tmp 13799}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp 13798}#))))))))
    (set! macroexpand
      (lambda*
        (#{x 16802}#
          #:optional
          (#{m 16803}# 'e)
          (#{esew 16804}# '(eval)))
        (#{chi-top-sequence 4442}#
          (list #{x 16802}#)
          '()
          '((top))
          #f
          #{m 16803}#
          #{esew 16804}#
          (cons 'hygiene (module-name (current-module))))))
    (set! identifier?
      (lambda (#{x 16807}#)
        (if (if (vector? #{x 16807}#)
              (if (= (vector-length #{x 16807}#) 4)
                (eq? (vector-ref #{x 16807}# 0) 'syntax-object)
                #f)
              #f)
          (symbol? (vector-ref #{x 16807}# 1))
          #f)))
    (set! datum->syntax
      (lambda (#{id 16832}# #{datum 16833}#)
        (let ((#{wrap 16838}# (vector-ref #{id 16832}# 2))
              (#{module 16839}# (vector-ref #{id 16832}# 3)))
          (vector
            'syntax-object
            #{datum 16833}#
            #{wrap 16838}#
            #{module 16839}#))))
    (set! syntax->datum
      (lambda (#{x 16846}#)
        (#{strip 4459}# #{x 16846}# '(()))))
    (set! syntax-source
      (lambda (#{x 16849}#)
        (#{source-annotation 4407}# #{x 16849}#)))
    (set! generate-temporaries
      (lambda (#{ls 17051}#)
        (begin
          (if (not (list? #{ls 17051}#))
            (syntax-violation
              'generate-temporaries
              "invalid argument"
              #{ls 17051}#))
          (let ((#{mod 17059}#
                  (cons 'hygiene (module-name (current-module)))))
            (map (lambda (#{x 17060}#)
                   (let ((#{x 17064}# (gensym)))
                     (if (if (vector? #{x 17064}#)
                           (if (= (vector-length #{x 17064}#) 4)
                             (eq? (vector-ref #{x 17064}# 0) 'syntax-object)
                             #f)
                           #f)
                       (let ((#{expression 17079}# (vector-ref #{x 17064}# 1))
                             (#{wrap 17080}#
                               (let ((#{w2 17088}# (vector-ref #{x 17064}# 2)))
                                 (cons (let ((#{m2 17095}# (car #{w2 17088}#)))
                                         (if (null? #{m2 17095}#)
                                           '(top)
                                           (append '(top) #{m2 17095}#)))
                                       (let ((#{m2 17102}# (cdr #{w2 17088}#)))
                                         (if (null? #{m2 17102}#)
                                           '()
                                           (append '() #{m2 17102}#))))))
                             (#{module 17081}# (vector-ref #{x 17064}# 3)))
                         (vector
                           'syntax-object
                           #{expression 17079}#
                           #{wrap 17080}#
                           #{module 17081}#))
                       (if (null? #{x 17064}#)
                         #{x 17064}#
                         (vector
                           'syntax-object
                           #{x 17064}#
                           '((top))
                           #{mod 17059}#)))))
                 #{ls 17051}#)))))
    (set! free-identifier=?
      (lambda (#{x 17111}# #{y 17112}#)
        (begin
          (if (not (if (if (vector? #{x 17111}#)
                         (if (= (vector-length #{x 17111}#) 4)
                           (eq? (vector-ref #{x 17111}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 17111}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{x 17111}#))
          (if (not (if (if (vector? #{y 17112}#)
                         (if (= (vector-length #{y 17112}#) 4)
                           (eq? (vector-ref #{y 17112}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 17112}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{y 17112}#))
          (#{free-id=? 4434}# #{x 17111}# #{y 17112}#))))
    (set! bound-identifier=?
      (lambda (#{x 17187}# #{y 17188}#)
        (begin
          (if (not (if (if (vector? #{x 17187}#)
                         (if (= (vector-length #{x 17187}#) 4)
                           (eq? (vector-ref #{x 17187}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 17187}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{x 17187}#))
          (if (not (if (if (vector? #{y 17188}#)
                         (if (= (vector-length #{y 17188}#) 4)
                           (eq? (vector-ref #{y 17188}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 17188}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{y 17188}#))
          (#{bound-id=? 4435}# #{x 17187}# #{y 17188}#))))
    (set! syntax-violation
      (lambda*
        (#{who 17354}#
          #{message 17355}#
          #{form 17356}#
          #:optional
          (#{subform 17357}# #f))
        (begin
          (if (not (if (not #{who 17354}#)
                     (not #{who 17354}#)
                     (let ((#{t 17375}# (string? #{who 17354}#)))
                       (if #{t 17375}#
                         #{t 17375}#
                         (symbol? #{who 17354}#)))))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{who 17354}#))
          (if (not (string? #{message 17355}#))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{message 17355}#))
          (throw 'syntax-error
                 #{who 17354}#
                 #{message 17355}#
                 (#{source-annotation 4407}#
                   (if #{form 17356}#
                     #{form 17356}#
                     #{subform 17357}#))
                 (#{strip 4459}# #{form 17356}# '(()))
                 (if #{subform 17357}#
                   (#{strip 4459}# #{subform 17357}# '(()))
                   #f)))))
    (letrec*
      ((#{match-each 17626}#
         (lambda (#{e 18514}#
                  #{p 18515}#
                  #{w 18516}#
                  #{mod 18517}#)
           (if (pair? #{e 18514}#)
             (let ((#{first 18518}#
                     (#{match 17632}#
                       (car #{e 18514}#)
                       #{p 18515}#
                       #{w 18516}#
                       '()
                       #{mod 18517}#)))
               (if #{first 18518}#
                 (let ((#{rest 18521}#
                         (#{match-each 17626}#
                           (cdr #{e 18514}#)
                           #{p 18515}#
                           #{w 18516}#
                           #{mod 18517}#)))
                   (if #{rest 18521}#
                     (cons #{first 18518}# #{rest 18521}#)
                     #f))
                 #f))
             (if (null? #{e 18514}#)
               '()
               (if (if (vector? #{e 18514}#)
                     (if (= (vector-length #{e 18514}#) 4)
                       (eq? (vector-ref #{e 18514}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each 17626}#
                   (vector-ref #{e 18514}# 1)
                   #{p 18515}#
                   (let ((#{w2 18543}# (vector-ref #{e 18514}# 2)))
                     (let ((#{m1 18544}# (car #{w 18516}#))
                           (#{s1 18545}# (cdr #{w 18516}#)))
                       (if (null? #{m1 18544}#)
                         (if (null? #{s1 18545}#)
                           #{w2 18543}#
                           (cons (car #{w2 18543}#)
                                 (let ((#{m2 18556}# (cdr #{w2 18543}#)))
                                   (if (null? #{m2 18556}#)
                                     #{s1 18545}#
                                     (append #{s1 18545}# #{m2 18556}#)))))
                         (cons (let ((#{m2 18564}# (car #{w2 18543}#)))
                                 (if (null? #{m2 18564}#)
                                   #{m1 18544}#
                                   (append #{m1 18544}# #{m2 18564}#)))
                               (let ((#{m2 18572}# (cdr #{w2 18543}#)))
                                 (if (null? #{m2 18572}#)
                                   #{s1 18545}#
                                   (append #{s1 18545}# #{m2 18572}#)))))))
                   (vector-ref #{e 18514}# 3))
                 #f)))))
       (#{match-each-any 17628}#
         (lambda (#{e 18581}# #{w 18582}# #{mod 18583}#)
           (if (pair? #{e 18581}#)
             (let ((#{l 18584}#
                     (#{match-each-any 17628}#
                       (cdr #{e 18581}#)
                       #{w 18582}#
                       #{mod 18583}#)))
               (if #{l 18584}#
                 (cons (let ((#{x 18589}# (car #{e 18581}#)))
                         (if (if (null? (car #{w 18582}#))
                               (null? (cdr #{w 18582}#))
                               #f)
                           #{x 18589}#
                           (if (if (vector? #{x 18589}#)
                                 (if (= (vector-length #{x 18589}#) 4)
                                   (eq? (vector-ref #{x 18589}# 0)
                                        'syntax-object)
                                   #f)
                                 #f)
                             (let ((#{expression 18607}#
                                     (vector-ref #{x 18589}# 1))
                                   (#{wrap 18608}#
                                     (let ((#{w2 18616}#
                                             (vector-ref #{x 18589}# 2)))
                                       (let ((#{m1 18617}# (car #{w 18582}#))
                                             (#{s1 18618}# (cdr #{w 18582}#)))
                                         (if (null? #{m1 18617}#)
                                           (if (null? #{s1 18618}#)
                                             #{w2 18616}#
                                             (cons (car #{w2 18616}#)
                                                   (let ((#{m2 18633}#
                                                           (cdr #{w2 18616}#)))
                                                     (if (null? #{m2 18633}#)
                                                       #{s1 18618}#
                                                       (append
                                                         #{s1 18618}#
                                                         #{m2 18633}#)))))
                                           (cons (let ((#{m2 18641}#
                                                         (car #{w2 18616}#)))
                                                   (if (null? #{m2 18641}#)
                                                     #{m1 18617}#
                                                     (append
                                                       #{m1 18617}#
                                                       #{m2 18641}#)))
                                                 (let ((#{m2 18649}#
                                                         (cdr #{w2 18616}#)))
                                                   (if (null? #{m2 18649}#)
                                                     #{s1 18618}#
                                                     (append
                                                       #{s1 18618}#
                                                       #{m2 18649}#))))))))
                                   (#{module 18609}#
                                     (vector-ref #{x 18589}# 3)))
                               (vector
                                 'syntax-object
                                 #{expression 18607}#
                                 #{wrap 18608}#
                                 #{module 18609}#))
                             (if (null? #{x 18589}#)
                               #{x 18589}#
                               (vector
                                 'syntax-object
                                 #{x 18589}#
                                 #{w 18582}#
                                 #{mod 18583}#)))))
                       #{l 18584}#)
                 #f))
             (if (null? #{e 18581}#)
               '()
               (if (if (vector? #{e 18581}#)
                     (if (= (vector-length #{e 18581}#) 4)
                       (eq? (vector-ref #{e 18581}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each-any 17628}#
                   (vector-ref #{e 18581}# 1)
                   (let ((#{w2 18682}# (vector-ref #{e 18581}# 2)))
                     (let ((#{m1 18683}# (car #{w 18582}#))
                           (#{s1 18684}# (cdr #{w 18582}#)))
                       (if (null? #{m1 18683}#)
                         (if (null? #{s1 18684}#)
                           #{w2 18682}#
                           (cons (car #{w2 18682}#)
                                 (let ((#{m2 18695}# (cdr #{w2 18682}#)))
                                   (if (null? #{m2 18695}#)
                                     #{s1 18684}#
                                     (append #{s1 18684}# #{m2 18695}#)))))
                         (cons (let ((#{m2 18703}# (car #{w2 18682}#)))
                                 (if (null? #{m2 18703}#)
                                   #{m1 18683}#
                                   (append #{m1 18683}# #{m2 18703}#)))
                               (let ((#{m2 18711}# (cdr #{w2 18682}#)))
                                 (if (null? #{m2 18711}#)
                                   #{s1 18684}#
                                   (append #{s1 18684}# #{m2 18711}#)))))))
                   #{mod 18583}#)
                 #f)))))
       (#{match-empty 17629}#
         (lambda (#{p 18716}# #{r 18717}#)
           (if (null? #{p 18716}#)
             #{r 18717}#
             (if (eq? #{p 18716}# '_)
               #{r 18717}#
               (if (eq? #{p 18716}# 'any)
                 (cons '() #{r 18717}#)
                 (if (pair? #{p 18716}#)
                   (#{match-empty 17629}#
                     (car #{p 18716}#)
                     (#{match-empty 17629}#
                       (cdr #{p 18716}#)
                       #{r 18717}#))
                   (if (eq? #{p 18716}# 'each-any)
                     (cons '() #{r 18717}#)
                     (let ((#{atom-key 18718}# (vector-ref #{p 18716}# 0)))
                       (if (eqv? #{atom-key 18718}# 'each)
                         (#{match-empty 17629}#
                           (vector-ref #{p 18716}# 1)
                           #{r 18717}#)
                         (if (eqv? #{atom-key 18718}# 'each+)
                           (#{match-empty 17629}#
                             (vector-ref #{p 18716}# 1)
                             (#{match-empty 17629}#
                               (reverse (vector-ref #{p 18716}# 2))
                               (#{match-empty 17629}#
                                 (vector-ref #{p 18716}# 3)
                                 #{r 18717}#)))
                           (if (if (eqv? #{atom-key 18718}# 'free-id)
                                 #t
                                 (eqv? #{atom-key 18718}# 'atom))
                             #{r 18717}#
                             (if (eqv? #{atom-key 18718}# 'vector)
                               (#{match-empty 17629}#
                                 (vector-ref #{p 18716}# 1)
                                 #{r 18717}#)))))))))))))
       (#{combine 17630}#
         (lambda (#{r* 18737}# #{r 18738}#)
           (if (null? (car #{r* 18737}#))
             #{r 18738}#
             (cons (map car #{r* 18737}#)
                   (#{combine 17630}#
                     (map cdr #{r* 18737}#)
                     #{r 18738}#)))))
       (#{match* 17631}#
         (lambda (#{e 17661}#
                  #{p 17662}#
                  #{w 17663}#
                  #{r 17664}#
                  #{mod 17665}#)
           (if (null? #{p 17662}#)
             (if (null? #{e 17661}#) #{r 17664}# #f)
             (if (pair? #{p 17662}#)
               (if (pair? #{e 17661}#)
                 (#{match 17632}#
                   (car #{e 17661}#)
                   (car #{p 17662}#)
                   #{w 17663}#
                   (#{match 17632}#
                     (cdr #{e 17661}#)
                     (cdr #{p 17662}#)
                     #{w 17663}#
                     #{r 17664}#
                     #{mod 17665}#)
                   #{mod 17665}#)
                 #f)
               (if (eq? #{p 17662}# 'each-any)
                 (let ((#{l 17670}#
                         (#{match-each-any 17628}#
                           #{e 17661}#
                           #{w 17663}#
                           #{mod 17665}#)))
                   (if #{l 17670}#
                     (cons #{l 17670}# #{r 17664}#)
                     #f))
                 (let ((#{atom-key 17675}# (vector-ref #{p 17662}# 0)))
                   (if (eqv? #{atom-key 17675}# 'each)
                     (if (null? #{e 17661}#)
                       (#{match-empty 17629}#
                         (vector-ref #{p 17662}# 1)
                         #{r 17664}#)
                       (let ((#{l 17682}#
                               (#{match-each 17626}#
                                 #{e 17661}#
                                 (vector-ref #{p 17662}# 1)
                                 #{w 17663}#
                                 #{mod 17665}#)))
                         (if #{l 17682}#
                           (letrec*
                             ((#{collect 17685}#
                                (lambda (#{l 17746}#)
                                  (if (null? (car #{l 17746}#))
                                    #{r 17664}#
                                    (cons (map car #{l 17746}#)
                                          (#{collect 17685}#
                                            (map cdr #{l 17746}#)))))))
                             (#{collect 17685}# #{l 17682}#))
                           #f)))
                     (if (eqv? #{atom-key 17675}# 'each+)
                       (call-with-values
                         (lambda ()
                           (let ((#{x-pat 17755}# (vector-ref #{p 17662}# 1))
                                 (#{y-pat 17756}# (vector-ref #{p 17662}# 2))
                                 (#{z-pat 17757}# (vector-ref #{p 17662}# 3)))
                             (letrec*
                               ((#{f 17761}#
                                  (lambda (#{e 17763}# #{w 17764}#)
                                    (if (pair? #{e 17763}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{f 17761}#
                                            (cdr #{e 17763}#)
                                            #{w 17764}#))
                                        (lambda (#{xr* 17765}#
                                                 #{y-pat 17766}#
                                                 #{r 17767}#)
                                          (if #{r 17767}#
                                            (if (null? #{y-pat 17766}#)
                                              (let ((#{xr 17768}#
                                                      (#{match 17632}#
                                                        (car #{e 17763}#)
                                                        #{x-pat 17755}#
                                                        #{w 17764}#
                                                        '()
                                                        #{mod 17665}#)))
                                                (if #{xr 17768}#
                                                  (values
                                                    (cons #{xr 17768}#
                                                          #{xr* 17765}#)
                                                    #{y-pat 17766}#
                                                    #{r 17767}#)
                                                  (values #f #f #f)))
                                              (values
                                                '()
                                                (cdr #{y-pat 17766}#)
                                                (#{match 17632}#
                                                  (car #{e 17763}#)
                                                  (car #{y-pat 17766}#)
                                                  #{w 17764}#
                                                  #{r 17767}#
                                                  #{mod 17665}#)))
                                            (values #f #f #f))))
                                      (if (if (vector? #{e 17763}#)
                                            (if (= (vector-length #{e 17763}#)
                                                   4)
                                              (eq? (vector-ref #{e 17763}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (#{f 17761}#
                                          (vector-ref #{e 17763}# 1)
                                          (let ((#{m1 17796}#
                                                  (car #{w 17764}#))
                                                (#{s1 17797}#
                                                  (cdr #{w 17764}#)))
                                            (if (null? #{m1 17796}#)
                                              (if (null? #{s1 17797}#)
                                                #{e 17763}#
                                                (cons (car #{e 17763}#)
                                                      (let ((#{m2 17809}#
                                                              (cdr #{e 17763}#)))
                                                        (if (null? #{m2 17809}#)
                                                          #{s1 17797}#
                                                          (append
                                                            #{s1 17797}#
                                                            #{m2 17809}#)))))
                                              (cons (let ((#{m2 17819}#
                                                            (car #{e 17763}#)))
                                                      (if (null? #{m2 17819}#)
                                                        #{m1 17796}#
                                                        (append
                                                          #{m1 17796}#
                                                          #{m2 17819}#)))
                                                    (let ((#{m2 17829}#
                                                            (cdr #{e 17763}#)))
                                                      (if (null? #{m2 17829}#)
                                                        #{s1 17797}#
                                                        (append
                                                          #{s1 17797}#
                                                          #{m2 17829}#)))))))
                                        (values
                                          '()
                                          #{y-pat 17756}#
                                          (#{match 17632}#
                                            #{e 17763}#
                                            #{z-pat 17757}#
                                            #{w 17764}#
                                            #{r 17664}#
                                            #{mod 17665}#)))))))
                               (#{f 17761}# #{e 17661}# #{w 17663}#))))
                         (lambda (#{xr* 17839}# #{y-pat 17840}# #{r 17841}#)
                           (if #{r 17841}#
                             (if (null? #{y-pat 17840}#)
                               (if (null? #{xr* 17839}#)
                                 (#{match-empty 17629}#
                                   (vector-ref #{p 17662}# 1)
                                   #{r 17841}#)
                                 (#{combine 17630}# #{xr* 17839}# #{r 17841}#))
                               #f)
                             #f)))
                       (if (eqv? #{atom-key 17675}# 'free-id)
                         (if (if (symbol? #{e 17661}#)
                               #t
                               (if (if (vector? #{e 17661}#)
                                     (if (= (vector-length #{e 17661}#) 4)
                                       (eq? (vector-ref #{e 17661}# 0)
                                            'syntax-object)
                                       #f)
                                     #f)
                                 (symbol? (vector-ref #{e 17661}# 1))
                                 #f))
                           (if (#{free-id=? 4434}#
                                 (if (if (null? (car #{w 17663}#))
                                       (null? (cdr #{w 17663}#))
                                       #f)
                                   #{e 17661}#
                                   (if (if (vector? #{e 17661}#)
                                         (if (= (vector-length #{e 17661}#) 4)
                                           (eq? (vector-ref #{e 17661}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (let ((#{expression 18272}#
                                             (vector-ref #{e 17661}# 1))
                                           (#{wrap 18273}#
                                             (let ((#{w2 18283}#
                                                     (vector-ref
                                                       #{e 17661}#
                                                       2)))
                                               (let ((#{m1 18284}#
                                                       (car #{w 17663}#))
                                                     (#{s1 18285}#
                                                       (cdr #{w 17663}#)))
                                                 (if (null? #{m1 18284}#)
                                                   (if (null? #{s1 18285}#)
                                                     #{w2 18283}#
                                                     (cons (car #{w2 18283}#)
                                                           (let ((#{m2 18302}#
                                                                   (cdr #{w2 18283}#)))
                                                             (if (null? #{m2 18302}#)
                                                               #{s1 18285}#
                                                               (append
                                                                 #{s1 18285}#
                                                                 #{m2 18302}#)))))
                                                   (cons (let ((#{m2 18310}#
                                                                 (car #{w2 18283}#)))
                                                           (if (null? #{m2 18310}#)
                                                             #{m1 18284}#
                                                             (append
                                                               #{m1 18284}#
                                                               #{m2 18310}#)))
                                                         (let ((#{m2 18318}#
                                                                 (cdr #{w2 18283}#)))
                                                           (if (null? #{m2 18318}#)
                                                             #{s1 18285}#
                                                             (append
                                                               #{s1 18285}#
                                                               #{m2 18318}#))))))))
                                           (#{module 18274}#
                                             (vector-ref #{e 17661}# 3)))
                                       (vector
                                         'syntax-object
                                         #{expression 18272}#
                                         #{wrap 18273}#
                                         #{module 18274}#))
                                     (if (null? #{e 17661}#)
                                       #{e 17661}#
                                       (vector
                                         'syntax-object
                                         #{e 17661}#
                                         #{w 17663}#
                                         #{mod 17665}#))))
                                 (vector-ref #{p 17662}# 1))
                             #{r 17664}#
                             #f)
                           #f)
                         (if (eqv? #{atom-key 17675}# 'atom)
                           (if (equal?
                                 (vector-ref #{p 17662}# 1)
                                 (#{strip 4459}# #{e 17661}# #{w 17663}#))
                             #{r 17664}#
                             #f)
                           (if (eqv? #{atom-key 17675}# 'vector)
                             (if (vector? #{e 17661}#)
                               (#{match 17632}#
                                 (vector->list #{e 17661}#)
                                 (vector-ref #{p 17662}# 1)
                                 #{w 17663}#
                                 #{r 17664}#
                                 #{mod 17665}#)
                               #f))))))))))))
       (#{match 17632}#
         (lambda (#{e 18351}#
                  #{p 18352}#
                  #{w 18353}#
                  #{r 18354}#
                  #{mod 18355}#)
           (if (not #{r 18354}#)
             #f
             (if (eq? #{p 18352}# '_)
               #{r 18354}#
               (if (eq? #{p 18352}# 'any)
                 (cons (if (if (null? (car #{w 18353}#))
                             (null? (cdr #{w 18353}#))
                             #f)
                         #{e 18351}#
                         (if (if (vector? #{e 18351}#)
                               (if (= (vector-length #{e 18351}#) 4)
                                 (eq? (vector-ref #{e 18351}# 0)
                                      'syntax-object)
                                 #f)
                               #f)
                           (let ((#{expression 18385}#
                                   (vector-ref #{e 18351}# 1))
                                 (#{wrap 18386}#
                                   (let ((#{w2 18396}#
                                           (vector-ref #{e 18351}# 2)))
                                     (let ((#{m1 18397}# (car #{w 18353}#))
                                           (#{s1 18398}# (cdr #{w 18353}#)))
                                       (if (null? #{m1 18397}#)
                                         (if (null? #{s1 18398}#)
                                           #{w2 18396}#
                                           (cons (car #{w2 18396}#)
                                                 (let ((#{m2 18415}#
                                                         (cdr #{w2 18396}#)))
                                                   (if (null? #{m2 18415}#)
                                                     #{s1 18398}#
                                                     (append
                                                       #{s1 18398}#
                                                       #{m2 18415}#)))))
                                         (cons (let ((#{m2 18423}#
                                                       (car #{w2 18396}#)))
                                                 (if (null? #{m2 18423}#)
                                                   #{m1 18397}#
                                                   (append
                                                     #{m1 18397}#
                                                     #{m2 18423}#)))
                                               (let ((#{m2 18431}#
                                                       (cdr #{w2 18396}#)))
                                                 (if (null? #{m2 18431}#)
                                                   #{s1 18398}#
                                                   (append
                                                     #{s1 18398}#
                                                     #{m2 18431}#))))))))
                                 (#{module 18387}# (vector-ref #{e 18351}# 3)))
                             (vector
                               'syntax-object
                               #{expression 18385}#
                               #{wrap 18386}#
                               #{module 18387}#))
                           (if (null? #{e 18351}#)
                             #{e 18351}#
                             (vector
                               'syntax-object
                               #{e 18351}#
                               #{w 18353}#
                               #{mod 18355}#))))
                       #{r 18354}#)
                 (if (if (vector? #{e 18351}#)
                       (if (= (vector-length #{e 18351}#) 4)
                         (eq? (vector-ref #{e 18351}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match* 17631}#
                     (vector-ref #{e 18351}# 1)
                     #{p 18352}#
                     (let ((#{w2 18474}# (vector-ref #{e 18351}# 2)))
                       (let ((#{m1 18475}# (car #{w 18353}#))
                             (#{s1 18476}# (cdr #{w 18353}#)))
                         (if (null? #{m1 18475}#)
                           (if (null? #{s1 18476}#)
                             #{w2 18474}#
                             (cons (car #{w2 18474}#)
                                   (let ((#{m2 18487}# (cdr #{w2 18474}#)))
                                     (if (null? #{m2 18487}#)
                                       #{s1 18476}#
                                       (append #{s1 18476}# #{m2 18487}#)))))
                           (cons (let ((#{m2 18495}# (car #{w2 18474}#)))
                                   (if (null? #{m2 18495}#)
                                     #{m1 18475}#
                                     (append #{m1 18475}# #{m2 18495}#)))
                                 (let ((#{m2 18503}# (cdr #{w2 18474}#)))
                                   (if (null? #{m2 18503}#)
                                     #{s1 18476}#
                                     (append #{s1 18476}# #{m2 18503}#)))))))
                     #{r 18354}#
                     (vector-ref #{e 18351}# 3))
                   (#{match* 17631}#
                     #{e 18351}#
                     #{p 18352}#
                     #{w 18353}#
                     #{r 18354}#
                     #{mod 18355}#))))))))
      (set! $sc-dispatch
        (lambda (#{e 17633}# #{p 17634}#)
          (if (eq? #{p 17634}# 'any)
            (list #{e 17633}#)
            (if (eq? #{p 17634}# '_)
              '()
              (if (if (vector? #{e 17633}#)
                    (if (= (vector-length #{e 17633}#) 4)
                      (eq? (vector-ref #{e 17633}# 0) 'syntax-object)
                      #f)
                    #f)
                (#{match* 17631}#
                  (vector-ref #{e 17633}# 1)
                  #{p 17634}#
                  (vector-ref #{e 17633}# 2)
                  '()
                  (vector-ref #{e 17633}# 3))
                (#{match* 17631}#
                  #{e 17633}#
                  #{p 17634}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 36462}#)
      (let ((#{tmp 36464}#
              ($sc-dispatch #{x 36462}# '(_ () any . each-any))))
        (if #{tmp 36464}#
          (@apply
            (lambda (#{e1 36468}# #{e2 36469}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("i36435" "i36436"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i36432"))
                        #(ribcage
                          (with-syntax)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              with-syntax
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    (cons '() (cons #{e1 36468}# #{e2 36469}#))))
            #{tmp 36464}#)
          (let ((#{tmp 36470}#
                  ($sc-dispatch
                    #{x 36462}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 36470}#
              (@apply
                (lambda (#{out 36474}#
                         #{in 36475}#
                         #{e1 36476}#
                         #{e2 36477}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("i36441" "i36442" "i36443" "i36444"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i36432"))
                            #(ribcage
                              (with-syntax)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  with-syntax
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        #{in 36475}#
                        '()
                        (list #{out 36474}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i36441"
                                            "i36442"
                                            "i36443"
                                            "i36444"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i36432"))
                                        #(ribcage
                                          (with-syntax)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              with-syntax
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 36476}# #{e2 36477}#))))))
                #{tmp 36470}#)
              (let ((#{tmp 36478}#
                      ($sc-dispatch
                        #{x 36462}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 36478}#
                  (@apply
                    (lambda (#{out 36482}#
                             #{in 36483}#
                             #{e1 36484}#
                             #{e2 36485}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("i36451" "i36452" "i36453" "i36454"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i36432"))
                                #(ribcage
                                  (with-syntax)
                                  ((top))
                                  (((hygiene guile)
                                    .
                                    #(syntax-object
                                      with-syntax
                                      ((top))
                                      (hygiene guile))))))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("i36451" "i36452" "i36453" "i36454"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i36432"))
                                      #(ribcage
                                        (with-syntax)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            with-syntax
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                  #{in 36483}#)
                            '()
                            (list #{out 36482}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("i36451"
                                                "i36452"
                                                "i36453"
                                                "i36454"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i36432"))
                                            #(ribcage
                                              (with-syntax)
                                              ((top))
                                              (((hygiene guile)
                                                .
                                                #(syntax-object
                                                  with-syntax
                                                  ((top))
                                                  (hygiene guile))))))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 36484}#
                                                    #{e2 36485}#))))))
                    #{tmp 36478}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 36462}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 36540}#)
      (let ((#{tmp 36542}#
              ($sc-dispatch
                #{x 36540}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 36542}#
          (@apply
            (lambda (#{k 36546}#
                     #{keyword 36547}#
                     #{pattern 36548}#
                     #{template 36549}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("i36503" "i36504" "i36505" "i36506"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i36500"))
                        #(ribcage
                          (syntax-rules)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              syntax-rules
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("i36503" "i36504" "i36505" "i36506"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i36500"))
                         #(ribcage
                           (syntax-rules)
                           ((top))
                           (((hygiene guile)
                             .
                             #(syntax-object
                               syntax-rules
                               ((top))
                               (hygiene guile))))))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i36503" "i36504" "i36505" "i36506"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i36500"))
                           #(ribcage
                             (syntax-rules)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 syntax-rules
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i36503" "i36504" "i36505" "i36506"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i36500"))
                           #(ribcage
                             (syntax-rules)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 syntax-rules
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i36503" "i36504" "i36505" "i36506"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i36500"))
                                #(ribcage
                                  (syntax-rules)
                                  ((top))
                                  (((hygiene guile)
                                    .
                                    #(syntax-object
                                      syntax-rules
                                      ((top))
                                      (hygiene guile))))))
                               (hygiene guile))
                            #{pattern 36548}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("i36503" "i36504" "i36505" "i36506"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i36500"))
                              #(ribcage
                                (syntax-rules)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    syntax-rules
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("i36503" "i36504" "i36505" "i36506"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i36500"))
                                    #(ribcage
                                      (syntax-rules)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          syntax-rules
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile))
                                (cons #{k 36546}#
                                      (map (lambda (#{tmp 36514 36550}#
                                                    #{tmp 36513 36551}#)
                                             (list (cons '#(syntax-object
                                                            _
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i36503"
                                                                 "i36504"
                                                                 "i36505"
                                                                 "i36506"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i36500"))
                                                             #(ribcage
                                                               (syntax-rules)
                                                               ((top))
                                                               (((hygiene
                                                                   guile)
                                                                 .
                                                                 #(syntax-object
                                                                   syntax-rules
                                                                   ((top))
                                                                   (hygiene
                                                                     guile))))))
                                                            (hygiene guile))
                                                         #{tmp 36513 36551}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i36503"
                                                                 "i36504"
                                                                 "i36505"
                                                                 "i36506"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i36500"))
                                                             #(ribcage
                                                               (syntax-rules)
                                                               ((top))
                                                               (((hygiene
                                                                   guile)
                                                                 .
                                                                 #(syntax-object
                                                                   syntax-rules
                                                                   ((top))
                                                                   (hygiene
                                                                     guile))))))
                                                            (hygiene guile))
                                                         #{tmp 36514 36550}#)))
                                           #{template 36549}#
                                           #{pattern 36548}#))))))
            #{tmp 36542}#)
          (let ((#{tmp 36552}#
                  ($sc-dispatch
                    #{x 36540}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 36552}#
                  (@apply
                    (lambda (#{k 36556}#
                             #{docstring 36557}#
                             #{keyword 36558}#
                             #{pattern 36559}#
                             #{template 36560}#)
                      (string? (syntax->datum #{docstring 36557}#)))
                    #{tmp 36552}#)
                  #f)
              (@apply
                (lambda (#{k 36561}#
                         #{docstring 36562}#
                         #{keyword 36563}#
                         #{pattern 36564}#
                         #{template 36565}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("i36526" "i36527" "i36528" "i36529" "i36530"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i36500"))
                            #(ribcage
                              (syntax-rules)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  syntax-rules
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("i36526" "i36527" "i36528" "i36529" "i36530"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i36500"))
                             #(ribcage
                               (syntax-rules)
                               ((top))
                               (((hygiene guile)
                                 .
                                 #(syntax-object
                                   syntax-rules
                                   ((top))
                                   (hygiene guile))))))
                            (hygiene guile)))
                        #{docstring 36562}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i36526"
                                   "i36527"
                                   "i36528"
                                   "i36529"
                                   "i36530"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i36500"))
                               #(ribcage
                                 (syntax-rules)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     syntax-rules
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i36526"
                                   "i36527"
                                   "i36528"
                                   "i36529"
                                   "i36530"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i36500"))
                               #(ribcage
                                 (syntax-rules)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     syntax-rules
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i36526"
                                        "i36527"
                                        "i36528"
                                        "i36529"
                                        "i36530"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i36500"))
                                    #(ribcage
                                      (syntax-rules)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          syntax-rules
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile))
                                #{pattern 36564}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i36526"
                                      "i36527"
                                      "i36528"
                                      "i36529"
                                      "i36530"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i36500"))
                                  #(ribcage
                                    (syntax-rules)
                                    ((top))
                                    (((hygiene guile)
                                      .
                                      #(syntax-object
                                        syntax-rules
                                        ((top))
                                        (hygiene guile))))))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("i36526"
                                            "i36527"
                                            "i36528"
                                            "i36529"
                                            "i36530"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i36500"))
                                        #(ribcage
                                          (syntax-rules)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              syntax-rules
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    (cons #{k 36561}#
                                          (map (lambda (#{tmp 36539 36566}#
                                                        #{tmp 36538 36567}#)
                                                 (list (cons '#(syntax-object
                                                                _
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i36526"
                                                                     "i36527"
                                                                     "i36528"
                                                                     "i36529"
                                                                     "i36530"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i36500"))
                                                                 #(ribcage
                                                                   (syntax-rules)
                                                                   ((top))
                                                                   (((hygiene
                                                                       guile)
                                                                     .
                                                                     #(syntax-object
                                                                       syntax-rules
                                                                       ((top))
                                                                       (hygiene
                                                                         guile))))))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 36538 36567}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i36526"
                                                                     "i36527"
                                                                     "i36528"
                                                                     "i36529"
                                                                     "i36530"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i36500"))
                                                                 #(ribcage
                                                                   (syntax-rules)
                                                                   ((top))
                                                                   (((hygiene
                                                                       guile)
                                                                     .
                                                                     #(syntax-object
                                                                       syntax-rules
                                                                       ((top))
                                                                       (hygiene
                                                                         guile))))))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 36539 36566}#)))
                                               #{template 36565}#
                                               #{pattern 36564}#))))))
                #{tmp 36552}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 36540}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 36605}#)
      (let ((#{tmp 36607}#
              ($sc-dispatch #{x 36605}# '(_ (any . any) any))))
        (if #{tmp 36607}#
          (@apply
            (lambda (#{name 36611}#
                     #{pattern 36612}#
                     #{template 36613}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("i36582" "i36583" "i36584"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i36579"))
                        #(ribcage
                          (define-syntax-rule)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              define-syntax-rule
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    #{name 36611}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("i36582" "i36583" "i36584"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i36579"))
                              #(ribcage
                                (define-syntax-rule)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    define-syntax-rule
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("i36582" "i36583" "i36584"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i36579"))
                                          #(ribcage
                                            (define-syntax-rule)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                define-syntax-rule
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      #{pattern 36612}#)
                                #{template 36613}#))))
            #{tmp 36607}#)
          (let ((#{tmp 36614}#
                  ($sc-dispatch
                    #{x 36605}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 36614}#
                  (@apply
                    (lambda (#{name 36618}#
                             #{pattern 36619}#
                             #{docstring 36620}#
                             #{template 36621}#)
                      (string? (syntax->datum #{docstring 36620}#)))
                    #{tmp 36614}#)
                  #f)
              (@apply
                (lambda (#{name 36622}#
                         #{pattern 36623}#
                         #{docstring 36624}#
                         #{template 36625}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("i36597" "i36598" "i36599" "i36600"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i36579"))
                            #(ribcage
                              (define-syntax-rule)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  define-syntax-rule
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        #{name 36622}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("i36597" "i36598" "i36599" "i36600"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i36579"))
                                  #(ribcage
                                    (define-syntax-rule)
                                    ((top))
                                    (((hygiene guile)
                                      .
                                      #(syntax-object
                                        define-syntax-rule
                                        ((top))
                                        (hygiene guile))))))
                                 (hygiene guile))
                              '()
                              #{docstring 36624}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("i36597"
                                                  "i36598"
                                                  "i36599"
                                                  "i36600"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i36579"))
                                              #(ribcage
                                                (define-syntax-rule)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    define-syntax-rule
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                          #{pattern 36623}#)
                                    #{template 36625}#))))
                #{tmp 36614}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 36605}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 36675}#)
      (let ((#{tmp 36677}#
              ($sc-dispatch
                #{x 36675}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 36677}#
              (@apply
                (lambda (#{let* 36681}#
                         #{x 36682}#
                         #{v 36683}#
                         #{e1 36684}#
                         #{e2 36685}#)
                  (and-map identifier? #{x 36682}#))
                #{tmp 36677}#)
              #f)
          (@apply
            (lambda (#{let* 36686}#
                     #{x 36687}#
                     #{v 36688}#
                     #{e1 36689}#
                     #{e2 36690}#)
              (letrec*
                ((#{f 36691}#
                   (lambda (#{bindings 36694}#)
                     (if (null? #{bindings 36694}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("i36661" "i36662"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("i36651"
                                     "i36652"
                                     "i36653"
                                     "i36654"
                                     "i36655"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i36637"))
                                 #(ribcage
                                   (let*)
                                   ((top))
                                   (((hygiene guile)
                                     .
                                     #(syntax-object
                                       let*
                                       ((top))
                                       (hygiene guile))))))
                                (hygiene guile))
                             (cons '() (cons #{e1 36689}# #{e2 36690}#)))
                       (let ((#{tmp 36695}#
                               (list (#{f 36691}# (cdr #{bindings 36694}#))
                                     (car #{bindings 36694}#))))
                         (let ((#{tmp 36696}#
                                 ($sc-dispatch #{tmp 36695}# '(any any))))
                           (if #{tmp 36696}#
                             (@apply
                               (lambda (#{body 36698}# #{binding 36699}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("i36671" "i36672"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("i36661" "i36662"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i36651"
                                               "i36652"
                                               "i36653"
                                               "i36654"
                                               "i36655"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i36637"))
                                           #(ribcage
                                             (let*)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 let*
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       (list #{binding 36699}#)
                                       #{body 36698}#))
                               #{tmp 36696}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 36695}#))))))))
                (#{f 36691}# (map list #{x 36687}# #{v 36688}#))))
            #{tmp 36677}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 36675}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 36758}#)
      (let ((#{tmp 36760}#
              ($sc-dispatch
                #{orig-x 36758}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 36760}#
          (@apply
            (lambda (#{var 36764}#
                     #{init 36765}#
                     #{step 36766}#
                     #{e0 36767}#
                     #{e1 36768}#
                     #{c 36769}#)
              (let ((#{tmp 36770}#
                      (map (lambda (#{v 36773}# #{s 36774}#)
                             (let ((#{tmp 36776}#
                                     ($sc-dispatch #{s 36774}# '())))
                               (if #{tmp 36776}#
                                 (@apply (lambda () #{v 36773}#) #{tmp 36776}#)
                                 (let ((#{tmp 36779}#
                                         ($sc-dispatch #{s 36774}# '(any))))
                                   (if #{tmp 36779}#
                                     (@apply
                                       (lambda (#{e 36782}#) #{e 36782}#)
                                       #{tmp 36779}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 36758}#
                                       #{s 36774}#))))))
                           #{var 36764}#
                           #{step 36766}#)))
                (let ((#{tmp 36771}#
                        ($sc-dispatch #{tmp 36770}# 'each-any)))
                  (if #{tmp 36771}#
                    (@apply
                      (lambda (#{step 36788}#)
                        (let ((#{tmp 36790}# ($sc-dispatch #{e1 36768}# '())))
                          (if #{tmp 36790}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i36726"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i36711"
                                              "i36712"
                                              "i36713"
                                              "i36714"
                                              "i36715"
                                              "i36716"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i36708"))
                                          #(ribcage
                                            (do)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                do
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i36726"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i36711"
                                              "i36712"
                                              "i36713"
                                              "i36714"
                                              "i36715"
                                              "i36716"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i36708"))
                                          #(ribcage
                                            (do)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                do
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      (map list #{var 36764}# #{init 36765}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("i36726"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i36711"
                                                    "i36712"
                                                    "i36713"
                                                    "i36714"
                                                    "i36715"
                                                    "i36716"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("i36708"))
                                                #(ribcage
                                                  (do)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      do
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i36726"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i36711"
                                                          "i36712"
                                                          "i36713"
                                                          "i36714"
                                                          "i36715"
                                                          "i36716"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i36708"))
                                                      #(ribcage
                                                        (do)
                                                        ((top))
                                                        (((hygiene guile)
                                                          .
                                                          #(syntax-object
                                                            do
                                                            ((top))
                                                            (hygiene
                                                              guile))))))
                                                     (hygiene guile))
                                                  #{e0 36767}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i36726"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i36711"
                                                          "i36712"
                                                          "i36713"
                                                          "i36714"
                                                          "i36715"
                                                          "i36716"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i36708"))
                                                      #(ribcage
                                                        (do)
                                                        ((top))
                                                        (((hygiene guile)
                                                          .
                                                          #(syntax-object
                                                            do
                                                            ((top))
                                                            (hygiene
                                                              guile))))))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 36769}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("i36726"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i36711"
                                                                        "i36712"
                                                                        "i36713"
                                                                        "i36714"
                                                                        "i36715"
                                                                        "i36716"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("i36708"))
                                                                    #(ribcage
                                                                      (do)
                                                                      ((top))
                                                                      (((hygiene
                                                                          guile)
                                                                        .
                                                                        #(syntax-object
                                                                          do
                                                                          ((top))
                                                                          (hygiene
                                                                            guile))))))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 36788}#)))))))
                              #{tmp 36790}#)
                            (let ((#{tmp 36794}#
                                    ($sc-dispatch
                                      #{e1 36768}#
                                      '(any . each-any))))
                              (if #{tmp 36794}#
                                (@apply
                                  (lambda (#{e1 36798}# #{e2 36799}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i36735" "i36736"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i36726"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i36711"
                                                  "i36712"
                                                  "i36713"
                                                  "i36714"
                                                  "i36715"
                                                  "i36716"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i36708"))
                                              #(ribcage
                                                (do)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    do
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i36735" "i36736"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i36726"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i36711"
                                                  "i36712"
                                                  "i36713"
                                                  "i36714"
                                                  "i36715"
                                                  "i36716"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i36708"))
                                              #(ribcage
                                                (do)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    do
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                          (map list
                                               #{var 36764}#
                                               #{init 36765}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("i36735" "i36736"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i36726"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i36711"
                                                        "i36712"
                                                        "i36713"
                                                        "i36714"
                                                        "i36715"
                                                        "i36716"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i36708"))
                                                    #(ribcage
                                                      (do)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          do
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{e0 36767}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i36735"
                                                              "i36736"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i36726"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i36711"
                                                              "i36712"
                                                              "i36713"
                                                              "i36714"
                                                              "i36715"
                                                              "i36716"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i36708"))
                                                          #(ribcage
                                                            (do)
                                                            ((top))
                                                            (((hygiene guile)
                                                              .
                                                              #(syntax-object
                                                                do
                                                                ((top))
                                                                (hygiene
                                                                  guile))))))
                                                         (hygiene guile))
                                                      (cons #{e1 36798}#
                                                            #{e2 36799}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i36735"
                                                              "i36736"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i36726"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i36711"
                                                              "i36712"
                                                              "i36713"
                                                              "i36714"
                                                              "i36715"
                                                              "i36716"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i36708"))
                                                          #(ribcage
                                                            (do)
                                                            ((top))
                                                            (((hygiene guile)
                                                              .
                                                              #(syntax-object
                                                                do
                                                                ((top))
                                                                (hygiene
                                                                  guile))))))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 36769}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i36735"
                                                                            "i36736"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i36726"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i36711"
                                                                            "i36712"
                                                                            "i36713"
                                                                            "i36714"
                                                                            "i36715"
                                                                            "i36716"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i36708"))
                                                                        #(ribcage
                                                                          (do)
                                                                          ((top))
                                                                          (((hygiene
                                                                              guile)
                                                                            .
                                                                            #(syntax-object
                                                                              do
                                                                              ((top))
                                                                              (hygiene
                                                                                guile))))))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 36788}#)))))))
                                  #{tmp 36794}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 36768}#))))))
                      #{tmp 36771}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 36770}#)))))
            #{tmp 36760}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 36758}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 37086}#
         (lambda (#{p 37110}# #{lev 37111}#)
           (let ((#{tmp 37113}#
                   ($sc-dispatch
                     #{p 37110}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i36832" "i36833"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i36828"
                               "i36826"
                               "i36824"
                               "i36822"
                               "i36820"
                               "i36818"
                               "i36816"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile)))
                       any))))
             (if #{tmp 37113}#
               (@apply
                 (lambda (#{p 37117}#)
                   (if (= #{lev 37111}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("i36836"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("i36832" "i36833"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i36828"
                                  "i36826"
                                  "i36824"
                                  "i36822"
                                  "i36820"
                                  "i36818"
                                  "i36816"))
                               #(ribcage
                                 (quasiquote)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     quasiquote
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile))
                           #{p 37117}#)
                     (#{quasicons 37088}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("i36836"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i36832" "i36833"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i36828"
                               "i36826"
                               "i36824"
                               "i36822"
                               "i36820"
                               "i36818"
                               "i36816"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("i36836"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i36832" "i36833"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i36828"
                               "i36826"
                               "i36824"
                               "i36822"
                               "i36820"
                               "i36818"
                               "i36816"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile)))
                       (#{quasi 37086}#
                         (list #{p 37117}#)
                         (#{1-}# #{lev 37111}#)))))
                 #{tmp 37113}#)
               (let ((#{tmp 37120}#
                       ($sc-dispatch
                         #{p 37110}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i36832" "i36833"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i36828"
                                   "i36826"
                                   "i36824"
                                   "i36822"
                                   "i36820"
                                   "i36818"
                                   "i36816"))
                                #(ribcage
                                  (quasiquote)
                                  ((top))
                                  (((hygiene guile)
                                    .
                                    #(syntax-object
                                      quasiquote
                                      ((top))
                                      (hygiene guile))))))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 37120}#
                   (@apply
                     (lambda (#{p 37124}#)
                       (#{quasicons 37088}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i36839"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i36832" "i36833"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i36828"
                                 "i36826"
                                 "i36824"
                                 "i36822"
                                 "i36820"
                                 "i36818"
                                 "i36816"))
                              #(ribcage
                                (quasiquote)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    quasiquote
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i36839"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i36832" "i36833"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i36828"
                                 "i36826"
                                 "i36824"
                                 "i36822"
                                 "i36820"
                                 "i36818"
                                 "i36816"))
                              #(ribcage
                                (quasiquote)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    quasiquote
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile)))
                         (#{quasi 37086}#
                           (list #{p 37124}#)
                           (#{1+}# #{lev 37111}#))))
                     #{tmp 37120}#)
                   (let ((#{tmp 37127}#
                           ($sc-dispatch #{p 37110}# '(any . any))))
                     (if #{tmp 37127}#
                       (@apply
                         (lambda (#{p 37131}# #{q 37132}#)
                           (let ((#{tmp 37134}#
                                   ($sc-dispatch
                                     #{p 37131}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i36842" "i36843"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i36832" "i36833"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i36828"
                                               "i36826"
                                               "i36824"
                                               "i36822"
                                               "i36820"
                                               "i36818"
                                               "i36816"))
                                            #(ribcage
                                              (quasiquote)
                                              ((top))
                                              (((hygiene guile)
                                                .
                                                #(syntax-object
                                                  quasiquote
                                                  ((top))
                                                  (hygiene guile))))))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 37134}#
                               (@apply
                                 (lambda (#{p 37138}#)
                                   (if (= #{lev 37111}# 0)
                                     (#{quasilist* 37090}#
                                       (map (lambda (#{tmp 36850 37177}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i36848"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i36842" "i36843"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i36832" "i36833"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i36828"
                                                           "i36826"
                                                           "i36824"
                                                           "i36822"
                                                           "i36820"
                                                           "i36818"
                                                           "i36816"))
                                                        #(ribcage
                                                          (quasiquote)
                                                          ((top))
                                                          (((hygiene guile)
                                                            .
                                                            #(syntax-object
                                                              quasiquote
                                                              ((top))
                                                              (hygiene
                                                                guile))))))
                                                       (hygiene guile))
                                                    #{tmp 36850 37177}#))
                                            #{p 37138}#)
                                       (#{quasi 37086}#
                                         #{q 37132}#
                                         #{lev 37111}#))
                                     (#{quasicons 37088}#
                                       (#{quasicons 37088}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i36848"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i36842" "i36843"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i36832" "i36833"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i36828"
                                                 "i36826"
                                                 "i36824"
                                                 "i36822"
                                                 "i36820"
                                                 "i36818"
                                                 "i36816"))
                                              #(ribcage
                                                (quasiquote)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    quasiquote
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i36848"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i36842" "i36843"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i36832" "i36833"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i36828"
                                                 "i36826"
                                                 "i36824"
                                                 "i36822"
                                                 "i36820"
                                                 "i36818"
                                                 "i36816"))
                                              #(ribcage
                                                (quasiquote)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    quasiquote
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile)))
                                         (#{quasi 37086}#
                                           #{p 37138}#
                                           (#{1-}# #{lev 37111}#)))
                                       (#{quasi 37086}#
                                         #{q 37132}#
                                         #{lev 37111}#))))
                                 #{tmp 37134}#)
                               (let ((#{tmp 37182}#
                                       ($sc-dispatch
                                         #{p 37131}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i36842" "i36843"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i36832" "i36833"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i36828"
                                                   "i36826"
                                                   "i36824"
                                                   "i36822"
                                                   "i36820"
                                                   "i36818"
                                                   "i36816"))
                                                #(ribcage
                                                  (quasiquote)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      quasiquote
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 37182}#
                                   (@apply
                                     (lambda (#{p 37186}#)
                                       (if (= #{lev 37111}# 0)
                                         (#{quasiappend 37089}#
                                           (map (lambda (#{tmp 36855 37189}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i36853"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i36842"
                                                                "i36843"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i36832"
                                                                "i36833"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i36828"
                                                               "i36826"
                                                               "i36824"
                                                               "i36822"
                                                               "i36820"
                                                               "i36818"
                                                               "i36816"))
                                                            #(ribcage
                                                              (quasiquote)
                                                              ((top))
                                                              (((hygiene guile)
                                                                .
                                                                #(syntax-object
                                                                  quasiquote
                                                                  ((top))
                                                                  (hygiene
                                                                    guile))))))
                                                           (hygiene guile))
                                                        #{tmp 36855 37189}#))
                                                #{p 37186}#)
                                           (#{quasi 37086}#
                                             #{q 37132}#
                                             #{lev 37111}#))
                                         (#{quasicons 37088}#
                                           (#{quasicons 37088}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i36853"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i36842" "i36843"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i36832" "i36833"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i36828"
                                                     "i36826"
                                                     "i36824"
                                                     "i36822"
                                                     "i36820"
                                                     "i36818"
                                                     "i36816"))
                                                  #(ribcage
                                                    (quasiquote)
                                                    ((top))
                                                    (((hygiene guile)
                                                      .
                                                      #(syntax-object
                                                        quasiquote
                                                        ((top))
                                                        (hygiene guile))))))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i36853"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i36842" "i36843"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i36832" "i36833"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i36828"
                                                     "i36826"
                                                     "i36824"
                                                     "i36822"
                                                     "i36820"
                                                     "i36818"
                                                     "i36816"))
                                                  #(ribcage
                                                    (quasiquote)
                                                    ((top))
                                                    (((hygiene guile)
                                                      .
                                                      #(syntax-object
                                                        quasiquote
                                                        ((top))
                                                        (hygiene guile))))))
                                                 (hygiene guile)))
                                             (#{quasi 37086}#
                                               #{p 37186}#
                                               (#{1-}# #{lev 37111}#)))
                                           (#{quasi 37086}#
                                             #{q 37132}#
                                             #{lev 37111}#))))
                                     #{tmp 37182}#)
                                   (#{quasicons 37088}#
                                     (#{quasi 37086}#
                                       #{p 37131}#
                                       #{lev 37111}#)
                                     (#{quasi 37086}#
                                       #{q 37132}#
                                       #{lev 37111}#)))))))
                         #{tmp 37127}#)
                       (let ((#{tmp 37203}#
                               ($sc-dispatch #{p 37110}# '#(vector each-any))))
                         (if #{tmp 37203}#
                           (@apply
                             (lambda (#{x 37207}#)
                               (let ((#{x 37210}#
                                       (#{vquasi 37087}#
                                         #{x 37207}#
                                         #{lev 37111}#)))
                                 (let ((#{tmp 37212}#
                                         ($sc-dispatch
                                           #{x 37210}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp 37212}#
                                     (@apply
                                       (lambda (#{x 37216}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i36960"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i36957"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i36828"
                                                      "i36826"
                                                      "i36824"
                                                      "i36822"
                                                      "i36820"
                                                      "i36818"
                                                      "i36816"))
                                                   #(ribcage
                                                     (quasiquote)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         quasiquote
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               (list->vector #{x 37216}#)))
                                       #{tmp 37212}#)
                                     (letrec*
                                       ((#{f 37218}#
                                          (lambda (#{y 37230}# #{k 37231}#)
                                            (let ((#{tmp 37233}#
                                                    ($sc-dispatch
                                                      #{y 37230}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp 37233}#
                                                (@apply
                                                  (lambda (#{y 37236}#)
                                                    (#{k 37231}#
                                                      (map (lambda (#{tmp 36985 37237}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("i36983"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i36965"
                                                                           "i36966"
                                                                           "i36967"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("i36963"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i36957"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i36828"
                                                                          "i36826"
                                                                          "i36824"
                                                                          "i36822"
                                                                          "i36820"
                                                                          "i36818"
                                                                          "i36816"))
                                                                       #(ribcage
                                                                         (quasiquote)
                                                                         ((top))
                                                                         (((hygiene
                                                                             guile)
                                                                           .
                                                                           #(syntax-object
                                                                             quasiquote
                                                                             ((top))
                                                                             (hygiene
                                                                               guile))))))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp 36985 37237}#))
                                                           #{y 37236}#)))
                                                  #{tmp 37233}#)
                                                (let ((#{tmp 37238}#
                                                        ($sc-dispatch
                                                          #{y 37230}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp 37238}#
                                                    (@apply
                                                      (lambda (#{y 37241}#)
                                                        (#{k 37231}#
                                                          #{y 37241}#))
                                                      #{tmp 37238}#)
                                                    (let ((#{tmp 37242}#
                                                            ($sc-dispatch
                                                              #{y 37230}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp 37242}#
                                                        (@apply
                                                          (lambda (#{y 37245}#
                                                                   #{z 37246}#)
                                                            (#{f 37218}#
                                                              #{z 37246}#
                                                              (lambda (#{ls 37247}#)
                                                                (#{k 37231}#
                                                                  (append
                                                                    #{y 37245}#
                                                                    #{ls 37247}#)))))
                                                          #{tmp 37242}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g37000}#)
                                                                    #((m37001
                                                                        top))
                                                                    #("i37004"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i36998"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i36965"
                                                                      "i36966"
                                                                      "i36967"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("i36963"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i36957"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i36828"
                                                                     "i36826"
                                                                     "i36824"
                                                                     "i36822"
                                                                     "i36820"
                                                                     "i36818"
                                                                     "i36816"))
                                                                  #(ribcage
                                                                    (quasiquote)
                                                                    ((top))
                                                                    (((hygiene
                                                                        guile)
                                                                      .
                                                                      #(syntax-object
                                                                        quasiquote
                                                                        ((top))
                                                                        (hygiene
                                                                          guile))))))
                                                                 (hygiene
                                                                   guile))
                                                              #{x 37210}#))))))))))
                                       (#{f 37218}#
                                         #{x 37210}#
                                         (lambda (#{ls 37220}#)
                                           (let ((#{tmp 37222}#
                                                   ($sc-dispatch
                                                     #{ls 37220}#
                                                     'each-any)))
                                             (if #{tmp 37222}#
                                               (@apply
                                                 (lambda (#{ g36973 37225}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g36973}#)
                                                               #((m36974 top))
                                                               #("i36978"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("i36972"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i36963"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i36957"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("i36828"
                                                                "i36826"
                                                                "i36824"
                                                                "i36822"
                                                                "i36820"
                                                                "i36818"
                                                                "i36816"))
                                                             #(ribcage
                                                               (quasiquote)
                                                               ((top))
                                                               (((hygiene
                                                                   guile)
                                                                 .
                                                                 #(syntax-object
                                                                   quasiquote
                                                                   ((top))
                                                                   (hygiene
                                                                     guile))))))
                                                            (hygiene guile))
                                                         #{ g36973 37225}#))
                                                 #{tmp 37222}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls 37220}#))))))))))
                             #{tmp 37203}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("i36863"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i36832" "i36833"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i36828"
                                        "i36826"
                                        "i36824"
                                        "i36822"
                                        "i36820"
                                        "i36818"
                                        "i36816"))
                                     #(ribcage
                                       (quasiquote)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           quasiquote
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                 #{p 37110}#)))))))))))
       (#{vquasi 37087}#
         (lambda (#{p 37275}# #{lev 37276}#)
           (let ((#{tmp 37278}#
                   ($sc-dispatch #{p 37275}# '(any . any))))
             (if #{tmp 37278}#
               (@apply
                 (lambda (#{p 37282}# #{q 37283}#)
                   (let ((#{tmp 37285}#
                           ($sc-dispatch
                             #{p 37282}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("i36871" "i36872"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i36867" "i36868"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i36828"
                                       "i36826"
                                       "i36824"
                                       "i36822"
                                       "i36820"
                                       "i36818"
                                       "i36816"))
                                    #(ribcage
                                      (quasiquote)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          quasiquote
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 37285}#
                       (@apply
                         (lambda (#{p 37289}#)
                           (if (= #{lev 37276}# 0)
                             (#{quasilist* 37090}#
                               (map (lambda (#{tmp 36879 37328}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("i36877"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i36871" "i36872"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i36867" "i36868"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i36828"
                                                   "i36826"
                                                   "i36824"
                                                   "i36822"
                                                   "i36820"
                                                   "i36818"
                                                   "i36816"))
                                                #(ribcage
                                                  (quasiquote)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      quasiquote
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile))
                                            #{tmp 36879 37328}#))
                                    #{p 37289}#)
                               (#{vquasi 37087}# #{q 37283}# #{lev 37276}#))
                             (#{quasicons 37088}#
                               (#{quasicons 37088}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i36877"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i36871" "i36872"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i36867" "i36868"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i36828"
                                         "i36826"
                                         "i36824"
                                         "i36822"
                                         "i36820"
                                         "i36818"
                                         "i36816"))
                                      #(ribcage
                                        (quasiquote)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            quasiquote
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i36877"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i36871" "i36872"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i36867" "i36868"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i36828"
                                         "i36826"
                                         "i36824"
                                         "i36822"
                                         "i36820"
                                         "i36818"
                                         "i36816"))
                                      #(ribcage
                                        (quasiquote)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            quasiquote
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile)))
                                 (#{quasi 37086}#
                                   #{p 37289}#
                                   (#{1-}# #{lev 37276}#)))
                               (#{vquasi 37087}# #{q 37283}# #{lev 37276}#))))
                         #{tmp 37285}#)
                       (let ((#{tmp 37335}#
                               ($sc-dispatch
                                 #{p 37282}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i36871" "i36872"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i36867" "i36868"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i36828"
                                           "i36826"
                                           "i36824"
                                           "i36822"
                                           "i36820"
                                           "i36818"
                                           "i36816"))
                                        #(ribcage
                                          (quasiquote)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              quasiquote
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 37335}#
                           (@apply
                             (lambda (#{p 37339}#)
                               (if (= #{lev 37276}# 0)
                                 (#{quasiappend 37089}#
                                   (map (lambda (#{tmp 36884 37342}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i36882"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i36871" "i36872"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i36867" "i36868"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i36828"
                                                       "i36826"
                                                       "i36824"
                                                       "i36822"
                                                       "i36820"
                                                       "i36818"
                                                       "i36816"))
                                                    #(ribcage
                                                      (quasiquote)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          quasiquote
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{tmp 36884 37342}#))
                                        #{p 37339}#)
                                   (#{vquasi 37087}#
                                     #{q 37283}#
                                     #{lev 37276}#))
                                 (#{quasicons 37088}#
                                   (#{quasicons 37088}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i36882"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i36871" "i36872"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i36867" "i36868"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i36828"
                                             "i36826"
                                             "i36824"
                                             "i36822"
                                             "i36820"
                                             "i36818"
                                             "i36816"))
                                          #(ribcage
                                            (quasiquote)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                quasiquote
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i36882"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i36871" "i36872"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i36867" "i36868"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i36828"
                                             "i36826"
                                             "i36824"
                                             "i36822"
                                             "i36820"
                                             "i36818"
                                             "i36816"))
                                          #(ribcage
                                            (quasiquote)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                quasiquote
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile)))
                                     (#{quasi 37086}#
                                       #{p 37339}#
                                       (#{1-}# #{lev 37276}#)))
                                   (#{vquasi 37087}#
                                     #{q 37283}#
                                     #{lev 37276}#))))
                             #{tmp 37335}#)
                           (#{quasicons 37088}#
                             (#{quasi 37086}# #{p 37282}# #{lev 37276}#)
                             (#{vquasi 37087}# #{q 37283}# #{lev 37276}#)))))))
                 #{tmp 37278}#)
               (let ((#{tmp 37360}# ($sc-dispatch #{p 37275}# '())))
                 (if #{tmp 37360}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i36867" "i36868"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i36828"
                               "i36826"
                               "i36824"
                               "i36822"
                               "i36820"
                               "i36818"
                               "i36816"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                         ()))
                     #{tmp 37360}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 37275}#)))))))
       (#{quasicons 37088}#
         (lambda (#{x 37373}# #{y 37374}#)
           (let ((#{tmp 37375}# (list #{x 37373}# #{y 37374}#)))
             (let ((#{tmp 37376}#
                     ($sc-dispatch #{tmp 37375}# '(any any))))
               (if #{tmp 37376}#
                 (@apply
                   (lambda (#{x 37378}# #{y 37379}#)
                     (let ((#{tmp 37381}#
                             ($sc-dispatch
                               #{y 37379}#
                               '(#(atom "quote") any))))
                       (if #{tmp 37381}#
                         (@apply
                           (lambda (#{dy 37385}#)
                             (let ((#{tmp 37387}#
                                     ($sc-dispatch
                                       #{x 37378}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 37387}#
                                 (@apply
                                   (lambda (#{dx 37391}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("i36906"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("i36902"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i36896" "i36897"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i36891" "i36892"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i36828"
                                                  "i36826"
                                                  "i36824"
                                                  "i36822"
                                                  "i36820"
                                                  "i36818"
                                                  "i36816"))
                                               #(ribcage
                                                 (quasiquote)
                                                 ((top))
                                                 (((hygiene guile)
                                                   .
                                                   #(syntax-object
                                                     quasiquote
                                                     ((top))
                                                     (hygiene guile))))))
                                              (hygiene guile))
                                           (cons #{dx 37391}# #{dy 37385}#)))
                                   #{tmp 37387}#)
                                 (if (null? #{dy 37385}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i36908"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i36902"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i36896" "i36897"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i36891" "i36892"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i36828"
                                                "i36826"
                                                "i36824"
                                                "i36822"
                                                "i36820"
                                                "i36818"
                                                "i36816"))
                                             #(ribcage
                                               (quasiquote)
                                               ((top))
                                               (((hygiene guile)
                                                 .
                                                 #(syntax-object
                                                   quasiquote
                                                   ((top))
                                                   (hygiene guile))))))
                                            (hygiene guile))
                                         #{x 37378}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i36908"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i36902"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i36896" "i36897"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i36891" "i36892"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i36828"
                                                "i36826"
                                                "i36824"
                                                "i36822"
                                                "i36820"
                                                "i36818"
                                                "i36816"))
                                             #(ribcage
                                               (quasiquote)
                                               ((top))
                                               (((hygiene guile)
                                                 .
                                                 #(syntax-object
                                                   quasiquote
                                                   ((top))
                                                   (hygiene guile))))))
                                            (hygiene guile))
                                         #{x 37378}#
                                         #{y 37379}#)))))
                           #{tmp 37381}#)
                         (let ((#{tmp 37396}#
                                 ($sc-dispatch
                                   #{y 37379}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 37396}#
                             (@apply
                               (lambda (#{stuff 37400}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("i36911"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i36896" "i36897"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i36891" "i36892"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i36828"
                                              "i36826"
                                              "i36824"
                                              "i36822"
                                              "i36820"
                                              "i36818"
                                              "i36816"))
                                           #(ribcage
                                             (quasiquote)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 quasiquote
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       (cons #{x 37378}# #{stuff 37400}#)))
                               #{tmp 37396}#)
                             (let ((#{tmp 37401}#
                                     ($sc-dispatch
                                       #{y 37379}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 37401}#
                                 (@apply
                                   (lambda (#{stuff 37405}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("i36914"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i36896" "i36897"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i36891" "i36892"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i36828"
                                                  "i36826"
                                                  "i36824"
                                                  "i36822"
                                                  "i36820"
                                                  "i36818"
                                                  "i36816"))
                                               #(ribcage
                                                 (quasiquote)
                                                 ((top))
                                                 (((hygiene guile)
                                                   .
                                                   #(syntax-object
                                                     quasiquote
                                                     ((top))
                                                     (hygiene guile))))))
                                              (hygiene guile))
                                           (cons #{x 37378}# #{stuff 37405}#)))
                                   #{tmp 37401}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("i36916"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i36896" "i36897"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i36891" "i36892"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i36828"
                                              "i36826"
                                              "i36824"
                                              "i36822"
                                              "i36820"
                                              "i36818"
                                              "i36816"))
                                           #(ribcage
                                             (quasiquote)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 quasiquote
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       #{x 37378}#
                                       #{y 37379}#))))))))
                   #{tmp 37376}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 37375}#))))))
       (#{quasiappend 37089}#
         (lambda (#{x 37416}# #{y 37417}#)
           (let ((#{tmp 37419}#
                   ($sc-dispatch #{y 37417}# '(#(atom "quote") ()))))
             (if #{tmp 37419}#
               (@apply
                 (lambda ()
                   (if (null? #{x 37416}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("i36920" "i36921"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("i36828"
                             "i36826"
                             "i36824"
                             "i36822"
                             "i36820"
                             "i36818"
                             "i36816"))
                          #(ribcage
                            (quasiquote)
                            ((top))
                            (((hygiene guile)
                              .
                              #(syntax-object
                                quasiquote
                                ((top))
                                (hygiene guile))))))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 37416}#))
                       (car #{x 37416}#)
                       (let ((#{tmp 37424}#
                               ($sc-dispatch #{x 37416}# 'each-any)))
                         (if #{tmp 37424}#
                           (@apply
                             (lambda (#{p 37428}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("i36932"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i36920" "i36921"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i36828"
                                            "i36826"
                                            "i36824"
                                            "i36822"
                                            "i36820"
                                            "i36818"
                                            "i36816"))
                                         #(ribcage
                                           (quasiquote)
                                           ((top))
                                           (((hygiene guile)
                                             .
                                             #(syntax-object
                                               quasiquote
                                               ((top))
                                               (hygiene guile))))))
                                        (hygiene guile))
                                     #{p 37428}#))
                             #{tmp 37424}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 37416}#))))))
                 #{tmp 37419}#)
               (if (null? #{x 37416}#)
                 #{y 37417}#
                 (let ((#{tmp 37436}# (list #{x 37416}# #{y 37417}#)))
                   (let ((#{tmp 37437}#
                           ($sc-dispatch #{tmp 37436}# '(each-any any))))
                     (if #{tmp 37437}#
                       (@apply
                         (lambda (#{p 37439}# #{y 37440}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("i36943" "i36944"))
                                     #(ribcage #(_) #((top)) #("i36935"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("i36920" "i36921"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i36828"
                                        "i36826"
                                        "i36824"
                                        "i36822"
                                        "i36820"
                                        "i36818"
                                        "i36816"))
                                     #(ribcage
                                       (quasiquote)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           quasiquote
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                 (append #{p 37439}# (list #{y 37440}#))))
                         #{tmp 37437}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 37436}#)))))))))
       (#{quasilist* 37090}#
         (lambda (#{x 37444}# #{y 37445}#)
           (letrec*
             ((#{f 37446}#
                (lambda (#{x 37550}#)
                  (if (null? #{x 37550}#)
                    #{y 37445}#
                    (#{quasicons 37088}#
                      (car #{x 37550}#)
                      (#{f 37446}# (cdr #{x 37550}#)))))))
             (#{f 37446}# #{x 37444}#))))
       (#{emit 37092}#
         (lambda (#{x 37553}#)
           (let ((#{tmp 37555}#
                   ($sc-dispatch #{x 37553}# '(#(atom "quote") any))))
             (if #{tmp 37555}#
               (@apply
                 (lambda (#{x 37559}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("i37010"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i37007"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i36828"
                                "i36826"
                                "i36824"
                                "i36822"
                                "i36820"
                                "i36818"
                                "i36816"))
                             #(ribcage
                               (quasiquote)
                               ((top))
                               (((hygiene guile)
                                 .
                                 #(syntax-object
                                   quasiquote
                                   ((top))
                                   (hygiene guile))))))
                            (hygiene guile))
                         #{x 37559}#))
                 #{tmp 37555}#)
               (let ((#{tmp 37560}#
                       ($sc-dispatch
                         #{x 37553}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 37560}#
                   (@apply
                     (lambda (#{x 37564}#)
                       (let ((#{tmp 37565}# (map #{emit 37092}# #{x 37564}#)))
                         (let ((#{tmp 37566}#
                                 ($sc-dispatch #{tmp 37565}# 'each-any)))
                           (if #{tmp 37566}#
                             (@apply
                               (lambda (#{ g37015 37568}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g37015}#)
                                             #((m37016 top))
                                             #("i37020"))
                                           #(ribcage #(x) #((top)) #("i37013"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i37007"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i36828"
                                              "i36826"
                                              "i36824"
                                              "i36822"
                                              "i36820"
                                              "i36818"
                                              "i36816"))
                                           #(ribcage
                                             (quasiquote)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 quasiquote
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       #{ g37015 37568}#))
                               #{tmp 37566}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 37565}#)))))
                     #{tmp 37560}#)
                   (let ((#{tmp 37569}#
                           ($sc-dispatch
                             #{x 37553}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 37569}#
                       (@apply
                         (lambda (#{x 37573}# #{y 37574}#)
                           (letrec*
                             ((#{f 37575}#
                                (lambda (#{x* 37578}#)
                                  (if (null? #{x* 37578}#)
                                    (#{emit 37092}# #{y 37574}#)
                                    (let ((#{tmp 37579}#
                                            (list (#{emit 37092}#
                                                    (car #{x* 37578}#))
                                                  (#{f 37575}#
                                                    (cdr #{x* 37578}#)))))
                                      (let ((#{tmp 37580}#
                                              ($sc-dispatch
                                                #{tmp 37579}#
                                                '(any any))))
                                        (if #{tmp 37580}#
                                          (@apply
                                            (lambda (#{ g37035 37582}#
                                                     #{ g37034 37583}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g37035}#
                                                            #{ g37034}#)
                                                          #((m37036 top)
                                                            (m37036 top))
                                                          #("i37040" "i37041"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("i37029" "i37030"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("i37025" "i37026"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i37007"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i36828"
                                                           "i36826"
                                                           "i36824"
                                                           "i36822"
                                                           "i36820"
                                                           "i36818"
                                                           "i36816"))
                                                        #(ribcage
                                                          (quasiquote)
                                                          ((top))
                                                          (((hygiene guile)
                                                            .
                                                            #(syntax-object
                                                              quasiquote
                                                              ((top))
                                                              (hygiene
                                                                guile))))))
                                                       (hygiene guile))
                                                    #{ g37035 37582}#
                                                    #{ g37034 37583}#))
                                            #{tmp 37580}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 37579}#))))))))
                             (#{f 37575}# #{x 37573}#)))
                         #{tmp 37569}#)
                       (let ((#{tmp 37584}#
                               ($sc-dispatch
                                 #{x 37553}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 37584}#
                           (@apply
                             (lambda (#{x 37588}#)
                               (let ((#{tmp 37589}#
                                       (map #{emit 37092}# #{x 37588}#)))
                                 (let ((#{tmp 37590}#
                                         ($sc-dispatch
                                           #{tmp 37589}#
                                           'each-any)))
                                   (if #{tmp 37590}#
                                     (@apply
                                       (lambda (#{ g37047 37592}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g37047}#)
                                                     #((m37048 top))
                                                     #("i37052"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37045"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37007"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i36828"
                                                      "i36826"
                                                      "i36824"
                                                      "i36822"
                                                      "i36820"
                                                      "i36818"
                                                      "i36816"))
                                                   #(ribcage
                                                     (quasiquote)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         quasiquote
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               #{ g37047 37592}#))
                                       #{tmp 37590}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 37589}#)))))
                             #{tmp 37584}#)
                           (let ((#{tmp 37593}#
                                   ($sc-dispatch
                                     #{x 37553}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 37593}#
                               (@apply
                                 (lambda (#{x 37597}#)
                                   (let ((#{tmp 37598}#
                                           (map #{emit 37092}# #{x 37597}#)))
                                     (let ((#{tmp 37599}#
                                             ($sc-dispatch
                                               #{tmp 37598}#
                                               'each-any)))
                                       (if #{tmp 37599}#
                                         (@apply
                                           (lambda (#{ g37059 37601}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g37059}#)
                                                         #((m37060 top))
                                                         #("i37064"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i37057"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i37007"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i36828"
                                                          "i36826"
                                                          "i36824"
                                                          "i36822"
                                                          "i36820"
                                                          "i36818"
                                                          "i36816"))
                                                       #(ribcage
                                                         (quasiquote)
                                                         ((top))
                                                         (((hygiene guile)
                                                           .
                                                           #(syntax-object
                                                             quasiquote
                                                             ((top))
                                                             (hygiene
                                                               guile))))))
                                                      (hygiene guile))
                                                   #{ g37059 37601}#))
                                           #{tmp 37599}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 37598}#)))))
                                 #{tmp 37593}#)
                               (let ((#{tmp 37602}#
                                       ($sc-dispatch
                                         #{x 37553}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 37602}#
                                   (@apply
                                     (lambda (#{x 37606}#)
                                       (let ((#{tmp 37607}#
                                               (#{emit 37092}# #{x 37606}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g37071}#)
                                                     #((m37072 top))
                                                     #("i37075"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37069"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37007"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i36828"
                                                      "i36826"
                                                      "i36824"
                                                      "i36822"
                                                      "i36820"
                                                      "i36818"
                                                      "i36816"))
                                                   #(ribcage
                                                     (quasiquote)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         quasiquote
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               #{tmp 37607}#)))
                                     #{tmp 37602}#)
                                   (let ((#{tmp 37610}#
                                           ($sc-dispatch
                                             #{x 37553}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 37610}#
                                       (@apply
                                         (lambda (#{x 37614}#) #{x 37614}#)
                                         #{tmp 37610}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 37553}#))))))))))))))))))
      (lambda (#{x 37093}#)
        (let ((#{tmp 37095}#
                ($sc-dispatch #{x 37093}# '(_ any))))
          (if #{tmp 37095}#
            (@apply
              (lambda (#{e 37099}#)
                (#{emit 37092}# (#{quasi 37086}# #{e 37099}# 0)))
              #{tmp 37095}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 37093}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 37670}#)
      (letrec*
        ((#{read-file 37671}#
           (lambda (#{fn 37787}# #{k 37788}#)
             (let ((#{p 37789}# (open-input-file #{fn 37787}#)))
               (letrec*
                 ((#{f 37790}#
                    (lambda (#{x 37847}# #{result 37848}#)
                      (if (eof-object? #{x 37847}#)
                        (begin
                          (close-input-port #{p 37789}#)
                          (reverse #{result 37848}#))
                        (#{f 37790}#
                          (read #{p 37789}#)
                          (cons (datum->syntax #{k 37788}# #{x 37847}#)
                                #{result 37848}#))))))
                 (#{f 37790}# (read #{p 37789}#) '()))))))
        (let ((#{tmp 37673}#
                ($sc-dispatch #{x 37670}# '(any any))))
          (if #{tmp 37673}#
            (@apply
              (lambda (#{k 37677}# #{filename 37678}#)
                (let ((#{fn 37679}# (syntax->datum #{filename 37678}#)))
                  (let ((#{tmp 37680}#
                          (#{read-file 37671}#
                            #{fn 37679}#
                            #{filename 37678}#)))
                    (let ((#{tmp 37681}#
                            ($sc-dispatch #{tmp 37680}# 'each-any)))
                      (if #{tmp 37681}#
                        (@apply
                          (lambda (#{exp 37699}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("i37667"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("i37662"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("i37658" "i37659"))
                                      #(ribcage (read-file) ((top)) ("i37642"))
                                      #(ribcage #(x) #((top)) #("i37641"))
                                      #(ribcage
                                        (include)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            include
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                  #{exp 37699}#))
                          #{tmp 37681}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 37680}#))))))
              #{tmp 37673}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 37670}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 37868}#)
      (let ((#{tmp 37870}#
              ($sc-dispatch #{x 37868}# '(any any))))
        (if #{tmp 37870}#
          (@apply
            (lambda (#{k 37874}# #{filename 37875}#)
              (let ((#{fn 37876}# (syntax->datum #{filename 37875}#)))
                (let ((#{tmp 37877}#
                        (datum->syntax
                          #{filename 37875}#
                          (let ((#{t 37880}# (%search-load-path #{fn 37876}#)))
                            (if #{t 37880}#
                              #{t 37880}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 37868}#
                                #{filename 37875}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i37862"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i37858"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("i37854" "i37855"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i37851"))
                            #(ribcage
                              (include-from-path)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  include-from-path
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        #{tmp 37877}#))))
            #{tmp 37870}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 37868}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 37890}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 37890}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 37894}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 37894}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 37951}#)
      (let ((#{tmp 37953}#
              ($sc-dispatch
                #{x 37951}#
                '(_ any any . each-any))))
        (if #{tmp 37953}#
          (@apply
            (lambda (#{e 37957}# #{m1 37958}# #{m2 37959}#)
              (let ((#{tmp 37960}#
                      (letrec*
                        ((#{f 38021}#
                           (lambda (#{clause 38024}# #{clauses 38025}#)
                             (if (null? #{clauses 38025}#)
                               (let ((#{tmp 38027}#
                                       ($sc-dispatch
                                         #{clause 38024}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("i37910"
                                                    "i37911"
                                                    "i37912"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("i37900"
                                                    "i37901"
                                                    "i37902"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i37897"))
                                                #(ribcage
                                                  (case)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      case
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 38027}#
                                   (@apply
                                     (lambda (#{e1 38031}# #{e2 38032}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("i37919" "i37920"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("i37910"
                                                     "i37911"
                                                     "i37912"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("i37900"
                                                     "i37901"
                                                     "i37902"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i37897"))
                                                 #(ribcage
                                                   (case)
                                                   ((top))
                                                   (((hygiene guile)
                                                     .
                                                     #(syntax-object
                                                       case
                                                       ((top))
                                                       (hygiene guile))))))
                                                (hygiene guile))
                                             (cons #{e1 38031}# #{e2 38032}#)))
                                     #{tmp 38027}#)
                                   (let ((#{tmp 38033}#
                                           ($sc-dispatch
                                             #{clause 38024}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 38033}#
                                       (@apply
                                         (lambda (#{k 38037}#
                                                  #{e1 38038}#
                                                  #{e2 38039}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("i37925"
                                                         "i37926"
                                                         "i37927"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i37910"
                                                         "i37911"
                                                         "i37912"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i37900"
                                                         "i37901"
                                                         "i37902"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i37897"))
                                                     #(ribcage
                                                       (case)
                                                       ((top))
                                                       (((hygiene guile)
                                                         .
                                                         #(syntax-object
                                                           case
                                                           ((top))
                                                           (hygiene guile))))))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i37925"
                                                               "i37926"
                                                               "i37927"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i37910"
                                                               "i37911"
                                                               "i37912"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i37900"
                                                               "i37901"
                                                               "i37902"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i37897"))
                                                           #(ribcage
                                                             (case)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 case
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i37925"
                                                               "i37926"
                                                               "i37927"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i37910"
                                                               "i37911"
                                                               "i37912"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i37900"
                                                               "i37901"
                                                               "i37902"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i37897"))
                                                           #(ribcage
                                                             (case)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 case
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i37925"
                                                                     "i37926"
                                                                     "i37927"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i37910"
                                                                     "i37911"
                                                                     "i37912"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i37900"
                                                                     "i37901"
                                                                     "i37902"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i37897"))
                                                                 #(ribcage
                                                                   (case)
                                                                   ((top))
                                                                   (((hygiene
                                                                       guile)
                                                                     .
                                                                     #(syntax-object
                                                                       case
                                                                       ((top))
                                                                       (hygiene
                                                                         guile))))))
                                                                (hygiene
                                                                  guile))
                                                             #{k 38037}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i37925"
                                                               "i37926"
                                                               "i37927"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i37910"
                                                               "i37911"
                                                               "i37912"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i37900"
                                                               "i37901"
                                                               "i37902"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i37897"))
                                                           #(ribcage
                                                             (case)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 case
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                       (cons #{e1 38038}#
                                                             #{e2 38039}#))))
                                         #{tmp 38033}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 37951}#
                                         #{clause 38024}#)))))
                               (let ((#{tmp 38047}#
                                       (#{f 38021}#
                                         (car #{clauses 38025}#)
                                         (cdr #{clauses 38025}#))))
                                 (let ((#{tmp 38050}#
                                         ($sc-dispatch
                                           #{clause 38024}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 38050}#
                                     (@apply
                                       (lambda (#{k 38054}#
                                                #{e1 38055}#
                                                #{e2 38056}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("i37941"
                                                       "i37942"
                                                       "i37943"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("i37937"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("i37910"
                                                       "i37911"
                                                       "i37912"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("i37900"
                                                       "i37901"
                                                       "i37902"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37897"))
                                                   #(ribcage
                                                     (case)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         case
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i37941"
                                                             "i37942"
                                                             "i37943"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i37937"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i37910"
                                                             "i37911"
                                                             "i37912"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i37900"
                                                             "i37901"
                                                             "i37902"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i37897"))
                                                         #(ribcage
                                                           (case)
                                                           ((top))
                                                           (((hygiene guile)
                                                             .
                                                             #(syntax-object
                                                               case
                                                               ((top))
                                                               (hygiene
                                                                 guile))))))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i37941"
                                                             "i37942"
                                                             "i37943"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i37937"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i37910"
                                                             "i37911"
                                                             "i37912"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i37900"
                                                             "i37901"
                                                             "i37902"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i37897"))
                                                         #(ribcage
                                                           (case)
                                                           ((top))
                                                           (((hygiene guile)
                                                             .
                                                             #(syntax-object
                                                               case
                                                               ((top))
                                                               (hygiene
                                                                 guile))))))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i37941"
                                                                   "i37942"
                                                                   "i37943"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i37937"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i37910"
                                                                   "i37911"
                                                                   "i37912"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i37900"
                                                                   "i37901"
                                                                   "i37902"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i37897"))
                                                               #(ribcage
                                                                 (case)
                                                                 ((top))
                                                                 (((hygiene
                                                                     guile)
                                                                   .
                                                                   #(syntax-object
                                                                     case
                                                                     ((top))
                                                                     (hygiene
                                                                       guile))))))
                                                              (hygiene guile))
                                                           #{k 38054}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i37941"
                                                             "i37942"
                                                             "i37943"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i37937"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i37910"
                                                             "i37911"
                                                             "i37912"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i37900"
                                                             "i37901"
                                                             "i37902"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i37897"))
                                                         #(ribcage
                                                           (case)
                                                           ((top))
                                                           (((hygiene guile)
                                                             .
                                                             #(syntax-object
                                                               case
                                                               ((top))
                                                               (hygiene
                                                                 guile))))))
                                                        (hygiene guile))
                                                     (cons #{e1 38055}#
                                                           #{e2 38056}#))
                                               #{tmp 38047}#))
                                       #{tmp 38050}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 37951}#
                                       #{clause 38024}#))))))))
                        (#{f 38021}# #{m1 37958}# #{m2 37959}#))))
                (let ((#{body 37961}# #{tmp 37960}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("i37908"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("i37900" "i37901" "i37902"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i37897"))
                            #(ribcage
                              (case)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  case
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("i37908"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("i37900" "i37901" "i37902"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i37897"))
                                        #(ribcage
                                          (case)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              case
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    #{e 37957}#))
                        #{body 37961}#))))
            #{tmp 37953}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 37951}#))))))

(define make-variable-transformer
  (lambda (#{proc 38075}#)
    (if (procedure? #{proc 38075}#)
      (letrec*
        ((#{trans 38076}#
           (lambda (#{x 38082}#)
             (#{proc 38075}# #{x 38082}#))))
        (begin
          (set-procedure-property!
            #{trans 38076}#
            'variable-transformer
            #t)
          #{trans 38076}#))
      (error "variable transformer not a procedure"
             #{proc 38075}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 38115}#)
      (let ((#{tmp 38117}#
              ($sc-dispatch #{x 38115}# '(_ any))))
        (if #{tmp 38117}#
          (@apply
            (lambda (#{e 38121}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("i38090"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i38087"))
                        #(ribcage
                          (identifier-syntax)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              identifier-syntax
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("i38090"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i38087"))
                         #(ribcage
                           (identifier-syntax)
                           ((top))
                           (((hygiene guile)
                             .
                             #(syntax-object
                               identifier-syntax
                               ((top))
                               (hygiene guile))))))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("i38090"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i38087"))
                           #(ribcage
                             (identifier-syntax)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 identifier-syntax
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("i38090"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i38087"))
                           #(ribcage
                             (identifier-syntax)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 identifier-syntax
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("i38090"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38087"))
                              #(ribcage
                                (identifier-syntax)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    identifier-syntax
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("i38090"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38087"))
                              #(ribcage
                                (identifier-syntax)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    identifier-syntax
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("i38090"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i38087"))
                                    #(ribcage
                                      (identifier-syntax)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          identifier-syntax
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38090"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38087"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i38090"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i38087"))
                                      #(ribcage
                                        (identifier-syntax)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            identifier-syntax
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i38090"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i38087"))
                                      #(ribcage
                                        (identifier-syntax)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            identifier-syntax
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i38090"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i38087"))
                                          #(ribcage
                                            (identifier-syntax)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                identifier-syntax
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      #{e 38121}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38090"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38087"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38090"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38087"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38090"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38087"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i38090"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i38087"))
                                          #(ribcage
                                            (identifier-syntax)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                identifier-syntax
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      (cons #{e 38121}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i38090"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i38087"))
                                                 #(ribcage
                                                   (identifier-syntax)
                                                   ((top))
                                                   (((hygiene guile)
                                                     .
                                                     #(syntax-object
                                                       identifier-syntax
                                                       ((top))
                                                       (hygiene guile))))))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i38090"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i38087"))
                                                 #(ribcage
                                                   (identifier-syntax)
                                                   ((top))
                                                   (((hygiene guile)
                                                     .
                                                     #(syntax-object
                                                       identifier-syntax
                                                       ((top))
                                                       (hygiene guile))))))
                                                (hygiene guile)))))))))
            #{tmp 38117}#)
          (let ((#{tmp 38122}#
                  ($sc-dispatch
                    #{x 38115}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i38087"))
                               #(ribcage
                                 (identifier-syntax)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     identifier-syntax
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 38122}#
                  (@apply
                    (lambda (#{id 38126}#
                             #{exp1 38127}#
                             #{var 38128}#
                             #{val 38129}#
                             #{exp2 38130}#)
                      (if (identifier? #{id 38126}#)
                        (identifier? #{var 38128}#)
                        #f))
                    #{tmp 38122}#)
                  #f)
              (@apply
                (lambda (#{id 38131}#
                         #{exp1 38132}#
                         #{var 38133}#
                         #{val 38134}#
                         #{exp2 38135}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("i38105" "i38106" "i38107" "i38108" "i38109"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38087"))
                            #(ribcage
                              (identifier-syntax)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  identifier-syntax
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("i38105"
                                      "i38106"
                                      "i38107"
                                      "i38108"
                                      "i38109"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i38087"))
                                  #(ribcage
                                    (identifier-syntax)
                                    ((top))
                                    (((hygiene guile)
                                      .
                                      #(syntax-object
                                        identifier-syntax
                                        ((top))
                                        (hygiene guile))))))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("i38105"
                                       "i38106"
                                       "i38107"
                                       "i38108"
                                       "i38109"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i38087"))
                                   #(ribcage
                                     (identifier-syntax)
                                     ((top))
                                     (((hygiene guile)
                                       .
                                       #(syntax-object
                                         identifier-syntax
                                         ((top))
                                         (hygiene guile))))))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i38105"
                                         "i38106"
                                         "i38107"
                                         "i38108"
                                         "i38109"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38087"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i38105"
                                         "i38106"
                                         "i38107"
                                         "i38108"
                                         "i38109"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38087"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i38105"
                                            "i38106"
                                            "i38107"
                                            "i38108"
                                            "i38109"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i38087"))
                                        #(ribcage
                                          (identifier-syntax)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              identifier-syntax
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i38105"
                                            "i38106"
                                            "i38107"
                                            "i38108"
                                            "i38109"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i38087"))
                                        #(ribcage
                                          (identifier-syntax)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              identifier-syntax
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("i38105"
                                             "i38106"
                                             "i38107"
                                             "i38108"
                                             "i38109"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i38087"))
                                         #(ribcage
                                           (identifier-syntax)
                                           ((top))
                                           (((hygiene guile)
                                             .
                                             #(syntax-object
                                               identifier-syntax
                                               ((top))
                                               (hygiene guile))))))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38105"
                                                        "i38106"
                                                        "i38107"
                                                        "i38108"
                                                        "i38109"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38087"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{var 38133}#
                                                #{val 38134}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38105"
                                                        "i38106"
                                                        "i38107"
                                                        "i38108"
                                                        "i38109"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38087"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{exp2 38135}#))
                                    (list (cons #{id 38131}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i38105"
                                                         "i38106"
                                                         "i38107"
                                                         "i38108"
                                                         "i38109"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i38087"))
                                                     #(ribcage
                                                       (identifier-syntax)
                                                       ((top))
                                                       (((hygiene guile)
                                                         .
                                                         #(syntax-object
                                                           identifier-syntax
                                                           ((top))
                                                           (hygiene guile))))))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i38105"
                                                         "i38106"
                                                         "i38107"
                                                         "i38108"
                                                         "i38109"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i38087"))
                                                     #(ribcage
                                                       (identifier-syntax)
                                                       ((top))
                                                       (((hygiene guile)
                                                         .
                                                         #(syntax-object
                                                           identifier-syntax
                                                           ((top))
                                                           (hygiene guile))))))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38105"
                                                        "i38106"
                                                        "i38107"
                                                        "i38108"
                                                        "i38109"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38087"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                (cons #{exp1 38132}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i38105"
                                                               "i38106"
                                                               "i38107"
                                                               "i38108"
                                                               "i38109"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38087"))
                                                           #(ribcage
                                                             (identifier-syntax)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 identifier-syntax
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i38105"
                                                               "i38106"
                                                               "i38107"
                                                               "i38108"
                                                               "i38109"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38087"))
                                                           #(ribcage
                                                             (identifier-syntax)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 identifier-syntax
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))))))
                                    (list #{id 38131}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38105"
                                                        "i38106"
                                                        "i38107"
                                                        "i38108"
                                                        "i38109"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38087"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i38105"
                                                              "i38106"
                                                              "i38107"
                                                              "i38108"
                                                              "i38109"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i38087"))
                                                          #(ribcage
                                                            (identifier-syntax)
                                                            ((top))
                                                            (((hygiene guile)
                                                              .
                                                              #(syntax-object
                                                                identifier-syntax
                                                                ((top))
                                                                (hygiene
                                                                  guile))))))
                                                         (hygiene guile))
                                                      #{id 38131}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38105"
                                                        "i38106"
                                                        "i38107"
                                                        "i38108"
                                                        "i38109"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38087"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{exp1 38132}#))))))
                #{tmp 38122}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 38115}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 38168}#)
      (let ((#{tmp 38170}#
              ($sc-dispatch
                #{x 38168}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 38170}#
          (@apply
            (lambda (#{id 38174}#
                     #{args 38175}#
                     #{b0 38176}#
                     #{b1 38177}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("i38150" "i38151" "i38152" "i38153"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i38147"))
                        #(ribcage
                          (define*)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              define*
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    #{id 38174}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("i38150" "i38151" "i38152" "i38153"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38147"))
                              #(ribcage
                                (define*)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    define*
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          (cons #{args 38175}#
                                (cons #{b0 38176}# #{b1 38177}#)))))
            #{tmp 38170}#)
          (let ((#{tmp 38178}#
                  ($sc-dispatch #{x 38168}# '(_ any any))))
            (if (if #{tmp 38178}#
                  (@apply
                    (lambda (#{id 38182}# #{val 38183}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i38160" "i38161"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38147"))
                            #(ribcage
                              (define*)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  define*
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))))
                    #{tmp 38178}#)
                  #f)
              (@apply
                (lambda (#{id 38184}# #{val 38185}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i38164" "i38165"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38147"))
                            #(ribcage
                              (define*)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  define*
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        #{id 38184}#
                        #{val 38185}#))
                #{tmp 38178}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 38168}#))))))))

