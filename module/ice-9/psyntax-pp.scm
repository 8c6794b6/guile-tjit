(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{top-level-eval-hook 4261}#
     (lambda (#{x 28515}# #{mod 28516}#)
       (primitive-eval #{x 28515}#)))
   (#{maybe-name-value! 4266}#
     (lambda (#{name 16653}# #{val 16654}#)
       (if (if (struct? #{val 16654}#)
             (eq? (struct-vtable #{val 16654}#)
                  (vector-ref %expanded-vtables 13))
             #f)
         (let ((#{meta 16661}# (struct-ref #{val 16654}# 1)))
           (if (not (assq 'name #{meta 16661}#))
             (let ((#{v 16666}#
                     (cons (cons 'name #{name 16653}#) #{meta 16661}#)))
               (struct-set! #{val 16654}# 1 #{v 16666}#)))))))
   (#{build-application 4268}#
     (lambda (#{source 16378}#
              #{fun-exp 16379}#
              #{arg-exps 16380}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 11)
         #{source 16378}#
         #{fun-exp 16379}#
         #{arg-exps 16380}#)))
   (#{build-conditional 4269}#
     (lambda (#{source 16386}#
              #{test-exp 16387}#
              #{then-exp 16388}#
              #{else-exp 16389}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 10)
         #{source 16386}#
         #{test-exp 16387}#
         #{then-exp 16388}#
         #{else-exp 16389}#)))
   (#{build-dynlet 4270}#
     (lambda (#{source 16396}#
              #{fluids 16397}#
              #{vals 16398}#
              #{body 16399}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 17)
         #{source 16396}#
         #{fluids 16397}#
         #{vals 16398}#
         #{body 16399}#)))
   (#{build-lexical-reference 4271}#
     (lambda (#{type 28517}#
              #{source 28518}#
              #{name 28519}#
              #{var 28520}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 3)
         #{source 28518}#
         #{name 28519}#
         #{var 28520}#)))
   (#{build-lexical-assignment 4272}#
     (lambda (#{source 16406}#
              #{name 16407}#
              #{var 16408}#
              #{exp 16409}#)
       (begin
         (if (if (struct? #{exp 16409}#)
               (eq? (struct-vtable #{exp 16409}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 16425}# (struct-ref #{exp 16409}# 1)))
             (if (not (assq 'name #{meta 16425}#))
               (let ((#{v 16432}#
                       (cons (cons 'name #{name 16407}#) #{meta 16425}#)))
                 (struct-set! #{exp 16409}# 1 #{v 16432}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 4)
           #{source 16406}#
           #{name 16407}#
           #{var 16408}#
           #{exp 16409}#))))
   (#{analyze-variable 4273}#
     (lambda (#{mod 28526}#
              #{var 28527}#
              #{modref-cont 28528}#
              #{bare-cont 28529}#)
       (if (not #{mod 28526}#)
         (#{bare-cont 28529}# #{var 28527}#)
         (let ((#{kind 28530}# (car #{mod 28526}#))
               (#{mod 28531}# (cdr #{mod 28526}#)))
           (if (eqv? #{kind 28530}# 'public)
             (#{modref-cont 28528}#
               #{mod 28531}#
               #{var 28527}#
               #t)
             (if (eqv? #{kind 28530}# 'private)
               (if (not (equal?
                          #{mod 28531}#
                          (module-name (current-module))))
                 (#{modref-cont 28528}#
                   #{mod 28531}#
                   #{var 28527}#
                   #f)
                 (#{bare-cont 28529}# #{var 28527}#))
               (if (eqv? #{kind 28530}# 'bare)
                 (#{bare-cont 28529}# #{var 28527}#)
                 (if (eqv? #{kind 28530}# 'hygiene)
                   (if (if (not (equal?
                                  #{mod 28531}#
                                  (module-name (current-module))))
                         (module-variable
                           (resolve-module #{mod 28531}#)
                           #{var 28527}#)
                         #f)
                     (#{modref-cont 28528}#
                       #{mod 28531}#
                       #{var 28527}#
                       #f)
                     (#{bare-cont 28529}# #{var 28527}#))
                   (syntax-violation
                     #f
                     "bad module kind"
                     #{var 28527}#
                     #{mod 28531}#)))))))))
   (#{build-global-reference 4274}#
     (lambda (#{source 28546}# #{var 28547}# #{mod 28548}#)
       (#{analyze-variable 4273}#
         #{mod 28548}#
         #{var 28547}#
         (lambda (#{mod 28551}# #{var 28552}# #{public? 28553}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 5)
             #{source 28546}#
             #{mod 28551}#
             #{var 28552}#
             #{public? 28553}#))
         (lambda (#{var 28561}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 7)
             #{source 28546}#
             #{var 28561}#)))))
   (#{build-global-assignment 4275}#
     (lambda (#{source 16441}#
              #{var 16442}#
              #{exp 16443}#
              #{mod 16444}#)
       (begin
         (if (if (struct? #{exp 16443}#)
               (eq? (struct-vtable #{exp 16443}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 16460}# (struct-ref #{exp 16443}# 1)))
             (if (not (assq 'name #{meta 16460}#))
               (let ((#{v 16467}#
                       (cons (cons 'name #{var 16442}#) #{meta 16460}#)))
                 (struct-set! #{exp 16443}# 1 #{v 16467}#)))))
         (#{analyze-variable 4273}#
           #{mod 16444}#
           #{var 16442}#
           (lambda (#{mod 16472}# #{var 16473}# #{public? 16474}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{source 16441}#
               #{mod 16472}#
               #{var 16473}#
               #{public? 16474}#
               #{exp 16443}#))
           (lambda (#{var 16482}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{source 16441}#
               #{var 16482}#
               #{exp 16443}#))))))
   (#{build-global-definition 4276}#
     (lambda (#{source 28567}# #{var 28568}# #{exp 28569}#)
       (begin
         (if (if (struct? #{exp 28569}#)
               (eq? (struct-vtable #{exp 28569}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 28585}# (struct-ref #{exp 28569}# 1)))
             (if (not (assq 'name #{meta 28585}#))
               (let ((#{v 28592}#
                       (cons (cons 'name #{var 28568}#) #{meta 28585}#)))
                 (struct-set! #{exp 28569}# 1 #{v 28592}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 9)
           #{source 28567}#
           #{var 28568}#
           #{exp 28569}#))))
   (#{build-simple-lambda 4277}#
     (lambda (#{src 16488}#
              #{req 16489}#
              #{rest 16490}#
              #{vars 16491}#
              #{meta 16492}#
              #{exp 16493}#)
       (let ((#{body 16499}#
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 14)
                 #{src 16488}#
                 #{req 16489}#
                 #f
                 #{rest 16490}#
                 #f
                 '()
                 #{vars 16491}#
                 #{exp 16493}#
                 #f)))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 13)
           #{src 16488}#
           #{meta 16492}#
           #{body 16499}#))))
   (#{build-sequence 4282}#
     (lambda (#{src 28600}# #{exps 28601}#)
       (if (null? (cdr #{exps 28601}#))
         (car #{exps 28601}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 12)
           #{src 28600}#
           #{exps 28601}#))))
   (#{build-let 4283}#
     (lambda (#{src 16511}#
              #{ids 16512}#
              #{vars 16513}#
              #{val-exps 16514}#
              #{body-exp 16515}#)
       (begin
         (for-each
           #{maybe-name-value! 4266}#
           #{ids 16512}#
           #{val-exps 16514}#)
         (if (null? #{vars 16513}#)
           #{body-exp 16515}#
           (make-struct/no-tail
             (vector-ref %expanded-vtables 15)
             #{src 16511}#
             #{ids 16512}#
             #{vars 16513}#
             #{val-exps 16514}#
             #{body-exp 16515}#)))))
   (#{build-named-let 4284}#
     (lambda (#{src 16539}#
              #{ids 16540}#
              #{vars 16541}#
              #{val-exps 16542}#
              #{body-exp 16543}#)
       (let ((#{f 16544}# (car #{vars 16541}#))
             (#{f-name 16545}# (car #{ids 16540}#))
             (#{vars 16546}# (cdr #{vars 16541}#))
             (#{ids 16547}# (cdr #{ids 16540}#)))
         (let ((#{proc 16548}#
                 (let ((#{body 16568}#
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 14)
                           #{src 16539}#
                           #{ids 16547}#
                           #f
                           #f
                           #f
                           '()
                           #{vars 16546}#
                           #{body-exp 16543}#
                           #f)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 13)
                     #{src 16539}#
                     '()
                     #{body 16568}#))))
           (begin
             (if (if (struct? #{proc 16548}#)
                   (eq? (struct-vtable #{proc 16548}#)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((#{meta 16592}# (struct-ref #{proc 16548}# 1)))
                 (if (not (assq 'name #{meta 16592}#))
                   (let ((#{v 16599}#
                           (cons (cons 'name #{f-name 16545}#)
                                 #{meta 16592}#)))
                     (struct-set! #{proc 16548}# 1 #{v 16599}#)))))
             (for-each
               #{maybe-name-value! 4266}#
               #{ids 16547}#
               #{val-exps 16542}#)
             (let ((#{names 16623}# (list #{f-name 16545}#))
                   (#{gensyms 16624}# (list #{f 16544}#))
                   (#{vals 16625}# (list #{proc 16548}#))
                   (#{body 16626}#
                     (let ((#{fun-exp 16630}#
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 3)
                               #{src 16539}#
                               #{f-name 16545}#
                               #{f 16544}#)))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 11)
                         #{src 16539}#
                         #{fun-exp 16630}#
                         #{val-exps 16542}#))))
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 16)
                 #{src 16539}#
                 #f
                 #{names 16623}#
                 #{gensyms 16624}#
                 #{vals 16625}#
                 #{body 16626}#)))))))
   (#{build-letrec 4285}#
     (lambda (#{src 16646}#
              #{in-order? 16647}#
              #{ids 16648}#
              #{vars 16649}#
              #{val-exps 16650}#
              #{body-exp 16651}#)
       (if (null? #{vars 16649}#)
         #{body-exp 16651}#
         (begin
           (for-each
             #{maybe-name-value! 4266}#
             #{ids 16648}#
             #{val-exps 16650}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 16)
             #{src 16646}#
             #{in-order? 16647}#
             #{ids 16648}#
             #{vars 16649}#
             #{val-exps 16650}#
             #{body-exp 16651}#)))))
   (#{source-annotation 4294}#
     (lambda (#{x 16677}#)
       (if (if (vector? #{x 16677}#)
             (if (= (vector-length #{x 16677}#) 4)
               (eq? (vector-ref #{x 16677}# 0) 'syntax-object)
               #f)
             #f)
         (#{source-annotation 4294}#
           (vector-ref #{x 16677}# 1))
         (if (pair? #{x 16677}#)
           (let ((#{props 16692}# (source-properties #{x 16677}#)))
             (if (pair? #{props 16692}#) #{props 16692}# #f))
           #f))))
   (#{extend-env 4295}#
     (lambda (#{labels 16694}# #{bindings 16695}# #{r 16696}#)
       (if (null? #{labels 16694}#)
         #{r 16696}#
         (#{extend-env 4295}#
           (cdr #{labels 16694}#)
           (cdr #{bindings 16695}#)
           (cons (cons (car #{labels 16694}#)
                       (car #{bindings 16695}#))
                 #{r 16696}#)))))
   (#{extend-var-env 4296}#
     (lambda (#{labels 16697}# #{vars 16698}# #{r 16699}#)
       (if (null? #{labels 16697}#)
         #{r 16699}#
         (#{extend-var-env 4296}#
           (cdr #{labels 16697}#)
           (cdr #{vars 16698}#)
           (cons (cons (car #{labels 16697}#)
                       (cons 'lexical (car #{vars 16698}#)))
                 #{r 16699}#)))))
   (#{macros-only-env 4297}#
     (lambda (#{r 16700}#)
       (if (null? #{r 16700}#)
         '()
         (let ((#{a 16701}# (car #{r 16700}#)))
           (if (eq? (car (cdr #{a 16701}#)) 'macro)
             (cons #{a 16701}#
                   (#{macros-only-env 4297}# (cdr #{r 16700}#)))
             (#{macros-only-env 4297}# (cdr #{r 16700}#)))))))
   (#{global-extend 4299}#
     (lambda (#{type 16703}# #{sym 16704}# #{val 16705}#)
       (module-define!
         (current-module)
         #{sym 16704}#
         (make-syntax-transformer
           #{sym 16704}#
           #{type 16703}#
           #{val 16705}#))))
   (#{id? 4301}#
     (lambda (#{x 10537}#)
       (if (symbol? #{x 10537}#)
         #t
         (if (if (vector? #{x 10537}#)
               (if (= (vector-length #{x 10537}#) 4)
                 (eq? (vector-ref #{x 10537}# 0) 'syntax-object)
                 #f)
               #f)
           (symbol? (vector-ref #{x 10537}# 1))
           #f))))
   (#{gen-labels 4304}#
     (lambda (#{ls 16715}#)
       (if (null? #{ls 16715}#)
         '()
         (cons (symbol->string (gensym "i"))
               (#{gen-labels 4304}# (cdr #{ls 16715}#))))))
   (#{make-binding-wrap 4315}#
     (lambda (#{ids 16719}# #{labels 16720}# #{w 16721}#)
       (if (null? #{ids 16719}#)
         #{w 16721}#
         (cons (car #{w 16721}#)
               (cons (let ((#{labelvec 16722}#
                             (list->vector #{labels 16720}#)))
                       (let ((#{n 16723}# (vector-length #{labelvec 16722}#)))
                         (let ((#{symnamevec 16724}# (make-vector #{n 16723}#))
                               (#{marksvec 16725}# (make-vector #{n 16723}#)))
                           (begin
                             (letrec*
                               ((#{f 16726}#
                                  (lambda (#{ids 16729}# #{i 16730}#)
                                    (if (not (null? #{ids 16729}#))
                                      (call-with-values
                                        (lambda ()
                                          (let ((#{x 16733}#
                                                  (car #{ids 16729}#)))
                                            (if (if (vector? #{x 16733}#)
                                                  (if (= (vector-length
                                                           #{x 16733}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{x 16733}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (values
                                                (vector-ref #{x 16733}# 1)
                                                (let ((#{m1 16749}#
                                                        (car #{w 16721}#))
                                                      (#{m2 16750}#
                                                        (car (vector-ref
                                                               #{x 16733}#
                                                               2))))
                                                  (if (null? #{m2 16750}#)
                                                    #{m1 16749}#
                                                    (append
                                                      #{m1 16749}#
                                                      #{m2 16750}#))))
                                              (values
                                                #{x 16733}#
                                                (car #{w 16721}#)))))
                                        (lambda (#{symname 16770}#
                                                 #{marks 16771}#)
                                          (begin
                                            (vector-set!
                                              #{symnamevec 16724}#
                                              #{i 16730}#
                                              #{symname 16770}#)
                                            (vector-set!
                                              #{marksvec 16725}#
                                              #{i 16730}#
                                              #{marks 16771}#)
                                            (#{f 16726}#
                                              (cdr #{ids 16729}#)
                                              (#{1+}# #{i 16730}#)))))))))
                               (#{f 16726}# #{ids 16719}# 0))
                             (vector
                               'ribcage
                               #{symnamevec 16724}#
                               #{marksvec 16725}#
                               #{labelvec 16722}#)))))
                     (cdr #{w 16721}#))))))
   (#{join-wraps 4317}#
     (lambda (#{w1 16780}# #{w2 16781}#)
       (let ((#{m1 16782}# (car #{w1 16780}#))
             (#{s1 16783}# (cdr #{w1 16780}#)))
         (if (null? #{m1 16782}#)
           (if (null? #{s1 16783}#)
             #{w2 16781}#
             (cons (car #{w2 16781}#)
                   (let ((#{m2 16790}# (cdr #{w2 16781}#)))
                     (if (null? #{m2 16790}#)
                       #{s1 16783}#
                       (append #{s1 16783}# #{m2 16790}#)))))
           (cons (let ((#{m2 16799}# (car #{w2 16781}#)))
                   (if (null? #{m2 16799}#)
                     #{m1 16782}#
                     (append #{m1 16782}# #{m2 16799}#)))
                 (let ((#{m2 16808}# (cdr #{w2 16781}#)))
                   (if (null? #{m2 16808}#)
                     #{s1 16783}#
                     (append #{s1 16783}# #{m2 16808}#))))))))
   (#{same-marks? 4319}#
     (lambda (#{x 16813}# #{y 16814}#)
       (if (eq? #{x 16813}# #{y 16814}#)
         (eq? #{x 16813}# #{y 16814}#)
         (if (not (null? #{x 16813}#))
           (if (not (null? #{y 16814}#))
             (if (eq? (car #{x 16813}#) (car #{y 16814}#))
               (#{same-marks? 4319}#
                 (cdr #{x 16813}#)
                 (cdr #{y 16814}#))
               #f)
             #f)
           #f))))
   (#{id-var-name 4320}#
     (lambda (#{id 16822}# #{w 16823}#)
       (letrec*
         ((#{search 16824}#
            (lambda (#{sym 16885}# #{subst 16886}# #{marks 16887}#)
              (if (null? #{subst 16886}#)
                (values #f #{marks 16887}#)
                (let ((#{fst 16888}# (car #{subst 16886}#)))
                  (if (eq? #{fst 16888}# 'shift)
                    (#{search 16824}#
                      #{sym 16885}#
                      (cdr #{subst 16886}#)
                      (cdr #{marks 16887}#))
                    (let ((#{symnames 16890}# (vector-ref #{fst 16888}# 1)))
                      (if (vector? #{symnames 16890}#)
                        (let ((#{n 16902}# (vector-length #{symnames 16890}#)))
                          (letrec*
                            ((#{f 16903}#
                               (lambda (#{i 16905}#)
                                 (if (= #{i 16905}# #{n 16902}#)
                                   (#{search 16824}#
                                     #{sym 16885}#
                                     (cdr #{subst 16886}#)
                                     #{marks 16887}#)
                                   (if (if (eq? (vector-ref
                                                  #{symnames 16890}#
                                                  #{i 16905}#)
                                                #{sym 16885}#)
                                         (#{same-marks? 4319}#
                                           #{marks 16887}#
                                           (vector-ref
                                             (vector-ref #{fst 16888}# 2)
                                             #{i 16905}#))
                                         #f)
                                     (values
                                       (vector-ref
                                         (vector-ref #{fst 16888}# 3)
                                         #{i 16905}#)
                                       #{marks 16887}#)
                                     (#{f 16903}# (#{1+}# #{i 16905}#)))))))
                            (#{f 16903}# 0)))
                        (letrec*
                          ((#{f 16938}#
                             (lambda (#{symnames 16940}# #{i 16941}#)
                               (if (null? #{symnames 16940}#)
                                 (#{search 16824}#
                                   #{sym 16885}#
                                   (cdr #{subst 16886}#)
                                   #{marks 16887}#)
                                 (if (if (eq? (car #{symnames 16940}#)
                                              #{sym 16885}#)
                                       (#{same-marks? 4319}#
                                         #{marks 16887}#
                                         (list-ref
                                           (vector-ref #{fst 16888}# 2)
                                           #{i 16941}#))
                                       #f)
                                   (values
                                     (list-ref
                                       (vector-ref #{fst 16888}# 3)
                                       #{i 16941}#)
                                     #{marks 16887}#)
                                   (#{f 16938}#
                                     (cdr #{symnames 16940}#)
                                     (#{1+}# #{i 16941}#)))))))
                          (#{f 16938}# #{symnames 16890}# 0))))))))))
         (if (symbol? #{id 16822}#)
           (let ((#{t 16827}#
                   (#{search 16824}#
                     #{id 16822}#
                     (cdr #{w 16823}#)
                     (car #{w 16823}#))))
             (if #{t 16827}# #{t 16827}# #{id 16822}#))
           (if (if (vector? #{id 16822}#)
                 (if (= (vector-length #{id 16822}#) 4)
                   (eq? (vector-ref #{id 16822}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{id 16842}# (vector-ref #{id 16822}# 1))
                   (#{w1 16843}# (vector-ref #{id 16822}# 2)))
               (let ((#{marks 16844}#
                       (let ((#{m1 16854}# (car #{w 16823}#))
                             (#{m2 16855}# (car #{w1 16843}#)))
                         (if (null? #{m2 16855}#)
                           #{m1 16854}#
                           (append #{m1 16854}# #{m2 16855}#)))))
                 (call-with-values
                   (lambda ()
                     (#{search 16824}#
                       #{id 16842}#
                       (cdr #{w 16823}#)
                       #{marks 16844}#))
                   (lambda (#{new-id 16871}# #{marks 16872}#)
                     (if #{new-id 16871}#
                       #{new-id 16871}#
                       (let ((#{t 16880}#
                               (#{search 16824}#
                                 #{id 16842}#
                                 (cdr #{w1 16843}#)
                                 #{marks 16872}#)))
                         (if #{t 16880}# #{t 16880}# #{id 16842}#)))))))
             (syntax-violation
               'id-var-name
               "invalid id"
               #{id 16822}#))))))
   (#{valid-bound-ids? 4323}#
     (lambda (#{ids 16963}#)
       (if (letrec*
             ((#{all-ids? 16964}#
                (lambda (#{ids 17126}#)
                  (if (null? #{ids 17126}#)
                    (null? #{ids 17126}#)
                    (if (let ((#{x 17137}# (car #{ids 17126}#)))
                          (if (symbol? #{x 17137}#)
                            #t
                            (if (if (vector? #{x 17137}#)
                                  (if (= (vector-length #{x 17137}#) 4)
                                    (eq? (vector-ref #{x 17137}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{x 17137}# 1))
                              #f)))
                      (#{all-ids? 16964}# (cdr #{ids 17126}#))
                      #f)))))
             (#{all-ids? 16964}# #{ids 16963}#))
         (#{distinct-bound-ids? 4324}# #{ids 16963}#)
         #f)))
   (#{distinct-bound-ids? 4324}#
     (lambda (#{ids 17269}#)
       (letrec*
         ((#{distinct? 17270}#
            (lambda (#{ids 17386}#)
              (if (null? #{ids 17386}#)
                (null? #{ids 17386}#)
                (if (not (#{bound-id-member? 4325}#
                           (car #{ids 17386}#)
                           (cdr #{ids 17386}#)))
                  (#{distinct? 17270}# (cdr #{ids 17386}#))
                  #f)))))
         (#{distinct? 17270}# #{ids 17269}#))))
   (#{bound-id-member? 4325}#
     (lambda (#{x 17606}# #{list 17607}#)
       (if (not (null? #{list 17607}#))
         (let ((#{t 17608}#
                 (let ((#{j 17689}# (car #{list 17607}#)))
                   (if (if (if (vector? #{x 17606}#)
                             (if (= (vector-length #{x 17606}#) 4)
                               (eq? (vector-ref #{x 17606}# 0) 'syntax-object)
                               #f)
                             #f)
                         (if (vector? #{j 17689}#)
                           (if (= (vector-length #{j 17689}#) 4)
                             (eq? (vector-ref #{j 17689}# 0) 'syntax-object)
                             #f)
                           #f)
                         #f)
                     (if (eq? (vector-ref #{x 17606}# 1)
                              (vector-ref #{j 17689}# 1))
                       (#{same-marks? 4319}#
                         (car (vector-ref #{x 17606}# 2))
                         (car (vector-ref #{j 17689}# 2)))
                       #f)
                     (eq? #{x 17606}# #{j 17689}#)))))
           (if #{t 17608}#
             #{t 17608}#
             (#{bound-id-member? 4325}#
               #{x 17606}#
               (cdr #{list 17607}#))))
         #f)))
   (#{wrap 4326}#
     (lambda (#{x 17733}# #{w 17734}# #{defmod 17735}#)
       (if (if (null? (car #{w 17734}#))
             (null? (cdr #{w 17734}#))
             #f)
         #{x 17733}#
         (if (if (vector? #{x 17733}#)
               (if (= (vector-length #{x 17733}#) 4)
                 (eq? (vector-ref #{x 17733}# 0) 'syntax-object)
                 #f)
               #f)
           (let ((#{expression 17749}# (vector-ref #{x 17733}# 1))
                 (#{wrap 17750}#
                   (#{join-wraps 4317}#
                     #{w 17734}#
                     (vector-ref #{x 17733}# 2)))
                 (#{module 17751}# (vector-ref #{x 17733}# 3)))
             (vector
               'syntax-object
               #{expression 17749}#
               #{wrap 17750}#
               #{module 17751}#))
           (if (null? #{x 17733}#)
             #{x 17733}#
             (vector
               'syntax-object
               #{x 17733}#
               #{w 17734}#
               #{defmod 17735}#))))))
   (#{source-wrap 4327}#
     (lambda (#{x 17768}#
              #{w 17769}#
              #{s 17770}#
              #{defmod 17771}#)
       (#{wrap 4326}#
         (begin
           (if (if (pair? #{x 17768}#) #{s 17770}# #f)
             (set-source-properties! #{x 17768}# #{s 17770}#))
           #{x 17768}#)
         #{w 17769}#
         #{defmod 17771}#)))
   (#{expand-sequence 4328}#
     (lambda (#{body 28606}#
              #{r 28607}#
              #{w 28608}#
              #{s 28609}#
              #{mod 28610}#)
       (#{build-sequence 4282}#
         #{s 28609}#
         (letrec*
           ((#{dobody 28695}#
              (lambda (#{body 28775}#
                       #{r 28776}#
                       #{w 28777}#
                       #{mod 28778}#)
                (if (null? #{body 28775}#)
                  '()
                  (let ((#{first 28779}#
                          (#{expand 4333}#
                            (car #{body 28775}#)
                            #{r 28776}#
                            #{w 28777}#
                            #{mod 28778}#)))
                    (cons #{first 28779}#
                          (#{dobody 28695}#
                            (cdr #{body 28775}#)
                            #{r 28776}#
                            #{w 28777}#
                            #{mod 28778}#)))))))
           (#{dobody 28695}#
             #{body 28606}#
             #{r 28607}#
             #{w 28608}#
             #{mod 28610}#)))))
   (#{expand-top-sequence 4329}#
     (lambda (#{body 17789}#
              #{r 17790}#
              #{w 17791}#
              #{s 17792}#
              #{m 17793}#
              #{esew 17794}#
              #{mod 17795}#)
       (letrec*
         ((#{scan 17796}#
            (lambda (#{body 17927}#
                     #{r 17928}#
                     #{w 17929}#
                     #{s 17930}#
                     #{m 17931}#
                     #{esew 17932}#
                     #{mod 17933}#
                     #{exps 17934}#)
              (if (null? #{body 17927}#)
                #{exps 17934}#
                (call-with-values
                  (lambda ()
                    (call-with-values
                      (lambda ()
                        (let ((#{e 17935}# (car #{body 17927}#)))
                          (#{syntax-type 4332}#
                            #{e 17935}#
                            #{r 17928}#
                            #{w 17929}#
                            (let ((#{t 17939}#
                                    (#{source-annotation 4294}# #{e 17935}#)))
                              (if #{t 17939}# #{t 17939}# #{s 17930}#))
                            #f
                            #{mod 17933}#
                            #f)))
                      (lambda (#{type 18199}#
                               #{value 18200}#
                               #{e 18201}#
                               #{w 18202}#
                               #{s 18203}#
                               #{mod 18204}#)
                        (if (eqv? #{type 18199}# 'begin-form)
                          (let ((#{tmp 18209}#
                                  ($sc-dispatch #{e 18201}# '(_))))
                            (if #{tmp 18209}#
                              (@apply (lambda () #{exps 17934}#) #{tmp 18209}#)
                              (let ((#{tmp 18213}#
                                      ($sc-dispatch
                                        #{e 18201}#
                                        '(_ any . each-any))))
                                (if #{tmp 18213}#
                                  (@apply
                                    (lambda (#{e1 18217}# #{e2 18218}#)
                                      (#{scan 17796}#
                                        (cons #{e1 18217}# #{e2 18218}#)
                                        #{r 17928}#
                                        #{w 18202}#
                                        #{s 18203}#
                                        #{m 17931}#
                                        #{esew 17932}#
                                        #{mod 18204}#
                                        #{exps 17934}#))
                                    #{tmp 18213}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 18201}#)))))
                          (if (eqv? #{type 18199}# 'local-syntax-form)
                            (#{expand-local-syntax 4338}#
                              #{value 18200}#
                              #{e 18201}#
                              #{r 17928}#
                              #{w 18202}#
                              #{s 18203}#
                              #{mod 18204}#
                              (lambda (#{body 18233}#
                                       #{r 18234}#
                                       #{w 18235}#
                                       #{s 18236}#
                                       #{mod 18237}#)
                                (#{scan 17796}#
                                  #{body 18233}#
                                  #{r 18234}#
                                  #{w 18235}#
                                  #{s 18236}#
                                  #{m 17931}#
                                  #{esew 17932}#
                                  #{mod 18237}#
                                  #{exps 17934}#)))
                            (if (eqv? #{type 18199}# 'eval-when-form)
                              (let ((#{tmp 18242}#
                                      ($sc-dispatch
                                        #{e 18201}#
                                        '(_ each-any any . each-any))))
                                (if #{tmp 18242}#
                                  (@apply
                                    (lambda (#{x 18246}#
                                             #{e1 18247}#
                                             #{e2 18248}#)
                                      (let ((#{when-list 18249}#
                                              (#{parse-when-list 4331}#
                                                #{e 18201}#
                                                #{x 18246}#))
                                            (#{body 18250}#
                                              (cons #{e1 18247}#
                                                    #{e2 18248}#)))
                                        (if (eq? #{m 17931}# 'e)
                                          (if (memq 'eval #{when-list 18249}#)
                                            (#{scan 17796}#
                                              #{body 18250}#
                                              #{r 17928}#
                                              #{w 18202}#
                                              #{s 18203}#
                                              (if (memq 'expand
                                                        #{when-list 18249}#)
                                                'c&e
                                                'e)
                                              '(eval)
                                              #{mod 18204}#
                                              #{exps 17934}#)
                                            (begin
                                              (if (memq 'expand
                                                        #{when-list 18249}#)
                                                (let ((#{x 18327}#
                                                        (#{expand-top-sequence 4329}#
                                                          #{body 18250}#
                                                          #{r 17928}#
                                                          #{w 18202}#
                                                          #{s 18203}#
                                                          'e
                                                          '(eval)
                                                          #{mod 18204}#)))
                                                  (primitive-eval
                                                    #{x 18327}#)))
                                              (values #{exps 17934}#)))
                                          (if (memq 'load #{when-list 18249}#)
                                            (if (let ((#{t 18353}#
                                                        (memq 'compile
                                                              #{when-list 18249}#)))
                                                  (if #{t 18353}#
                                                    #{t 18353}#
                                                    (let ((#{t 18402}#
                                                            (memq 'expand
                                                                  #{when-list 18249}#)))
                                                      (if #{t 18402}#
                                                        #{t 18402}#
                                                        (if (eq? #{m 17931}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 18249}#)
                                                          #f)))))
                                              (#{scan 17796}#
                                                #{body 18250}#
                                                #{r 17928}#
                                                #{w 18202}#
                                                #{s 18203}#
                                                'c&e
                                                '(compile load)
                                                #{mod 18204}#
                                                #{exps 17934}#)
                                              (if (if (eq? #{m 17931}# 'c)
                                                    #t
                                                    (eq? #{m 17931}# 'c&e))
                                                (#{scan 17796}#
                                                  #{body 18250}#
                                                  #{r 17928}#
                                                  #{w 18202}#
                                                  #{s 18203}#
                                                  'c
                                                  '(load)
                                                  #{mod 18204}#
                                                  #{exps 17934}#)
                                                (values #{exps 17934}#)))
                                            (if (let ((#{t 18531}#
                                                        (memq 'compile
                                                              #{when-list 18249}#)))
                                                  (if #{t 18531}#
                                                    #{t 18531}#
                                                    (let ((#{t 18580}#
                                                            (memq 'expand
                                                                  #{when-list 18249}#)))
                                                      (if #{t 18580}#
                                                        #{t 18580}#
                                                        (if (eq? #{m 17931}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 18249}#)
                                                          #f)))))
                                              (begin
                                                (let ((#{x 18704}#
                                                        (#{expand-top-sequence 4329}#
                                                          #{body 18250}#
                                                          #{r 17928}#
                                                          #{w 18202}#
                                                          #{s 18203}#
                                                          'e
                                                          '(eval)
                                                          #{mod 18204}#)))
                                                  (primitive-eval #{x 18704}#))
                                                (values #{exps 17934}#))
                                              (values #{exps 17934}#))))))
                                    #{tmp 18242}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 18201}#)))
                              (if (eqv? #{type 18199}# 'define-syntax-form)
                                (let ((#{n 18745}#
                                        (#{id-var-name 4320}#
                                          #{value 18200}#
                                          #{w 18202}#))
                                      (#{r 18746}#
                                        (#{macros-only-env 4297}#
                                          #{r 17928}#)))
                                  (if (eqv? #{m 17931}# 'c)
                                    (if (memq 'compile #{esew 17932}#)
                                      (let ((#{e 18750}#
                                              (#{expand-install-global 4330}#
                                                #{n 18745}#
                                                (#{expand 4333}#
                                                  #{e 18201}#
                                                  #{r 18746}#
                                                  #{w 18202}#
                                                  #{mod 18204}#))))
                                        (begin
                                          (#{top-level-eval-hook 4261}#
                                            #{e 18750}#
                                            #{mod 18204}#)
                                          (if (memq 'load #{esew 17932}#)
                                            (values
                                              (cons #{e 18750}#
                                                    #{exps 17934}#))
                                            (values #{exps 17934}#))))
                                      (if (memq 'load #{esew 17932}#)
                                        (values
                                          (cons (#{expand-install-global 4330}#
                                                  #{n 18745}#
                                                  (#{expand 4333}#
                                                    #{e 18201}#
                                                    #{r 18746}#
                                                    #{w 18202}#
                                                    #{mod 18204}#))
                                                #{exps 17934}#))
                                        (values #{exps 17934}#)))
                                    (if (eqv? #{m 17931}# 'c&e)
                                      (let ((#{e 19207}#
                                              (#{expand-install-global 4330}#
                                                #{n 18745}#
                                                (#{expand 4333}#
                                                  #{e 18201}#
                                                  #{r 18746}#
                                                  #{w 18202}#
                                                  #{mod 18204}#))))
                                        (begin
                                          (#{top-level-eval-hook 4261}#
                                            #{e 19207}#
                                            #{mod 18204}#)
                                          (values
                                            (cons #{e 19207}#
                                                  #{exps 17934}#))))
                                      (begin
                                        (if (memq 'eval #{esew 17932}#)
                                          (#{top-level-eval-hook 4261}#
                                            (#{expand-install-global 4330}#
                                              #{n 18745}#
                                              (#{expand 4333}#
                                                #{e 18201}#
                                                #{r 18746}#
                                                #{w 18202}#
                                                #{mod 18204}#))
                                            #{mod 18204}#))
                                        (values #{exps 17934}#)))))
                                (if (eqv? #{type 18199}# 'define-form)
                                  (let ((#{n 19857}#
                                          (#{id-var-name 4320}#
                                            #{value 18200}#
                                            #{w 18202}#)))
                                    (let ((#{type 19858}#
                                            (car (let ((#{t 20627}#
                                                         (assq #{n 19857}#
                                                               #{r 17928}#)))
                                                   (if #{t 20627}#
                                                     (cdr #{t 20627}#)
                                                     (if (symbol? #{n 19857}#)
                                                       (let ((#{t 20632}#
                                                               (begin
                                                                 (if (if (not #{mod 18204}#)
                                                                       (current-module)
                                                                       #f)
                                                                   (warn "module system is booted, we should have a module"
                                                                         #{n 19857}#))
                                                                 (let ((#{v 20669}#
                                                                         (module-variable
                                                                           (if #{mod 18204}#
                                                                             (resolve-module
                                                                               (cdr #{mod 18204}#))
                                                                             (current-module))
                                                                           #{n 19857}#)))
                                                                   (if #{v 20669}#
                                                                     (if (variable-bound?
                                                                           #{v 20669}#)
                                                                       (let ((#{val 20678}#
                                                                               (variable-ref
                                                                                 #{v 20669}#)))
                                                                         (if (macro?
                                                                               #{val 20678}#)
                                                                           (if (macro-type
                                                                                 #{val 20678}#)
                                                                             (cons (macro-type
                                                                                     #{val 20678}#)
                                                                                   (macro-binding
                                                                                     #{val 20678}#))
                                                                             #f)
                                                                           #f))
                                                                       #f)
                                                                     #f)))))
                                                         (if #{t 20632}#
                                                           #{t 20632}#
                                                           '(global)))
                                                       '(displaced-lexical)))))))
                                      (if (let ((#{t 19892}# #{type 19858}#))
                                            (if (eqv? #{t 19892}# 'global)
                                              #t
                                              (if (eqv? #{t 19892}# 'core)
                                                #t
                                                (if (eqv? #{t 19892}# 'macro)
                                                  #t
                                                  (eqv? #{t 19892}#
                                                        'module-ref)))))
                                        (begin
                                          (if (if (if (eq? #{m 17931}# 'c)
                                                    #t
                                                    (eq? #{m 17931}# 'c&e))
                                                (if (not (module-local-variable
                                                           (current-module)
                                                           #{n 19857}#))
                                                  (current-module)
                                                  #f)
                                                #f)
                                            (let ((#{old 20056}#
                                                    (module-variable
                                                      (current-module)
                                                      #{n 19857}#)))
                                              (if (if (variable? #{old 20056}#)
                                                    (variable-bound?
                                                      #{old 20056}#)
                                                    #f)
                                                (module-define!
                                                  (current-module)
                                                  #{n 19857}#
                                                  (variable-ref #{old 20056}#))
                                                (module-add!
                                                  (current-module)
                                                  #{n 19857}#
                                                  (make-undefined-variable)))))
                                          (values
                                            (cons (if (eq? #{m 17931}# 'c&e)
                                                    (let ((#{x 20058}#
                                                            (#{build-global-definition 4276}#
                                                              #{s 18203}#
                                                              #{n 19857}#
                                                              (#{expand 4333}#
                                                                #{e 18201}#
                                                                #{r 17928}#
                                                                #{w 18202}#
                                                                #{mod 18204}#))))
                                                      (begin
                                                        (#{top-level-eval-hook 4261}#
                                                          #{x 20058}#
                                                          #{mod 18204}#)
                                                        #{x 20058}#))
                                                    (lambda ()
                                                      (#{build-global-definition 4276}#
                                                        #{s 18203}#
                                                        #{n 19857}#
                                                        (#{expand 4333}#
                                                          #{e 18201}#
                                                          #{r 17928}#
                                                          #{w 18202}#
                                                          #{mod 18204}#))))
                                                  #{exps 17934}#)))
                                        (if (let ((#{t 20554}# #{type 19858}#))
                                              (eqv? #{t 20554}#
                                                    'displaced-lexical))
                                          (syntax-violation
                                            #f
                                            "identifier out of context"
                                            #{e 18201}#
                                            (#{wrap 4326}#
                                              #{value 18200}#
                                              #{w 18202}#
                                              #{mod 18204}#))
                                          (syntax-violation
                                            #f
                                            "cannot define keyword at top level"
                                            #{e 18201}#
                                            (#{wrap 4326}#
                                              #{value 18200}#
                                              #{w 18202}#
                                              #{mod 18204}#))))))
                                  (values
                                    (cons (if (eq? #{m 17931}# 'c&e)
                                            (let ((#{x 20689}#
                                                    (#{expand-expr 4334}#
                                                      #{type 18199}#
                                                      #{value 18200}#
                                                      #{e 18201}#
                                                      #{r 17928}#
                                                      #{w 18202}#
                                                      #{s 18203}#
                                                      #{mod 18204}#)))
                                              (begin
                                                (primitive-eval #{x 20689}#)
                                                #{x 20689}#))
                                            (lambda ()
                                              (#{expand-expr 4334}#
                                                #{type 18199}#
                                                #{value 18200}#
                                                #{e 18201}#
                                                #{r 17928}#
                                                #{w 18202}#
                                                #{s 18203}#
                                                #{mod 18204}#)))
                                          #{exps 17934}#))))))))))
                  (lambda (#{exps 20698}#)
                    (#{scan 17796}#
                      (cdr #{body 17927}#)
                      #{r 17928}#
                      #{w 17929}#
                      #{s 17930}#
                      #{m 17931}#
                      #{esew 17932}#
                      #{mod 17933}#
                      #{exps 20698}#)))))))
         (call-with-values
           (lambda ()
             (#{scan 17796}#
               #{body 17789}#
               #{r 17790}#
               #{w 17791}#
               #{s 17792}#
               #{m 17793}#
               #{esew 17794}#
               #{mod 17795}#
               '()))
           (lambda (#{exps 17799}#)
             (if (null? #{exps 17799}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 0)
                 #{s 17792}#)
               (#{build-sequence 4282}#
                 #{s 17792}#
                 (letrec*
                   ((#{lp 17839}#
                      (lambda (#{in 17923}# #{out 17924}#)
                        (if (null? #{in 17923}#)
                          #{out 17924}#
                          (let ((#{e 17925}# (car #{in 17923}#)))
                            (#{lp 17839}#
                              (cdr #{in 17923}#)
                              (cons (if (procedure? #{e 17925}#)
                                      (#{e 17925}#)
                                      #{e 17925}#)
                                    #{out 17924}#)))))))
                   (#{lp 17839}# #{exps 17799}# '())))))))))
   (#{expand-install-global 4330}#
     (lambda (#{name 20699}# #{e 20700}#)
       (let ((#{exp 20706}#
               (let ((#{fun-exp 20716}#
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'make-syntax-transformer)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'make-syntax-transformer
                           #f)))
                     (#{arg-exps 20717}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #{name 20699}#)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               'macro)
                             #{e 20700}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 11)
                   #f
                   #{fun-exp 20716}#
                   #{arg-exps 20717}#))))
         (begin
           (if (if (struct? #{exp 20706}#)
                 (eq? (struct-vtable #{exp 20706}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta 20758}# (struct-ref #{exp 20706}# 1)))
               (if (not (assq 'name #{meta 20758}#))
                 (let ((#{v 20765}#
                         (cons (cons 'name #{name 20699}#) #{meta 20758}#)))
                   (struct-set! #{exp 20706}# 1 #{v 20765}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #f
             #{name 20699}#
             #{exp 20706}#)))))
   (#{parse-when-list 4331}#
     (lambda (#{e 20776}# #{when-list 20777}#)
       (let ((#{result 20778}#
               (#{strip 4346}# #{when-list 20777}# '(()))))
         (letrec*
           ((#{lp 20779}#
              (lambda (#{l 20833}#)
                (if (null? #{l 20833}#)
                  #{result 20778}#
                  (if (let ((#{t 20835}# (car #{l 20833}#)))
                        (if (eq? #{t 20835}# 'compile)
                          #t
                          (if (eq? #{t 20835}# 'load)
                            #t
                            (if (eq? #{t 20835}# 'eval)
                              #t
                              (eq? #{t 20835}# 'expand)))))
                    (#{lp 20779}# (cdr #{l 20833}#))
                    (syntax-violation
                      'eval-when
                      "invalid situation"
                      #{e 20776}#
                      (car #{l 20833}#)))))))
           (#{lp 20779}# #{result 20778}#)))))
   (#{syntax-type 4332}#
     (lambda (#{e 20837}#
              #{r 20838}#
              #{w 20839}#
              #{s 20840}#
              #{rib 20841}#
              #{mod 20842}#
              #{for-car? 20843}#)
       (if (symbol? #{e 20837}#)
         (let ((#{n 20844}#
                 (#{id-var-name 4320}# #{e 20837}# #{w 20839}#)))
           (let ((#{b 20845}#
                   (let ((#{t 21420}# (assq #{n 20844}# #{r 20838}#)))
                     (if #{t 21420}#
                       (cdr #{t 21420}#)
                       (if (symbol? #{n 20844}#)
                         (let ((#{t 21425}#
                                 (begin
                                   (if (if (not #{mod 20842}#)
                                         (current-module)
                                         #f)
                                     (warn "module system is booted, we should have a module"
                                           #{n 20844}#))
                                   (let ((#{v 21462}#
                                           (module-variable
                                             (if #{mod 20842}#
                                               (resolve-module
                                                 (cdr #{mod 20842}#))
                                               (current-module))
                                             #{n 20844}#)))
                                     (if #{v 21462}#
                                       (if (variable-bound? #{v 21462}#)
                                         (let ((#{val 21471}#
                                                 (variable-ref #{v 21462}#)))
                                           (if (macro? #{val 21471}#)
                                             (if (macro-type #{val 21471}#)
                                               (cons (macro-type #{val 21471}#)
                                                     (macro-binding
                                                       #{val 21471}#))
                                               #f)
                                             #f))
                                         #f)
                                       #f)))))
                           (if #{t 21425}# #{t 21425}# '(global)))
                         '(displaced-lexical))))))
             (let ((#{type 20846}# (car #{b 20845}#)))
               (if (let ((#{t 20880}# #{type 20846}#))
                     (eqv? #{t 20880}# 'lexical))
                 (values
                   #{type 20846}#
                   (cdr #{b 20845}#)
                   #{e 20837}#
                   #{w 20839}#
                   #{s 20840}#
                   #{mod 20842}#)
                 (if (let ((#{t 21037}# #{type 20846}#))
                       (eqv? #{t 21037}# 'global))
                   (values
                     #{type 20846}#
                     #{n 20844}#
                     #{e 20837}#
                     #{w 20839}#
                     #{s 20840}#
                     #{mod 20842}#)
                   (if (let ((#{t 21163}# #{type 20846}#))
                         (eqv? #{t 21163}# 'macro))
                     (if #{for-car? 20843}#
                       (values
                         #{type 20846}#
                         (cdr #{b 20845}#)
                         #{e 20837}#
                         #{w 20839}#
                         #{s 20840}#
                         #{mod 20842}#)
                       (#{syntax-type 4332}#
                         (#{expand-macro 4336}#
                           (cdr #{b 20845}#)
                           #{e 20837}#
                           #{r 20838}#
                           #{w 20839}#
                           #{s 20840}#
                           #{rib 20841}#
                           #{mod 20842}#)
                         #{r 20838}#
                         '(())
                         #{s 20840}#
                         #{rib 20841}#
                         #{mod 20842}#
                         #f))
                     (values
                       #{type 20846}#
                       (cdr #{b 20845}#)
                       #{e 20837}#
                       #{w 20839}#
                       #{s 20840}#
                       #{mod 20842}#)))))))
         (if (pair? #{e 20837}#)
           (let ((#{first 21482}# (car #{e 20837}#)))
             (call-with-values
               (lambda ()
                 (#{syntax-type 4332}#
                   #{first 21482}#
                   #{r 20838}#
                   #{w 20839}#
                   #{s 20840}#
                   #{rib 20841}#
                   #{mod 20842}#
                   #t))
               (lambda (#{ftype 21484}#
                        #{fval 21485}#
                        #{fe 21486}#
                        #{fw 21487}#
                        #{fs 21488}#
                        #{fmod 21489}#)
                 (if (eqv? #{ftype 21484}# 'lexical)
                   (values
                     'lexical-call
                     #{fval 21485}#
                     #{e 20837}#
                     #{w 20839}#
                     #{s 20840}#
                     #{mod 20842}#)
                   (if (eqv? #{ftype 21484}# 'global)
                     (values
                       'global-call
                       (vector
                         'syntax-object
                         #{fval 21485}#
                         #{w 20839}#
                         #{fmod 21489}#)
                       #{e 20837}#
                       #{w 20839}#
                       #{s 20840}#
                       #{mod 20842}#)
                     (if (eqv? #{ftype 21484}# 'macro)
                       (#{syntax-type 4332}#
                         (#{expand-macro 4336}#
                           #{fval 21485}#
                           #{e 20837}#
                           #{r 20838}#
                           #{w 20839}#
                           #{s 20840}#
                           #{rib 20841}#
                           #{mod 20842}#)
                         #{r 20838}#
                         '(())
                         #{s 20840}#
                         #{rib 20841}#
                         #{mod 20842}#
                         #{for-car? 20843}#)
                       (if (eqv? #{ftype 21484}# 'module-ref)
                         (call-with-values
                           (lambda ()
                             (#{fval 21485}#
                               #{e 20837}#
                               #{r 20838}#
                               #{w 20839}#))
                           (lambda (#{e 21510}#
                                    #{r 21511}#
                                    #{w 21512}#
                                    #{s 21513}#
                                    #{mod 21514}#)
                             (#{syntax-type 4332}#
                               #{e 21510}#
                               #{r 21511}#
                               #{w 21512}#
                               #{s 21513}#
                               #{rib 20841}#
                               #{mod 21514}#
                               #{for-car? 20843}#)))
                         (if (eqv? #{ftype 21484}# 'core)
                           (values
                             'core-form
                             #{fval 21485}#
                             #{e 20837}#
                             #{w 20839}#
                             #{s 20840}#
                             #{mod 20842}#)
                           (if (eqv? #{ftype 21484}# 'local-syntax)
                             (values
                               'local-syntax-form
                               #{fval 21485}#
                               #{e 20837}#
                               #{w 20839}#
                               #{s 20840}#
                               #{mod 20842}#)
                             (if (eqv? #{ftype 21484}# 'begin)
                               (values
                                 'begin-form
                                 #f
                                 #{e 20837}#
                                 #{w 20839}#
                                 #{s 20840}#
                                 #{mod 20842}#)
                               (if (eqv? #{ftype 21484}# 'eval-when)
                                 (values
                                   'eval-when-form
                                   #f
                                   #{e 20837}#
                                   #{w 20839}#
                                   #{s 20840}#
                                   #{mod 20842}#)
                                 (if (eqv? #{ftype 21484}# 'define)
                                   (let ((#{tmp 21531}#
                                           ($sc-dispatch
                                             #{e 20837}#
                                             '(_ any any))))
                                     (if (if #{tmp 21531}#
                                           (@apply
                                             (lambda (#{name 21535}#
                                                      #{val 21536}#)
                                               (if (symbol? #{name 21535}#)
                                                 #t
                                                 (if (if (vector?
                                                           #{name 21535}#)
                                                       (if (= (vector-length
                                                                #{name 21535}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{name 21535}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (symbol?
                                                     (vector-ref
                                                       #{name 21535}#
                                                       1))
                                                   #f)))
                                             #{tmp 21531}#)
                                           #f)
                                       (@apply
                                         (lambda (#{name 21563}# #{val 21564}#)
                                           (values
                                             'define-form
                                             #{name 21563}#
                                             #{val 21564}#
                                             #{w 20839}#
                                             #{s 20840}#
                                             #{mod 20842}#))
                                         #{tmp 21531}#)
                                       (let ((#{tmp 21565}#
                                               ($sc-dispatch
                                                 #{e 20837}#
                                                 '(_ (any . any)
                                                     any
                                                     .
                                                     each-any))))
                                         (if (if #{tmp 21565}#
                                               (@apply
                                                 (lambda (#{name 21569}#
                                                          #{args 21570}#
                                                          #{e1 21571}#
                                                          #{e2 21572}#)
                                                   (if (if (symbol?
                                                             #{name 21569}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 21569}#)
                                                               (if (= (vector-length
                                                                        #{name 21569}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 21569}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 21569}#
                                                               1))
                                                           #f))
                                                     (#{valid-bound-ids? 4323}#
                                                       (letrec*
                                                         ((#{lvl 21721}#
                                                            (lambda (#{vars 21723}#
                                                                     #{ls 21724}#
                                                                     #{w 21725}#)
                                                              (if (pair? #{vars 21723}#)
                                                                (#{lvl 21721}#
                                                                  (cdr #{vars 21723}#)
                                                                  (cons (#{wrap 4326}#
                                                                          (car #{vars 21723}#)
                                                                          #{w 21725}#
                                                                          #f)
                                                                        #{ls 21724}#)
                                                                  #{w 21725}#)
                                                                (if (if (symbol?
                                                                          #{vars 21723}#)
                                                                      #t
                                                                      (if (if (vector?
                                                                                #{vars 21723}#)
                                                                            (if (= (vector-length
                                                                                     #{vars 21723}#)
                                                                                   4)
                                                                              (eq? (vector-ref
                                                                                     #{vars 21723}#
                                                                                     0)
                                                                                   'syntax-object)
                                                                              #f)
                                                                            #f)
                                                                        (symbol?
                                                                          (vector-ref
                                                                            #{vars 21723}#
                                                                            1))
                                                                        #f))
                                                                  (cons (#{wrap 4326}#
                                                                          #{vars 21723}#
                                                                          #{w 21725}#
                                                                          #f)
                                                                        #{ls 21724}#)
                                                                  (if (null? #{vars 21723}#)
                                                                    #{ls 21724}#
                                                                    (if (if (vector?
                                                                              #{vars 21723}#)
                                                                          (if (= (vector-length
                                                                                   #{vars 21723}#)
                                                                                 4)
                                                                            (eq? (vector-ref
                                                                                   #{vars 21723}#
                                                                                   0)
                                                                                 'syntax-object)
                                                                            #f)
                                                                          #f)
                                                                      (#{lvl 21721}#
                                                                        (vector-ref
                                                                          #{vars 21723}#
                                                                          1)
                                                                        #{ls 21724}#
                                                                        (#{join-wraps 4317}#
                                                                          #{w 21725}#
                                                                          (vector-ref
                                                                            #{vars 21723}#
                                                                            2)))
                                                                      (cons #{vars 21723}#
                                                                            #{ls 21724}#))))))))
                                                         (#{lvl 21721}#
                                                           #{args 21570}#
                                                           '()
                                                           '(()))))
                                                     #f))
                                                 #{tmp 21565}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 21769}#
                                                      #{args 21770}#
                                                      #{e1 21771}#
                                                      #{e2 21772}#)
                                               (values
                                                 'define-form
                                                 (#{wrap 4326}#
                                                   #{name 21769}#
                                                   #{w 20839}#
                                                   #{mod 20842}#)
                                                 (let ((#{e 21778}#
                                                         (cons '#(syntax-object
                                                                  lambda
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(name
                                                                       args
                                                                       e1
                                                                       e2)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1843"
                                                                       "i1844"
                                                                       "i1845"
                                                                       "i1846"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(ftype
                                                                       fval
                                                                       fe
                                                                       fw
                                                                       fs
                                                                       fmod)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1796"
                                                                       "i1797"
                                                                       "i1798"
                                                                       "i1799"
                                                                       "i1800"
                                                                       "i1801"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(first)
                                                                     #((top))
                                                                     #("i1788"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(e
                                                                       r
                                                                       w
                                                                       s
                                                                       rib
                                                                       mod
                                                                       for-car?)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1760"
                                                                       "i1761"
                                                                       "i1762"
                                                                       "i1763"
                                                                       "i1764"
                                                                       "i1765"
                                                                       "i1766"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       expand-lambda-case
                                                                       lambda*-formals
                                                                       expand-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       expand-void
                                                                       eval-local-transformer
                                                                       expand-local-syntax
                                                                       expand-body
                                                                       expand-macro
                                                                       expand-application
                                                                       expand-expr
                                                                       expand
                                                                       syntax-type
                                                                       parse-when-list
                                                                       expand-install-global
                                                                       expand-top-sequence
                                                                       expand-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-application
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-sequence
                                                                       make-application
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i401"
                                                                      "i399"
                                                                      "i398"
                                                                      "i396"
                                                                      "i393"
                                                                      "i392"
                                                                      "i391"
                                                                      "i389"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i374"
                                                                      "i372"
                                                                      "i369"
                                                                      "i367"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i360"
                                                                      "i358"
                                                                      "i357"
                                                                      "i356"
                                                                      "i355"
                                                                      "i353"
                                                                      "i352"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i339"
                                                                      "i337"
                                                                      "i336"
                                                                      "i335"
                                                                      "i333"
                                                                      "i331"
                                                                      "i330"
                                                                      "i327"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i310"
                                                                      "i308"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i261"
                                                                      "i260"
                                                                      "i257"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i252"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i245"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44")))
                                                                  (hygiene
                                                                    guile))
                                                               (#{wrap 4326}#
                                                                 (cons #{args 21770}#
                                                                       (cons #{e1 21771}#
                                                                             #{e2 21772}#))
                                                                 #{w 20839}#
                                                                 #{mod 20842}#))))
                                                   (begin
                                                     (if (if (pair? #{e 21778}#)
                                                           #{s 20840}#
                                                           #f)
                                                       (set-source-properties!
                                                         #{e 21778}#
                                                         #{s 20840}#))
                                                     #{e 21778}#))
                                                 '(())
                                                 #{s 20840}#
                                                 #{mod 20842}#))
                                             #{tmp 21565}#)
                                           (let ((#{tmp 21785}#
                                                   ($sc-dispatch
                                                     #{e 20837}#
                                                     '(_ any))))
                                             (if (if #{tmp 21785}#
                                                   (@apply
                                                     (lambda (#{name 21789}#)
                                                       (if (symbol?
                                                             #{name 21789}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 21789}#)
                                                               (if (= (vector-length
                                                                        #{name 21789}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 21789}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 21789}#
                                                               1))
                                                           #f)))
                                                     #{tmp 21785}#)
                                                   #f)
                                               (@apply
                                                 (lambda (#{name 21816}#)
                                                   (values
                                                     'define-form
                                                     (#{wrap 4326}#
                                                       #{name 21816}#
                                                       #{w 20839}#
                                                       #{mod 20842}#)
                                                     '(#(syntax-object
                                                         if
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1856"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1796"
                                                              "i1797"
                                                              "i1798"
                                                              "i1799"
                                                              "i1800"
                                                              "i1801"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1788"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1760"
                                                              "i1761"
                                                              "i1762"
                                                              "i1763"
                                                              "i1764"
                                                              "i1765"
                                                              "i1766"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1856"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1796"
                                                              "i1797"
                                                              "i1798"
                                                              "i1799"
                                                              "i1800"
                                                              "i1801"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1788"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1760"
                                                              "i1761"
                                                              "i1762"
                                                              "i1763"
                                                              "i1764"
                                                              "i1765"
                                                              "i1766"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1856"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1796"
                                                              "i1797"
                                                              "i1798"
                                                              "i1799"
                                                              "i1800"
                                                              "i1801"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1788"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1760"
                                                              "i1761"
                                                              "i1762"
                                                              "i1763"
                                                              "i1764"
                                                              "i1765"
                                                              "i1766"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile)))
                                                     '(())
                                                     #{s 20840}#
                                                     #{mod 20842}#))
                                                 #{tmp 21785}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{e 20837}#)))))))
                                   (if (eqv? #{ftype 21484}# 'define-syntax)
                                     (let ((#{tmp 21835}#
                                             ($sc-dispatch
                                               #{e 20837}#
                                               '(_ any any))))
                                       (if (if #{tmp 21835}#
                                             (@apply
                                               (lambda (#{name 21839}#
                                                        #{val 21840}#)
                                                 (if (symbol? #{name 21839}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name 21839}#)
                                                         (if (= (vector-length
                                                                  #{name 21839}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 21839}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name 21839}#
                                                         1))
                                                     #f)))
                                               #{tmp 21835}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 21867}#
                                                    #{val 21868}#)
                                             (values
                                               'define-syntax-form
                                               #{name 21867}#
                                               #{val 21868}#
                                               #{w 20839}#
                                               #{s 20840}#
                                               #{mod 20842}#))
                                           #{tmp 21835}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{e 20837}#)))
                                     (values
                                       'call
                                       #f
                                       #{e 20837}#
                                       #{w 20839}#
                                       #{s 20840}#
                                       #{mod 20842}#))))))))))))))
           (if (if (vector? #{e 20837}#)
                 (if (= (vector-length #{e 20837}#) 4)
                   (eq? (vector-ref #{e 20837}# 0) 'syntax-object)
                   #f)
                 #f)
             (#{syntax-type 4332}#
               (vector-ref #{e 20837}# 1)
               #{r 20838}#
               (#{join-wraps 4317}#
                 #{w 20839}#
                 (vector-ref #{e 20837}# 2))
               (let ((#{t 21895}#
                       (#{source-annotation 4294}# #{e 20837}#)))
                 (if #{t 21895}# #{t 21895}# #{s 20840}#))
               #{rib 20841}#
               (let ((#{t 22155}# (vector-ref #{e 20837}# 3)))
                 (if #{t 22155}# #{t 22155}# #{mod 20842}#))
               #{for-car? 20843}#)
             (if (self-evaluating? #{e 20837}#)
               (values
                 'constant
                 #f
                 #{e 20837}#
                 #{w 20839}#
                 #{s 20840}#
                 #{mod 20842}#)
               (values
                 'other
                 #f
                 #{e 20837}#
                 #{w 20839}#
                 #{s 20840}#
                 #{mod 20842}#)))))))
   (#{expand 4333}#
     (lambda (#{e 22164}#
              #{r 22165}#
              #{w 22166}#
              #{mod 22167}#)
       (call-with-values
         (lambda ()
           (#{syntax-type 4332}#
             #{e 22164}#
             #{r 22165}#
             #{w 22166}#
             (#{source-annotation 4294}# #{e 22164}#)
             #f
             #{mod 22167}#
             #f))
         (lambda (#{type 22341}#
                  #{value 22342}#
                  #{e 22343}#
                  #{w 22344}#
                  #{s 22345}#
                  #{mod 22346}#)
           (#{expand-expr 4334}#
             #{type 22341}#
             #{value 22342}#
             #{e 22343}#
             #{r 22165}#
             #{w 22344}#
             #{s 22345}#
             #{mod 22346}#)))))
   (#{expand-expr 4334}#
     (lambda (#{type 22349}#
              #{value 22350}#
              #{e 22351}#
              #{r 22352}#
              #{w 22353}#
              #{s 22354}#
              #{mod 22355}#)
       (if (eqv? #{type 22349}# 'lexical)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{s 22354}#
           #{e 22351}#
           #{value 22350}#)
         (if (if (eqv? #{type 22349}# 'core)
               #t
               (eqv? #{type 22349}# 'core-form))
           (#{value 22350}#
             #{e 22351}#
             #{r 22352}#
             #{w 22353}#
             #{s 22354}#
             #{mod 22355}#)
           (if (eqv? #{type 22349}# 'module-ref)
             (call-with-values
               (lambda ()
                 (#{value 22350}#
                   #{e 22351}#
                   #{r 22352}#
                   #{w 22353}#))
               (lambda (#{e 22381}#
                        #{r 22382}#
                        #{w 22383}#
                        #{s 22384}#
                        #{mod 22385}#)
                 (#{expand 4333}#
                   #{e 22381}#
                   #{r 22382}#
                   #{w 22383}#
                   #{mod 22385}#)))
             (if (eqv? #{type 22349}# 'lexical-call)
               (#{expand-application 4335}#
                 (let ((#{id 22465}# (car #{e 22351}#)))
                   (#{build-lexical-reference 4271}#
                     'fun
                     (#{source-annotation 4294}# #{id 22465}#)
                     (if (if (vector? #{id 22465}#)
                           (if (= (vector-length #{id 22465}#) 4)
                             (eq? (vector-ref #{id 22465}# 0) 'syntax-object)
                             #f)
                           #f)
                       (syntax->datum #{id 22465}#)
                       #{id 22465}#)
                     #{value 22350}#))
                 #{e 22351}#
                 #{r 22352}#
                 #{w 22353}#
                 #{s 22354}#
                 #{mod 22355}#)
               (if (eqv? #{type 22349}# 'global-call)
                 (#{expand-application 4335}#
                   (#{build-global-reference 4274}#
                     (#{source-annotation 4294}# (car #{e 22351}#))
                     (if (if (vector? #{value 22350}#)
                           (if (= (vector-length #{value 22350}#) 4)
                             (eq? (vector-ref #{value 22350}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 22350}# 1)
                       #{value 22350}#)
                     (if (if (vector? #{value 22350}#)
                           (if (= (vector-length #{value 22350}#) 4)
                             (eq? (vector-ref #{value 22350}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 22350}# 3)
                       #{mod 22355}#))
                   #{e 22351}#
                   #{r 22352}#
                   #{w 22353}#
                   #{s 22354}#
                   #{mod 22355}#)
                 (if (eqv? #{type 22349}# 'constant)
                   (let ((#{exp 23001}#
                           (#{strip 4346}#
                             (#{wrap 4326}#
                               (begin
                                 (if (if (pair? #{e 22351}#) #{s 22354}# #f)
                                   (set-source-properties!
                                     #{e 22351}#
                                     #{s 22354}#))
                                 #{e 22351}#)
                               #{w 22353}#
                               #{mod 22355}#)
                             '(()))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 1)
                       #{s 22354}#
                       #{exp 23001}#))
                   (if (eqv? #{type 22349}# 'global)
                     (#{analyze-variable 4273}#
                       #{mod 22355}#
                       #{value 22350}#
                       (lambda (#{mod 23037}# #{var 23038}# #{public? 23039}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #{s 22354}#
                           #{mod 23037}#
                           #{var 23038}#
                           #{public? 23039}#))
                       (lambda (#{var 23048}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #{s 22354}#
                           #{var 23048}#)))
                     (if (eqv? #{type 22349}# 'call)
                       (#{expand-application 4335}#
                         (#{expand 4333}#
                           (car #{e 22351}#)
                           #{r 22352}#
                           #{w 22353}#
                           #{mod 22355}#)
                         #{e 22351}#
                         #{r 22352}#
                         #{w 22353}#
                         #{s 22354}#
                         #{mod 22355}#)
                       (if (eqv? #{type 22349}# 'begin-form)
                         (let ((#{tmp 23128}#
                                 ($sc-dispatch
                                   #{e 22351}#
                                   '(_ any . each-any))))
                           (if #{tmp 23128}#
                             (@apply
                               (lambda (#{e1 23132}# #{e2 23133}#)
                                 (#{expand-sequence 4328}#
                                   (cons #{e1 23132}# #{e2 23133}#)
                                   #{r 22352}#
                                   #{w 22353}#
                                   #{s 22354}#
                                   #{mod 22355}#))
                               #{tmp 23128}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{e 22351}#)))
                         (if (eqv? #{type 22349}# 'local-syntax-form)
                           (#{expand-local-syntax 4338}#
                             #{value 22350}#
                             #{e 22351}#
                             #{r 22352}#
                             #{w 22353}#
                             #{s 22354}#
                             #{mod 22355}#
                             #{expand-sequence 4328}#)
                           (if (eqv? #{type 22349}# 'eval-when-form)
                             (let ((#{tmp 23299}#
                                     ($sc-dispatch
                                       #{e 22351}#
                                       '(_ each-any any . each-any))))
                               (if #{tmp 23299}#
                                 (@apply
                                   (lambda (#{x 23303}#
                                            #{e1 23304}#
                                            #{e2 23305}#)
                                     (let ((#{when-list 23306}#
                                             (#{parse-when-list 4331}#
                                               #{e 22351}#
                                               #{x 23303}#)))
                                       (if (memq 'eval #{when-list 23306}#)
                                         (#{expand-sequence 4328}#
                                           (cons #{e1 23304}# #{e2 23305}#)
                                           #{r 22352}#
                                           #{w 22353}#
                                           #{s 22354}#
                                           #{mod 22355}#)
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 0)
                                           #f))))
                                   #{tmp 23299}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 22351}#)))
                             (if (if (eqv? #{type 22349}# 'define-form)
                                   #t
                                   (eqv? #{type 22349}# 'define-syntax-form))
                               (syntax-violation
                                 #f
                                 "definition in expression context"
                                 #{e 22351}#
                                 (#{wrap 4326}#
                                   #{value 22350}#
                                   #{w 22353}#
                                   #{mod 22355}#))
                               (if (eqv? #{type 22349}# 'syntax)
                                 (syntax-violation
                                   #f
                                   "reference to pattern variable outside syntax form"
                                   (#{wrap 4326}#
                                     (begin
                                       (if (if (pair? #{e 22351}#)
                                             #{s 22354}#
                                             #f)
                                         (set-source-properties!
                                           #{e 22351}#
                                           #{s 22354}#))
                                       #{e 22351}#)
                                     #{w 22353}#
                                     #{mod 22355}#))
                                 (if (eqv? #{type 22349}# 'displaced-lexical)
                                   (syntax-violation
                                     #f
                                     "reference to identifier outside its scope"
                                     (#{wrap 4326}#
                                       (begin
                                         (if (if (pair? #{e 22351}#)
                                               #{s 22354}#
                                               #f)
                                           (set-source-properties!
                                             #{e 22351}#
                                             #{s 22354}#))
                                         #{e 22351}#)
                                       #{w 22353}#
                                       #{mod 22355}#))
                                   (syntax-violation
                                     #f
                                     "unexpected syntax"
                                     (#{wrap 4326}#
                                       (begin
                                         (if (if (pair? #{e 22351}#)
                                               #{s 22354}#
                                               #f)
                                           (set-source-properties!
                                             #{e 22351}#
                                             #{s 22354}#))
                                         #{e 22351}#)
                                       #{w 22353}#
                                       #{mod 22355}#))))))))))))))))))
   (#{expand-application 4335}#
     (lambda (#{x 23547}#
              #{e 23548}#
              #{r 23549}#
              #{w 23550}#
              #{s 23551}#
              #{mod 23552}#)
       (let ((#{tmp 23554}#
               ($sc-dispatch #{e 23548}# '(any . each-any))))
         (if #{tmp 23554}#
           (@apply
             (lambda (#{e0 23558}# #{e1 23559}#)
               (#{build-application 4268}#
                 #{s 23551}#
                 #{x 23547}#
                 (map (lambda (#{e 23644}#)
                        (#{expand 4333}#
                          #{e 23644}#
                          #{r 23549}#
                          #{w 23550}#
                          #{mod 23552}#))
                      #{e1 23559}#)))
             #{tmp 23554}#)
           (syntax-violation
             #f
             "source expression failed to match any pattern"
             #{e 23548}#)))))
   (#{expand-macro 4336}#
     (lambda (#{p 23725}#
              #{e 23726}#
              #{r 23727}#
              #{w 23728}#
              #{s 23729}#
              #{rib 23730}#
              #{mod 23731}#)
       (letrec*
         ((#{rebuild-macro-output 23732}#
            (lambda (#{x 23763}# #{m 23764}#)
              (if (pair? #{x 23763}#)
                (let ((#{e 23768}#
                        (cons (#{rebuild-macro-output 23732}#
                                (car #{x 23763}#)
                                #{m 23764}#)
                              (#{rebuild-macro-output 23732}#
                                (cdr #{x 23763}#)
                                #{m 23764}#))))
                  (begin
                    (if (if (pair? #{e 23768}#) #{s 23729}# #f)
                      (set-source-properties! #{e 23768}# #{s 23729}#))
                    #{e 23768}#))
                (if (if (vector? #{x 23763}#)
                      (if (= (vector-length #{x 23763}#) 4)
                        (eq? (vector-ref #{x 23763}# 0) 'syntax-object)
                        #f)
                      #f)
                  (let ((#{w 23784}# (vector-ref #{x 23763}# 2)))
                    (let ((#{ms 23785}# (car #{w 23784}#))
                          (#{s 23786}# (cdr #{w 23784}#)))
                      (if (if (pair? #{ms 23785}#)
                            (eq? (car #{ms 23785}#) #f)
                            #f)
                        (let ((#{expression 23794}# (vector-ref #{x 23763}# 1))
                              (#{wrap 23795}#
                                (cons (cdr #{ms 23785}#)
                                      (if #{rib 23730}#
                                        (cons #{rib 23730}# (cdr #{s 23786}#))
                                        (cdr #{s 23786}#))))
                              (#{module 23796}# (vector-ref #{x 23763}# 3)))
                          (vector
                            'syntax-object
                            #{expression 23794}#
                            #{wrap 23795}#
                            #{module 23796}#))
                        (let ((#{expression 23806}#
                                (let ((#{e 23811}# (vector-ref #{x 23763}# 1)))
                                  (begin
                                    (if (if (pair? #{e 23811}#) #{s 23786}# #f)
                                      (set-source-properties!
                                        #{e 23811}#
                                        #{s 23786}#))
                                    #{e 23811}#)))
                              (#{wrap 23807}#
                                (cons (cons #{m 23764}# #{ms 23785}#)
                                      (if #{rib 23730}#
                                        (cons #{rib 23730}#
                                              (cons 'shift #{s 23786}#))
                                        (cons 'shift #{s 23786}#))))
                              (#{module 23808}# (vector-ref #{x 23763}# 3)))
                          (vector
                            'syntax-object
                            #{expression 23806}#
                            #{wrap 23807}#
                            #{module 23808}#)))))
                  (if (vector? #{x 23763}#)
                    (let ((#{n 23823}# (vector-length #{x 23763}#)))
                      (let ((#{v 23824}#
                              (let ((#{e 23832}# (make-vector #{n 23823}#)))
                                (begin
                                  (if (if (pair? #{e 23832}#) #{x 23763}# #f)
                                    (set-source-properties!
                                      #{e 23832}#
                                      #{x 23763}#))
                                  #{e 23832}#))))
                        (letrec*
                          ((#{loop 23825}#
                             (lambda (#{i 23877}#)
                               (if (= #{i 23877}# #{n 23823}#)
                                 #{v 23824}#
                                 (begin
                                   (vector-set!
                                     #{v 23824}#
                                     #{i 23877}#
                                     (#{rebuild-macro-output 23732}#
                                       (vector-ref #{x 23763}# #{i 23877}#)
                                       #{m 23764}#))
                                   (#{loop 23825}# (#{1+}# #{i 23877}#)))))))
                          (#{loop 23825}# 0))))
                    (if (symbol? #{x 23763}#)
                      (syntax-violation
                        #f
                        "encountered raw symbol in macro output"
                        (let ((#{s 23883}# (cdr #{w 23728}#)))
                          (#{wrap 4326}#
                            (begin
                              (if (if (pair? #{e 23726}#) #{s 23883}# #f)
                                (set-source-properties!
                                  #{e 23726}#
                                  #{s 23883}#))
                              #{e 23726}#)
                            #{w 23728}#
                            #{mod 23731}#))
                        #{x 23763}#)
                      (begin
                        (if (if (pair? #{x 23763}#) #{s 23729}# #f)
                          (set-source-properties! #{x 23763}# #{s 23729}#))
                        #{x 23763}#))))))))
         (#{rebuild-macro-output 23732}#
           (#{p 23725}#
             (let ((#{w 23739}#
                     (cons (cons #f (car #{w 23728}#))
                           (cons 'shift (cdr #{w 23728}#)))))
               (#{wrap 4326}#
                 (begin
                   (if (if (pair? #{e 23726}#) #{s 23729}# #f)
                     (set-source-properties! #{e 23726}# #{s 23729}#))
                   #{e 23726}#)
                 #{w 23739}#
                 #{mod 23731}#)))
           (gensym "m")))))
   (#{expand-body 4337}#
     (lambda (#{body 23915}#
              #{outer-form 23916}#
              #{r 23917}#
              #{w 23918}#
              #{mod 23919}#)
       (let ((#{r 23920}#
               (cons '("placeholder" placeholder) #{r 23917}#)))
         (let ((#{ribcage 23921}# (vector 'ribcage '() '() '())))
           (let ((#{w 23922}#
                   (cons (car #{w 23918}#)
                         (cons #{ribcage 23921}# (cdr #{w 23918}#)))))
             (letrec*
               ((#{parse 23923}#
                  (lambda (#{body 23936}#
                           #{ids 23937}#
                           #{labels 23938}#
                           #{var-ids 23939}#
                           #{vars 23940}#
                           #{vals 23941}#
                           #{bindings 23942}#)
                    (if (null? #{body 23936}#)
                      (syntax-violation
                        #f
                        "no expressions in body"
                        #{outer-form 23916}#)
                      (let ((#{e 23943}# (cdr (car #{body 23936}#)))
                            (#{er 23944}# (car (car #{body 23936}#))))
                        (call-with-values
                          (lambda ()
                            (#{syntax-type 4332}#
                              #{e 23943}#
                              #{er 23944}#
                              '(())
                              (#{source-annotation 4294}# #{er 23944}#)
                              #{ribcage 23921}#
                              #{mod 23919}#
                              #f))
                          (lambda (#{type 24120}#
                                   #{value 24121}#
                                   #{e 24122}#
                                   #{w 24123}#
                                   #{s 24124}#
                                   #{mod 24125}#)
                            (if (eqv? #{type 24120}# 'define-form)
                              (let ((#{id 24129}#
                                      (#{wrap 4326}#
                                        #{value 24121}#
                                        #{w 24123}#
                                        #{mod 24125}#))
                                    (#{label 24130}#
                                      (symbol->string (gensym "i"))))
                                (let ((#{var 24131}#
                                        (let ((#{id 24191}#
                                                (if (if (vector? #{id 24129}#)
                                                      (if (= (vector-length
                                                               #{id 24129}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{id 24129}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref #{id 24129}# 1)
                                                  #{id 24129}#)))
                                          (gensym
                                            (string-append
                                              (symbol->string #{id 24191}#)
                                              " ")))))
                                  (begin
                                    (let ((#{update 24181}#
                                            (cons (vector-ref #{id 24129}# 1)
                                                  (vector-ref
                                                    #{ribcage 23921}#
                                                    1))))
                                      (vector-set!
                                        #{ribcage 23921}#
                                        1
                                        #{update 24181}#))
                                    (let ((#{update 24183}#
                                            (cons (car (vector-ref
                                                         #{id 24129}#
                                                         2))
                                                  (vector-ref
                                                    #{ribcage 23921}#
                                                    2))))
                                      (vector-set!
                                        #{ribcage 23921}#
                                        2
                                        #{update 24183}#))
                                    (let ((#{update 24185}#
                                            (cons #{label 24130}#
                                                  (vector-ref
                                                    #{ribcage 23921}#
                                                    3))))
                                      (vector-set!
                                        #{ribcage 23921}#
                                        3
                                        #{update 24185}#))
                                    (#{parse 23923}#
                                      (cdr #{body 23936}#)
                                      (cons #{id 24129}# #{ids 23937}#)
                                      (cons #{label 24130}# #{labels 23938}#)
                                      (cons #{id 24129}# #{var-ids 23939}#)
                                      (cons #{var 24131}# #{vars 23940}#)
                                      (cons (cons #{er 23944}#
                                                  (#{wrap 4326}#
                                                    #{e 24122}#
                                                    #{w 24123}#
                                                    #{mod 24125}#))
                                            #{vals 23941}#)
                                      (cons (cons 'lexical #{var 24131}#)
                                            #{bindings 23942}#)))))
                              (if (eqv? #{type 24120}# 'define-syntax-form)
                                (let ((#{id 24219}#
                                        (#{wrap 4326}#
                                          #{value 24121}#
                                          #{w 24123}#
                                          #{mod 24125}#))
                                      (#{label 24220}#
                                        (symbol->string (gensym "i"))))
                                  (begin
                                    (let ((#{update 24270}#
                                            (cons (vector-ref #{id 24219}# 1)
                                                  (vector-ref
                                                    #{ribcage 23921}#
                                                    1))))
                                      (vector-set!
                                        #{ribcage 23921}#
                                        1
                                        #{update 24270}#))
                                    (let ((#{update 24272}#
                                            (cons (car (vector-ref
                                                         #{id 24219}#
                                                         2))
                                                  (vector-ref
                                                    #{ribcage 23921}#
                                                    2))))
                                      (vector-set!
                                        #{ribcage 23921}#
                                        2
                                        #{update 24272}#))
                                    (let ((#{update 24274}#
                                            (cons #{label 24220}#
                                                  (vector-ref
                                                    #{ribcage 23921}#
                                                    3))))
                                      (vector-set!
                                        #{ribcage 23921}#
                                        3
                                        #{update 24274}#))
                                    (#{parse 23923}#
                                      (cdr #{body 23936}#)
                                      (cons #{id 24219}# #{ids 23937}#)
                                      (cons #{label 24220}# #{labels 23938}#)
                                      #{var-ids 23939}#
                                      #{vars 23940}#
                                      #{vals 23941}#
                                      (cons (cons 'macro
                                                  (cons #{er 23944}#
                                                        (#{wrap 4326}#
                                                          #{e 24122}#
                                                          #{w 24123}#
                                                          #{mod 24125}#)))
                                            #{bindings 23942}#))))
                                (if (eqv? #{type 24120}# 'begin-form)
                                  (let ((#{tmp 24282}#
                                          ($sc-dispatch
                                            #{e 24122}#
                                            '(_ . each-any))))
                                    (if #{tmp 24282}#
                                      (@apply
                                        (lambda (#{e1 24286}#)
                                          (#{parse 23923}#
                                            (letrec*
                                              ((#{f 24287}#
                                                 (lambda (#{forms 24350}#)
                                                   (if (null? #{forms 24350}#)
                                                     (cdr #{body 23936}#)
                                                     (cons (cons #{er 23944}#
                                                                 (#{wrap 4326}#
                                                                   (car #{forms 24350}#)
                                                                   #{w 24123}#
                                                                   #{mod 24125}#))
                                                           (#{f 24287}#
                                                             (cdr #{forms 24350}#)))))))
                                              (#{f 24287}# #{e1 24286}#))
                                            #{ids 23937}#
                                            #{labels 23938}#
                                            #{var-ids 23939}#
                                            #{vars 23940}#
                                            #{vals 23941}#
                                            #{bindings 23942}#))
                                        #{tmp 24282}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 24122}#)))
                                  (if (eqv? #{type 24120}# 'local-syntax-form)
                                    (#{expand-local-syntax 4338}#
                                      #{value 24121}#
                                      #{e 24122}#
                                      #{er 23944}#
                                      #{w 24123}#
                                      #{s 24124}#
                                      #{mod 24125}#
                                      (lambda (#{forms 24364}#
                                               #{er 24365}#
                                               #{w 24366}#
                                               #{s 24367}#
                                               #{mod 24368}#)
                                        (#{parse 23923}#
                                          (letrec*
                                            ((#{f 24369}#
                                               (lambda (#{forms 24432}#)
                                                 (if (null? #{forms 24432}#)
                                                   (cdr #{body 23936}#)
                                                   (cons (cons #{er 24365}#
                                                               (#{wrap 4326}#
                                                                 (car #{forms 24432}#)
                                                                 #{w 24366}#
                                                                 #{mod 24368}#))
                                                         (#{f 24369}#
                                                           (cdr #{forms 24432}#)))))))
                                            (#{f 24369}# #{forms 24364}#))
                                          #{ids 23937}#
                                          #{labels 23938}#
                                          #{var-ids 23939}#
                                          #{vars 23940}#
                                          #{vals 23941}#
                                          #{bindings 23942}#)))
                                    (if (null? #{ids 23937}#)
                                      (#{build-sequence 4282}#
                                        #f
                                        (map (lambda (#{x 24502}#)
                                               (#{expand 4333}#
                                                 (cdr #{x 24502}#)
                                                 (car #{x 24502}#)
                                                 '(())
                                                 #{mod 24125}#))
                                             (cons (cons #{er 23944}#
                                                         (#{wrap 4326}#
                                                           (begin
                                                             (if (if (pair? #{e 24122}#)
                                                                   #{s 24124}#
                                                                   #f)
                                                               (set-source-properties!
                                                                 #{e 24122}#
                                                                 #{s 24124}#))
                                                             #{e 24122}#)
                                                           #{w 24123}#
                                                           #{mod 24125}#))
                                                   (cdr #{body 23936}#))))
                                      (begin
                                        (if (not (#{valid-bound-ids? 4323}#
                                                   #{ids 23937}#))
                                          (syntax-violation
                                            #f
                                            "invalid or duplicate identifier in definition"
                                            #{outer-form 23916}#))
                                        (letrec*
                                          ((#{loop 24664}#
                                             (lambda (#{bs 24667}#
                                                      #{er-cache 24668}#
                                                      #{r-cache 24669}#)
                                               (if (not (null? #{bs 24667}#))
                                                 (let ((#{b 24670}#
                                                         (car #{bs 24667}#)))
                                                   (if (eq? (car #{b 24670}#)
                                                            'macro)
                                                     (let ((#{er 24672}#
                                                             (car (cdr #{b 24670}#))))
                                                       (let ((#{r-cache 24673}#
                                                               (if (eq? #{er 24672}#
                                                                        #{er-cache 24668}#)
                                                                 #{r-cache 24669}#
                                                                 (#{macros-only-env 4297}#
                                                                   #{er 24672}#))))
                                                         (begin
                                                           (set-cdr!
                                                             #{b 24670}#
                                                             (#{eval-local-transformer 4339}#
                                                               (#{expand 4333}#
                                                                 (cdr (cdr #{b 24670}#))
                                                                 #{r-cache 24673}#
                                                                 '(())
                                                                 #{mod 24125}#)
                                                               #{mod 24125}#))
                                                           (#{loop 24664}#
                                                             (cdr #{bs 24667}#)
                                                             #{er 24672}#
                                                             #{r-cache 24673}#))))
                                                     (#{loop 24664}#
                                                       (cdr #{bs 24667}#)
                                                       #{er-cache 24668}#
                                                       #{r-cache 24669}#)))))))
                                          (#{loop 24664}#
                                            #{bindings 23942}#
                                            #f
                                            #f))
                                        (set-cdr!
                                          #{r 23920}#
                                          (#{extend-env 4295}#
                                            #{labels 23938}#
                                            #{bindings 23942}#
                                            (cdr #{r 23920}#)))
                                        (#{build-letrec 4285}#
                                          #f
                                          #t
                                          (reverse
                                            (map syntax->datum
                                                 #{var-ids 23939}#))
                                          (reverse #{vars 23940}#)
                                          (map (lambda (#{x 25026}#)
                                                 (#{expand 4333}#
                                                   (cdr #{x 25026}#)
                                                   (car #{x 25026}#)
                                                   '(())
                                                   #{mod 24125}#))
                                               (reverse #{vals 23941}#))
                                          (#{build-sequence 4282}#
                                            #f
                                            (map (lambda (#{x 25156}#)
                                                   (#{expand 4333}#
                                                     (cdr #{x 25156}#)
                                                     (car #{x 25156}#)
                                                     '(())
                                                     #{mod 24125}#))
                                                 (cons (cons #{er 23944}#
                                                             (#{wrap 4326}#
                                                               (begin
                                                                 (if (if (pair? #{e 24122}#)
                                                                       #{s 24124}#
                                                                       #f)
                                                                   (set-source-properties!
                                                                     #{e 24122}#
                                                                     #{s 24124}#))
                                                                 #{e 24122}#)
                                                               #{w 24123}#
                                                               #{mod 24125}#))
                                                       (cdr #{body 23936}#))))))))))))))))))
               (#{parse 23923}#
                 (map (lambda (#{x 23926}#)
                        (cons #{r 23920}#
                              (#{wrap 4326}#
                                #{x 23926}#
                                #{w 23922}#
                                #{mod 23919}#)))
                      #{body 23915}#)
                 '()
                 '()
                 '()
                 '()
                 '()
                 '())))))))
   (#{expand-local-syntax 4338}#
     (lambda (#{rec? 25241}#
              #{e 25242}#
              #{r 25243}#
              #{w 25244}#
              #{s 25245}#
              #{mod 25246}#
              #{k 25247}#)
       (let ((#{tmp 25249}#
               ($sc-dispatch
                 #{e 25242}#
                 '(_ #(each (any any)) any . each-any))))
         (if #{tmp 25249}#
           (@apply
             (lambda (#{id 25253}#
                      #{val 25254}#
                      #{e1 25255}#
                      #{e2 25256}#)
               (if (not (#{valid-bound-ids? 4323}# #{id 25253}#))
                 (syntax-violation
                   #f
                   "duplicate bound keyword"
                   #{e 25242}#)
                 (let ((#{labels 25346}#
                         (#{gen-labels 4304}# #{id 25253}#)))
                   (let ((#{new-w 25347}#
                           (#{make-binding-wrap 4315}#
                             #{id 25253}#
                             #{labels 25346}#
                             #{w 25244}#)))
                     (#{k 25247}#
                       (cons #{e1 25255}# #{e2 25256}#)
                       (#{extend-env 4295}#
                         #{labels 25346}#
                         (let ((#{trans-r 25385}#
                                 (#{macros-only-env 4297}# #{r 25243}#)))
                           (begin
                             (if #{rec? 25241}# (if #f #f))
                             (map (lambda (#{x 25386}#)
                                    (cons 'macro
                                          (#{eval-local-transformer 4339}#
                                            (#{expand 4333}#
                                              #{x 25386}#
                                              #{trans-r 25385}#
                                              (if #{rec? 25241}#
                                                #{new-w 25347}#
                                                #{w 25244}#)
                                              #{mod 25246}#)
                                            #{mod 25246}#)))
                                  #{val 25254}#)))
                         #{r 25243}#)
                       #{new-w 25347}#
                       #{s 25245}#
                       #{mod 25246}#)))))
             #{tmp 25249}#)
           (syntax-violation
             #f
             "bad local syntax definition"
             (#{wrap 4326}#
               (begin
                 (if (if (pair? #{e 25242}#) #{s 25245}# #f)
                   (set-source-properties! #{e 25242}# #{s 25245}#))
                 #{e 25242}#)
               #{w 25244}#
               #{mod 25246}#))))))
   (#{eval-local-transformer 4339}#
     (lambda (#{expanded 25687}# #{mod 25688}#)
       (let ((#{p 25689}# (primitive-eval #{expanded 25687}#)))
         (if (procedure? #{p 25689}#)
           #{p 25689}#
           (syntax-violation
             #f
             "nonprocedure transformer"
             #{p 25689}#)))))
   (#{ellipsis? 4341}#
     (lambda (#{x 5147}#)
       (if (if (if (vector? #{x 5147}#)
                 (if (= (vector-length #{x 5147}#) 4)
                   (eq? (vector-ref #{x 5147}# 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref #{x 5147}# 1))
             #f)
         (if (eq? (if (if (vector? #{x 5147}#)
                        (if (= (vector-length #{x 5147}#) 4)
                          (eq? (vector-ref #{x 5147}# 0) 'syntax-object)
                          #f)
                        #f)
                    (vector-ref #{x 5147}# 1)
                    #{x 5147}#)
                  (if (if (= (vector-length
                               '#(syntax-object
                                  ...
                                  ((top)
                                   #(ribcage () () ())
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i2218"))
                                   #(ribcage
                                     (lambda-var-list
                                       gen-var
                                       strip
                                       expand-lambda-case
                                       lambda*-formals
                                       expand-simple-lambda
                                       lambda-formals
                                       ellipsis?
                                       expand-void
                                       eval-local-transformer
                                       expand-local-syntax
                                       expand-body
                                       expand-macro
                                       expand-application
                                       expand-expr
                                       expand
                                       syntax-type
                                       parse-when-list
                                       expand-install-global
                                       expand-top-sequence
                                       expand-sequence
                                       source-wrap
                                       wrap
                                       bound-id-member?
                                       distinct-bound-ids?
                                       valid-bound-ids?
                                       bound-id=?
                                       free-id=?
                                       id-var-name
                                       same-marks?
                                       join-marks
                                       join-wraps
                                       smart-append
                                       make-binding-wrap
                                       extend-ribcage!
                                       make-empty-ribcage
                                       new-mark
                                       anti-mark
                                       the-anti-mark
                                       top-marked?
                                       top-wrap
                                       empty-wrap
                                       set-ribcage-labels!
                                       set-ribcage-marks!
                                       set-ribcage-symnames!
                                       ribcage-labels
                                       ribcage-marks
                                       ribcage-symnames
                                       ribcage?
                                       make-ribcage
                                       gen-labels
                                       gen-label
                                       make-rename
                                       rename-marks
                                       rename-new
                                       rename-old
                                       subst-rename?
                                       wrap-subst
                                       wrap-marks
                                       make-wrap
                                       id-sym-name&marks
                                       id-sym-name
                                       id?
                                       nonsymbol-id?
                                       global-extend
                                       lookup
                                       macros-only-env
                                       extend-var-env
                                       extend-env
                                       null-env
                                       binding-value
                                       binding-type
                                       make-binding
                                       arg-check
                                       source-annotation
                                       no-source
                                       set-syntax-object-module!
                                       set-syntax-object-wrap!
                                       set-syntax-object-expression!
                                       syntax-object-module
                                       syntax-object-wrap
                                       syntax-object-expression
                                       syntax-object?
                                       make-syntax-object
                                       build-lexical-var
                                       build-letrec
                                       build-named-let
                                       build-let
                                       build-sequence
                                       build-data
                                       build-primref
                                       build-lambda-case
                                       build-case-lambda
                                       build-simple-lambda
                                       build-global-definition
                                       build-global-assignment
                                       build-global-reference
                                       analyze-variable
                                       build-lexical-assignment
                                       build-lexical-reference
                                       build-dynlet
                                       build-conditional
                                       build-application
                                       build-void
                                       maybe-name-value!
                                       decorate-source
                                       get-global-definition-hook
                                       put-global-definition-hook
                                       gensym-hook
                                       local-eval-hook
                                       top-level-eval-hook
                                       fx<
                                       fx=
                                       fx-
                                       fx+
                                       set-lambda-meta!
                                       lambda-meta
                                       lambda?
                                       make-dynlet
                                       make-letrec
                                       make-let
                                       make-lambda-case
                                       make-lambda
                                       make-sequence
                                       make-application
                                       make-conditional
                                       make-toplevel-define
                                       make-toplevel-set
                                       make-toplevel-ref
                                       make-module-set
                                       make-module-ref
                                       make-lexical-set
                                       make-lexical-ref
                                       make-primitive-ref
                                       make-const
                                       make-void)
                                     ((top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top))
                                     ("i467"
                                      "i465"
                                      "i463"
                                      "i461"
                                      "i459"
                                      "i457"
                                      "i455"
                                      "i453"
                                      "i451"
                                      "i449"
                                      "i447"
                                      "i445"
                                      "i443"
                                      "i441"
                                      "i439"
                                      "i437"
                                      "i435"
                                      "i433"
                                      "i431"
                                      "i429"
                                      "i427"
                                      "i425"
                                      "i423"
                                      "i421"
                                      "i419"
                                      "i417"
                                      "i415"
                                      "i413"
                                      "i411"
                                      "i409"
                                      "i407"
                                      "i405"
                                      "i403"
                                      "i401"
                                      "i399"
                                      "i398"
                                      "i396"
                                      "i393"
                                      "i392"
                                      "i391"
                                      "i389"
                                      "i388"
                                      "i386"
                                      "i384"
                                      "i382"
                                      "i380"
                                      "i378"
                                      "i376"
                                      "i374"
                                      "i372"
                                      "i369"
                                      "i367"
                                      "i366"
                                      "i364"
                                      "i362"
                                      "i360"
                                      "i358"
                                      "i357"
                                      "i356"
                                      "i355"
                                      "i353"
                                      "i352"
                                      "i349"
                                      "i347"
                                      "i345"
                                      "i343"
                                      "i341"
                                      "i339"
                                      "i337"
                                      "i336"
                                      "i335"
                                      "i333"
                                      "i331"
                                      "i330"
                                      "i327"
                                      "i326"
                                      "i324"
                                      "i322"
                                      "i320"
                                      "i318"
                                      "i316"
                                      "i314"
                                      "i312"
                                      "i310"
                                      "i308"
                                      "i305"
                                      "i303"
                                      "i301"
                                      "i299"
                                      "i297"
                                      "i295"
                                      "i293"
                                      "i291"
                                      "i289"
                                      "i287"
                                      "i285"
                                      "i283"
                                      "i281"
                                      "i279"
                                      "i277"
                                      "i275"
                                      "i273"
                                      "i271"
                                      "i269"
                                      "i267"
                                      "i265"
                                      "i263"
                                      "i261"
                                      "i260"
                                      "i257"
                                      "i255"
                                      "i254"
                                      "i253"
                                      "i252"
                                      "i251"
                                      "i249"
                                      "i247"
                                      "i245"
                                      "i242"
                                      "i240"
                                      "i238"
                                      "i236"
                                      "i234"
                                      "i232"
                                      "i230"
                                      "i228"
                                      "i226"
                                      "i224"
                                      "i222"
                                      "i220"
                                      "i218"
                                      "i216"
                                      "i214"
                                      "i212"
                                      "i210"
                                      "i208"))
                                   #(ribcage
                                     (define-structure
                                       define-expansion-accessors
                                       define-expansion-constructors)
                                     ((top) (top) (top))
                                     ("i46" "i45" "i44")))
                                  (hygiene guile)))
                             4)
                        #t
                        #f)
                    '...
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i2218"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            expand-lambda-case
                            lambda*-formals
                            expand-simple-lambda
                            lambda-formals
                            ellipsis?
                            expand-void
                            eval-local-transformer
                            expand-local-syntax
                            expand-body
                            expand-macro
                            expand-application
                            expand-expr
                            expand
                            syntax-type
                            parse-when-list
                            expand-install-global
                            expand-top-sequence
                            expand-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            gensym-hook
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("i467"
                           "i465"
                           "i463"
                           "i461"
                           "i459"
                           "i457"
                           "i455"
                           "i453"
                           "i451"
                           "i449"
                           "i447"
                           "i445"
                           "i443"
                           "i441"
                           "i439"
                           "i437"
                           "i435"
                           "i433"
                           "i431"
                           "i429"
                           "i427"
                           "i425"
                           "i423"
                           "i421"
                           "i419"
                           "i417"
                           "i415"
                           "i413"
                           "i411"
                           "i409"
                           "i407"
                           "i405"
                           "i403"
                           "i401"
                           "i399"
                           "i398"
                           "i396"
                           "i393"
                           "i392"
                           "i391"
                           "i389"
                           "i388"
                           "i386"
                           "i384"
                           "i382"
                           "i380"
                           "i378"
                           "i376"
                           "i374"
                           "i372"
                           "i369"
                           "i367"
                           "i366"
                           "i364"
                           "i362"
                           "i360"
                           "i358"
                           "i357"
                           "i356"
                           "i355"
                           "i353"
                           "i352"
                           "i349"
                           "i347"
                           "i345"
                           "i343"
                           "i341"
                           "i339"
                           "i337"
                           "i336"
                           "i335"
                           "i333"
                           "i331"
                           "i330"
                           "i327"
                           "i326"
                           "i324"
                           "i322"
                           "i320"
                           "i318"
                           "i316"
                           "i314"
                           "i312"
                           "i310"
                           "i308"
                           "i305"
                           "i303"
                           "i301"
                           "i299"
                           "i297"
                           "i295"
                           "i293"
                           "i291"
                           "i289"
                           "i287"
                           "i285"
                           "i283"
                           "i281"
                           "i279"
                           "i277"
                           "i275"
                           "i273"
                           "i271"
                           "i269"
                           "i267"
                           "i265"
                           "i263"
                           "i261"
                           "i260"
                           "i257"
                           "i255"
                           "i254"
                           "i253"
                           "i252"
                           "i251"
                           "i249"
                           "i247"
                           "i245"
                           "i242"
                           "i240"
                           "i238"
                           "i236"
                           "i234"
                           "i232"
                           "i230"
                           "i228"
                           "i226"
                           "i224"
                           "i222"
                           "i220"
                           "i218"
                           "i216"
                           "i214"
                           "i212"
                           "i210"
                           "i208"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("i46" "i45" "i44")))
                       (hygiene guile))))
           (eq? (#{id-var-name 4320}# #{x 5147}# '(()))
                (#{id-var-name 4320}#
                  '#(syntax-object
                     ...
                     ((top)
                      #(ribcage () () ())
                      #(ribcage () () ())
                      #(ribcage #(x) #((top)) #("i2218"))
                      #(ribcage
                        (lambda-var-list
                          gen-var
                          strip
                          expand-lambda-case
                          lambda*-formals
                          expand-simple-lambda
                          lambda-formals
                          ellipsis?
                          expand-void
                          eval-local-transformer
                          expand-local-syntax
                          expand-body
                          expand-macro
                          expand-application
                          expand-expr
                          expand
                          syntax-type
                          parse-when-list
                          expand-install-global
                          expand-top-sequence
                          expand-sequence
                          source-wrap
                          wrap
                          bound-id-member?
                          distinct-bound-ids?
                          valid-bound-ids?
                          bound-id=?
                          free-id=?
                          id-var-name
                          same-marks?
                          join-marks
                          join-wraps
                          smart-append
                          make-binding-wrap
                          extend-ribcage!
                          make-empty-ribcage
                          new-mark
                          anti-mark
                          the-anti-mark
                          top-marked?
                          top-wrap
                          empty-wrap
                          set-ribcage-labels!
                          set-ribcage-marks!
                          set-ribcage-symnames!
                          ribcage-labels
                          ribcage-marks
                          ribcage-symnames
                          ribcage?
                          make-ribcage
                          gen-labels
                          gen-label
                          make-rename
                          rename-marks
                          rename-new
                          rename-old
                          subst-rename?
                          wrap-subst
                          wrap-marks
                          make-wrap
                          id-sym-name&marks
                          id-sym-name
                          id?
                          nonsymbol-id?
                          global-extend
                          lookup
                          macros-only-env
                          extend-var-env
                          extend-env
                          null-env
                          binding-value
                          binding-type
                          make-binding
                          arg-check
                          source-annotation
                          no-source
                          set-syntax-object-module!
                          set-syntax-object-wrap!
                          set-syntax-object-expression!
                          syntax-object-module
                          syntax-object-wrap
                          syntax-object-expression
                          syntax-object?
                          make-syntax-object
                          build-lexical-var
                          build-letrec
                          build-named-let
                          build-let
                          build-sequence
                          build-data
                          build-primref
                          build-lambda-case
                          build-case-lambda
                          build-simple-lambda
                          build-global-definition
                          build-global-assignment
                          build-global-reference
                          analyze-variable
                          build-lexical-assignment
                          build-lexical-reference
                          build-dynlet
                          build-conditional
                          build-application
                          build-void
                          maybe-name-value!
                          decorate-source
                          get-global-definition-hook
                          put-global-definition-hook
                          gensym-hook
                          local-eval-hook
                          top-level-eval-hook
                          fx<
                          fx=
                          fx-
                          fx+
                          set-lambda-meta!
                          lambda-meta
                          lambda?
                          make-dynlet
                          make-letrec
                          make-let
                          make-lambda-case
                          make-lambda
                          make-sequence
                          make-application
                          make-conditional
                          make-toplevel-define
                          make-toplevel-set
                          make-toplevel-ref
                          make-module-set
                          make-module-ref
                          make-lexical-set
                          make-lexical-ref
                          make-primitive-ref
                          make-const
                          make-void)
                        ((top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top))
                        ("i467"
                         "i465"
                         "i463"
                         "i461"
                         "i459"
                         "i457"
                         "i455"
                         "i453"
                         "i451"
                         "i449"
                         "i447"
                         "i445"
                         "i443"
                         "i441"
                         "i439"
                         "i437"
                         "i435"
                         "i433"
                         "i431"
                         "i429"
                         "i427"
                         "i425"
                         "i423"
                         "i421"
                         "i419"
                         "i417"
                         "i415"
                         "i413"
                         "i411"
                         "i409"
                         "i407"
                         "i405"
                         "i403"
                         "i401"
                         "i399"
                         "i398"
                         "i396"
                         "i393"
                         "i392"
                         "i391"
                         "i389"
                         "i388"
                         "i386"
                         "i384"
                         "i382"
                         "i380"
                         "i378"
                         "i376"
                         "i374"
                         "i372"
                         "i369"
                         "i367"
                         "i366"
                         "i364"
                         "i362"
                         "i360"
                         "i358"
                         "i357"
                         "i356"
                         "i355"
                         "i353"
                         "i352"
                         "i349"
                         "i347"
                         "i345"
                         "i343"
                         "i341"
                         "i339"
                         "i337"
                         "i336"
                         "i335"
                         "i333"
                         "i331"
                         "i330"
                         "i327"
                         "i326"
                         "i324"
                         "i322"
                         "i320"
                         "i318"
                         "i316"
                         "i314"
                         "i312"
                         "i310"
                         "i308"
                         "i305"
                         "i303"
                         "i301"
                         "i299"
                         "i297"
                         "i295"
                         "i293"
                         "i291"
                         "i289"
                         "i287"
                         "i285"
                         "i283"
                         "i281"
                         "i279"
                         "i277"
                         "i275"
                         "i273"
                         "i271"
                         "i269"
                         "i267"
                         "i265"
                         "i263"
                         "i261"
                         "i260"
                         "i257"
                         "i255"
                         "i254"
                         "i253"
                         "i252"
                         "i251"
                         "i249"
                         "i247"
                         "i245"
                         "i242"
                         "i240"
                         "i238"
                         "i236"
                         "i234"
                         "i232"
                         "i230"
                         "i228"
                         "i226"
                         "i224"
                         "i222"
                         "i220"
                         "i218"
                         "i216"
                         "i214"
                         "i212"
                         "i210"
                         "i208"))
                      #(ribcage
                        (define-structure
                          define-expansion-accessors
                          define-expansion-constructors)
                        ((top) (top) (top))
                        ("i46" "i45" "i44")))
                     (hygiene guile))
                  '(())))
           #f)
         #f)))
   (#{lambda-formals 4342}#
     (lambda (#{orig-args 25694}#)
       (letrec*
         ((#{req 25695}#
            (lambda (#{args 25699}# #{rreq 25700}#)
              (let ((#{tmp 25702}# ($sc-dispatch #{args 25699}# '())))
                (if #{tmp 25702}#
                  (@apply
                    (lambda ()
                      (#{check 25696}# (reverse #{rreq 25700}#) #f))
                    #{tmp 25702}#)
                  (let ((#{tmp 25829}#
                          ($sc-dispatch #{args 25699}# '(any . any))))
                    (if (if #{tmp 25829}#
                          (@apply
                            (lambda (#{a 25833}# #{b 25834}#)
                              (if (symbol? #{a 25833}#)
                                #t
                                (if (if (vector? #{a 25833}#)
                                      (if (= (vector-length #{a 25833}#) 4)
                                        (eq? (vector-ref #{a 25833}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 25833}# 1))
                                  #f)))
                            #{tmp 25829}#)
                          #f)
                      (@apply
                        (lambda (#{a 25861}# #{b 25862}#)
                          (#{req 25695}#
                            #{b 25862}#
                            (cons #{a 25861}# #{rreq 25700}#)))
                        #{tmp 25829}#)
                      (let ((#{tmp 25863}# (list #{args 25699}#)))
                        (if (@apply
                              (lambda (#{r 25865}#)
                                (if (symbol? #{r 25865}#)
                                  #t
                                  (if (if (vector? #{r 25865}#)
                                        (if (= (vector-length #{r 25865}#) 4)
                                          (eq? (vector-ref #{r 25865}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{r 25865}# 1))
                                    #f)))
                              #{tmp 25863}#)
                          (@apply
                            (lambda (#{r 25895}#)
                              (#{check 25696}#
                                (reverse #{rreq 25700}#)
                                #{r 25895}#))
                            #{tmp 25863}#)
                          (syntax-violation
                            'lambda
                            "invalid argument list"
                            #{orig-args 25694}#
                            #{args 25699}#)))))))))
          (#{check 25696}#
            (lambda (#{req 26030}# #{rest 26031}#)
              (if (#{distinct-bound-ids? 4324}#
                    (if #{rest 26031}#
                      (cons #{rest 26031}# #{req 26030}#)
                      #{req 26030}#))
                (values #{req 26030}# #f #{rest 26031}# #f)
                (syntax-violation
                  'lambda
                  "duplicate identifier in argument list"
                  #{orig-args 25694}#)))))
         (#{req 25695}# #{orig-args 25694}# '()))))
   (#{expand-simple-lambda 4343}#
     (lambda (#{e 26151}#
              #{r 26152}#
              #{w 26153}#
              #{s 26154}#
              #{mod 26155}#
              #{req 26156}#
              #{rest 26157}#
              #{meta 26158}#
              #{body 26159}#)
       (let ((#{ids 26160}#
               (if #{rest 26157}#
                 (append #{req 26156}# (list #{rest 26157}#))
                 #{req 26156}#)))
         (let ((#{vars 26161}#
                 (map #{gen-var 4347}# #{ids 26160}#)))
           (let ((#{labels 26162}#
                   (#{gen-labels 4304}# #{ids 26160}#)))
             (#{build-simple-lambda 4277}#
               #{s 26154}#
               (map syntax->datum #{req 26156}#)
               (if #{rest 26157}#
                 (syntax->datum #{rest 26157}#)
                 #f)
               #{vars 26161}#
               #{meta 26158}#
               (#{expand-body 4337}#
                 #{body 26159}#
                 (#{wrap 4326}#
                   (begin
                     (if (if (pair? #{e 26151}#) #{s 26154}# #f)
                       (set-source-properties! #{e 26151}# #{s 26154}#))
                     #{e 26151}#)
                   #{w 26153}#
                   #{mod 26155}#)
                 (#{extend-var-env 4296}#
                   #{labels 26162}#
                   #{vars 26161}#
                   #{r 26152}#)
                 (#{make-binding-wrap 4315}#
                   #{ids 26160}#
                   #{labels 26162}#
                   #{w 26153}#)
                 #{mod 26155}#)))))))
   (#{lambda*-formals 4344}#
     (lambda (#{orig-args 26462}#)
       (letrec*
         ((#{req 26463}#
            (lambda (#{args 26470}# #{rreq 26471}#)
              (let ((#{tmp 26473}# ($sc-dispatch #{args 26470}# '())))
                (if #{tmp 26473}#
                  (@apply
                    (lambda ()
                      (#{check 26467}#
                        (reverse #{rreq 26471}#)
                        '()
                        #f
                        '()))
                    #{tmp 26473}#)
                  (let ((#{tmp 26479}#
                          ($sc-dispatch #{args 26470}# '(any . any))))
                    (if (if #{tmp 26479}#
                          (@apply
                            (lambda (#{a 26483}# #{b 26484}#)
                              (if (symbol? #{a 26483}#)
                                #t
                                (if (if (vector? #{a 26483}#)
                                      (if (= (vector-length #{a 26483}#) 4)
                                        (eq? (vector-ref #{a 26483}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 26483}# 1))
                                  #f)))
                            #{tmp 26479}#)
                          #f)
                      (@apply
                        (lambda (#{a 26511}# #{b 26512}#)
                          (#{req 26463}#
                            #{b 26512}#
                            (cons #{a 26511}# #{rreq 26471}#)))
                        #{tmp 26479}#)
                      (let ((#{tmp 26513}#
                              ($sc-dispatch #{args 26470}# '(any . any))))
                        (if (if #{tmp 26513}#
                              (@apply
                                (lambda (#{a 26517}# #{b 26518}#)
                                  (eq? (syntax->datum #{a 26517}#) #:optional))
                                #{tmp 26513}#)
                              #f)
                          (@apply
                            (lambda (#{a 26519}# #{b 26520}#)
                              (#{opt 26464}#
                                #{b 26520}#
                                (reverse #{rreq 26471}#)
                                '()))
                            #{tmp 26513}#)
                          (let ((#{tmp 26523}#
                                  ($sc-dispatch #{args 26470}# '(any . any))))
                            (if (if #{tmp 26523}#
                                  (@apply
                                    (lambda (#{a 26527}# #{b 26528}#)
                                      (eq? (syntax->datum #{a 26527}#) #:key))
                                    #{tmp 26523}#)
                                  #f)
                              (@apply
                                (lambda (#{a 26529}# #{b 26530}#)
                                  (#{key 26465}#
                                    #{b 26530}#
                                    (reverse #{rreq 26471}#)
                                    '()
                                    '()))
                                #{tmp 26523}#)
                              (let ((#{tmp 26533}#
                                      ($sc-dispatch
                                        #{args 26470}#
                                        '(any any))))
                                (if (if #{tmp 26533}#
                                      (@apply
                                        (lambda (#{a 26537}# #{b 26538}#)
                                          (eq? (syntax->datum #{a 26537}#)
                                               #:rest))
                                        #{tmp 26533}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 26539}# #{b 26540}#)
                                      (#{rest 26466}#
                                        #{b 26540}#
                                        (reverse #{rreq 26471}#)
                                        '()
                                        '()))
                                    #{tmp 26533}#)
                                  (let ((#{tmp 26543}# (list #{args 26470}#)))
                                    (if (@apply
                                          (lambda (#{r 26545}#)
                                            (if (symbol? #{r 26545}#)
                                              #t
                                              (if (if (vector? #{r 26545}#)
                                                    (if (= (vector-length
                                                             #{r 26545}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 26545}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 26545}# 1))
                                                #f)))
                                          #{tmp 26543}#)
                                      (@apply
                                        (lambda (#{r 26575}#)
                                          (#{rest 26466}#
                                            #{r 26575}#
                                            (reverse #{rreq 26471}#)
                                            '()
                                            '()))
                                        #{tmp 26543}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid argument list"
                                        #{orig-args 26462}#
                                        #{args 26470}#)))))))))))))))
          (#{opt 26464}#
            (lambda (#{args 26594}# #{req 26595}# #{ropt 26596}#)
              (let ((#{tmp 26598}# ($sc-dispatch #{args 26594}# '())))
                (if #{tmp 26598}#
                  (@apply
                    (lambda ()
                      (#{check 26467}#
                        #{req 26595}#
                        (reverse #{ropt 26596}#)
                        #f
                        '()))
                    #{tmp 26598}#)
                  (let ((#{tmp 26604}#
                          ($sc-dispatch #{args 26594}# '(any . any))))
                    (if (if #{tmp 26604}#
                          (@apply
                            (lambda (#{a 26608}# #{b 26609}#)
                              (if (symbol? #{a 26608}#)
                                #t
                                (if (if (vector? #{a 26608}#)
                                      (if (= (vector-length #{a 26608}#) 4)
                                        (eq? (vector-ref #{a 26608}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 26608}# 1))
                                  #f)))
                            #{tmp 26604}#)
                          #f)
                      (@apply
                        (lambda (#{a 26636}# #{b 26637}#)
                          (#{opt 26464}#
                            #{b 26637}#
                            #{req 26595}#
                            (cons (cons #{a 26636}#
                                        '(#(syntax-object
                                            #f
                                            ((top)
                                             #(ribcage
                                               #(a b)
                                               #((top) (top))
                                               #("i2357" "i2358"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(args req ropt)
                                               #((top) (top) (top))
                                               #("i2347" "i2348" "i2349"))
                                             #(ribcage
                                               (check rest key opt req)
                                               ((top) (top) (top) (top) (top))
                                               ("i2293"
                                                "i2291"
                                                "i2289"
                                                "i2287"
                                                "i2285"))
                                             #(ribcage
                                               #(orig-args)
                                               #((top))
                                               #("i2284"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i399"
                                                "i398"
                                                "i396"
                                                "i393"
                                                "i392"
                                                "i391"
                                                "i389"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i372"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i358"
                                                "i357"
                                                "i356"
                                                "i355"
                                                "i353"
                                                "i352"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i336"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i330"
                                                "i327"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i310"
                                                "i308"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i260"
                                                "i257"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i252"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile))))
                                  #{ropt 26596}#)))
                        #{tmp 26604}#)
                      (let ((#{tmp 26638}#
                              ($sc-dispatch
                                #{args 26594}#
                                '((any any) . any))))
                        (if (if #{tmp 26638}#
                              (@apply
                                (lambda (#{a 26642}#
                                         #{init 26643}#
                                         #{b 26644}#)
                                  (if (symbol? #{a 26642}#)
                                    #t
                                    (if (if (vector? #{a 26642}#)
                                          (if (= (vector-length #{a 26642}#) 4)
                                            (eq? (vector-ref #{a 26642}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 26642}# 1))
                                      #f)))
                                #{tmp 26638}#)
                              #f)
                          (@apply
                            (lambda (#{a 26671}# #{init 26672}# #{b 26673}#)
                              (#{opt 26464}#
                                #{b 26673}#
                                #{req 26595}#
                                (cons (list #{a 26671}# #{init 26672}#)
                                      #{ropt 26596}#)))
                            #{tmp 26638}#)
                          (let ((#{tmp 26674}#
                                  ($sc-dispatch #{args 26594}# '(any . any))))
                            (if (if #{tmp 26674}#
                                  (@apply
                                    (lambda (#{a 26678}# #{b 26679}#)
                                      (eq? (syntax->datum #{a 26678}#) #:key))
                                    #{tmp 26674}#)
                                  #f)
                              (@apply
                                (lambda (#{a 26680}# #{b 26681}#)
                                  (#{key 26465}#
                                    #{b 26681}#
                                    #{req 26595}#
                                    (reverse #{ropt 26596}#)
                                    '()))
                                #{tmp 26674}#)
                              (let ((#{tmp 26684}#
                                      ($sc-dispatch
                                        #{args 26594}#
                                        '(any any))))
                                (if (if #{tmp 26684}#
                                      (@apply
                                        (lambda (#{a 26688}# #{b 26689}#)
                                          (eq? (syntax->datum #{a 26688}#)
                                               #:rest))
                                        #{tmp 26684}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 26690}# #{b 26691}#)
                                      (#{rest 26466}#
                                        #{b 26691}#
                                        #{req 26595}#
                                        (reverse #{ropt 26596}#)
                                        '()))
                                    #{tmp 26684}#)
                                  (let ((#{tmp 26694}# (list #{args 26594}#)))
                                    (if (@apply
                                          (lambda (#{r 26696}#)
                                            (if (symbol? #{r 26696}#)
                                              #t
                                              (if (if (vector? #{r 26696}#)
                                                    (if (= (vector-length
                                                             #{r 26696}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 26696}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 26696}# 1))
                                                #f)))
                                          #{tmp 26694}#)
                                      (@apply
                                        (lambda (#{r 26726}#)
                                          (#{rest 26466}#
                                            #{r 26726}#
                                            #{req 26595}#
                                            (reverse #{ropt 26596}#)
                                            '()))
                                        #{tmp 26694}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid optional argument list"
                                        #{orig-args 26462}#
                                        #{args 26594}#)))))))))))))))
          (#{key 26465}#
            (lambda (#{args 26745}#
                     #{req 26746}#
                     #{opt 26747}#
                     #{rkey 26748}#)
              (let ((#{tmp 26750}# ($sc-dispatch #{args 26745}# '())))
                (if #{tmp 26750}#
                  (@apply
                    (lambda ()
                      (#{check 26467}#
                        #{req 26746}#
                        #{opt 26747}#
                        #f
                        (cons #f (reverse #{rkey 26748}#))))
                    #{tmp 26750}#)
                  (let ((#{tmp 26756}#
                          ($sc-dispatch #{args 26745}# '(any . any))))
                    (if (if #{tmp 26756}#
                          (@apply
                            (lambda (#{a 26760}# #{b 26761}#)
                              (if (symbol? #{a 26760}#)
                                #t
                                (if (if (vector? #{a 26760}#)
                                      (if (= (vector-length #{a 26760}#) 4)
                                        (eq? (vector-ref #{a 26760}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 26760}# 1))
                                  #f)))
                            #{tmp 26756}#)
                          #f)
                      (@apply
                        (lambda (#{a 26788}# #{b 26789}#)
                          (let ((#{tmp 26790}#
                                  (symbol->keyword
                                    (syntax->datum #{a 26788}#))))
                            (#{key 26465}#
                              #{b 26789}#
                              #{req 26746}#
                              #{opt 26747}#
                              (cons (cons #{tmp 26790}#
                                          (cons #{a 26788}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(k)
                                                       #((top))
                                                       #("i2420"))
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i2414" "i2415"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req opt rkey)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i2403"
                                                         "i2404"
                                                         "i2405"
                                                         "i2406"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2293"
                                                        "i2291"
                                                        "i2289"
                                                        "i2287"
                                                        "i2285"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i2284"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i401"
                                                        "i399"
                                                        "i398"
                                                        "i396"
                                                        "i393"
                                                        "i392"
                                                        "i391"
                                                        "i389"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i374"
                                                        "i372"
                                                        "i369"
                                                        "i367"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i360"
                                                        "i358"
                                                        "i357"
                                                        "i356"
                                                        "i355"
                                                        "i353"
                                                        "i352"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i339"
                                                        "i337"
                                                        "i336"
                                                        "i335"
                                                        "i333"
                                                        "i331"
                                                        "i330"
                                                        "i327"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i310"
                                                        "i308"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i261"
                                                        "i260"
                                                        "i257"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i252"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i245"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44")))
                                                    (hygiene guile)))))
                                    #{rkey 26748}#))))
                        #{tmp 26756}#)
                      (let ((#{tmp 26793}#
                              ($sc-dispatch
                                #{args 26745}#
                                '((any any) . any))))
                        (if (if #{tmp 26793}#
                              (@apply
                                (lambda (#{a 26797}#
                                         #{init 26798}#
                                         #{b 26799}#)
                                  (if (symbol? #{a 26797}#)
                                    #t
                                    (if (if (vector? #{a 26797}#)
                                          (if (= (vector-length #{a 26797}#) 4)
                                            (eq? (vector-ref #{a 26797}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 26797}# 1))
                                      #f)))
                                #{tmp 26793}#)
                              #f)
                          (@apply
                            (lambda (#{a 26826}# #{init 26827}# #{b 26828}#)
                              (let ((#{tmp 26829}#
                                      (symbol->keyword
                                        (syntax->datum #{a 26826}#))))
                                (#{key 26465}#
                                  #{b 26828}#
                                  #{req 26746}#
                                  #{opt 26747}#
                                  (cons (list #{tmp 26829}#
                                              #{a 26826}#
                                              #{init 26827}#)
                                        #{rkey 26748}#))))
                            #{tmp 26793}#)
                          (let ((#{tmp 26832}#
                                  ($sc-dispatch
                                    #{args 26745}#
                                    '((any any any) . any))))
                            (if (if #{tmp 26832}#
                                  (@apply
                                    (lambda (#{a 26836}#
                                             #{init 26837}#
                                             #{k 26838}#
                                             #{b 26839}#)
                                      (if (if (symbol? #{a 26836}#)
                                            #t
                                            (if (if (vector? #{a 26836}#)
                                                  (if (= (vector-length
                                                           #{a 26836}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{a 26836}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{a 26836}# 1))
                                              #f))
                                        (keyword? (syntax->datum #{k 26838}#))
                                        #f))
                                    #{tmp 26832}#)
                                  #f)
                              (@apply
                                (lambda (#{a 26866}#
                                         #{init 26867}#
                                         #{k 26868}#
                                         #{b 26869}#)
                                  (#{key 26465}#
                                    #{b 26869}#
                                    #{req 26746}#
                                    #{opt 26747}#
                                    (cons (list #{k 26868}#
                                                #{a 26866}#
                                                #{init 26867}#)
                                          #{rkey 26748}#)))
                                #{tmp 26832}#)
                              (let ((#{tmp 26870}#
                                      ($sc-dispatch #{args 26745}# '(any))))
                                (if (if #{tmp 26870}#
                                      (@apply
                                        (lambda (#{aok 26874}#)
                                          (eq? (syntax->datum #{aok 26874}#)
                                               #:allow-other-keys))
                                        #{tmp 26870}#)
                                      #f)
                                  (@apply
                                    (lambda (#{aok 26875}#)
                                      (#{check 26467}#
                                        #{req 26746}#
                                        #{opt 26747}#
                                        #f
                                        (cons #t (reverse #{rkey 26748}#))))
                                    #{tmp 26870}#)
                                  (let ((#{tmp 26878}#
                                          ($sc-dispatch
                                            #{args 26745}#
                                            '(any any any))))
                                    (if (if #{tmp 26878}#
                                          (@apply
                                            (lambda (#{aok 26882}#
                                                     #{a 26883}#
                                                     #{b 26884}#)
                                              (if (eq? (syntax->datum
                                                         #{aok 26882}#)
                                                       #:allow-other-keys)
                                                (eq? (syntax->datum
                                                       #{a 26883}#)
                                                     #:rest)
                                                #f))
                                            #{tmp 26878}#)
                                          #f)
                                      (@apply
                                        (lambda (#{aok 26885}#
                                                 #{a 26886}#
                                                 #{b 26887}#)
                                          (#{rest 26466}#
                                            #{b 26887}#
                                            #{req 26746}#
                                            #{opt 26747}#
                                            (cons #t
                                                  (reverse #{rkey 26748}#))))
                                        #{tmp 26878}#)
                                      (let ((#{tmp 26890}#
                                              ($sc-dispatch
                                                #{args 26745}#
                                                '(any . any))))
                                        (if (if #{tmp 26890}#
                                              (@apply
                                                (lambda (#{aok 26894}#
                                                         #{r 26895}#)
                                                  (if (eq? (syntax->datum
                                                             #{aok 26894}#)
                                                           #:allow-other-keys)
                                                    (if (symbol? #{r 26895}#)
                                                      #t
                                                      (if (if (vector?
                                                                #{r 26895}#)
                                                            (if (= (vector-length
                                                                     #{r 26895}#)
                                                                   4)
                                                              (eq? (vector-ref
                                                                     #{r 26895}#
                                                                     0)
                                                                   'syntax-object)
                                                              #f)
                                                            #f)
                                                        (symbol?
                                                          (vector-ref
                                                            #{r 26895}#
                                                            1))
                                                        #f))
                                                    #f))
                                                #{tmp 26890}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok 26922}# #{r 26923}#)
                                              (#{rest 26466}#
                                                #{r 26923}#
                                                #{req 26746}#
                                                #{opt 26747}#
                                                (cons #t
                                                      (reverse
                                                        #{rkey 26748}#))))
                                            #{tmp 26890}#)
                                          (let ((#{tmp 26926}#
                                                  ($sc-dispatch
                                                    #{args 26745}#
                                                    '(any any))))
                                            (if (if #{tmp 26926}#
                                                  (@apply
                                                    (lambda (#{a 26930}#
                                                             #{b 26931}#)
                                                      (eq? (syntax->datum
                                                             #{a 26930}#)
                                                           #:rest))
                                                    #{tmp 26926}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{a 26932}#
                                                         #{b 26933}#)
                                                  (#{rest 26466}#
                                                    #{b 26933}#
                                                    #{req 26746}#
                                                    #{opt 26747}#
                                                    (cons #f
                                                          (reverse
                                                            #{rkey 26748}#))))
                                                #{tmp 26926}#)
                                              (let ((#{tmp 26936}#
                                                      (list #{args 26745}#)))
                                                (if (@apply
                                                      (lambda (#{r 26938}#)
                                                        (if (symbol?
                                                              #{r 26938}#)
                                                          #t
                                                          (if (if (vector?
                                                                    #{r 26938}#)
                                                                (if (= (vector-length
                                                                         #{r 26938}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{r 26938}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (symbol?
                                                              (vector-ref
                                                                #{r 26938}#
                                                                1))
                                                            #f)))
                                                      #{tmp 26936}#)
                                                  (@apply
                                                    (lambda (#{r 26968}#)
                                                      (#{rest 26466}#
                                                        #{r 26968}#
                                                        #{req 26746}#
                                                        #{opt 26747}#
                                                        (cons #f
                                                              (reverse
                                                                #{rkey 26748}#))))
                                                    #{tmp 26936}#)
                                                  (syntax-violation
                                                    'lambda*
                                                    "invalid keyword argument list"
                                                    #{orig-args 26462}#
                                                    #{args 26745}#)))))))))))))))))))))
          (#{rest 26466}#
            (lambda (#{args 26996}#
                     #{req 26997}#
                     #{opt 26998}#
                     #{kw 26999}#)
              (let ((#{tmp 27001}# (list #{args 26996}#)))
                (if (@apply
                      (lambda (#{r 27003}#)
                        (if (symbol? #{r 27003}#)
                          #t
                          (if (if (vector? #{r 27003}#)
                                (if (= (vector-length #{r 27003}#) 4)
                                  (eq? (vector-ref #{r 27003}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{r 27003}# 1))
                            #f)))
                      #{tmp 27001}#)
                  (@apply
                    (lambda (#{r 27033}#)
                      (#{check 26467}#
                        #{req 26997}#
                        #{opt 26998}#
                        #{r 27033}#
                        #{kw 26999}#))
                    #{tmp 27001}#)
                  (syntax-violation
                    'lambda*
                    "invalid rest argument"
                    #{orig-args 26462}#
                    #{args 26996}#)))))
          (#{check 26467}#
            (lambda (#{req 27037}#
                     #{opt 27038}#
                     #{rest 27039}#
                     #{kw 27040}#)
              (if (#{distinct-bound-ids? 4324}#
                    (append
                      #{req 27037}#
                      (map car #{opt 27038}#)
                      (if #{rest 27039}# (list #{rest 27039}#) '())
                      (if (pair? #{kw 27040}#)
                        (map cadr (cdr #{kw 27040}#))
                        '())))
                (values
                  #{req 27037}#
                  #{opt 27038}#
                  #{rest 27039}#
                  #{kw 27040}#)
                (syntax-violation
                  'lambda*
                  "duplicate identifier in argument list"
                  #{orig-args 26462}#)))))
         (#{req 26463}# #{orig-args 26462}# '()))))
   (#{expand-lambda-case 4345}#
     (lambda (#{e 27160}#
              #{r 27161}#
              #{w 27162}#
              #{s 27163}#
              #{mod 27164}#
              #{get-formals 27165}#
              #{clauses 27166}#)
       (letrec*
         ((#{parse-req 27167}#
            (lambda (#{req 27301}#
                     #{opt 27302}#
                     #{rest 27303}#
                     #{kw 27304}#
                     #{body 27305}#)
              (let ((#{vars 27306}#
                      (map #{gen-var 4347}# #{req 27301}#))
                    (#{labels 27307}#
                      (#{gen-labels 4304}# #{req 27301}#)))
                (let ((#{r* 27308}#
                        (#{extend-var-env 4296}#
                          #{labels 27307}#
                          #{vars 27306}#
                          #{r 27161}#))
                      (#{w* 27309}#
                        (#{make-binding-wrap 4315}#
                          #{req 27301}#
                          #{labels 27307}#
                          #{w 27162}#)))
                  (#{parse-opt 27168}#
                    (map syntax->datum #{req 27301}#)
                    #{opt 27302}#
                    #{rest 27303}#
                    #{kw 27304}#
                    #{body 27305}#
                    (reverse #{vars 27306}#)
                    #{r* 27308}#
                    #{w* 27309}#
                    '()
                    '())))))
          (#{parse-opt 27168}#
            (lambda (#{req 27525}#
                     #{opt 27526}#
                     #{rest 27527}#
                     #{kw 27528}#
                     #{body 27529}#
                     #{vars 27530}#
                     #{r* 27531}#
                     #{w* 27532}#
                     #{out 27533}#
                     #{inits 27534}#)
              (if (pair? #{opt 27526}#)
                (let ((#{tmp 27535}# (car #{opt 27526}#)))
                  (let ((#{tmp 27536}#
                          ($sc-dispatch #{tmp 27535}# '(any any))))
                    (if #{tmp 27536}#
                      (@apply
                        (lambda (#{id 27538}# #{i 27539}#)
                          (let ((#{v 27540}#
                                  (let ((#{id 27548}#
                                          (if (if (vector? #{id 27538}#)
                                                (if (= (vector-length
                                                         #{id 27538}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 27538}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 27538}# 1)
                                            #{id 27538}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 27548}#)
                                        " ")))))
                            (let ((#{l 27541}#
                                    (#{gen-labels 4304}# (list #{v 27540}#))))
                              (let ((#{r** 27542}#
                                      (#{extend-var-env 4296}#
                                        #{l 27541}#
                                        (list #{v 27540}#)
                                        #{r* 27531}#)))
                                (let ((#{w** 27543}#
                                        (#{make-binding-wrap 4315}#
                                          (list #{id 27538}#)
                                          #{l 27541}#
                                          #{w* 27532}#)))
                                  (#{parse-opt 27168}#
                                    #{req 27525}#
                                    (cdr #{opt 27526}#)
                                    #{rest 27527}#
                                    #{kw 27528}#
                                    #{body 27529}#
                                    (cons #{v 27540}# #{vars 27530}#)
                                    #{r** 27542}#
                                    #{w** 27543}#
                                    (cons (syntax->datum #{id 27538}#)
                                          #{out 27533}#)
                                    (cons (#{expand 4333}#
                                            #{i 27539}#
                                            #{r* 27531}#
                                            #{w* 27532}#
                                            #{mod 27164}#)
                                          #{inits 27534}#)))))))
                        #{tmp 27536}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 27535}#))))
                (if #{rest 27527}#
                  (let ((#{v 27820}#
                          (let ((#{id 27830}#
                                  (if (if (vector? #{rest 27527}#)
                                        (if (= (vector-length #{rest 27527}#)
                                               4)
                                          (eq? (vector-ref #{rest 27527}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{rest 27527}# 1)
                                    #{rest 27527}#)))
                            (gensym
                              (string-append
                                (symbol->string #{id 27830}#)
                                " ")))))
                    (let ((#{l 27821}#
                            (#{gen-labels 4304}# (list #{v 27820}#))))
                      (let ((#{r* 27822}#
                              (#{extend-var-env 4296}#
                                #{l 27821}#
                                (list #{v 27820}#)
                                #{r* 27531}#)))
                        (let ((#{w* 27823}#
                                (#{make-binding-wrap 4315}#
                                  (list #{rest 27527}#)
                                  #{l 27821}#
                                  #{w* 27532}#)))
                          (#{parse-kw 27169}#
                            #{req 27525}#
                            (if (pair? #{out 27533}#)
                              (reverse #{out 27533}#)
                              #f)
                            (syntax->datum #{rest 27527}#)
                            (if (pair? #{kw 27528}#)
                              (cdr #{kw 27528}#)
                              #{kw 27528}#)
                            #{body 27529}#
                            (cons #{v 27820}# #{vars 27530}#)
                            #{r* 27822}#
                            #{w* 27823}#
                            (if (pair? #{kw 27528}#) (car #{kw 27528}#) #f)
                            '()
                            #{inits 27534}#)))))
                  (#{parse-kw 27169}#
                    #{req 27525}#
                    (if (pair? #{out 27533}#)
                      (reverse #{out 27533}#)
                      #f)
                    #f
                    (if (pair? #{kw 27528}#)
                      (cdr #{kw 27528}#)
                      #{kw 27528}#)
                    #{body 27529}#
                    #{vars 27530}#
                    #{r* 27531}#
                    #{w* 27532}#
                    (if (pair? #{kw 27528}#) (car #{kw 27528}#) #f)
                    '()
                    #{inits 27534}#)))))
          (#{parse-kw 27169}#
            (lambda (#{req 28030}#
                     #{opt 28031}#
                     #{rest 28032}#
                     #{kw 28033}#
                     #{body 28034}#
                     #{vars 28035}#
                     #{r* 28036}#
                     #{w* 28037}#
                     #{aok 28038}#
                     #{out 28039}#
                     #{inits 28040}#)
              (if (pair? #{kw 28033}#)
                (let ((#{tmp 28041}# (car #{kw 28033}#)))
                  (let ((#{tmp 28042}#
                          ($sc-dispatch #{tmp 28041}# '(any any any))))
                    (if #{tmp 28042}#
                      (@apply
                        (lambda (#{k 28044}# #{id 28045}# #{i 28046}#)
                          (let ((#{v 28047}#
                                  (let ((#{id 28055}#
                                          (if (if (vector? #{id 28045}#)
                                                (if (= (vector-length
                                                         #{id 28045}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 28045}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 28045}# 1)
                                            #{id 28045}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 28055}#)
                                        " ")))))
                            (let ((#{l 28048}#
                                    (#{gen-labels 4304}# (list #{v 28047}#))))
                              (let ((#{r** 28049}#
                                      (#{extend-var-env 4296}#
                                        #{l 28048}#
                                        (list #{v 28047}#)
                                        #{r* 28036}#)))
                                (let ((#{w** 28050}#
                                        (#{make-binding-wrap 4315}#
                                          (list #{id 28045}#)
                                          #{l 28048}#
                                          #{w* 28037}#)))
                                  (#{parse-kw 27169}#
                                    #{req 28030}#
                                    #{opt 28031}#
                                    #{rest 28032}#
                                    (cdr #{kw 28033}#)
                                    #{body 28034}#
                                    (cons #{v 28047}# #{vars 28035}#)
                                    #{r** 28049}#
                                    #{w** 28050}#
                                    #{aok 28038}#
                                    (cons (list (syntax->datum #{k 28044}#)
                                                (syntax->datum #{id 28045}#)
                                                #{v 28047}#)
                                          #{out 28039}#)
                                    (cons (#{expand 4333}#
                                            #{i 28046}#
                                            #{r* 28036}#
                                            #{w* 28037}#
                                            #{mod 27164}#)
                                          #{inits 28040}#)))))))
                        #{tmp 28042}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 28041}#))))
                (#{parse-body 27170}#
                  #{req 28030}#
                  #{opt 28031}#
                  #{rest 28032}#
                  (if (if #{aok 28038}#
                        #{aok 28038}#
                        (pair? #{out 28039}#))
                    (cons #{aok 28038}# (reverse #{out 28039}#))
                    #f)
                  #{body 28034}#
                  (reverse #{vars 28035}#)
                  #{r* 28036}#
                  #{w* 28037}#
                  (reverse #{inits 28040}#)
                  '()))))
          (#{parse-body 27170}#
            (lambda (#{req 28336}#
                     #{opt 28337}#
                     #{rest 28338}#
                     #{kw 28339}#
                     #{body 28340}#
                     #{vars 28341}#
                     #{r* 28342}#
                     #{w* 28343}#
                     #{inits 28344}#
                     #{meta 28345}#)
              (let ((#{tmp 28347}#
                      ($sc-dispatch
                        #{body 28340}#
                        '(any any . each-any))))
                (if (if #{tmp 28347}#
                      (@apply
                        (lambda (#{docstring 28351}# #{e1 28352}# #{e2 28353}#)
                          (string? (syntax->datum #{docstring 28351}#)))
                        #{tmp 28347}#)
                      #f)
                  (@apply
                    (lambda (#{docstring 28354}# #{e1 28355}# #{e2 28356}#)
                      (#{parse-body 27170}#
                        #{req 28336}#
                        #{opt 28337}#
                        #{rest 28338}#
                        #{kw 28339}#
                        (cons #{e1 28355}# #{e2 28356}#)
                        #{vars 28341}#
                        #{r* 28342}#
                        #{w* 28343}#
                        #{inits 28344}#
                        (append
                          #{meta 28345}#
                          (list (cons 'documentation
                                      (syntax->datum #{docstring 28354}#))))))
                    #{tmp 28347}#)
                  (let ((#{tmp 28357}#
                          ($sc-dispatch
                            #{body 28340}#
                            '(#(vector #(each (any . any))) any . each-any))))
                    (if #{tmp 28357}#
                      (@apply
                        (lambda (#{k 28361}#
                                 #{v 28362}#
                                 #{e1 28363}#
                                 #{e2 28364}#)
                          (#{parse-body 27170}#
                            #{req 28336}#
                            #{opt 28337}#
                            #{rest 28338}#
                            #{kw 28339}#
                            (cons #{e1 28363}# #{e2 28364}#)
                            #{vars 28341}#
                            #{r* 28342}#
                            #{w* 28343}#
                            #{inits 28344}#
                            (append
                              #{meta 28345}#
                              (syntax->datum
                                (map cons #{k 28361}# #{v 28362}#)))))
                        #{tmp 28357}#)
                      (let ((#{tmp 28365}#
                              ($sc-dispatch #{body 28340}# '(any . each-any))))
                        (if #{tmp 28365}#
                          (@apply
                            (lambda (#{e1 28369}# #{e2 28370}#)
                              (values
                                #{meta 28345}#
                                #{req 28336}#
                                #{opt 28337}#
                                #{rest 28338}#
                                #{kw 28339}#
                                #{inits 28344}#
                                #{vars 28341}#
                                (#{expand-body 4337}#
                                  (cons #{e1 28369}# #{e2 28370}#)
                                  (#{wrap 4326}#
                                    (begin
                                      (if (if (pair? #{e 27160}#)
                                            #{s 27163}#
                                            #f)
                                        (set-source-properties!
                                          #{e 27160}#
                                          #{s 27163}#))
                                      #{e 27160}#)
                                    #{w 27162}#
                                    #{mod 27164}#)
                                  #{r* 28342}#
                                  #{w* 28343}#
                                  #{mod 27164}#)))
                            #{tmp 28365}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{body 28340}#))))))))))
         (let ((#{tmp 27172}#
                 ($sc-dispatch #{clauses 27166}# '())))
           (if #{tmp 27172}#
             (@apply
               (lambda () (values '() #f))
               #{tmp 27172}#)
             (let ((#{tmp 27177}#
                     ($sc-dispatch
                       #{clauses 27166}#
                       '((any any . each-any)
                         .
                         #(each (any any . each-any))))))
               (if #{tmp 27177}#
                 (@apply
                   (lambda (#{args 27181}#
                            #{e1 27182}#
                            #{e2 27183}#
                            #{args* 27184}#
                            #{e1* 27185}#
                            #{e2* 27186}#)
                     (call-with-values
                       (lambda ()
                         (#{get-formals 27165}# #{args 27181}#))
                       (lambda (#{req 27187}#
                                #{opt 27188}#
                                #{rest 27189}#
                                #{kw 27190}#)
                         (call-with-values
                           (lambda ()
                             (#{parse-req 27167}#
                               #{req 27187}#
                               #{opt 27188}#
                               #{rest 27189}#
                               #{kw 27190}#
                               (cons #{e1 27182}# #{e2 27183}#)))
                           (lambda (#{meta 27257}#
                                    #{req 27258}#
                                    #{opt 27259}#
                                    #{rest 27260}#
                                    #{kw 27261}#
                                    #{inits 27262}#
                                    #{vars 27263}#
                                    #{body 27264}#)
                             (call-with-values
                               (lambda ()
                                 (#{expand-lambda-case 4345}#
                                   #{e 27160}#
                                   #{r 27161}#
                                   #{w 27162}#
                                   #{s 27163}#
                                   #{mod 27164}#
                                   #{get-formals 27165}#
                                   (map (lambda (#{tmp 2763 27265}#
                                                 #{tmp 2762 27266}#
                                                 #{tmp 2761 27267}#)
                                          (cons #{tmp 2761 27267}#
                                                (cons #{tmp 2762 27266}#
                                                      #{tmp 2763 27265}#)))
                                        #{e2* 27186}#
                                        #{e1* 27185}#
                                        #{args* 27184}#)))
                               (lambda (#{meta* 27268}# #{else* 27269}#)
                                 (values
                                   (append #{meta 27257}# #{meta* 27268}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #{s 27163}#
                                     #{req 27258}#
                                     #{opt 27259}#
                                     #{rest 27260}#
                                     #{kw 27261}#
                                     #{inits 27262}#
                                     #{vars 27263}#
                                     #{body 27264}#
                                     #{else* 27269}#)))))))))
                   #{tmp 27177}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{clauses 27166}#))))))))
   (#{strip 4346}#
     (lambda (#{x 28407}# #{w 28408}#)
       (if (memq 'top (car #{w 28408}#))
         #{x 28407}#
         (letrec*
           ((#{f 28409}#
              (lambda (#{x 28412}#)
                (if (if (vector? #{x 28412}#)
                      (if (= (vector-length #{x 28412}#) 4)
                        (eq? (vector-ref #{x 28412}# 0) 'syntax-object)
                        #f)
                      #f)
                  (#{strip 4346}#
                    (vector-ref #{x 28412}# 1)
                    (vector-ref #{x 28412}# 2))
                  (if (pair? #{x 28412}#)
                    (let ((#{a 28431}# (#{f 28409}# (car #{x 28412}#)))
                          (#{d 28432}# (#{f 28409}# (cdr #{x 28412}#))))
                      (if (if (eq? #{a 28431}# (car #{x 28412}#))
                            (eq? #{d 28432}# (cdr #{x 28412}#))
                            #f)
                        #{x 28412}#
                        (cons #{a 28431}# #{d 28432}#)))
                    (if (vector? #{x 28412}#)
                      (let ((#{old 28435}# (vector->list #{x 28412}#)))
                        (let ((#{new 28436}# (map #{f 28409}# #{old 28435}#)))
                          (letrec*
                            ((#{lp 28437}#
                               (lambda (#{l1 28513}# #{l2 28514}#)
                                 (if (null? #{l1 28513}#)
                                   #{x 28412}#
                                   (if (eq? (car #{l1 28513}#)
                                            (car #{l2 28514}#))
                                     (#{lp 28437}#
                                       (cdr #{l1 28513}#)
                                       (cdr #{l2 28514}#))
                                     (list->vector #{new 28436}#))))))
                            (#{lp 28437}# #{old 28435}# #{new 28436}#))))
                      #{x 28412}#))))))
           (#{f 28409}# #{x 28407}#)))))
   (#{gen-var 4347}#
     (lambda (#{id 27313}#)
       (let ((#{id 27314}#
               (if (if (vector? #{id 27313}#)
                     (if (= (vector-length #{id 27313}#) 4)
                       (eq? (vector-ref #{id 27313}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{id 27313}# 1)
                 #{id 27313}#)))
         (gensym
           (string-append (symbol->string #{id 27314}#) " "))))))
  (begin
    (module-define!
      (current-module)
      'letrec-syntax
      (make-syntax-transformer
        'letrec-syntax
        'local-syntax
        #t))
    (module-define!
      (current-module)
      'let-syntax
      (make-syntax-transformer
        'let-syntax
        'local-syntax
        #f))
    (#{global-extend 4299}#
      'core
      'fluid-let-syntax
      (lambda (#{e 4468}#
               #{r 4469}#
               #{w 4470}#
               #{s 4471}#
               #{mod 4472}#)
        (let ((#{tmp 4474}#
                ($sc-dispatch
                  #{e 4468}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 4474}#
                (@apply
                  (lambda (#{var 4478}#
                           #{val 4479}#
                           #{e1 4480}#
                           #{e2 4481}#)
                    (#{valid-bound-ids? 4323}# #{var 4478}#))
                  #{tmp 4474}#)
                #f)
            (@apply
              (lambda (#{var 4559}#
                       #{val 4560}#
                       #{e1 4561}#
                       #{e2 4562}#)
                (let ((#{names 4563}#
                        (map (lambda (#{x 4753}#)
                               (#{id-var-name 4320}# #{x 4753}# #{w 4470}#))
                             #{var 4559}#)))
                  (begin
                    (for-each
                      (lambda (#{id 4564}# #{n 4565}#)
                        (let ((#{atom-key 4566}#
                                (car (let ((#{t 4690}#
                                             (assq #{n 4565}# #{r 4469}#)))
                                       (if #{t 4690}#
                                         (cdr #{t 4690}#)
                                         (if (symbol? #{n 4565}#)
                                           (let ((#{t 4695}#
                                                   (begin
                                                     (if (if (not #{mod 4472}#)
                                                           (current-module)
                                                           #f)
                                                       (warn "module system is booted, we should have a module"
                                                             #{n 4565}#))
                                                     (let ((#{v 4732}#
                                                             (module-variable
                                                               (if #{mod 4472}#
                                                                 (resolve-module
                                                                   (cdr #{mod 4472}#))
                                                                 (current-module))
                                                               #{n 4565}#)))
                                                       (if #{v 4732}#
                                                         (if (variable-bound?
                                                               #{v 4732}#)
                                                           (let ((#{val 4741}#
                                                                   (variable-ref
                                                                     #{v 4732}#)))
                                                             (if (macro?
                                                                   #{val 4741}#)
                                                               (if (macro-type
                                                                     #{val 4741}#)
                                                                 (cons (macro-type
                                                                         #{val 4741}#)
                                                                       (macro-binding
                                                                         #{val 4741}#))
                                                                 #f)
                                                               #f))
                                                           #f)
                                                         #f)))))
                                             (if #{t 4695}#
                                               #{t 4695}#
                                               '(global)))
                                           '(displaced-lexical)))))))
                          (if (let ((#{t 4599}# #{atom-key 4566}#))
                                (eqv? #{t 4599}# 'displaced-lexical))
                            (syntax-violation
                              'fluid-let-syntax
                              "identifier out of context"
                              #{e 4468}#
                              (#{wrap 4326}#
                                (begin
                                  (if (if (pair? #{id 4564}#) #{s 4471}# #f)
                                    (set-source-properties!
                                      #{id 4564}#
                                      #{s 4471}#))
                                  #{id 4564}#)
                                #{w 4470}#
                                #{mod 4472}#)))))
                      #{var 4559}#
                      #{names 4563}#)
                    (#{expand-body 4337}#
                      (cons #{e1 4561}# #{e2 4562}#)
                      (#{wrap 4326}#
                        (begin
                          (if (if (pair? #{e 4468}#) #{s 4471}# #f)
                            (set-source-properties! #{e 4468}# #{s 4471}#))
                          #{e 4468}#)
                        #{w 4470}#
                        #{mod 4472}#)
                      (#{extend-env 4295}#
                        #{names 4563}#
                        (let ((#{trans-r 4839}#
                                (#{macros-only-env 4297}# #{r 4469}#)))
                          (map (lambda (#{x 4840}#)
                                 (cons 'macro
                                       (#{eval-local-transformer 4339}#
                                         (#{expand 4333}#
                                           #{x 4840}#
                                           #{trans-r 4839}#
                                           #{w 4470}#
                                           #{mod 4472}#)
                                         #{mod 4472}#)))
                               #{val 4560}#))
                        #{r 4469}#)
                      #{w 4470}#
                      #{mod 4472}#))))
              #{tmp 4474}#)
            (syntax-violation
              'fluid-let-syntax
              "bad syntax"
              (#{wrap 4326}#
                (begin
                  (if (if (pair? #{e 4468}#) #{s 4471}# #f)
                    (set-source-properties! #{e 4468}# #{s 4471}#))
                  #{e 4468}#)
                #{w 4470}#
                #{mod 4472}#))))))
    (module-define!
      (current-module)
      'quote
      (make-syntax-transformer
        'quote
        'core
        (lambda (#{e 5054}#
                 #{r 5055}#
                 #{w 5056}#
                 #{s 5057}#
                 #{mod 5058}#)
          (let ((#{tmp 5060}# ($sc-dispatch #{e 5054}# '(_ any))))
            (if #{tmp 5060}#
              (@apply
                (lambda (#{e 5063}#)
                  (let ((#{exp 5067}#
                          (#{strip 4346}# #{e 5063}# #{w 5056}#)))
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 1)
                      #{s 5057}#
                      #{exp 5067}#)))
                #{tmp 5060}#)
              (syntax-violation
                'quote
                "bad syntax"
                (#{wrap 4326}#
                  (begin
                    (if (if (pair? #{e 5054}#) #{s 5057}# #f)
                      (set-source-properties! #{e 5054}# #{s 5057}#))
                    #{e 5054}#)
                  #{w 5056}#
                  #{mod 5058}#)))))))
    (#{global-extend 4299}#
      'core
      'syntax
      (letrec*
        ((#{gen-syntax 5294}#
           (lambda (#{src 5396}#
                    #{e 5397}#
                    #{r 5398}#
                    #{maps 5399}#
                    #{ellipsis? 5400}#
                    #{mod 5401}#)
             (if (if (symbol? #{e 5397}#)
                   #t
                   (if (if (vector? #{e 5397}#)
                         (if (= (vector-length #{e 5397}#) 4)
                           (eq? (vector-ref #{e 5397}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{e 5397}# 1))
                     #f))
               (let ((#{label 5428}#
                       (#{id-var-name 4320}# #{e 5397}# '(()))))
                 (let ((#{b 5429}#
                         (let ((#{t 5566}# (assq #{label 5428}# #{r 5398}#)))
                           (if #{t 5566}#
                             (cdr #{t 5566}#)
                             (if (symbol? #{label 5428}#)
                               (let ((#{t 5571}#
                                       (begin
                                         (if (if (not #{mod 5401}#)
                                               (current-module)
                                               #f)
                                           (warn "module system is booted, we should have a module"
                                                 #{label 5428}#))
                                         (let ((#{v 5608}#
                                                 (module-variable
                                                   (if #{mod 5401}#
                                                     (resolve-module
                                                       (cdr #{mod 5401}#))
                                                     (current-module))
                                                   #{label 5428}#)))
                                           (if #{v 5608}#
                                             (if (variable-bound? #{v 5608}#)
                                               (let ((#{val 5617}#
                                                       (variable-ref
                                                         #{v 5608}#)))
                                                 (if (macro? #{val 5617}#)
                                                   (if (macro-type
                                                         #{val 5617}#)
                                                     (cons (macro-type
                                                             #{val 5617}#)
                                                           (macro-binding
                                                             #{val 5617}#))
                                                     #f)
                                                   #f))
                                               #f)
                                             #f)))))
                                 (if #{t 5571}# #{t 5571}# '(global)))
                               '(displaced-lexical))))))
                   (if (eq? (car #{b 5429}#) 'syntax)
                     (call-with-values
                       (lambda ()
                         (let ((#{var.lev 5462}# (cdr #{b 5429}#)))
                           (#{gen-ref 5295}#
                             #{src 5396}#
                             (car #{var.lev 5462}#)
                             (cdr #{var.lev 5462}#)
                             #{maps 5399}#)))
                       (lambda (#{var 5558}# #{maps 5559}#)
                         (values (list 'ref #{var 5558}#) #{maps 5559}#)))
                     (if (#{ellipsis? 5400}# #{e 5397}#)
                       (syntax-violation
                         'syntax
                         "misplaced ellipsis"
                         #{src 5396}#)
                       (values (list 'quote #{e 5397}#) #{maps 5399}#)))))
               (let ((#{tmp 5629}#
                       ($sc-dispatch #{e 5397}# '(any any))))
                 (if (if #{tmp 5629}#
                       (@apply
                         (lambda (#{dots 5633}# #{e 5634}#)
                           (#{ellipsis? 5400}# #{dots 5633}#))
                         #{tmp 5629}#)
                       #f)
                   (@apply
                     (lambda (#{dots 5635}# #{e 5636}#)
                       (#{gen-syntax 5294}#
                         #{src 5396}#
                         #{e 5636}#
                         #{r 5398}#
                         #{maps 5399}#
                         (lambda (#{x 5637}#) #f)
                         #{mod 5401}#))
                     #{tmp 5629}#)
                   (let ((#{tmp 5638}#
                           ($sc-dispatch #{e 5397}# '(any any . any))))
                     (if (if #{tmp 5638}#
                           (@apply
                             (lambda (#{x 5642}# #{dots 5643}# #{y 5644}#)
                               (#{ellipsis? 5400}# #{dots 5643}#))
                             #{tmp 5638}#)
                           #f)
                       (@apply
                         (lambda (#{x 5645}# #{dots 5646}# #{y 5647}#)
                           (letrec*
                             ((#{f 5648}#
                                (lambda (#{y 5656}# #{k 5657}#)
                                  (let ((#{tmp 5659}#
                                          ($sc-dispatch
                                            #{y 5656}#
                                            '(any . any))))
                                    (if (if #{tmp 5659}#
                                          (@apply
                                            (lambda (#{dots 5663}# #{y 5664}#)
                                              (#{ellipsis? 5400}#
                                                #{dots 5663}#))
                                            #{tmp 5659}#)
                                          #f)
                                      (@apply
                                        (lambda (#{dots 5665}# #{y 5666}#)
                                          (#{f 5648}#
                                            #{y 5666}#
                                            (lambda (#{maps 5667}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{k 5657}#
                                                    (cons '() #{maps 5667}#)))
                                                (lambda (#{x 5668}#
                                                         #{maps 5669}#)
                                                  (if (null? (car #{maps 5669}#))
                                                    (syntax-violation
                                                      'syntax
                                                      "extra ellipsis"
                                                      #{src 5396}#)
                                                    (values
                                                      (let ((#{map-env 5673}#
                                                              (car #{maps 5669}#)))
                                                        (list 'apply
                                                              '(primitive
                                                                 append)
                                                              (#{gen-map 5297}#
                                                                #{x 5668}#
                                                                #{map-env 5673}#)))
                                                      (cdr #{maps 5669}#))))))))
                                        #{tmp 5659}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{gen-syntax 5294}#
                                            #{src 5396}#
                                            #{y 5656}#
                                            #{r 5398}#
                                            #{maps 5399}#
                                            #{ellipsis? 5400}#
                                            #{mod 5401}#))
                                        (lambda (#{y 5676}# #{maps 5677}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{k 5657}# #{maps 5677}#))
                                            (lambda (#{x 5678}# #{maps 5679}#)
                                              (values
                                                (if (equal? #{y 5676}# ''())
                                                  #{x 5678}#
                                                  (list 'append
                                                        #{x 5678}#
                                                        #{y 5676}#))
                                                #{maps 5679}#))))))))))
                             (#{f 5648}#
                               #{y 5647}#
                               (lambda (#{maps 5651}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 5294}#
                                       #{src 5396}#
                                       #{x 5645}#
                                       #{r 5398}#
                                       (cons '() #{maps 5651}#)
                                       #{ellipsis? 5400}#
                                       #{mod 5401}#))
                                   (lambda (#{x 5652}# #{maps 5653}#)
                                     (if (null? (car #{maps 5653}#))
                                       (syntax-violation
                                         'syntax
                                         "extra ellipsis"
                                         #{src 5396}#)
                                       (values
                                         (#{gen-map 5297}#
                                           #{x 5652}#
                                           (car #{maps 5653}#))
                                         (cdr #{maps 5653}#)))))))))
                         #{tmp 5638}#)
                       (let ((#{tmp 5695}#
                               ($sc-dispatch #{e 5397}# '(any . any))))
                         (if #{tmp 5695}#
                           (@apply
                             (lambda (#{x 5699}# #{y 5700}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax 5294}#
                                     #{src 5396}#
                                     #{x 5699}#
                                     #{r 5398}#
                                     #{maps 5399}#
                                     #{ellipsis? 5400}#
                                     #{mod 5401}#))
                                 (lambda (#{x 5701}# #{maps 5702}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5294}#
                                         #{src 5396}#
                                         #{y 5700}#
                                         #{r 5398}#
                                         #{maps 5702}#
                                         #{ellipsis? 5400}#
                                         #{mod 5401}#))
                                     (lambda (#{y 5703}# #{maps 5704}#)
                                       (values
                                         (let ((#{atom-key 5709}#
                                                 (car #{y 5703}#)))
                                           (if (eqv? #{atom-key 5709}# 'quote)
                                             (if (eq? (car #{x 5701}#) 'quote)
                                               (list 'quote
                                                     (cons (car (cdr #{x 5701}#))
                                                           (car (cdr #{y 5703}#))))
                                               (if (eq? (car (cdr #{y 5703}#))
                                                        '())
                                                 (list 'list #{x 5701}#)
                                                 (list 'cons
                                                       #{x 5701}#
                                                       #{y 5703}#)))
                                             (if (eqv? #{atom-key 5709}# 'list)
                                               (cons 'list
                                                     (cons #{x 5701}#
                                                           (cdr #{y 5703}#)))
                                               (list 'cons
                                                     #{x 5701}#
                                                     #{y 5703}#))))
                                         #{maps 5704}#))))))
                             #{tmp 5695}#)
                           (let ((#{tmp 5738}#
                                   ($sc-dispatch
                                     #{e 5397}#
                                     '#(vector (any . each-any)))))
                             (if #{tmp 5738}#
                               (@apply
                                 (lambda (#{e1 5742}# #{e2 5743}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5294}#
                                         #{src 5396}#
                                         (cons #{e1 5742}# #{e2 5743}#)
                                         #{r 5398}#
                                         #{maps 5399}#
                                         #{ellipsis? 5400}#
                                         #{mod 5401}#))
                                     (lambda (#{e 5744}# #{maps 5745}#)
                                       (values
                                         (if (eq? (car #{e 5744}#) 'list)
                                           (cons 'vector (cdr #{e 5744}#))
                                           (if (eq? (car #{e 5744}#) 'quote)
                                             (list 'quote
                                                   (list->vector
                                                     (car (cdr #{e 5744}#))))
                                             (list 'list->vector #{e 5744}#)))
                                         #{maps 5745}#))))
                                 #{tmp 5738}#)
                               (values
                                 (list 'quote #{e 5397}#)
                                 #{maps 5399}#))))))))))))
         (#{gen-ref 5295}#
           (lambda (#{src 5772}#
                    #{var 5773}#
                    #{level 5774}#
                    #{maps 5775}#)
             (if (= #{level 5774}# 0)
               (values #{var 5773}# #{maps 5775}#)
               (if (null? #{maps 5775}#)
                 (syntax-violation
                   'syntax
                   "missing ellipsis"
                   #{src 5772}#)
                 (call-with-values
                   (lambda ()
                     (#{gen-ref 5295}#
                       #{src 5772}#
                       #{var 5773}#
                       (#{1-}# #{level 5774}#)
                       (cdr #{maps 5775}#)))
                   (lambda (#{outer-var 5776}# #{outer-maps 5777}#)
                     (let ((#{b 5778}#
                             (assq #{outer-var 5776}# (car #{maps 5775}#))))
                       (if #{b 5778}#
                         (values (cdr #{b 5778}#) #{maps 5775}#)
                         (let ((#{inner-var 5780}#
                                 (gensym
                                   (string-append (symbol->string 'tmp) " "))))
                           (values
                             #{inner-var 5780}#
                             (cons (cons (cons #{outer-var 5776}#
                                               #{inner-var 5780}#)
                                         (car #{maps 5775}#))
                                   #{outer-maps 5777}#)))))))))))
         (#{gen-map 5297}#
           (lambda (#{e 5794}# #{map-env 5795}#)
             (let ((#{formals 5796}# (map cdr #{map-env 5795}#))
                   (#{actuals 5797}#
                     (map (lambda (#{x 5799}#)
                            (list 'ref (car #{x 5799}#)))
                          #{map-env 5795}#)))
               (if (eq? (car #{e 5794}#) 'ref)
                 (car #{actuals 5797}#)
                 (if (and-map
                       (lambda (#{x 5800}#)
                         (if (eq? (car #{x 5800}#) 'ref)
                           (memq (car (cdr #{x 5800}#)) #{formals 5796}#)
                           #f))
                       (cdr #{e 5794}#))
                   (cons 'map
                         (cons (list 'primitive (car #{e 5794}#))
                               (map (let ((#{r 5802}#
                                            (map cons
                                                 #{formals 5796}#
                                                 #{actuals 5797}#)))
                                      (lambda (#{x 5803}#)
                                        (cdr (assq (car (cdr #{x 5803}#))
                                                   #{r 5802}#))))
                                    (cdr #{e 5794}#))))
                   (cons 'map
                         (cons (list 'lambda #{formals 5796}# #{e 5794}#)
                               #{actuals 5797}#)))))))
         (#{regen 5301}#
           (lambda (#{x 5805}#)
             (let ((#{atom-key 5806}# (car #{x 5805}#)))
               (if (eqv? #{atom-key 5806}# 'ref)
                 (let ((#{name 5816}# (car (cdr #{x 5805}#)))
                       (#{var 5817}# (car (cdr #{x 5805}#))))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 3)
                     #f
                     #{name 5816}#
                     #{var 5817}#))
                 (if (eqv? #{atom-key 5806}# 'primitive)
                   (let ((#{name 5829}# (car (cdr #{x 5805}#))))
                     (if (equal? (module-name (current-module)) '(guile))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 7)
                         #f
                         #{name 5829}#)
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 5)
                         #f
                         '(guile)
                         #{name 5829}#
                         #f)))
                   (if (eqv? #{atom-key 5806}# 'quote)
                     (let ((#{exp 5847}# (car (cdr #{x 5805}#))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #f
                         #{exp 5847}#))
                     (if (eqv? #{atom-key 5806}# 'lambda)
                       (if (list? (car (cdr #{x 5805}#)))
                         (let ((#{req 5858}# (car (cdr #{x 5805}#)))
                               (#{vars 5860}# (car (cdr #{x 5805}#)))
                               (#{exp 5862}#
                                 (#{regen 5301}#
                                   (car (cdr (cdr #{x 5805}#))))))
                           (let ((#{body 5867}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     #{req 5858}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 5860}#
                                     #{exp 5862}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 13)
                               #f
                               '()
                               #{body 5867}#)))
                         (error "how did we get here" #{x 5805}#))
                       (let ((#{fun-exp 5883}#
                               (let ((#{name 5892}# (car #{x 5805}#)))
                                 (if (equal?
                                       (module-name (current-module))
                                       '(guile))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 7)
                                     #f
                                     #{name 5892}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 5)
                                     #f
                                     '(guile)
                                     #{name 5892}#
                                     #f))))
                             (#{arg-exps 5884}#
                               (map #{regen 5301}# (cdr #{x 5805}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #f
                           #{fun-exp 5883}#
                           #{arg-exps 5884}#))))))))))
        (lambda (#{e 5302}#
                 #{r 5303}#
                 #{w 5304}#
                 #{s 5305}#
                 #{mod 5306}#)
          (let ((#{e 5307}#
                  (#{wrap 4326}#
                    (begin
                      (if (if (pair? #{e 5302}#) #{s 5305}# #f)
                        (set-source-properties! #{e 5302}# #{s 5305}#))
                      #{e 5302}#)
                    #{w 5304}#
                    #{mod 5306}#)))
            (let ((#{tmp 5309}# ($sc-dispatch #{e 5307}# '(_ any))))
              (if #{tmp 5309}#
                (@apply
                  (lambda (#{x 5334}#)
                    (call-with-values
                      (lambda ()
                        (#{gen-syntax 5294}#
                          #{e 5307}#
                          #{x 5334}#
                          #{r 5303}#
                          '()
                          #{ellipsis? 4341}#
                          #{mod 5306}#))
                      (lambda (#{e 5388}# #{maps 5389}#)
                        (#{regen 5301}# #{e 5388}#))))
                  #{tmp 5309}#)
                (syntax-violation
                  'syntax
                  "bad `syntax' form"
                  #{e 5307}#)))))))
    (#{global-extend 4299}#
      'core
      'lambda
      (lambda (#{e 6087}#
               #{r 6088}#
               #{w 6089}#
               #{s 6090}#
               #{mod 6091}#)
        (let ((#{tmp 6093}#
                ($sc-dispatch #{e 6087}# '(_ any any . each-any))))
          (if #{tmp 6093}#
            (@apply
              (lambda (#{args 6097}# #{e1 6098}# #{e2 6099}#)
                (call-with-values
                  (lambda ()
                    (#{lambda-formals 4342}# #{args 6097}#))
                  (lambda (#{req 6102}#
                           #{opt 6103}#
                           #{rest 6104}#
                           #{kw 6105}#)
                    (letrec*
                      ((#{lp 6106}#
                         (lambda (#{body 6109}# #{meta 6110}#)
                           (let ((#{tmp 6112}#
                                   ($sc-dispatch
                                     #{body 6109}#
                                     '(any any . each-any))))
                             (if (if #{tmp 6112}#
                                   (@apply
                                     (lambda (#{docstring 6116}#
                                              #{e1 6117}#
                                              #{e2 6118}#)
                                       (string?
                                         (syntax->datum #{docstring 6116}#)))
                                     #{tmp 6112}#)
                                   #f)
                               (@apply
                                 (lambda (#{docstring 6119}#
                                          #{e1 6120}#
                                          #{e2 6121}#)
                                   (#{lp 6106}#
                                     (cons #{e1 6120}# #{e2 6121}#)
                                     (append
                                       #{meta 6110}#
                                       (list (cons 'documentation
                                                   (syntax->datum
                                                     #{docstring 6119}#))))))
                                 #{tmp 6112}#)
                               (let ((#{tmp 6122}#
                                       ($sc-dispatch
                                         #{body 6109}#
                                         '(#(vector #(each (any . any)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 6122}#
                                   (@apply
                                     (lambda (#{k 6126}#
                                              #{v 6127}#
                                              #{e1 6128}#
                                              #{e2 6129}#)
                                       (#{lp 6106}#
                                         (cons #{e1 6128}# #{e2 6129}#)
                                         (append
                                           #{meta 6110}#
                                           (syntax->datum
                                             (map cons
                                                  #{k 6126}#
                                                  #{v 6127}#)))))
                                     #{tmp 6122}#)
                                   (#{expand-simple-lambda 4343}#
                                     #{e 6087}#
                                     #{r 6088}#
                                     #{w 6089}#
                                     #{s 6090}#
                                     #{mod 6091}#
                                     #{req 6102}#
                                     #{rest 6104}#
                                     #{meta 6110}#
                                     #{body 6109}#))))))))
                      (#{lp 6106}# (cons #{e1 6098}# #{e2 6099}#) '())))))
              #{tmp 6093}#)
            (syntax-violation
              'lambda
              "bad lambda"
              #{e 6087}#)))))
    (#{global-extend 4299}#
      'core
      'lambda*
      (lambda (#{e 6421}#
               #{r 6422}#
               #{w 6423}#
               #{s 6424}#
               #{mod 6425}#)
        (let ((#{tmp 6427}#
                ($sc-dispatch #{e 6421}# '(_ any any . each-any))))
          (if #{tmp 6427}#
            (@apply
              (lambda (#{args 6431}# #{e1 6432}# #{e2 6433}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4345}#
                      #{e 6421}#
                      #{r 6422}#
                      #{w 6423}#
                      #{s 6424}#
                      #{mod 6425}#
                      #{lambda*-formals 4344}#
                      (list (cons #{args 6431}#
                                  (cons #{e1 6432}# #{e2 6433}#)))))
                  (lambda (#{meta 6436}# #{lcase 6437}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6424}#
                      #{meta 6436}#
                      #{lcase 6437}#))))
              #{tmp 6427}#)
            (syntax-violation
              'lambda
              "bad lambda*"
              #{e 6421}#)))))
    (#{global-extend 4299}#
      'core
      'case-lambda
      (lambda (#{e 6611}#
               #{r 6612}#
               #{w 6613}#
               #{s 6614}#
               #{mod 6615}#)
        (let ((#{tmp 6617}#
                ($sc-dispatch
                  #{e 6611}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 6617}#
            (@apply
              (lambda (#{args 6621}#
                       #{e1 6622}#
                       #{e2 6623}#
                       #{args* 6624}#
                       #{e1* 6625}#
                       #{e2* 6626}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4345}#
                      #{e 6611}#
                      #{r 6612}#
                      #{w 6613}#
                      #{s 6614}#
                      #{mod 6615}#
                      #{lambda-formals 4342}#
                      (cons (cons #{args 6621}#
                                  (cons #{e1 6622}# #{e2 6623}#))
                            (map (lambda (#{tmp 3262 6629}#
                                          #{tmp 3261 6630}#
                                          #{tmp 3260 6631}#)
                                   (cons #{tmp 3260 6631}#
                                         (cons #{tmp 3261 6630}#
                                               #{tmp 3262 6629}#)))
                                 #{e2* 6626}#
                                 #{e1* 6625}#
                                 #{args* 6624}#))))
                  (lambda (#{meta 6632}# #{lcase 6633}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6614}#
                      #{meta 6632}#
                      #{lcase 6633}#))))
              #{tmp 6617}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda"
              #{e 6611}#)))))
    (#{global-extend 4299}#
      'core
      'case-lambda*
      (lambda (#{e 6796}#
               #{r 6797}#
               #{w 6798}#
               #{s 6799}#
               #{mod 6800}#)
        (let ((#{tmp 6802}#
                ($sc-dispatch
                  #{e 6796}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 6802}#
            (@apply
              (lambda (#{args 6806}#
                       #{e1 6807}#
                       #{e2 6808}#
                       #{args* 6809}#
                       #{e1* 6810}#
                       #{e2* 6811}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4345}#
                      #{e 6796}#
                      #{r 6797}#
                      #{w 6798}#
                      #{s 6799}#
                      #{mod 6800}#
                      #{lambda*-formals 4344}#
                      (cons (cons #{args 6806}#
                                  (cons #{e1 6807}# #{e2 6808}#))
                            (map (lambda (#{tmp 3297 6814}#
                                          #{tmp 3296 6815}#
                                          #{tmp 3295 6816}#)
                                   (cons #{tmp 3295 6816}#
                                         (cons #{tmp 3296 6815}#
                                               #{tmp 3297 6814}#)))
                                 #{e2* 6811}#
                                 #{e1* 6810}#
                                 #{args* 6809}#))))
                  (lambda (#{meta 6817}# #{lcase 6818}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6799}#
                      #{meta 6817}#
                      #{lcase 6818}#))))
              #{tmp 6802}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda*"
              #{e 6796}#)))))
    (#{global-extend 4299}#
      'core
      'let
      (letrec*
        ((#{expand-let 7010}#
           (lambda (#{e 7159}#
                    #{r 7160}#
                    #{w 7161}#
                    #{s 7162}#
                    #{mod 7163}#
                    #{constructor 7164}#
                    #{ids 7165}#
                    #{vals 7166}#
                    #{exps 7167}#)
             (if (not (#{valid-bound-ids? 4323}# #{ids 7165}#))
               (syntax-violation
                 'let
                 "duplicate bound variable"
                 #{e 7159}#)
               (let ((#{labels 7245}#
                       (#{gen-labels 4304}# #{ids 7165}#))
                     (#{new-vars 7246}#
                       (map #{gen-var 4347}# #{ids 7165}#)))
                 (let ((#{nw 7247}#
                         (#{make-binding-wrap 4315}#
                           #{ids 7165}#
                           #{labels 7245}#
                           #{w 7161}#))
                       (#{nr 7248}#
                         (#{extend-var-env 4296}#
                           #{labels 7245}#
                           #{new-vars 7246}#
                           #{r 7160}#)))
                   (#{constructor 7164}#
                     #{s 7162}#
                     (map syntax->datum #{ids 7165}#)
                     #{new-vars 7246}#
                     (map (lambda (#{x 7265}#)
                            (#{expand 4333}#
                              #{x 7265}#
                              #{r 7160}#
                              #{w 7161}#
                              #{mod 7163}#))
                          #{vals 7166}#)
                     (#{expand-body 4337}#
                       #{exps 7167}#
                       (#{source-wrap 4327}#
                         #{e 7159}#
                         #{nw 7247}#
                         #{s 7162}#
                         #{mod 7163}#)
                       #{nr 7248}#
                       #{nw 7247}#
                       #{mod 7163}#))))))))
        (lambda (#{e 7011}#
                 #{r 7012}#
                 #{w 7013}#
                 #{s 7014}#
                 #{mod 7015}#)
          (let ((#{tmp 7017}#
                  ($sc-dispatch
                    #{e 7011}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 7017}#
                  (@apply
                    (lambda (#{id 7021}#
                             #{val 7022}#
                             #{e1 7023}#
                             #{e2 7024}#)
                      (and-map #{id? 4301}# #{id 7021}#))
                    #{tmp 7017}#)
                  #f)
              (@apply
                (lambda (#{id 7040}#
                         #{val 7041}#
                         #{e1 7042}#
                         #{e2 7043}#)
                  (#{expand-let 7010}#
                    #{e 7011}#
                    #{r 7012}#
                    #{w 7013}#
                    #{s 7014}#
                    #{mod 7015}#
                    #{build-let 4283}#
                    #{id 7040}#
                    #{val 7041}#
                    (cons #{e1 7042}# #{e2 7043}#)))
                #{tmp 7017}#)
              (let ((#{tmp 7073}#
                      ($sc-dispatch
                        #{e 7011}#
                        '(_ any #(each (any any)) any . each-any))))
                (if (if #{tmp 7073}#
                      (@apply
                        (lambda (#{f 7077}#
                                 #{id 7078}#
                                 #{val 7079}#
                                 #{e1 7080}#
                                 #{e2 7081}#)
                          (if (if (symbol? #{f 7077}#)
                                #t
                                (if (if (vector? #{f 7077}#)
                                      (if (= (vector-length #{f 7077}#) 4)
                                        (eq? (vector-ref #{f 7077}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{f 7077}# 1))
                                  #f))
                            (and-map #{id? 4301}# #{id 7078}#)
                            #f))
                        #{tmp 7073}#)
                      #f)
                  (@apply
                    (lambda (#{f 7123}#
                             #{id 7124}#
                             #{val 7125}#
                             #{e1 7126}#
                             #{e2 7127}#)
                      (#{expand-let 7010}#
                        #{e 7011}#
                        #{r 7012}#
                        #{w 7013}#
                        #{s 7014}#
                        #{mod 7015}#
                        #{build-named-let 4284}#
                        (cons #{f 7123}# #{id 7124}#)
                        #{val 7125}#
                        (cons #{e1 7126}# #{e2 7127}#)))
                    #{tmp 7073}#)
                  (syntax-violation
                    'let
                    "bad let"
                    (#{wrap 4326}#
                      (begin
                        (if (if (pair? #{e 7011}#) #{s 7014}# #f)
                          (set-source-properties! #{e 7011}# #{s 7014}#))
                        #{e 7011}#)
                      #{w 7013}#
                      #{mod 7015}#)))))))))
    (#{global-extend 4299}#
      'core
      'letrec
      (lambda (#{e 7714}#
               #{r 7715}#
               #{w 7716}#
               #{s 7717}#
               #{mod 7718}#)
        (let ((#{tmp 7720}#
                ($sc-dispatch
                  #{e 7714}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 7720}#
                (@apply
                  (lambda (#{id 7724}#
                           #{val 7725}#
                           #{e1 7726}#
                           #{e2 7727}#)
                    (and-map #{id? 4301}# #{id 7724}#))
                  #{tmp 7720}#)
                #f)
            (@apply
              (lambda (#{id 7743}#
                       #{val 7744}#
                       #{e1 7745}#
                       #{e2 7746}#)
                (if (not (#{valid-bound-ids? 4323}# #{id 7743}#))
                  (syntax-violation
                    'letrec
                    "duplicate bound variable"
                    #{e 7714}#)
                  (let ((#{labels 7836}#
                          (#{gen-labels 4304}# #{id 7743}#))
                        (#{new-vars 7837}#
                          (map #{gen-var 4347}# #{id 7743}#)))
                    (let ((#{w 7838}#
                            (#{make-binding-wrap 4315}#
                              #{id 7743}#
                              #{labels 7836}#
                              #{w 7716}#))
                          (#{r 7839}#
                            (#{extend-var-env 4296}#
                              #{labels 7836}#
                              #{new-vars 7837}#
                              #{r 7715}#)))
                      (#{build-letrec 4285}#
                        #{s 7717}#
                        #f
                        (map syntax->datum #{id 7743}#)
                        #{new-vars 7837}#
                        (map (lambda (#{x 7926}#)
                               (#{expand 4333}#
                                 #{x 7926}#
                                 #{r 7839}#
                                 #{w 7838}#
                                 #{mod 7718}#))
                             #{val 7744}#)
                        (#{expand-body 4337}#
                          (cons #{e1 7745}# #{e2 7746}#)
                          (#{wrap 4326}#
                            (begin
                              (if (if (pair? #{e 7714}#) #{s 7717}# #f)
                                (set-source-properties! #{e 7714}# #{s 7717}#))
                              #{e 7714}#)
                            #{w 7838}#
                            #{mod 7718}#)
                          #{r 7839}#
                          #{w 7838}#
                          #{mod 7718}#))))))
              #{tmp 7720}#)
            (syntax-violation
              'letrec
              "bad letrec"
              (#{wrap 4326}#
                (begin
                  (if (if (pair? #{e 7714}#) #{s 7717}# #f)
                    (set-source-properties! #{e 7714}# #{s 7717}#))
                  #{e 7714}#)
                #{w 7716}#
                #{mod 7718}#))))))
    (#{global-extend 4299}#
      'core
      'letrec*
      (lambda (#{e 8343}#
               #{r 8344}#
               #{w 8345}#
               #{s 8346}#
               #{mod 8347}#)
        (let ((#{tmp 8349}#
                ($sc-dispatch
                  #{e 8343}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 8349}#
                (@apply
                  (lambda (#{id 8353}#
                           #{val 8354}#
                           #{e1 8355}#
                           #{e2 8356}#)
                    (and-map #{id? 4301}# #{id 8353}#))
                  #{tmp 8349}#)
                #f)
            (@apply
              (lambda (#{id 8372}#
                       #{val 8373}#
                       #{e1 8374}#
                       #{e2 8375}#)
                (if (not (#{valid-bound-ids? 4323}# #{id 8372}#))
                  (syntax-violation
                    'letrec*
                    "duplicate bound variable"
                    #{e 8343}#)
                  (let ((#{labels 8465}#
                          (#{gen-labels 4304}# #{id 8372}#))
                        (#{new-vars 8466}#
                          (map #{gen-var 4347}# #{id 8372}#)))
                    (let ((#{w 8467}#
                            (#{make-binding-wrap 4315}#
                              #{id 8372}#
                              #{labels 8465}#
                              #{w 8345}#))
                          (#{r 8468}#
                            (#{extend-var-env 4296}#
                              #{labels 8465}#
                              #{new-vars 8466}#
                              #{r 8344}#)))
                      (#{build-letrec 4285}#
                        #{s 8346}#
                        #t
                        (map syntax->datum #{id 8372}#)
                        #{new-vars 8466}#
                        (map (lambda (#{x 8555}#)
                               (#{expand 4333}#
                                 #{x 8555}#
                                 #{r 8468}#
                                 #{w 8467}#
                                 #{mod 8347}#))
                             #{val 8373}#)
                        (#{expand-body 4337}#
                          (cons #{e1 8374}# #{e2 8375}#)
                          (#{wrap 4326}#
                            (begin
                              (if (if (pair? #{e 8343}#) #{s 8346}# #f)
                                (set-source-properties! #{e 8343}# #{s 8346}#))
                              #{e 8343}#)
                            #{w 8467}#
                            #{mod 8347}#)
                          #{r 8468}#
                          #{w 8467}#
                          #{mod 8347}#))))))
              #{tmp 8349}#)
            (syntax-violation
              'letrec*
              "bad letrec*"
              (#{wrap 4326}#
                (begin
                  (if (if (pair? #{e 8343}#) #{s 8346}# #f)
                    (set-source-properties! #{e 8343}# #{s 8346}#))
                  #{e 8343}#)
                #{w 8345}#
                #{mod 8347}#))))))
    (#{global-extend 4299}#
      'core
      'set!
      (lambda (#{e 9026}#
               #{r 9027}#
               #{w 9028}#
               #{s 9029}#
               #{mod 9030}#)
        (let ((#{tmp 9032}#
                ($sc-dispatch #{e 9026}# '(_ any any))))
          (if (if #{tmp 9032}#
                (@apply
                  (lambda (#{id 9036}# #{val 9037}#)
                    (if (symbol? #{id 9036}#)
                      #t
                      (if (if (vector? #{id 9036}#)
                            (if (= (vector-length #{id 9036}#) 4)
                              (eq? (vector-ref #{id 9036}# 0) 'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{id 9036}# 1))
                        #f)))
                  #{tmp 9032}#)
                #f)
            (@apply
              (lambda (#{id 9064}# #{val 9065}#)
                (let ((#{n 9066}#
                        (#{id-var-name 4320}# #{id 9064}# #{w 9028}#))
                      (#{id-mod 9067}#
                        (if (if (vector? #{id 9064}#)
                              (if (= (vector-length #{id 9064}#) 4)
                                (eq? (vector-ref #{id 9064}# 0) 'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{id 9064}# 3)
                          #{mod 9030}#)))
                  (let ((#{b 9068}#
                          (let ((#{t 9755}# (assq #{n 9066}# #{r 9027}#)))
                            (if #{t 9755}#
                              (cdr #{t 9755}#)
                              (if (symbol? #{n 9066}#)
                                (let ((#{t 9760}#
                                        (begin
                                          (if (if (not #{id-mod 9067}#)
                                                (current-module)
                                                #f)
                                            (warn "module system is booted, we should have a module"
                                                  #{n 9066}#))
                                          (let ((#{v 9797}#
                                                  (module-variable
                                                    (if #{id-mod 9067}#
                                                      (resolve-module
                                                        (cdr #{id-mod 9067}#))
                                                      (current-module))
                                                    #{n 9066}#)))
                                            (if #{v 9797}#
                                              (if (variable-bound? #{v 9797}#)
                                                (let ((#{val 9806}#
                                                        (variable-ref
                                                          #{v 9797}#)))
                                                  (if (macro? #{val 9806}#)
                                                    (if (macro-type
                                                          #{val 9806}#)
                                                      (cons (macro-type
                                                              #{val 9806}#)
                                                            (macro-binding
                                                              #{val 9806}#))
                                                      #f)
                                                    #f))
                                                #f)
                                              #f)))))
                                  (if #{t 9760}# #{t 9760}# '(global)))
                                '(displaced-lexical))))))
                    (let ((#{atom-key 9069}# (car #{b 9068}#)))
                      (if (let ((#{t 9106}# #{atom-key 9069}#))
                            (eqv? #{t 9106}# 'lexical))
                        (#{build-lexical-assignment 4272}#
                          #{s 9029}#
                          (syntax->datum #{id 9064}#)
                          (cdr #{b 9068}#)
                          (#{expand 4333}#
                            #{val 9065}#
                            #{r 9027}#
                            #{w 9028}#
                            #{mod 9030}#))
                        (if (let ((#{t 9391}# #{atom-key 9069}#))
                              (eqv? #{t 9391}# 'global))
                          (#{build-global-assignment 4275}#
                            #{s 9029}#
                            #{n 9066}#
                            (#{expand 4333}#
                              #{val 9065}#
                              #{r 9027}#
                              #{w 9028}#
                              #{mod 9030}#)
                            #{id-mod 9067}#)
                          (if (let ((#{t 9646}# #{atom-key 9069}#))
                                (eqv? #{t 9646}# 'macro))
                            (let ((#{p 9709}# (cdr #{b 9068}#)))
                              (if (procedure-property
                                    #{p 9709}#
                                    'variable-transformer)
                                (#{expand 4333}#
                                  (#{expand-macro 4336}#
                                    #{p 9709}#
                                    #{e 9026}#
                                    #{r 9027}#
                                    #{w 9028}#
                                    #{s 9029}#
                                    #f
                                    #{mod 9030}#)
                                  #{r 9027}#
                                  '(())
                                  #{mod 9030}#)
                                (syntax-violation
                                  'set!
                                  "not a variable transformer"
                                  (#{wrap 4326}#
                                    #{e 9026}#
                                    #{w 9028}#
                                    #{mod 9030}#)
                                  (#{wrap 4326}#
                                    #{id 9064}#
                                    #{w 9028}#
                                    #{id-mod 9067}#))))
                            (if (eqv? #{atom-key 9069}# 'displaced-lexical)
                              (syntax-violation
                                'set!
                                "identifier out of context"
                                (#{wrap 4326}#
                                  #{id 9064}#
                                  #{w 9028}#
                                  #{mod 9030}#))
                              (syntax-violation
                                'set!
                                "bad set!"
                                (#{wrap 4326}#
                                  (begin
                                    (if (if (pair? #{e 9026}#) #{s 9029}# #f)
                                      (set-source-properties!
                                        #{e 9026}#
                                        #{s 9029}#))
                                    #{e 9026}#)
                                  #{w 9028}#
                                  #{mod 9030}#))))))))))
              #{tmp 9032}#)
            (let ((#{tmp 9907}#
                    ($sc-dispatch
                      #{e 9026}#
                      '(_ (any . each-any) any))))
              (if #{tmp 9907}#
                (@apply
                  (lambda (#{head 9911}# #{tail 9912}# #{val 9913}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 4332}#
                          #{head 9911}#
                          #{r 9027}#
                          '(())
                          #f
                          #f
                          #{mod 9030}#
                          #t))
                      (lambda (#{type 9916}#
                               #{value 9917}#
                               #{ee 9918}#
                               #{ww 9919}#
                               #{ss 9920}#
                               #{modmod 9921}#)
                        (if (eqv? #{type 9916}# 'module-ref)
                          (let ((#{val 9925}#
                                  (#{expand 4333}#
                                    #{val 9913}#
                                    #{r 9027}#
                                    #{w 9028}#
                                    #{mod 9030}#)))
                            (call-with-values
                              (lambda ()
                                (#{value 9917}#
                                  (cons #{head 9911}# #{tail 9912}#)
                                  #{r 9027}#
                                  #{w 9028}#))
                              (lambda (#{e 9926}#
                                       #{r 9927}#
                                       #{w 9928}#
                                       #{s* 9929}#
                                       #{mod 9930}#)
                                (let ((#{tmp 9932}# (list #{e 9926}#)))
                                  (if (@apply
                                        (lambda (#{e 9934}#)
                                          (if (symbol? #{e 9934}#)
                                            #t
                                            (if (if (vector? #{e 9934}#)
                                                  (if (= (vector-length
                                                           #{e 9934}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{e 9934}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{e 9934}# 1))
                                              #f)))
                                        #{tmp 9932}#)
                                    (@apply
                                      (lambda (#{e 9964}#)
                                        (#{build-global-assignment 4275}#
                                          #{s 9029}#
                                          (syntax->datum #{e 9964}#)
                                          #{val 9925}#
                                          #{mod 9930}#))
                                      #{tmp 9932}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 9926}#))))))
                          (#{build-application 4268}#
                            #{s 9029}#
                            (#{expand 4333}#
                              (list '#(syntax-object
                                       setter
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(type value ee ww ss modmod)
                                          #((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                          #("i3543"
                                            "i3544"
                                            "i3545"
                                            "i3546"
                                            "i3547"
                                            "i3548"))
                                        #(ribcage
                                          #(head tail val)
                                          #((top) (top) (top))
                                          #("i3529" "i3530" "i3531"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(e r w s mod)
                                          #((top) (top) (top) (top) (top))
                                          #("i3493"
                                            "i3494"
                                            "i3495"
                                            "i3496"
                                            "i3497"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            expand-lambda-case
                                            lambda*-formals
                                            expand-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            expand-void
                                            eval-local-transformer
                                            expand-local-syntax
                                            expand-body
                                            expand-macro
                                            expand-application
                                            expand-expr
                                            expand
                                            syntax-type
                                            parse-when-list
                                            expand-install-global
                                            expand-top-sequence
                                            expand-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i467"
                                           "i465"
                                           "i463"
                                           "i461"
                                           "i459"
                                           "i457"
                                           "i455"
                                           "i453"
                                           "i451"
                                           "i449"
                                           "i447"
                                           "i445"
                                           "i443"
                                           "i441"
                                           "i439"
                                           "i437"
                                           "i435"
                                           "i433"
                                           "i431"
                                           "i429"
                                           "i427"
                                           "i425"
                                           "i423"
                                           "i421"
                                           "i419"
                                           "i417"
                                           "i415"
                                           "i413"
                                           "i411"
                                           "i409"
                                           "i407"
                                           "i405"
                                           "i403"
                                           "i401"
                                           "i399"
                                           "i398"
                                           "i396"
                                           "i393"
                                           "i392"
                                           "i391"
                                           "i389"
                                           "i388"
                                           "i386"
                                           "i384"
                                           "i382"
                                           "i380"
                                           "i378"
                                           "i376"
                                           "i374"
                                           "i372"
                                           "i369"
                                           "i367"
                                           "i366"
                                           "i364"
                                           "i362"
                                           "i360"
                                           "i358"
                                           "i357"
                                           "i356"
                                           "i355"
                                           "i353"
                                           "i352"
                                           "i349"
                                           "i347"
                                           "i345"
                                           "i343"
                                           "i341"
                                           "i339"
                                           "i337"
                                           "i336"
                                           "i335"
                                           "i333"
                                           "i331"
                                           "i330"
                                           "i327"
                                           "i326"
                                           "i324"
                                           "i322"
                                           "i320"
                                           "i318"
                                           "i316"
                                           "i314"
                                           "i312"
                                           "i310"
                                           "i308"
                                           "i305"
                                           "i303"
                                           "i301"
                                           "i299"
                                           "i297"
                                           "i295"
                                           "i293"
                                           "i291"
                                           "i289"
                                           "i287"
                                           "i285"
                                           "i283"
                                           "i281"
                                           "i279"
                                           "i277"
                                           "i275"
                                           "i273"
                                           "i271"
                                           "i269"
                                           "i267"
                                           "i265"
                                           "i263"
                                           "i261"
                                           "i260"
                                           "i257"
                                           "i255"
                                           "i254"
                                           "i253"
                                           "i252"
                                           "i251"
                                           "i249"
                                           "i247"
                                           "i245"
                                           "i242"
                                           "i240"
                                           "i238"
                                           "i236"
                                           "i234"
                                           "i232"
                                           "i230"
                                           "i228"
                                           "i226"
                                           "i224"
                                           "i222"
                                           "i220"
                                           "i218"
                                           "i216"
                                           "i214"
                                           "i212"
                                           "i210"
                                           "i208"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("i46" "i45" "i44")))
                                       (hygiene guile))
                                    #{head 9911}#)
                              #{r 9027}#
                              #{w 9028}#
                              #{mod 9030}#)
                            (map (lambda (#{e 10265}#)
                                   (#{expand 4333}#
                                     #{e 10265}#
                                     #{r 9027}#
                                     #{w 9028}#
                                     #{mod 9030}#))
                                 (append
                                   #{tail 9912}#
                                   (list #{val 9913}#))))))))
                  #{tmp 9907}#)
                (syntax-violation
                  'set!
                  "bad set!"
                  (#{wrap 4326}#
                    (begin
                      (if (if (pair? #{e 9026}#) #{s 9029}# #f)
                        (set-source-properties! #{e 9026}# #{s 9029}#))
                      #{e 9026}#)
                    #{w 9028}#
                    #{mod 9030}#))))))))
    (module-define!
      (current-module)
      '@
      (make-syntax-transformer
        '@
        'module-ref
        (lambda (#{e 10379}# #{r 10380}# #{w 10381}#)
          (let ((#{tmp 10383}#
                  ($sc-dispatch #{e 10379}# '(_ each-any any))))
            (if (if #{tmp 10383}#
                  (@apply
                    (lambda (#{mod 10386}# #{id 10387}#)
                      (if (and-map #{id? 4301}# #{mod 10386}#)
                        (if (symbol? #{id 10387}#)
                          #t
                          (if (if (vector? #{id 10387}#)
                                (if (= (vector-length #{id 10387}#) 4)
                                  (eq? (vector-ref #{id 10387}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{id 10387}# 1))
                            #f))
                        #f))
                    #{tmp 10383}#)
                  #f)
              (@apply
                (lambda (#{mod 10427}# #{id 10428}#)
                  (values
                    (syntax->datum #{id 10428}#)
                    #{r 10380}#
                    #{w 10381}#
                    #f
                    (syntax->datum
                      (cons '#(syntax-object
                               public
                               ((top)
                                #(ribcage
                                  #(mod id)
                                  #((top) (top))
                                  #("i3590" "i3591"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(e r w)
                                  #((top) (top) (top))
                                  #("i3578" "i3579" "i3580"))
                                #(ribcage
                                  (lambda-var-list
                                    gen-var
                                    strip
                                    expand-lambda-case
                                    lambda*-formals
                                    expand-simple-lambda
                                    lambda-formals
                                    ellipsis?
                                    expand-void
                                    eval-local-transformer
                                    expand-local-syntax
                                    expand-body
                                    expand-macro
                                    expand-application
                                    expand-expr
                                    expand
                                    syntax-type
                                    parse-when-list
                                    expand-install-global
                                    expand-top-sequence
                                    expand-sequence
                                    source-wrap
                                    wrap
                                    bound-id-member?
                                    distinct-bound-ids?
                                    valid-bound-ids?
                                    bound-id=?
                                    free-id=?
                                    id-var-name
                                    same-marks?
                                    join-marks
                                    join-wraps
                                    smart-append
                                    make-binding-wrap
                                    extend-ribcage!
                                    make-empty-ribcage
                                    new-mark
                                    anti-mark
                                    the-anti-mark
                                    top-marked?
                                    top-wrap
                                    empty-wrap
                                    set-ribcage-labels!
                                    set-ribcage-marks!
                                    set-ribcage-symnames!
                                    ribcage-labels
                                    ribcage-marks
                                    ribcage-symnames
                                    ribcage?
                                    make-ribcage
                                    gen-labels
                                    gen-label
                                    make-rename
                                    rename-marks
                                    rename-new
                                    rename-old
                                    subst-rename?
                                    wrap-subst
                                    wrap-marks
                                    make-wrap
                                    id-sym-name&marks
                                    id-sym-name
                                    id?
                                    nonsymbol-id?
                                    global-extend
                                    lookup
                                    macros-only-env
                                    extend-var-env
                                    extend-env
                                    null-env
                                    binding-value
                                    binding-type
                                    make-binding
                                    arg-check
                                    source-annotation
                                    no-source
                                    set-syntax-object-module!
                                    set-syntax-object-wrap!
                                    set-syntax-object-expression!
                                    syntax-object-module
                                    syntax-object-wrap
                                    syntax-object-expression
                                    syntax-object?
                                    make-syntax-object
                                    build-lexical-var
                                    build-letrec
                                    build-named-let
                                    build-let
                                    build-sequence
                                    build-data
                                    build-primref
                                    build-lambda-case
                                    build-case-lambda
                                    build-simple-lambda
                                    build-global-definition
                                    build-global-assignment
                                    build-global-reference
                                    analyze-variable
                                    build-lexical-assignment
                                    build-lexical-reference
                                    build-dynlet
                                    build-conditional
                                    build-application
                                    build-void
                                    maybe-name-value!
                                    decorate-source
                                    get-global-definition-hook
                                    put-global-definition-hook
                                    gensym-hook
                                    local-eval-hook
                                    top-level-eval-hook
                                    fx<
                                    fx=
                                    fx-
                                    fx+
                                    set-lambda-meta!
                                    lambda-meta
                                    lambda?
                                    make-dynlet
                                    make-letrec
                                    make-let
                                    make-lambda-case
                                    make-lambda
                                    make-sequence
                                    make-application
                                    make-conditional
                                    make-toplevel-define
                                    make-toplevel-set
                                    make-toplevel-ref
                                    make-module-set
                                    make-module-ref
                                    make-lexical-set
                                    make-lexical-ref
                                    make-primitive-ref
                                    make-const
                                    make-void)
                                  ((top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top))
                                  ("i467"
                                   "i465"
                                   "i463"
                                   "i461"
                                   "i459"
                                   "i457"
                                   "i455"
                                   "i453"
                                   "i451"
                                   "i449"
                                   "i447"
                                   "i445"
                                   "i443"
                                   "i441"
                                   "i439"
                                   "i437"
                                   "i435"
                                   "i433"
                                   "i431"
                                   "i429"
                                   "i427"
                                   "i425"
                                   "i423"
                                   "i421"
                                   "i419"
                                   "i417"
                                   "i415"
                                   "i413"
                                   "i411"
                                   "i409"
                                   "i407"
                                   "i405"
                                   "i403"
                                   "i401"
                                   "i399"
                                   "i398"
                                   "i396"
                                   "i393"
                                   "i392"
                                   "i391"
                                   "i389"
                                   "i388"
                                   "i386"
                                   "i384"
                                   "i382"
                                   "i380"
                                   "i378"
                                   "i376"
                                   "i374"
                                   "i372"
                                   "i369"
                                   "i367"
                                   "i366"
                                   "i364"
                                   "i362"
                                   "i360"
                                   "i358"
                                   "i357"
                                   "i356"
                                   "i355"
                                   "i353"
                                   "i352"
                                   "i349"
                                   "i347"
                                   "i345"
                                   "i343"
                                   "i341"
                                   "i339"
                                   "i337"
                                   "i336"
                                   "i335"
                                   "i333"
                                   "i331"
                                   "i330"
                                   "i327"
                                   "i326"
                                   "i324"
                                   "i322"
                                   "i320"
                                   "i318"
                                   "i316"
                                   "i314"
                                   "i312"
                                   "i310"
                                   "i308"
                                   "i305"
                                   "i303"
                                   "i301"
                                   "i299"
                                   "i297"
                                   "i295"
                                   "i293"
                                   "i291"
                                   "i289"
                                   "i287"
                                   "i285"
                                   "i283"
                                   "i281"
                                   "i279"
                                   "i277"
                                   "i275"
                                   "i273"
                                   "i271"
                                   "i269"
                                   "i267"
                                   "i265"
                                   "i263"
                                   "i261"
                                   "i260"
                                   "i257"
                                   "i255"
                                   "i254"
                                   "i253"
                                   "i252"
                                   "i251"
                                   "i249"
                                   "i247"
                                   "i245"
                                   "i242"
                                   "i240"
                                   "i238"
                                   "i236"
                                   "i234"
                                   "i232"
                                   "i230"
                                   "i228"
                                   "i226"
                                   "i224"
                                   "i222"
                                   "i220"
                                   "i218"
                                   "i216"
                                   "i214"
                                   "i212"
                                   "i210"
                                   "i208"))
                                #(ribcage
                                  (define-structure
                                    define-expansion-accessors
                                    define-expansion-constructors)
                                  ((top) (top) (top))
                                  ("i46" "i45" "i44")))
                               (hygiene guile))
                            #{mod 10427}#))))
                #{tmp 10383}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 10379}#))))))
    (#{global-extend 4299}#
      'module-ref
      '@@
      (lambda (#{e 10525}# #{r 10526}# #{w 10527}#)
        (letrec*
          ((#{remodulate 10528}#
             (lambda (#{x 10734}# #{mod 10735}#)
               (if (pair? #{x 10734}#)
                 (cons (#{remodulate 10528}#
                         (car #{x 10734}#)
                         #{mod 10735}#)
                       (#{remodulate 10528}#
                         (cdr #{x 10734}#)
                         #{mod 10735}#))
                 (if (if (vector? #{x 10734}#)
                       (if (= (vector-length #{x 10734}#) 4)
                         (eq? (vector-ref #{x 10734}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 10749}#
                           (#{remodulate 10528}#
                             (vector-ref #{x 10734}# 1)
                             #{mod 10735}#))
                         (#{wrap 10750}# (vector-ref #{x 10734}# 2)))
                     (vector
                       'syntax-object
                       #{expression 10749}#
                       #{wrap 10750}#
                       #{mod 10735}#))
                   (if (vector? #{x 10734}#)
                     (let ((#{n 10758}# (vector-length #{x 10734}#)))
                       (let ((#{v 10759}# (make-vector #{n 10758}#)))
                         (letrec*
                           ((#{loop 10760}#
                              (lambda (#{i 10807}#)
                                (if (= #{i 10807}# #{n 10758}#)
                                  #{v 10759}#
                                  (begin
                                    (vector-set!
                                      #{v 10759}#
                                      #{i 10807}#
                                      (#{remodulate 10528}#
                                        (vector-ref #{x 10734}# #{i 10807}#)
                                        #{mod 10735}#))
                                    (#{loop 10760}# (#{1+}# #{i 10807}#)))))))
                           (#{loop 10760}# 0))))
                     #{x 10734}#))))))
          (let ((#{tmp 10530}#
                  ($sc-dispatch #{e 10525}# '(_ each-any any))))
            (if (if #{tmp 10530}#
                  (@apply
                    (lambda (#{mod 10534}# #{exp 10535}#)
                      (and-map #{id? 4301}# #{mod 10534}#))
                    #{tmp 10530}#)
                  #f)
              (@apply
                (lambda (#{mod 10551}# #{exp 10552}#)
                  (let ((#{mod 10553}#
                          (syntax->datum
                            (cons '#(syntax-object
                                     private
                                     ((top)
                                      #(ribcage
                                        #(mod exp)
                                        #((top) (top))
                                        #("i3634" "i3635"))
                                      #(ribcage (remodulate) ((top)) ("i3601"))
                                      #(ribcage
                                        #(e r w)
                                        #((top) (top) (top))
                                        #("i3598" "i3599" "i3600"))
                                      #(ribcage
                                        (lambda-var-list
                                          gen-var
                                          strip
                                          expand-lambda-case
                                          lambda*-formals
                                          expand-simple-lambda
                                          lambda-formals
                                          ellipsis?
                                          expand-void
                                          eval-local-transformer
                                          expand-local-syntax
                                          expand-body
                                          expand-macro
                                          expand-application
                                          expand-expr
                                          expand
                                          syntax-type
                                          parse-when-list
                                          expand-install-global
                                          expand-top-sequence
                                          expand-sequence
                                          source-wrap
                                          wrap
                                          bound-id-member?
                                          distinct-bound-ids?
                                          valid-bound-ids?
                                          bound-id=?
                                          free-id=?
                                          id-var-name
                                          same-marks?
                                          join-marks
                                          join-wraps
                                          smart-append
                                          make-binding-wrap
                                          extend-ribcage!
                                          make-empty-ribcage
                                          new-mark
                                          anti-mark
                                          the-anti-mark
                                          top-marked?
                                          top-wrap
                                          empty-wrap
                                          set-ribcage-labels!
                                          set-ribcage-marks!
                                          set-ribcage-symnames!
                                          ribcage-labels
                                          ribcage-marks
                                          ribcage-symnames
                                          ribcage?
                                          make-ribcage
                                          gen-labels
                                          gen-label
                                          make-rename
                                          rename-marks
                                          rename-new
                                          rename-old
                                          subst-rename?
                                          wrap-subst
                                          wrap-marks
                                          make-wrap
                                          id-sym-name&marks
                                          id-sym-name
                                          id?
                                          nonsymbol-id?
                                          global-extend
                                          lookup
                                          macros-only-env
                                          extend-var-env
                                          extend-env
                                          null-env
                                          binding-value
                                          binding-type
                                          make-binding
                                          arg-check
                                          source-annotation
                                          no-source
                                          set-syntax-object-module!
                                          set-syntax-object-wrap!
                                          set-syntax-object-expression!
                                          syntax-object-module
                                          syntax-object-wrap
                                          syntax-object-expression
                                          syntax-object?
                                          make-syntax-object
                                          build-lexical-var
                                          build-letrec
                                          build-named-let
                                          build-let
                                          build-sequence
                                          build-data
                                          build-primref
                                          build-lambda-case
                                          build-case-lambda
                                          build-simple-lambda
                                          build-global-definition
                                          build-global-assignment
                                          build-global-reference
                                          analyze-variable
                                          build-lexical-assignment
                                          build-lexical-reference
                                          build-dynlet
                                          build-conditional
                                          build-application
                                          build-void
                                          maybe-name-value!
                                          decorate-source
                                          get-global-definition-hook
                                          put-global-definition-hook
                                          gensym-hook
                                          local-eval-hook
                                          top-level-eval-hook
                                          fx<
                                          fx=
                                          fx-
                                          fx+
                                          set-lambda-meta!
                                          lambda-meta
                                          lambda?
                                          make-dynlet
                                          make-letrec
                                          make-let
                                          make-lambda-case
                                          make-lambda
                                          make-sequence
                                          make-application
                                          make-conditional
                                          make-toplevel-define
                                          make-toplevel-set
                                          make-toplevel-ref
                                          make-module-set
                                          make-module-ref
                                          make-lexical-set
                                          make-lexical-ref
                                          make-primitive-ref
                                          make-const
                                          make-void)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i467"
                                         "i465"
                                         "i463"
                                         "i461"
                                         "i459"
                                         "i457"
                                         "i455"
                                         "i453"
                                         "i451"
                                         "i449"
                                         "i447"
                                         "i445"
                                         "i443"
                                         "i441"
                                         "i439"
                                         "i437"
                                         "i435"
                                         "i433"
                                         "i431"
                                         "i429"
                                         "i427"
                                         "i425"
                                         "i423"
                                         "i421"
                                         "i419"
                                         "i417"
                                         "i415"
                                         "i413"
                                         "i411"
                                         "i409"
                                         "i407"
                                         "i405"
                                         "i403"
                                         "i401"
                                         "i399"
                                         "i398"
                                         "i396"
                                         "i393"
                                         "i392"
                                         "i391"
                                         "i389"
                                         "i388"
                                         "i386"
                                         "i384"
                                         "i382"
                                         "i380"
                                         "i378"
                                         "i376"
                                         "i374"
                                         "i372"
                                         "i369"
                                         "i367"
                                         "i366"
                                         "i364"
                                         "i362"
                                         "i360"
                                         "i358"
                                         "i357"
                                         "i356"
                                         "i355"
                                         "i353"
                                         "i352"
                                         "i349"
                                         "i347"
                                         "i345"
                                         "i343"
                                         "i341"
                                         "i339"
                                         "i337"
                                         "i336"
                                         "i335"
                                         "i333"
                                         "i331"
                                         "i330"
                                         "i327"
                                         "i326"
                                         "i324"
                                         "i322"
                                         "i320"
                                         "i318"
                                         "i316"
                                         "i314"
                                         "i312"
                                         "i310"
                                         "i308"
                                         "i305"
                                         "i303"
                                         "i301"
                                         "i299"
                                         "i297"
                                         "i295"
                                         "i293"
                                         "i291"
                                         "i289"
                                         "i287"
                                         "i285"
                                         "i283"
                                         "i281"
                                         "i279"
                                         "i277"
                                         "i275"
                                         "i273"
                                         "i271"
                                         "i269"
                                         "i267"
                                         "i265"
                                         "i263"
                                         "i261"
                                         "i260"
                                         "i257"
                                         "i255"
                                         "i254"
                                         "i253"
                                         "i252"
                                         "i251"
                                         "i249"
                                         "i247"
                                         "i245"
                                         "i242"
                                         "i240"
                                         "i238"
                                         "i236"
                                         "i234"
                                         "i232"
                                         "i230"
                                         "i228"
                                         "i226"
                                         "i224"
                                         "i222"
                                         "i220"
                                         "i218"
                                         "i216"
                                         "i214"
                                         "i212"
                                         "i210"
                                         "i208"))
                                      #(ribcage
                                        (define-structure
                                          define-expansion-accessors
                                          define-expansion-constructors)
                                        ((top) (top) (top))
                                        ("i46" "i45" "i44")))
                                     (hygiene guile))
                                  #{mod 10551}#))))
                    (values
                      (#{remodulate 10528}#
                        #{exp 10552}#
                        #{mod 10553}#)
                      #{r 10526}#
                      #{w 10527}#
                      (#{source-annotation 4294}# #{exp 10552}#)
                      #{mod 10553}#)))
                #{tmp 10530}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 10525}#))))))
    (#{global-extend 4299}#
      'core
      'if
      (lambda (#{e 10913}#
               #{r 10914}#
               #{w 10915}#
               #{s 10916}#
               #{mod 10917}#)
        (let ((#{tmp 10919}#
                ($sc-dispatch #{e 10913}# '(_ any any))))
          (if #{tmp 10919}#
            (@apply
              (lambda (#{test 10923}# #{then 10924}#)
                (#{build-conditional 4269}#
                  #{s 10916}#
                  (#{expand 4333}#
                    #{test 10923}#
                    #{r 10914}#
                    #{w 10915}#
                    #{mod 10917}#)
                  (#{expand 4333}#
                    #{then 10924}#
                    #{r 10914}#
                    #{w 10915}#
                    #{mod 10917}#)
                  (make-struct/no-tail
                    (vector-ref %expanded-vtables 0)
                    #f)))
              #{tmp 10919}#)
            (let ((#{tmp 11164}#
                    ($sc-dispatch #{e 10913}# '(_ any any any))))
              (if #{tmp 11164}#
                (@apply
                  (lambda (#{test 11168}# #{then 11169}# #{else 11170}#)
                    (#{build-conditional 4269}#
                      #{s 10916}#
                      (#{expand 4333}#
                        #{test 11168}#
                        #{r 10914}#
                        #{w 10915}#
                        #{mod 10917}#)
                      (#{expand 4333}#
                        #{then 11169}#
                        #{r 10914}#
                        #{w 10915}#
                        #{mod 10917}#)
                      (#{expand 4333}#
                        #{else 11170}#
                        #{r 10914}#
                        #{w 10915}#
                        #{mod 10917}#)))
                  #{tmp 11164}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 10913}#)))))))
    (#{global-extend 4299}#
      'core
      'with-fluids
      (lambda (#{e 11594}#
               #{r 11595}#
               #{w 11596}#
               #{s 11597}#
               #{mod 11598}#)
        (let ((#{tmp 11600}#
                ($sc-dispatch
                  #{e 11594}#
                  '(_ #(each (any any)) any . each-any))))
          (if #{tmp 11600}#
            (@apply
              (lambda (#{fluid 11604}#
                       #{val 11605}#
                       #{b 11606}#
                       #{b* 11607}#)
                (#{build-dynlet 4270}#
                  #{s 11597}#
                  (map (lambda (#{x 11693}#)
                         (#{expand 4333}#
                           #{x 11693}#
                           #{r 11595}#
                           #{w 11596}#
                           #{mod 11598}#))
                       #{fluid 11604}#)
                  (map (lambda (#{x 11768}#)
                         (#{expand 4333}#
                           #{x 11768}#
                           #{r 11595}#
                           #{w 11596}#
                           #{mod 11598}#))
                       #{val 11605}#)
                  (#{expand-body 4337}#
                    (cons #{b 11606}# #{b* 11607}#)
                    (#{wrap 4326}#
                      (begin
                        (if (if (pair? #{e 11594}#) #{s 11597}# #f)
                          (set-source-properties! #{e 11594}# #{s 11597}#))
                        #{e 11594}#)
                      #{w 11596}#
                      #{mod 11598}#)
                    #{r 11595}#
                    #{w 11596}#
                    #{mod 11598}#)))
              #{tmp 11600}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{e 11594}#)))))
    (module-define!
      (current-module)
      'begin
      (make-syntax-transformer 'begin 'begin '()))
    (module-define!
      (current-module)
      'define
      (make-syntax-transformer 'define 'define '()))
    (module-define!
      (current-module)
      'define-syntax
      (make-syntax-transformer
        'define-syntax
        'define-syntax
        '()))
    (module-define!
      (current-module)
      'eval-when
      (make-syntax-transformer
        'eval-when
        'eval-when
        '()))
    (#{global-extend 4299}#
      'core
      'syntax-case
      (letrec*
        ((#{convert-pattern 12142}#
           (lambda (#{pattern 13765}# #{keys 13766}#)
             (letrec*
               ((#{cvt* 13767}#
                  (lambda (#{p* 14393}# #{n 14394}# #{ids 14395}#)
                    (if (not (pair? #{p* 14393}#))
                      (#{cvt 13769}#
                        #{p* 14393}#
                        #{n 14394}#
                        #{ids 14395}#)
                      (call-with-values
                        (lambda ()
                          (#{cvt* 13767}#
                            (cdr #{p* 14393}#)
                            #{n 14394}#
                            #{ids 14395}#))
                        (lambda (#{y 14398}# #{ids 14399}#)
                          (call-with-values
                            (lambda ()
                              (#{cvt 13769}#
                                (car #{p* 14393}#)
                                #{n 14394}#
                                #{ids 14399}#))
                            (lambda (#{x 14402}# #{ids 14403}#)
                              (values
                                (cons #{x 14402}# #{y 14398}#)
                                #{ids 14403}#))))))))
                (#{v-reverse 13768}#
                  (lambda (#{x 14404}#)
                    (letrec*
                      ((#{loop 14405}#
                         (lambda (#{r 14482}# #{x 14483}#)
                           (if (not (pair? #{x 14483}#))
                             (values #{r 14482}# #{x 14483}#)
                             (#{loop 14405}#
                               (cons (car #{x 14483}#) #{r 14482}#)
                               (cdr #{x 14483}#))))))
                      (#{loop 14405}# '() #{x 14404}#))))
                (#{cvt 13769}#
                  (lambda (#{p 13772}# #{n 13773}# #{ids 13774}#)
                    (if (if (symbol? #{p 13772}#)
                          #t
                          (if (if (vector? #{p 13772}#)
                                (if (= (vector-length #{p 13772}#) 4)
                                  (eq? (vector-ref #{p 13772}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{p 13772}# 1))
                            #f))
                      (if (#{bound-id-member? 4325}#
                            #{p 13772}#
                            #{keys 13766}#)
                        (values
                          (vector 'free-id #{p 13772}#)
                          #{ids 13774}#)
                        (if (if (eq? (if (if (vector? #{p 13772}#)
                                           (if (= (vector-length #{p 13772}#)
                                                  4)
                                             (eq? (vector-ref #{p 13772}# 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (vector-ref #{p 13772}# 1)
                                       #{p 13772}#)
                                     (if (if (= (vector-length
                                                  '#(syntax-object
                                                     _
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(p n ids)
                                                        #((top) (top) (top))
                                                        #("i3735"
                                                          "i3736"
                                                          "i3737"))
                                                      #(ribcage
                                                        (cvt v-reverse cvt*)
                                                        ((top) (top) (top))
                                                        ("i3708"
                                                         "i3706"
                                                         "i3704"))
                                                      #(ribcage
                                                        #(pattern keys)
                                                        #((top) (top))
                                                        #("i3702" "i3703"))
                                                      #(ribcage
                                                        (gen-syntax-case
                                                          gen-clause
                                                          build-dispatch-call
                                                          convert-pattern)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i3698"
                                                         "i3696"
                                                         "i3694"
                                                         "i3692"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i467"
                                                         "i465"
                                                         "i463"
                                                         "i461"
                                                         "i459"
                                                         "i457"
                                                         "i455"
                                                         "i453"
                                                         "i451"
                                                         "i449"
                                                         "i447"
                                                         "i445"
                                                         "i443"
                                                         "i441"
                                                         "i439"
                                                         "i437"
                                                         "i435"
                                                         "i433"
                                                         "i431"
                                                         "i429"
                                                         "i427"
                                                         "i425"
                                                         "i423"
                                                         "i421"
                                                         "i419"
                                                         "i417"
                                                         "i415"
                                                         "i413"
                                                         "i411"
                                                         "i409"
                                                         "i407"
                                                         "i405"
                                                         "i403"
                                                         "i401"
                                                         "i399"
                                                         "i398"
                                                         "i396"
                                                         "i393"
                                                         "i392"
                                                         "i391"
                                                         "i389"
                                                         "i388"
                                                         "i386"
                                                         "i384"
                                                         "i382"
                                                         "i380"
                                                         "i378"
                                                         "i376"
                                                         "i374"
                                                         "i372"
                                                         "i369"
                                                         "i367"
                                                         "i366"
                                                         "i364"
                                                         "i362"
                                                         "i360"
                                                         "i358"
                                                         "i357"
                                                         "i356"
                                                         "i355"
                                                         "i353"
                                                         "i352"
                                                         "i349"
                                                         "i347"
                                                         "i345"
                                                         "i343"
                                                         "i341"
                                                         "i339"
                                                         "i337"
                                                         "i336"
                                                         "i335"
                                                         "i333"
                                                         "i331"
                                                         "i330"
                                                         "i327"
                                                         "i326"
                                                         "i324"
                                                         "i322"
                                                         "i320"
                                                         "i318"
                                                         "i316"
                                                         "i314"
                                                         "i312"
                                                         "i310"
                                                         "i308"
                                                         "i305"
                                                         "i303"
                                                         "i301"
                                                         "i299"
                                                         "i297"
                                                         "i295"
                                                         "i293"
                                                         "i291"
                                                         "i289"
                                                         "i287"
                                                         "i285"
                                                         "i283"
                                                         "i281"
                                                         "i279"
                                                         "i277"
                                                         "i275"
                                                         "i273"
                                                         "i271"
                                                         "i269"
                                                         "i267"
                                                         "i265"
                                                         "i263"
                                                         "i261"
                                                         "i260"
                                                         "i257"
                                                         "i255"
                                                         "i254"
                                                         "i253"
                                                         "i252"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i242"
                                                         "i240"
                                                         "i238"
                                                         "i236"
                                                         "i234"
                                                         "i232"
                                                         "i230"
                                                         "i228"
                                                         "i226"
                                                         "i224"
                                                         "i222"
                                                         "i220"
                                                         "i218"
                                                         "i216"
                                                         "i214"
                                                         "i212"
                                                         "i210"
                                                         "i208"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("i46" "i45" "i44")))
                                                     (hygiene guile)))
                                                4)
                                           #t
                                           #f)
                                       '_
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("i3735" "i3736" "i3737"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("i3708" "i3706" "i3704"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("i3702" "i3703"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3698" "i3696" "i3694" "i3692"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i399"
                                              "i398"
                                              "i396"
                                              "i393"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i372"
                                              "i369"
                                              "i367"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i358"
                                              "i357"
                                              "i356"
                                              "i355"
                                              "i353"
                                              "i352"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i339"
                                              "i337"
                                              "i336"
                                              "i335"
                                              "i333"
                                              "i331"
                                              "i330"
                                              "i327"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i310"
                                              "i308"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i261"
                                              "i260"
                                              "i257"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i245"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))))
                              (eq? (#{id-var-name 4320}# #{p 13772}# '(()))
                                   (#{id-var-name 4320}#
                                     '#(syntax-object
                                        _
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p n ids)
                                           #((top) (top) (top))
                                           #("i3735" "i3736" "i3737"))
                                         #(ribcage
                                           (cvt v-reverse cvt*)
                                           ((top) (top) (top))
                                           ("i3708" "i3706" "i3704"))
                                         #(ribcage
                                           #(pattern keys)
                                           #((top) (top))
                                           #("i3702" "i3703"))
                                         #(ribcage
                                           (gen-syntax-case
                                             gen-clause
                                             build-dispatch-call
                                             convert-pattern)
                                           ((top) (top) (top) (top))
                                           ("i3698" "i3696" "i3694" "i3692"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             expand-lambda-case
                                             lambda*-formals
                                             expand-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             expand-void
                                             eval-local-transformer
                                             expand-local-syntax
                                             expand-body
                                             expand-macro
                                             expand-application
                                             expand-expr
                                             expand
                                             syntax-type
                                             parse-when-list
                                             expand-install-global
                                             expand-top-sequence
                                             expand-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             maybe-name-value!
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             set-lambda-meta!
                                             lambda-meta
                                             lambda?
                                             make-dynlet
                                             make-letrec
                                             make-let
                                             make-lambda-case
                                             make-lambda
                                             make-sequence
                                             make-application
                                             make-conditional
                                             make-toplevel-define
                                             make-toplevel-set
                                             make-toplevel-ref
                                             make-module-set
                                             make-module-ref
                                             make-lexical-set
                                             make-lexical-ref
                                             make-primitive-ref
                                             make-const
                                             make-void)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i467"
                                            "i465"
                                            "i463"
                                            "i461"
                                            "i459"
                                            "i457"
                                            "i455"
                                            "i453"
                                            "i451"
                                            "i449"
                                            "i447"
                                            "i445"
                                            "i443"
                                            "i441"
                                            "i439"
                                            "i437"
                                            "i435"
                                            "i433"
                                            "i431"
                                            "i429"
                                            "i427"
                                            "i425"
                                            "i423"
                                            "i421"
                                            "i419"
                                            "i417"
                                            "i415"
                                            "i413"
                                            "i411"
                                            "i409"
                                            "i407"
                                            "i405"
                                            "i403"
                                            "i401"
                                            "i399"
                                            "i398"
                                            "i396"
                                            "i393"
                                            "i392"
                                            "i391"
                                            "i389"
                                            "i388"
                                            "i386"
                                            "i384"
                                            "i382"
                                            "i380"
                                            "i378"
                                            "i376"
                                            "i374"
                                            "i372"
                                            "i369"
                                            "i367"
                                            "i366"
                                            "i364"
                                            "i362"
                                            "i360"
                                            "i358"
                                            "i357"
                                            "i356"
                                            "i355"
                                            "i353"
                                            "i352"
                                            "i349"
                                            "i347"
                                            "i345"
                                            "i343"
                                            "i341"
                                            "i339"
                                            "i337"
                                            "i336"
                                            "i335"
                                            "i333"
                                            "i331"
                                            "i330"
                                            "i327"
                                            "i326"
                                            "i324"
                                            "i322"
                                            "i320"
                                            "i318"
                                            "i316"
                                            "i314"
                                            "i312"
                                            "i310"
                                            "i308"
                                            "i305"
                                            "i303"
                                            "i301"
                                            "i299"
                                            "i297"
                                            "i295"
                                            "i293"
                                            "i291"
                                            "i289"
                                            "i287"
                                            "i285"
                                            "i283"
                                            "i281"
                                            "i279"
                                            "i277"
                                            "i275"
                                            "i273"
                                            "i271"
                                            "i269"
                                            "i267"
                                            "i265"
                                            "i263"
                                            "i261"
                                            "i260"
                                            "i257"
                                            "i255"
                                            "i254"
                                            "i253"
                                            "i252"
                                            "i251"
                                            "i249"
                                            "i247"
                                            "i245"
                                            "i242"
                                            "i240"
                                            "i238"
                                            "i236"
                                            "i234"
                                            "i232"
                                            "i230"
                                            "i228"
                                            "i226"
                                            "i224"
                                            "i222"
                                            "i220"
                                            "i218"
                                            "i216"
                                            "i214"
                                            "i212"
                                            "i210"
                                            "i208"))
                                         #(ribcage
                                           (define-structure
                                             define-expansion-accessors
                                             define-expansion-constructors)
                                           ((top) (top) (top))
                                           ("i46" "i45" "i44")))
                                        (hygiene guile))
                                     '(())))
                              #f)
                          (values '_ #{ids 13774}#)
                          (values
                            'any
                            (cons (cons #{p 13772}# #{n 13773}#)
                                  #{ids 13774}#))))
                      (let ((#{tmp 14096}#
                              ($sc-dispatch #{p 13772}# '(any any))))
                        (if (if #{tmp 14096}#
                              (@apply
                                (lambda (#{x 14100}# #{dots 14101}#)
                                  (if (if (if (vector? #{dots 14101}#)
                                            (if (= (vector-length
                                                     #{dots 14101}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{dots 14101}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{dots 14101}# 1))
                                        #f)
                                    (if (eq? (if (if (vector? #{dots 14101}#)
                                                   (if (= (vector-length
                                                            #{dots 14101}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{dots 14101}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{dots 14101}# 1)
                                               #{dots 14101}#)
                                             (if (if (= (vector-length
                                                          '#(syntax-object
                                                             ...
                                                             ((top)
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(x)
                                                                #((top))
                                                                #("i2218"))
                                                              #(ribcage
                                                                (lambda-var-list
                                                                  gen-var
                                                                  strip
                                                                  expand-lambda-case
                                                                  lambda*-formals
                                                                  expand-simple-lambda
                                                                  lambda-formals
                                                                  ellipsis?
                                                                  expand-void
                                                                  eval-local-transformer
                                                                  expand-local-syntax
                                                                  expand-body
                                                                  expand-macro
                                                                  expand-application
                                                                  expand-expr
                                                                  expand
                                                                  syntax-type
                                                                  parse-when-list
                                                                  expand-install-global
                                                                  expand-top-sequence
                                                                  expand-sequence
                                                                  source-wrap
                                                                  wrap
                                                                  bound-id-member?
                                                                  distinct-bound-ids?
                                                                  valid-bound-ids?
                                                                  bound-id=?
                                                                  free-id=?
                                                                  id-var-name
                                                                  same-marks?
                                                                  join-marks
                                                                  join-wraps
                                                                  smart-append
                                                                  make-binding-wrap
                                                                  extend-ribcage!
                                                                  make-empty-ribcage
                                                                  new-mark
                                                                  anti-mark
                                                                  the-anti-mark
                                                                  top-marked?
                                                                  top-wrap
                                                                  empty-wrap
                                                                  set-ribcage-labels!
                                                                  set-ribcage-marks!
                                                                  set-ribcage-symnames!
                                                                  ribcage-labels
                                                                  ribcage-marks
                                                                  ribcage-symnames
                                                                  ribcage?
                                                                  make-ribcage
                                                                  gen-labels
                                                                  gen-label
                                                                  make-rename
                                                                  rename-marks
                                                                  rename-new
                                                                  rename-old
                                                                  subst-rename?
                                                                  wrap-subst
                                                                  wrap-marks
                                                                  make-wrap
                                                                  id-sym-name&marks
                                                                  id-sym-name
                                                                  id?
                                                                  nonsymbol-id?
                                                                  global-extend
                                                                  lookup
                                                                  macros-only-env
                                                                  extend-var-env
                                                                  extend-env
                                                                  null-env
                                                                  binding-value
                                                                  binding-type
                                                                  make-binding
                                                                  arg-check
                                                                  source-annotation
                                                                  no-source
                                                                  set-syntax-object-module!
                                                                  set-syntax-object-wrap!
                                                                  set-syntax-object-expression!
                                                                  syntax-object-module
                                                                  syntax-object-wrap
                                                                  syntax-object-expression
                                                                  syntax-object?
                                                                  make-syntax-object
                                                                  build-lexical-var
                                                                  build-letrec
                                                                  build-named-let
                                                                  build-let
                                                                  build-sequence
                                                                  build-data
                                                                  build-primref
                                                                  build-lambda-case
                                                                  build-case-lambda
                                                                  build-simple-lambda
                                                                  build-global-definition
                                                                  build-global-assignment
                                                                  build-global-reference
                                                                  analyze-variable
                                                                  build-lexical-assignment
                                                                  build-lexical-reference
                                                                  build-dynlet
                                                                  build-conditional
                                                                  build-application
                                                                  build-void
                                                                  maybe-name-value!
                                                                  decorate-source
                                                                  get-global-definition-hook
                                                                  put-global-definition-hook
                                                                  gensym-hook
                                                                  local-eval-hook
                                                                  top-level-eval-hook
                                                                  fx<
                                                                  fx=
                                                                  fx-
                                                                  fx+
                                                                  set-lambda-meta!
                                                                  lambda-meta
                                                                  lambda?
                                                                  make-dynlet
                                                                  make-letrec
                                                                  make-let
                                                                  make-lambda-case
                                                                  make-lambda
                                                                  make-sequence
                                                                  make-application
                                                                  make-conditional
                                                                  make-toplevel-define
                                                                  make-toplevel-set
                                                                  make-toplevel-ref
                                                                  make-module-set
                                                                  make-module-ref
                                                                  make-lexical-set
                                                                  make-lexical-ref
                                                                  make-primitive-ref
                                                                  make-const
                                                                  make-void)
                                                                ((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                                ("i467"
                                                                 "i465"
                                                                 "i463"
                                                                 "i461"
                                                                 "i459"
                                                                 "i457"
                                                                 "i455"
                                                                 "i453"
                                                                 "i451"
                                                                 "i449"
                                                                 "i447"
                                                                 "i445"
                                                                 "i443"
                                                                 "i441"
                                                                 "i439"
                                                                 "i437"
                                                                 "i435"
                                                                 "i433"
                                                                 "i431"
                                                                 "i429"
                                                                 "i427"
                                                                 "i425"
                                                                 "i423"
                                                                 "i421"
                                                                 "i419"
                                                                 "i417"
                                                                 "i415"
                                                                 "i413"
                                                                 "i411"
                                                                 "i409"
                                                                 "i407"
                                                                 "i405"
                                                                 "i403"
                                                                 "i401"
                                                                 "i399"
                                                                 "i398"
                                                                 "i396"
                                                                 "i393"
                                                                 "i392"
                                                                 "i391"
                                                                 "i389"
                                                                 "i388"
                                                                 "i386"
                                                                 "i384"
                                                                 "i382"
                                                                 "i380"
                                                                 "i378"
                                                                 "i376"
                                                                 "i374"
                                                                 "i372"
                                                                 "i369"
                                                                 "i367"
                                                                 "i366"
                                                                 "i364"
                                                                 "i362"
                                                                 "i360"
                                                                 "i358"
                                                                 "i357"
                                                                 "i356"
                                                                 "i355"
                                                                 "i353"
                                                                 "i352"
                                                                 "i349"
                                                                 "i347"
                                                                 "i345"
                                                                 "i343"
                                                                 "i341"
                                                                 "i339"
                                                                 "i337"
                                                                 "i336"
                                                                 "i335"
                                                                 "i333"
                                                                 "i331"
                                                                 "i330"
                                                                 "i327"
                                                                 "i326"
                                                                 "i324"
                                                                 "i322"
                                                                 "i320"
                                                                 "i318"
                                                                 "i316"
                                                                 "i314"
                                                                 "i312"
                                                                 "i310"
                                                                 "i308"
                                                                 "i305"
                                                                 "i303"
                                                                 "i301"
                                                                 "i299"
                                                                 "i297"
                                                                 "i295"
                                                                 "i293"
                                                                 "i291"
                                                                 "i289"
                                                                 "i287"
                                                                 "i285"
                                                                 "i283"
                                                                 "i281"
                                                                 "i279"
                                                                 "i277"
                                                                 "i275"
                                                                 "i273"
                                                                 "i271"
                                                                 "i269"
                                                                 "i267"
                                                                 "i265"
                                                                 "i263"
                                                                 "i261"
                                                                 "i260"
                                                                 "i257"
                                                                 "i255"
                                                                 "i254"
                                                                 "i253"
                                                                 "i252"
                                                                 "i251"
                                                                 "i249"
                                                                 "i247"
                                                                 "i245"
                                                                 "i242"
                                                                 "i240"
                                                                 "i238"
                                                                 "i236"
                                                                 "i234"
                                                                 "i232"
                                                                 "i230"
                                                                 "i228"
                                                                 "i226"
                                                                 "i224"
                                                                 "i222"
                                                                 "i220"
                                                                 "i218"
                                                                 "i216"
                                                                 "i214"
                                                                 "i212"
                                                                 "i210"
                                                                 "i208"))
                                                              #(ribcage
                                                                (define-structure
                                                                  define-expansion-accessors
                                                                  define-expansion-constructors)
                                                                ((top)
                                                                 (top)
                                                                 (top))
                                                                ("i46"
                                                                 "i45"
                                                                 "i44")))
                                                             (hygiene guile)))
                                                        4)
                                                   #t
                                                   #f)
                                               '...
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i2218"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       expand-lambda-case
                                                       lambda*-formals
                                                       expand-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       expand-void
                                                       eval-local-transformer
                                                       expand-local-syntax
                                                       expand-body
                                                       expand-macro
                                                       expand-application
                                                       expand-expr
                                                       expand
                                                       syntax-type
                                                       parse-when-list
                                                       expand-install-global
                                                       expand-top-sequence
                                                       expand-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i467"
                                                      "i465"
                                                      "i463"
                                                      "i461"
                                                      "i459"
                                                      "i457"
                                                      "i455"
                                                      "i453"
                                                      "i451"
                                                      "i449"
                                                      "i447"
                                                      "i445"
                                                      "i443"
                                                      "i441"
                                                      "i439"
                                                      "i437"
                                                      "i435"
                                                      "i433"
                                                      "i431"
                                                      "i429"
                                                      "i427"
                                                      "i425"
                                                      "i423"
                                                      "i421"
                                                      "i419"
                                                      "i417"
                                                      "i415"
                                                      "i413"
                                                      "i411"
                                                      "i409"
                                                      "i407"
                                                      "i405"
                                                      "i403"
                                                      "i401"
                                                      "i399"
                                                      "i398"
                                                      "i396"
                                                      "i393"
                                                      "i392"
                                                      "i391"
                                                      "i389"
                                                      "i388"
                                                      "i386"
                                                      "i384"
                                                      "i382"
                                                      "i380"
                                                      "i378"
                                                      "i376"
                                                      "i374"
                                                      "i372"
                                                      "i369"
                                                      "i367"
                                                      "i366"
                                                      "i364"
                                                      "i362"
                                                      "i360"
                                                      "i358"
                                                      "i357"
                                                      "i356"
                                                      "i355"
                                                      "i353"
                                                      "i352"
                                                      "i349"
                                                      "i347"
                                                      "i345"
                                                      "i343"
                                                      "i341"
                                                      "i339"
                                                      "i337"
                                                      "i336"
                                                      "i335"
                                                      "i333"
                                                      "i331"
                                                      "i330"
                                                      "i327"
                                                      "i326"
                                                      "i324"
                                                      "i322"
                                                      "i320"
                                                      "i318"
                                                      "i316"
                                                      "i314"
                                                      "i312"
                                                      "i310"
                                                      "i308"
                                                      "i305"
                                                      "i303"
                                                      "i301"
                                                      "i299"
                                                      "i297"
                                                      "i295"
                                                      "i293"
                                                      "i291"
                                                      "i289"
                                                      "i287"
                                                      "i285"
                                                      "i283"
                                                      "i281"
                                                      "i279"
                                                      "i277"
                                                      "i275"
                                                      "i273"
                                                      "i271"
                                                      "i269"
                                                      "i267"
                                                      "i265"
                                                      "i263"
                                                      "i261"
                                                      "i260"
                                                      "i257"
                                                      "i255"
                                                      "i254"
                                                      "i253"
                                                      "i252"
                                                      "i251"
                                                      "i249"
                                                      "i247"
                                                      "i245"
                                                      "i242"
                                                      "i240"
                                                      "i238"
                                                      "i236"
                                                      "i234"
                                                      "i232"
                                                      "i230"
                                                      "i228"
                                                      "i226"
                                                      "i224"
                                                      "i222"
                                                      "i220"
                                                      "i218"
                                                      "i216"
                                                      "i214"
                                                      "i212"
                                                      "i210"
                                                      "i208"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("i46" "i45" "i44")))
                                                  (hygiene guile))))
                                      (eq? (#{id-var-name 4320}#
                                             #{dots 14101}#
                                             '(()))
                                           (#{id-var-name 4320}#
                                             '#(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i2218"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     expand-lambda-case
                                                     lambda*-formals
                                                     expand-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     expand-void
                                                     eval-local-transformer
                                                     expand-local-syntax
                                                     expand-body
                                                     expand-macro
                                                     expand-application
                                                     expand-expr
                                                     expand
                                                     syntax-type
                                                     parse-when-list
                                                     expand-install-global
                                                     expand-top-sequence
                                                     expand-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     maybe-name-value!
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     set-lambda-meta!
                                                     lambda-meta
                                                     lambda?
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i467"
                                                    "i465"
                                                    "i463"
                                                    "i461"
                                                    "i459"
                                                    "i457"
                                                    "i455"
                                                    "i453"
                                                    "i451"
                                                    "i449"
                                                    "i447"
                                                    "i445"
                                                    "i443"
                                                    "i441"
                                                    "i439"
                                                    "i437"
                                                    "i435"
                                                    "i433"
                                                    "i431"
                                                    "i429"
                                                    "i427"
                                                    "i425"
                                                    "i423"
                                                    "i421"
                                                    "i419"
                                                    "i417"
                                                    "i415"
                                                    "i413"
                                                    "i411"
                                                    "i409"
                                                    "i407"
                                                    "i405"
                                                    "i403"
                                                    "i401"
                                                    "i399"
                                                    "i398"
                                                    "i396"
                                                    "i393"
                                                    "i392"
                                                    "i391"
                                                    "i389"
                                                    "i388"
                                                    "i386"
                                                    "i384"
                                                    "i382"
                                                    "i380"
                                                    "i378"
                                                    "i376"
                                                    "i374"
                                                    "i372"
                                                    "i369"
                                                    "i367"
                                                    "i366"
                                                    "i364"
                                                    "i362"
                                                    "i360"
                                                    "i358"
                                                    "i357"
                                                    "i356"
                                                    "i355"
                                                    "i353"
                                                    "i352"
                                                    "i349"
                                                    "i347"
                                                    "i345"
                                                    "i343"
                                                    "i341"
                                                    "i339"
                                                    "i337"
                                                    "i336"
                                                    "i335"
                                                    "i333"
                                                    "i331"
                                                    "i330"
                                                    "i327"
                                                    "i326"
                                                    "i324"
                                                    "i322"
                                                    "i320"
                                                    "i318"
                                                    "i316"
                                                    "i314"
                                                    "i312"
                                                    "i310"
                                                    "i308"
                                                    "i305"
                                                    "i303"
                                                    "i301"
                                                    "i299"
                                                    "i297"
                                                    "i295"
                                                    "i293"
                                                    "i291"
                                                    "i289"
                                                    "i287"
                                                    "i285"
                                                    "i283"
                                                    "i281"
                                                    "i279"
                                                    "i277"
                                                    "i275"
                                                    "i273"
                                                    "i271"
                                                    "i269"
                                                    "i267"
                                                    "i265"
                                                    "i263"
                                                    "i261"
                                                    "i260"
                                                    "i257"
                                                    "i255"
                                                    "i254"
                                                    "i253"
                                                    "i252"
                                                    "i251"
                                                    "i249"
                                                    "i247"
                                                    "i245"
                                                    "i242"
                                                    "i240"
                                                    "i238"
                                                    "i236"
                                                    "i234"
                                                    "i232"
                                                    "i230"
                                                    "i228"
                                                    "i226"
                                                    "i224"
                                                    "i222"
                                                    "i220"
                                                    "i218"
                                                    "i216"
                                                    "i214"
                                                    "i212"
                                                    "i210"
                                                    "i208"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-accessors
                                                     define-expansion-constructors)
                                                   ((top) (top) (top))
                                                   ("i46" "i45" "i44")))
                                                (hygiene guile))
                                             '(())))
                                      #f)
                                    #f))
                                #{tmp 14096}#)
                              #f)
                          (@apply
                            (lambda (#{x 14201}# #{dots 14202}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt 13769}#
                                    #{x 14201}#
                                    (#{1+}# #{n 13773}#)
                                    #{ids 13774}#))
                                (lambda (#{p 14203}# #{ids 14204}#)
                                  (values
                                    (if (eq? #{p 14203}# 'any)
                                      'each-any
                                      (vector 'each #{p 14203}#))
                                    #{ids 14204}#))))
                            #{tmp 14096}#)
                          (let ((#{tmp 14205}#
                                  ($sc-dispatch #{p 13772}# '(any any . any))))
                            (if (if #{tmp 14205}#
                                  (@apply
                                    (lambda (#{x 14209}#
                                             #{dots 14210}#
                                             #{ys 14211}#)
                                      (if (if (if (vector? #{dots 14210}#)
                                                (if (= (vector-length
                                                         #{dots 14210}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{dots 14210}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (symbol?
                                              (vector-ref #{dots 14210}# 1))
                                            #f)
                                        (if (eq? (if (if (vector?
                                                           #{dots 14210}#)
                                                       (if (= (vector-length
                                                                #{dots 14210}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{dots 14210}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref
                                                     #{dots 14210}#
                                                     1)
                                                   #{dots 14210}#)
                                                 (if (if (= (vector-length
                                                              '#(syntax-object
                                                                 ...
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i2218"))
                                                                  #(ribcage
                                                                    (lambda-var-list
                                                                      gen-var
                                                                      strip
                                                                      expand-lambda-case
                                                                      lambda*-formals
                                                                      expand-simple-lambda
                                                                      lambda-formals
                                                                      ellipsis?
                                                                      expand-void
                                                                      eval-local-transformer
                                                                      expand-local-syntax
                                                                      expand-body
                                                                      expand-macro
                                                                      expand-application
                                                                      expand-expr
                                                                      expand
                                                                      syntax-type
                                                                      parse-when-list
                                                                      expand-install-global
                                                                      expand-top-sequence
                                                                      expand-sequence
                                                                      source-wrap
                                                                      wrap
                                                                      bound-id-member?
                                                                      distinct-bound-ids?
                                                                      valid-bound-ids?
                                                                      bound-id=?
                                                                      free-id=?
                                                                      id-var-name
                                                                      same-marks?
                                                                      join-marks
                                                                      join-wraps
                                                                      smart-append
                                                                      make-binding-wrap
                                                                      extend-ribcage!
                                                                      make-empty-ribcage
                                                                      new-mark
                                                                      anti-mark
                                                                      the-anti-mark
                                                                      top-marked?
                                                                      top-wrap
                                                                      empty-wrap
                                                                      set-ribcage-labels!
                                                                      set-ribcage-marks!
                                                                      set-ribcage-symnames!
                                                                      ribcage-labels
                                                                      ribcage-marks
                                                                      ribcage-symnames
                                                                      ribcage?
                                                                      make-ribcage
                                                                      gen-labels
                                                                      gen-label
                                                                      make-rename
                                                                      rename-marks
                                                                      rename-new
                                                                      rename-old
                                                                      subst-rename?
                                                                      wrap-subst
                                                                      wrap-marks
                                                                      make-wrap
                                                                      id-sym-name&marks
                                                                      id-sym-name
                                                                      id?
                                                                      nonsymbol-id?
                                                                      global-extend
                                                                      lookup
                                                                      macros-only-env
                                                                      extend-var-env
                                                                      extend-env
                                                                      null-env
                                                                      binding-value
                                                                      binding-type
                                                                      make-binding
                                                                      arg-check
                                                                      source-annotation
                                                                      no-source
                                                                      set-syntax-object-module!
                                                                      set-syntax-object-wrap!
                                                                      set-syntax-object-expression!
                                                                      syntax-object-module
                                                                      syntax-object-wrap
                                                                      syntax-object-expression
                                                                      syntax-object?
                                                                      make-syntax-object
                                                                      build-lexical-var
                                                                      build-letrec
                                                                      build-named-let
                                                                      build-let
                                                                      build-sequence
                                                                      build-data
                                                                      build-primref
                                                                      build-lambda-case
                                                                      build-case-lambda
                                                                      build-simple-lambda
                                                                      build-global-definition
                                                                      build-global-assignment
                                                                      build-global-reference
                                                                      analyze-variable
                                                                      build-lexical-assignment
                                                                      build-lexical-reference
                                                                      build-dynlet
                                                                      build-conditional
                                                                      build-application
                                                                      build-void
                                                                      maybe-name-value!
                                                                      decorate-source
                                                                      get-global-definition-hook
                                                                      put-global-definition-hook
                                                                      gensym-hook
                                                                      local-eval-hook
                                                                      top-level-eval-hook
                                                                      fx<
                                                                      fx=
                                                                      fx-
                                                                      fx+
                                                                      set-lambda-meta!
                                                                      lambda-meta
                                                                      lambda?
                                                                      make-dynlet
                                                                      make-letrec
                                                                      make-let
                                                                      make-lambda-case
                                                                      make-lambda
                                                                      make-sequence
                                                                      make-application
                                                                      make-conditional
                                                                      make-toplevel-define
                                                                      make-toplevel-set
                                                                      make-toplevel-ref
                                                                      make-module-set
                                                                      make-module-ref
                                                                      make-lexical-set
                                                                      make-lexical-ref
                                                                      make-primitive-ref
                                                                      make-const
                                                                      make-void)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i467"
                                                                     "i465"
                                                                     "i463"
                                                                     "i461"
                                                                     "i459"
                                                                     "i457"
                                                                     "i455"
                                                                     "i453"
                                                                     "i451"
                                                                     "i449"
                                                                     "i447"
                                                                     "i445"
                                                                     "i443"
                                                                     "i441"
                                                                     "i439"
                                                                     "i437"
                                                                     "i435"
                                                                     "i433"
                                                                     "i431"
                                                                     "i429"
                                                                     "i427"
                                                                     "i425"
                                                                     "i423"
                                                                     "i421"
                                                                     "i419"
                                                                     "i417"
                                                                     "i415"
                                                                     "i413"
                                                                     "i411"
                                                                     "i409"
                                                                     "i407"
                                                                     "i405"
                                                                     "i403"
                                                                     "i401"
                                                                     "i399"
                                                                     "i398"
                                                                     "i396"
                                                                     "i393"
                                                                     "i392"
                                                                     "i391"
                                                                     "i389"
                                                                     "i388"
                                                                     "i386"
                                                                     "i384"
                                                                     "i382"
                                                                     "i380"
                                                                     "i378"
                                                                     "i376"
                                                                     "i374"
                                                                     "i372"
                                                                     "i369"
                                                                     "i367"
                                                                     "i366"
                                                                     "i364"
                                                                     "i362"
                                                                     "i360"
                                                                     "i358"
                                                                     "i357"
                                                                     "i356"
                                                                     "i355"
                                                                     "i353"
                                                                     "i352"
                                                                     "i349"
                                                                     "i347"
                                                                     "i345"
                                                                     "i343"
                                                                     "i341"
                                                                     "i339"
                                                                     "i337"
                                                                     "i336"
                                                                     "i335"
                                                                     "i333"
                                                                     "i331"
                                                                     "i330"
                                                                     "i327"
                                                                     "i326"
                                                                     "i324"
                                                                     "i322"
                                                                     "i320"
                                                                     "i318"
                                                                     "i316"
                                                                     "i314"
                                                                     "i312"
                                                                     "i310"
                                                                     "i308"
                                                                     "i305"
                                                                     "i303"
                                                                     "i301"
                                                                     "i299"
                                                                     "i297"
                                                                     "i295"
                                                                     "i293"
                                                                     "i291"
                                                                     "i289"
                                                                     "i287"
                                                                     "i285"
                                                                     "i283"
                                                                     "i281"
                                                                     "i279"
                                                                     "i277"
                                                                     "i275"
                                                                     "i273"
                                                                     "i271"
                                                                     "i269"
                                                                     "i267"
                                                                     "i265"
                                                                     "i263"
                                                                     "i261"
                                                                     "i260"
                                                                     "i257"
                                                                     "i255"
                                                                     "i254"
                                                                     "i253"
                                                                     "i252"
                                                                     "i251"
                                                                     "i249"
                                                                     "i247"
                                                                     "i245"
                                                                     "i242"
                                                                     "i240"
                                                                     "i238"
                                                                     "i236"
                                                                     "i234"
                                                                     "i232"
                                                                     "i230"
                                                                     "i228"
                                                                     "i226"
                                                                     "i224"
                                                                     "i222"
                                                                     "i220"
                                                                     "i218"
                                                                     "i216"
                                                                     "i214"
                                                                     "i212"
                                                                     "i210"
                                                                     "i208"))
                                                                  #(ribcage
                                                                    (define-structure
                                                                      define-expansion-accessors
                                                                      define-expansion-constructors)
                                                                    ((top)
                                                                     (top)
                                                                     (top))
                                                                    ("i46"
                                                                     "i45"
                                                                     "i44")))
                                                                 (hygiene
                                                                   guile)))
                                                            4)
                                                       #t
                                                       #f)
                                                   '...
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i2218"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i467"
                                                          "i465"
                                                          "i463"
                                                          "i461"
                                                          "i459"
                                                          "i457"
                                                          "i455"
                                                          "i453"
                                                          "i451"
                                                          "i449"
                                                          "i447"
                                                          "i445"
                                                          "i443"
                                                          "i441"
                                                          "i439"
                                                          "i437"
                                                          "i435"
                                                          "i433"
                                                          "i431"
                                                          "i429"
                                                          "i427"
                                                          "i425"
                                                          "i423"
                                                          "i421"
                                                          "i419"
                                                          "i417"
                                                          "i415"
                                                          "i413"
                                                          "i411"
                                                          "i409"
                                                          "i407"
                                                          "i405"
                                                          "i403"
                                                          "i401"
                                                          "i399"
                                                          "i398"
                                                          "i396"
                                                          "i393"
                                                          "i392"
                                                          "i391"
                                                          "i389"
                                                          "i388"
                                                          "i386"
                                                          "i384"
                                                          "i382"
                                                          "i380"
                                                          "i378"
                                                          "i376"
                                                          "i374"
                                                          "i372"
                                                          "i369"
                                                          "i367"
                                                          "i366"
                                                          "i364"
                                                          "i362"
                                                          "i360"
                                                          "i358"
                                                          "i357"
                                                          "i356"
                                                          "i355"
                                                          "i353"
                                                          "i352"
                                                          "i349"
                                                          "i347"
                                                          "i345"
                                                          "i343"
                                                          "i341"
                                                          "i339"
                                                          "i337"
                                                          "i336"
                                                          "i335"
                                                          "i333"
                                                          "i331"
                                                          "i330"
                                                          "i327"
                                                          "i326"
                                                          "i324"
                                                          "i322"
                                                          "i320"
                                                          "i318"
                                                          "i316"
                                                          "i314"
                                                          "i312"
                                                          "i310"
                                                          "i308"
                                                          "i305"
                                                          "i303"
                                                          "i301"
                                                          "i299"
                                                          "i297"
                                                          "i295"
                                                          "i293"
                                                          "i291"
                                                          "i289"
                                                          "i287"
                                                          "i285"
                                                          "i283"
                                                          "i281"
                                                          "i279"
                                                          "i277"
                                                          "i275"
                                                          "i273"
                                                          "i271"
                                                          "i269"
                                                          "i267"
                                                          "i265"
                                                          "i263"
                                                          "i261"
                                                          "i260"
                                                          "i257"
                                                          "i255"
                                                          "i254"
                                                          "i253"
                                                          "i252"
                                                          "i251"
                                                          "i249"
                                                          "i247"
                                                          "i245"
                                                          "i242"
                                                          "i240"
                                                          "i238"
                                                          "i236"
                                                          "i234"
                                                          "i232"
                                                          "i230"
                                                          "i228"
                                                          "i226"
                                                          "i224"
                                                          "i222"
                                                          "i220"
                                                          "i218"
                                                          "i216"
                                                          "i214"
                                                          "i212"
                                                          "i210"
                                                          "i208"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("i46" "i45" "i44")))
                                                      (hygiene guile))))
                                          (eq? (#{id-var-name 4320}#
                                                 #{dots 14210}#
                                                 '(()))
                                               (#{id-var-name 4320}#
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i2218"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i401"
                                                        "i399"
                                                        "i398"
                                                        "i396"
                                                        "i393"
                                                        "i392"
                                                        "i391"
                                                        "i389"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i374"
                                                        "i372"
                                                        "i369"
                                                        "i367"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i360"
                                                        "i358"
                                                        "i357"
                                                        "i356"
                                                        "i355"
                                                        "i353"
                                                        "i352"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i339"
                                                        "i337"
                                                        "i336"
                                                        "i335"
                                                        "i333"
                                                        "i331"
                                                        "i330"
                                                        "i327"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i310"
                                                        "i308"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i261"
                                                        "i260"
                                                        "i257"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i252"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i245"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44")))
                                                    (hygiene guile))
                                                 '(())))
                                          #f)
                                        #f))
                                    #{tmp 14205}#)
                                  #f)
                              (@apply
                                (lambda (#{x 14311}#
                                         #{dots 14312}#
                                         #{ys 14313}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt* 13767}#
                                        #{ys 14313}#
                                        #{n 13773}#
                                        #{ids 13774}#))
                                    (lambda (#{ys 14316}# #{ids 14317}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 13769}#
                                            #{x 14311}#
                                            (#{1+}# #{n 13773}#)
                                            #{ids 14317}#))
                                        (lambda (#{x 14318}# #{ids 14319}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{v-reverse 13768}#
                                                #{ys 14316}#))
                                            (lambda (#{ys 14352}# #{e 14353}#)
                                              (values
                                                (vector
                                                  'each+
                                                  #{x 14318}#
                                                  #{ys 14352}#
                                                  #{e 14353}#)
                                                #{ids 14319}#))))))))
                                #{tmp 14205}#)
                              (let ((#{tmp 14354}#
                                      ($sc-dispatch #{p 13772}# '(any . any))))
                                (if #{tmp 14354}#
                                  (@apply
                                    (lambda (#{x 14358}# #{y 14359}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 13769}#
                                            #{y 14359}#
                                            #{n 13773}#
                                            #{ids 13774}#))
                                        (lambda (#{y 14360}# #{ids 14361}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 13769}#
                                                #{x 14358}#
                                                #{n 13773}#
                                                #{ids 14361}#))
                                            (lambda (#{x 14362}# #{ids 14363}#)
                                              (values
                                                (cons #{x 14362}# #{y 14360}#)
                                                #{ids 14363}#))))))
                                    #{tmp 14354}#)
                                  (let ((#{tmp 14364}#
                                          ($sc-dispatch #{p 13772}# '())))
                                    (if #{tmp 14364}#
                                      (@apply
                                        (lambda () (values '() #{ids 13774}#))
                                        #{tmp 14364}#)
                                      (let ((#{tmp 14368}#
                                              ($sc-dispatch
                                                #{p 13772}#
                                                '#(vector each-any))))
                                        (if #{tmp 14368}#
                                          (@apply
                                            (lambda (#{x 14372}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt 13769}#
                                                    #{x 14372}#
                                                    #{n 13773}#
                                                    #{ids 13774}#))
                                                (lambda (#{p 14373}#
                                                         #{ids 14374}#)
                                                  (values
                                                    (vector
                                                      'vector
                                                      #{p 14373}#)
                                                    #{ids 14374}#))))
                                            #{tmp 14368}#)
                                          (values
                                            (vector
                                              'atom
                                              (#{strip 4346}#
                                                #{p 13772}#
                                                '(())))
                                            #{ids 13774}#)))))))))))))))
               (#{cvt 13769}# #{pattern 13765}# 0 '()))))
         (#{build-dispatch-call 12143}#
           (lambda (#{pvars 14484}#
                    #{exp 14485}#
                    #{y 14486}#
                    #{r 14487}#
                    #{mod 14488}#)
             (let ((#{ids 14489}# (map car #{pvars 14484}#)))
               (begin
                 (map cdr #{pvars 14484}#)
                 (let ((#{labels 14491}#
                         (#{gen-labels 4304}# #{ids 14489}#))
                       (#{new-vars 14492}#
                         (map #{gen-var 4347}# #{ids 14489}#)))
                   (#{build-application 4268}#
                     #f
                     (if (equal? (module-name (current-module)) '(guile))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 7)
                         #f
                         'apply)
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 5)
                         #f
                         '(guile)
                         'apply
                         #f))
                     (list (#{build-simple-lambda 4277}#
                             #f
                             (map syntax->datum #{ids 14489}#)
                             #f
                             #{new-vars 14492}#
                             '()
                             (#{expand 4333}#
                               #{exp 14485}#
                               (#{extend-env 4295}#
                                 #{labels 14491}#
                                 (map (lambda (#{var 14817}# #{level 14818}#)
                                        (cons 'syntax
                                              (cons #{var 14817}#
                                                    #{level 14818}#)))
                                      #{new-vars 14492}#
                                      (map cdr #{pvars 14484}#))
                                 #{r 14487}#)
                               (#{make-binding-wrap 4315}#
                                 #{ids 14489}#
                                 #{labels 14491}#
                                 '(()))
                               #{mod 14488}#))
                           #{y 14486}#)))))))
         (#{gen-clause 12144}#
           (lambda (#{x 13126}#
                    #{keys 13127}#
                    #{clauses 13128}#
                    #{r 13129}#
                    #{pat 13130}#
                    #{fender 13131}#
                    #{exp 13132}#
                    #{mod 13133}#)
             (call-with-values
               (lambda ()
                 (#{convert-pattern 12142}#
                   #{pat 13130}#
                   #{keys 13127}#))
               (lambda (#{p 13288}# #{pvars 13289}#)
                 (if (not (#{distinct-bound-ids? 4324}#
                            (map car #{pvars 13289}#)))
                   (syntax-violation
                     'syntax-case
                     "duplicate pattern variable"
                     #{pat 13130}#)
                   (if (not (and-map
                              (lambda (#{x 13409}#)
                                (not (let ((#{x 13413}# (car #{x 13409}#)))
                                       (if (if (if (vector? #{x 13413}#)
                                                 (if (= (vector-length
                                                          #{x 13413}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 13413}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (symbol?
                                               (vector-ref #{x 13413}# 1))
                                             #f)
                                         (if (eq? (if (if (vector? #{x 13413}#)
                                                        (if (= (vector-length
                                                                 #{x 13413}#)
                                                               4)
                                                          (eq? (vector-ref
                                                                 #{x 13413}#
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref #{x 13413}# 1)
                                                    #{x 13413}#)
                                                  (if (if (= (vector-length
                                                               '#(syntax-object
                                                                  ...
                                                                  ((top)
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(x)
                                                                     #((top))
                                                                     #("i2218"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       expand-lambda-case
                                                                       lambda*-formals
                                                                       expand-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       expand-void
                                                                       eval-local-transformer
                                                                       expand-local-syntax
                                                                       expand-body
                                                                       expand-macro
                                                                       expand-application
                                                                       expand-expr
                                                                       expand
                                                                       syntax-type
                                                                       parse-when-list
                                                                       expand-install-global
                                                                       expand-top-sequence
                                                                       expand-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-application
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-sequence
                                                                       make-application
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i401"
                                                                      "i399"
                                                                      "i398"
                                                                      "i396"
                                                                      "i393"
                                                                      "i392"
                                                                      "i391"
                                                                      "i389"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i374"
                                                                      "i372"
                                                                      "i369"
                                                                      "i367"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i360"
                                                                      "i358"
                                                                      "i357"
                                                                      "i356"
                                                                      "i355"
                                                                      "i353"
                                                                      "i352"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i339"
                                                                      "i337"
                                                                      "i336"
                                                                      "i335"
                                                                      "i333"
                                                                      "i331"
                                                                      "i330"
                                                                      "i327"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i310"
                                                                      "i308"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i261"
                                                                      "i260"
                                                                      "i257"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i252"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i245"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44")))
                                                                  (hygiene
                                                                    guile)))
                                                             4)
                                                        #t
                                                        #f)
                                                    '...
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i2218"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i467"
                                                           "i465"
                                                           "i463"
                                                           "i461"
                                                           "i459"
                                                           "i457"
                                                           "i455"
                                                           "i453"
                                                           "i451"
                                                           "i449"
                                                           "i447"
                                                           "i445"
                                                           "i443"
                                                           "i441"
                                                           "i439"
                                                           "i437"
                                                           "i435"
                                                           "i433"
                                                           "i431"
                                                           "i429"
                                                           "i427"
                                                           "i425"
                                                           "i423"
                                                           "i421"
                                                           "i419"
                                                           "i417"
                                                           "i415"
                                                           "i413"
                                                           "i411"
                                                           "i409"
                                                           "i407"
                                                           "i405"
                                                           "i403"
                                                           "i401"
                                                           "i399"
                                                           "i398"
                                                           "i396"
                                                           "i393"
                                                           "i392"
                                                           "i391"
                                                           "i389"
                                                           "i388"
                                                           "i386"
                                                           "i384"
                                                           "i382"
                                                           "i380"
                                                           "i378"
                                                           "i376"
                                                           "i374"
                                                           "i372"
                                                           "i369"
                                                           "i367"
                                                           "i366"
                                                           "i364"
                                                           "i362"
                                                           "i360"
                                                           "i358"
                                                           "i357"
                                                           "i356"
                                                           "i355"
                                                           "i353"
                                                           "i352"
                                                           "i349"
                                                           "i347"
                                                           "i345"
                                                           "i343"
                                                           "i341"
                                                           "i339"
                                                           "i337"
                                                           "i336"
                                                           "i335"
                                                           "i333"
                                                           "i331"
                                                           "i330"
                                                           "i327"
                                                           "i326"
                                                           "i324"
                                                           "i322"
                                                           "i320"
                                                           "i318"
                                                           "i316"
                                                           "i314"
                                                           "i312"
                                                           "i310"
                                                           "i308"
                                                           "i305"
                                                           "i303"
                                                           "i301"
                                                           "i299"
                                                           "i297"
                                                           "i295"
                                                           "i293"
                                                           "i291"
                                                           "i289"
                                                           "i287"
                                                           "i285"
                                                           "i283"
                                                           "i281"
                                                           "i279"
                                                           "i277"
                                                           "i275"
                                                           "i273"
                                                           "i271"
                                                           "i269"
                                                           "i267"
                                                           "i265"
                                                           "i263"
                                                           "i261"
                                                           "i260"
                                                           "i257"
                                                           "i255"
                                                           "i254"
                                                           "i253"
                                                           "i252"
                                                           "i251"
                                                           "i249"
                                                           "i247"
                                                           "i245"
                                                           "i242"
                                                           "i240"
                                                           "i238"
                                                           "i236"
                                                           "i234"
                                                           "i232"
                                                           "i230"
                                                           "i228"
                                                           "i226"
                                                           "i224"
                                                           "i222"
                                                           "i220"
                                                           "i218"
                                                           "i216"
                                                           "i214"
                                                           "i212"
                                                           "i210"
                                                           "i208"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("i46" "i45" "i44")))
                                                       (hygiene guile))))
                                           (eq? (#{id-var-name 4320}#
                                                  #{x 13413}#
                                                  '(()))
                                                (#{id-var-name 4320}#
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i2218"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i467"
                                                         "i465"
                                                         "i463"
                                                         "i461"
                                                         "i459"
                                                         "i457"
                                                         "i455"
                                                         "i453"
                                                         "i451"
                                                         "i449"
                                                         "i447"
                                                         "i445"
                                                         "i443"
                                                         "i441"
                                                         "i439"
                                                         "i437"
                                                         "i435"
                                                         "i433"
                                                         "i431"
                                                         "i429"
                                                         "i427"
                                                         "i425"
                                                         "i423"
                                                         "i421"
                                                         "i419"
                                                         "i417"
                                                         "i415"
                                                         "i413"
                                                         "i411"
                                                         "i409"
                                                         "i407"
                                                         "i405"
                                                         "i403"
                                                         "i401"
                                                         "i399"
                                                         "i398"
                                                         "i396"
                                                         "i393"
                                                         "i392"
                                                         "i391"
                                                         "i389"
                                                         "i388"
                                                         "i386"
                                                         "i384"
                                                         "i382"
                                                         "i380"
                                                         "i378"
                                                         "i376"
                                                         "i374"
                                                         "i372"
                                                         "i369"
                                                         "i367"
                                                         "i366"
                                                         "i364"
                                                         "i362"
                                                         "i360"
                                                         "i358"
                                                         "i357"
                                                         "i356"
                                                         "i355"
                                                         "i353"
                                                         "i352"
                                                         "i349"
                                                         "i347"
                                                         "i345"
                                                         "i343"
                                                         "i341"
                                                         "i339"
                                                         "i337"
                                                         "i336"
                                                         "i335"
                                                         "i333"
                                                         "i331"
                                                         "i330"
                                                         "i327"
                                                         "i326"
                                                         "i324"
                                                         "i322"
                                                         "i320"
                                                         "i318"
                                                         "i316"
                                                         "i314"
                                                         "i312"
                                                         "i310"
                                                         "i308"
                                                         "i305"
                                                         "i303"
                                                         "i301"
                                                         "i299"
                                                         "i297"
                                                         "i295"
                                                         "i293"
                                                         "i291"
                                                         "i289"
                                                         "i287"
                                                         "i285"
                                                         "i283"
                                                         "i281"
                                                         "i279"
                                                         "i277"
                                                         "i275"
                                                         "i273"
                                                         "i271"
                                                         "i269"
                                                         "i267"
                                                         "i265"
                                                         "i263"
                                                         "i261"
                                                         "i260"
                                                         "i257"
                                                         "i255"
                                                         "i254"
                                                         "i253"
                                                         "i252"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i242"
                                                         "i240"
                                                         "i238"
                                                         "i236"
                                                         "i234"
                                                         "i232"
                                                         "i230"
                                                         "i228"
                                                         "i226"
                                                         "i224"
                                                         "i222"
                                                         "i220"
                                                         "i218"
                                                         "i216"
                                                         "i214"
                                                         "i212"
                                                         "i210"
                                                         "i208"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("i46" "i45" "i44")))
                                                     (hygiene guile))
                                                  '(())))
                                           #f)
                                         #f))))
                              #{pvars 13289}#))
                     (syntax-violation
                       'syntax-case
                       "misplaced ellipsis"
                       #{pat 13130}#)
                     (let ((#{y 13489}#
                             (gensym
                               (string-append (symbol->string 'tmp) " "))))
                       (#{build-application 4268}#
                         #f
                         (let ((#{req 13639}# (list 'tmp))
                               (#{vars 13641}# (list #{y 13489}#))
                               (#{exp 13643}#
                                 (let ((#{y 13660}#
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 3)
                                           #f
                                           'tmp
                                           #{y 13489}#)))
                                   (let ((#{test-exp 13664}#
                                           (let ((#{tmp 13673}#
                                                   ($sc-dispatch
                                                     #{fender 13131}#
                                                     '#(atom #t))))
                                             (if #{tmp 13673}#
                                               (@apply
                                                 (lambda () #{y 13660}#)
                                                 #{tmp 13673}#)
                                               (let ((#{then-exp 13691}#
                                                       (#{build-dispatch-call 12143}#
                                                         #{pvars 13289}#
                                                         #{fender 13131}#
                                                         #{y 13660}#
                                                         #{r 13129}#
                                                         #{mod 13133}#))
                                                     (#{else-exp 13692}#
                                                       (make-struct/no-tail
                                                         (vector-ref
                                                           %expanded-vtables
                                                           1)
                                                         #f
                                                         #f)))
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     10)
                                                   #f
                                                   #{y 13660}#
                                                   #{then-exp 13691}#
                                                   #{else-exp 13692}#)))))
                                         (#{then-exp 13665}#
                                           (#{build-dispatch-call 12143}#
                                             #{pvars 13289}#
                                             #{exp 13132}#
                                             #{y 13660}#
                                             #{r 13129}#
                                             #{mod 13133}#))
                                         (#{else-exp 13666}#
                                           (#{gen-syntax-case 12145}#
                                             #{x 13126}#
                                             #{keys 13127}#
                                             #{clauses 13128}#
                                             #{r 13129}#
                                             #{mod 13133}#)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 10)
                                       #f
                                       #{test-exp 13664}#
                                       #{then-exp 13665}#
                                       #{else-exp 13666}#)))))
                           (let ((#{body 13648}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     #{req 13639}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 13641}#
                                     #{exp 13643}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 13)
                               #f
                               '()
                               #{body 13648}#)))
                         (list (if (eq? #{p 13288}# 'any)
                                 (let ((#{fun-exp 13714}#
                                         (if (equal?
                                               (module-name (current-module))
                                               '(guile))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 7)
                                             #f
                                             'list)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 5)
                                             #f
                                             '(guile)
                                             'list
                                             #f)))
                                       (#{arg-exps 13715}# (list #{x 13126}#)))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 11)
                                     #f
                                     #{fun-exp 13714}#
                                     #{arg-exps 13715}#))
                                 (let ((#{fun-exp 13738}#
                                         (if (equal?
                                               (module-name (current-module))
                                               '(guile))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 7)
                                             #f
                                             '$sc-dispatch)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 5)
                                             #f
                                             '(guile)
                                             '$sc-dispatch
                                             #f)))
                                       (#{arg-exps 13739}#
                                         (list #{x 13126}#
                                               (make-struct/no-tail
                                                 (vector-ref
                                                   %expanded-vtables
                                                   1)
                                                 #f
                                                 #{p 13288}#))))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 11)
                                     #f
                                     #{fun-exp 13738}#
                                     #{arg-exps 13739}#))))))))))))
         (#{gen-syntax-case 12145}#
           (lambda (#{x 12554}#
                    #{keys 12555}#
                    #{clauses 12556}#
                    #{r 12557}#
                    #{mod 12558}#)
             (if (null? #{clauses 12556}#)
               (let ((#{fun-exp 12563}#
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'syntax-violation)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'syntax-violation
                           #f)))
                     (#{arg-exps 12564}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #f)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               "source expression failed to match any pattern")
                             #{x 12554}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 11)
                   #f
                   #{fun-exp 12563}#
                   #{arg-exps 12564}#))
               (let ((#{tmp 12597}# (car #{clauses 12556}#)))
                 (let ((#{tmp 12598}#
                         ($sc-dispatch #{tmp 12597}# '(any any))))
                   (if #{tmp 12598}#
                     (@apply
                       (lambda (#{pat 12600}# #{exp 12601}#)
                         (if (if (if (symbol? #{pat 12600}#)
                                   #t
                                   (if (if (vector? #{pat 12600}#)
                                         (if (= (vector-length #{pat 12600}#)
                                                4)
                                           (eq? (vector-ref #{pat 12600}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (symbol? (vector-ref #{pat 12600}# 1))
                                     #f))
                               (and-map
                                 (lambda (#{x 12628}#)
                                   (not (if (eq? (if (if (vector?
                                                           #{pat 12600}#)
                                                       (if (= (vector-length
                                                                #{pat 12600}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{pat 12600}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref #{pat 12600}# 1)
                                                   #{pat 12600}#)
                                                 (if (if (vector? #{x 12628}#)
                                                       (if (= (vector-length
                                                                #{x 12628}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{x 12628}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref #{x 12628}# 1)
                                                   #{x 12628}#))
                                          (eq? (#{id-var-name 4320}#
                                                 #{pat 12600}#
                                                 '(()))
                                               (#{id-var-name 4320}#
                                                 #{x 12628}#
                                                 '(())))
                                          #f)))
                                 (cons '#(syntax-object
                                          ...
                                          ((top)
                                           #(ribcage
                                             #(pat exp)
                                             #((top) (top))
                                             #("i3899" "i3900"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x keys clauses r mod)
                                             #((top) (top) (top) (top) (top))
                                             #("i3888"
                                               "i3889"
                                               "i3890"
                                               "i3891"
                                               "i3892"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3698" "i3696" "i3694" "i3692"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i399"
                                              "i398"
                                              "i396"
                                              "i393"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i372"
                                              "i369"
                                              "i367"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i358"
                                              "i357"
                                              "i356"
                                              "i355"
                                              "i353"
                                              "i352"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i339"
                                              "i337"
                                              "i336"
                                              "i335"
                                              "i333"
                                              "i331"
                                              "i330"
                                              "i327"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i310"
                                              "i308"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i261"
                                              "i260"
                                              "i257"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i245"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))
                                       #{keys 12555}#))
                               #f)
                           (if (if (eq? (if (if (= (vector-length
                                                     '#(syntax-object
                                                        pad
                                                        ((top)
                                                         #(ribcage
                                                           #(pat exp)
                                                           #((top) (top))
                                                           #("i3899" "i3900"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x
                                                             keys
                                                             clauses
                                                             r
                                                             mod)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i3888"
                                                             "i3889"
                                                             "i3890"
                                                             "i3891"
                                                             "i3892"))
                                                         #(ribcage
                                                           (gen-syntax-case
                                                             gen-clause
                                                             build-dispatch-call
                                                             convert-pattern)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i3698"
                                                            "i3696"
                                                            "i3694"
                                                            "i3692"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i467"
                                                            "i465"
                                                            "i463"
                                                            "i461"
                                                            "i459"
                                                            "i457"
                                                            "i455"
                                                            "i453"
                                                            "i451"
                                                            "i449"
                                                            "i447"
                                                            "i445"
                                                            "i443"
                                                            "i441"
                                                            "i439"
                                                            "i437"
                                                            "i435"
                                                            "i433"
                                                            "i431"
                                                            "i429"
                                                            "i427"
                                                            "i425"
                                                            "i423"
                                                            "i421"
                                                            "i419"
                                                            "i417"
                                                            "i415"
                                                            "i413"
                                                            "i411"
                                                            "i409"
                                                            "i407"
                                                            "i405"
                                                            "i403"
                                                            "i401"
                                                            "i399"
                                                            "i398"
                                                            "i396"
                                                            "i393"
                                                            "i392"
                                                            "i391"
                                                            "i389"
                                                            "i388"
                                                            "i386"
                                                            "i384"
                                                            "i382"
                                                            "i380"
                                                            "i378"
                                                            "i376"
                                                            "i374"
                                                            "i372"
                                                            "i369"
                                                            "i367"
                                                            "i366"
                                                            "i364"
                                                            "i362"
                                                            "i360"
                                                            "i358"
                                                            "i357"
                                                            "i356"
                                                            "i355"
                                                            "i353"
                                                            "i352"
                                                            "i349"
                                                            "i347"
                                                            "i345"
                                                            "i343"
                                                            "i341"
                                                            "i339"
                                                            "i337"
                                                            "i336"
                                                            "i335"
                                                            "i333"
                                                            "i331"
                                                            "i330"
                                                            "i327"
                                                            "i326"
                                                            "i324"
                                                            "i322"
                                                            "i320"
                                                            "i318"
                                                            "i316"
                                                            "i314"
                                                            "i312"
                                                            "i310"
                                                            "i308"
                                                            "i305"
                                                            "i303"
                                                            "i301"
                                                            "i299"
                                                            "i297"
                                                            "i295"
                                                            "i293"
                                                            "i291"
                                                            "i289"
                                                            "i287"
                                                            "i285"
                                                            "i283"
                                                            "i281"
                                                            "i279"
                                                            "i277"
                                                            "i275"
                                                            "i273"
                                                            "i271"
                                                            "i269"
                                                            "i267"
                                                            "i265"
                                                            "i263"
                                                            "i261"
                                                            "i260"
                                                            "i257"
                                                            "i255"
                                                            "i254"
                                                            "i253"
                                                            "i252"
                                                            "i251"
                                                            "i249"
                                                            "i247"
                                                            "i245"
                                                            "i242"
                                                            "i240"
                                                            "i238"
                                                            "i236"
                                                            "i234"
                                                            "i232"
                                                            "i230"
                                                            "i228"
                                                            "i226"
                                                            "i224"
                                                            "i222"
                                                            "i220"
                                                            "i218"
                                                            "i216"
                                                            "i214"
                                                            "i212"
                                                            "i210"
                                                            "i208"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("i46"
                                                            "i45"
                                                            "i44")))
                                                        (hygiene guile)))
                                                   4)
                                              #t
                                              #f)
                                          'pad
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("i3899" "i3900"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3888"
                                                  "i3889"
                                                  "i3890"
                                                  "i3891"
                                                  "i3892"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("i3698"
                                                 "i3696"
                                                 "i3694"
                                                 "i3692"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i398"
                                                 "i396"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i356"
                                                 "i355"
                                                 "i353"
                                                 "i352"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i336"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i330"
                                                 "i327"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i260"
                                                 "i257"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile)))
                                        (if (if (= (vector-length
                                                     '#(syntax-object
                                                        _
                                                        ((top)
                                                         #(ribcage
                                                           #(pat exp)
                                                           #((top) (top))
                                                           #("i3899" "i3900"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x
                                                             keys
                                                             clauses
                                                             r
                                                             mod)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i3888"
                                                             "i3889"
                                                             "i3890"
                                                             "i3891"
                                                             "i3892"))
                                                         #(ribcage
                                                           (gen-syntax-case
                                                             gen-clause
                                                             build-dispatch-call
                                                             convert-pattern)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i3698"
                                                            "i3696"
                                                            "i3694"
                                                            "i3692"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i467"
                                                            "i465"
                                                            "i463"
                                                            "i461"
                                                            "i459"
                                                            "i457"
                                                            "i455"
                                                            "i453"
                                                            "i451"
                                                            "i449"
                                                            "i447"
                                                            "i445"
                                                            "i443"
                                                            "i441"
                                                            "i439"
                                                            "i437"
                                                            "i435"
                                                            "i433"
                                                            "i431"
                                                            "i429"
                                                            "i427"
                                                            "i425"
                                                            "i423"
                                                            "i421"
                                                            "i419"
                                                            "i417"
                                                            "i415"
                                                            "i413"
                                                            "i411"
                                                            "i409"
                                                            "i407"
                                                            "i405"
                                                            "i403"
                                                            "i401"
                                                            "i399"
                                                            "i398"
                                                            "i396"
                                                            "i393"
                                                            "i392"
                                                            "i391"
                                                            "i389"
                                                            "i388"
                                                            "i386"
                                                            "i384"
                                                            "i382"
                                                            "i380"
                                                            "i378"
                                                            "i376"
                                                            "i374"
                                                            "i372"
                                                            "i369"
                                                            "i367"
                                                            "i366"
                                                            "i364"
                                                            "i362"
                                                            "i360"
                                                            "i358"
                                                            "i357"
                                                            "i356"
                                                            "i355"
                                                            "i353"
                                                            "i352"
                                                            "i349"
                                                            "i347"
                                                            "i345"
                                                            "i343"
                                                            "i341"
                                                            "i339"
                                                            "i337"
                                                            "i336"
                                                            "i335"
                                                            "i333"
                                                            "i331"
                                                            "i330"
                                                            "i327"
                                                            "i326"
                                                            "i324"
                                                            "i322"
                                                            "i320"
                                                            "i318"
                                                            "i316"
                                                            "i314"
                                                            "i312"
                                                            "i310"
                                                            "i308"
                                                            "i305"
                                                            "i303"
                                                            "i301"
                                                            "i299"
                                                            "i297"
                                                            "i295"
                                                            "i293"
                                                            "i291"
                                                            "i289"
                                                            "i287"
                                                            "i285"
                                                            "i283"
                                                            "i281"
                                                            "i279"
                                                            "i277"
                                                            "i275"
                                                            "i273"
                                                            "i271"
                                                            "i269"
                                                            "i267"
                                                            "i265"
                                                            "i263"
                                                            "i261"
                                                            "i260"
                                                            "i257"
                                                            "i255"
                                                            "i254"
                                                            "i253"
                                                            "i252"
                                                            "i251"
                                                            "i249"
                                                            "i247"
                                                            "i245"
                                                            "i242"
                                                            "i240"
                                                            "i238"
                                                            "i236"
                                                            "i234"
                                                            "i232"
                                                            "i230"
                                                            "i228"
                                                            "i226"
                                                            "i224"
                                                            "i222"
                                                            "i220"
                                                            "i218"
                                                            "i216"
                                                            "i214"
                                                            "i212"
                                                            "i210"
                                                            "i208"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("i46"
                                                            "i45"
                                                            "i44")))
                                                        (hygiene guile)))
                                                   4)
                                              #t
                                              #f)
                                          '_
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("i3899" "i3900"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3888"
                                                  "i3889"
                                                  "i3890"
                                                  "i3891"
                                                  "i3892"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("i3698"
                                                 "i3696"
                                                 "i3694"
                                                 "i3692"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i398"
                                                 "i396"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i356"
                                                 "i355"
                                                 "i353"
                                                 "i352"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i336"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i330"
                                                 "i327"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i260"
                                                 "i257"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile))))
                                 (eq? (#{id-var-name 4320}#
                                        '#(syntax-object
                                           pad
                                           ((top)
                                            #(ribcage
                                              #(pat exp)
                                              #((top) (top))
                                              #("i3899" "i3900"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x keys clauses r mod)
                                              #((top) (top) (top) (top) (top))
                                              #("i3888"
                                                "i3889"
                                                "i3890"
                                                "i3891"
                                                "i3892"))
                                            #(ribcage
                                              (gen-syntax-case
                                                gen-clause
                                                build-dispatch-call
                                                convert-pattern)
                                              ((top) (top) (top) (top))
                                              ("i3698"
                                               "i3696"
                                               "i3694"
                                               "i3692"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                expand-lambda-case
                                                lambda*-formals
                                                expand-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                expand-void
                                                eval-local-transformer
                                                expand-local-syntax
                                                expand-body
                                                expand-macro
                                                expand-application
                                                expand-expr
                                                expand
                                                syntax-type
                                                parse-when-list
                                                expand-install-global
                                                expand-top-sequence
                                                expand-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i467"
                                               "i465"
                                               "i463"
                                               "i461"
                                               "i459"
                                               "i457"
                                               "i455"
                                               "i453"
                                               "i451"
                                               "i449"
                                               "i447"
                                               "i445"
                                               "i443"
                                               "i441"
                                               "i439"
                                               "i437"
                                               "i435"
                                               "i433"
                                               "i431"
                                               "i429"
                                               "i427"
                                               "i425"
                                               "i423"
                                               "i421"
                                               "i419"
                                               "i417"
                                               "i415"
                                               "i413"
                                               "i411"
                                               "i409"
                                               "i407"
                                               "i405"
                                               "i403"
                                               "i401"
                                               "i399"
                                               "i398"
                                               "i396"
                                               "i393"
                                               "i392"
                                               "i391"
                                               "i389"
                                               "i388"
                                               "i386"
                                               "i384"
                                               "i382"
                                               "i380"
                                               "i378"
                                               "i376"
                                               "i374"
                                               "i372"
                                               "i369"
                                               "i367"
                                               "i366"
                                               "i364"
                                               "i362"
                                               "i360"
                                               "i358"
                                               "i357"
                                               "i356"
                                               "i355"
                                               "i353"
                                               "i352"
                                               "i349"
                                               "i347"
                                               "i345"
                                               "i343"
                                               "i341"
                                               "i339"
                                               "i337"
                                               "i336"
                                               "i335"
                                               "i333"
                                               "i331"
                                               "i330"
                                               "i327"
                                               "i326"
                                               "i324"
                                               "i322"
                                               "i320"
                                               "i318"
                                               "i316"
                                               "i314"
                                               "i312"
                                               "i310"
                                               "i308"
                                               "i305"
                                               "i303"
                                               "i301"
                                               "i299"
                                               "i297"
                                               "i295"
                                               "i293"
                                               "i291"
                                               "i289"
                                               "i287"
                                               "i285"
                                               "i283"
                                               "i281"
                                               "i279"
                                               "i277"
                                               "i275"
                                               "i273"
                                               "i271"
                                               "i269"
                                               "i267"
                                               "i265"
                                               "i263"
                                               "i261"
                                               "i260"
                                               "i257"
                                               "i255"
                                               "i254"
                                               "i253"
                                               "i252"
                                               "i251"
                                               "i249"
                                               "i247"
                                               "i245"
                                               "i242"
                                               "i240"
                                               "i238"
                                               "i236"
                                               "i234"
                                               "i232"
                                               "i230"
                                               "i228"
                                               "i226"
                                               "i224"
                                               "i222"
                                               "i220"
                                               "i218"
                                               "i216"
                                               "i214"
                                               "i212"
                                               "i210"
                                               "i208"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("i46" "i45" "i44")))
                                           (hygiene guile))
                                        '(()))
                                      (#{id-var-name 4320}#
                                        '#(syntax-object
                                           _
                                           ((top)
                                            #(ribcage
                                              #(pat exp)
                                              #((top) (top))
                                              #("i3899" "i3900"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x keys clauses r mod)
                                              #((top) (top) (top) (top) (top))
                                              #("i3888"
                                                "i3889"
                                                "i3890"
                                                "i3891"
                                                "i3892"))
                                            #(ribcage
                                              (gen-syntax-case
                                                gen-clause
                                                build-dispatch-call
                                                convert-pattern)
                                              ((top) (top) (top) (top))
                                              ("i3698"
                                               "i3696"
                                               "i3694"
                                               "i3692"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                expand-lambda-case
                                                lambda*-formals
                                                expand-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                expand-void
                                                eval-local-transformer
                                                expand-local-syntax
                                                expand-body
                                                expand-macro
                                                expand-application
                                                expand-expr
                                                expand
                                                syntax-type
                                                parse-when-list
                                                expand-install-global
                                                expand-top-sequence
                                                expand-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i467"
                                               "i465"
                                               "i463"
                                               "i461"
                                               "i459"
                                               "i457"
                                               "i455"
                                               "i453"
                                               "i451"
                                               "i449"
                                               "i447"
                                               "i445"
                                               "i443"
                                               "i441"
                                               "i439"
                                               "i437"
                                               "i435"
                                               "i433"
                                               "i431"
                                               "i429"
                                               "i427"
                                               "i425"
                                               "i423"
                                               "i421"
                                               "i419"
                                               "i417"
                                               "i415"
                                               "i413"
                                               "i411"
                                               "i409"
                                               "i407"
                                               "i405"
                                               "i403"
                                               "i401"
                                               "i399"
                                               "i398"
                                               "i396"
                                               "i393"
                                               "i392"
                                               "i391"
                                               "i389"
                                               "i388"
                                               "i386"
                                               "i384"
                                               "i382"
                                               "i380"
                                               "i378"
                                               "i376"
                                               "i374"
                                               "i372"
                                               "i369"
                                               "i367"
                                               "i366"
                                               "i364"
                                               "i362"
                                               "i360"
                                               "i358"
                                               "i357"
                                               "i356"
                                               "i355"
                                               "i353"
                                               "i352"
                                               "i349"
                                               "i347"
                                               "i345"
                                               "i343"
                                               "i341"
                                               "i339"
                                               "i337"
                                               "i336"
                                               "i335"
                                               "i333"
                                               "i331"
                                               "i330"
                                               "i327"
                                               "i326"
                                               "i324"
                                               "i322"
                                               "i320"
                                               "i318"
                                               "i316"
                                               "i314"
                                               "i312"
                                               "i310"
                                               "i308"
                                               "i305"
                                               "i303"
                                               "i301"
                                               "i299"
                                               "i297"
                                               "i295"
                                               "i293"
                                               "i291"
                                               "i289"
                                               "i287"
                                               "i285"
                                               "i283"
                                               "i281"
                                               "i279"
                                               "i277"
                                               "i275"
                                               "i273"
                                               "i271"
                                               "i269"
                                               "i267"
                                               "i265"
                                               "i263"
                                               "i261"
                                               "i260"
                                               "i257"
                                               "i255"
                                               "i254"
                                               "i253"
                                               "i252"
                                               "i251"
                                               "i249"
                                               "i247"
                                               "i245"
                                               "i242"
                                               "i240"
                                               "i238"
                                               "i236"
                                               "i234"
                                               "i232"
                                               "i230"
                                               "i228"
                                               "i226"
                                               "i224"
                                               "i222"
                                               "i220"
                                               "i218"
                                               "i216"
                                               "i214"
                                               "i212"
                                               "i210"
                                               "i208"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("i46" "i45" "i44")))
                                           (hygiene guile))
                                        '(())))
                                 #f)
                             (#{expand 4333}#
                               #{exp 12601}#
                               #{r 12557}#
                               '(())
                               #{mod 12558}#)
                             (let ((#{labels 12809}#
                                     (list (symbol->string (gensym "i"))))
                                   (#{var 12810}#
                                     (let ((#{id 12848}#
                                             (if (if (vector? #{pat 12600}#)
                                                   (if (= (vector-length
                                                            #{pat 12600}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{pat 12600}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{pat 12600}# 1)
                                               #{pat 12600}#)))
                                       (gensym
                                         (string-append
                                           (symbol->string #{id 12848}#)
                                           " ")))))
                               (#{build-application 4268}#
                                 #f
                                 (#{build-simple-lambda 4277}#
                                   #f
                                   (list (syntax->datum #{pat 12600}#))
                                   #f
                                   (list #{var 12810}#)
                                   '()
                                   (#{expand 4333}#
                                     #{exp 12601}#
                                     (#{extend-env 4295}#
                                       #{labels 12809}#
                                       (list (cons 'syntax
                                                   (cons #{var 12810}# 0)))
                                       #{r 12557}#)
                                     (#{make-binding-wrap 4315}#
                                       (list #{pat 12600}#)
                                       #{labels 12809}#
                                       '(()))
                                     #{mod 12558}#))
                                 (list #{x 12554}#))))
                           (#{gen-clause 12144}#
                             #{x 12554}#
                             #{keys 12555}#
                             (cdr #{clauses 12556}#)
                             #{r 12557}#
                             #{pat 12600}#
                             #t
                             #{exp 12601}#
                             #{mod 12558}#)))
                       #{tmp 12598}#)
                     (let ((#{tmp 13118}#
                             ($sc-dispatch #{tmp 12597}# '(any any any))))
                       (if #{tmp 13118}#
                         (@apply
                           (lambda (#{pat 13120}#
                                    #{fender 13121}#
                                    #{exp 13122}#)
                             (#{gen-clause 12144}#
                               #{x 12554}#
                               #{keys 12555}#
                               (cdr #{clauses 12556}#)
                               #{r 12557}#
                               #{pat 13120}#
                               #{fender 13121}#
                               #{exp 13122}#
                               #{mod 12558}#))
                           #{tmp 13118}#)
                         (syntax-violation
                           'syntax-case
                           "invalid clause"
                           (car #{clauses 12556}#)))))))))))
        (lambda (#{e 12146}#
                 #{r 12147}#
                 #{w 12148}#
                 #{s 12149}#
                 #{mod 12150}#)
          (let ((#{e 12151}#
                  (#{wrap 4326}#
                    (begin
                      (if (if (pair? #{e 12146}#) #{s 12149}# #f)
                        (set-source-properties! #{e 12146}# #{s 12149}#))
                      #{e 12146}#)
                    #{w 12148}#
                    #{mod 12150}#)))
            (let ((#{tmp 12153}#
                    ($sc-dispatch
                      #{e 12151}#
                      '(_ any each-any . each-any))))
              (if #{tmp 12153}#
                (@apply
                  (lambda (#{val 12178}# #{key 12179}# #{m 12180}#)
                    (if (and-map
                          (lambda (#{x 12181}#)
                            (if (if (symbol? #{x 12181}#)
                                  #t
                                  (if (if (vector? #{x 12181}#)
                                        (if (= (vector-length #{x 12181}#) 4)
                                          (eq? (vector-ref #{x 12181}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{x 12181}# 1))
                                    #f))
                              (not (if (if (if (vector? #{x 12181}#)
                                             (if (= (vector-length #{x 12181}#)
                                                    4)
                                               (eq? (vector-ref #{x 12181}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (symbol? (vector-ref #{x 12181}# 1))
                                         #f)
                                     (if (eq? (if (if (vector? #{x 12181}#)
                                                    (if (= (vector-length
                                                             #{x 12181}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{x 12181}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (vector-ref #{x 12181}# 1)
                                                #{x 12181}#)
                                              (if (if (= (vector-length
                                                           '#(syntax-object
                                                              ...
                                                              ((top)
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i2218"))
                                                               #(ribcage
                                                                 (lambda-var-list
                                                                   gen-var
                                                                   strip
                                                                   expand-lambda-case
                                                                   lambda*-formals
                                                                   expand-simple-lambda
                                                                   lambda-formals
                                                                   ellipsis?
                                                                   expand-void
                                                                   eval-local-transformer
                                                                   expand-local-syntax
                                                                   expand-body
                                                                   expand-macro
                                                                   expand-application
                                                                   expand-expr
                                                                   expand
                                                                   syntax-type
                                                                   parse-when-list
                                                                   expand-install-global
                                                                   expand-top-sequence
                                                                   expand-sequence
                                                                   source-wrap
                                                                   wrap
                                                                   bound-id-member?
                                                                   distinct-bound-ids?
                                                                   valid-bound-ids?
                                                                   bound-id=?
                                                                   free-id=?
                                                                   id-var-name
                                                                   same-marks?
                                                                   join-marks
                                                                   join-wraps
                                                                   smart-append
                                                                   make-binding-wrap
                                                                   extend-ribcage!
                                                                   make-empty-ribcage
                                                                   new-mark
                                                                   anti-mark
                                                                   the-anti-mark
                                                                   top-marked?
                                                                   top-wrap
                                                                   empty-wrap
                                                                   set-ribcage-labels!
                                                                   set-ribcage-marks!
                                                                   set-ribcage-symnames!
                                                                   ribcage-labels
                                                                   ribcage-marks
                                                                   ribcage-symnames
                                                                   ribcage?
                                                                   make-ribcage
                                                                   gen-labels
                                                                   gen-label
                                                                   make-rename
                                                                   rename-marks
                                                                   rename-new
                                                                   rename-old
                                                                   subst-rename?
                                                                   wrap-subst
                                                                   wrap-marks
                                                                   make-wrap
                                                                   id-sym-name&marks
                                                                   id-sym-name
                                                                   id?
                                                                   nonsymbol-id?
                                                                   global-extend
                                                                   lookup
                                                                   macros-only-env
                                                                   extend-var-env
                                                                   extend-env
                                                                   null-env
                                                                   binding-value
                                                                   binding-type
                                                                   make-binding
                                                                   arg-check
                                                                   source-annotation
                                                                   no-source
                                                                   set-syntax-object-module!
                                                                   set-syntax-object-wrap!
                                                                   set-syntax-object-expression!
                                                                   syntax-object-module
                                                                   syntax-object-wrap
                                                                   syntax-object-expression
                                                                   syntax-object?
                                                                   make-syntax-object
                                                                   build-lexical-var
                                                                   build-letrec
                                                                   build-named-let
                                                                   build-let
                                                                   build-sequence
                                                                   build-data
                                                                   build-primref
                                                                   build-lambda-case
                                                                   build-case-lambda
                                                                   build-simple-lambda
                                                                   build-global-definition
                                                                   build-global-assignment
                                                                   build-global-reference
                                                                   analyze-variable
                                                                   build-lexical-assignment
                                                                   build-lexical-reference
                                                                   build-dynlet
                                                                   build-conditional
                                                                   build-application
                                                                   build-void
                                                                   maybe-name-value!
                                                                   decorate-source
                                                                   get-global-definition-hook
                                                                   put-global-definition-hook
                                                                   gensym-hook
                                                                   local-eval-hook
                                                                   top-level-eval-hook
                                                                   fx<
                                                                   fx=
                                                                   fx-
                                                                   fx+
                                                                   set-lambda-meta!
                                                                   lambda-meta
                                                                   lambda?
                                                                   make-dynlet
                                                                   make-letrec
                                                                   make-let
                                                                   make-lambda-case
                                                                   make-lambda
                                                                   make-sequence
                                                                   make-application
                                                                   make-conditional
                                                                   make-toplevel-define
                                                                   make-toplevel-set
                                                                   make-toplevel-ref
                                                                   make-module-set
                                                                   make-module-ref
                                                                   make-lexical-set
                                                                   make-lexical-ref
                                                                   make-primitive-ref
                                                                   make-const
                                                                   make-void)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i467"
                                                                  "i465"
                                                                  "i463"
                                                                  "i461"
                                                                  "i459"
                                                                  "i457"
                                                                  "i455"
                                                                  "i453"
                                                                  "i451"
                                                                  "i449"
                                                                  "i447"
                                                                  "i445"
                                                                  "i443"
                                                                  "i441"
                                                                  "i439"
                                                                  "i437"
                                                                  "i435"
                                                                  "i433"
                                                                  "i431"
                                                                  "i429"
                                                                  "i427"
                                                                  "i425"
                                                                  "i423"
                                                                  "i421"
                                                                  "i419"
                                                                  "i417"
                                                                  "i415"
                                                                  "i413"
                                                                  "i411"
                                                                  "i409"
                                                                  "i407"
                                                                  "i405"
                                                                  "i403"
                                                                  "i401"
                                                                  "i399"
                                                                  "i398"
                                                                  "i396"
                                                                  "i393"
                                                                  "i392"
                                                                  "i391"
                                                                  "i389"
                                                                  "i388"
                                                                  "i386"
                                                                  "i384"
                                                                  "i382"
                                                                  "i380"
                                                                  "i378"
                                                                  "i376"
                                                                  "i374"
                                                                  "i372"
                                                                  "i369"
                                                                  "i367"
                                                                  "i366"
                                                                  "i364"
                                                                  "i362"
                                                                  "i360"
                                                                  "i358"
                                                                  "i357"
                                                                  "i356"
                                                                  "i355"
                                                                  "i353"
                                                                  "i352"
                                                                  "i349"
                                                                  "i347"
                                                                  "i345"
                                                                  "i343"
                                                                  "i341"
                                                                  "i339"
                                                                  "i337"
                                                                  "i336"
                                                                  "i335"
                                                                  "i333"
                                                                  "i331"
                                                                  "i330"
                                                                  "i327"
                                                                  "i326"
                                                                  "i324"
                                                                  "i322"
                                                                  "i320"
                                                                  "i318"
                                                                  "i316"
                                                                  "i314"
                                                                  "i312"
                                                                  "i310"
                                                                  "i308"
                                                                  "i305"
                                                                  "i303"
                                                                  "i301"
                                                                  "i299"
                                                                  "i297"
                                                                  "i295"
                                                                  "i293"
                                                                  "i291"
                                                                  "i289"
                                                                  "i287"
                                                                  "i285"
                                                                  "i283"
                                                                  "i281"
                                                                  "i279"
                                                                  "i277"
                                                                  "i275"
                                                                  "i273"
                                                                  "i271"
                                                                  "i269"
                                                                  "i267"
                                                                  "i265"
                                                                  "i263"
                                                                  "i261"
                                                                  "i260"
                                                                  "i257"
                                                                  "i255"
                                                                  "i254"
                                                                  "i253"
                                                                  "i252"
                                                                  "i251"
                                                                  "i249"
                                                                  "i247"
                                                                  "i245"
                                                                  "i242"
                                                                  "i240"
                                                                  "i238"
                                                                  "i236"
                                                                  "i234"
                                                                  "i232"
                                                                  "i230"
                                                                  "i228"
                                                                  "i226"
                                                                  "i224"
                                                                  "i222"
                                                                  "i220"
                                                                  "i218"
                                                                  "i216"
                                                                  "i214"
                                                                  "i212"
                                                                  "i210"
                                                                  "i208"))
                                                               #(ribcage
                                                                 (define-structure
                                                                   define-expansion-accessors
                                                                   define-expansion-constructors)
                                                                 ((top)
                                                                  (top)
                                                                  (top))
                                                                 ("i46"
                                                                  "i45"
                                                                  "i44")))
                                                              (hygiene guile)))
                                                         4)
                                                    #t
                                                    #f)
                                                '...
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i2218"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        expand-lambda-case
                                                        lambda*-formals
                                                        expand-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        expand-void
                                                        eval-local-transformer
                                                        expand-local-syntax
                                                        expand-body
                                                        expand-macro
                                                        expand-application
                                                        expand-expr
                                                        expand
                                                        syntax-type
                                                        parse-when-list
                                                        expand-install-global
                                                        expand-top-sequence
                                                        expand-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i467"
                                                       "i465"
                                                       "i463"
                                                       "i461"
                                                       "i459"
                                                       "i457"
                                                       "i455"
                                                       "i453"
                                                       "i451"
                                                       "i449"
                                                       "i447"
                                                       "i445"
                                                       "i443"
                                                       "i441"
                                                       "i439"
                                                       "i437"
                                                       "i435"
                                                       "i433"
                                                       "i431"
                                                       "i429"
                                                       "i427"
                                                       "i425"
                                                       "i423"
                                                       "i421"
                                                       "i419"
                                                       "i417"
                                                       "i415"
                                                       "i413"
                                                       "i411"
                                                       "i409"
                                                       "i407"
                                                       "i405"
                                                       "i403"
                                                       "i401"
                                                       "i399"
                                                       "i398"
                                                       "i396"
                                                       "i393"
                                                       "i392"
                                                       "i391"
                                                       "i389"
                                                       "i388"
                                                       "i386"
                                                       "i384"
                                                       "i382"
                                                       "i380"
                                                       "i378"
                                                       "i376"
                                                       "i374"
                                                       "i372"
                                                       "i369"
                                                       "i367"
                                                       "i366"
                                                       "i364"
                                                       "i362"
                                                       "i360"
                                                       "i358"
                                                       "i357"
                                                       "i356"
                                                       "i355"
                                                       "i353"
                                                       "i352"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i336"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i330"
                                                       "i327"
                                                       "i326"
                                                       "i324"
                                                       "i322"
                                                       "i320"
                                                       "i318"
                                                       "i316"
                                                       "i314"
                                                       "i312"
                                                       "i310"
                                                       "i308"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i293"
                                                       "i291"
                                                       "i289"
                                                       "i287"
                                                       "i285"
                                                       "i283"
                                                       "i281"
                                                       "i279"
                                                       "i277"
                                                       "i275"
                                                       "i273"
                                                       "i271"
                                                       "i269"
                                                       "i267"
                                                       "i265"
                                                       "i263"
                                                       "i261"
                                                       "i260"
                                                       "i257"
                                                       "i255"
                                                       "i254"
                                                       "i253"
                                                       "i252"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i242"
                                                       "i240"
                                                       "i238"
                                                       "i236"
                                                       "i234"
                                                       "i232"
                                                       "i230"
                                                       "i228"
                                                       "i226"
                                                       "i224"
                                                       "i222"
                                                       "i220"
                                                       "i218"
                                                       "i216"
                                                       "i214"
                                                       "i212"
                                                       "i210"
                                                       "i208"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("i46" "i45" "i44")))
                                                   (hygiene guile))))
                                       (eq? (#{id-var-name 4320}#
                                              #{x 12181}#
                                              '(()))
                                            (#{id-var-name 4320}#
                                              '#(syntax-object
                                                 ...
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i2218"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      expand-lambda-case
                                                      lambda*-formals
                                                      expand-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      expand-void
                                                      eval-local-transformer
                                                      expand-local-syntax
                                                      expand-body
                                                      expand-macro
                                                      expand-application
                                                      expand-expr
                                                      expand
                                                      syntax-type
                                                      parse-when-list
                                                      expand-install-global
                                                      expand-top-sequence
                                                      expand-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      maybe-name-value!
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i467"
                                                     "i465"
                                                     "i463"
                                                     "i461"
                                                     "i459"
                                                     "i457"
                                                     "i455"
                                                     "i453"
                                                     "i451"
                                                     "i449"
                                                     "i447"
                                                     "i445"
                                                     "i443"
                                                     "i441"
                                                     "i439"
                                                     "i437"
                                                     "i435"
                                                     "i433"
                                                     "i431"
                                                     "i429"
                                                     "i427"
                                                     "i425"
                                                     "i423"
                                                     "i421"
                                                     "i419"
                                                     "i417"
                                                     "i415"
                                                     "i413"
                                                     "i411"
                                                     "i409"
                                                     "i407"
                                                     "i405"
                                                     "i403"
                                                     "i401"
                                                     "i399"
                                                     "i398"
                                                     "i396"
                                                     "i393"
                                                     "i392"
                                                     "i391"
                                                     "i389"
                                                     "i388"
                                                     "i386"
                                                     "i384"
                                                     "i382"
                                                     "i380"
                                                     "i378"
                                                     "i376"
                                                     "i374"
                                                     "i372"
                                                     "i369"
                                                     "i367"
                                                     "i366"
                                                     "i364"
                                                     "i362"
                                                     "i360"
                                                     "i358"
                                                     "i357"
                                                     "i356"
                                                     "i355"
                                                     "i353"
                                                     "i352"
                                                     "i349"
                                                     "i347"
                                                     "i345"
                                                     "i343"
                                                     "i341"
                                                     "i339"
                                                     "i337"
                                                     "i336"
                                                     "i335"
                                                     "i333"
                                                     "i331"
                                                     "i330"
                                                     "i327"
                                                     "i326"
                                                     "i324"
                                                     "i322"
                                                     "i320"
                                                     "i318"
                                                     "i316"
                                                     "i314"
                                                     "i312"
                                                     "i310"
                                                     "i308"
                                                     "i305"
                                                     "i303"
                                                     "i301"
                                                     "i299"
                                                     "i297"
                                                     "i295"
                                                     "i293"
                                                     "i291"
                                                     "i289"
                                                     "i287"
                                                     "i285"
                                                     "i283"
                                                     "i281"
                                                     "i279"
                                                     "i277"
                                                     "i275"
                                                     "i273"
                                                     "i271"
                                                     "i269"
                                                     "i267"
                                                     "i265"
                                                     "i263"
                                                     "i261"
                                                     "i260"
                                                     "i257"
                                                     "i255"
                                                     "i254"
                                                     "i253"
                                                     "i252"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i245"
                                                     "i242"
                                                     "i240"
                                                     "i238"
                                                     "i236"
                                                     "i234"
                                                     "i232"
                                                     "i230"
                                                     "i228"
                                                     "i226"
                                                     "i224"
                                                     "i222"
                                                     "i220"
                                                     "i218"
                                                     "i216"
                                                     "i214"
                                                     "i212"
                                                     "i210"
                                                     "i208"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors)
                                                    ((top) (top) (top))
                                                    ("i46" "i45" "i44")))
                                                 (hygiene guile))
                                              '(())))
                                       #f)
                                     #f))
                              #f))
                          #{key 12179}#)
                      (let ((#{x 12307}#
                              (gensym
                                (string-append (symbol->string 'tmp) " "))))
                        (#{build-application 4268}#
                          #{s 12149}#
                          (let ((#{req 12442}# (list 'tmp))
                                (#{vars 12444}# (list #{x 12307}#))
                                (#{exp 12446}#
                                  (#{gen-syntax-case 12145}#
                                    (make-struct/no-tail
                                      (vector-ref %expanded-vtables 3)
                                      #f
                                      'tmp
                                      #{x 12307}#)
                                    #{key 12179}#
                                    #{m 12180}#
                                    #{r 12147}#
                                    #{mod 12150}#)))
                            (let ((#{body 12451}#
                                    (make-struct/no-tail
                                      (vector-ref %expanded-vtables 14)
                                      #f
                                      #{req 12442}#
                                      #f
                                      #f
                                      #f
                                      '()
                                      #{vars 12444}#
                                      #{exp 12446}#
                                      #f)))
                              (make-struct/no-tail
                                (vector-ref %expanded-vtables 13)
                                #f
                                '()
                                #{body 12451}#)))
                          (list (#{expand 4333}#
                                  #{val 12178}#
                                  #{r 12147}#
                                  '(())
                                  #{mod 12150}#))))
                      (syntax-violation
                        'syntax-case
                        "invalid literals list"
                        #{e 12151}#)))
                  #{tmp 12153}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 12151}#)))))))
    (set! macroexpand
      (lambda*
        (#{x 14909}#
          #:optional
          (#{m 14910}# 'e)
          (#{esew 14911}# '(eval)))
        (#{expand-top-sequence 4329}#
          (list #{x 14909}#)
          '()
          '((top))
          #f
          #{m 14910}#
          #{esew 14911}#
          (cons 'hygiene (module-name (current-module))))))
    (set! identifier?
      (lambda (#{x 14914}#)
        (if (if (vector? #{x 14914}#)
              (if (= (vector-length #{x 14914}#) 4)
                (eq? (vector-ref #{x 14914}# 0) 'syntax-object)
                #f)
              #f)
          (symbol? (vector-ref #{x 14914}# 1))
          #f)))
    (set! datum->syntax
      (lambda (#{id 14939}# #{datum 14940}#)
        (let ((#{wrap 14945}# (vector-ref #{id 14939}# 2))
              (#{module 14946}# (vector-ref #{id 14939}# 3)))
          (vector
            'syntax-object
            #{datum 14940}#
            #{wrap 14945}#
            #{module 14946}#))))
    (set! syntax->datum
      (lambda (#{x 14953}#)
        (#{strip 4346}# #{x 14953}# '(()))))
    (set! syntax-source
      (lambda (#{x 14956}#)
        (#{source-annotation 4294}# #{x 14956}#)))
    (set! generate-temporaries
      (lambda (#{ls 15128}#)
        (begin
          (if (not (list? #{ls 15128}#))
            (syntax-violation
              'generate-temporaries
              "invalid argument"
              #{ls 15128}#))
          (let ((#{mod 15136}#
                  (cons 'hygiene (module-name (current-module)))))
            (map (lambda (#{x 15137}#)
                   (#{wrap 4326}# (gensym) '((top)) #{mod 15136}#))
                 #{ls 15128}#)))))
    (set! free-identifier=?
      (lambda (#{x 15141}# #{y 15142}#)
        (begin
          (if (not (if (if (vector? #{x 15141}#)
                         (if (= (vector-length #{x 15141}#) 4)
                           (eq? (vector-ref #{x 15141}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 15141}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{x 15141}#))
          (if (not (if (if (vector? #{y 15142}#)
                         (if (= (vector-length #{y 15142}#) 4)
                           (eq? (vector-ref #{y 15142}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 15142}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{y 15142}#))
          (if (eq? (if (if (vector? #{x 15141}#)
                         (if (= (vector-length #{x 15141}#) 4)
                           (eq? (vector-ref #{x 15141}# 0) 'syntax-object)
                           #f)
                         #f)
                     (vector-ref #{x 15141}# 1)
                     #{x 15141}#)
                   (if (if (vector? #{y 15142}#)
                         (if (= (vector-length #{y 15142}#) 4)
                           (eq? (vector-ref #{y 15142}# 0) 'syntax-object)
                           #f)
                         #f)
                     (vector-ref #{y 15142}# 1)
                     #{y 15142}#))
            (eq? (#{id-var-name 4320}# #{x 15141}# '(()))
                 (#{id-var-name 4320}# #{y 15142}# '(())))
            #f))))
    (set! bound-identifier=?
      (lambda (#{x 15292}# #{y 15293}#)
        (begin
          (if (not (if (if (vector? #{x 15292}#)
                         (if (= (vector-length #{x 15292}#) 4)
                           (eq? (vector-ref #{x 15292}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 15292}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{x 15292}#))
          (if (not (if (if (vector? #{y 15293}#)
                         (if (= (vector-length #{y 15293}#) 4)
                           (eq? (vector-ref #{y 15293}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 15293}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{y 15293}#))
          (if (if (if (vector? #{x 15292}#)
                    (if (= (vector-length #{x 15292}#) 4)
                      (eq? (vector-ref #{x 15292}# 0) 'syntax-object)
                      #f)
                    #f)
                (if (vector? #{y 15293}#)
                  (if (= (vector-length #{y 15293}#) 4)
                    (eq? (vector-ref #{y 15293}# 0) 'syntax-object)
                    #f)
                  #f)
                #f)
            (if (eq? (vector-ref #{x 15292}# 1)
                     (vector-ref #{y 15293}# 1))
              (#{same-marks? 4319}#
                (car (vector-ref #{x 15292}# 2))
                (car (vector-ref #{y 15293}# 2)))
              #f)
            (eq? #{x 15292}# #{y 15293}#)))))
    (set! syntax-violation
      (lambda*
        (#{who 15426}#
          #{message 15427}#
          #{form 15428}#
          #:optional
          (#{subform 15429}# #f))
        (begin
          (if (not (if (not #{who 15426}#)
                     (not #{who 15426}#)
                     (let ((#{t 15447}# (string? #{who 15426}#)))
                       (if #{t 15447}#
                         #{t 15447}#
                         (symbol? #{who 15426}#)))))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{who 15426}#))
          (if (not (string? #{message 15427}#))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{message 15427}#))
          (throw 'syntax-error
                 #{who 15426}#
                 #{message 15427}#
                 (#{source-annotation 4294}#
                   (if #{form 15428}#
                     #{form 15428}#
                     #{subform 15429}#))
                 (#{strip 4346}# #{form 15428}# '(()))
                 (if #{subform 15429}#
                   (#{strip 4346}# #{subform 15429}# '(()))
                   #f)))))
    (letrec*
      ((#{match-each 15670}#
         (lambda (#{e 16293}#
                  #{p 16294}#
                  #{w 16295}#
                  #{mod 16296}#)
           (if (pair? #{e 16293}#)
             (let ((#{first 16297}#
                     (#{match 15676}#
                       (car #{e 16293}#)
                       #{p 16294}#
                       #{w 16295}#
                       '()
                       #{mod 16296}#)))
               (if #{first 16297}#
                 (let ((#{rest 16300}#
                         (#{match-each 15670}#
                           (cdr #{e 16293}#)
                           #{p 16294}#
                           #{w 16295}#
                           #{mod 16296}#)))
                   (if #{rest 16300}#
                     (cons #{first 16297}# #{rest 16300}#)
                     #f))
                 #f))
             (if (null? #{e 16293}#)
               '()
               (if (if (vector? #{e 16293}#)
                     (if (= (vector-length #{e 16293}#) 4)
                       (eq? (vector-ref #{e 16293}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each 15670}#
                   (vector-ref #{e 16293}# 1)
                   #{p 16294}#
                   (#{join-wraps 4317}#
                     #{w 16295}#
                     (vector-ref #{e 16293}# 2))
                   (vector-ref #{e 16293}# 3))
                 #f)))))
       (#{match-each-any 15672}#
         (lambda (#{e 16328}# #{w 16329}# #{mod 16330}#)
           (if (pair? #{e 16328}#)
             (let ((#{l 16331}#
                     (#{match-each-any 15672}#
                       (cdr #{e 16328}#)
                       #{w 16329}#
                       #{mod 16330}#)))
               (if #{l 16331}#
                 (cons (#{wrap 4326}#
                         (car #{e 16328}#)
                         #{w 16329}#
                         #{mod 16330}#)
                       #{l 16331}#)
                 #f))
             (if (null? #{e 16328}#)
               '()
               (if (if (vector? #{e 16328}#)
                     (if (= (vector-length #{e 16328}#) 4)
                       (eq? (vector-ref #{e 16328}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each-any 15672}#
                   (vector-ref #{e 16328}# 1)
                   (#{join-wraps 4317}#
                     #{w 16329}#
                     (vector-ref #{e 16328}# 2))
                   #{mod 16330}#)
                 #f)))))
       (#{match-empty 15673}#
         (lambda (#{p 16355}# #{r 16356}#)
           (if (null? #{p 16355}#)
             #{r 16356}#
             (if (eq? #{p 16355}# '_)
               #{r 16356}#
               (if (eq? #{p 16355}# 'any)
                 (cons '() #{r 16356}#)
                 (if (pair? #{p 16355}#)
                   (#{match-empty 15673}#
                     (car #{p 16355}#)
                     (#{match-empty 15673}#
                       (cdr #{p 16355}#)
                       #{r 16356}#))
                   (if (eq? #{p 16355}# 'each-any)
                     (cons '() #{r 16356}#)
                     (let ((#{atom-key 16357}# (vector-ref #{p 16355}# 0)))
                       (if (eqv? #{atom-key 16357}# 'each)
                         (#{match-empty 15673}#
                           (vector-ref #{p 16355}# 1)
                           #{r 16356}#)
                         (if (eqv? #{atom-key 16357}# 'each+)
                           (#{match-empty 15673}#
                             (vector-ref #{p 16355}# 1)
                             (#{match-empty 15673}#
                               (reverse (vector-ref #{p 16355}# 2))
                               (#{match-empty 15673}#
                                 (vector-ref #{p 16355}# 3)
                                 #{r 16356}#)))
                           (if (if (eqv? #{atom-key 16357}# 'free-id)
                                 #t
                                 (eqv? #{atom-key 16357}# 'atom))
                             #{r 16356}#
                             (if (eqv? #{atom-key 16357}# 'vector)
                               (#{match-empty 15673}#
                                 (vector-ref #{p 16355}# 1)
                                 #{r 16356}#)))))))))))))
       (#{combine 15674}#
         (lambda (#{r* 16376}# #{r 16377}#)
           (if (null? (car #{r* 16376}#))
             #{r 16377}#
             (cons (map car #{r* 16376}#)
                   (#{combine 15674}#
                     (map cdr #{r* 16376}#)
                     #{r 16377}#)))))
       (#{match* 15675}#
         (lambda (#{e 15705}#
                  #{p 15706}#
                  #{w 15707}#
                  #{r 15708}#
                  #{mod 15709}#)
           (if (null? #{p 15706}#)
             (if (null? #{e 15705}#) #{r 15708}# #f)
             (if (pair? #{p 15706}#)
               (if (pair? #{e 15705}#)
                 (#{match 15676}#
                   (car #{e 15705}#)
                   (car #{p 15706}#)
                   #{w 15707}#
                   (#{match 15676}#
                     (cdr #{e 15705}#)
                     (cdr #{p 15706}#)
                     #{w 15707}#
                     #{r 15708}#
                     #{mod 15709}#)
                   #{mod 15709}#)
                 #f)
               (if (eq? #{p 15706}# 'each-any)
                 (let ((#{l 15714}#
                         (#{match-each-any 15672}#
                           #{e 15705}#
                           #{w 15707}#
                           #{mod 15709}#)))
                   (if #{l 15714}#
                     (cons #{l 15714}# #{r 15708}#)
                     #f))
                 (let ((#{atom-key 15719}# (vector-ref #{p 15706}# 0)))
                   (if (eqv? #{atom-key 15719}# 'each)
                     (if (null? #{e 15705}#)
                       (#{match-empty 15673}#
                         (vector-ref #{p 15706}# 1)
                         #{r 15708}#)
                       (let ((#{l 15726}#
                               (#{match-each 15670}#
                                 #{e 15705}#
                                 (vector-ref #{p 15706}# 1)
                                 #{w 15707}#
                                 #{mod 15709}#)))
                         (if #{l 15726}#
                           (letrec*
                             ((#{collect 15729}#
                                (lambda (#{l 15782}#)
                                  (if (null? (car #{l 15782}#))
                                    #{r 15708}#
                                    (cons (map car #{l 15782}#)
                                          (#{collect 15729}#
                                            (map cdr #{l 15782}#)))))))
                             (#{collect 15729}# #{l 15726}#))
                           #f)))
                     (if (eqv? #{atom-key 15719}# 'each+)
                       (call-with-values
                         (lambda ()
                           (let ((#{x-pat 15791}# (vector-ref #{p 15706}# 1))
                                 (#{y-pat 15792}# (vector-ref #{p 15706}# 2))
                                 (#{z-pat 15793}# (vector-ref #{p 15706}# 3)))
                             (letrec*
                               ((#{f 15797}#
                                  (lambda (#{e 15799}# #{w 15800}#)
                                    (if (pair? #{e 15799}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{f 15797}#
                                            (cdr #{e 15799}#)
                                            #{w 15800}#))
                                        (lambda (#{xr* 15801}#
                                                 #{y-pat 15802}#
                                                 #{r 15803}#)
                                          (if #{r 15803}#
                                            (if (null? #{y-pat 15802}#)
                                              (let ((#{xr 15804}#
                                                      (#{match 15676}#
                                                        (car #{e 15799}#)
                                                        #{x-pat 15791}#
                                                        #{w 15800}#
                                                        '()
                                                        #{mod 15709}#)))
                                                (if #{xr 15804}#
                                                  (values
                                                    (cons #{xr 15804}#
                                                          #{xr* 15801}#)
                                                    #{y-pat 15802}#
                                                    #{r 15803}#)
                                                  (values #f #f #f)))
                                              (values
                                                '()
                                                (cdr #{y-pat 15802}#)
                                                (#{match 15676}#
                                                  (car #{e 15799}#)
                                                  (car #{y-pat 15802}#)
                                                  #{w 15800}#
                                                  #{r 15803}#
                                                  #{mod 15709}#)))
                                            (values #f #f #f))))
                                      (if (if (vector? #{e 15799}#)
                                            (if (= (vector-length #{e 15799}#)
                                                   4)
                                              (eq? (vector-ref #{e 15799}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (#{f 15797}#
                                          (vector-ref #{e 15799}# 1)
                                          (#{join-wraps 4317}#
                                            #{w 15800}#
                                            #{e 15799}#))
                                        (values
                                          '()
                                          #{y-pat 15792}#
                                          (#{match 15676}#
                                            #{e 15799}#
                                            #{z-pat 15793}#
                                            #{w 15800}#
                                            #{r 15708}#
                                            #{mod 15709}#)))))))
                               (#{f 15797}# #{e 15705}# #{w 15707}#))))
                         (lambda (#{xr* 15832}# #{y-pat 15833}# #{r 15834}#)
                           (if #{r 15834}#
                             (if (null? #{y-pat 15833}#)
                               (if (null? #{xr* 15832}#)
                                 (#{match-empty 15673}#
                                   (vector-ref #{p 15706}# 1)
                                   #{r 15834}#)
                                 (#{combine 15674}# #{xr* 15832}# #{r 15834}#))
                               #f)
                             #f)))
                       (if (eqv? #{atom-key 15719}# 'free-id)
                         (if (if (symbol? #{e 15705}#)
                               #t
                               (if (if (vector? #{e 15705}#)
                                     (if (= (vector-length #{e 15705}#) 4)
                                       (eq? (vector-ref #{e 15705}# 0)
                                            'syntax-object)
                                       #f)
                                     #f)
                                 (symbol? (vector-ref #{e 15705}# 1))
                                 #f))
                           (if (let ((#{i 16197}#
                                       (#{wrap 4326}#
                                         #{e 15705}#
                                         #{w 15707}#
                                         #{mod 15709}#))
                                     (#{j 16198}# (vector-ref #{p 15706}# 1)))
                                 (if (eq? (if (if (vector? #{i 16197}#)
                                                (if (= (vector-length
                                                         #{i 16197}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{i 16197}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{i 16197}# 1)
                                            #{i 16197}#)
                                          (if (if (vector? #{j 16198}#)
                                                (if (= (vector-length
                                                         #{j 16198}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{j 16198}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{j 16198}# 1)
                                            #{j 16198}#))
                                   (eq? (#{id-var-name 4320}#
                                          #{i 16197}#
                                          '(()))
                                        (#{id-var-name 4320}#
                                          #{j 16198}#
                                          '(())))
                                   #f))
                             #{r 15708}#
                             #f)
                           #f)
                         (if (eqv? #{atom-key 15719}# 'atom)
                           (if (equal?
                                 (vector-ref #{p 15706}# 1)
                                 (#{strip 4346}# #{e 15705}# #{w 15707}#))
                             #{r 15708}#
                             #f)
                           (if (eqv? #{atom-key 15719}# 'vector)
                             (if (vector? #{e 15705}#)
                               (#{match 15676}#
                                 (vector->list #{e 15705}#)
                                 (vector-ref #{p 15706}# 1)
                                 #{w 15707}#
                                 #{r 15708}#
                                 #{mod 15709}#)
                               #f))))))))))))
       (#{match 15676}#
         (lambda (#{e 16258}#
                  #{p 16259}#
                  #{w 16260}#
                  #{r 16261}#
                  #{mod 16262}#)
           (if (not #{r 16261}#)
             #f
             (if (eq? #{p 16259}# '_)
               #{r 16261}#
               (if (eq? #{p 16259}# 'any)
                 (cons (#{wrap 4326}#
                         #{e 16258}#
                         #{w 16260}#
                         #{mod 16262}#)
                       #{r 16261}#)
                 (if (if (vector? #{e 16258}#)
                       (if (= (vector-length #{e 16258}#) 4)
                         (eq? (vector-ref #{e 16258}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match* 15675}#
                     (vector-ref #{e 16258}# 1)
                     #{p 16259}#
                     (#{join-wraps 4317}#
                       #{w 16260}#
                       (vector-ref #{e 16258}# 2))
                     #{r 16261}#
                     (vector-ref #{e 16258}# 3))
                   (#{match* 15675}#
                     #{e 16258}#
                     #{p 16259}#
                     #{w 16260}#
                     #{r 16261}#
                     #{mod 16262}#))))))))
      (set! $sc-dispatch
        (lambda (#{e 15677}# #{p 15678}#)
          (if (eq? #{p 15678}# 'any)
            (list #{e 15677}#)
            (if (eq? #{p 15678}# '_)
              '()
              (if (if (vector? #{e 15677}#)
                    (if (= (vector-length #{e 15677}#) 4)
                      (eq? (vector-ref #{e 15677}# 0) 'syntax-object)
                      #f)
                    #f)
                (#{match* 15675}#
                  (vector-ref #{e 15677}# 1)
                  #{p 15678}#
                  (vector-ref #{e 15677}# 2)
                  '()
                  (vector-ref #{e 15677}# 3))
                (#{match* 15675}#
                  #{e 15677}#
                  #{p 15678}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 28920}#)
      (let ((#{tmp 28922}#
              ($sc-dispatch #{x 28920}# '(_ () any . each-any))))
        (if #{tmp 28922}#
          (@apply
            (lambda (#{e1 28926}# #{e2 28927}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("i28893" "i28894"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i28890")))
                       (hygiene guile))
                    (cons '() (cons #{e1 28926}# #{e2 28927}#))))
            #{tmp 28922}#)
          (let ((#{tmp 28928}#
                  ($sc-dispatch
                    #{x 28920}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 28928}#
              (@apply
                (lambda (#{out 28932}#
                         #{in 28933}#
                         #{e1 28934}#
                         #{e2 28935}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("i28899" "i28900" "i28901" "i28902"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28890")))
                           (hygiene guile))
                        #{in 28933}#
                        '()
                        (list #{out 28932}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i28899"
                                            "i28900"
                                            "i28901"
                                            "i28902"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i28890")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 28934}# #{e2 28935}#))))))
                #{tmp 28928}#)
              (let ((#{tmp 28936}#
                      ($sc-dispatch
                        #{x 28920}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 28936}#
                  (@apply
                    (lambda (#{out 28940}#
                             #{in 28941}#
                             #{e1 28942}#
                             #{e2 28943}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("i28909" "i28910" "i28911" "i28912"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i28890")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("i28909" "i28910" "i28911" "i28912"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i28890")))
                                     (hygiene guile))
                                  #{in 28941}#)
                            '()
                            (list #{out 28940}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("i28909"
                                                "i28910"
                                                "i28911"
                                                "i28912"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i28890")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 28942}#
                                                    #{e2 28943}#))))))
                    #{tmp 28936}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 28920}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 28997}#)
      (let ((#{tmp 28999}#
              ($sc-dispatch
                #{x 28997}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 28999}#
          (@apply
            (lambda (#{k 29003}#
                     #{keyword 29004}#
                     #{pattern 29005}#
                     #{template 29006}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("i28960" "i28961" "i28962" "i28963"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i28957")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("i28960" "i28961" "i28962" "i28963"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i28957")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i28960" "i28961" "i28962" "i28963"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i28957")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i28960" "i28961" "i28962" "i28963"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i28957")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i28960" "i28961" "i28962" "i28963"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i28957")))
                               (hygiene guile))
                            #{pattern 29005}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("i28960" "i28961" "i28962" "i28963"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i28957")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("i28960" "i28961" "i28962" "i28963"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i28957")))
                                   (hygiene guile))
                                (cons #{k 29003}#
                                      (map (lambda (#{tmp 28971 29007}#
                                                    #{tmp 28970 29008}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i28960"
                                                                 "i28961"
                                                                 "i28962"
                                                                 "i28963"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i28957")))
                                                            (hygiene guile))
                                                         #{tmp 28970 29008}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i28960"
                                                                 "i28961"
                                                                 "i28962"
                                                                 "i28963"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i28957")))
                                                            (hygiene guile))
                                                         #{tmp 28971 29007}#)))
                                           #{template 29006}#
                                           #{pattern 29005}#))))))
            #{tmp 28999}#)
          (let ((#{tmp 29009}#
                  ($sc-dispatch
                    #{x 28997}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 29009}#
                  (@apply
                    (lambda (#{k 29013}#
                             #{docstring 29014}#
                             #{keyword 29015}#
                             #{pattern 29016}#
                             #{template 29017}#)
                      (string? (syntax->datum #{docstring 29014}#)))
                    #{tmp 29009}#)
                  #f)
              (@apply
                (lambda (#{k 29018}#
                         #{docstring 29019}#
                         #{keyword 29020}#
                         #{pattern 29021}#
                         #{template 29022}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("i28983" "i28984" "i28985" "i28986" "i28987"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28957")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("i28983" "i28984" "i28985" "i28986" "i28987"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i28957")))
                            (hygiene guile)))
                        #{docstring 29019}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i28983"
                                   "i28984"
                                   "i28985"
                                   "i28986"
                                   "i28987"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i28957")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i28983"
                                   "i28984"
                                   "i28985"
                                   "i28986"
                                   "i28987"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i28957")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i28983"
                                        "i28984"
                                        "i28985"
                                        "i28986"
                                        "i28987"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i28957")))
                                   (hygiene guile))
                                #{pattern 29021}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i28983"
                                      "i28984"
                                      "i28985"
                                      "i28986"
                                      "i28987"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i28957")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("i28983"
                                            "i28984"
                                            "i28985"
                                            "i28986"
                                            "i28987"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i28957")))
                                       (hygiene guile))
                                    (cons #{k 29018}#
                                          (map (lambda (#{tmp 28996 29023}#
                                                        #{tmp 28995 29024}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i28983"
                                                                     "i28984"
                                                                     "i28985"
                                                                     "i28986"
                                                                     "i28987"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i28957")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 28995 29024}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i28983"
                                                                     "i28984"
                                                                     "i28985"
                                                                     "i28986"
                                                                     "i28987"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i28957")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 28996 29023}#)))
                                               #{template 29022}#
                                               #{pattern 29021}#))))))
                #{tmp 29009}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 28997}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 29061}#)
      (let ((#{tmp 29063}#
              ($sc-dispatch #{x 29061}# '(_ (any . any) any))))
        (if #{tmp 29063}#
          (@apply
            (lambda (#{name 29067}#
                     #{pattern 29068}#
                     #{template 29069}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("i29038" "i29039" "i29040"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i29035")))
                       (hygiene guile))
                    #{name 29067}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("i29038" "i29039" "i29040"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i29035")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("i29038" "i29039" "i29040"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i29035")))
                                         (hygiene guile))
                                      #{pattern 29068}#)
                                #{template 29069}#))))
            #{tmp 29063}#)
          (let ((#{tmp 29070}#
                  ($sc-dispatch
                    #{x 29061}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 29070}#
                  (@apply
                    (lambda (#{name 29074}#
                             #{pattern 29075}#
                             #{docstring 29076}#
                             #{template 29077}#)
                      (string? (syntax->datum #{docstring 29076}#)))
                    #{tmp 29070}#)
                  #f)
              (@apply
                (lambda (#{name 29078}#
                         #{pattern 29079}#
                         #{docstring 29080}#
                         #{template 29081}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("i29053" "i29054" "i29055" "i29056"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29035")))
                           (hygiene guile))
                        #{name 29078}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("i29053" "i29054" "i29055" "i29056"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i29035")))
                                 (hygiene guile))
                              '()
                              #{docstring 29080}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("i29053"
                                                  "i29054"
                                                  "i29055"
                                                  "i29056"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i29035")))
                                             (hygiene guile))
                                          #{pattern 29079}#)
                                    #{template 29081}#))))
                #{tmp 29070}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 29061}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 29130}#)
      (let ((#{tmp 29132}#
              ($sc-dispatch
                #{x 29130}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 29132}#
              (@apply
                (lambda (#{let* 29136}#
                         #{x 29137}#
                         #{v 29138}#
                         #{e1 29139}#
                         #{e2 29140}#)
                  (and-map identifier? #{x 29137}#))
                #{tmp 29132}#)
              #f)
          (@apply
            (lambda (#{let* 29141}#
                     #{x 29142}#
                     #{v 29143}#
                     #{e1 29144}#
                     #{e2 29145}#)
              (letrec*
                ((#{f 29146}#
                   (lambda (#{bindings 29149}#)
                     (if (null? #{bindings 29149}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("i29116" "i29117"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("i29106"
                                     "i29107"
                                     "i29108"
                                     "i29109"
                                     "i29110"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i29092")))
                                (hygiene guile))
                             (cons '() (cons #{e1 29144}# #{e2 29145}#)))
                       (let ((#{tmp 29150}#
                               (list (#{f 29146}# (cdr #{bindings 29149}#))
                                     (car #{bindings 29149}#))))
                         (let ((#{tmp 29151}#
                                 ($sc-dispatch #{tmp 29150}# '(any any))))
                           (if #{tmp 29151}#
                             (@apply
                               (lambda (#{body 29153}# #{binding 29154}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("i29126" "i29127"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("i29116" "i29117"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i29106"
                                               "i29107"
                                               "i29108"
                                               "i29109"
                                               "i29110"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("i29092")))
                                          (hygiene guile))
                                       (list #{binding 29154}#)
                                       #{body 29153}#))
                               #{tmp 29151}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 29150}#))))))))
                (#{f 29146}# (map list #{x 29142}# #{v 29143}#))))
            #{tmp 29132}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 29130}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 29212}#)
      (let ((#{tmp 29214}#
              ($sc-dispatch
                #{orig-x 29212}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 29214}#
          (@apply
            (lambda (#{var 29218}#
                     #{init 29219}#
                     #{step 29220}#
                     #{e0 29221}#
                     #{e1 29222}#
                     #{c 29223}#)
              (let ((#{tmp 29224}#
                      (map (lambda (#{v 29227}# #{s 29228}#)
                             (let ((#{tmp 29230}#
                                     ($sc-dispatch #{s 29228}# '())))
                               (if #{tmp 29230}#
                                 (@apply (lambda () #{v 29227}#) #{tmp 29230}#)
                                 (let ((#{tmp 29233}#
                                         ($sc-dispatch #{s 29228}# '(any))))
                                   (if #{tmp 29233}#
                                     (@apply
                                       (lambda (#{e 29236}#) #{e 29236}#)
                                       #{tmp 29233}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 29212}#
                                       #{s 29228}#))))))
                           #{var 29218}#
                           #{step 29220}#)))
                (let ((#{tmp 29225}#
                        ($sc-dispatch #{tmp 29224}# 'each-any)))
                  (if #{tmp 29225}#
                    (@apply
                      (lambda (#{step 29242}#)
                        (let ((#{tmp 29244}# ($sc-dispatch #{e1 29222}# '())))
                          (if #{tmp 29244}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i29180"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i29165"
                                              "i29166"
                                              "i29167"
                                              "i29168"
                                              "i29169"
                                              "i29170"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i29162")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i29180"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i29165"
                                              "i29166"
                                              "i29167"
                                              "i29168"
                                              "i29169"
                                              "i29170"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i29162")))
                                         (hygiene guile))
                                      (map list #{var 29218}# #{init 29219}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("i29180"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i29165"
                                                    "i29166"
                                                    "i29167"
                                                    "i29168"
                                                    "i29169"
                                                    "i29170"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("i29162")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i29180"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i29165"
                                                          "i29166"
                                                          "i29167"
                                                          "i29168"
                                                          "i29169"
                                                          "i29170"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i29162")))
                                                     (hygiene guile))
                                                  #{e0 29221}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i29180"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i29165"
                                                          "i29166"
                                                          "i29167"
                                                          "i29168"
                                                          "i29169"
                                                          "i29170"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i29162")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 29223}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("i29180"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i29165"
                                                                        "i29166"
                                                                        "i29167"
                                                                        "i29168"
                                                                        "i29169"
                                                                        "i29170"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("i29162")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 29242}#)))))))
                              #{tmp 29244}#)
                            (let ((#{tmp 29248}#
                                    ($sc-dispatch
                                      #{e1 29222}#
                                      '(any . each-any))))
                              (if #{tmp 29248}#
                                (@apply
                                  (lambda (#{e1 29252}# #{e2 29253}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i29189" "i29190"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i29180"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i29165"
                                                  "i29166"
                                                  "i29167"
                                                  "i29168"
                                                  "i29169"
                                                  "i29170"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i29162")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i29189" "i29190"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i29180"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i29165"
                                                  "i29166"
                                                  "i29167"
                                                  "i29168"
                                                  "i29169"
                                                  "i29170"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i29162")))
                                             (hygiene guile))
                                          (map list
                                               #{var 29218}#
                                               #{init 29219}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("i29189" "i29190"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i29180"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i29165"
                                                        "i29166"
                                                        "i29167"
                                                        "i29168"
                                                        "i29169"
                                                        "i29170"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i29162")))
                                                   (hygiene guile))
                                                #{e0 29221}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i29189"
                                                              "i29190"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i29180"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i29165"
                                                              "i29166"
                                                              "i29167"
                                                              "i29168"
                                                              "i29169"
                                                              "i29170"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i29162")))
                                                         (hygiene guile))
                                                      (cons #{e1 29252}#
                                                            #{e2 29253}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i29189"
                                                              "i29190"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i29180"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i29165"
                                                              "i29166"
                                                              "i29167"
                                                              "i29168"
                                                              "i29169"
                                                              "i29170"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i29162")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 29223}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i29189"
                                                                            "i29190"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i29180"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i29165"
                                                                            "i29166"
                                                                            "i29167"
                                                                            "i29168"
                                                                            "i29169"
                                                                            "i29170"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i29162")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 29242}#)))))))
                                  #{tmp 29248}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 29222}#))))))
                      #{tmp 29225}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 29224}#)))))
            #{tmp 29214}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 29212}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 29539}#
         (lambda (#{p 29563}# #{lev 29564}#)
           (let ((#{tmp 29566}#
                   ($sc-dispatch
                     #{p 29563}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i29285" "i29286"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i29281"
                               "i29279"
                               "i29277"
                               "i29275"
                               "i29273"
                               "i29271"
                               "i29269")))
                           (hygiene guile)))
                       any))))
             (if #{tmp 29566}#
               (@apply
                 (lambda (#{p 29570}#)
                   (if (= #{lev 29564}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("i29289"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("i29285" "i29286"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i29281"
                                  "i29279"
                                  "i29277"
                                  "i29275"
                                  "i29273"
                                  "i29271"
                                  "i29269")))
                              (hygiene guile))
                           #{p 29570}#)
                     (#{quasicons 29541}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("i29289"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i29285" "i29286"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i29281"
                               "i29279"
                               "i29277"
                               "i29275"
                               "i29273"
                               "i29271"
                               "i29269")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("i29289"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i29285" "i29286"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i29281"
                               "i29279"
                               "i29277"
                               "i29275"
                               "i29273"
                               "i29271"
                               "i29269")))
                           (hygiene guile)))
                       (#{quasi 29539}#
                         (list #{p 29570}#)
                         (#{1-}# #{lev 29564}#)))))
                 #{tmp 29566}#)
               (let ((#{tmp 29573}#
                       ($sc-dispatch
                         #{p 29563}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i29285" "i29286"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i29281"
                                   "i29279"
                                   "i29277"
                                   "i29275"
                                   "i29273"
                                   "i29271"
                                   "i29269")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 29573}#
                   (@apply
                     (lambda (#{p 29577}#)
                       (#{quasicons 29541}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i29292"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i29285" "i29286"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i29281"
                                 "i29279"
                                 "i29277"
                                 "i29275"
                                 "i29273"
                                 "i29271"
                                 "i29269")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i29292"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i29285" "i29286"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i29281"
                                 "i29279"
                                 "i29277"
                                 "i29275"
                                 "i29273"
                                 "i29271"
                                 "i29269")))
                             (hygiene guile)))
                         (#{quasi 29539}#
                           (list #{p 29577}#)
                           (#{1+}# #{lev 29564}#))))
                     #{tmp 29573}#)
                   (let ((#{tmp 29580}#
                           ($sc-dispatch #{p 29563}# '(any . any))))
                     (if #{tmp 29580}#
                       (@apply
                         (lambda (#{p 29584}# #{q 29585}#)
                           (let ((#{tmp 29587}#
                                   ($sc-dispatch
                                     #{p 29584}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i29295" "i29296"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i29285" "i29286"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i29281"
                                               "i29279"
                                               "i29277"
                                               "i29275"
                                               "i29273"
                                               "i29271"
                                               "i29269")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 29587}#
                               (@apply
                                 (lambda (#{p 29591}#)
                                   (if (= #{lev 29564}# 0)
                                     (#{quasilist* 29543}#
                                       (map (lambda (#{tmp 29303 29627}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i29301"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i29295" "i29296"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i29285" "i29286"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i29281"
                                                           "i29279"
                                                           "i29277"
                                                           "i29275"
                                                           "i29273"
                                                           "i29271"
                                                           "i29269")))
                                                       (hygiene guile))
                                                    #{tmp 29303 29627}#))
                                            #{p 29591}#)
                                       (#{quasi 29539}#
                                         #{q 29585}#
                                         #{lev 29564}#))
                                     (#{quasicons 29541}#
                                       (#{quasicons 29541}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i29301"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i29295" "i29296"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i29285" "i29286"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i29281"
                                                 "i29279"
                                                 "i29277"
                                                 "i29275"
                                                 "i29273"
                                                 "i29271"
                                                 "i29269")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i29301"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i29295" "i29296"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i29285" "i29286"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i29281"
                                                 "i29279"
                                                 "i29277"
                                                 "i29275"
                                                 "i29273"
                                                 "i29271"
                                                 "i29269")))
                                             (hygiene guile)))
                                         (#{quasi 29539}#
                                           #{p 29591}#
                                           (#{1-}# #{lev 29564}#)))
                                       (#{quasi 29539}#
                                         #{q 29585}#
                                         #{lev 29564}#))))
                                 #{tmp 29587}#)
                               (let ((#{tmp 29632}#
                                       ($sc-dispatch
                                         #{p 29584}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i29295" "i29296"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i29285" "i29286"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i29281"
                                                   "i29279"
                                                   "i29277"
                                                   "i29275"
                                                   "i29273"
                                                   "i29271"
                                                   "i29269")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 29632}#
                                   (@apply
                                     (lambda (#{p 29636}#)
                                       (if (= #{lev 29564}# 0)
                                         (#{quasiappend 29542}#
                                           (map (lambda (#{tmp 29308 29639}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i29306"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i29295"
                                                                "i29296"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i29285"
                                                                "i29286"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i29281"
                                                               "i29279"
                                                               "i29277"
                                                               "i29275"
                                                               "i29273"
                                                               "i29271"
                                                               "i29269")))
                                                           (hygiene guile))
                                                        #{tmp 29308 29639}#))
                                                #{p 29636}#)
                                           (#{quasi 29539}#
                                             #{q 29585}#
                                             #{lev 29564}#))
                                         (#{quasicons 29541}#
                                           (#{quasicons 29541}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i29306"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i29295" "i29296"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i29285" "i29286"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i29281"
                                                     "i29279"
                                                     "i29277"
                                                     "i29275"
                                                     "i29273"
                                                     "i29271"
                                                     "i29269")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i29306"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i29295" "i29296"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i29285" "i29286"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i29281"
                                                     "i29279"
                                                     "i29277"
                                                     "i29275"
                                                     "i29273"
                                                     "i29271"
                                                     "i29269")))
                                                 (hygiene guile)))
                                             (#{quasi 29539}#
                                               #{p 29636}#
                                               (#{1-}# #{lev 29564}#)))
                                           (#{quasi 29539}#
                                             #{q 29585}#
                                             #{lev 29564}#))))
                                     #{tmp 29632}#)
                                   (#{quasicons 29541}#
                                     (#{quasi 29539}#
                                       #{p 29584}#
                                       #{lev 29564}#)
                                     (#{quasi 29539}#
                                       #{q 29585}#
                                       #{lev 29564}#)))))))
                         #{tmp 29580}#)
                       (let ((#{tmp 29653}#
                               ($sc-dispatch #{p 29563}# '#(vector each-any))))
                         (if #{tmp 29653}#
                           (@apply
                             (lambda (#{x 29657}#)
                               (let ((#{x 29660}#
                                       (#{vquasi 29540}#
                                         #{x 29657}#
                                         #{lev 29564}#)))
                                 (let ((#{tmp 29662}#
                                         ($sc-dispatch
                                           #{x 29660}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp 29662}#
                                     (@apply
                                       (lambda (#{x 29666}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29413"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29410"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i29281"
                                                      "i29279"
                                                      "i29277"
                                                      "i29275"
                                                      "i29273"
                                                      "i29271"
                                                      "i29269")))
                                                  (hygiene guile))
                                               (list->vector #{x 29666}#)))
                                       #{tmp 29662}#)
                                     (letrec*
                                       ((#{f 29668}#
                                          (lambda (#{y 29680}# #{k 29681}#)
                                            (let ((#{tmp 29683}#
                                                    ($sc-dispatch
                                                      #{y 29680}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp 29683}#
                                                (@apply
                                                  (lambda (#{y 29686}#)
                                                    (#{k 29681}#
                                                      (map (lambda (#{tmp 29438 29687}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("i29436"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i29418"
                                                                           "i29419"
                                                                           "i29420"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("i29416"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i29410"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i29281"
                                                                          "i29279"
                                                                          "i29277"
                                                                          "i29275"
                                                                          "i29273"
                                                                          "i29271"
                                                                          "i29269")))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp 29438 29687}#))
                                                           #{y 29686}#)))
                                                  #{tmp 29683}#)
                                                (let ((#{tmp 29688}#
                                                        ($sc-dispatch
                                                          #{y 29680}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp 29688}#
                                                    (@apply
                                                      (lambda (#{y 29691}#)
                                                        (#{k 29681}#
                                                          #{y 29691}#))
                                                      #{tmp 29688}#)
                                                    (let ((#{tmp 29692}#
                                                            ($sc-dispatch
                                                              #{y 29680}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp 29692}#
                                                        (@apply
                                                          (lambda (#{y 29695}#
                                                                   #{z 29696}#)
                                                            (#{f 29668}#
                                                              #{z 29696}#
                                                              (lambda (#{ls 29697}#)
                                                                (#{k 29681}#
                                                                  (append
                                                                    #{y 29695}#
                                                                    #{ls 29697}#)))))
                                                          #{tmp 29692}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g29453}#)
                                                                    #((m29454
                                                                        top))
                                                                    #("i29457"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i29451"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i29418"
                                                                      "i29419"
                                                                      "i29420"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("i29416"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i29410"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i29281"
                                                                     "i29279"
                                                                     "i29277"
                                                                     "i29275"
                                                                     "i29273"
                                                                     "i29271"
                                                                     "i29269")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x 29660}#))))))))))
                                       (#{f 29668}#
                                         #{x 29660}#
                                         (lambda (#{ls 29670}#)
                                           (let ((#{tmp 29672}#
                                                   ($sc-dispatch
                                                     #{ls 29670}#
                                                     'each-any)))
                                             (if #{tmp 29672}#
                                               (@apply
                                                 (lambda (#{ g29426 29675}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g29426}#)
                                                               #((m29427 top))
                                                               #("i29431"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("i29425"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i29416"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i29410"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("i29281"
                                                                "i29279"
                                                                "i29277"
                                                                "i29275"
                                                                "i29273"
                                                                "i29271"
                                                                "i29269")))
                                                            (hygiene guile))
                                                         #{ g29426 29675}#))
                                                 #{tmp 29672}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls 29670}#))))))))))
                             #{tmp 29653}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("i29316"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i29285" "i29286"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i29281"
                                        "i29279"
                                        "i29277"
                                        "i29275"
                                        "i29273"
                                        "i29271"
                                        "i29269")))
                                    (hygiene guile))
                                 #{p 29563}#)))))))))))
       (#{vquasi 29540}#
         (lambda (#{p 29725}# #{lev 29726}#)
           (let ((#{tmp 29728}#
                   ($sc-dispatch #{p 29725}# '(any . any))))
             (if #{tmp 29728}#
               (@apply
                 (lambda (#{p 29732}# #{q 29733}#)
                   (let ((#{tmp 29735}#
                           ($sc-dispatch
                             #{p 29732}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("i29324" "i29325"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i29320" "i29321"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i29281"
                                       "i29279"
                                       "i29277"
                                       "i29275"
                                       "i29273"
                                       "i29271"
                                       "i29269")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 29735}#
                       (@apply
                         (lambda (#{p 29739}#)
                           (if (= #{lev 29726}# 0)
                             (#{quasilist* 29543}#
                               (map (lambda (#{tmp 29332 29775}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("i29330"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i29324" "i29325"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i29320" "i29321"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i29281"
                                                   "i29279"
                                                   "i29277"
                                                   "i29275"
                                                   "i29273"
                                                   "i29271"
                                                   "i29269")))
                                               (hygiene guile))
                                            #{tmp 29332 29775}#))
                                    #{p 29739}#)
                               (#{vquasi 29540}# #{q 29733}# #{lev 29726}#))
                             (#{quasicons 29541}#
                               (#{quasicons 29541}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i29330"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i29324" "i29325"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i29320" "i29321"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i29281"
                                         "i29279"
                                         "i29277"
                                         "i29275"
                                         "i29273"
                                         "i29271"
                                         "i29269")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i29330"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i29324" "i29325"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i29320" "i29321"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i29281"
                                         "i29279"
                                         "i29277"
                                         "i29275"
                                         "i29273"
                                         "i29271"
                                         "i29269")))
                                     (hygiene guile)))
                                 (#{quasi 29539}#
                                   #{p 29739}#
                                   (#{1-}# #{lev 29726}#)))
                               (#{vquasi 29540}# #{q 29733}# #{lev 29726}#))))
                         #{tmp 29735}#)
                       (let ((#{tmp 29782}#
                               ($sc-dispatch
                                 #{p 29732}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i29324" "i29325"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i29320" "i29321"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i29281"
                                           "i29279"
                                           "i29277"
                                           "i29275"
                                           "i29273"
                                           "i29271"
                                           "i29269")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 29782}#
                           (@apply
                             (lambda (#{p 29786}#)
                               (if (= #{lev 29726}# 0)
                                 (#{quasiappend 29542}#
                                   (map (lambda (#{tmp 29337 29789}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i29335"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i29324" "i29325"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i29320" "i29321"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i29281"
                                                       "i29279"
                                                       "i29277"
                                                       "i29275"
                                                       "i29273"
                                                       "i29271"
                                                       "i29269")))
                                                   (hygiene guile))
                                                #{tmp 29337 29789}#))
                                        #{p 29786}#)
                                   (#{vquasi 29540}#
                                     #{q 29733}#
                                     #{lev 29726}#))
                                 (#{quasicons 29541}#
                                   (#{quasicons 29541}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i29335"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i29324" "i29325"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i29320" "i29321"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i29281"
                                             "i29279"
                                             "i29277"
                                             "i29275"
                                             "i29273"
                                             "i29271"
                                             "i29269")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i29335"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i29324" "i29325"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i29320" "i29321"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i29281"
                                             "i29279"
                                             "i29277"
                                             "i29275"
                                             "i29273"
                                             "i29271"
                                             "i29269")))
                                         (hygiene guile)))
                                     (#{quasi 29539}#
                                       #{p 29786}#
                                       (#{1-}# #{lev 29726}#)))
                                   (#{vquasi 29540}#
                                     #{q 29733}#
                                     #{lev 29726}#))))
                             #{tmp 29782}#)
                           (#{quasicons 29541}#
                             (#{quasi 29539}# #{p 29732}# #{lev 29726}#)
                             (#{vquasi 29540}# #{q 29733}# #{lev 29726}#)))))))
                 #{tmp 29728}#)
               (let ((#{tmp 29807}# ($sc-dispatch #{p 29725}# '())))
                 (if #{tmp 29807}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i29320" "i29321"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i29281"
                               "i29279"
                               "i29277"
                               "i29275"
                               "i29273"
                               "i29271"
                               "i29269")))
                           (hygiene guile))
                         ()))
                     #{tmp 29807}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 29725}#)))))))
       (#{quasicons 29541}#
         (lambda (#{x 29820}# #{y 29821}#)
           (let ((#{tmp 29822}# (list #{x 29820}# #{y 29821}#)))
             (let ((#{tmp 29823}#
                     ($sc-dispatch #{tmp 29822}# '(any any))))
               (if #{tmp 29823}#
                 (@apply
                   (lambda (#{x 29825}# #{y 29826}#)
                     (let ((#{tmp 29828}#
                             ($sc-dispatch
                               #{y 29826}#
                               '(#(atom "quote") any))))
                       (if #{tmp 29828}#
                         (@apply
                           (lambda (#{dy 29832}#)
                             (let ((#{tmp 29834}#
                                     ($sc-dispatch
                                       #{x 29825}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 29834}#
                                 (@apply
                                   (lambda (#{dx 29838}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("i29359"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("i29355"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i29349" "i29350"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i29344" "i29345"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i29281"
                                                  "i29279"
                                                  "i29277"
                                                  "i29275"
                                                  "i29273"
                                                  "i29271"
                                                  "i29269")))
                                              (hygiene guile))
                                           (cons #{dx 29838}# #{dy 29832}#)))
                                   #{tmp 29834}#)
                                 (if (null? #{dy 29832}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i29361"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i29355"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i29349" "i29350"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i29344" "i29345"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i29281"
                                                "i29279"
                                                "i29277"
                                                "i29275"
                                                "i29273"
                                                "i29271"
                                                "i29269")))
                                            (hygiene guile))
                                         #{x 29825}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i29361"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i29355"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i29349" "i29350"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i29344" "i29345"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i29281"
                                                "i29279"
                                                "i29277"
                                                "i29275"
                                                "i29273"
                                                "i29271"
                                                "i29269")))
                                            (hygiene guile))
                                         #{x 29825}#
                                         #{y 29826}#)))))
                           #{tmp 29828}#)
                         (let ((#{tmp 29843}#
                                 ($sc-dispatch
                                   #{y 29826}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 29843}#
                             (@apply
                               (lambda (#{stuff 29847}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("i29364"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i29349" "i29350"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i29344" "i29345"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i29281"
                                              "i29279"
                                              "i29277"
                                              "i29275"
                                              "i29273"
                                              "i29271"
                                              "i29269")))
                                          (hygiene guile))
                                       (cons #{x 29825}# #{stuff 29847}#)))
                               #{tmp 29843}#)
                             (let ((#{tmp 29848}#
                                     ($sc-dispatch
                                       #{y 29826}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 29848}#
                                 (@apply
                                   (lambda (#{stuff 29852}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("i29367"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i29349" "i29350"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i29344" "i29345"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i29281"
                                                  "i29279"
                                                  "i29277"
                                                  "i29275"
                                                  "i29273"
                                                  "i29271"
                                                  "i29269")))
                                              (hygiene guile))
                                           (cons #{x 29825}# #{stuff 29852}#)))
                                   #{tmp 29848}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("i29369"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i29349" "i29350"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i29344" "i29345"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i29281"
                                              "i29279"
                                              "i29277"
                                              "i29275"
                                              "i29273"
                                              "i29271"
                                              "i29269")))
                                          (hygiene guile))
                                       #{x 29825}#
                                       #{y 29826}#))))))))
                   #{tmp 29823}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 29822}#))))))
       (#{quasiappend 29542}#
         (lambda (#{x 29863}# #{y 29864}#)
           (let ((#{tmp 29866}#
                   ($sc-dispatch #{y 29864}# '(#(atom "quote") ()))))
             (if #{tmp 29866}#
               (@apply
                 (lambda ()
                   (if (null? #{x 29863}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("i29373" "i29374"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("i29281"
                             "i29279"
                             "i29277"
                             "i29275"
                             "i29273"
                             "i29271"
                             "i29269")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 29863}#))
                       (car #{x 29863}#)
                       (let ((#{tmp 29871}#
                               ($sc-dispatch #{x 29863}# 'each-any)))
                         (if #{tmp 29871}#
                           (@apply
                             (lambda (#{p 29875}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("i29385"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i29373" "i29374"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i29281"
                                            "i29279"
                                            "i29277"
                                            "i29275"
                                            "i29273"
                                            "i29271"
                                            "i29269")))
                                        (hygiene guile))
                                     #{p 29875}#))
                             #{tmp 29871}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 29863}#))))))
                 #{tmp 29866}#)
               (if (null? #{x 29863}#)
                 #{y 29864}#
                 (let ((#{tmp 29883}# (list #{x 29863}# #{y 29864}#)))
                   (let ((#{tmp 29884}#
                           ($sc-dispatch #{tmp 29883}# '(each-any any))))
                     (if #{tmp 29884}#
                       (@apply
                         (lambda (#{p 29886}# #{y 29887}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("i29396" "i29397"))
                                     #(ribcage #(_) #((top)) #("i29388"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("i29373" "i29374"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i29281"
                                        "i29279"
                                        "i29277"
                                        "i29275"
                                        "i29273"
                                        "i29271"
                                        "i29269")))
                                    (hygiene guile))
                                 (append #{p 29886}# (list #{y 29887}#))))
                         #{tmp 29884}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 29883}#)))))))))
       (#{quasilist* 29543}#
         (lambda (#{x 29891}# #{y 29892}#)
           (letrec*
             ((#{f 29893}#
                (lambda (#{x 29982}#)
                  (if (null? #{x 29982}#)
                    #{y 29892}#
                    (#{quasicons 29541}#
                      (car #{x 29982}#)
                      (#{f 29893}# (cdr #{x 29982}#)))))))
             (#{f 29893}# #{x 29891}#))))
       (#{emit 29545}#
         (lambda (#{x 29985}#)
           (let ((#{tmp 29987}#
                   ($sc-dispatch #{x 29985}# '(#(atom "quote") any))))
             (if #{tmp 29987}#
               (@apply
                 (lambda (#{x 29991}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("i29463"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i29460"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i29281"
                                "i29279"
                                "i29277"
                                "i29275"
                                "i29273"
                                "i29271"
                                "i29269")))
                            (hygiene guile))
                         #{x 29991}#))
                 #{tmp 29987}#)
               (let ((#{tmp 29992}#
                       ($sc-dispatch
                         #{x 29985}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 29992}#
                   (@apply
                     (lambda (#{x 29996}#)
                       (let ((#{tmp 29997}# (map #{emit 29545}# #{x 29996}#)))
                         (let ((#{tmp 29998}#
                                 ($sc-dispatch #{tmp 29997}# 'each-any)))
                           (if #{tmp 29998}#
                             (@apply
                               (lambda (#{ g29468 30000}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g29468}#)
                                             #((m29469 top))
                                             #("i29473"))
                                           #(ribcage #(x) #((top)) #("i29466"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i29460"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i29281"
                                              "i29279"
                                              "i29277"
                                              "i29275"
                                              "i29273"
                                              "i29271"
                                              "i29269")))
                                          (hygiene guile))
                                       #{ g29468 30000}#))
                               #{tmp 29998}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 29997}#)))))
                     #{tmp 29992}#)
                   (let ((#{tmp 30001}#
                           ($sc-dispatch
                             #{x 29985}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 30001}#
                       (@apply
                         (lambda (#{x 30005}# #{y 30006}#)
                           (letrec*
                             ((#{f 30007}#
                                (lambda (#{x* 30010}#)
                                  (if (null? #{x* 30010}#)
                                    (#{emit 29545}# #{y 30006}#)
                                    (let ((#{tmp 30011}#
                                            (list (#{emit 29545}#
                                                    (car #{x* 30010}#))
                                                  (#{f 30007}#
                                                    (cdr #{x* 30010}#)))))
                                      (let ((#{tmp 30012}#
                                              ($sc-dispatch
                                                #{tmp 30011}#
                                                '(any any))))
                                        (if #{tmp 30012}#
                                          (@apply
                                            (lambda (#{ g29488 30014}#
                                                     #{ g29487 30015}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g29488}#
                                                            #{ g29487}#)
                                                          #((m29489 top)
                                                            (m29489 top))
                                                          #("i29493" "i29494"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("i29482" "i29483"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("i29478" "i29479"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i29460"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i29281"
                                                           "i29279"
                                                           "i29277"
                                                           "i29275"
                                                           "i29273"
                                                           "i29271"
                                                           "i29269")))
                                                       (hygiene guile))
                                                    #{ g29488 30014}#
                                                    #{ g29487 30015}#))
                                            #{tmp 30012}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 30011}#))))))))
                             (#{f 30007}# #{x 30005}#)))
                         #{tmp 30001}#)
                       (let ((#{tmp 30016}#
                               ($sc-dispatch
                                 #{x 29985}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 30016}#
                           (@apply
                             (lambda (#{x 30020}#)
                               (let ((#{tmp 30021}#
                                       (map #{emit 29545}# #{x 30020}#)))
                                 (let ((#{tmp 30022}#
                                         ($sc-dispatch
                                           #{tmp 30021}#
                                           'each-any)))
                                   (if #{tmp 30022}#
                                     (@apply
                                       (lambda (#{ g29500 30024}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g29500}#)
                                                     #((m29501 top))
                                                     #("i29505"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29498"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29460"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i29281"
                                                      "i29279"
                                                      "i29277"
                                                      "i29275"
                                                      "i29273"
                                                      "i29271"
                                                      "i29269")))
                                                  (hygiene guile))
                                               #{ g29500 30024}#))
                                       #{tmp 30022}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 30021}#)))))
                             #{tmp 30016}#)
                           (let ((#{tmp 30025}#
                                   ($sc-dispatch
                                     #{x 29985}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 30025}#
                               (@apply
                                 (lambda (#{x 30029}#)
                                   (let ((#{tmp 30030}#
                                           (map #{emit 29545}# #{x 30029}#)))
                                     (let ((#{tmp 30031}#
                                             ($sc-dispatch
                                               #{tmp 30030}#
                                               'each-any)))
                                       (if #{tmp 30031}#
                                         (@apply
                                           (lambda (#{ g29512 30033}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g29512}#)
                                                         #((m29513 top))
                                                         #("i29517"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i29510"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i29460"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i29281"
                                                          "i29279"
                                                          "i29277"
                                                          "i29275"
                                                          "i29273"
                                                          "i29271"
                                                          "i29269")))
                                                      (hygiene guile))
                                                   #{ g29512 30033}#))
                                           #{tmp 30031}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 30030}#)))))
                                 #{tmp 30025}#)
                               (let ((#{tmp 30034}#
                                       ($sc-dispatch
                                         #{x 29985}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 30034}#
                                   (@apply
                                     (lambda (#{x 30038}#)
                                       (let ((#{tmp 30039}#
                                               (#{emit 29545}# #{x 30038}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g29524}#)
                                                     #((m29525 top))
                                                     #("i29528"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29522"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29460"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i29281"
                                                      "i29279"
                                                      "i29277"
                                                      "i29275"
                                                      "i29273"
                                                      "i29271"
                                                      "i29269")))
                                                  (hygiene guile))
                                               #{tmp 30039}#)))
                                     #{tmp 30034}#)
                                   (let ((#{tmp 30042}#
                                           ($sc-dispatch
                                             #{x 29985}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 30042}#
                                       (@apply
                                         (lambda (#{x 30046}#) #{x 30046}#)
                                         #{tmp 30042}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 29985}#))))))))))))))))))
      (lambda (#{x 29546}#)
        (let ((#{tmp 29548}#
                ($sc-dispatch #{x 29546}# '(_ any))))
          (if #{tmp 29548}#
            (@apply
              (lambda (#{e 29552}#)
                (#{emit 29545}# (#{quasi 29539}# #{e 29552}# 0)))
              #{tmp 29548}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 29546}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 30101}#)
      (letrec*
        ((#{read-file 30102}#
           (lambda (#{fn 30213}# #{k 30214}#)
             (let ((#{p 30215}# (open-input-file #{fn 30213}#)))
               (letrec*
                 ((#{f 30216}#
                    (lambda (#{x 30270}# #{result 30271}#)
                      (if (eof-object? #{x 30270}#)
                        (begin
                          (close-input-port #{p 30215}#)
                          (reverse #{result 30271}#))
                        (#{f 30216}#
                          (read #{p 30215}#)
                          (cons (datum->syntax #{k 30214}# #{x 30270}#)
                                #{result 30271}#))))))
                 (#{f 30216}# (read #{p 30215}#) '()))))))
        (let ((#{tmp 30104}#
                ($sc-dispatch #{x 30101}# '(any any))))
          (if #{tmp 30104}#
            (@apply
              (lambda (#{k 30108}# #{filename 30109}#)
                (let ((#{fn 30110}# (syntax->datum #{filename 30109}#)))
                  (let ((#{tmp 30111}#
                          (#{read-file 30102}#
                            #{fn 30110}#
                            #{filename 30109}#)))
                    (let ((#{tmp 30112}#
                            ($sc-dispatch #{tmp 30111}# 'each-any)))
                      (if #{tmp 30112}#
                        (@apply
                          (lambda (#{exp 30130}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("i30098"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("i30093"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("i30089" "i30090"))
                                      #(ribcage (read-file) ((top)) ("i30073"))
                                      #(ribcage #(x) #((top)) #("i30072")))
                                     (hygiene guile))
                                  #{exp 30130}#))
                          #{tmp 30112}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 30111}#))))))
              #{tmp 30104}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 30101}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 30290}#)
      (let ((#{tmp 30292}#
              ($sc-dispatch #{x 30290}# '(any any))))
        (if #{tmp 30292}#
          (@apply
            (lambda (#{k 30296}# #{filename 30297}#)
              (let ((#{fn 30298}# (syntax->datum #{filename 30297}#)))
                (let ((#{tmp 30299}#
                        (datum->syntax
                          #{filename 30297}#
                          (let ((#{t 30302}# (%search-load-path #{fn 30298}#)))
                            (if #{t 30302}#
                              #{t 30302}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 30290}#
                                #{filename 30297}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i30284"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i30280"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("i30276" "i30277"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i30273")))
                           (hygiene guile))
                        #{tmp 30299}#))))
            #{tmp 30292}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 30290}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 30311}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 30311}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 30314}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 30314}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 30370}#)
      (let ((#{tmp 30372}#
              ($sc-dispatch
                #{x 30370}#
                '(_ any any . each-any))))
        (if #{tmp 30372}#
          (@apply
            (lambda (#{e 30376}# #{m1 30377}# #{m2 30378}#)
              (let ((#{tmp 30379}#
                      (letrec*
                        ((#{f 30425}#
                           (lambda (#{clause 30428}# #{clauses 30429}#)
                             (if (null? #{clauses 30429}#)
                               (let ((#{tmp 30431}#
                                       ($sc-dispatch
                                         #{clause 30428}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("i30329"
                                                    "i30330"
                                                    "i30331"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("i30319"
                                                    "i30320"
                                                    "i30321"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i30316")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 30431}#
                                   (@apply
                                     (lambda (#{e1 30435}# #{e2 30436}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("i30338" "i30339"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("i30329"
                                                     "i30330"
                                                     "i30331"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("i30319"
                                                     "i30320"
                                                     "i30321"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i30316")))
                                                (hygiene guile))
                                             (cons #{e1 30435}# #{e2 30436}#)))
                                     #{tmp 30431}#)
                                   (let ((#{tmp 30437}#
                                           ($sc-dispatch
                                             #{clause 30428}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 30437}#
                                       (@apply
                                         (lambda (#{k 30441}#
                                                  #{e1 30442}#
                                                  #{e2 30443}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("i30344"
                                                         "i30345"
                                                         "i30346"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i30329"
                                                         "i30330"
                                                         "i30331"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i30319"
                                                         "i30320"
                                                         "i30321"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i30316")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30344"
                                                               "i30345"
                                                               "i30346"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30329"
                                                               "i30330"
                                                               "i30331"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30319"
                                                               "i30320"
                                                               "i30321"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i30316")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30344"
                                                               "i30345"
                                                               "i30346"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30329"
                                                               "i30330"
                                                               "i30331"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30319"
                                                               "i30320"
                                                               "i30321"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i30316")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i30344"
                                                                     "i30345"
                                                                     "i30346"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i30329"
                                                                     "i30330"
                                                                     "i30331"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i30319"
                                                                     "i30320"
                                                                     "i30321"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i30316")))
                                                                (hygiene
                                                                  guile))
                                                             #{k 30441}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30344"
                                                               "i30345"
                                                               "i30346"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30329"
                                                               "i30330"
                                                               "i30331"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30319"
                                                               "i30320"
                                                               "i30321"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i30316")))
                                                          (hygiene guile))
                                                       (cons #{e1 30442}#
                                                             #{e2 30443}#))))
                                         #{tmp 30437}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 30370}#
                                         #{clause 30428}#)))))
                               (let ((#{tmp 30451}#
                                       (#{f 30425}#
                                         (car #{clauses 30429}#)
                                         (cdr #{clauses 30429}#))))
                                 (let ((#{tmp 30454}#
                                         ($sc-dispatch
                                           #{clause 30428}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 30454}#
                                     (@apply
                                       (lambda (#{k 30458}#
                                                #{e1 30459}#
                                                #{e2 30460}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("i30360"
                                                       "i30361"
                                                       "i30362"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("i30356"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("i30329"
                                                       "i30330"
                                                       "i30331"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("i30319"
                                                       "i30320"
                                                       "i30321"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i30316")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i30360"
                                                             "i30361"
                                                             "i30362"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i30356"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i30329"
                                                             "i30330"
                                                             "i30331"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i30319"
                                                             "i30320"
                                                             "i30321"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i30316")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i30360"
                                                             "i30361"
                                                             "i30362"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i30356"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i30329"
                                                             "i30330"
                                                             "i30331"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i30319"
                                                             "i30320"
                                                             "i30321"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i30316")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i30360"
                                                                   "i30361"
                                                                   "i30362"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i30356"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i30329"
                                                                   "i30330"
                                                                   "i30331"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i30319"
                                                                   "i30320"
                                                                   "i30321"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i30316")))
                                                              (hygiene guile))
                                                           #{k 30458}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i30360"
                                                             "i30361"
                                                             "i30362"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i30356"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i30329"
                                                             "i30330"
                                                             "i30331"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i30319"
                                                             "i30320"
                                                             "i30321"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i30316")))
                                                        (hygiene guile))
                                                     (cons #{e1 30459}#
                                                           #{e2 30460}#))
                                               #{tmp 30451}#))
                                       #{tmp 30454}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 30370}#
                                       #{clause 30428}#))))))))
                        (#{f 30425}# #{m1 30377}# #{m2 30378}#))))
                (let ((#{body 30380}# #{tmp 30379}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("i30327"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("i30319" "i30320" "i30321"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i30316")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("i30327"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("i30319" "i30320" "i30321"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i30316")))
                                       (hygiene guile))
                                    #{e 30376}#))
                        #{body 30380}#))))
            #{tmp 30372}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 30370}#))))))

(define make-variable-transformer
  (lambda (#{proc 30478}#)
    (if (procedure? #{proc 30478}#)
      (letrec*
        ((#{trans 30479}#
           (lambda (#{x 30485}#)
             (#{proc 30478}# #{x 30485}#))))
        (begin
          (set-procedure-property!
            #{trans 30479}#
            'variable-transformer
            #t)
          #{trans 30479}#))
      (error "variable transformer not a procedure"
             #{proc 30478}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 30517}#)
      (let ((#{tmp 30519}#
              ($sc-dispatch #{x 30517}# '(_ any))))
        (if #{tmp 30519}#
          (@apply
            (lambda (#{e 30523}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("i30492"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i30489")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("i30492"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i30489")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("i30492"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i30489")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("i30492"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i30489")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("i30492"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i30489")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("i30492"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i30489")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("i30492"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i30489")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i30492"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30489")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i30492"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i30489")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i30492"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i30489")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i30492"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i30489")))
                                         (hygiene guile))
                                      #{e 30523}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i30492"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30489")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i30492"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30489")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i30492"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30489")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i30492"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i30489")))
                                         (hygiene guile))
                                      (cons #{e 30523}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i30492"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i30489")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i30492"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i30489")))
                                                (hygiene guile)))))))))
            #{tmp 30519}#)
          (let ((#{tmp 30524}#
                  ($sc-dispatch
                    #{x 30517}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i30489")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 30524}#
                  (@apply
                    (lambda (#{id 30528}#
                             #{exp1 30529}#
                             #{var 30530}#
                             #{val 30531}#
                             #{exp2 30532}#)
                      (if (identifier? #{id 30528}#)
                        (identifier? #{var 30530}#)
                        #f))
                    #{tmp 30524}#)
                  #f)
              (@apply
                (lambda (#{id 30533}#
                         #{exp1 30534}#
                         #{var 30535}#
                         #{val 30536}#
                         #{exp2 30537}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("i30507" "i30508" "i30509" "i30510" "i30511"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i30489")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("i30507"
                                      "i30508"
                                      "i30509"
                                      "i30510"
                                      "i30511"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i30489")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("i30507"
                                       "i30508"
                                       "i30509"
                                       "i30510"
                                       "i30511"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i30489")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i30507"
                                         "i30508"
                                         "i30509"
                                         "i30510"
                                         "i30511"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30489")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i30507"
                                         "i30508"
                                         "i30509"
                                         "i30510"
                                         "i30511"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30489")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i30507"
                                            "i30508"
                                            "i30509"
                                            "i30510"
                                            "i30511"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i30489")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i30507"
                                            "i30508"
                                            "i30509"
                                            "i30510"
                                            "i30511"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i30489")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("i30507"
                                             "i30508"
                                             "i30509"
                                             "i30510"
                                             "i30511"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i30489")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30507"
                                                        "i30508"
                                                        "i30509"
                                                        "i30510"
                                                        "i30511"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30489")))
                                                   (hygiene guile))
                                                #{var 30535}#
                                                #{val 30536}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30507"
                                                        "i30508"
                                                        "i30509"
                                                        "i30510"
                                                        "i30511"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30489")))
                                                   (hygiene guile))
                                                #{exp2 30537}#))
                                    (list (cons #{id 30533}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i30507"
                                                         "i30508"
                                                         "i30509"
                                                         "i30510"
                                                         "i30511"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i30489")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i30507"
                                                         "i30508"
                                                         "i30509"
                                                         "i30510"
                                                         "i30511"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i30489")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30507"
                                                        "i30508"
                                                        "i30509"
                                                        "i30510"
                                                        "i30511"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30489")))
                                                   (hygiene guile))
                                                (cons #{exp1 30534}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i30507"
                                                               "i30508"
                                                               "i30509"
                                                               "i30510"
                                                               "i30511"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i30489")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i30507"
                                                               "i30508"
                                                               "i30509"
                                                               "i30510"
                                                               "i30511"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i30489")))
                                                          (hygiene guile))))))
                                    (list #{id 30533}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30507"
                                                        "i30508"
                                                        "i30509"
                                                        "i30510"
                                                        "i30511"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30489")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i30507"
                                                              "i30508"
                                                              "i30509"
                                                              "i30510"
                                                              "i30511"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i30489")))
                                                         (hygiene guile))
                                                      #{id 30533}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30507"
                                                        "i30508"
                                                        "i30509"
                                                        "i30510"
                                                        "i30511"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30489")))
                                                   (hygiene guile))
                                                #{exp1 30534}#))))))
                #{tmp 30524}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 30517}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 30569}#)
      (let ((#{tmp 30571}#
              ($sc-dispatch
                #{x 30569}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 30571}#
          (@apply
            (lambda (#{id 30575}#
                     #{args 30576}#
                     #{b0 30577}#
                     #{b1 30578}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("i30551" "i30552" "i30553" "i30554"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i30548")))
                       (hygiene guile))
                    #{id 30575}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("i30551" "i30552" "i30553" "i30554"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i30548")))
                             (hygiene guile))
                          (cons #{args 30576}#
                                (cons #{b0 30577}# #{b1 30578}#)))))
            #{tmp 30571}#)
          (let ((#{tmp 30579}#
                  ($sc-dispatch #{x 30569}# '(_ any any))))
            (if (if #{tmp 30579}#
                  (@apply
                    (lambda (#{id 30583}# #{val 30584}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i30561" "i30562"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i30548")))
                           (hygiene guile))))
                    #{tmp 30579}#)
                  #f)
              (@apply
                (lambda (#{id 30585}# #{val 30586}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i30565" "i30566"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i30548")))
                           (hygiene guile))
                        #{id 30585}#
                        #{val 30586}#))
                #{tmp 30579}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 30569}#))))))))

